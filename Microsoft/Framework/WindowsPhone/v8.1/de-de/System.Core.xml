<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Core</name>
  </assembly>
  <members>
    <member name="T:System.Action`10">
      <summary>Kapselt eine Methode, die über 10 Parameter verfügt und keinen Wert zurückgibt.</summary>
      <param name="arg1">Der erste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg2">Der zweite Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg3">Der dritte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg4">Der vierte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg5">Der fünfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg6">Der sechste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg7">Der siebte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg8">Der achte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg9">Der neunte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg10">Der zehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <typeparam name="T1">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T3">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T4">Der Typ des vierten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T5">Der Typ des fünften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T6">Der Typ des sechsten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T7">Der Typ des siebten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T8">Der Typ des achten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T9">Der Typ des neunten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T10">Der Typ des zehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    </member>
    <member name="T:System.Action`11">
      <summary>Kapselt eine Methode, die über 11 Parameter verfügt und keinen Wert zurückgibt.</summary>
      <param name="arg1">Der erste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg2">Der zweite Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg3">Der dritte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg4">Der vierte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg5">Der fünfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg6">Der sechste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg7">Der siebte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg8">Der achte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg9">Der neunte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg10">Der zehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg11">Der elfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <typeparam name="T1">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T3">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T4">Der Typ des vierten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T5">Der Typ des fünften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T6">Der Typ des sechsten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T7">Der Typ des siebten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T8">Der Typ des achten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T9">Der Typ des neunten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T10">Der Typ des zehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T11">Der Typ des elften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    </member>
    <member name="T:System.Action`12">
      <summary>Kapselt eine Methode, die über 12 Parameter verfügt und keinen Wert zurückgibt.</summary>
      <param name="arg1">Der erste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg2">Der zweite Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg3">Der dritte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg4">Der vierte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg5">Der fünfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg6">Der sechste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg7">Der siebte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg8">Der achte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg9">Der neunte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg10">Der zehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg11">Der elfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg12">Der zwölfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <typeparam name="T1">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T3">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T4">Der Typ des vierten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T5">Der Typ des fünften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T6">Der Typ des sechsten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T7">Der Typ des siebten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T8">Der Typ des achten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T9">Der Typ des neunten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T10">Der Typ des zehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T11">Der Typ des elften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T12">Der Typ des zwölften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    </member>
    <member name="T:System.Action`13">
      <summary>Kapselt eine Methode, die über 13 Parameter verfügt und keinen Wert zurückgibt.</summary>
      <param name="arg1">Der erste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg2">Der zweite Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg3">Der dritte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg4">Der vierte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg5">Der fünfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg6">Der sechste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg7">Der siebte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg8">Der achte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg9">Der neunte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg10">Der zehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg11">Der elfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg12">Der zwölfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg13">Der dreizehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <typeparam name="T1">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T3">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T4">Der Typ des vierten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T5">Der Typ des fünften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T6">Der Typ des sechsten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T7">Der Typ des siebten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T8">Der Typ des achten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T9">Der Typ des neunten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T10">Der Typ des zehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T11">Der Typ des elften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T12">Der Typ des zwölften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T13">Der Typ des dreizehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    </member>
    <member name="T:System.Action`14">
      <summary>Kapselt eine Methode, die über 14 Parameter verfügt und keinen Wert zurückgibt.</summary>
      <param name="arg1">Der erste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg2">Der zweite Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg3">Der dritte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg4">Der vierte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg5">Der fünfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg6">Der sechste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg7">Der siebte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg8">Der achte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg9">Der neunte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg10">Der zehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg11">Der elfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg12">Der zwölfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg13">Der dreizehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg14">Der vierzehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <typeparam name="T1">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T3">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T4">Der Typ des vierten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T5">Der Typ des fünften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T6">Der Typ des sechsten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T7">Der Typ des siebten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T8">Der Typ des achten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T9">Der Typ des neunten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T10">Der Typ des zehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T11">Der Typ des elften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T12">Der Typ des zwölften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T13">Der Typ des dreizehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T14">Der Typ des vierzehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    </member>
    <member name="T:System.Action`15">
      <summary>Kapselt eine Methode, die über 15 Parameter verfügt und keinen Wert zurückgibt.</summary>
      <param name="arg1">Der erste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg2">Der zweite Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg3">Der dritte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg4">Der vierte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg5">Der fünfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg6">Der sechste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg7">Der siebte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg8">Der achte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg9">Der neunte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg10">Der zehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg11">Der elfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg12">Der zwölfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg13">Der dreizehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg14">Der vierzehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg15">Der fünfzehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <typeparam name="T1">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T3">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T4">Der Typ des vierten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T5">Der Typ des fünften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T6">Der Typ des sechsten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T7">Der Typ des siebten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T8">Der Typ des achten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T9">Der Typ des neunten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T10">Der Typ des zehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T11">Der Typ des elften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T12">Der Typ des zwölften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T13">Der Typ des dreizehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T14">Der Typ des vierzehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T15">Der Typ des fünfzehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    </member>
    <member name="T:System.Action`16">
      <summary>Kapselt eine Methode, die über 16 Parameter verfügt und keinen Wert zurückgibt.</summary>
      <param name="arg1">Der erste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg2">Der zweite Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg3">Der dritte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg4">Der vierte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg5">Der fünfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg6">Der sechste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg7">Der siebte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg8">Der achte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg9">Der neunte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg10">Der zehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg11">Der elfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg12">Der zwölfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg13">Der dreizehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg14">Der vierzehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg15">Der fünfzehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg16">Der sechzehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <typeparam name="T1">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T3">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T4">Der Typ des vierten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T5">Der Typ des fünften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T6">Der Typ des sechsten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T7">Der Typ des siebten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T8">Der Typ des achten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T9">Der Typ des neunten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T10">Der Typ des zehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T11">Der Typ des elften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T12">Der Typ des zwölften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T13">Der Typ des dreizehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T14">Der Typ des vierzehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T15">Der Typ des fünfzehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T16">Der Typ des sechzehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    </member>
    <member name="T:System.Action`9">
      <summary>Kapselt eine Methode, die über neun Parameter verfügt und keinen Wert zurückgibt.</summary>
      <param name="arg1">Der erste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg2">Der zweite Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg3">Der dritte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg4">Der vierte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg5">Der fünfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg6">Der sechste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg7">Der siebte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg8">Der achte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg9">Der neunte Parameter der Methode, die dieser Delegat kapselt.</param>
      <typeparam name="T1">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T3">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T4">Der Typ des vierten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T5">Der Typ des fünften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T6">Der Typ des sechsten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T7">Der Typ des siebten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T8">Der Typ des achten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T9">Der Typ des neunten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
    </member>
    <member name="T:System.Func`10">
      <summary>Kapselt eine Methode, die über neun Parameter verfügt und einen Wert von dem Typ zurückgibt, der vom <paramref name="TResult" />-Parameter angegeben wird.</summary>
      <returns>Der Rückgabewert der Methode, die dieser Delegat kapselt.</returns>
      <param name="arg1">Der erste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg2">Der zweite Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg3">Der dritte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg4">Der vierte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg5">Der fünfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg6">Der sechste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg7">Der siebte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg8">Der achte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg9">Der neunte Parameter der Methode, die dieser Delegat kapselt.</param>
      <typeparam name="T1">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T3">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T4">Der Typ des vierten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T5">Der Typ des fünften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T6">Der Typ des sechsten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T7">Der Typ des siebten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T8">Der Typ des achten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T9">Der Typ des neunten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="TResult">Der Typ des Rückgabewerts der Methode, die dieser Delegat kapselt.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`11">
      <summary>Kapselt eine Methode, die über 10 Parameter verfügt und einen Wert von dem Typ zurückgibt, der vom <paramref name="TResult" />-Parameter angegeben wird.</summary>
      <returns>Der Rückgabewert der Methode, die dieser Delegat kapselt.</returns>
      <param name="arg1">Der erste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg2">Der zweite Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg3">Der dritte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg4">Der vierte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg5">Der fünfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg6">Der sechste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg7">Der siebte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg8">Der achte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg9">Der neunte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg10">Der zehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <typeparam name="T1">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T3">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T4">Der Typ des vierten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T5">Der Typ des fünften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T6">Der Typ des sechsten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T7">Der Typ des siebten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T8">Der Typ des achten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T9">Der Typ des neunten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T10">Der Typ des zehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="TResult">Der Typ des Rückgabewerts der Methode, die dieser Delegat kapselt.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`12">
      <summary>Kapselt eine Methode, die über 11 Parameter verfügt und einen Wert von dem Typ zurückgibt, der vom <paramref name="TResult" />-Parameter angegeben wird.</summary>
      <returns>Der Rückgabewert der Methode, die dieser Delegat kapselt.</returns>
      <param name="arg1">Der erste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg2">Der zweite Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg3">Der dritte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg4">Der vierte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg5">Der fünfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg6">Der sechste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg7">Der siebte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg8">Der achte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg9">Der neunte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg10">Der zehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg11">Der elfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <typeparam name="T1">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T3">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T4">Der Typ des vierten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T5">Der Typ des fünften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T6">Der Typ des sechsten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T7">Der Typ des siebten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T8">Der Typ des achten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T9">Der Typ des neunten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T10">Der Typ des zehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T11">Der Typ des elften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="TResult">Der Typ des Rückgabewerts der Methode, die dieser Delegat kapselt.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`13">
      <summary>Kapselt eine Methode, die über 12 Parameter verfügt und einen Wert von dem Typ zurückgibt, der vom <paramref name="TResult" />-Parameter angegeben wird.</summary>
      <returns>Der Rückgabewert der Methode, die dieser Delegat kapselt.</returns>
      <param name="arg1">Der erste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg2">Der zweite Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg3">Der dritte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg4">Der vierte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg5">Der fünfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg6">Der sechste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg7">Der siebte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg8">Der achte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg9">Der neunte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg10">Der zehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg11">Der elfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg12">Der zwölfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <typeparam name="T1">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T3">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T4">Der Typ des vierten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T5">Der Typ des fünften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T6">Der Typ des sechsten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T7">Der Typ des siebten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T8">Der Typ des achten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T9">Der Typ des neunten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T10">Der Typ des zehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T11">Der Typ des elften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T12">Der Typ des zwölften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="TResult">Der Typ des Rückgabewerts der Methode, die dieser Delegat kapselt.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`14">
      <summary>Kapselt eine Methode, die über 13 Parameter verfügt und einen Wert von dem Typ zurückgibt, der vom <paramref name="TResult" />-Parameter angegeben wird.</summary>
      <returns>Der Rückgabewert der Methode, die dieser Delegat kapselt.</returns>
      <param name="arg1">Der erste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg2">Der zweite Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg3">Der dritte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg4">Der vierte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg5">Der fünfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg6">Der sechste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg7">Der siebte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg8">Der achte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg9">Der neunte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg10">Der zehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg11">Der elfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg12">Der zwölfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg13">Der dreizehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <typeparam name="T1">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T3">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T4">Der Typ des vierten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T5">Der Typ des fünften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T6">Der Typ des sechsten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T7">Der Typ des siebten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T8">Der Typ des achten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T9">Der Typ des neunten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T10">Der Typ des zehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T11">Der Typ des elften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T12">Der Typ des zwölften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T13">Der Typ des dreizehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="TResult">Der Typ des Rückgabewerts der Methode, die dieser Delegat kapselt.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`15">
      <summary>Kapselt eine Methode, die über 14 Parameter verfügt und einen Wert von dem Typ zurückgibt, der vom <paramref name="TResult" />-Parameter angegeben wird.</summary>
      <returns>Der Rückgabewert der Methode, die dieser Delegat kapselt.</returns>
      <param name="arg1">Der erste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg2">Der zweite Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg3">Der dritte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg4">Der vierte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg5">Der fünfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg6">Der sechste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg7">Der siebte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg8">Der achte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg9">Der neunte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg10">Der zehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg11">Der elfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg12">Der zwölfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg13">Der dreizehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg14">Der vierzehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <typeparam name="T1">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T3">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T4">Der Typ des vierten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T5">Der Typ des fünften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T6">Der Typ des sechsten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T7">Der Typ des siebten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T8">Der Typ des achten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T9">Der Typ des neunten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T10">Der Typ des zehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T11">Der Typ des elften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T12">Der Typ des zwölften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T13">Der Typ des dreizehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T14">Der Typ des vierzehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="TResult">Der Typ des Rückgabewerts der Methode, die dieser Delegat kapselt.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`16">
      <summary>Kapselt eine Methode, die über 15 Parameter verfügt und einen Wert von dem Typ zurückgibt, der vom <paramref name="TResult" />-Parameter angegeben wird.</summary>
      <returns>Der Rückgabewert der Methode, die dieser Delegat kapselt.</returns>
      <param name="arg1">Der erste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg2">Der zweite Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg3">Der dritte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg4">Der vierte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg5">Der fünfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg6">Der sechste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg7">Der siebte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg8">Der achte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg9">Der neunte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg10">Der zehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg11">Der elfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg12">Der zwölfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg13">Der dreizehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg14">Der vierzehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg15">Der fünfzehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <typeparam name="T1">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T3">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T4">Der Typ des vierten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T5">Der Typ des fünften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T6">Der Typ des sechsten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T7">Der Typ des siebten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T8">Der Typ des achten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T9">Der Typ des neunten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T10">Der Typ des zehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T11">Der Typ des elften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T12">Der Typ des zwölften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T13">Der Typ des dreizehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T14">Der Typ des vierzehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T15">Der Typ des fünfzehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="TResult">Der Typ des Rückgabewerts der Methode, die dieser Delegat kapselt.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`17">
      <summary>Kapselt eine Methode, die über 16 Parameter verfügt und einen Wert von dem Typ zurückgibt, der vom <paramref name="TResult" />-Parameter angegeben wird.</summary>
      <returns>Der Rückgabewert der Methode, die dieser Delegat kapselt.</returns>
      <param name="arg1">Der erste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg2">Der zweite Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg3">Der dritte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg4">Der vierte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg5">Der fünfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg6">Der sechste Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg7">Der siebte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg8">Der achte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg9">Der neunte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg10">Der zehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg11">Der elfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg12">Der zwölfte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg13">Der dreizehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg14">Der vierzehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg15">Der fünfzehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <param name="arg16">Der sechzehnte Parameter der Methode, die dieser Delegat kapselt.</param>
      <typeparam name="T1">Der Typ des ersten Parameters der Methode, die dieser Delegat kapselt.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Der Typ des zweiten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T3">Der Typ des dritten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T4">Der Typ des vierten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T5">Der Typ des fünften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T6">Der Typ des sechsten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T7">Der Typ des siebten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T8">Der Typ des achten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T9">Der Typ des neunten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T10">Der Typ des zehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T11">Der Typ des elften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T12">Der Typ des zwölften Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T13">Der Typ des dreizehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T14">Der Typ des vierzehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T15">Der Typ des fünfzehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="T16">Der Typ des sechzehnten Parameters der Methode, die dieser Delegat kapselt.</typeparam>
      <typeparam name="TResult">Der Typ des Rückgabewerts der Methode, die dieser Delegat kapselt.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary>Stellt eine Menge von Werten dar.</summary>
      <typeparam name="T">Der Typ der Elemente im Hashset.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Collections.Generic.HashSet`1" />-Klasse, die leer ist und den Standardgleichheitsvergleich des Mengentyps verwendet.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Collections.Generic.HashSet`1" />-Klasse, die den Standardgleichheitsvergleich des Mengentyps verwendet, aus der angegebenen Auflistung kopierte Elemente enthält und über ausreichend Kapazität für die Anzahl der kopierten Elemente verfügt.</summary>
      <param name="collection">Die Auflistung, deren Elemente in den neuen Satz kopiert werden.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> ist null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Collections.Generic.HashSet`1" />-Klasse, die den angegebenen Gleichheitsvergleich des Mengentyps verwendet, aus der angegebenen Auflistung kopierte Elemente enthält und über ausreichend Kapazität für die Anzahl der kopierten Elemente verfügt.</summary>
      <param name="collection">Die Auflistung, deren Elemente in den neuen Satz kopiert werden.</param>
      <param name="comparer">Die <see cref="T:System.Collections.Generic.IEqualityComparer`1" />-Implementierung, die zum Vergleichen von Werten in der Menge verwendet werden soll, oder NULL, wenn die <see cref="T:System.Collections.Generic.EqualityComparer`1" />-Standardimplementierung für den Mengentyp verwendet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> ist null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Collections.Generic.HashSet`1" />-Klasse, die leer ist und den angegebenen Gleichheitsvergleich des Mengentyps verwendet.</summary>
      <param name="comparer">Die <see cref="T:System.Collections.Generic.IEqualityComparer`1" />-Implementierung, die zum Vergleichen von Werten in der Menge verwendet werden soll, oder NULL, wenn die <see cref="T:System.Collections.Generic.EqualityComparer`1" />-Standardimplementierung für den Mengentyp verwendet werden soll.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary>Fügt das angegebene Element zu einer Menge hinzu.</summary>
      <returns>true, wenn das Element zum <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt hinzugefügt wird; false, wenn das Element bereits vorhanden ist.</returns>
      <param name="item">Der Element, das zur Menge hinzugefügt wird.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary>Entfernt alle Elemente aus einem <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt.</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary>Ruft das <see cref="T:System.Collections.Generic.IEqualityComparer`1" />-Objekt ab, mit dem die Gleichheit der Werte in der Menge bestimmt wird.</summary>
      <returns>Das <see cref="T:System.Collections.Generic.IEqualityComparer`1" />-Objekt, mit dem die Gleichheit der Werte in der Menge bestimmt wird.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary>Bestimmt, ob ein <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt das angegebene Element enthält.</summary>
      <returns>true, wenn das <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt das angegebene Element enthält, andernfalls false.</returns>
      <param name="item">Das Element, das im <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt gesucht werden soll.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary>Kopiert die Elemente eines <see cref="T:System.Collections.Generic.HashSet`1" />-Objekts in ein Array.</summary>
      <param name="array">Das eindimensionale Array, in das die Elemente aus dem <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt kopiert werden. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> ist null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary>Kopiert die Elemente eines <see cref="T:System.Collections.Generic.HashSet`1" />-Objekts in ein Array, beginnend am angegebenen Index des Arrays.</summary>
      <param name="array">Das eindimensionale Array, in das die Elemente aus dem <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt kopiert werden. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex">Der nullbasierte Index in <paramref name="array" />, ab dem kopiert wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> ist null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> ist kleiner als 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> ist größer als die Länge des Ziel-<paramref name="array" />.- oder -<paramref name="count" /> übersteigt die Größe des Ziel-<paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>Kopiert die angegebene Anzahl von Elementen eines <see cref="T:System.Collections.Generic.HashSet`1" />-Objekts in ein Array, beginnend am angegebenen Index des Arrays.</summary>
      <param name="array">Das eindimensionale Array, in das die Elemente aus dem <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt kopiert werden. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex">Der nullbasierte Index in <paramref name="array" />, ab dem kopiert wird.</param>
      <param name="count">Die Anzahl der Elemente, die nach <paramref name="array" /> kopiert werden.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> ist null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> ist kleiner als 0.- oder -<paramref name="count" /> ist kleiner als 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> ist größer als die Länge des Ziel-<paramref name="array" />.- oder -<paramref name="count" /> ist größer als der verfügbare Platz zwischen dem <paramref name="index" /> und dem Ende des Ziel-<paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary>Ruft die Anzahl der Elemente in einer Menge ab.</summary>
      <returns>Die Anzahl der Elemente in der Menge.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Entfernt alle Elemente in der angegebenen Auflistung aus dem aktuellen <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt.</summary>
      <param name="other">Die Auflistung der Elemente, die aus dem <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt entfernt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> ist null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der ein <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt durchläuft.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" />-Objekt für das <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ändert das aktuelle <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt so, dass es nur noch Elemente enthält, die in diesem Objekt und in der angegebenen Auflistung vorhanden sind.</summary>
      <param name="other">Die Auflistung, die mit dem aktuellen <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt verglichen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> ist null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob ein <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt eine echte Teilmenge der angegebenen Auflistung ist.</summary>
      <returns>true, wenn das <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt eine echte Teilmenge von <paramref name="other" /> ist, andernfalls false.</returns>
      <param name="other">Die Auflistung, die mit dem aktuellen <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt verglichen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> ist null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob ein <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt eine echte Obermenge der angegebenen Auflistung ist.</summary>
      <returns>true, wenn das <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt eine echte Obermenge von <paramref name="other" /> ist, andernfalls false.</returns>
      <param name="other">Die Auflistung, die mit dem aktuellen <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt verglichen werden soll. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> ist null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob ein <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt eine Teilmenge der angegebenen Auflistung ist.</summary>
      <returns>true, wenn das <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt eine Teilmenge von <paramref name="other" /> ist, andernfalls false.</returns>
      <param name="other">Die Auflistung, die mit dem aktuellen <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt verglichen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> ist null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob ein <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt eine Obermenge der angegebenen Auflistung ist.</summary>
      <returns>true, wenn das <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt eine Obermenge von <paramref name="other" /> ist, andernfalls false.</returns>
      <param name="other">Die Auflistung, die mit dem aktuellen <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt verglichen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> ist null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob das aktuelle <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt und eine angegebene Auflistung gemeinsame Elemente enthalten.</summary>
      <returns>true, wenn das <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt und <paramref name="other" /> mindestens ein gemeinsames Element enthalten, andernfalls false.</returns>
      <param name="other">Die Auflistung, die mit dem aktuellen <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt verglichen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> ist null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary>Entfernt das angegebene Element aus einem <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt.</summary>
      <returns>true, wenn das Element gefunden und entfernt wurde, andernfalls false.  Diese Methode gibt false zurück, wenn <paramref name="item" /> nicht im <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt gefunden wurde.</returns>
      <param name="item">Das zu entfernende Element.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>Entfernt alle Elemente aus einer <see cref="T:System.Collections.Generic.HashSet`1" />-Auflistung, die die Bedingungen im angegebenen Prädikat erfüllen.</summary>
      <returns>Die Anzahl der Elemente, die aus der <see cref="T:System.Collections.Generic.HashSet`1" />-Auflistung entfernt wurden.</returns>
      <param name="match">Der <see cref="T:System.Predicate`1" />-Delegat, der die Bedingungen für die Elemente definiert, die entfernt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> ist null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob ein <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt und die angegebene Auflistung dieselben Elemente enthalten.</summary>
      <returns>true, wenn das <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt und <paramref name="other" /> gleich sind, andernfalls false.</returns>
      <param name="other">Die Auflistung, die mit dem aktuellen <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt verglichen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> ist null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ändert das aktuelle <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt so, dass es nur noch Elemente enthält, die entweder in diesem Objekt oder in der angegebenen Auflistung, nicht jedoch in beiden vorhanden sind.</summary>
      <param name="other">Die Auflistung, die mit dem aktuellen <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt verglichen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> ist null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Fügt einem <see cref="T:System.Collections.Generic.ICollection`1" />-Objekt ein Element hinzu.</summary>
      <param name="item">Das Objekt, das dem <see cref="T:System.Collections.Generic.ICollection`1" />-Objekt hinzugefügt werden soll.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> ist schreibgeschützt.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob eine Auflistung schreibgeschützt ist.</summary>
      <returns>true, wenn die Auflistung schreibgeschützt ist, andernfalls false.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerator`1" />-Objekt, mit dem die Auflistung durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />-Objekt, mithilfe dessen eine Auflistung durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary>Legt die Kapazität eines <see cref="T:System.Collections.Generic.HashSet`1" />-Objekts auf die Anzahl der tatsächlich enthaltenen Elemente fest, aufgerundet auf einen nahen, implementierungsabhängigen Wert.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ändert das aktuelle <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt so, dass es alle Elemente enthält, die in diesem Objekt selbst und in der angegebenen Auflistung vorhanden sind.</summary>
      <param name="other">Die Auflistung, die mit dem aktuellen <see cref="T:System.Collections.Generic.HashSet`1" />-Objekt verglichen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> ist null.</exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary>Listet die Elemente eines <see cref="T:System.Collections.Generic.HashSet`1" />-Objekts auf.</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary>Ruft das Element an der aktuellen Position des Enumerators ab.</summary>
      <returns>Das Element in der <see cref="T:System.Collections.Generic.HashSet`1" />-Auflistung an der aktuellen Position des Enumerators.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary>Gibt alle vom <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" />-Objekt verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary>Setzt den Enumerator auf das nächste Element der <see cref="T:System.Collections.Generic.HashSet`1" />-Auflistung.</summary>
      <returns>true, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde; false, wenn der Enumerator das Ende der Auflistung überschritten hat.</returns>
      <exception cref="T:System.InvalidOperationException">Die Auflistung wurde nach dem Erstellen des Enumerators geändert. </exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Ruft das Element an der aktuellen Position des Enumerators ab.</summary>
      <returns>Das Element in der Auflistung an der aktuellen Position des Enumerators (als <see cref="T:System.Object" />).</returns>
      <exception cref="T:System.InvalidOperationException">Der Enumerator ist vor dem ersten Element oder hinter dem letzten Element der Auflistung positioniert. </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Setzt den Enumerator auf seine anfängliche Position vor dem ersten Element in der Auflistung.</summary>
      <exception cref="T:System.InvalidOperationException">Die Auflistung wurde nach dem Erstellen des Enumerators geändert. </exception>
    </member>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>Stellt den binären dynamischen Vorgang in der Aufrufsite dar und stellt die Bindungssemantik und die Details zu dem Vorgang bereit.</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.BinaryOperationBinder" />-Klasse.</summary>
      <param name="operation">Die Art des binären Vorgangs.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen binären Vorgangs aus.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des binären dynamischen Vorgangs aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen binären Vorgangs.</param>
      <param name="arg">Der rechte Operand des dynamischen binären Vorgangs.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des binären dynamischen Vorgangs aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen binären Vorgangs.</param>
      <param name="arg">Der rechte Operand des dynamischen binären Vorgangs.</param>
      <param name="errorSuggestion">Bei einem Bindungsfehler das Ergebnis der Bindung, andernfalls NULL.</param>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>Die Art des binären Vorgangs.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.ExpressionType" />-Objekt, das die Art des binären Vorgangs darstellt.</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Der Ergebnistyp des Vorgangs.</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>Stellt einen Satz von Bindungseinschränkungen für das <see cref="T:System.Dynamic.DynamicMetaObject" /> dar, gemäß denen die dynamische Bindung gültig ist.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>Kombiniert Bindungseinschränkungen aus der Liste von <see cref="T:System.Dynamic.DynamicMetaObject" />-Instanzen zu einem Einschränkungssatz.</summary>
      <returns>Der neue Satz von Bindungseinschränkungen.</returns>
      <param name="contributingObjects">Die Liste der <see cref="T:System.Dynamic.DynamicMetaObject" />-Instanzen, aus der Einschränkungen kombiniert werden sollen.</param>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>Stellt einen leeren Satz von Bindungseinschränkungen dar.Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>Erstellt die Bindungseinschränkung, die den Ausdruck auf beliebige unveränderliche Eigenschaften überprüft.</summary>
      <returns>Die neuen Bindungseinschränkungen.</returns>
      <param name="expression">Der Ausdruck, der die Einschränkungen darstellt.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>Erstellt die Bindungseinschränkung, die den Ausdruck auf Objektinstanzidentität überprüft.</summary>
      <returns>Die neuen Bindungseinschränkungen.</returns>
      <param name="expression">Der zu testende Ausdruck.</param>
      <param name="instance">Die genaue zu testende Objektinstanz.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt die Bindungseinschränkung, die den Ausdruck auf Laufzeittypidentität überprüft.</summary>
      <returns>Die neuen Bindungseinschränkungen.</returns>
      <param name="expression">Der zu testende Ausdruck.</param>
      <param name="type">Der genaue zu testende Typ.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>Führt den Satz von Bindungseinschränkungen mit den aktuellen Bindungseinschränkungen zusammen.</summary>
      <returns>Der neue Satz von Bindungseinschränkungen.</returns>
      <param name="restrictions">Der Satz von Bindungseinschränkungen, der mit den aktuellen Bindungseinschränkungen zusammengeführt werden soll.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>Erstellt die <see cref="T:System.Linq.Expressions.Expression" />, die die Bindungseinschränkungen darstellt.</summary>
      <returns>Die Ausdrucksbaumstruktur, die die Einschränkungen darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>Beschreibt Argumente im dynamischen Bindungsprozess.</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Erstellt eine neue CallInfo, die Argumente im dynamischen Bindungsprozess darstellt.</summary>
      <param name="argCount">Die Anzahl der Argumente.</param>
      <param name="argNames">Die Argumentnamen.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>Erstellt eine neue PositionalArgumentInfo.</summary>
      <param name="argCount">Die Anzahl der Argumente.</param>
      <param name="argNames">Die Argumentnamen.</param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>Die Anzahl der Argumente.</summary>
      <returns>Die Anzahl der Argumente.</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>Die Argumentnamen.</summary>
      <returns>Die schreibgeschützte Auflistung der Argumentnamen.</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>Bestimmt, ob die angegebene CallInfo-Instanz als gleich zur aktuellen Instanz betrachtet wird.</summary>
      <returns>True, wenn die angegebene Instanz gleich der aktuellen Instanz ist, andernfalls false.</returns>
      <param name="obj">Die Instanz von <see cref="T:System.Dynamic.CallInfo" />, die mit der aktuellen Instanz verglichen werden soll.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>Fungiert als Hashfunktion für die aktuelle <see cref="T:System.Dynamic.CallInfo" />.</summary>
      <returns>Ein Hashcode für das aktuelle <see cref="T:System.Dynamic.CallInfo" />.</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>Stellt den dynamischen Vorgang zum Konvertieren in der Aufrufsite dar und stellt die Bindungssemantik und die Details zu dem Vorgang bereit.</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.ConvertBinder" />-Klasse.</summary>
      <param name="type">Der Typ, in den konvertiert werden soll.</param>
      <param name="explicit">Ist true, wenn bei der Konvertierung explizite Konvertierungen berücksichtigt werden sollen, andernfalls false.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Konvertierungsvorgangs aus.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Konvertierungsvorgangs.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Konvertierungsvorgangs.</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>Ruft den Wert ab, der angibt, ob bei der Konvertierung explizite Konvertierungen berücksichtigt werden sollen.</summary>
      <returns>True, wenn eine explizite Konvertierung vorliegt, andernfalls false.</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen Konvertierungsvorgangs aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Konvertierungsvorgangs.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Konvertierungsvorgangs aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Konvertierungsvorgangs.</param>
      <param name="errorSuggestion">Bei einem Bindungsfehler das zu verwendende Bindungsergebnis, andernfalls NULL.</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>Der Typ, in den konvertiert werden soll.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Typ darstellt, in den die Konvertierung erfolgen soll.</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>Stellt den dynamischen Erstellungsvorgang in der Aufrufsite dar und stellt die Bindungssemantik und die Details zu dem Vorgang bereit.</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.CreateInstanceBinder" />-Klasse.</summary>
      <param name="callInfo">Die Signatur der Argumente an der Aufrufsite.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Erstellungsvorgangs aus.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Erstellungsvorgangs.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Erstellungsvorgangs.</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>Ruft die Signatur der Argumente an der Aufrufsite ab.</summary>
      <returns>Die Signatur der Argumente an der Aufrufsite.</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Erstellungsvorgangs aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Erstellungsvorgangs.</param>
      <param name="args">Die Argumente des dynamischen Erstellungsvorgangs.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Erstellungsvorgangs aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Erstellungsvorgangs.</param>
      <param name="args">Die Argumente des dynamischen Erstellungsvorgangs.</param>
      <param name="errorSuggestion">Bei einem Bindungsfehler das zu verwendende Bindungsergebnis, andernfalls NULL.</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>Stellt den dynamischen Vorgang zum Löschen des Index in der Aufrufsite dar und stellt die Bindungssemantik und die Details zu dem Vorgang bereit.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.DeleteIndexBinder" />-Klasse.</summary>
      <param name="callInfo">Die Signatur der Argumente an der Aufrufsite.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Löschen des Index aus.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Löschen von Indizes.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs zum Löschen von Indizes.</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>Ruft die Signatur der Argumente an der Aufrufsite ab.</summary>
      <returns>Die Signatur der Argumente an der Aufrufsite.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Löschen von Indizes aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Löschen von Indizes.</param>
      <param name="indexes">Die Argumente des dynamischen Vorgangs zum Löschen von Indizes.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Vorgangs zum Löschen des Index aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Löschen von Indizes.</param>
      <param name="indexes">Die Argumente des dynamischen Vorgangs zum Löschen von Indizes.</param>
      <param name="errorSuggestion">Bei einem Bindungsfehler das zu verwendende Bindungsergebnis, andernfalls NULL.</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>Stellt den dynamischen Vorgang zum Löschen des Members in der Aufrufsite dar und stellt die Bindungssemantik und die Details zu dem Vorgang bereit.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.DeleteIndexBinder" />-Klasse.</summary>
      <param name="name">Der Name des zu löschenden Members.</param>
      <param name="ignoreCase">Ist true, wenn der Vergleich des Namens ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Löschen des Members aus.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Löschen von Membern.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs zum Löschen von Membern.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Löschen von Membern aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Löschen von Membern.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Vorgangs zum Löschen des Members aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Löschen von Membern.</param>
      <param name="errorSuggestion">Bei einem Bindungsfehler das zu verwendende Bindungsergebnis, andernfalls NULL.</param>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>Ruft den Wert ab, der angibt, ob die Groß-/Kleinschreibung des Membernamens beim Zeichenfolgenvergleich ignoriert werden soll.</summary>
      <returns>True, wenn beim Vergleich der Zeichenfolgen die Groß-/Kleinschreibung ignoriert werden soll, andernfalls false.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>Ruft den Namen des zu löschenden Members ab.</summary>
      <returns>Der Name des zu löschenden Members.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>Stellt die dynamische Bindung und eine Bindungslogik eines Objekts dar, das an der dynamischen Bindung beteiligt ist.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.DynamicMetaObject" />-Klasse.</summary>
      <param name="expression">Der Ausdruck, der dieses <see cref="T:System.Dynamic.DynamicMetaObject" /> während des dynamischen Bindungsvorgangs darstellt.</param>
      <param name="restrictions">Die Bindungseinschränkungen, entsprechend denen die Bindung gültig ist.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.DynamicMetaObject" />-Klasse.</summary>
      <param name="expression">Der Ausdruck, der dieses <see cref="T:System.Dynamic.DynamicMetaObject" /> während des dynamischen Bindungsvorgangs darstellt.</param>
      <param name="restrictions">Die Bindungseinschränkungen, entsprechend denen die Bindung gültig ist.</param>
      <param name="value">Der vom <see cref="T:System.Dynamic.DynamicMetaObject" /> dargestellte Laufzeitwert.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen binären Vorgangs aus.</summary>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="binder">Eine Instanz von <see cref="T:System.Dynamic.BinaryOperationBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <param name="arg">Eine Instanz von <see cref="T:System.Dynamic.DynamicMetaObject" />, die die rechte Seite des binären Vorgangs darstellt.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>Führt die Bindung des dynamischen Konvertierungsvorgangs aus.</summary>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="binder">Eine Instanz von <see cref="T:System.Dynamic.ConvertBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Erstellen einer Instanz aus.</summary>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="binder">Eine Instanz von <see cref="T:System.Dynamic.CreateInstanceBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <param name="args">Ein Array von <see cref="T:System.Dynamic.DynamicMetaObject" />-Instanzen - Argumente zum Erstellungsvorgang von Instanzen.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Löschen des Index aus.</summary>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="binder">Eine Instanz von <see cref="T:System.Dynamic.DeleteIndexBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <param name="indexes">Ein Array von <see cref="T:System.Dynamic.DynamicMetaObject" />-Instanzen - Indizes für den Löschvorgang von Indizes.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Löschen des Members aus.</summary>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="binder">Eine Instanz von <see cref="T:System.Dynamic.DeleteMemberBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Abrufen des Index aus.</summary>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="binder">Eine Instanz von <see cref="T:System.Dynamic.GetIndexBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <param name="indexes">Ein Array von <see cref="T:System.Dynamic.DynamicMetaObject" />-Instanzen - Indizes für den Abrufvorgang von Indizes.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Abrufen des Members aus.</summary>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="binder">Eine Instanz von <see cref="T:System.Dynamic.GetMemberBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Aufrufvorgangs aus.</summary>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="binder">Eine Instanz von <see cref="T:System.Dynamic.InvokeBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <param name="args">Ein Array von <see cref="T:System.Dynamic.DynamicMetaObject" />-Instanzen - Argumente für den Aufrufvorgang.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Aufrufen des Members aus.</summary>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="binder">Eine Instanz von <see cref="T:System.Dynamic.InvokeMemberBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <param name="args">Ein Array von <see cref="T:System.Dynamic.DynamicMetaObject" />-Instanzen - Argumente für den Aufrufvorgang von Membern.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Festlegen des Index aus.</summary>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="binder">Eine Instanz von <see cref="T:System.Dynamic.SetIndexBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <param name="indexes">Ein Array von <see cref="T:System.Dynamic.DynamicMetaObject" />-Instanzen - Indizes für den Festlegungsvorgang von Indizes.</param>
      <param name="value">Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das den Wert für den Vorgang zum Festlegen des Index darstellt.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Festlegen des Members aus.</summary>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="binder">Eine Instanz von <see cref="T:System.Dynamic.SetMemberBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
      <param name="value">Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das den Wert für den Vorgang zum Festlegen des Members darstellt.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>Führt die Bindung des dynamischen unären Vorgangs aus.</summary>
      <returns>Das neue <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="binder">Eine Instanz von <see cref="T:System.Dynamic.UnaryOperationBinder" />, die die Details des dynamischen Vorgangs darstellt.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein Metaobjekt für das angegebene Objekt.</summary>
      <returns>Wenn das angegebene Objekt <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" /> implementiert und kein Remoteobjekt außerhalb der aktuellen AppDomain ist, wird das von <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" /> zurückgegebene spezifische Metaobjekt des Objekts zurückgegeben.Andernfalls wird ein einfaches neues Metaobjekt ohne Einschränkungen erstellt und zurückgegeben.</returns>
      <param name="value">Das Objekt, für das ein Metaobjekt abgerufen werden soll.</param>
      <param name="expression">Der Ausdruck, der dieses <see cref="T:System.Dynamic.DynamicMetaObject" /> während des dynamischen Bindungsvorgangs darstellt.</param>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>Stellt ein leeres Array vom <see cref="T:System.Dynamic.DynamicMetaObject" />-Typ dar.Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>Der Ausdruck, der das <see cref="T:System.Dynamic.DynamicMetaObject" /> während des dynamischen Bindungsvorgangs darstellt.</summary>
      <returns>Der Ausdruck, der das <see cref="T:System.Dynamic.DynamicMetaObject" /> während des dynamischen Bindungsvorgangs darstellt.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>Gibt die Enumeration aller dynamischen Membernamen zurück.</summary>
      <returns>Die Liste der dynamischen Membernamen.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Dynamic.DynamicMetaObject" /> den Laufzeitwert aufweist.</summary>
      <returns>True, wenn das <see cref="T:System.Dynamic.DynamicMetaObject" /> den Laufzeitwert aufweist, andernfalls false.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>Ruft den Limittyp des <see cref="T:System.Dynamic.DynamicMetaObject" /> ab.</summary>
      <returns>
        <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" />, wenn der Laufzeitwert verfügbar ist, andernfalls ein Typ der <see cref="P:System.Dynamic.DynamicMetaObject.Expression" />.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>Die Bindungseinschränkungen, entsprechend denen die Bindung gültig ist.</summary>
      <returns>Der Satz von Bindungseinschränkungen.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>Ruft den <see cref="T:System.Type" /> des Laufzeitwerts ab oder NULL, wenn dem <see cref="T:System.Dynamic.DynamicMetaObject" /> kein Wert zugeordnet ist.</summary>
      <returns>Der <see cref="T:System.Type" /> des Laufzeitwerts oder NULL.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>Der von diesem <see cref="T:System.Dynamic.DynamicMetaObject" /> dargestellte Laufzeitwert.</summary>
      <returns>Der von diesem <see cref="T:System.Dynamic.DynamicMetaObject" /> dargestellte Laufzeitwert.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>Der dynamische Aufrufsitebinder, der am <see cref="T:System.Dynamic.DynamicMetaObject" />-Bindungsprotokoll beteiligt ist.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.DynamicMetaObjectBinder" />-Klasse.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Vorgangs aus.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Führt die Laufzeitbindung des dynamischen Vorgangs für einen Satz von Argumenten aus.</summary>
      <returns>Ein Ausdruck, der Tests für die Argumente des dynamischen Vorgangs ausführt und den dynamischen Vorgang ausführt, wenn die Testergebnisse gültig sind.Wenn die Tests bei nachfolgenden Instanzen des dynamischen Vorgangs fehlschlagen, wird erneut Bind aufgerufen, um eine neue <see cref="T:System.Linq.Expressions.Expression" /> für die neuen Argumenttypen zu erstellen.</returns>
      <param name="args">Ein Array von Argumenten für den dynamischen Vorgang.</param>
      <param name="parameters">Das Array von <see cref="T:System.Linq.Expressions.ParameterExpression" />-Instanzen, die die Parameter der Aufrufsite im Bindungsprozess darstellen.</param>
      <param name="returnLabel">Ein LabelTarget, mit dem das Ergebnis der dynamischen Bindung zurückgegeben wird.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Verzögert die Bindung des Vorgangs bis zu einem späteren Zeitpunkt, wenn die Laufzeitwerte aller Argumente des dynamischen Vorgangs berechnet wurden.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>Verzögert die Bindung des Vorgangs bis zu einem späteren Zeitpunkt, wenn die Laufzeitwerte aller Argumente des dynamischen Vorgangs berechnet wurden.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>Ruft einen Ausdruck ab, der dazu führt, dass die Bindung aktualisiert wird.Dieser gibt an, dass die Bindung des Ausdrucks nicht mehr gültig ist.Dies wird in der Regel verwendet, wenn die "Version" eines dynamischen Objekts geändert wurde.</summary>
      <returns>Der Aktualisierungsausdruck.</returns>
      <param name="type">Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft des resultierenden Ausdrucks; es sind alle Typen zulässig.</param>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>Stellt eine Basisklasse zum Angeben von dynamischen Verhalten zur Laufzeit bereit.Aus dieser Klasse muss geerbt werden, und sie kann nicht direkt instanziiert werden.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>Ermöglicht es abgeleiteten Typen, eine neue Instanz des <see cref="T:System.Dynamic.DynamicObject" />-Typs zu initialisieren.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>Gibt die Enumeration aller dynamischen Membernamen zurück. </summary>
      <returns>Eine Sequenz, die dynamische Membernamen enthält.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>	Stellt ein <see cref="T:System.Dynamic.DynamicMetaObject" /> bereit, das an die dynamischen virtuellen Methoden sendet.Das Objekt kann in einem anderen <see cref="T:System.Dynamic.DynamicMetaObject" /> gekapselt werden, um benutzerdefiniertes Verhalten für einzelne Aktionen bereitzustellen.Diese Methode unterstützt die Dynamic Language Runtime-Infrastruktur für Sprachimplementierungen und ist nicht für die direkte Verwendung im Code vorgesehen.</summary>
      <returns>Ein Objekt des <see cref="T:System.Dynamic.DynamicMetaObject" />-Typs.</returns>
      <param name="parameter">Der Ausdruck, der das an die dynamischen virtuellen Methoden zu sendende <see cref="T:System.Dynamic.DynamicMetaObject" /> darstellt.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>Stellt die Implementierung für binäre Operationen bereit.Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Vorgänge wie Addition oder Multiplikation anzugeben.</summary>
      <returns>true, wenn der Vorgang erfolgreich ist, andernfalls false.Wenn die Methode false zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
      <param name="binder">Stellt Informationen zur binären Operation bereit.Die binder.Operation-Eigenschaft gibt ein <see cref="T:System.Linq.Expressions.ExpressionType" />-Objekt zurück.Für die sum = first + second-Anweisung, in der first und second von der DynamicObject-Klasse abgeleitet werden, gibt binder.Operation beispielsweise ExpressionType.Add zurück.</param>
      <param name="arg">Der rechte Operand für die binäre Operation.Für die sum = first + second-Anweisung, in der first und second von der DynamicObject-Klasse abgeleitet werden, entspricht <paramref name="arg" /> beispielsweise second.</param>
      <param name="result">Das Ergebnis der binären Operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>Stellt die Implementierung für Typkonvertierungsvorgänge bereit.Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Operationen anzugeben, die ein Objekt von einem Typ in einen anderen konvertieren.</summary>
      <returns>true, wenn der Vorgang erfolgreich ist, andernfalls false.Wenn die Methode false zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
      <param name="binder">Stellt Informationen zur Konvertierungsoperation bereit.Die binder.Type-Eigenschaft stellt den Typ bereit, in den das Objekt konvertiert werden muss.Für die Anweisung (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), bei der sampleObject eine Instanz der von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleiteten Klasse ist, gibt binder.Type beispielsweise den <see cref="T:System.String" />-Typ zurück.Die binder.Explicit-Eigenschaft stellt Informationen zur Art der ausgeführten Konvertierung bereit.Für die explizite Konvertierung wird true und für die implizite Konvertierung false zurückgegeben.</param>
      <param name="result">Das Ergebnis des Typkonvertierungsvorgangs.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>Stellt die Implementierung für Vorgänge bereit, die eine neue Instanz eines dynamischen Objekts initialisieren.Diese Methode ist nicht zur Verwendung in C# oder Visual Basic vorgesehen.</summary>
      <returns>true, wenn der Vorgang erfolgreich ist, andernfalls false.Wenn die Methode false zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
      <param name="binder">Stellt Informationen zum Initialisierungsvorgang bereit.</param>
      <param name="args">Die Argumente, die während der Initialisierung an das Objekt übergeben werden.Für den new SampleType(100)-Vorgang, in dem SampleType der von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Typ ist, entspricht <paramref name="args[0]" /> beispielsweise 100.</param>
      <param name="result">Das Ergebnis der Initialisierung.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>Stellt die Implementierung für Vorgänge bereit, die ein Objekt nach Index löschen.Diese Methode ist nicht zur Verwendung in C# oder Visual Basic vorgesehen.</summary>
      <returns>true, wenn der Vorgang erfolgreich ist, andernfalls false.Wenn die Methode false zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
      <param name="binder">Stellt Informationen zum Löschen bereit.</param>
      <param name="indexes">Die zu löschenden Indizes.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Stellt die Implementierung für Vorgänge bereit, die einen Objektmember löschen.Diese Methode ist nicht zur Verwendung in C# oder Visual Basic vorgesehen.</summary>
      <returns>true, wenn der Vorgang erfolgreich ist, andernfalls false.Wenn die Methode false zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
      <param name="binder">Stellt Informationen zum Löschen bereit.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>Stellt die Implementierung für Vorgänge bereit, die einen Wert nach Index abrufen.Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Indexvorgänge anzugeben.</summary>
      <returns>true, wenn der Vorgang erfolgreich ist, andernfalls false.Wenn die Methode false zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.(In den meisten Fällen wird eine Laufzeitausnahme ausgelöst.)</returns>
      <param name="binder">Stellt Informationen zum Vorgang bereit. </param>
      <param name="indexes">Die Indizes, die bei dem Vorgang verwendet werden.Beim sampleObject[3]-Vorgang in C# (sampleObject(3) in Visual Basic), bei dem sampleObject von der DynamicObject -Klasse abgeleitet wird, entspricht <paramref name="indexes[0]" /> beispielsweise 3.</param>
      <param name="result">Das Ergebnis des Indexvorgangs.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>Stellt die Implementierung für Vorgänge bereit, die Memberwerte abrufen.Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Vorgänge wie das Abrufen eines Werts für eine Eigenschaft anzugeben.</summary>
      <returns>true, wenn der Vorgang erfolgreich ist, andernfalls false.Wenn die Methode false zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.(In den meisten Fällen wird eine Laufzeitausnahme ausgelöst.)</returns>
      <param name="binder">Stellt Informationen zum Objekt bereit, das den dynamischen Vorgang aufgerufen hat.Die binder.Name-Eigenschaft gibt den Namen des Members an, für den der dynamische Vorgang ausgeführt wird.Für die Console.WriteLine(sampleObject.SampleProperty)-Anweisung, in der sampleObject eine von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Instanz der Klasse ist, gibt binder.Name beispielsweise "SampleProperty" zurück.Die binder.IgnoreCase-Eigenschaft gibt an, ob der Membername die Groß-/Kleinschreibung berücksichtigt.</param>
      <param name="result">Das Ergebnis des get-Vorgangs.Wenn die Methode z. B. für eine Eigenschaft aufgerufen wird, können Sie <paramref name="result" /> den Eigenschaftswert zuweisen.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>Stellt die Implementierung für Vorgänge bereit, die ein Objekt aufrufen.Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Vorgänge wie das Aufrufen eines Objekts oder Delegaten anzugeben.</summary>
      <returns>true, wenn der Vorgang erfolgreich ist, andernfalls false.Wenn die Methode false zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
      <param name="binder">Stellt Informationen zum Aufrufvorgang bereit.</param>
      <param name="args">Die Argumente, die während des Aufrufvorgangs an das Objekt übergeben werden.Für den sampleObject(100)-Vorgang, in dem sampleObject von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet ist, entspricht <paramref name="args[0]" /> beispielsweise 100.</param>
      <param name="result">Das Ergebnis des Objektaufrufs.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>Stellt die Implementierung für Vorgänge bereit, die einen Member aufrufen.Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Vorgänge wie das Aufrufen einer Methode anzugeben.</summary>
      <returns>true, wenn der Vorgang erfolgreich ist, andernfalls false.Wenn die Methode false zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
      <param name="binder">Stellt Informationen zum dynamischen Vorgang bereit.Die binder.Name-Eigenschaft gibt den Namen des Members an, für den der dynamische Vorgang ausgeführt wird.Für die sampleObject.SampleMethod(100)-Anweisung, in der sampleObject eine von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Instanz der Klasse ist, gibt binder.Name beispielsweise "SampleMethod" zurück.Die binder.IgnoreCase-Eigenschaft gibt an, ob der Membername die Groß-/Kleinschreibung berücksichtigt.</param>
      <param name="args">Die Argumente, die während des Aufrufvorgangs an den Objektmember übergeben werden.Für die Anweisung sampleObject.SampleMethod(100), in der sampleObject von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet ist, entspricht <paramref name="args[0]" /> beispielsweise 100.</param>
      <param name="result">Das Ergebnis des Memberaufrufs.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>Stellt die Implementierung für Vorgänge bereit, die einen Wert nach Index festlegen.Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Vorgänge anzugeben, die auf Objekte mit einem angegebenen Index zugreifen.</summary>
      <returns>true, wenn der Vorgang erfolgreich ist, andernfalls false.Wenn die Methode false zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
      <param name="binder">Stellt Informationen zum Vorgang bereit. </param>
      <param name="indexes">Die Indizes, die bei dem Vorgang verwendet werden.Beim sampleObject[3] = 10-Vorgang in C# (sampleObject(3) = 10 in Visual Basic), bei dem sampleObject von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wird, entspricht <paramref name="indexes[0]" /> z. B. 3.</param>
      <param name="value">Der Wert, der auf das Objekt mit dem angegebenen Index festgelegt werden soll.Beim sampleObject[3] = 10-Vorgang in C# (sampleObject(3) = 10 in Visual Basic), bei dem sampleObject von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitet wird, entspricht <paramref name="value" /> z. B. 10.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>Stellt die Implementierung für Vorgänge bereit, die Memberwerte festlegen.Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Vorgänge wie das Festlegen eines Werts für eine Eigenschaft anzugeben.</summary>
      <returns>true, wenn der Vorgang erfolgreich ist, andernfalls false.Wenn die Methode false zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
      <param name="binder">Stellt Informationen zum Objekt bereit, das den dynamischen Vorgang aufgerufen hat.Die binder.Name-Eigenschaft gibt den Namen des Members an, dem der Wert zugewiesen wird.Für die Anweisung sampleObject.SampleProperty = "Test", in der sampleObject eine von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Instanz der Klasse ist, gibt binder.Name beispielsweise "SampleProperty" zurück.Die binder.IgnoreCase-Eigenschaft gibt an, ob der Membername die Groß-/Kleinschreibung berücksichtigt.</param>
      <param name="value">Der Wert, der auf den Member festgelegt werden soll.Für sampleObject.SampleProperty = "Test", wobei sampleObject eine von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Instanz der Klasse ist, ist der <paramref name="value" /> beispielsweise "Test".</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>Stellt die Implementierung für unäre Operationen bereit.Von der <see cref="T:System.Dynamic.DynamicObject" />-Klasse abgeleitete Klassen können diese Methode überschreiben, um dynamisches Verhalten für Vorgänge wie Negation, Inkrement oder Dekrement anzugeben.</summary>
      <returns>true, wenn der Vorgang erfolgreich ist, andernfalls false.Wenn die Methode false zurückgibt, wird das Verhalten vom Laufzeitbinder der Sprache bestimmt.(In den meisten Fällen wird eine sprachspezifische Laufzeitausnahme ausgelöst.)</returns>
      <param name="binder">Stellt Informationen zur unären Operation bereit.Die binder.Operation-Eigenschaft gibt ein <see cref="T:System.Linq.Expressions.ExpressionType" />-Objekt zurück.Für die negativeNumber = -number-Anweisung, in der number von der DynamicObject-Klasse abgeleitet wird, gibt binder.Operation beispielsweise "Negate" zurück.</param>
      <param name="result">Das Ergebnis der unären Operation.</param>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>Stellt ein Objekt dar, dessen Member zur Laufzeit dynamisch hinzugefügt und entfernt werden können.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>Initialisiert ein neues ExpandoObject ohne Member.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Fügt den angegebenen Wert des <see cref="T:System.Collections.Generic.ICollection`1" /> mit dem angegebenen Schlüssel hinzu.</summary>
      <param name="item">Die <see cref="T:System.Collections.Generic.KeyValuePair`2" />-Struktur, die den der Auflistung hinzuzufügenden Schlüssel und Wert darstellt.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Entfernt alle Elemente aus der Auflistung.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Ermittelt, ob die <see cref="T:System.Collections.Generic.ICollection`1" /> einen bestimmten Schlüssel und Wert enthält.</summary>
      <returns>true, wenn die Auflistung einen bestimmten Schlüssel und einen bestimmten Wert enthält, andernfalls false.</returns>
      <param name="item">Das <see cref="T:System.Collections.Generic.KeyValuePair`2" />, das in der <see cref="T:System.Collections.Generic.ICollection`1" /> gesucht werden soll.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Kopiert die Elemente der <see cref="T:System.Collections.Generic.ICollection`1" /> in ein Array vom Typ <see cref="T:System.Collections.Generic.KeyValuePair`2" />, beginnend am angegebenen Arrayindex.</summary>
      <param name="array">Das eindimensionale Array vom Typ <see cref="T:System.Collections.Generic.KeyValuePair`2" />, in das die <see cref="T:System.Collections.Generic.KeyValuePair`2" />-Elemente aus der <see cref="T:System.Collections.Generic.ICollection`1" /> kopiert werden.Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex">Der nullbasierte Index im <paramref name="array" />, ab dem kopiert wird.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Count">
      <summary>Ruft die Anzahl der Elemente in der <see cref="T:System.Collections.Generic.ICollection`1" /> ab.</summary>
      <returns>Die Anzahl der Elemente in der <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns>true, wenn <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls false.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Entfernt einen Schlüssel und einen Wert aus der Auflistung.</summary>
      <returns>true, wenn der Schlüssel und der Wert gefunden und erfolgreich entfernt wurden, andernfalls false.Diese Methode gibt false zurück, wenn der Schlüssel und der Wert nicht in <see cref="T:System.Collections.Generic.ICollection`1" /> gefunden werden.</returns>
      <param name="item">Die <see cref="T:System.Collections.Generic.KeyValuePair`2" />-Struktur, die den aus der Auflistung zu entfernenden Schlüssel und Wert darstellt.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Add(System.String,System.Object)">
      <summary>Fügt dem Wörterbuch den angegebenen Schlüssel und Wert hinzu.</summary>
      <param name="key">Das Objekt, das als Schlüssel verwendet werden soll.</param>
      <param name="value">Das Objekt, das als Wert verwendet werden soll.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(System.String)">
      <summary>Bestimmt, ob das Wörterbuch den angegebenen Schlüssel enthält.</summary>
      <returns>true, wenn das Wörterbuch ein Element mit dem angegebenen Schlüssel enthält, andernfalls false.</returns>
      <param name="key">Der im Wörterbuch zu suchende Schlüssel.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Item(System.String)">
      <summary>Ruft das Element mit dem angegebenen Schlüssel ab oder legt es fest.</summary>
      <returns>Das Element mit dem angegebenen Schlüssel.</returns>
      <param name="key">Der Schlüssel des abzurufenden oder zu festzulegenden Elements.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Ruft eine <see cref="T:System.Collections.Generic.ICollection`1" /> ab, die die Schlüssel des <see cref="T:System.Collections.Generic.IDictionary`2" /> enthält.</summary>
      <returns>Eine <see cref="T:System.Collections.Generic.ICollection`1" />, die die Schlüssel des Objekts enthält, das das <see cref="T:System.Collections.Generic.IDictionary`2" /> implementiert.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(System.String)">
      <summary>Entfernt das Element mit dem angegebenen Schlüssel aus <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>true, wenn das Element erfolgreich entfernt wurde, andernfalls false.Diese Methode gibt auch dann false zurück, wenn <paramref name="key" /> nicht im ursprünglichen <see cref="T:System.Collections.Generic.IDictionary`2" /> vorhanden ist.</returns>
      <param name="key">Der Schlüssel des zu entfernenden Elements.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(System.String,System.Object@)">
      <summary>Ruft den dem angegebenen Schlüssel zugeordneten Wert ab.</summary>
      <returns>true, wenn das Objekt, das <see cref="T:System.Collections.Generic.IDictionary`2" /> implementiert, ein Element mit dem angegebenen Schlüssel enthält, andernfalls false.</returns>
      <param name="key">Der Schlüssel des abzurufenden Werts.</param>
      <param name="value">Enthält nach dem Beenden dieser Methode den Wert, der dem angegebenen Schlüssel zugeordnet ist, wenn der Schlüssel gefunden wurde, andernfalls den Standardwert für den Typ des <paramref name="value" />-Parameters.Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Ruft eine <see cref="T:System.Collections.Generic.ICollection`1" /> ab, die die Werte im <see cref="T:System.Collections.Generic.IDictionary`2" /> enthält.</summary>
      <returns>Eine <see cref="T:System.Collections.Generic.ICollection`1" />, die die Werte im Objekt enthält, das <see cref="T:System.Collections.Generic.IDictionary`2" /> implementiert.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerator`1" />-Objekt, das zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />, mit dem die Auflistung durchlaufen werden kann.</returns>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Tritt ein, wenn sich ein Eigenschaftswert ändert.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Das bereitgestellte MetaObject wird an die dynamischen virtuellen Methoden verteilt.Das Objekt kann in einem anderen MetaObject gekapselt werden, um benutzerdefiniertes Verhalten für einzelne Aktionen bereitzustellen.</summary>
      <returns>Das Objekt des <see cref="T:System.Dynamic.DynamicMetaObject" />-Typs.</returns>
      <param name="parameter">Der Ausdruck, der das an die dynamischen virtuellen Methoden zu verteilende MetaObject darstellt.</param>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>Stellt den dynamischen Vorgang zum Abrufen des Index in der Aufrufsite dar und stellt die Bindungssemantik und die Details zu dem Vorgang bereit.</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.GetIndexBinder" />-Klasse.</summary>
      <param name="callInfo">Die Signatur der Argumente an der Aufrufsite.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Abrufen des Index aus.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Abrufen von Indizes.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs zum Abrufen des Index.</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>Ruft die Signatur der Argumente an der Aufrufsite ab.</summary>
      <returns>Die Signatur der Argumente an der Aufrufsite.</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Abrufen von Indizes aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Abrufen von Indizes.</param>
      <param name="indexes">Die Argumente des dynamischen Vorgangs zum Abrufen von Indizes.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Vorgangs zum Abrufen des Index aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Abrufen von Indizes.</param>
      <param name="indexes">Die Argumente des dynamischen Vorgangs zum Abrufen von Indizes.</param>
      <param name="errorSuggestion">Bei einem Bindungsfehler das zu verwendende Bindungsergebnis, andernfalls NULL.</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>Stellt den dynamischen Vorgang zum Abrufen des Members in der Aufrufsite dar und stellt die Bindungssemantik und die Details zu dem Vorgang bereit.</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.GetMemberBinder" />-Klasse.</summary>
      <param name="name">Der Name des abzurufenden Members.</param>
      <param name="ignoreCase">Ist true, wenn der Vergleich des Namens ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Abrufen des Members aus.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Abrufen von Membern.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs zum Abrufen des Members.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Abrufen von Membern aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Abrufen von Membern.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Vorgangs zum Abrufen des Members aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Abrufen von Membern.</param>
      <param name="errorSuggestion">Bei einem Bindungsfehler das zu verwendende Bindungsergebnis, andernfalls NULL.</param>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>Ruft den Wert ab, der angibt, ob die Groß-/Kleinschreibung des Membernamens beim Zeichenfolgenvergleich ignoriert werden soll.</summary>
      <returns>True, wenn die Groß-/Kleinschreibung ignoriert wird, andernfalls false.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>Ruft den Namen des abzurufenden Members ab.</summary>
      <returns>Der Name des abzurufenden Members.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>Stellt ein dynamisches Objekt dar, dessen Vorgänge zur Laufzeit gebunden werden können.</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Gibt das <see cref="T:System.Dynamic.DynamicMetaObject" /> zurück, das für Bindungsvorgänge bei diesem Objekt zuständig ist.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" /> zum Binden dieses Objekts.</returns>
      <param name="parameter">Die Ausdrucksbaumstrukturdarstellung des Laufzeitwerts.</param>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>Stellt Informationen zu einem dynamischen Vorgang zum Abrufen von Membern bereit, die angeben, ob get member Eigenschaften aufrufen soll, wenn der GET-Vorgang ausgeführt wird.</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>Ruft den Wert ab, der angibt, ober dieser Vorgang zum Abrufen von Membern Eigenschaften aufrufen soll, wenn der GET-Vorgang ausgeführt wird.Wenn diese Schnittstelle nicht vorhanden ist, lautet der Standardwert true.</summary>
      <returns>True, wenn dieser Vorgang zum Abrufen von Membern Eigenschaften aufrufen soll, wenn der GET-Vorgang ausgeführt wird, andernfalls false.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>Stellt den dynamischen Aufrufvorgang in der Aufrufsite dar und stellt die Bindungssemantik und die Details zu dem Vorgang bereit.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.InvokeBinder" />-Klasse.</summary>
      <param name="callInfo">Die Signatur der Argumente an der Aufrufsite.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Aufrufvorgangs aus.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Aufrufvorgangs.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Aufrufvorgangs.</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>Ruft die Signatur der Argumente an der Aufrufsite ab.</summary>
      <returns>Die Signatur der Argumente an der Aufrufsite.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Aufrufvorgangs aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Aufrufvorgangs.</param>
      <param name="args">Die Argumente des dynamischen Aufrufvorgangs.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen Aufrufvorgangs aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Aufrufvorgangs.</param>
      <param name="args">Die Argumente des dynamischen Aufrufvorgangs.</param>
      <param name="errorSuggestion">Bei einem Bindungsfehler das zu verwendende Bindungsergebnis, andernfalls NULL.</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>Stellt den dynamischen Vorgang zum Aufrufen von Membern in der Aufrufsite dar und stellt die Bindungssemantik und die Details zu dem Vorgang bereit.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.InvokeMemberBinder" />-Klasse.</summary>
      <param name="name">Der Name des aufzurufenden Members.</param>
      <param name="ignoreCase">True, wenn der Vergleich des Namens ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
      <param name="callInfo">Die Signatur der Argumente an der Aufrufsite.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Aufrufen des Members aus.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Aufrufen von Membern.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs zum Aufrufen von Membern.</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>Ruft die Signatur der Argumente an der Aufrufsite ab.</summary>
      <returns>Die Signatur der Argumente an der Aufrufsite.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Aufrufvorgangs aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Aufrufvorgangs.</param>
      <param name="args">Die Argumente des dynamischen Aufrufvorgangs.</param>
      <param name="errorSuggestion">Bei einem Bindungsfehler das zu verwendende Bindungsergebnis, andernfalls NULL.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Aufrufen von Membern aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Aufrufen von Membern.</param>
      <param name="args">Die Argumente des dynamischen Vorgangs zum Aufrufen von Membern.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Vorgangs zum Aufrufen des Members aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Aufrufen von Membern.</param>
      <param name="args">Die Argumente des dynamischen Vorgangs zum Aufrufen von Membern.</param>
      <param name="errorSuggestion">Bei einem Bindungsfehler das zu verwendende Bindungsergebnis, andernfalls NULL.</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>Ruft den Wert ab, der angibt, ob die Groß-/Kleinschreibung des Membernamens beim Zeichenfolgenvergleich ignoriert werden soll.</summary>
      <returns>True, wenn die Groß-/Kleinschreibung ignoriert wird, andernfalls false.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>Ruft den Namen des aufzurufenden Members ab.</summary>
      <returns>Der Name des aufzurufenden Members.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>Stellt den dynamischen Vorgang zum Festlegen des Index in der Aufrufsite dar und stellt die Bindungssemantik und die Details zu dem Vorgang bereit.</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.SetIndexBinder" />-Klasse.</summary>
      <param name="callInfo">Die Signatur der Argumente an der Aufrufsite.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Festlegen des Index aus.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Festlegen von Indizes.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs zum Festlegen des Index.</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>Ruft die Signatur der Argumente an der Aufrufsite ab.</summary>
      <returns>Die Signatur der Argumente an der Aufrufsite.</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Festlegen von Indizes aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Festlegen von Indizes.</param>
      <param name="indexes">Die Argumente des dynamischen Vorgangs zum Festlegen von Indizes.</param>
      <param name="value">Der Wert, der auf die Auflistung festgelegt werden soll.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Führt beim Überschreiben in der abgeleiteten Klasse die Bindung des dynamischen Vorgangs zum Festlegen des Index aus, wenn das dynamische Zielobjekt nicht gebunden werden kann.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Festlegen von Indizes.</param>
      <param name="indexes">Die Argumente des dynamischen Vorgangs zum Festlegen von Indizes.</param>
      <param name="value">Der Wert, der auf die Auflistung festgelegt werden soll.</param>
      <param name="errorSuggestion">Bei einem Bindungsfehler das zu verwendende Bindungsergebnis, andernfalls NULL.</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>Stellt den dynamischen Vorgang zum Festlegen des Members in der Aufrufsite dar und stellt die Bindungssemantik und die Details zu dem Vorgang bereit.</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.SetMemberBinder" />-Klasse.</summary>
      <param name="name">Der Name des abzurufenden Members.</param>
      <param name="ignoreCase">Ist true, wenn der Vergleich des Namens ohne Berücksichtigung der Groß- und Kleinschreibung erfolgen soll, andernfalls false.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Festlegen des Members aus.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Festlegen von Membern.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs zum Festlegen des Members.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Festlegen von Membern aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Festlegen von Membern.</param>
      <param name="value">Der Wert, der auf den Member festgelegt werden soll.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des dynamischen Vorgangs zum Festlegen von Membern aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs zum Festlegen von Membern.</param>
      <param name="value">Der Wert, der auf den Member festgelegt werden soll.</param>
      <param name="errorSuggestion">Bei einem Bindungsfehler das zu verwendende Bindungsergebnis, andernfalls NULL.</param>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>Ruft den Wert ab, der angibt, ob die Groß-/Kleinschreibung des Membernamens beim Zeichenfolgenvergleich ignoriert werden soll.</summary>
      <returns>True, wenn die Groß-/Kleinschreibung ignoriert wird, andernfalls false.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>Ruft den Namen des abzurufenden Members ab.</summary>
      <returns>Der Name des abzurufenden Members.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>Stellt den unären dynamischen Vorgang in der Aufrufsite dar und stellt die Bindungssemantik und die Details zu dem Vorgang bereit.</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Dynamic.BinaryOperationBinder" />-Klasse.</summary>
      <param name="operation">Die Art des unären Vorgangs.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Führt die Bindung des dynamischen unären Vorgangs aus.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen Vorgangs.</param>
      <param name="args">Ein Array von Argumenten des dynamischen Vorgangs.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des unären dynamischen Vorgangs aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen unären Vorgangs.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Führt die Bindung des unären dynamischen Vorgangs aus, wenn eine Bindung des dynamischen Zielobjekts nicht möglich ist.</summary>
      <returns>Das <see cref="T:System.Dynamic.DynamicMetaObject" />, das das Ergebnis der Bindung darstellt.</returns>
      <param name="target">Das Ziel des dynamischen unären Vorgangs.</param>
      <param name="errorSuggestion">Bei einem Bindungsfehler das Ergebnis der Bindung, andernfalls NULL.</param>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>Die Art des unären Vorgangs.</summary>
      <returns>Das Objekt des <see cref="T:System.Linq.Expressions.ExpressionType" />, das die Art des unären Vorgangs darstellt.</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>Der Ergebnistyp des Vorgangs.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Ergebnistyp des Vorgangs darstellt.</returns>
    </member>
    <member name="T:System.Linq.Enumerable">
      <summary>Stellt einen Satz von statischen-Methoden (Shared-Methoden in Visual Basic) zum Abfragen von Objekten bereit, die <see cref="T:System.Collections.Generic.IEnumerable`1" /> implementieren.</summary>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>Wendet eine Akkumulatorfunktion auf eine Sequenz an.</summary>
      <returns>Der letzte Akkumulatorwert.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das aggregiert werden soll.</param>
      <param name="func">Eine Akkumulatorfunktion, die für jedes Element aufgerufen werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="func" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>Wendet eine Akkumulatorfunktion auf eine Sequenz an.Der angegebene Startwert wird als erster Akkumulatorwert verwendet.</summary>
      <returns>Der letzte Akkumulatorwert.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das aggregiert werden soll.</param>
      <param name="seed">Der erste Akkumulatorwert.</param>
      <param name="func">Eine Akkumulatorfunktion, die für jedes Element aufgerufen werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Der Typ des Akkumulatorwerts.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="func" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>Wendet eine Akkumulatorfunktion auf eine Sequenz an.Der angegebene Startwert wird als erster Akkumulatorwert verwendet, und der Ergebniswert wird mit der angegebenen Funktion ausgewählt.</summary>
      <returns>Der transformierte letzte Akkumulatorwert.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das aggregiert werden soll.</param>
      <param name="seed">Der erste Akkumulatorwert.</param>
      <param name="func">Eine Akkumulatorfunktion, die für jedes Element aufgerufen werden soll.</param>
      <param name="resultSelector">Eine Funktion zum Transformieren des letzten Akkumulatorwerts in den Ergebniswert.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Der Typ des Akkumulatorwerts.</typeparam>
      <typeparam name="TResult">Der Typ des Ergebniswerts.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="func" /> oder <paramref name="resultSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Bestimmt, ob alle Elemente einer Sequenz eine Bedingung erfüllen.</summary>
      <returns>true, wenn jedes Element der Quellsequenz im angegebenen Prädikat erfolgreich überprüft wird, oder wenn die Sequenz leer ist, andernfalls false.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die Elemente enthält, auf die das Prädikat angewendet werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Bestimmt, ob eine Sequenz Elemente enthält.</summary>
      <returns>true, wenn die Quellsequenz Elemente enthält, andernfalls false.</returns>
      <param name="source">Das <see cref="T:System.Collections.Generic.IEnumerable`1" />, für das überprüft werden soll, ob es leer ist.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Bestimmt, ob ein Element einer Sequenz eine Bedingung erfüllt.</summary>
      <returns>true, wenn Elemente der Quellsequenz im angegebenen Prädikat erfolgreich überprüft werden, andernfalls false.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, auf dessen Elemente das Prädikat angewendet werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Gibt die Eingabe als <see cref="T:System.Collections.Generic.IEnumerable`1" /> zurück.</summary>
      <returns>Die als <see cref="T:System.Collections.Generic.IEnumerable`1" /> typisierte Eingabesequenz.</returns>
      <param name="source">Die Sequenz, die als <see cref="T:System.Collections.Generic.IEnumerable`1" /> typisiert werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder null, wenn die Quellsequenz leer ist oder nur null-Werte enthält.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen und deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.OverflowException">Die Summe der Elemente in der Sequenz ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder null, wenn die Quellsequenz leer ist oder nur null-Werte enthält.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen und deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder null, wenn die Quellsequenz leer ist oder nur null-Werte enthält.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen und deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.OverflowException">Die Summe der Elemente in der Sequenz ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder null, wenn die Quellsequenz leer ist oder nur null-Werte enthält.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen und deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.OverflowException">Die Summe der Elemente in der Sequenz ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder null, wenn die Quellsequenz leer ist oder nur null-Werte enthält.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen und deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
      <exception cref="T:System.OverflowException">Die Summe der Elemente in der Sequenz ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
      <exception cref="T:System.OverflowException">Die Summe der Elemente in der Sequenz ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente der Quelle.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
      <exception cref="T:System.OverflowException">Die Summe der Elemente in der Sequenz ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder null, wenn die Quellsequenz leer ist oder nur null-Werte enthält.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.OverflowException">Die Summe der Elemente in der Sequenz ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder null, wenn die Quellsequenz leer ist oder nur null-Werte enthält.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder null, wenn die Quellsequenz leer ist oder nur null-Werte enthält.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.OverflowException">Die Summe der Elemente in der Sequenz ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder null, wenn die Quellsequenz leer ist oder nur null-Werte enthält.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder null, wenn die Quellsequenz leer ist oder nur null-Werte enthält.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
      <summary>Konvertiert die Elemente eines <see cref="T:System.Collections.IEnumerable" /> in den angegebenen Typ.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das jedes in den angegebenen Typ konvertierte Element der Quellsequenz enthält.</returns>
      <param name="source">Das <see cref="T:System.Collections.IEnumerable" />, das die zu konvertierenden Elemente enthält.</param>
      <typeparam name="TResult">Der Typ, in den die Elemente von <paramref name="source" /> konvertiert werden sollen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidCastException">Ein Element in der Sequenz kann nicht in den Typ <paramref name="TResult" /> umgewandelt werden.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Verkettet zwei Sequenzen.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die verketteten Elemente der beiden Eingabesequenzen enthält.</returns>
      <param name="first">Die erste zu verkettende Sequenz.</param>
      <param name="second">Die Sequenz, die mit der ersten Sequenz verkettet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> oder <paramref name="second" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Bestimmt mithilfe des Standardgleichheitsvergleichs, ob eine Sequenz ein angegebenes Element enthält.</summary>
      <returns>true, wenn die Quellsequenz ein Element mit dem angegebenen Wert enthält, andernfalls false.</returns>
      <param name="source">Eine Sequenz, in der ein Wert gesucht werden soll.</param>
      <param name="value">Der Wert, der in der Sequenz gesucht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Bestimmt mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, ob eine Sequenz ein angegebenes Element enthält.</summary>
      <returns>true, wenn die Quellsequenz ein Element mit dem angegebenen Wert enthält, andernfalls false.</returns>
      <param name="source">Eine Sequenz, in der ein Wert gesucht werden soll.</param>
      <param name="value">Der Wert, der in der Sequenz gesucht werden soll.</param>
      <param name="comparer">Ein Gleichheitsvergleich zum Vergleichen von Werten.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Gibt die Anzahl der Elemente in einer Sequenz zurück.</summary>
      <returns>Die Anzahl der Elemente in der Eingabesequenz.</returns>
      <param name="source">Eine Sequenz, die zu zählende Elemente enthält.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt eine Zahl zurück, die die Anzahl der Elemente in der angegebenen Sequenz angibt, die eine Bedingung erfüllen.</summary>
      <returns>Eine Zahl, die die Anzahl der Elemente in der Sequenz darstellt, die die Bedingung in der Prädikatfunktion erfüllen.</returns>
      <param name="source">Eine Sequenz, die Elemente enthält, die überprüft und gezählt werden sollen.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Gibt die Elemente der angegebenen Sequenz oder den Standardwert des Typparameters in einer Singletonauflistung zurück, wenn die Sequenz leer ist.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />-Objekt, das den Standardwert für den <paramref name="TSource" />-Typ enthält, wenn <paramref name="source" /> leer ist, andernfalls <paramref name="source" />.</returns>
      <param name="source">Die Sequenz, für die ein Standardwert zurückgegeben werden soll, wenn sie leer ist.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Gibt die Elemente der angegebenen Sequenz zurück, oder den angegebenen Wert in einer Singletonauflistung, wenn die Sequenz leer ist.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das <paramref name="defaultValue" /> enthält, wenn <paramref name="source" /> leer ist, andernfalls <paramref name="source" />.</returns>
      <param name="source">Die Sequenz, für die der angegebene Wert zurückgegeben werden soll, wenn sie leer ist.</param>
      <param name="defaultValue">Der Wert, der zurückgegeben werden soll, wenn die Sequenz leer ist.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Gibt mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten unterschiedliche Elemente aus einer Sequenz zurück.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das unterschiedliche Elemente aus der Quellsequenz enthält.</returns>
      <param name="source">Die Sequenz, aus der doppelte Elemente entfernt werden sollen.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Gibt mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten unterschiedliche Elemente aus einer Sequenz zurück.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das unterschiedliche Elemente aus der Quellsequenz enthält.</returns>
      <param name="source">Die Sequenz, aus der doppelte Elemente entfernt werden sollen.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Gibt das Element an einem angegebenen Index in einer Sequenz zurück.</summary>
      <returns>Das Element an der angegebenen Position in der Quellsequenz.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein Element zurückgegeben werden soll.</param>
      <param name="index">Der nullbasierte Index des abzurufenden Elements.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ist kleiner als 0 bzw. größer oder gleich der Anzahl der Elemente in <paramref name="source" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Gibt das Element an einem angegebenen Index in einer Sequenz oder einen Standardwert zurück, wenn der Index außerhalb des gültigen Bereichs liegt.</summary>
      <returns>default(<paramref name="TSource" />), wenn der Index außerhalb der Begrenzungen der Quellsequenz liegt, andernfalls das Element an der angegebenen Position in der Quellsequenz.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein Element zurückgegeben werden soll.</param>
      <param name="index">Der nullbasierte Index des abzurufenden Elements.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Empty``1">
      <summary>Gibt ein leeres <see cref="T:System.Collections.Generic.IEnumerable`1" /> zurück, das über das angegebene Typargument verfügt.</summary>
      <returns>Ein leeres <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Typargument <paramref name="TResult" /> ist.</returns>
      <typeparam name="TResult">Der Typ, der dem Typparameter des zurückgegebenen generischen <see cref="T:System.Collections.Generic.IEnumerable`1" /> zugewiesen werden soll.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Erzeugt die Differenzmenge zweier Sequenzen mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten.</summary>
      <returns>Eine Sequenz, die die Differenzmenge der Elemente von zwei Sequenzen enthält.</returns>
      <param name="first">Es wird ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> zurückgegeben, dessen Elemente nicht auch in <paramref name="second" /> enthalten sind.</param>
      <param name="second">Wenn ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> Elemente enthält, die auch in der ersten Sequenz vorhanden sind, werden diese Elemente aus der zurückgegebenen Sequenz entfernt.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> oder <paramref name="second" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Erzeugt mithilfe des angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten die Differenzmenge zweier Sequenzen.</summary>
      <returns>Eine Sequenz, die die Differenzmenge der Elemente von zwei Sequenzen enthält.</returns>
      <param name="first">Es wird ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> zurückgegeben, dessen Elemente nicht auch in <paramref name="second" /> enthalten sind.</param>
      <param name="second">Wenn ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> Elemente enthält, die auch in der ersten Sequenz vorhanden sind, werden diese Elemente aus der zurückgegebenen Sequenz entfernt.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> oder <paramref name="second" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Gibt das erste Element einer Sequenz zurück.</summary>
      <returns>Das erste Element in der angegebenen Sequenz.</returns>
      <param name="source">Das <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen erstes Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Die Quellsequenz ist leer.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt das erste Element in einer Sequenz zurück, das eine angegebene Bedingung erfüllt.</summary>
      <returns>Das erste Element in der Sequenz, das mit der angegebenen Prädikatfunktion erfolgreich überprüft wird.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Kein Element erfüllt die Bedingung in <paramref name="predicate" />.- oder -Die Quellsequenz ist leer.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Gibt das erste Element einer Sequenz zurück, oder einen Standardwert, wenn die Sequenz keine Elemente enthält.</summary>
      <returns>default(<paramref name="TSource" />), wenn <paramref name="source" /> leer ist, andernfalls das erste Element in <paramref name="source" />.</returns>
      <param name="source">Das <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen erstes Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt das erste Element der Sequenz zurück, das eine Bedingung erfüllt, oder einen Standardwert, wenn ein solches Element nicht gefunden wird.</summary>
      <returns>default(<paramref name="TSource" />), wenn <paramref name="source" /> leer ist oder wenn kein Element die von <paramref name="predicate" /> angegebene Überprüfung besteht. Andernfalls das erste Element in <paramref name="source" />, das die von <paramref name="predicate" /> angegebene Überprüfung besteht.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion.</summary>
      <returns>Ein IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# oder ein IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic, wobei jedes <see cref="T:System.Linq.IGrouping`2" />-Objekt eine Sequenz von Objekten und einen Schlüssel enthält.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und vergleicht die Schlüssel mithilfe eines angegebenen Vergleichs.</summary>
      <returns>Ein IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# oder ein IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic, wobei jedes <see cref="T:System.Linq.IGrouping`2" />-Objekt eine Auflistung von Objekten und einen Schlüssel enthält.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und projiziert die Elemente für jede Gruppe mithilfe einer angegebenen Funktion.</summary>
      <returns>Ein IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# oder ein IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic, wobei jedes <see cref="T:System.Linq.IGrouping`2" />-Objekt eine Auflistung von Objekten vom Typ <paramref name="TElement" /> und einen Schlüssel enthält.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="elementSelector">Eine Funktion, mit der jedes Quellelement einem Element in dem <see cref="T:System.Linq.IGrouping`2" /> zugeordnet wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TElement">Der Typ der Elemente im <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Gruppiert die Elemente einer Sequenz entsprechend einer Schlüsselauswahlfunktion.Die Schlüssel werden mithilfe eines Vergleichs verglichen, und die Elemente jeder Gruppe werden mithilfe einer angegebenen Funktion projiziert.</summary>
      <returns>Ein IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# oder ein IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic, wobei jedes <see cref="T:System.Linq.IGrouping`2" />-Objekt eine Auflistung von Objekten vom Typ <paramref name="TElement" /> und einen Schlüssel enthält.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="elementSelector">Eine Funktion, mit der jedes Quellelement einem Element in einem <see cref="T:System.Linq.IGrouping`2" /> zugeordnet wird.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TElement">Der Typ der Elemente im <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.Die Elemente jeder Gruppe werden mithilfe einer angegebenen Funktion projiziert.</summary>
      <returns>Eine Auflistung von Elementen vom Typ <paramref name="TResult" />, wobei jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="elementSelector">Eine Funktion, mit der jedes Quellelement einem Element in einem <see cref="T:System.Linq.IGrouping`2" /> zugeordnet wird.</param>
      <param name="resultSelector">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TElement">Der Typ der Elemente in jedem <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.Schlüsselwerte werden mithilfe eines angegebenen Vergleichs verglichen, und die Elemente jeder Gruppe werden mithilfe einer angegebenen Funktion projiziert.</summary>
      <returns>Eine Auflistung von Elementen vom Typ <paramref name="TResult" />, wobei jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="elementSelector">Eine Funktion, mit der jedes Quellelement einem Element in einem <see cref="T:System.Linq.IGrouping`2" /> zugeordnet wird.</param>
      <param name="resultSelector">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, mit dem Schlüssel verglichen werden.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TElement">Der Typ der Elemente in jedem <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.</summary>
      <returns>Eine Auflistung von Elementen vom Typ <paramref name="TResult" />, wobei jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="resultSelector">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TResult">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.Die Schlüssel werden mithilfe eines angegebenen Vergleichs verglichen.</summary>
      <returns>Eine Auflistung von Elementen vom Typ <paramref name="TResult" />, wobei jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="resultSelector">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, mit dem Schlüssel verglichen werden.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TResult">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Korreliert die Elemente von zwei Sequenzen anhand der Gleichheit der Schlüssel und gruppiert die Ergebnisse.Schlüssel werden mithilfe des Standardgleichheitsvergleichs verglichen.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das Elemente vom Typ <paramref name="TResult" /> enthält, die durch Ausführen eines Gruppenjoins von zwei Sequenzen ermittelt werden.</returns>
      <param name="outer">Die erste zu verknüpfende Sequenz.</param>
      <param name="inner">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</param>
      <param name="outerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</param>
      <param name="innerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</param>
      <param name="resultSelector">Eine Funktion zum Erstellen eines Ergebniselements anhand eines Elements aus der ersten Sequenz und einer Auflistung von übereinstimmenden Elementen aus der zweiten Sequenz.</param>
      <typeparam name="TOuter">Der Typ der Elemente der ersten Sequenz.</typeparam>
      <typeparam name="TInner">Der Typ der Elemente der zweiten Sequenz.</typeparam>
      <typeparam name="TKey">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</typeparam>
      <typeparam name="TResult">Der Typ der Ergebniselemente.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> oder <paramref name="inner" /> oder <paramref name="outerKeySelector" /> oder <paramref name="innerKeySelector" /> oder <paramref name="resultSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Korreliert die Elemente von zwei Sequenzen anhand der Gleichheit der Schlüssel und gruppiert die Ergebnisse.Schlüssel werden mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> verglichen.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das Elemente vom Typ <paramref name="TResult" /> enthält, die durch Ausführen eines Gruppenjoins von zwei Sequenzen ermittelt werden.</returns>
      <param name="outer">Die erste zu verknüpfende Sequenz.</param>
      <param name="inner">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</param>
      <param name="outerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</param>
      <param name="innerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</param>
      <param name="resultSelector">Eine Funktion zum Erstellen eines Ergebniselements anhand eines Elements aus der ersten Sequenz und einer Auflistung von übereinstimmenden Elementen aus der zweiten Sequenz.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Hashen und Vergleichen von Schlüsseln.</param>
      <typeparam name="TOuter">Der Typ der Elemente der ersten Sequenz.</typeparam>
      <typeparam name="TInner">Der Typ der Elemente der zweiten Sequenz.</typeparam>
      <typeparam name="TKey">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</typeparam>
      <typeparam name="TResult">Der Typ der Ergebniselemente.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> oder <paramref name="inner" /> oder <paramref name="outerKeySelector" /> oder <paramref name="innerKeySelector" /> oder <paramref name="resultSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Erzeugt die Schnittmenge zweier Sequenzen mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten.</summary>
      <returns>Eine Sequenz, die die Elemente enthält, die die Schnittmenge von zwei Sequenzen bilden.</returns>
      <param name="first">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen unterschiedliche Elemente auch in <paramref name="second" /> vorhanden sind, wird zurückgegeben.</param>
      <param name="second">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen unterschiedliche Elemente auch in der ersten Sequenz vorhanden sind, wird zurückgegeben.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> oder <paramref name="second" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Erzeugt mithilfe des angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten die Schnittmenge von zwei Sequenzen.</summary>
      <returns>Eine Sequenz, die die Elemente enthält, die die Schnittmenge von zwei Sequenzen bilden.</returns>
      <param name="first">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen unterschiedliche Elemente auch in <paramref name="second" /> vorhanden sind, wird zurückgegeben.</param>
      <param name="second">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen unterschiedliche Elemente auch in der ersten Sequenz vorhanden sind, wird zurückgegeben.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> oder <paramref name="second" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Korreliert die Elemente von zwei Sequenzen auf der Grundlage von übereinstimmenden Schlüsseln.Schlüssel werden mithilfe des Standardgleichheitsvergleichs verglichen.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das Elemente vom Typ <paramref name="TResult" /> enthält, die durch Ausführen eines inneren Joins von zwei Sequenzen ermittelt werden.</returns>
      <param name="outer">Die erste zu verknüpfende Sequenz.</param>
      <param name="inner">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</param>
      <param name="outerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</param>
      <param name="innerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</param>
      <param name="resultSelector">Eine Funktion zum Erstellen eines Ergebniselements aus zwei übereinstimmenden Elementen.</param>
      <typeparam name="TOuter">Der Typ der Elemente der ersten Sequenz.</typeparam>
      <typeparam name="TInner">Der Typ der Elemente der zweiten Sequenz.</typeparam>
      <typeparam name="TKey">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</typeparam>
      <typeparam name="TResult">Der Typ der Ergebniselemente.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> oder <paramref name="inner" /> oder <paramref name="outerKeySelector" /> oder <paramref name="innerKeySelector" /> oder <paramref name="resultSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Korreliert die Elemente von zwei Sequenzen auf der Grundlage von übereinstimmenden Schlüsseln.Schlüssel werden mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> verglichen.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das Elemente vom Typ <paramref name="TResult" /> enthält, die durch Ausführen eines inneren Joins von zwei Sequenzen ermittelt werden.</returns>
      <param name="outer">Die erste zu verknüpfende Sequenz.</param>
      <param name="inner">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</param>
      <param name="outerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</param>
      <param name="innerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</param>
      <param name="resultSelector">Eine Funktion zum Erstellen eines Ergebniselements aus zwei übereinstimmenden Elementen.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Hashen und Vergleichen von Schlüsseln.</param>
      <typeparam name="TOuter">Der Typ der Elemente der ersten Sequenz.</typeparam>
      <typeparam name="TInner">Der Typ der Elemente der zweiten Sequenz.</typeparam>
      <typeparam name="TKey">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</typeparam>
      <typeparam name="TResult">Der Typ der Ergebniselemente.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> oder <paramref name="inner" /> oder <paramref name="outerKeySelector" /> oder <paramref name="innerKeySelector" /> oder <paramref name="resultSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Gibt das letzte Element einer Sequenz zurück.</summary>
      <returns>Der Wert an der letzten Position in der Quellsequenz.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen letztes Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Die Quellsequenz ist leer.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt das letzte Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt.</summary>
      <returns>Das letzte Element in der Sequenz, das mit der angegebenen Prädikatfunktion erfolgreich überprüft wird.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Kein Element erfüllt die Bedingung in <paramref name="predicate" />.- oder -Die Quellsequenz ist leer.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Gibt das letzte Element einer Sequenz zurück, oder einen Standardwert, wenn die Sequenz keine Elemente enthält.</summary>
      <returns>default(<paramref name="TSource" />), wenn die Quellsequenz leer ist; andernfalls das letzte Element im <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen letztes Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt das letzte Element einer Sequenz zurück, das eine Bedingung erfüllt, oder einen Standardwert, wenn ein solches Element nicht gefunden wird.</summary>
      <returns>default(<paramref name="TSource" />), wenn die Sequenz leer ist oder wenn keine Elemente von der Prädikatfunktion erfolgreich überprüft werden. Andernfalls das letzte Element, das von der Prädikatfunktion erfolgreich überprüft wird.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Gibt ein <see cref="T:System.Int64" /> zurück, das die Gesamtanzahl der Elemente in einer Sequenz darstellt.</summary>
      <returns>Die Anzahl der Elemente in der Quellsequenz.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die zu zählenden Elemente enthält.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente überschreitet <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt ein <see cref="T:System.Int64" /> zurück, das die Anzahl der Elemente in einer Sequenz darstellt, die eine Bedingung erfüllen.</summary>
      <returns>Eine Zahl, die die Anzahl der Elemente in der Sequenz darstellt, die die Bedingung in der Prädikatfunktion erfüllen.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die zu zählenden Elemente enthält.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der übereinstimmenden Elemente überschreitet <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Decimal" />-Werten zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Double" />-Werten zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Int32" />-Werten zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Int64" />-Werten zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Decimal" />-Werten zurück, die NULL-Werte zulassen.</summary>
      <returns>Ein Wert vom Typ Nullable&lt;Decimal&gt; in C# oder Nullable(Of Decimal) in Visual Basic, der dem Höchstwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL-Werte zulassen und deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Double" />-Werten zurück, die NULL-Werte zulassen.</summary>
      <returns>Ein Wert vom Typ Nullable&lt;Double&gt; in C# oder Nullable(Of Double) in Visual Basic, der dem Höchstwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, die NULL-Werte zulassen und deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Int32" />-Werten zurück, die NULL-Werte zulassen.</summary>
      <returns>Ein Wert vom Typ Nullable&lt;Int32&gt; in C# oder Nullable(Of Int32) in Visual Basic, der dem Höchstwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, die NULL-Werte zulassen und deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Int64" />-Werten zurück, die NULL-Werte zulassen.</summary>
      <returns>Ein Wert vom Typ Nullable&lt;Int64&gt; in C# oder Nullable(Of Int64) in Visual Basic, der dem Höchstwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, die NULL-Werte zulassen und deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Single" />-Werten zurück, die NULL-Werte zulassen.</summary>
      <returns>Ein Wert vom Typ Nullable&lt;Single&gt; in C# oder Nullable(Of Single) in Visual Basic, der dem Höchstwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, die NULL-Werte zulassen und deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Gibt den Höchstwert in einer Sequenz von <see cref="T:System.Single" />-Werten zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, deren Höchstwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Gibt den Höchstwert in einer generischen Sequenz zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den maximalen <see cref="T:System.Decimal" />-Wert zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den maximalen <see cref="T:System.Double" />-Wert zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den maximalen <see cref="T:System.Int32" />-Wert zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den maximalen <see cref="T:System.Int64" />-Wert zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den maximalen <see cref="T:System.Decimal" />-Wert zurück, der NULL-Werte zulässt.</summary>
      <returns>Der Wert vom Typ Nullable&lt;Decimal&gt; in C# oder Nullable(Of Decimal) in Visual Basic, der dem Höchstwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den maximalen <see cref="T:System.Double" />-Wert zurück, der NULL-Werte zulässt.</summary>
      <returns>Der Wert vom Typ Nullable&lt;Double&gt; in C# oder Nullable(Of Double) in Visual Basic, der dem Höchstwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den maximalen <see cref="T:System.Int32" />-Wert zurück, der NULL-Werte zulässt.</summary>
      <returns>Der Wert vom Typ Nullable&lt;Int32&gt; in C# oder Nullable(Of Int32) in Visual Basic, der dem Höchstwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den maximalen <see cref="T:System.Int64" />-Wert zurück, der NULL-Werte zulässt.</summary>
      <returns>Der Wert vom Typ Nullable&lt;Int64&gt; in C# oder Nullable(Of Int64) in Visual Basic, der dem Höchstwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den maximalen <see cref="T:System.Single" />-Wert zurück, der NULL-Werte zulässt.</summary>
      <returns>Der Wert vom Typ Nullable&lt;Single&gt; in C# oder Nullable(Of Single) in Visual Basic, der dem Höchstwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den maximalen <see cref="T:System.Single" />-Wert zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Ruft für jedes Element einer generischen Sequenz eine Transformationsfunktion auf und gibt den höchsten Ergebniswert zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der Typ des von <paramref name="selector" /> zurückgegebenen Werts.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Decimal" />-Werten zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Double" />-Werten zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Int32" />-Werten zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Int64" />-Werten zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Decimal" />-Werten zurück, die NULL-Werte zulassen.</summary>
      <returns>Ein Wert vom Typ Nullable&lt;Decimal&gt; in C# oder Nullable(Of Decimal) in Visual Basic, der dem Mindestwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL-Werte zulassen und deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Double" />-Werten zurück, die NULL-Werte zulassen.</summary>
      <returns>Ein Wert vom Typ Nullable&lt;Double&gt; in C# oder Nullable(Of Double) in Visual Basic, der dem Mindestwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, die NULL-Werte zulassen und deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Int32" />-Werten zurück, die NULL-Werte zulassen.</summary>
      <returns>Ein Wert vom Typ Nullable&lt;Int32&gt; in C# oder Nullable(Of Int32) in Visual Basic, der dem Mindestwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, die NULL-Werte zulassen und deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Int64" />-Werten zurück, die NULL-Werte zulassen.</summary>
      <returns>Ein Wert vom Typ Nullable&lt;Int64&gt; in C# oder Nullable(Of Int64) in Visual Basic, der dem Mindestwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, die NULL-Werte zulassen und deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Single" />-Werten zurück, die NULL-Werte zulassen.</summary>
      <returns>Ein Wert vom Typ Nullable&lt;Single&gt; in C# oder Nullable(Of Single) in Visual Basic, der dem Mindestwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, die NULL-Werte zulassen und deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Gibt den Mindestwert in einer Sequenz von <see cref="T:System.Single" />-Werten zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, deren Mindestwert bestimmt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Gibt den Mindestwert in einer generischen Sequenz zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den minimalen <see cref="T:System.Decimal" />-Wert zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den minimalen <see cref="T:System.Double" />-Wert zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den minimalen <see cref="T:System.Int32" />-Wert zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den minimalen <see cref="T:System.Int64" />-Wert zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den minimalen <see cref="T:System.Decimal" />-Wert zurück, der NULL-Werte zulässt.</summary>
      <returns>Der Wert vom Typ Nullable&lt;Decimal&gt; in C# oder Nullable(Of Decimal) in Visual Basic, der dem Mindestwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den minimalen <see cref="T:System.Double" />-Wert zurück, der NULL-Werte zulässt.</summary>
      <returns>Der Wert vom Typ Nullable&lt;Double&gt; in C# oder Nullable(Of Double) in Visual Basic, der dem Mindestwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den minimalen <see cref="T:System.Int32" />-Wert zurück, der NULL-Werte zulässt.</summary>
      <returns>Der Wert vom Typ Nullable&lt;Int32&gt; in C# oder Nullable(Of Int32) in Visual Basic, der dem Mindestwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den minimalen <see cref="T:System.Int64" />-Wert zurück, der NULL-Werte zulässt.</summary>
      <returns>Der Wert vom Typ Nullable&lt;Int64&gt; in C# oder Nullable(Of Int64) in Visual Basic, der dem Mindestwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den minimalen <see cref="T:System.Single" />-Wert zurück, der NULL-Werte zulässt.</summary>
      <returns>Der Wert vom Typ Nullable&lt;Single&gt; in C# oder Nullable(Of Single) in Visual Basic, der dem Mindestwert in der Sequenz entspricht.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Ruft für jedes Element einer Sequenz eine Transformationsfunktion auf und gibt den minimalen <see cref="T:System.Single" />-Wert zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Ruft für jedes Element einer generischen Sequenz eine Transformationsfunktion auf und gibt den niedrigsten Ergebniswert zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der Typ des von <paramref name="selector" /> zurückgegebenen Werts.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary>Filtert die Elemente eines <see cref="T:System.Collections.IEnumerable" /> anhand eines angegebenen Typs.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das Elemente aus der Eingabesequenz vom Typ <paramref name="TResult" /> enthält.</returns>
      <param name="source">Das <see cref="T:System.Collections.IEnumerable" />, dessen Elemente gefiltert werden sollen.</param>
      <typeparam name="TResult">Der Typ, nach dem die Elemente der Sequenz gefiltert werden sollen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Sortiert die Elemente einer Sequenz in aufsteigender Reihenfolge nach einem Schlüssel.</summary>
      <returns>Ein <see cref="T:System.Linq.IOrderedEnumerable`1" />, dessen Elemente nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Eine Sequenz von anzuordnenden Werten.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Sortiert die Elemente einer Sequenz mithilfe eines angegebenen Vergleichs in aufsteigender Reihenfolge.</summary>
      <returns>Ein <see cref="T:System.Linq.IOrderedEnumerable`1" />, dessen Elemente nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Eine Sequenz von anzuordnenden Werten.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Sortiert die Elemente einer Sequenz in absteigender Reihenfolge nach einem Schlüssel.</summary>
      <returns>Ein <see cref="T:System.Linq.IOrderedEnumerable`1" />, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Eine Sequenz von anzuordnenden Werten.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Sortiert die Elemente einer Sequenz mithilfe eines angegebenen Vergleichs in absteigender Reihenfolge.</summary>
      <returns>Ein <see cref="T:System.Linq.IOrderedEnumerable`1" />, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Eine Sequenz von anzuordnenden Werten.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary>Generiert eine Sequenz von ganzen Zahlen in einem angegebenen Bereich.</summary>
      <returns>Ein IEnumerable&lt;Int32&gt; in C# oder IEnumerable(Of Int32) in Visual Basic, das einen Bereich von aufeinanderfolgenden ganzen Zahlen enthält.</returns>
      <param name="start">Der Wert der ersten ganzen Zahl in der Sequenz.</param>
      <param name="count">Die Anzahl der aufeinander folgenden ganzen Zahlen, die generiert werden sollen.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> ist kleiner als 0 (null).- oder -<paramref name="start" /> + <paramref name="count" /> -1 ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary>Generiert eine Sequenz, die einen Wert mehrfach enthält.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das einen wiederholten Wert enthält.</returns>
      <param name="element">Der zu wiederholende Wert.</param>
      <param name="count">Die gewünschte Anzahl der Wiederholungen des Werts in der generierten Sequenz.</param>
      <typeparam name="TResult">Der Typ des Werts, der in der Ergebnissequenz wiederholt werden soll.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> ist kleiner als 0 (null).</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Kehrt die Reihenfolge der Elemente in einer Sequenz um.</summary>
      <returns>Eine Sequenz, deren Elemente den Elementen der Eingabesequenz in umgekehrter Reihenfolge entsprechen.</returns>
      <param name="source">Eine umzukehrende Sequenz von Werten.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Projiziert jedes Element einer Sequenz in ein neues Format.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente das Ergebnis des Aufrufs einer Transformationsfunktion für jedes Element von <paramref name="source" /> sind.</returns>
      <param name="source">Eine Sequenz von Werten, für die eine Transformationsfunktion aufgerufen werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der Typ des von <paramref name="selector" /> zurückgegebenen Werts.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary>Projiziert jedes Element einer Sequenz in ein neues Format, indem der Index des Elements integriert wird.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente das Ergebnis des Aufrufs einer Transformationsfunktion für jedes Element von <paramref name="source" /> sind.</returns>
      <param name="source">Eine Sequenz von Werten, für die eine Transformationsfunktion aufgerufen werden soll.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Quellelement angewendet werden soll. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der Typ des von <paramref name="selector" /> zurückgegebenen Werts.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, fasst die resultierenden Sequenzen zu einer einzigen Sequenz zusammen und ruft für jedes Element in dieser Sequenz eine Ergebnisauswahlfunktion auf.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente erzeugt werden, indem für jedes Element von <paramref name="collectionSelector" /> die 1:n-Transformationsfunktion <paramref name="source" /> aufgerufen wird und dann jedes Element der Sequenz und sein entsprechendes Quellelement einem Ergebniselement zugeordnet wird.</returns>
      <param name="source">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="collectionSelector">Eine Transformationsfunktion, die auf jedes Element der Eingabesequenz angewendet werden soll.</param>
      <param name="resultSelector">Eine Transformationsfunktion, die auf jedes Element der Zwischensequenz angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">Der Typ der Zwischenelemente, die von <paramref name="collectionSelector" /> erfasst werden.</typeparam>
      <typeparam name="TResult">Der Typ der Elemente in der resultierenden Sequenz.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="collectionSelector" /> oder <paramref name="resultSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> und fasst die resultierenden Sequenzen in einer einzigen Sequenz zusammen.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente das Ergebnis eines Aufrufs der 1:n-Transformationsfunktion für jedes Element der Eingabesequenz sind.</returns>
      <param name="source">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der Typ der von <paramref name="selector" /> zurückgegebenen Elemente der Sequenz.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, fasst die resultierenden Sequenzen zu einer einzigen Sequenz zusammen und ruft für jedes Element in dieser Sequenz eine Ergebnisauswahlfunktion auf.Der Index jedes Quellelements wird im projizierten Zwischenformat des jeweiligen Elements verwendet.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente erzeugt werden, indem für jedes Element von <paramref name="collectionSelector" /> die 1:n-Transformationsfunktion <paramref name="source" /> aufgerufen wird und dann jedes Element der Sequenz und sein entsprechendes Quellelement einem Ergebniselement zugeordnet wird.</returns>
      <param name="source">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="collectionSelector">Eine Transformationsfunktion, die auf jedes Quellelement angewendet werden soll. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</param>
      <param name="resultSelector">Eine Transformationsfunktion, die auf jedes Element der Zwischensequenz angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">Der Typ der Zwischenelemente, die von <paramref name="collectionSelector" /> erfasst werden.</typeparam>
      <typeparam name="TResult">Der Typ der Elemente in der resultierenden Sequenz.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="collectionSelector" /> oder <paramref name="resultSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> und fasst die resultierenden Sequenzen in einer einzigen Sequenz zusammen.Der Index jedes Quellelements wird im projizierten Format des jeweiligen Elements verwendet.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente das Ergebnis eines Aufrufs der 1:n-Transformationsfunktion für jedes Element einer Eingabesequenz sind.</returns>
      <param name="source">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Quellelement angewendet werden soll. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der Typ der von <paramref name="selector" /> zurückgegebenen Elemente der Sequenz.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Bestimmt, ob zwei Sequenzen gleich sind, indem die Elemente mithilfe des Standardgleichheitsvergleichs für ihren Typ verglichen werden.</summary>
      <returns>true, wenn die zwei Quellsequenzen von gleicher Länge sind und ihre entsprechenden Elemente durch den Standardgleichheitsvergleich für ihren Typ als gleich bestimmt werden, andernfalls false.</returns>
      <param name="first">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das mit <paramref name="second" /> verglichen werden soll.</param>
      <param name="second">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das mit der ersten Sequenz verglichen werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> oder <paramref name="second" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Bestimmt, ob zwei Sequenzen gleich sind, indem ihre Elemente mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> verglichen werden.</summary>
      <returns>true, wenn die zwei Quellsequenzen von gleicher Länge sind und ihre entsprechenden Elemente gemäß <paramref name="comparer" /> als gleich gelten, andernfalls false.</returns>
      <param name="first">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das mit <paramref name="second" /> verglichen werden soll.</param>
      <param name="second">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das mit der ersten Sequenz verglichen werden soll.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, der zum Vergleichen von Elementen verwendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> oder <paramref name="second" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> hat mehr als ein Element.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Gibt das einzige Element einer Sequenz zurück und löst eine Ausnahme aus, wenn nicht genau ein Element in der Sequenz vorhanden ist.</summary>
      <returns>Das einzige Element der Eingabesequenz.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen einziges Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Die Eingabesequenz enthält mehrere Elemente.- oder -Die Eingabesequenz ist leer.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt das einzige Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt, und löst eine Ausnahme aus, wenn mehrere solche Elemente vorhanden sind.</summary>
      <returns>Das einzige Element der Eingabesequenz, das eine Bedingung erfüllt.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein einzelnes Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion zum Überprüfen eines Elements auf eine Bedingung.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Kein Element erfüllt die Bedingung in <paramref name="predicate" />.- oder -Die Bedingung in <paramref name="predicate" /> wird von mehreren Elementen erfüllt.- oder -Die Quellsequenz ist leer.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Gibt das einzige Element einer Sequenz zurück oder einen Standardwert, wenn die Sequenz leer ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente in der Sequenz vorhanden sind.</summary>
      <returns>Das einzige Element der Eingabesequenz oder default(<paramref name="TSource" />), wenn die Sequenz keine Elemente enthält.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen einziges Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Die Eingabesequenz enthält mehrere Elemente.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt das einzige Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt, oder einen Standardwert, wenn kein solches Element vorhanden ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente die Bedingung erfüllen.</summary>
      <returns>Gibt das einzige Element der Eingabesequenz zurück, das die Bedingung erfüllt, oder default(<paramref name="TSource" />), wenn ein solches Element nicht gefunden wird.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein einzelnes Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion zum Überprüfen eines Elements auf eine Bedingung.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Umgeht eine festgelegte Anzahl von Elementen in einer Sequenz und gibt dann die übrigen Elemente zurück.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die Elemente enthält, die nach dem angegebenen Index in der Eingabesequenz auftreten.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem Elemente zurückgegeben werden sollen.</param>
      <param name="count">Die Anzahl der Elemente, die übersprungen werden sollen, bevor die übrigen Elemente zurückgegeben werden.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Umgeht Elemente in einer Sequenz, solange eine angegebene Bedingung true ist, und gibt dann die übrigen Elemente zurück.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die Elemente aus der Eingabesequenz ab dem ersten Element in der linearen Reihe enthält, das die in <paramref name="predicate" /> angegebene Überprüfung nicht besteht.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem Elemente zurückgegeben werden sollen.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Umgeht Elemente in einer Sequenz, solange eine angegebene Bedingung true ist, und gibt dann die übrigen Elemente zurück.In der Logik der Prädikatfunktion wird der Index des Elements verwendet.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die Elemente aus der Eingabesequenz ab dem ersten Element in der linearen Reihe enthält, das die in <paramref name="predicate" /> angegebene Überprüfung nicht besteht.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem Elemente zurückgegeben werden sollen.</param>
      <param name="predicate">Eine Funktion zum Überprüfen jedes Quellelements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Double" />-Werten.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen und deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen und deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen und deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen und deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen und deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Single" />-Werten.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Double" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen und die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Single" />-Werten, die durch den Aufruf einer Transformationsfunktion für jedes Element der Eingabesequenz ermittelt werden.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten, die zum Berechnen einer Summe verwendet werden.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Gibt eine angegebene Anzahl von zusammenhängenden Elementen ab dem Anfang einer Sequenz zurück.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die festgelegte Anzahl von Elementen ab dem Anfang der Eingabesequenz enthält.</returns>
      <param name="source">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</param>
      <param name="count">Die Anzahl der zurückzugebenden Elemente.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt Elemente aus einer Sequenz zurück, solange eine angegebene Bedingung true ist.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die Elemente aus der Eingabesequenz enthält, die vor dem Element auftreten, bei dem die Überprüfung nicht mehr erfolgreich ist.</returns>
      <param name="source">Eine Sequenz, aus der Elemente zurückgegeben werden sollen.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Gibt Elemente aus einer Sequenz zurück, solange eine angegebene Bedingung true ist.In der Logik der Prädikatfunktion wird der Index des Elements verwendet.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das Elemente aus der Eingabesequenz enthält, die vor dem Element auftreten, bei dem die Überprüfung nicht mehr erfolgreich ist.</returns>
      <param name="source">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</param>
      <param name="predicate">Eine Funktion zum Überprüfen jedes Quellelements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>Führt eine nachfolgende Sortierung der Elemente in einer Sequenz in aufsteigender Reihenfolge nach einem Schlüssel durch.</summary>
      <returns>Ein <see cref="T:System.Linq.IOrderedEnumerable`1" />, dessen Elemente nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IOrderedEnumerable`1" /> mit den zu sortierenden Elementen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Führt mithilfe eines angegebenen Vergleichs eine nachfolgende Sortierung der Elemente in einer Sequenz in aufsteigender Reihenfolge durch.</summary>
      <returns>Ein <see cref="T:System.Linq.IOrderedEnumerable`1" />, dessen Elemente nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IOrderedEnumerable`1" /> mit den zu sortierenden Elementen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>Führt eine nachfolgende Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge nach einem Schlüssel durch.</summary>
      <returns>Ein <see cref="T:System.Linq.IOrderedEnumerable`1" />, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IOrderedEnumerable`1" /> mit den zu sortierenden Elementen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Führt mithilfe eines angegebenen Vergleichs eine nachfolgende Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge durch.</summary>
      <returns>Ein <see cref="T:System.Linq.IOrderedEnumerable`1" />, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IOrderedEnumerable`1" /> mit den zu sortierenden Elementen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Erstellt ein Array aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>Ein Array, das die Elemente aus der Eingabesequenz enthält.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein Array erstellt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" /> gemäß einer angegebenen Schlüsselauswahlfunktion.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Schlüssel und Werte enthält.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist null.- oder -<paramref name="keySelector" /> erzeugt einen Schlüssel, der null ist.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> erzeugt für zwei Elemente doppelte Schlüssel.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" /> gemäß einer angegebenen Schlüsselauswahlfunktion und eines angegebenen Schlüsselvergleichs.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Schlüssel und Werte enthält.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ der von <paramref name="keySelector" /> zurückgegebenen Schlüssel.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist null.- oder -<paramref name="keySelector" /> erzeugt einen Schlüssel, der null ist.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> erzeugt für zwei Elemente doppelte Schlüssel.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" /> entsprechend der angegebenen Schlüsselauswahlfunktion und Elementauswahlfunktion.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Werte vom Typ <paramref name="TElement" /> enthält, die aus der Eingabesequenz ausgewählt werden.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="elementSelector">Eine Transformationsfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TElement">Der Typ des von <paramref name="elementSelector" /> zurückgegebenen Werts.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> ist null.- oder -<paramref name="keySelector" /> erzeugt einen Schlüssel, der null ist.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> erzeugt für zwei Elemente doppelte Schlüssel.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Erstellt ein <see cref="T:System.Collections.Generic.Dictionary`2" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" /> entsprechend einer angegebenen Schlüsselauswahlfunktion, einem Vergleich und einer Elementauswahlfunktion.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.Dictionary`2" />, das Werte vom Typ <paramref name="TElement" /> enthält, die aus der Eingabesequenz ausgewählt werden.</returns>
      <param name="source">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein <see cref="T:System.Collections.Generic.Dictionary`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="elementSelector">Eine Transformationsfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TElement">Der Typ des von <paramref name="elementSelector" /> zurückgegebenen Werts.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> ist null.- oder -<paramref name="keySelector" /> erzeugt einen Schlüssel, der null ist.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> erzeugt für zwei Elemente doppelte Schlüssel.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Erstellt eine <see cref="T:System.Collections.Generic.List`1" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>Eine <see cref="T:System.Collections.Generic.List`1" />, die Elemente aus der Eingabesequenz enthält.</returns>
      <param name="source">Das <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein <see cref="T:System.Collections.Generic.List`1" /> erstellt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Erstellt ein <see cref="T:System.Linq.Lookup`2" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" /> gemäß einer angegebenen Schlüsselauswahlfunktion.</summary>
      <returns>Ein <see cref="T:System.Linq.Lookup`2" />, das Schlüssel und Werte enthält.</returns>
      <param name="source">Das <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein <see cref="T:System.Linq.Lookup`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Erstellt ein <see cref="T:System.Linq.Lookup`2" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" /> gemäß einer angegebenen Schlüsselauswahlfunktion und eines angegebenen Schlüsselvergleichs.</summary>
      <returns>Ein <see cref="T:System.Linq.Lookup`2" />, das Schlüssel und Werte enthält.</returns>
      <param name="source">Das <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein <see cref="T:System.Linq.Lookup`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Erstellt ein <see cref="T:System.Linq.Lookup`2" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" /> entsprechend der angegebenen Schlüsselauswahlfunktion und Elementauswahlfunktion.</summary>
      <returns>Ein <see cref="T:System.Linq.Lookup`2" />, das Werte vom Typ <paramref name="TElement" /> enthält, die aus der Eingabesequenz ausgewählt werden.</returns>
      <param name="source">Das <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein <see cref="T:System.Linq.Lookup`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="elementSelector">Eine Transformationsfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TElement">Der Typ des von <paramref name="elementSelector" /> zurückgegebenen Werts.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Erstellt ein <see cref="T:System.Linq.Lookup`2" /> aus einem <see cref="T:System.Collections.Generic.IEnumerable`1" /> entsprechend einer angegebenen Schlüsselauswahlfunktion, einem Vergleich und einer Elementauswahlfunktion.</summary>
      <returns>Ein <see cref="T:System.Linq.Lookup`2" />, das Werte vom Typ <paramref name="TElement" /> enthält, die aus der Eingabesequenz ausgewählt werden.</returns>
      <param name="source">Das <see cref="T:System.Collections.Generic.IEnumerable`1" />, aus dem ein <see cref="T:System.Linq.Lookup`2" /> erstellt werden soll.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="elementSelector">Eine Transformationsfunktion, mit der aus jedem Element ein Ergebniselementwert erzeugt wird.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> zurückgegebenen Schlüssels.</typeparam>
      <typeparam name="TElement">Der Typ des von <paramref name="elementSelector" /> zurückgegebenen Werts.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Erzeugt die Vereinigungsmenge von zwei Sequenzen mithilfe des Standardgleichheitsvergleichs.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die Elemente aus beiden Eingabesequenzen ohne Duplikate enthält.</returns>
      <param name="first">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen unterschiedliche Elemente die erste Menge für die Vereinigungsmenge bilden.</param>
      <param name="second">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen unterschiedliche Elemente die zweite Menge für die Vereinigungsmenge bilden.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> oder <paramref name="second" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Erzeugt mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> die Vereinigungsmenge von zwei Sequenzen.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die Elemente aus beiden Eingabesequenzen ohne Duplikate enthält.</returns>
      <param name="first">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen unterschiedliche Elemente die erste Menge für die Vereinigungsmenge bilden.</param>
      <param name="second">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen unterschiedliche Elemente die zweite Menge für die Vereinigungsmenge bilden.</param>
      <param name="comparer">Der <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> oder <paramref name="second" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Filtert eine Sequenz von Werten nach einem Prädikat.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das Elemente aus der Eingabesequenz enthält, die die Bedingung erfüllen.</returns>
      <param name="source">Ein zu filterndes <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Filtert eine Sequenz von Werten nach einem Prädikat.In der Logik der Prädikatfunktion wird der Index der einzelnen Elemente verwendet.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das Elemente aus der Eingabesequenz enthält, die die Bedingung erfüllen.</returns>
      <param name="source">Ein zu filterndes <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <param name="predicate">Eine Funktion zum Überprüfen jedes Quellelements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>Führt zwei Sequenzen mit der angegebenen Prädikatfunktion zusammen.</summary>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das die zusammengeführten Elemente der beiden Eingabesequenzen enthält.</returns>
      <param name="first">Die erste Sequenz, die zusammengeführt werden soll.</param>
      <param name="second">Die zweite Sequenz, die zusammengeführt werden soll.</param>
      <param name="resultSelector">Eine Funktion, die angibt, wie die Elemente der zwei Sequenzen zusammengeführt werden sollen.</param>
      <typeparam name="TFirst">Der Typ der Elemente der ersten Eingabesequenz.</typeparam>
      <typeparam name="TSecond">Der Typ der Elemente der zweiten Eingabesequenz.</typeparam>
      <typeparam name="TResult">Der Typ der Elemente in der Ergebnissequenz.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> oder <paramref name="second" /> ist null.</exception>
    </member>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary>Stellt eine Ausdrucksbaumstruktur dar und liefert die Funktionalität zur Ausführung der Baumstruktur, nachdem sie umgeschrieben wurde.</summary>
    </member>
    <member name="M:System.Linq.EnumerableExecutor.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Linq.EnumerableExecutor" />-Klasse.</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary>Stellt eine Ausdrucksbaumstruktur dar und liefert die Funktionalität zur Ausführung der Baumstruktur, nachdem sie umgeschrieben wurde.</summary>
      <typeparam name="T">Der Datentyp des Werts, der aus der Ausführung der Ausdrucksbaumstruktur resultiert.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Linq.EnumerableExecutor`1" />-Klasse.</summary>
      <param name="expression">Eine Ausdrucksbaumstruktur, die der neuen Instanz zugeordnet werden soll.</param>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary>Stellt ein <see cref="T:System.Collections.IEnumerable" /> als eine <see cref="T:System.Linq.EnumerableQuery" />-Datenquelle dar. </summary>
    </member>
    <member name="M:System.Linq.EnumerableQuery.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Linq.EnumerableQuery" />-Klasse.</summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary>Stellt eine <see cref="T:System.Collections.Generic.IEnumerable`1" />-Auflistung als <see cref="T:System.Linq.IQueryable`1" />-Datenquelle dar.</summary>
      <typeparam name="T">Der Datentyp in der Datenauflistung.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Linq.EnumerableQuery`1" />-Klasse und verknüpft sie mit einer <see cref="T:System.Collections.Generic.IEnumerable`1" />-Auflistung.</summary>
      <param name="enumerable">Eine Auflistung, die der neuen Instanz zugeordnet werden soll.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Linq.EnumerableQuery`1" />-Klasse und verknüpft die Instanz mit einer Ausdrucksbaumstruktur.</summary>
      <param name="expression">Eine Ausdrucksbaumstruktur, die der neuen Instanz zugeordnet werden soll.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die zugehörige <see cref="T:System.Collections.Generic.IEnumerable`1" />-Auflistung durchlaufen kann oder der, falls diese null ist, die Auflistung durchläuft, die von der Umschreibung der zugehörigen Ausdrucksbaumstruktur als Abfrage zu einer <see cref="T:System.Collections.Generic.IEnumerable`1" />-Datenquelle stammt und diese ausführt.</summary>
      <returns>Ein Enumerator, mit dem die zugehörige Datenquelle durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die zugehörige <see cref="T:System.Collections.Generic.IEnumerable`1" />-Auflistung durchlaufen kann oder der, falls diese null ist, die Auflistung durchläuft, die von der Umschreibung der zugehörigen Ausdrucksbaumstruktur als Abfrage zu einer <see cref="T:System.Collections.Generic.IEnumerable`1" />-Datenquelle stammt und diese ausführt.</summary>
      <returns>Ein Enumerator, mit dem die zugehörige Datenquelle durchlaufen werden kann.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary>Ruft den Datentyp in der Auflistung ab, die diese Instanz darstellt.</summary>
      <returns>Der Datentyp in der Auflistung, die diese Instanz darstellt.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary>Ruft die Ausdrucksbaumstruktur ab, die dieser Instanz zugeordnet ist oder diese Instanz darstellt.</summary>
      <returns>Die Ausdrucksbaumstruktur, die mit dieser Instanz verknüpft ist oder diese Instanz darstellt.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary>Ruft den Abfrageanbieter ab, der mit dieser Instanz verknüpft ist.</summary>
      <returns>Der Abfrageanbieter, der mit dieser Instanz verknüpft ist.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine neues <see cref="T:System.Linq.EnumerableQuery`1" />-Objekt und verknüpft es mit einer angegebenen Ausdrucksbaumstruktur, die eine <see cref="T:System.Linq.IQueryable`1" />-Auflistung von Daten darstellt.</summary>
      <returns>Ein EnumerableQuery-Objekt, das mit <paramref name="expression" /> verknüpft ist.</returns>
      <param name="expression">Eine auszuführende Ausdrucksbaumstruktur.</param>
      <typeparam name="S">Der Datentyp in der Auflistung, die <paramref name="expression" /> darstellt.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine neues <see cref="T:System.Linq.EnumerableQuery`1" />-Objekt und verknüpft es mit einer angegebenen Ausdrucksbaumstruktur, die eine <see cref="T:System.Linq.IQueryable" />-Auflistung von Daten darstellt.</summary>
      <returns>Ein <see cref="T:System.Linq.EnumerableQuery`1" />-Objekt, das <paramref name="expression" /> zugeordnet ist.</returns>
      <param name="expression">Eine Ausdrucksbaumstruktur, die eine <see cref="T:System.Linq.IQueryable" />-Auflistung von Daten darstellt.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>Führt einen Ausdruck aus, nachdem dieser zum Aufrufen von <see cref="T:System.Linq.Enumerable" />-Methoden statt <see cref="T:System.Linq.Queryable" />-Methoden zu allen zählbaren Datenquellen umgeschrieben wurde, die nicht von <see cref="T:System.Linq.Queryable" />-Methoden abgefragt werden können.</summary>
      <returns>Der Wert, der aus der Ausführung von <paramref name="expression" /> stammt.</returns>
      <param name="expression">Eine auszuführende Ausdrucksbaumstruktur.</param>
      <typeparam name="S">Der Datentyp in der Auflistung, die <paramref name="expression" /> darstellt.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>Führt einen Ausdruck aus, nachdem dieser zum Aufrufen von <see cref="T:System.Linq.Enumerable" />-Methoden statt <see cref="T:System.Linq.Queryable" />-Methoden zu allen zählbaren Datenquellen umgeschrieben wurde, die nicht von <see cref="T:System.Linq.Queryable" />-Methoden abgefragt werden können.</summary>
      <returns>Der Wert, der aus der Ausführung von <paramref name="expression" /> stammt.</returns>
      <param name="expression">Eine auszuführende Ausdrucksbaumstruktur.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary>Gibt eine Textdarstellung der zählbaren Auflistung zurück oder, wenn diese NULL ist, eine Darstellung der Ausdrucksbaumstruktur, die dieser Instanz zugeordnet ist.</summary>
      <returns>Eine Textdarstellung der zählbaren Auflistung oder, wenn diese NULL ist, eine Darstellung der Ausdrucksbaumstruktur, die dieser Instanz zugeordnet ist.</returns>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary>Stellt eine Auflistung von Objekten dar, die über einen gemeinsamen Schlüssel verfügen.</summary>
      <typeparam name="TKey">Der Typ des Schlüssels des <see cref="T:System.Linq.IGrouping`2" />.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="TElement">Der Typ der Werte in <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary>Ruft den Schlüssel von <see cref="T:System.Linq.IGrouping`2" /> ab.</summary>
      <returns>Der Schlüssel von <see cref="T:System.Linq.IGrouping`2" />.</returns>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary>Definiert einen Indexer, eine Größeneigenschaft sowie eine boolesche Suchmethode für Datenstrukturen, die <see cref="T:System.Collections.Generic.IEnumerable`1" />-Sequenzen von Werten Schlüssel zuordnen.</summary>
      <typeparam name="TKey">Der Typ der Schlüssel in einem <see cref="T:System.Linq.ILookup`2" />.</typeparam>
      <typeparam name="TElement">Der Typ der Elemente in der <see cref="T:System.Collections.Generic.IEnumerable`1" />-Sequenz, aus denen die Werte im <see cref="T:System.Linq.ILookup`2" /> bestehen.</typeparam>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary>Bestimmt, ob ein angegebener Schlüssel im <see cref="T:System.Linq.ILookup`2" /> vorhanden ist.</summary>
      <returns>true, wenn <paramref name="key" /> in der <see cref="T:System.Linq.ILookup`2" /> vorhanden ist, andernfalls false.</returns>
      <param name="key">Der Schlüssel, der im <see cref="T:System.Linq.ILookup`2" /> gesucht werden soll.</param>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary>Ruft die Anzahl der Schlüssel-Wert-Paare in der Auflistung im <see cref="T:System.Linq.ILookup`2" /> ab.</summary>
      <returns>Die Anzahl der Schlüssel-Wert-Paare in <see cref="T:System.Linq.ILookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary>Ruft die <see cref="T:System.Collections.Generic.IEnumerable`1" />-Sequenz von Werten ab, die von einem angegebenen Schlüssel indiziert werden.</summary>
      <returns>Die <see cref="T:System.Collections.Generic.IEnumerable`1" />-Sequenz von Werten, die vom angegebenen Schlüssel indiziert werden.</returns>
      <param name="key">Der Schlüssel der gewünschten Sequenz von Werten.</param>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary>Stellt eine sortierte Sequenz dar.</summary>
      <typeparam name="TElement">Der Typ der Elemente der Sequenz.</typeparam>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary>Führt eine nachgeordnete Sortierung von Elementen eines <see cref="T:System.Linq.IOrderedEnumerable`1" /> anhand eines Schlüssels durch.</summary>
      <returns>Ein <see cref="T:System.Linq.IOrderedEnumerable`1" />, dessen Elemente nach einem Schlüssel sortiert werden.</returns>
      <param name="keySelector">Die <see cref="T:System.Func`2" /> zur Extrahierung der Schlüssel für die einzelnen Elemente.</param>
      <param name="comparer">Die <see cref="T:System.Collections.Generic.IComparer`1" />-Schnittstelle zum Vergleichen von Schlüsseln zur Platzierung in der zurückgegebenen Sequenz.</param>
      <param name="descending">true, um die Elemente in absteigender Reihenfolge zu sortieren, andernfalls false.</param>
      <typeparam name="TKey">Der Typ des von <paramref name="keySelector" /> erzeugten Schlüssels.</typeparam>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>Stellt das Ergebnis eines Sortiervorgangs dar.</summary>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>Stellt das Ergebnis eines Sortiervorgangs dar.</summary>
      <typeparam name="T">Der Typ des Inhalts der Datenquelle.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>Stellt Funktionen zur Auswertung von Abfragen für eine spezifische Datenquelle bereit, bei der der Datentyp nicht angegeben wurde.</summary>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>Ruft den Typ der Elemente ab, die zurückgegeben werden, wenn die Ausdrucksbaumstruktur ausgeführt wird, die mit dieser Instanz von <see cref="T:System.Linq.IQueryable" /> verknüpft ist.</summary>
      <returns>Ein <see cref="T:System.Type" />, der den Typ der Elemente darstellt, die zurückgegeben werden, wenn die Ausdrucksbaumstruktur ausgeführt wird, die mit diesem Objekt verknüpft ist.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>Ruft die Ausdrucksbaumstruktur ab, die mit der Instanz von <see cref="T:System.Linq.IQueryable" /> verknüpft ist.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.Expression" />, der mit dieser Instanz von <see cref="T:System.Linq.IQueryable" /> verknüpft ist.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>Ruft den Abfrageanbieter ab, der dieser Datenquelle zugeordnet ist.</summary>
      <returns>Der <see cref="T:System.Linq.IQueryProvider" />, der dieser Datenquelle zugeordnet ist.</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>Stellt Funktionen zur Auswertung von Abfragen für eine spezifische Datenquelle mit unbekanntem Datentyp bereit.</summary>
      <typeparam name="T">Der Datentyp in der Datenquelle.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>Definiert Methoden zum Erstellen und Ausführen von Abfragen, die von einem <see cref="T:System.Linq.IQueryable" />-Objekt beschrieben werden.</summary>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Konstruiert ein <see cref="T:System.Linq.IQueryable`1" />-Objekt, das die Abfrage auswerten kann, die von einer angegebenen Ausdrucksbaumstruktur dargestellt wird.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />-Objekt, das die Abfrage auswerten kann, die von der angegebenen Ausdrucksbaumstruktur dargestellt wird.</returns>
      <param name="expression">Eine Ausdrucksbaumstruktur, die eine LINQ-Abfrage darstellt.</param>
      <typeparam name="TElement">Der Typ der Elemente des <see cref="T:System.Linq.IQueryable`1" />-Objekts, das zurückgegeben wird.</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Konstruiert ein <see cref="T:System.Linq.IQueryable" />-Objekt, das die Abfrage auswerten kann, die von einer angegebenen Ausdrucksbaumstruktur dargestellt wird.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable" />-Objekt, das die Abfrage auswerten kann, die von der angegebenen Ausdrucksbaumstruktur dargestellt wird.</returns>
      <param name="expression">Eine Ausdrucksbaumstruktur, die eine LINQ-Abfrage darstellt.</param>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>Führt die stark typisierte Abfrage aus, die von einer angegebenen Ausdrucksbaumstruktur dargestellt wird.</summary>
      <returns>Der Wert, der aus der Ausführung der angegebenen Abfrage resultiert.</returns>
      <param name="expression">Eine Ausdrucksbaumstruktur, die eine LINQ-Abfrage darstellt.</param>
      <typeparam name="TResult">Der Typ des Werts, der aus der Ausführung der Abfrage resultiert.</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>Führt die Abfrage aus, die von einer angegebenen Ausdrucksbaumstruktur dargestellt wird.</summary>
      <returns>Der Wert, der aus der Ausführung der angegebenen Abfrage resultiert.</returns>
      <param name="expression">Eine Ausdrucksbaumstruktur, die eine LINQ-Abfrage darstellt.</param>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary>Stellt eine Auflistung von Schlüsseln dar, die einem oder mehreren Werten zugeordnet sind.</summary>
      <typeparam name="TKey">Der Typ der Schlüssel in einem <see cref="T:System.Linq.Lookup`2" />.</typeparam>
      <typeparam name="TElement">Der Elementtyp im jeweiligen <see cref="T:System.Collections.Generic.IEnumerable`1" />-Wert von <see cref="T:System.Linq.Lookup`2" />.</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary>Wendet eine Transformationsfunktion auf jeden Schlüssel sowie auf die zugeordneten Werte an und gibt die Ergebnisse zurück.</summary>
      <returns>Eine Auflistung mit einem Wert für jedes Schlüssel-Wert-Paar in der Auflistung im <see cref="T:System.Linq.Lookup`2" />.</returns>
      <param name="resultSelector">Eine Funktion zur Projizierung eines Ergebniswerts für die einzelnen Schlüssel sowie die zugeordneten Werte.</param>
      <typeparam name="TResult">Der Typ der von <paramref name="resultSelector" /> erzeugten Ergebniswerte.</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary>Bestimmt, ob ein angegebener Schlüssel im <see cref="T:System.Linq.Lookup`2" /> vorhanden ist.</summary>
      <returns>true, wenn <paramref name="key" /> in der <see cref="T:System.Linq.Lookup`2" /> vorhanden ist, andernfalls false.</returns>
      <param name="key">Der Schlüssel, der im <see cref="T:System.Linq.Lookup`2" /> gesucht werden soll.</param>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary>Ruft die Anzahl der Schlüssel-Wert-Paare in der Auflistung im <see cref="T:System.Linq.Lookup`2" /> ab.</summary>
      <returns>Die Anzahl der Schlüssel-Wert-Paare in <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary>Gibt einen generischen Enumerator zurück, der das <see cref="T:System.Linq.Lookup`2" /> durchläuft.</summary>
      <returns>Ein Enumerator für den <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary>Ruft die Auflistung von Werten ab, die vom angegebenen Schlüssel indiziert werden.</summary>
      <returns>Die Auflistung von Werten ab, die vom angegebenen Schlüssel indiziert werden.</returns>
      <param name="key">Der Schlüssel der gewünschten Auflistung von Werten.</param>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der das <see cref="T:System.Linq.Lookup`2" /> durchläuft.Diese Klasse kann nicht geerbt werden.</summary>
      <returns>Ein Enumerator für den <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary>Stellt einen Satz von static-Methoden (Shared-Methoden in Visual Basic) zum Abfragen von Datenstrukturen bereit, die <see cref="T:System.Linq.IQueryable`1" /> implementieren.</summary>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary>Wendet eine Akkumulatorfunktion auf eine Sequenz an.</summary>
      <returns>Der letzte Akkumulatorwert.</returns>
      <param name="source">Eine Sequenz, die aggregiert werden soll.</param>
      <param name="func">Eine Akkumulatorfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="func" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary>Wendet eine Akkumulatorfunktion auf eine Sequenz an.Der angegebene Startwert wird als erster Akkumulatorwert verwendet.</summary>
      <returns>Der letzte Akkumulatorwert.</returns>
      <param name="source">Eine Sequenz, die aggregiert werden soll.</param>
      <param name="seed">Der erste Akkumulatorwert.</param>
      <param name="func">Eine Akkumulatorfunktion, die für jedes Element aufgerufen werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Der Typ des Akkumulatorwerts.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="func" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary>Wendet eine Akkumulatorfunktion auf eine Sequenz an.Der angegebene Startwert wird als erster Akkumulatorwert verwendet, und der Ergebniswert wird mit der angegebenen Funktion ausgewählt.</summary>
      <returns>Der transformierte letzte Akkumulatorwert.</returns>
      <param name="source">Eine Sequenz, die aggregiert werden soll.</param>
      <param name="seed">Der erste Akkumulatorwert.</param>
      <param name="func">Eine Akkumulatorfunktion, die für jedes Element aufgerufen werden soll.</param>
      <param name="selector">Eine Funktion zum Transformieren des letzten Akkumulatorwerts in den Ergebniswert.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Der Typ des Akkumulatorwerts.</typeparam>
      <typeparam name="TResult">Der Typ des Ergebniswerts.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="func" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Bestimmt, ob alle Elemente einer Sequenz eine Bedingung erfüllen.</summary>
      <returns>true, wenn jedes Element der Quellsequenz im angegebenen Prädikat erfolgreich überprüft wird, oder wenn die Sequenz leer ist, andernfalls false.</returns>
      <param name="source">Eine Sequenz, deren Elemente auf eine Bedingung überprüft werden sollen.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary>Bestimmt, ob eine Sequenz Elemente enthält.</summary>
      <returns>true, wenn die Quellsequenz Elemente enthält, andernfalls false.</returns>
      <param name="source">Eine Sequenz, für die überprüft werden soll, ob sie leer ist.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Bestimmt, ob ein Element einer Sequenz eine Bedingung erfüllt.</summary>
      <returns>true, wenn Elemente der Quellsequenz im angegebenen Prädikat erfolgreich überprüft werden, andernfalls false.</returns>
      <param name="source">Eine Sequenz, deren Elemente auf eine Bedingung überprüft werden sollen.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Konvertiert ein generisches <see cref="T:System.Collections.Generic.IEnumerable`1" /> in ein generisches <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das die Eingabesequenz darstellt.</returns>
      <param name="source">Eine zu konvertierende Sequenz.</param>
      <typeparam name="TElement">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary>Konvertiert ein <see cref="T:System.Collections.IEnumerable" /> in ein <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable" />, das die Eingabesequenz darstellt.</returns>
      <param name="source">Eine zu konvertierende Sequenz.</param>
      <exception cref="T:System.ArgumentException">Für einige <paramref name="T" /> wird <see cref="T:System.Collections.Generic.IEnumerable`1" /> von <paramref name="source" /> nicht implementiert.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder NULL, wenn die Quellsequenz leer ist oder nur NULL-Werte enthält.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen und deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder NULL, wenn die Quellsequenz leer ist oder nur NULL-Werte enthält.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen und deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder null, wenn die Quellsequenz leer ist oder nur null-Werte enthält.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen und deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder NULL, wenn die Quellsequenz leer ist oder nur NULL-Werte enthält.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen und deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder NULL, wenn die Quellsequenz leer ist oder nur NULL-Werte enthält.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen und deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, deren Durchschnitt berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, mit denen ein Durchschnittswert berechnet wird.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder NULL, wenn die <paramref name="source" />-Sequenz leer ist oder nur NULL-Werte enthält.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder NULL, wenn die <paramref name="source" />-Sequenz leer ist oder nur NULL-Werte enthält.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder NULL, wenn die <paramref name="source" />-Sequenz leer ist oder nur NULL-Werte enthält.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder null, wenn die <paramref name="source" />-Sequenz leer ist oder nur null-Werte enthält.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten oder NULL, wenn die <paramref name="source" />-Sequenz leer ist oder nur NULL-Werte enthält.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Berechnet den Durchschnitt einer Sequenz von <see cref="T:System.Single" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Der Durchschnitt der Sequenz von Werten.</returns>
      <param name="source">Eine Sequenz von Werten, deren Durchschnitt berechnet werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält keine Elemente.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary>Konvertiert die Elemente eines <see cref="T:System.Linq.IQueryable" /> in den angegebenen Typ.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das jedes in den angegebenen Typ konvertierte Element der Quellsequenz enthält.</returns>
      <param name="source">Das <see cref="T:System.Linq.IQueryable" />, das die zu konvertierenden Elemente enthält.</param>
      <typeparam name="TResult">Der Typ, in den die Elemente von <paramref name="source" /> konvertiert werden sollen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidCastException">Ein Element in der Sequenz kann nicht in den Typ <paramref name="TResult" /> umgewandelt werden.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Verkettet zwei Sequenzen.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das die verketteten Elemente der beiden Eingabesequenzen enthält.</returns>
      <param name="source1">Die erste zu verkettende Sequenz.</param>
      <param name="source2">Die Sequenz, die mit der ersten Sequenz verkettet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> oder <paramref name="source2" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary>Bestimmt mithilfe des Standardgleichheitsvergleichs, ob eine Sequenz ein angegebenes Element enthält.</summary>
      <returns>true, wenn die Eingabesequenz ein Element mit dem angegebenen Wert enthält, andernfalls false.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, in dem<paramref name="item" /> gesucht werden soll.</param>
      <param name="item">Das Objekt, das in der Sequenz gesucht werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Bestimmt mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, ob eine Sequenz ein angegebenes Element enthält.</summary>
      <returns>true, wenn die Eingabesequenz ein Element mit dem angegebenen Wert enthält, andernfalls false.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, in dem <paramref name="item" /> gesucht werden soll.</param>
      <param name="item">Das Objekt, das in der Sequenz gesucht werden soll.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary>Gibt die Anzahl der Elemente in einer Sequenz zurück.</summary>
      <returns>Die Anzahl der Elemente in der Eingabesequenz.</returns>
      <param name="source">Das <see cref="T:System.Linq.IQueryable`1" />, das die zu zählenden Elemente enthält.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Gibt die Anzahl der Elemente in der angegebenen Sequenz zurück, die eine Bedingung erfüllen.</summary>
      <returns>Die Anzahl von Elementen in der Sequenz, die die Bedingung in der Prädikatfunktion erfüllen.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, das die zu zählenden Elemente enthält.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente in <paramref name="source" /> ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary>Gibt die Elemente der angegebenen Sequenz oder den Standardwert des Typparameters in einer Singletonauflistung zurück, wenn die Sequenz leer ist.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das default(<paramref name="TSource" />) enthält, wenn <paramref name="source" /> leer ist, andernfalls <paramref name="source" />.</returns>
      <param name="source">Das <see cref="T:System.Linq.IQueryable`1" />, für das ein Standardwert zurückgegeben soll, wenn die Sequenz leer ist.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary>Gibt die Elemente der angegebenen Sequenz zurück, oder den angegebenen Wert in einer Singletonauflistung, wenn die Sequenz leer ist.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das <paramref name="defaultValue" /> enthält, wenn <paramref name="source" /> leer ist, andernfalls <paramref name="source" />.</returns>
      <param name="source">Das <see cref="T:System.Linq.IQueryable`1" />, für das der angegebene Wert zurückgegeben soll, wenn die Sequenz leer ist.</param>
      <param name="defaultValue">Der Wert, der zurückgegeben werden soll, wenn die Sequenz leer ist.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary>Gibt mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten unterschiedliche Elemente aus einer Sequenz zurück.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das unterschiedliche Elemente aus <paramref name="source" /> enthält.</returns>
      <param name="source">Das <see cref="T:System.Linq.IQueryable`1" />, aus dem Duplikate entfernt werden sollen.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Gibt mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten unterschiedliche Elemente aus einer Sequenz zurück.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das unterschiedliche Elemente aus <paramref name="source" /> enthält.</returns>
      <param name="source">Das <see cref="T:System.Linq.IQueryable`1" />, aus dem Duplikate entfernt werden sollen.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="comparer" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Gibt das Element an einem angegebenen Index in einer Sequenz zurück.</summary>
      <returns>Das Element an der angegebenen Position in <paramref name="source" />.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein Element zurückgegeben werden soll.</param>
      <param name="index">Der nullbasierte Index des abzurufenden Elements.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ist kleiner als 0.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Gibt das Element an einem angegebenen Index in einer Sequenz oder einen Standardwert zurück, wenn der Index außerhalb des gültigen Bereichs liegt.</summary>
      <returns>default(<paramref name="TSource" />), wenn <paramref name="index" /> außerhalb der Begrenzungen von <paramref name="source" /> liegt; andernfalls das Element an der angegebenen Position in <paramref name="source" />.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein Element zurückgegeben werden soll.</param>
      <param name="index">Der nullbasierte Index des abzurufenden Elements.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Erzeugt die Differenzmenge zweier Sequenzen mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das die Differenzmenge der beiden Sequenzen enthält.</returns>
      <param name="source1">Es wird ein <see cref="T:System.Linq.IQueryable`1" /> zurückgegeben, dessen Elemente nicht auch in <paramref name="source2" /> enthalten sind.</param>
      <param name="source2">Die Rückgabesequenz enthält kein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente auch in der ersten Sequenz vorhanden sind.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> oder <paramref name="source2" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Erzeugt mithilfe des angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten die Differenzmenge zweier Sequenzen.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das die Differenzmenge der beiden Sequenzen enthält.</returns>
      <param name="source1">Es wird ein <see cref="T:System.Linq.IQueryable`1" /> zurückgegeben, dessen Elemente nicht auch in <paramref name="source2" /> enthalten sind.</param>
      <param name="source2">Die Rückgabesequenz enthält kein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente auch in der ersten Sequenz vorhanden sind.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> oder <paramref name="source2" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary>Gibt das erste Element einer Sequenz zurück.</summary>
      <returns>Das erste Element in <paramref name="source" />.</returns>
      <param name="source">Das <see cref="T:System.Linq.IQueryable`1" />, dessen erstes Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Die Quellsequenz ist leer.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Gibt das erste Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt.</summary>
      <returns>Das erste Element in <paramref name="source" />, das in <paramref name="predicate" /> erfolgreich überprüft wird.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Kein Element erfüllt die Bedingung in <paramref name="predicate" />.- oder -Die Quellsequenz ist leer.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Gibt das erste Element einer Sequenz zurück, oder einen Standardwert, wenn die Sequenz keine Elemente enthält.</summary>
      <returns>default(<paramref name="TSource" />), wenn <paramref name="source" /> leer ist, andernfalls das erste Element in <paramref name="source" />.</returns>
      <param name="source">Das <see cref="T:System.Linq.IQueryable`1" />, dessen erstes Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Gibt das erste Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt, oder einen Standardwert, wenn ein solches Element nicht gefunden wird.</summary>
      <returns>default(<paramref name="TSource" />), wenn <paramref name="source" /> leer ist oder wenn kein Element die von <paramref name="predicate" /> angegebene Überprüfung besteht. Andernfalls das erste Element in <paramref name="source" />, das die von <paramref name="predicate" /> angegebene Überprüfung besteht.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion.</summary>
      <returns>Ein IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# oder ein IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic, wobei jedes <see cref="T:System.Linq.IGrouping`2" />-Objekt eine Sequenz von Objekten und einen Schlüssel enthält.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von der in <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und vergleicht die Schlüssel mithilfe eines angegebenen Vergleichs.</summary>
      <returns>Ein IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# oder ein IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic, wobei jedes <see cref="T:System.Linq.IGrouping`2" /> eine Sequenz von Objekten und einen Schlüssel enthält.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von der in <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="comparer" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary>Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und projiziert die Elemente für jede Gruppe mithilfe einer angegebenen Funktion.</summary>
      <returns>Ein IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# oder ein IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic, wobei jedes <see cref="T:System.Linq.IGrouping`2" /> eine Sequenz von Objekten vom Typ <paramref name="TElement" /> und einen Schlüssel enthält.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="elementSelector">Eine Funktion, mit der jedes Quellelement einem Element in einem <see cref="T:System.Linq.IGrouping`2" /> zugeordnet wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von der in <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <typeparam name="TElement">Der Typ der Elemente in jedem <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Gruppiert die Elemente einer Sequenz und projiziert die Elemente jeder Gruppe mithilfe einer angegebenen Funktion.Schlüsselwerte werden mithilfe eines angegebenen Vergleichs verglichen.</summary>
      <returns>Ein IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# oder ein IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic, wobei jedes <see cref="T:System.Linq.IGrouping`2" /> eine Sequenz von Objekten vom Typ <paramref name="TElement" /> und einen Schlüssel enthält.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="elementSelector">Eine Funktion, mit der jedes Quellelement einem Element in einem <see cref="T:System.Linq.IGrouping`2" /> zugeordnet wird.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von der in <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <typeparam name="TElement">Der Typ der Elemente in jedem <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> oder <paramref name="comparer" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary>Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.Die Elemente jeder Gruppe werden mithilfe einer angegebenen Funktion projiziert.</summary>
      <returns>Ein T:System.Linq.IQueryable`1, das über das Typargument <paramref name="TResult" /> verfügt und in dem jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="elementSelector">Eine Funktion, mit der jedes Quellelement einem Element in einem <see cref="T:System.Linq.IGrouping`2" /> zugeordnet wird.</param>
      <param name="resultSelector">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von der in <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <typeparam name="TElement">Der Typ der Elemente in jedem <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> oder <paramref name="resultSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.Schlüssel werden mithilfe eines angegebenen Vergleichs verglichen, und die Elemente jeder Gruppe werden mithilfe einer angegebenen Funktion projiziert.</summary>
      <returns>Ein T:System.Linq.IQueryable`1, das über das Typargument <paramref name="TResult" /> verfügt und in dem jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="elementSelector">Eine Funktion, mit der jedes Quellelement einem Element in einem <see cref="T:System.Linq.IGrouping`2" /> zugeordnet wird.</param>
      <param name="resultSelector">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von der in <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <typeparam name="TElement">Der Typ der Elemente in jedem <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="elementSelector" /> oder <paramref name="resultSelector" /> oder <paramref name="comparer" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary>Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.</summary>
      <returns>Ein T:System.Linq.IQueryable`1, das über das Typargument <paramref name="TResult" /> verfügt und in dem jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="resultSelector">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von der in <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <typeparam name="TResult">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="resultSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Gruppiert die Elemente einer Sequenz entsprechend einer angegebenen Schlüsselauswahlfunktion und erstellt aus jeder Gruppe und ihrem Schlüssel einen Ergebniswert.Schlüssel werden mithilfe eines angegebenen Vergleichs verglichen.</summary>
      <returns>Ein T:System.Linq.IQueryable`1, das über das Typargument <paramref name="TResult" /> verfügt und in dem jedes Element eine Projektion über einer Gruppe und ihrem Schlüssel darstellt.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente gruppiert werden sollen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren des Schlüssels für jedes Element.</param>
      <param name="resultSelector">Eine Funktion, mit der aus jeder Gruppe ein Ergebniswert erstellt wird.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von der in <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <typeparam name="TResult">Der Typ des von <paramref name="resultSelector" /> zurückgegebenen Ergebniswerts.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="resultSelector" /> oder <paramref name="comparer" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary>Korreliert die Elemente von zwei Sequenzen anhand der Gleichheit der Schlüssel und gruppiert die Ergebnisse.Schlüssel werden mithilfe des Standardgleichheitsvergleichs verglichen.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das Elemente vom Typ <paramref name="TResult" /> enthält, die durch Ausführen eines Gruppenjoins von zwei Sequenzen ermittelt werden.</returns>
      <param name="outer">Die erste zu verknüpfende Sequenz.</param>
      <param name="inner">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</param>
      <param name="outerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</param>
      <param name="innerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</param>
      <param name="resultSelector">Eine Funktion zum Erstellen eines Ergebniselements anhand eines Elements aus der ersten Sequenz und einer Auflistung von übereinstimmenden Elementen aus der zweiten Sequenz.</param>
      <typeparam name="TOuter">Der Typ der Elemente der ersten Sequenz.</typeparam>
      <typeparam name="TInner">Der Typ der Elemente der zweiten Sequenz.</typeparam>
      <typeparam name="TKey">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</typeparam>
      <typeparam name="TResult">Der Typ der Ergebniselemente.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> oder <paramref name="inner" /> oder <paramref name="outerKeySelector" /> oder <paramref name="innerKeySelector" /> oder <paramref name="resultSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Korreliert die Elemente von zwei Sequenzen anhand der Gleichheit der Schlüssel und gruppiert die Ergebnisse.Schlüssel werden mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> verglichen.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das Elemente vom Typ<paramref name="TResult" /> enthält, die durch Ausführen eines Gruppenjoins von zwei Sequenzen ermittelt werden.</returns>
      <param name="outer">Die erste zu verknüpfende Sequenz.</param>
      <param name="inner">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</param>
      <param name="outerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</param>
      <param name="innerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</param>
      <param name="resultSelector">Eine Funktion zum Erstellen eines Ergebniselements anhand eines Elements aus der ersten Sequenz und einer Auflistung von übereinstimmenden Elementen aus der zweiten Sequenz.</param>
      <param name="comparer">Ein Vergleich zum Hashen und Vergleichen von Schlüsseln.</param>
      <typeparam name="TOuter">Der Typ der Elemente der ersten Sequenz.</typeparam>
      <typeparam name="TInner">Der Typ der Elemente der zweiten Sequenz.</typeparam>
      <typeparam name="TKey">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</typeparam>
      <typeparam name="TResult">Der Typ der Ergebniselemente.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> oder <paramref name="inner" /> oder <paramref name="outerKeySelector" /> oder <paramref name="innerKeySelector" /> oder <paramref name="resultSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Erzeugt die Schnittmenge zweier Sequenzen mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Werten.</summary>
      <returns>Eine Sequenz, die die Schnittmenge der beiden Sequenzen enthält.</returns>
      <param name="source1">Eine Sequenz, deren unterschiedliche Elemente, die auch in <paramref name="source2" /> vorhanden sind, zurückgegeben werden.</param>
      <param name="source2">Eine Sequenz, deren unterschiedliche Elemente, die auch in der ersten Sequenz vorhanden sind, zurückgegeben werden.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> oder <paramref name="source2" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Erzeugt mithilfe des angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten die Schnittmenge von zwei Sequenzen.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das die Schnittmenge der beiden Sequenzen enthält.</returns>
      <param name="source1">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen unterschiedliche Elemente auch in <paramref name="source2" /> vorhanden sind, wird zurückgegeben.</param>
      <param name="source2">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen unterschiedliche Elemente, die auch in der ersten Sequenz vorhanden sind, zurückgegeben werden.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> oder <paramref name="source2" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>Korreliert die Elemente von zwei Sequenzen auf der Grundlage von übereinstimmenden Schlüsseln.Schlüssel werden mithilfe des Standardgleichheitsvergleichs verglichen.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, für das Elemente vom Typ <paramref name="TResult" /> durch Ausführen eines inneren Joins von zwei Sequenzen ermittelt werden.</returns>
      <param name="outer">Die erste zu verknüpfende Sequenz.</param>
      <param name="inner">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</param>
      <param name="outerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</param>
      <param name="innerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</param>
      <param name="resultSelector">Eine Funktion zum Erstellen eines Ergebniselements aus zwei übereinstimmenden Elementen.</param>
      <typeparam name="TOuter">Der Typ der Elemente der ersten Sequenz.</typeparam>
      <typeparam name="TInner">Der Typ der Elemente der zweiten Sequenz.</typeparam>
      <typeparam name="TKey">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</typeparam>
      <typeparam name="TResult">Der Typ der Ergebniselemente.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> oder <paramref name="inner" /> oder <paramref name="outerKeySelector" /> oder <paramref name="innerKeySelector" /> oder <paramref name="resultSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Korreliert die Elemente von zwei Sequenzen auf der Grundlage von übereinstimmenden Schlüsseln.Schlüssel werden mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> verglichen.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, für das Elemente vom Typ <paramref name="TResult" /> durch Ausführen eines inneren Joins von zwei Sequenzen ermittelt werden.</returns>
      <param name="outer">Die erste zu verknüpfende Sequenz.</param>
      <param name="inner">Die Sequenz, die mit der ersten Sequenz verknüpft werden soll.</param>
      <param name="outerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der ersten Sequenz.</param>
      <param name="innerKeySelector">Eine Funktion zum Extrahieren des Joinschlüssels aus jedem Element der zweiten Sequenz.</param>
      <param name="resultSelector">Eine Funktion zum Erstellen eines Ergebniselements aus zwei übereinstimmenden Elementen.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Hashen und Vergleichen von Schlüsseln.</param>
      <typeparam name="TOuter">Der Typ der Elemente der ersten Sequenz.</typeparam>
      <typeparam name="TInner">Der Typ der Elemente der zweiten Sequenz.</typeparam>
      <typeparam name="TKey">Der Typ der von den Schlüsselauswahlfunktionen zurückgegebenen Schlüssel.</typeparam>
      <typeparam name="TResult">Der Typ der Ergebniselemente.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> oder <paramref name="inner" /> oder <paramref name="outerKeySelector" /> oder <paramref name="innerKeySelector" /> oder <paramref name="resultSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary>Gibt das letzte Element in einer Sequenz zurück.</summary>
      <returns>Der Wert an der letzten Position in <paramref name="source" />.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen letztes Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Die Quellsequenz ist leer.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Gibt das letzte Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt.</summary>
      <returns>Das letzte Element in <paramref name="source" />, das die von <paramref name="predicate" /> angegebene Überprüfung besteht.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Kein Element erfüllt die Bedingung in <paramref name="predicate" />.- oder -Die Quellsequenz ist leer.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Gibt das letzte Element in einer Sequenz zurück, oder einen Standardwert, wenn die Sequenz keine Elemente enthält.</summary>
      <returns>default(<paramref name="TSource" />), wenn <paramref name="source" /> leer ist, andernfalls das letzte Element in <paramref name="source" />.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen letztes Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Gibt das letzte Element einer Sequenz zurück, das eine Bedingung erfüllt, oder einen Standardwert, wenn ein solches Element nicht gefunden wird.</summary>
      <returns>default(<paramref name="TSource" />), wenn <paramref name="source" /> leer ist oder keine Elemente von der Prädikatfunktion erfolgreich überprüft werden, andernfalls das letzte Element von <paramref name="source" />, das von der Prädikatfunktion erfolgreich überprüft wird.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary>Gibt ein <see cref="T:System.Int64" /> zurück, das die Gesamtanzahl der Elemente in einer Sequenz darstellt.</summary>
      <returns>Die Anzahl der Elemente in <paramref name="source" />.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, das die zu zählenden Elemente enthält.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der Elemente überschreitet <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Gibt ein <see cref="T:System.Int64" /> zurück, das die Anzahl der Elemente in einer Sequenz darstellt, die eine Bedingung erfüllen.</summary>
      <returns>Die Anzahl der Elemente in <paramref name="source" />, die die Bedingung in der Prädikatfunktion erfüllen.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, das die zu zählenden Elemente enthält.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.OverflowException">Die Anzahl der übereinstimmenden Elemente überschreitet <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary>Gibt den Höchstwert in einem generischen <see cref="T:System.Linq.IQueryable`1" /> zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Ruft für jedes Element eines generischen <see cref="T:System.Linq.IQueryable`1" /> eine Projektionsfunktion auf und gibt den höchsten Ergebniswert zurück.</summary>
      <returns>Der Höchstwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Höchstwert bestimmt werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der Typ des Werts, der von der durch <paramref name="selector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary>Gibt den Mindestwert eines generischen <see cref="T:System.Linq.IQueryable`1" /> zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Ruft für jedes Element eines generischen <see cref="T:System.Linq.IQueryable`1" /> eine Projektionsfunktion auf und gibt den niedrigsten Ergebniswert zurück.</summary>
      <returns>Der Mindestwert in der Sequenz.</returns>
      <param name="source">Eine Sequenz von Werten, deren Mindestwert bestimmt werden soll.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der Typ des Werts, der von der durch <paramref name="selector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary>Filtert die Elemente eines <see cref="T:System.Linq.IQueryable" /> anhand eines angegebenen Typs.</summary>
      <returns>Eine Auflistung, die die Elemente aus <paramref name="source" /> mit dem Typ <paramref name="TResult" /> enthält.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable" />, dessen Elemente gefiltert werden sollen.</param>
      <typeparam name="TResult">Der Typ, nach dem die Elemente der Sequenz gefiltert werden sollen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Sortiert die Elemente einer Sequenz in aufsteigender Reihenfolge nach einem Schlüssel.</summary>
      <returns>Ein <see cref="T:System.Linq.IOrderedQueryable`1" />, dessen Elemente nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Eine Sequenz von anzuordnenden Werten.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von der durch <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Sortiert die Elemente einer Sequenz mithilfe eines angegebenen Vergleichs in aufsteigender Reihenfolge.</summary>
      <returns>Ein <see cref="T:System.Linq.IOrderedQueryable`1" />, dessen Elemente nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Eine Sequenz von anzuordnenden Werten.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von der durch <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="comparer" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Sortiert die Elemente einer Sequenz in absteigender Reihenfolge nach einem Schlüssel.</summary>
      <returns>Ein <see cref="T:System.Linq.IOrderedQueryable`1" />, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Eine Sequenz von anzuordnenden Werten.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von der durch <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Sortiert die Elemente einer Sequenz mithilfe eines angegebenen Vergleichs in absteigender Reihenfolge.</summary>
      <returns>Ein <see cref="T:System.Linq.IOrderedQueryable`1" />, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Eine Sequenz von anzuordnenden Werten.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus einem Element.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von der durch <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="comparer" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary>Kehrt die Reihenfolge der Elemente in einer Sequenz um.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente den Elementen der Eingabesequenz in umgekehrter Reihenfolge entsprechen.</returns>
      <param name="source">Eine umzukehrende Sequenz von Werten.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Projiziert jedes Element einer Sequenz in ein neues Format.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente das Ergebnis des Aufrufs einer Projektionsfunktion für jedes Element von <paramref name="source" /> sind.</returns>
      <param name="source">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der Typ des Werts, der von der durch <paramref name="selector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary>Projiziert jedes Element einer Sequenz in ein neues Format, indem der Index des Elements integriert wird.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente das Ergebnis des Aufrufs einer Projektionsfunktion für jedes Element von <paramref name="source" /> sind.</returns>
      <param name="source">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der Typ des Werts, der von der durch <paramref name="selector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> und ruft für jedes darin enthaltene Element eine Ergebnisauswahlfunktion auf.Die Ergebniswerte aus jeder Zwischensequenz werden zu einer einzigen eindimensionalen Sequenz zusammengefasst und zurückgegeben.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente erzeugt werden, indem die 1:n-Projektionsfunktion <paramref name="collectionSelector" /> für jedes Element von <paramref name="source" /> aufgerufen wird und dann jedes so erzeugte Element der Sequenz und sein entsprechendes <paramref name="source" />-Element einem Ergebniselement zugeordnet werden.</returns>
      <param name="source">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="collectionSelector">Eine Projektionsfunktion, die auf jedes Element der Eingabesequenz angewendet werden soll.</param>
      <param name="resultSelector">Eine Projektionsfunktion, die auf jedes Element jeder Zwischensequenz angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">Der Typ der Zwischenelemente, die von der durch <paramref name="collectionSelector" /> dargestellten Funktion erfasst werden.</typeparam>
      <typeparam name="TResult">Der Typ der Elemente in der resultierenden Sequenz.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="collectionSelector" /> oder <paramref name="resultSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> und fasst die resultierenden Sequenzen in einer einzigen Sequenz zusammen.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente das Ergebnis des Aufrufs einer 1:n-Projektionsfunktion für jedes Element der Eingabesequenz sind.</returns>
      <param name="source">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der Typ der Elemente der Sequenz, die von der durch <paramref name="selector" /> dargestellten Funktion zurückgegeben werden.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, das den Index des Quellelements enthält, von dem es erzeugt wurde.Für jedes Element jeder Zwischensequenz wird eine Ergebnisauswahlfunktion aufgerufen, und die Ergebniswerte werden zu einer einzigen eindimensionale Sequenz zusammengefasst und zurückgegeben.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente erzeugt werden, indem die 1:n-Projektionsfunktion <paramref name="collectionSelector" /> für jedes Element von <paramref name="source" /> aufgerufen wird und dann jedes so erzeugte Element der Sequenz und sein entsprechendes <paramref name="source" />-Element einem Ergebniselement zugeordnet werden.</returns>
      <param name="source">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="collectionSelector">Eine Projektionsfunktion, die auf jedes Element der Eingabesequenz angewendet werden soll. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</param>
      <param name="resultSelector">Eine Projektionsfunktion, die auf jedes Element jeder Zwischensequenz angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">Der Typ der Zwischenelemente, die von der durch <paramref name="collectionSelector" /> dargestellten Funktion erfasst werden.</typeparam>
      <typeparam name="TResult">Der Typ der Elemente in der resultierenden Sequenz.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="collectionSelector" /> oder <paramref name="resultSelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> und fasst die resultierenden Sequenzen in einer einzigen Sequenz zusammen.Der Index jedes Quellelements wird im projizierten Format des jeweiligen Elements verwendet.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente das Ergebnis des Aufrufs einer 1:n-Projektionsfunktion für jedes Element der Eingabesequenz sind.</returns>
      <param name="source">Eine Sequenz von zu projizierenden Werten.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Der Typ der Elemente der Sequenz, die von der durch <paramref name="selector" /> dargestellten Funktion zurückgegeben werden.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Bestimmt mithilfe des Standardgleichheitsvergleichs zum Vergleichen von Elementen, ob zwei Sequenzen gleich sind.</summary>
      <returns>true, wenn die zwei Quellsequenzen von gleicher Länge sind und ihre entsprechenden Elemente als gleich gelten, andernfalls false.</returns>
      <param name="source1">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente mit den Elementen von <paramref name="source2" /> verglichen werden sollen.</param>
      <param name="source2">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente mit den Elementen der ersten Sequenz verglichen werden sollen.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> oder <paramref name="source2" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Bestimmt mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Elementen, ob zwei Sequenzen gleich sind.</summary>
      <returns>true, wenn die zwei Quellsequenzen von gleicher Länge sind und ihre entsprechenden Elemente als gleich gelten, andernfalls false.</returns>
      <param name="source1">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen Elemente mit den Elementen von <paramref name="source2" /> verglichen werden sollen.</param>
      <param name="source2">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente mit den Elementen der ersten Sequenz verglichen werden sollen.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, der zum Vergleichen von Elementen verwendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> oder <paramref name="source2" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary>Gibt das einzige Element einer Sequenz zurück und löst eine Ausnahme aus, wenn nicht genau ein Element in der Sequenz vorhanden ist.</summary>
      <returns>Das einzige Element der Eingabesequenz.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen einziges Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> hat mehr als ein Element.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Gibt das einzige Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt, und löst eine Ausnahme aus, wenn mehrere solche Elemente vorhanden sind.</summary>
      <returns>Das einzige Element der Eingabesequenz, das die Bedingung in <paramref name="predicate" /> erfüllt.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein einzelnes Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion zum Überprüfen eines Elements auf eine Bedingung.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Kein Element erfüllt die Bedingung in <paramref name="predicate" />.- oder -Die Bedingung in <paramref name="predicate" /> wird von mehreren Elementen erfüllt.- oder -Die Quellsequenz ist leer.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Gibt das einzige Element einer Sequenz zurück oder einen Standardwert, wenn die Sequenz leer ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente in der Sequenz vorhanden sind.</summary>
      <returns>Das einzige Element der Eingabesequenz oder default(<paramref name="TSource" />), wenn die Sequenz keine Elemente enthält.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, dessen einziges Element zurückgegeben werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Gibt das einzige Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt, oder einen Standardwert, wenn kein solches Element vorhanden ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente die Bedingung erfüllen.</summary>
      <returns>Das einzige Element der Eingabesequenz, das die Bedingung in <paramref name="predicate" /> erfüllt, oder default(<paramref name="TSource" />), wenn kein solches Element gefunden wird.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem ein einzelnes Element zurückgegeben werden soll.</param>
      <param name="predicate">Eine Funktion zum Überprüfen eines Elements auf eine Bedingung.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Umgeht eine festgelegte Anzahl von Elementen in einer Sequenz und gibt dann die übrigen Elemente zurück.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das Elemente enthält, die nach dem angegebenen Index in der Eingabesequenz auftreten.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem Elemente zurückgegeben werden sollen.</param>
      <param name="count">Die Anzahl der Elemente, die übersprungen werden sollen, bevor die übrigen Elemente zurückgegeben werden.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Umgeht Elemente in einer Sequenz, solange eine angegebene Bedingung true ist, und gibt dann die übrigen Elemente zurück.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das Elemente aus <paramref name="source" /> ab dem ersten Element in der linearen Reihe enthält, das die in <paramref name="predicate" /> angegebene Überprüfung nicht besteht.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem Elemente zurückgegeben werden sollen.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Umgeht Elemente in einer Sequenz, solange eine angegebene Bedingung true ist, und gibt dann die übrigen Elemente zurück.In der Logik der Prädikatfunktion wird der Index des Elements verwendet.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das Elemente aus <paramref name="source" /> ab dem ersten Element in der linearen Reihe enthält, das die in <paramref name="predicate" /> angegebene Überprüfung nicht besteht.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IQueryable`1" />, aus dem Elemente zurückgegeben werden sollen.</param>
      <param name="predicate">Eine Funktion zum Überprüfen jedes Elements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Quellelements dar.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Double" />-Werten.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen und deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen und deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen und deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen und deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen und deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Single" />-Werten.</summary>
      <returns>Die Summe der Werte in der Sequenz.</returns>
      <param name="source">Eine Sequenz von <see cref="T:System.Single" />-Werten, deren Summe berechnet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Double" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Decimal" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Double" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Int32" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Int64" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
      <exception cref="T:System.OverflowException">Die Summe ist größer als <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Single" />-Werten, die NULL zulassen, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Berechnet die Summe einer Sequenz von <see cref="T:System.Single" />-Werten, die durch den Aufruf einer Projektionsfunktion für jedes Element der Eingabesequenz ermittelt wird.</summary>
      <returns>Die Summe der projizierten Werte.</returns>
      <param name="source">Eine Sequenz von Werten des Typs <paramref name="TSource" />.</param>
      <param name="selector">Eine Projektionsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="selector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Gibt eine angegebene Anzahl von zusammenhängenden Elementen ab dem Anfang einer Sequenz zurück.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das die angegebene Anzahl von Elementen ab dem Anfang von <paramref name="source" /> enthält.</returns>
      <param name="source">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</param>
      <param name="count">Die Anzahl der zurückzugebenden Elemente.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Gibt Elemente aus einer Sequenz zurück, solange eine angegebene Bedingung true ist.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das Elemente aus der Eingabesequenz enthält, die vor dem Element auftreten, bei dem die von <paramref name="predicate" /> angegebene Überprüfung nicht mehr erfolgreich ist.</returns>
      <param name="source">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Gibt Elemente aus einer Sequenz zurück, solange eine angegebene Bedingung true ist.In der Logik der Prädikatfunktion wird der Index des Elements verwendet.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das Elemente aus der Eingabesequenz enthält, die vor dem Element auftreten, bei dem die von <paramref name="predicate" /> angegebene Überprüfung nicht mehr erfolgreich ist.</returns>
      <param name="source">Die Sequenz, aus der Elemente zurückgegeben werden sollen.</param>
      <param name="predicate">Eine Funktion zum Überprüfen jedes Elements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Elements in der Quellsequenz dar.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Führt eine nachfolgende Sortierung der Elemente in einer Sequenz in aufsteigender Reihenfolge nach einem Schlüssel durch.</summary>
      <returns>Ein <see cref="T:System.Linq.IOrderedQueryable`1" />, dessen Elemente nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IOrderedQueryable`1" /> mit den zu sortierenden Elementen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von der von <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Führt mithilfe eines angegebenen Vergleichs eine nachfolgende Sortierung der Elemente in einer Sequenz in aufsteigender Reihenfolge durch.</summary>
      <returns>Ein <see cref="T:System.Linq.IOrderedQueryable`1" />, dessen Elemente nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IOrderedQueryable`1" /> mit den zu sortierenden Elementen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von der von <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="comparer" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Führt eine nachfolgende Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge nach einem Schlüssel durch.</summary>
      <returns>Ein <see cref="T:System.Linq.IOrderedQueryable`1" />, dessen Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IOrderedQueryable`1" /> mit den zu sortierenden Elementen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von der von <paramref name="keySelector" /> dargestellten Funktion zurückgegeben wird.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Führt mithilfe eines angegebenen Vergleichs eine nachfolgende Sortierung der Elemente in einer Sequenz in absteigender Reihenfolge durch.</summary>
      <returns>Eine Auflistung, deren Elemente in absteigender Reihenfolge nach einem Schlüssel sortiert werden.</returns>
      <param name="source">Ein <see cref="T:System.Linq.IOrderedQueryable`1" /> mit den zu sortierenden Elementen.</param>
      <param name="keySelector">Eine Funktion zum Extrahieren eines Schlüssels aus jedem Element.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IComparer`1" /> zum Vergleichen von Schlüsseln.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels, der von der <paramref name="keySelector" />-Funktion zurückgegeben wird.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="keySelector" /> oder <paramref name="comparer" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Erzeugt die Vereinigungsmenge von zwei Sequenzen mithilfe des Standardgleichheitsvergleichs.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das die Elemente aus beiden Eingabesequenzen ohne Duplikate enthält.</returns>
      <param name="source1">Eine Sequenz, deren unterschiedliche Elemente den ersten Satz für die Gesamtmengenbildung darstellen.</param>
      <param name="source2">Eine Sequenz, deren unterschiedliche Elemente den zweiten Satz für die Gesamtmengenbildung darstellen.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> oder <paramref name="source2" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Erzeugt mithilfe eines angegebenen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> die Vereinigungsmenge von zwei Sequenzen.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das die Elemente aus beiden Eingabesequenzen ohne Duplikate enthält.</returns>
      <param name="source1">Eine Sequenz, deren unterschiedliche Elemente den ersten Satz für die Gesamtmengenbildung darstellen.</param>
      <param name="source2">Eine Sequenz, deren unterschiedliche Elemente den zweiten Satz für die Gesamtmengenbildung darstellen.</param>
      <param name="comparer">Ein <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> zum Vergleichen von Werten.</param>
      <typeparam name="TSource">Der Typ der Elemente der Eingabesequenzen.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> oder <paramref name="source2" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Filtert eine Sequenz von Werten nach einem Prädikat.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" /> mit Elementen aus der Eingabesequenz, die die von <paramref name="predicate" /> angegebene Bedingung erfüllen.</returns>
      <param name="source">Ein zu filterndes <see cref="T:System.Linq.IQueryable`1" />.</param>
      <param name="predicate">Eine Funktion, mit der jedes Element auf eine Bedingung überprüft wird.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Filtert eine Sequenz von Werten nach einem Prädikat.In der Logik der Prädikatfunktion wird der Index der einzelnen Elemente verwendet.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" /> mit Elementen aus der Eingabesequenz, die die von <paramref name="predicate" /> angegebene Bedingung erfüllen.</returns>
      <param name="source">Ein zu filterndes <see cref="T:System.Linq.IQueryable`1" />.</param>
      <param name="predicate">Eine Funktion zum Überprüfen jedes Elements auf eine Bedingung. Der zweite Parameter der Funktion stellt den Index des Elements in der Quellsequenz dar.</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> oder <paramref name="predicate" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Führt zwei Sequenzen mit der angegebenen Prädikatfunktion zusammen.</summary>
      <returns>Ein <see cref="T:System.Linq.IQueryable`1" />, das die zusammengeführten Elemente der beiden Eingabesequenzen enthält.</returns>
      <param name="source1">Die erste Sequenz, die zusammengeführt werden soll.</param>
      <param name="source2">Die zweite Sequenz, die zusammengeführt werden soll.</param>
      <param name="resultSelector">Eine Funktion, die angibt, wie die Elemente der zwei Sequenzen zusammengeführt werden sollen.</param>
      <typeparam name="TFirst">Der Typ der Elemente der ersten Eingabesequenz.</typeparam>
      <typeparam name="TSecond">Der Typ der Elemente der zweiten Eingabesequenz.</typeparam>
      <typeparam name="TResult">Der Typ der Elemente in der Ergebnissequenz.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> oder <paramref name="source2 " /> ist null.</exception>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>Stellt einen Ausdruck dar, der einen binären Operator aufweist.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp.Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /><see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>Ruft einen Wert ab, der angibt, ob der Knoten der Ausdrucksbaumstruktur reduziert werden kann.</summary>
      <returns>True, wenn der Knoten der Ausdrucksbaumstruktur reduziert werden kann, andernfalls false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>Ruft die Typkonvertierungsfunktion ab, die von einer zusammenfügenden oder zusammengesetzten Zuweisungsoperation verwendet wird.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, die eine Typkonvertierungsfunktion darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>Ruft einen Wert ab, der angibt, ob der Ausdrucksstrukturknoten einen transformierten Aufruf eines Operators darstellt.</summary>
      <returns>true, wenn der Knoten einen transformierten Aufruf darstellt, andernfalls false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>Ruft einen Wert ab, der angibt, ob der Ausdrucksstrukturknoten einen transformierten Aufruf eines Operators darstellt, dessen Rückgabetyp zu einem Typ transformiert wird, der NULL-Werte zulässt.</summary>
      <returns>true, wenn der Rückgabetyp des Operators zu einem Typ, der NULL-Werte zulässt, transformiert wird, andernfalls false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>Ruft den linken Operanden der binären Operation ab.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.Expression" />, der den linken Operanden der binären Operation darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>Ruft die implementierende Methode für die binäre Operation ab.</summary>
      <returns>Eine <see cref="T:System.Reflection.MethodInfo" />, die die implementierende Methode darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>Reduziert auf den binären Ausdrucksknoten auf einen einfacheren Ausdruck.</summary>
      <returns>Der reduzierte Ausdruck.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>Ruft den rechten Operanden der binären Operation ab.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.Expression" />, der den rechten Operanden der binären Operation darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="left">Die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft des Ergebnisses. </param>
      <param name="conversion">Die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft des Ergebnisses.</param>
      <param name="right">Die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft des Ergebnisses. </param>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>Stellt einen Block mit einer Sequenz von Ausdrücken dar, in dem Variablen definiert werden können.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp.Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /><see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>Ruft die Ausdrücke in diesem Block ab.</summary>
      <returns>Die schreibgeschützte Auflistung, die alle Ausdrücke in diesem Block enthält.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück.Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> zurückgeben, wenn diese Methode überschrieben wird.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>Ruft den letzten Ausdruck in diesem Block ab.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.Expression" />-Objekt, das den letzten Ausdruck in diesem Block darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.BlockExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="variables">Die <see cref="P:System.Linq.Expressions.BlockExpression.Variables" />-Eigenschaft des Ergebnisses. </param>
      <param name="expressions">Die <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" />-Eigenschaft des Ergebnisses. </param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>Ruft die in diesem Block definierten Variablen ab.</summary>
      <returns>Die schreibgeschützte Auflistung, die alle in diesem Block definierten Variablen enthält.</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>Stellt eine catch-Anweisung in einem try-Block dar.</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>Ruft den Text des catch-Blocks ab.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.Expression" />-Objekt, das den Text des catch-Blocks darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>Ruft den Text des <see cref="T:System.Linq.Expressions.CatchBlock" />-Filters ab.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.Expression" />-Objekt, das den Text des <see cref="T:System.Linq.Expressions.CatchBlock" />-Filters darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>Ruft den Typ der <see cref="T:System.Exception" /> ab, die von diesem Handler abgefangen wird.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Typ der <see cref="T:System.Exception" /> darstellt, die von diesem Handler abgefangen wird.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>Gibt einen <see cref="T:System.String" /> zurück, der den aktuellen <see cref="T:System.Object" /> darstellt.</summary>
      <returns>Ein <see cref="T:System.String" />, der das aktuelle <see cref="T:System.Object" /> darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="variable">Die <see cref="P:System.Linq.Expressions.CatchBlock.Variable" />-Eigenschaft des Ergebnisses.</param>
      <param name="filter">Die <see cref="P:System.Linq.Expressions.CatchBlock.Filter" />-Eigenschaft des Ergebnisses.</param>
      <param name="body">Die <see cref="P:System.Linq.Expressions.CatchBlock.Body" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>Ruft einen Verweis auf das von diesem Handler abgefangene <see cref="T:System.Exception" />-Objekt ab.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekt, das einen Verweis auf das von diesem Handler abgefangene <see cref="T:System.Exception" />-Objekt darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>Stellt einen Ausdruck dar, der über einen bedingten Operator verfügt.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp.Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /><see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>Ruft den Ausdruck ab, der ausgeführt werden soll, wenn der Test false ergibt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression" />, die den Ausdruck darstellt, der ausgeführt werden soll, wenn der Test false ergibt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>Ruft den Ausdruck ab, der ausgeführt werden soll, wenn der Test true ergibt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression" />, die den Ausdruck darstellt, der ausgeführt werden soll, wenn der Test true ergibt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück.Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> zurückgeben, wenn diese Methode überschrieben wird.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>Ruft den Test der bedingten Operation ab.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression" />, die den Text der bedingten Operation darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="test">Die <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />-Eigenschaft des Ergebnisses.</param>
      <param name="ifTrue">Die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />-Eigenschaft des Ergebnisses.</param>
      <param name="ifFalse">Die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>Stellt einen Ausdruck dar, der über einen konstanten Wert verfügt.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp.Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /><see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück.Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> zurückgeben, wenn diese Methode überschrieben wird.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>Ruft den Wert des konstanten Ausdrucks ab.</summary>
      <returns>Ein <see cref="T:System.Object" /> gleich dem Wert des dargestellten Ausdrucks.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>Gibt einen Sequenzpunkt für Debuginformationen aus oder löscht ihn.Dadurch kann der Debugger beim Debuggen den richtigen Quellcode hervorheben.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp.Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /><see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>Ruft die <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> ab, die die Quelldatei darstellt.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, die die Quelldatei darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>Ruft die Endspalte dieses <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> ab.</summary>
      <returns>Die Nummer der Endspalte des Codes, mit dem der umschlossene Ausdruck generiert wurde.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>Ruft die Endzeile dieses <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> ab.</summary>
      <returns>Die Nummer der Endzeile des Codes, mit dem der umschlossene Ausdruck generiert wurde.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>Ruft den Wert ab, mit dem angegeben wird, ob <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> zum Löschen eines Sequenzpunkts verwendet wird.</summary>
      <returns>True, wenn <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> zum Löschen eines Sequenzpunkts verwendet wird, andernfalls false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der diesen Ausdruck darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>Ruft die Startspalte dieses <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> ab.</summary>
      <returns>Die Nummer der Anfangsspalte des Codes, mit dem der umschlossene Ausdruck generiert wurde.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>Ruft die Startzeile dieses <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> ab.</summary>
      <returns>Die Nummer der Anfangszeile des Codes, mit dem der umschlossene Ausdruck generiert wurde.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>Stellt den Standardwert eines Typs oder eines leeren Ausdrucks dar.</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück.Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> zurückgeben, wenn diese Methode überschrieben wird.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>Stellt einen dynamischen Vorgang dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp.Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /><see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>Ruft die Argumente des dynamischen Vorgangs ab.</summary>
      <returns>Die schreibgeschützten Auflistungen, die die Argumente des dynamischen Vorgangs enthalten.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>Ruft den <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> ab, der das Laufzeitverhalten der dynamischen Site bestimmt.</summary>
      <returns>Der <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, der das Laufzeitverhalten der dynamischen Site bestimmt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>Ruft den Typ des von der <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten ab.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Typ des von der <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, die einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="binder">Die Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="returnType">Der Ergebnistyp des dynamischen Ausdrucks.</param>
      <param name="arguments">Die Argumente des dynamischen Vorgangs.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, die einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="binder">Die Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="returnType">Der Ergebnistyp des dynamischen Ausdrucks.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, die einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="binder">Die Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="returnType">Der Ergebnistyp des dynamischen Ausdrucks.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <param name="arg1">Das zweite Argument des dynamischen Vorgangs.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, die einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="binder">Die Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="returnType">Der Ergebnistyp des dynamischen Ausdrucks.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <param name="arg1">Das zweite Argument des dynamischen Vorgangs.</param>
      <param name="arg2">Das dritte Argument des dynamischen Vorgangs.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, die einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="binder">Die Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="returnType">Der Ergebnistyp des dynamischen Ausdrucks.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <param name="arg1">Das zweite Argument des dynamischen Vorgangs.</param>
      <param name="arg2">Das dritte Argument des dynamischen Vorgangs.</param>
      <param name="arg3">Das vierte Argument des dynamischen Vorgangs.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, die einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="binder">Die Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="returnType">Der Ergebnistyp des dynamischen Ausdrucks.</param>
      <param name="arguments">Die Argumente des dynamischen Vorgangs.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, die einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="delegateType">Der Typ des von der <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten.</param>
      <param name="binder">Die Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="arguments">Die Argumente des dynamischen Vorgangs.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, die einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang und ein Argument darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="delegateType">Der Typ des von der <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten.</param>
      <param name="binder">Die Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="arg0">Das Argument des dynamischen Vorgangs.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, das einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang und zwei Argumente darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="delegateType">Der Typ des von der <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten.</param>
      <param name="binder">Die Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <param name="arg1">Das zweite Argument des dynamischen Vorgangs.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, das einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang und drei Argumente darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="delegateType">Der Typ des von der <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten.</param>
      <param name="binder">Die Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <param name="arg1">Das zweite Argument des dynamischen Vorgangs.</param>
      <param name="arg2">Das dritte Argument des dynamischen Vorgangs.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.DynamicExpression" />, das einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang und vier Argumente darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="delegateType">Der Typ des von der <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten.</param>
      <param name="binder">Die Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="arg0">Das erste Argument des dynamischen Vorgangs.</param>
      <param name="arg1">Das zweite Argument des dynamischen Vorgangs.</param>
      <param name="arg2">Das dritte Argument des dynamischen Vorgangs.</param>
      <param name="arg3">Das vierte Argument des dynamischen Vorgangs.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, die einen dynamischen, vom bereitgestellten <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> gebundenen Vorgang darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.DynamicExpression" />, bei der <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> gleich <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> ist und <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> und <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="delegateType">Der Typ des von der <see cref="T:System.Runtime.CompilerServices.CallSite" /> verwendeten Delegaten.</param>
      <param name="binder">Die Laufzeitbinder für den dynamischen Vorgang.</param>
      <param name="arguments">Die Argumente des dynamischen Vorgangs.</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück.Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> zurückgeben, wenn diese Methode überschrieben wird.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.DynamicExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Vergleicht den an den Parameter gesendeten Wert, arguments, mit der Arguments-Eigenschaft der aktuellen Instanz von DynamicExpression.Wenn die Werte des Parameters und der Eigenschaft gleich sind, wird die aktuelle Instanz zurückgegeben.Wenn die Werte nicht gleich sind, wird eine neue DynamicExpression-Instanz zurückgegeben, die mit der aktuellen Instanz identisch ist, bei der jedoch die Arguments-Eigenschaft auf den Wert des Parameters arguments festgelegt ist.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="arguments">Die <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary>Stellt einen Besucher oder Bearbeiter für dynamische Ausdrucksbaumstrukturen dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.DynamicExpression" />.</summary>
      <returns>Die Rückgabe ist <see cref="T:System.Linq.Expressions.Expression" />, der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>Stellt einen Initialisierer für ein einzelnes Element einer <see cref="T:System.Collections.IEnumerable" />-Auflistung dar.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>Ruft die Instanzmethode ab, die zum Hinzufügen eines Elements zu einer <see cref="T:System.Collections.IEnumerable" />-Auflistung verwendet wird.</summary>
      <returns>Eine <see cref="T:System.Reflection.MethodInfo" />, die eine Instanzmethode darstellt, die einer Auflistung ein Element hinzufügt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>Ruft die Auflistung von Argumenten ab, die an eine Methode übergeben werden, die einer <see cref="T:System.Collections.IEnumerable" />-Auflistung ein Element hinzufügt.</summary>
      <returns>Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, die die Argumente für eine Methode darstellen, die einer Auflistung ein Element hinzufügt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>Gibt eine Textdarstellung eines <see cref="T:System.Linq.Expressions.ElementInit" />-Objekts zurück.</summary>
      <returns>Eine Textdarstellung des <see cref="T:System.Linq.Expressions.ElementInit" />-Objekts.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="arguments">Die <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>Stellt die Basisklasse bereit, aus der die Klassen abgeleitet werden, die die Knoten in der Ausdrucksbaumstruktur darstellen.Sie enthält auch statische Factorymethoden (Shared in Visual Basic), um die verschiedenen Knotentypen zu erstellen.Dies ist eine abstrakte Klasse.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>Erstellt eine neue Instanz von <see cref="T:System.Linq.Expressions.Expression" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Linq.Expressions.Expression" />-Klasse.</summary>
      <param name="nodeType">Der als Knotentyp festzulegende <see cref="T:System.Linq.Expressions.ExpressionType" />.</param>
      <param name="type">Der <see cref="P:System.Linq.Expressions.Expression.Type" /> dieser <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp.Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /><see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Addition ohne Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der Additionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Addition ohne Überlaufprüfung darstellt.Die implementierende Methode kann angegeben werden.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der Additionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Additionszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Additionszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Additionszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Additionszuweisungsoperation mit Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Additionszuweisungsoperation mit Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Additionszuweisungsoperation mit Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Addition mit Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der Additionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Addition mit Überlaufprüfung darstellt.Die implementierende Methode kann angegeben werden.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der Additionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise AND-Operation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.And" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der bitweise AND-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise AND-Operation darstellt.Die implementierende Methode kann angegeben werden.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.And" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der bitweise AND-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bedingte AND-Operation darstellt, bei der der zweite Operand nur ausgewertet wird, wenn der erste Operand zu true ausgewertet wird.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der bitweise AND-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.- oder -<paramref name="left" />.Type und <paramref name="right" />.Type weisen nicht denselben booleschen Typ auf.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bedingte AND-Operation darstellt, bei der der zweite Operand nur ausgewertet wird, wenn der erste Operand zu true aufgelöst wird.Die implementierende Methode kann angegeben werden.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der bitweise AND-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.- oder -<paramref name="method" /> ist null, und <paramref name="left" />.Type sowie <paramref name="right" />.Type weisen nicht denselben booleschen Typ auf.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise AND-Zuweisungsoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise AND-Zuweisungsoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise AND-Zuweisungsoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.IndexExpression" />, um auf ein mehrdimensionales Array zuzugreifen.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="array">Ein Ausdruck, der das mehrdimensionale Array darstellt.</param>
      <param name="indexes">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit Ausdrücken, die zum Indizieren des Arrays verwendet werden.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.IndexExpression" />, um auf ein Array zuzugreifen.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="array">Ein Ausdruck, der das zu indizierende Array darstellt.</param>
      <param name="indexes">Ein Array mit Ausdrücken, die zum Indizieren des Arrays verwendet werden.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die das Anwenden eines Arrayindexoperators auf ein Array mit einem Rang größer als eins darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> und <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="array">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />-Eigenschaft festgelegt werden soll.</param>
      <param name="indexes">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> oder <paramref name="indexes" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type stellt keinen Arraytyp dar.- oder -Der Rang von <paramref name="array" />.Type entspricht nicht der Anzahl der Elemente in <paramref name="indexes" />.- oder -Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines oder mehrerer Elemente von <paramref name="indexes" /> stellt nicht den <see cref="T:System.Int32" />-Typ dar.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die das Anwenden eines Arrayindexoperators auf ein Array mit Rang eins darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="array">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="index">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> oder <paramref name="index" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type stellt keinen Arraytyp dar.- oder -<paramref name="array" />.Type stellt einen Arraytyp dar, dessen Rang nicht 1 ist.- oder -<paramref name="index" />.Type stellt nicht den <see cref="T:System.Int32" />-Typ dar.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die das Anwenden eines Arrayindexoperators auf ein multidimensionales Array darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> und <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="array">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Instanzen - Indizes für den Arrayindizierungsvorgang.</param>
      <param name="indexes">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> oder <paramref name="indexes" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type stellt keinen Arraytyp dar.- oder -Der Rang von <paramref name="array" />.Type entspricht nicht der Anzahl der Elemente in <paramref name="indexes" />.- oder -Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines oder mehrerer Elemente von <paramref name="indexes" /> stellt nicht den <see cref="T:System.Int32" />-Typ dar.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die einen Ausdruck zum Abrufen der Länge eines eindimensionalen Arrays darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> und die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft gleich <paramref name="array" /> ist.</returns>
      <param name="array">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type stellt keinen Arraytyp dar.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Zuweisungsoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.MemberAssignment" />, das die Initialisierung eines Felds oder einer Eigenschaft darstellt.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberAssignment" />, bei dem <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> gleich <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> und <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="member">Eine <see cref="T:System.Reflection.MemberInfo" />, auf die die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft festgelegt werden soll.</param>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> oder <paramref name="expression" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> stellt kein Feld bzw. keine Eigenschaft dar.- oder -Die durch <paramref name="member" /> dargestellte Eigenschaft verfügt über keinen set-Accessor.- oder -<paramref name="expression" />.Type kann nicht dem Typ des Felds oder der Eigenschaft zugeordnet werden, das bzw. die durch <paramref name="member" /> dargestellt wird.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.MemberAssignment" />, das die Initialisierung eines Members durch das Verwenden einer Eigenschaftenaccessormethode darstellt.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberAssignment" />, bei dem die <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> ist, die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft auf die <see cref="T:System.Reflection.PropertyInfo" /> festgelegt ist, die die Eigenschaft darstellt, auf die in <paramref name="propertyAccessor" /> zugegriffen wird und die <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />-Eigenschaft auf <paramref name="expression" /> festgelegt ist.</returns>
      <param name="propertyAccessor">Eine <see cref="T:System.Reflection.MethodInfo" />, die eine Eigenschaftenaccessormethode darstellt.</param>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> oder <paramref name="expression" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> stellt keine Eigenschaftenaccessormethode dar.- oder -Die Eigenschaft, auf die von <paramref name="propertyAccessor" /> zugegriffen wird, verfügt über keinen set-Accessor.- oder -<paramref name="expression" />.Type kann nicht dem Typ des Felds oder der Eigenschaft zugeordnet werden, das bzw. die durch <paramref name="member" /> dargestellt wird.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BlockExpression" />, die die angegebenen Ausdrücke und keine Variablen enthält.</summary>
      <returns>Die erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="expressions">Die Ausdrücke im Block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BlockExpression" />, die die angegebenen Variablen und Ausdrücke enthält.</summary>
      <returns>Die erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="variables">Die Variablen im Block.</param>
      <param name="expressions">Die Ausdrücke im Block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BlockExpression" />, die die angegebenen Variablen und Ausdrücke enthält.</summary>
      <returns>Die erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="variables">Die Variablen im Block.</param>
      <param name="expressions">Die Ausdrücke im Block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BlockExpression" />, die zwei Ausdrücke und keine Variablen enthält.</summary>
      <returns>Die erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">Der erste Ausdruck im Block.</param>
      <param name="arg1">Der zweite Ausdruck im Block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BlockExpression" />, die drei Ausdrücke und keine Variablen enthält.</summary>
      <returns>Die erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">Der erste Ausdruck im Block.</param>
      <param name="arg1">Der zweite Ausdruck im Block.</param>
      <param name="arg2">Der dritte Ausdruck im Block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BlockExpression" />, die vier Ausdrücke und keine Variablen enthält.</summary>
      <returns>Die erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">Der erste Ausdruck im Block.</param>
      <param name="arg1">Der zweite Ausdruck im Block.</param>
      <param name="arg2">Der dritte Ausdruck im Block.</param>
      <param name="arg3">Der vierte Ausdruck im Block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BlockExpression" />, die fünf Ausdrücke und keine Variablen enthält.</summary>
      <returns>Die erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">Der erste Ausdruck im Block.</param>
      <param name="arg1">Der zweite Ausdruck im Block.</param>
      <param name="arg2">Der dritte Ausdruck im Block.</param>
      <param name="arg3">Der vierte Ausdruck im Block.</param>
      <param name="arg4">Der fünfte Ausdruck im Block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BlockExpression" />, die die angegebenen Ausdrücke und keine Variablen enthält.</summary>
      <returns>Die erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="expressions">Die Ausdrücke im Block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BlockExpression" />, die die angegebenen Ausdrücke enthält, nicht über Variablen verfügt und von einem bestimmten Ergebnistyp ist.</summary>
      <returns>Die erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">Der Ergebnistyp des Blocks.</param>
      <param name="expressions">Die Ausdrücke im Block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BlockExpression" />, die die angegebenen Variablen und Ausdrücke enthält.</summary>
      <returns>Die erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">Der Ergebnistyp des Blocks.</param>
      <param name="variables">Die Variablen im Block.</param>
      <param name="expressions">Die Ausdrücke im Block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BlockExpression" />, die die angegebenen Variablen und Ausdrücke enthält.</summary>
      <returns>Die erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">Der Ergebnistyp des Blocks.</param>
      <param name="variables">Die Variablen im Block.</param>
      <param name="expressions">Die Ausdrücke im Block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BlockExpression" />, die die angegebenen Ausdrücke enthält, nicht über Variablen verfügt und von einem bestimmten Ergebnistyp ist.</summary>
      <returns>Die erstellte <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">Der Ergebnistyp des Blocks.</param>
      <param name="expressions">Die Ausdrücke im Block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine Break-Anweisung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich Break ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist und ein NULL-Wert beim Springen an die Zielbezeichnung übergeben wird.</returns>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine Break-Anweisung darstellt.Der beim Springen an die Bezeichnung übergebene Wert kann angegeben werden.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich Break ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist und beim Springen <paramref name="value" /> an die Zielbezeichnung übergeben wird.</returns>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="value">Der Wert, der beim Springen an die zugeordnete Bezeichnung übergeben wird.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine Break-Anweisung mit dem angegebenen Typ darstellt.Der beim Springen an die Bezeichnung übergebene Wert kann angegeben werden.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich Break ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist, die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf <paramref name="type" /> festgelegt ist und beim Springen <paramref name="value" /> an die Zielbezeichnung übergeben wird.</returns>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="value">Der Wert, der beim Springen an die zugeordnete Bezeichnung übergeben wird.</param>
      <param name="type">Eine <see cref="T:System.Type" />, auf die die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine Break-Anweisung mit dem angegebenen Typ darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich Break ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist und die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf <paramref name="type" /> festgelegt ist.</returns>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="type">Eine <see cref="T:System.Type" />, auf die die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer Instanzmethode darstellt, die keine Argumente akzeptiert.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> und <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="instance">Ein <see cref="T:System.Linq.Expressions.Expression" />, der die Instanz für einen Instanzmethodenaufruf angibt (übergeben Sie null für eine statische Methode bzw. eine Shared-Methode in Visual Basic).</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> ist NULL.- oder -<paramref name="instance" /> ist null, und <paramref name="method" /> stellt eine Instanzmethode dar.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type kann dem deklarierenden Typ der durch <paramref name="method" /> dargestellten Methode nicht zugeordnet werden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer Methode darstellt, die Argumente akzeptiert.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> und <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="instance">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf den die <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />-Eigenschaft festgelegt werden soll (übergeben Sie null für eine statische Methode bzw. eine Shared-Methode in Visual Basic).</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arguments">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> ist NULL.- oder -<paramref name="instance" /> ist null, und <paramref name="method" /> stellt eine Instanzmethode dar.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type kann dem deklarierenden Typ der durch <paramref name="method" /> dargestellten Methode nicht zugeordnet werden.- oder -Die Anzahl der Elemente in <paramref name="arguments" /> stimmt nicht mit der Anzahl der Parameter für die durch <paramref name="method" /> dargestellte Methode überein.- oder -Mindestens ein Element von <paramref name="arguments" /> kann nicht dem entsprechenden Parameter der durch <paramref name="method" /> dargestellten Methode zugeordnet werden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer statischen Methode darstellt, die zwei Argumente akzeptiert.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> und <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="instance">Ein <see cref="T:System.Linq.Expressions.Expression" />, das die Instanz für einen Instanzaufruf angibt.(Übergeben Sie NULL für eine statische Methode bzw. eine Shared-Methode in Visual Basic.)</param>
      <param name="method">Die <see cref="T:System.Reflection.MethodInfo" />, die die Zielmethode darstellt.</param>
      <param name="arg0">Die <see cref="T:System.Linq.Expressions.Expression" />, die das erste Argument darstellt.</param>
      <param name="arg1">Die <see cref="T:System.Linq.Expressions.Expression" />, die das zweite Argument darstellt.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer Methode darstellt, die keine Argumente akzeptiert.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> und <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="instance">Ein <see cref="T:System.Linq.Expressions.Expression" />, das die Instanz für einen Instanzaufruf angibt.(Übergeben Sie NULL für eine statische Methode bzw. eine Shared-Methode in Visual Basic.)</param>
      <param name="method">Die <see cref="T:System.Reflection.MethodInfo" />, die die Zielmethode darstellt.</param>
      <param name="arg0">Die <see cref="T:System.Linq.Expressions.Expression" />, die das erste Argument darstellt.</param>
      <param name="arg1">Die <see cref="T:System.Linq.Expressions.Expression" />, die das zweite Argument darstellt.</param>
      <param name="arg2">Die <see cref="T:System.Linq.Expressions.Expression" />, die das dritte Argument darstellt.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer Methode darstellt, die Argumente akzeptiert.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> und <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="instance">Ein <see cref="T:System.Linq.Expressions.Expression" />, der die Instanz für einen Instanzmethodenaufruf angibt (übergeben Sie null für eine statische Methode bzw. eine Shared-Methode in Visual Basic).</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arguments">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> ist NULL.- oder -<paramref name="instance" /> ist null, und <paramref name="method" /> stellt eine Instanzmethode dar.- oder -<paramref name="arguments" /> ist nicht gleich null, und mindestens eines der darin enthaltenen Elemente ist gleich null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type kann dem deklarierenden Typ der durch <paramref name="method" /> dargestellten Methode nicht zugeordnet werden.- oder -Die Anzahl der Elemente in <paramref name="arguments" /> stimmt nicht mit der Anzahl der Parameter für die durch <paramref name="method" /> dargestellte Methode überein.- oder -Mindestens ein Element von <paramref name="arguments" /> kann nicht dem entsprechenden Parameter der durch <paramref name="method" /> dargestellten Methode zugeordnet werden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer Instanzmethode durch das Aufrufen der entsprechenden Factorymethode darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, der der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist, die <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />-Eigenschaft gleich <paramref name="instance" /> ist, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> auf die <see cref="T:System.Reflection.MethodInfo" />festgelegt ist, die die angegebene Instanzmethode darstellt, und <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> auf die angegebenen Argumente festgelegt ist.</returns>
      <param name="instance">Eine <see cref="T:System.Linq.Expressions.Expression" />, deren <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaftswert nach einer bestimmten Methode durchsucht wird.</param>
      <param name="methodName">Der Name der Methode.</param>
      <param name="typeArguments">Ein Array von <see cref="T:System.Type" />-Objekten, die die Typparameter der generischen Methode angeben.Dieses Argument muss NULL sein, wenn durch methodName eine nicht generische Methode angegeben wird.</param>
      <param name="arguments">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, das die Argumente der Methode darstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> oder <paramref name="methodName" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Es wurde keine Methode, deren Namen gleich <paramref name="methodName" /> ist, deren Typparameter <paramref name="typeArguments" /> entsprechen und deren Parametertypen <paramref name="arguments" /> entsprechen, in <paramref name="instance" />.Type oder ihrer Basistypen gefunden.- oder -Es wurde mehr als eine Methode, deren Namen gleich <paramref name="methodName" /> ist, deren Typparameter <paramref name="typeArguments" /> entsprechen und deren Parametertypen <paramref name="arguments" /> entsprechen, in <paramref name="instance" />.Type oder ihrer Basistypen gefunden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" /> die einen Aufruf einer statischen Methode (Shared in Visual Basic) darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> und <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="method">Die <see cref="T:System.Reflection.MethodInfo" />, die die Zielmethode darstellt.</param>
      <param name="arguments">Eine Auflistung von <see cref="T:System.Linq.Expressions.Expression" />, die die Aufrufargumente darstellt.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer statischen Methode (Shared in Visual Basic) mit einem Argument darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> und <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arg0">Die <see cref="T:System.Linq.Expressions.Expression" />, die das erste Argument darstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer statischen Methode darstellt, die zwei Argumente akzeptiert.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> und <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arg0">Die <see cref="T:System.Linq.Expressions.Expression" />, die das erste Argument darstellt.</param>
      <param name="arg1">Die <see cref="T:System.Linq.Expressions.Expression" />, die das zweite Argument darstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer statischen Methode darstellt, die drei Argumente akzeptiert.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> und <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arg0">Die <see cref="T:System.Linq.Expressions.Expression" />, die das erste Argument darstellt.</param>
      <param name="arg1">Die <see cref="T:System.Linq.Expressions.Expression" />, die das zweite Argument darstellt.</param>
      <param name="arg2">Die <see cref="T:System.Linq.Expressions.Expression" />, die das dritte Argument darstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer statischen Methode darstellt, die vier Argumente akzeptiert.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> und <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arg0">Die <see cref="T:System.Linq.Expressions.Expression" />, die das erste Argument darstellt.</param>
      <param name="arg1">Die <see cref="T:System.Linq.Expressions.Expression" />, die das zweite Argument darstellt.</param>
      <param name="arg2">Die <see cref="T:System.Linq.Expressions.Expression" />, die das dritte Argument darstellt.</param>
      <param name="arg3">Die <see cref="T:System.Linq.Expressions.Expression" />, die das vierte Argument darstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer statischen Methode darstellt, die fünf Argumente akzeptiert.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> und <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arg0">Die <see cref="T:System.Linq.Expressions.Expression" />, die das erste Argument darstellt.</param>
      <param name="arg1">Die <see cref="T:System.Linq.Expressions.Expression" />, die das zweite Argument darstellt.</param>
      <param name="arg2">Die <see cref="T:System.Linq.Expressions.Expression" />, die das dritte Argument darstellt.</param>
      <param name="arg3">Die <see cref="T:System.Linq.Expressions.Expression" />, die das vierte Argument darstellt.</param>
      <param name="arg4">Die <see cref="T:System.Linq.Expressions.Expression" />, die das fünfte Argument darstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer statischen Methode (Shared in Visual Basic) mit Argumenten darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> und <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, die eine statische Methode (Shared in Visual Basic) darstellt, auf die die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arguments">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentException">Die Anzahl der Elemente in <paramref name="arguments" /> stimmt nicht mit der Anzahl der Parameter für die durch <paramref name="method" /> dargestellte Methode überein.- oder -Mindestens ein Element von <paramref name="arguments" /> kann nicht dem entsprechenden Parameter der durch <paramref name="method" /> dargestellten Methode zugeordnet werden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, die einen Aufruf einer statischen Methode (Shared in Visual Basic) durch das Aufrufen der entsprechenden Factorymethode darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MethodCallExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> ist, die <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />-Eigenschaft auf die <see cref="T:System.Reflection.MethodInfo" /> festgelegt ist, die die angegebene statische Methode (Shared in Visual Basic) darstellt, und die <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />-Eigenschaft auf die angegebenen Argumente festgelegt ist.</returns>
      <param name="type">Der <see cref="T:System.Type" />, der den Typ angibt, der die angegebene statische Methode (Shared in Visual Basic) enthält.</param>
      <param name="methodName">Der Name der Methode.</param>
      <param name="typeArguments">Ein Array von <see cref="T:System.Type" />-Objekten, die die Typparameter der generischen Methode angeben.Dieses Argument muss NULL sein, wenn durch methodName eine nicht generische Methode angegeben wird.</param>
      <param name="arguments">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, das die Argumente der Methode darstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> oder <paramref name="methodName" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Es wurde keine Methode, deren Namen gleich <paramref name="methodName" /> ist, deren Typparameter <paramref name="typeArguments" /> entsprechen und deren Parametertypen <paramref name="arguments" /> entsprechen, in <paramref name="type" /> oder seinen Basistypen gefunden.- oder -Es wurde mehr als eine Methode, deren Namen gleich <paramref name="methodName" /> ist, deren Typparameter <paramref name="typeArguments" /> entsprechen und deren Parametertypen <paramref name="arguments" /> entsprechen, in <paramref name="type" /> oder seinen Basistypen gefunden.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>Gibt an, dass der Knoten zu einem einfacheren Knoten reduziert werden kann.Wenn true zurückgegeben wird, kann Reduce() aufgerufen werden, um das reduzierte Formular zu erzeugen.</summary>
      <returns>True, wenn der Knoten reduziert werden kann, andernfalls False.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.CatchBlock" />, der eine Catch-Anweisung mit einem Verweis auf das aufgefangene <see cref="T:System.Exception" />-Objekt zur Verwendung im Handlertext darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="variable">Eine <see cref="T:System.Linq.Expressions.ParameterExpression" />, die einen Verweis auf das von diesem Handler aufgefangene <see cref="T:System.Exception" />-Objekt darstellt.</param>
      <param name="body">Der Text der Catch-Anweisung.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.CatchBlock" />, der eine Catch-Anweisung mit einem <see cref="T:System.Exception" />-Filter und einem Verweis auf das aufgefangene <see cref="T:System.Exception" />-Objekt darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="variable">Eine <see cref="T:System.Linq.Expressions.ParameterExpression" />, die einen Verweis auf das von diesem Handler aufgefangene <see cref="T:System.Exception" />-Objekt darstellt.</param>
      <param name="body">Der Text der Catch-Anweisung.</param>
      <param name="filter">Der Text des <see cref="T:System.Exception" />-Filters.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.CatchBlock" />, der eine Catch-Anweisung darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="type">Der <see cref="P:System.Linq.Expressions.Expression.Type" /> der <see cref="T:System.Exception" />, die dieser <see cref="T:System.Linq.Expressions.CatchBlock" /> behandelt.</param>
      <param name="body">Der Text der Catch-Anweisung.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.CatchBlock" />, der eine Catch-Anweisung mit einem <see cref="T:System.Exception" />-Filter, aber ohne Verweis auf das aufgefangene <see cref="T:System.Exception" />-Objekt darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="type">Der <see cref="P:System.Linq.Expressions.Expression.Type" /> der <see cref="T:System.Exception" />, die dieser <see cref="T:System.Linq.Expressions.CatchBlock" /> behandelt.</param>
      <param name="body">Der Text der Catch-Anweisung.</param>
      <param name="filter">Der Text des <see cref="T:System.Exception" />-Filters.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> zum Löschen eines Sequenzpunkts.</summary>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> zum Löschen eines Sequenzpunkts.</returns>
      <param name="document">Die <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, die die Quelldatei darstellt.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine zusammenfügende Operation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft von <paramref name="left" /> stellt keinen Referenztyp und keinen Typ dar, der NULL-Werte zulässt.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type und <paramref name="right" />.Type können nicht ineinander konvertiert werden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die bei einer gegebenen Konvertierungsfunktion eine zusammenfügende Operation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type und <paramref name="right" />.Type können nicht ineinander konvertiert werden.- oder -<paramref name="conversion" /> ist nicht null, und <paramref name="conversion" />.Type ist ein Delegattyp, der nicht genau ein Argument akzeptiert.</exception>
      <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft von <paramref name="left" /> stellt keinen Referenztyp und keinen Typ dar, der NULL-Werte zulässt.- oder -Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft von <paramref name="left" /> stellt einen Typ dar, der nicht dem Parametertyp des Delegatentyps <paramref name="conversion" />.Type zugeordnet werden kann.- oder -Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft von <paramref name="right" /> ist nicht gleich dem Rückgabetyp des Delegattyps <paramref name="conversion" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ConditionalExpression" />, die eine bedingte Anweisung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.ConditionalExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> und <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="test">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />-Eigenschaft festgelegt werden soll.</param>
      <param name="ifTrue">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />-Eigenschaft festgelegt werden soll.</param>
      <param name="ifFalse">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="test" /> oder <paramref name="ifTrue" /> oder <paramref name="ifFalse" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="test" />.Type ist nicht <see cref="T:System.Boolean" />.- oder -<paramref name="ifTrue" />.Type ist ungleich <paramref name="ifFalse" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ConditionalExpression" />, die eine bedingte Anweisung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.ConditionalExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> und <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="test">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />-Eigenschaft festgelegt werden soll.</param>
      <param name="ifTrue">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />-Eigenschaft festgelegt werden soll.</param>
      <param name="ifFalse">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />-Eigenschaft festgelegt werden soll.</param>
      <param name="type">Eine <see cref="P:System.Linq.Expressions.Expression.Type" />, auf die die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ConstantExpression" />, deren <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.ConstantExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> ist und die <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
      <param name="value">Eine <see cref="T:System.Object" />, auf die die <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ConstantExpression" />, bei der die <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />-Eigenschaft und die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.ConstantExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> und <see cref="P:System.Linq.Expressions.Expression.Type" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="value">Eine <see cref="T:System.Object" />, auf die die <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />-Eigenschaft festgelegt werden soll.</param>
      <param name="type">Eine <see cref="T:System.Type" />, auf die die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> ist nicht null, und <paramref name="type" /> kann nicht auf der Basis des dynamischen Typs von <paramref name="value" /> zugeordnet werden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine Continue-Anweisung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich Continue ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist und ein NULL-Wert beim Springen an die Zielbezeichnung übergeben wird.</returns>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine Continue-Anweisung mit dem angegebenen Typ darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich Continue ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist, die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf <paramref name="type" /> festgelegt ist und ein NULL-Wert beim Springen an die Zielbezeichnung übergeben wird.</returns>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="type">Eine <see cref="T:System.Type" />, auf die die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die einen Typkonvertierungsvorgang darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> und <see cref="P:System.Linq.Expressions.Expression.Type" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <param name="type">Eine <see cref="T:System.Type" />, auf die die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="type" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Zwischen <paramref name="expression" />.Type und <paramref name="type" /> ist kein Konvertierungsoperator definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine Konvertierungsoperation darstellt, für die die implementierende Methode angegeben ist.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> und <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <param name="type">Eine <see cref="T:System.Type" />, auf die die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="type" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau ein Argument.</exception>
      <exception cref="T:System.InvalidOperationException">Zwischen <paramref name="expression" />.Type und <paramref name="type" /> ist kein Konvertierungsoperator definiert.- oder -<paramref name="expression" />.Type kann dem Argumenttyp der durch <paramref name="method" /> dargestellten Methode nicht zugeordnet werden.- oder -Der Rückgabetyp der Methode, die durch <paramref name="method" /> dargestellt wird, kann <paramref name="type" /> nicht zugeordnet werden.- oder -<paramref name="expression" />.Type oder <paramref name="type" /> ist ein Werttyp, der NULL-Werte zulässt, und der entsprechende Werttyp, der keine NULL-Werte zulässt, entspricht nicht dem Argumenttyp bzw. dem Rückgabetyp der durch <paramref name="method" /> dargestellten Methode.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">Es wurde mehr als eine Methode gefunden, die mit der <paramref name="method" />-Beschreibung übereinstimmt.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine Konvertierungsoperation darstellt, die eine Ausnahme auslöst, wenn ein Überlauf im Zieltyp auftritt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> und <see cref="P:System.Linq.Expressions.Expression.Type" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <param name="type">Eine <see cref="T:System.Type" />, auf die die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="type" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Zwischen <paramref name="expression" />.Type und <paramref name="type" /> ist kein Konvertierungsoperator definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine Konvertierungsoperation darstellt, für die die implementierende Methode angegeben ist und die eine Ausnahme auslöst, wenn ein Überlauf im Zieltyp auftritt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> und <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <param name="type">Eine <see cref="T:System.Type" />, auf die die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="type" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau ein Argument.</exception>
      <exception cref="T:System.InvalidOperationException">Zwischen <paramref name="expression" />.Type und <paramref name="type" /> ist kein Konvertierungsoperator definiert.- oder -<paramref name="expression" />.Type kann dem Argumenttyp der durch <paramref name="method" /> dargestellten Methode nicht zugeordnet werden.- oder -Der Rückgabetyp der Methode, die durch <paramref name="method" /> dargestellt wird, kann <paramref name="type" /> nicht zugeordnet werden.- oder -<paramref name="expression" />.Type oder <paramref name="type" /> ist ein Werttyp, der NULL-Werte zulässt, und der entsprechende Werttyp, der keine NULL-Werte zulässt, entspricht nicht dem Argumenttyp bzw. dem Rückgabetyp der durch <paramref name="method" /> dargestellten Methode.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">Es wurde mehr als eine Methode gefunden, die mit der <paramref name="method" />-Beschreibung übereinstimmt.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> mit der angegebenen Spanne.</summary>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</returns>
      <param name="document">Die <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, die die Quelldatei darstellt.</param>
      <param name="startLine">Die Startzeile dieser <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.Muss größer als 0 sein.</param>
      <param name="startColumn">Die Startspalte dieser <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.Muss größer als 0 sein.</param>
      <param name="endLine">Die Endzeile dieser <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.Muss größer oder gleich der Startzeile sein.</param>
      <param name="endColumn">Die Endspalte dieser <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.Wenn die Endzeile und die Startzeile identisch sind, muss die Endzeile größer oder gleich der Startspalte sein.Muss in jedem Fall größer als 0 sein.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das Verringern des Ausdruckswerts um 1 darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den verringerten Ausdruckswert darstellt.</returns>
      <param name="expression">Eine zu verringernde <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das Verringern des Ausdruckswerts um 1 darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den verringerten Ausdruckswert darstellt.</returns>
      <param name="expression">Eine zu verringernde <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, die die implementierende Methode darstellt.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.DefaultExpression" />, deren <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.DefaultExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> ist und die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf den angegebenen Typ festgelegt ist.</returns>
      <param name="type">Eine <see cref="T:System.Type" />, auf die die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Division darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der Divisionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Division darstellt.Die implementierende Methode kann angegeben werden.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der Divisionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Divisionszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Divisionszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Divisionszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.ElementInit" />, dessen zweites Argument ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> ist.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.ElementInit" />, bei dem die Eigenschaften <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> und <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="addMethod">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arguments">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.Expression" />-Objekten, auf den die <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> oder <paramref name="arguments" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Die durch <paramref name="addMethod" /> dargestellte Methode weist nicht den Namen "Add" (Groß-/Kleinschreibung wird nicht berücksichtigt) auf.- oder -Die durch <paramref name="addMethod" /> dargestellte Methode ist keine Instanzmethode.- oder -<paramref name="arguments" /> enthält nicht dieselbe Anzahl an Elementen wie die Anzahl der Parameter für die durch <paramref name="addMethod" /> dargestellte Methode.- oder -Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft einer oder mehrerer Elemente von <paramref name="arguments" /> kann nicht dem Typ des entsprechenden Parameters der durch <paramref name="addMethod" /> dargestellten Methode zugeordnet werden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.ElementInit" />, dessen zweites Argument ein Wertearray ist.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.ElementInit" />, bei dem die Eigenschaften <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> und <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="addMethod">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arguments">Ein Array mit <see cref="T:System.Linq.Expressions.Expression" />-Objekten, auf das die <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> oder <paramref name="arguments" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Die durch addMethod dargestellte Methode weist nicht den Namen "Add" (Groß-/Kleinschreibung wird nicht berücksichtigt) auf.- oder -Die durch addMethod dargestellte Methode ist keine Instanzmethode.- oder -arguments enthält nicht dieselbe Anzahl von Elementen wie die Anzahl der Parameter für die durch addMethod dargestellte Methode.- oder -Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft einer oder mehrerer Elemente von <paramref name="arguments" /> kann nicht dem Typ des entsprechenden Parameters der durch <paramref name="addMethod" /> dargestellten Methode zugeordnet werden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>Erstellt einen leeren Ausdruck mit dem <see cref="T:System.Void" />-Typ.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.DefaultExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> und die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf <see cref="T:System.Void" /> festgelegt ist.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen Gleichheitsvergleich darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der Gleichheitsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen Gleichheitsvergleich darstellt.Die implementierende Methode kann angegeben werden.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="liftToNull">true, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf true festzulegen, und false, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf false festzulegen.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der Gleichheitsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise XOR-Operation mit op_ExclusiveOr für benutzerdefinierte Typen darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der Operator XOR ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise XOR-Operation mit op_ExclusiveOr für benutzerdefinierte Typen darstellt.Die implementierende Methode kann angegeben werden.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der Operator XOR ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise XOR-Zuweisung mit op_ExclusiveOr für benutzerdefinierte Typen darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise XOR-Zuweisung mit op_ExclusiveOr für benutzerdefinierte Typen darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise XOR-Zuweisung mit op_ExclusiveOr für benutzerdefinierte Typen darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberExpression" />, die den Zugriff auf ein Feld darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MemberExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> und <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />-Eigenschaft festgelegt werden soll.Für statisch (Shared in Visual Basic) muss <paramref name="expression" />null sein.</param>
      <param name="field">Eine <see cref="T:System.Reflection.FieldInfo" />, auf die die <see cref="P:System.Linq.Expressions.MemberExpression.Member" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> ist NULL.- oder -Das durch <paramref name="field" /> dargestellte Feld ist nicht static (Shared in Visual Basic), und <paramref name="expression" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type kann dem deklarierenden Typ des durch <paramref name="field" /> dargestellten Felds nicht zugeordnet werden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberExpression" />, die bei einem gegebenen Feldnamen den Zugriff auf ein Feld darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MemberExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> ist, die <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />-Eigenschaft auf <paramref name="expression" /> festgelegt ist und die <see cref="P:System.Linq.Expressions.MemberExpression.Member" />-Eigenschaft auf die <see cref="T:System.Reflection.FieldInfo" /> festgelegt ist, die das durch <paramref name="fieldName" /> angegebene Feld darstellt.</returns>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, dessen <see cref="P:System.Linq.Expressions.Expression.Type" /> ein Feld mit dem Namen <paramref name="fieldName" /> enthält.Kann für statische Felder NULL sein.</param>
      <param name="fieldName">Der Name des zu Felds, auf das zugegriffen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="fieldName" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">In <paramref name="expression" />.Type oder den entsprechenden Basistypen ist kein Feld mit dem Namen <paramref name="fieldName" /> definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberExpression" />, die den Zugriff auf ein Feld darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.MemberExpression" />.</returns>
      <param name="expression">Das enthaltende Objekt des Felds.Kann für statische Felder NULL sein.</param>
      <param name="type">Der <see cref="P:System.Linq.Expressions.Expression.Type" />, der das Feld enthält.</param>
      <param name="fieldName">Das Feld, auf das zugegriffen werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>Erstellt ein <see cref="T:System.Type" />-Objekt, das einen generischen System.Action-Delegattyp mit bestimmten Typargumenten darstellt.</summary>
      <returns>Der Typ eines System.Action-Delegaten, der die angegebenen Typargumente aufweist.</returns>
      <param name="typeArgs">Ein Array von <see cref="T:System.Type" />-Objekten, die die Typargumente für den System.Action-Delegattyp angeben.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> enthält mehr als vier Elemente.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>Ruft ein <see cref="P:System.Linq.Expressions.Expression.Type" />-Objekt ab, das einen generischen System.Func- oder System.Action-Delegattyp mit angegebenen Typargumenten darstellt.</summary>
      <returns>Der Delegattyp.</returns>
      <param name="typeArgs">Die Typargumente des Delegaten.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>Erstellt ein <see cref="P:System.Linq.Expressions.Expression.Type" />-Objekt, das einen generischen System.Func-Delegattyp mit bestimmten Typargumenten darstellt.Das letzte Typargument gibt den Rückgabetyp des erstellten Delegaten an.</summary>
      <returns>Der Typ eines System.Func-Delegaten, der die angegebenen Typargumente aufweist.</returns>
      <param name="typeArgs">Ein Array mit einem bis fünf <see cref="T:System.Type" />-Objekten, die die Typargumente für den System.Func-Delegattyp angeben.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> enthält weniger als einen oder mehr als fünf Elemente.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine "Go to"-Anweisung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich Goto ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf den angegebenen Wert festgelegt ist und beim Springen ein NULL-Wert an die Zielbezeichnung übergeben wird.</returns>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine "Go to"-Anweisung darstellt.Der beim Springen an die Bezeichnung übergebene Wert kann angegeben werden.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich Goto ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist und beim Springen <paramref name="value" /> an die Zielbezeichnung übergeben wird.</returns>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="value">Der Wert, der beim Springen an die zugeordnete Bezeichnung übergeben wird.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine "Go to"-Anweisung mit dem angegebenen Typ darstellt.Der beim Springen an die Bezeichnung übergebene Wert kann angegeben werden.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich Goto ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist, die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf <paramref name="type" /> festgelegt ist und beim Springen <paramref name="value" /> an die Zielbezeichnung übergeben wird.</returns>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="value">Der Wert, der beim Springen an die zugeordnete Bezeichnung übergeben wird.</param>
      <param name="type">Eine <see cref="T:System.Type" />, auf die die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine "Go to"-Anweisung mit dem angegebenen Typ darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich Goto ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf den angegebenen Wert festgelegt ist, die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf <paramref name="type" /> festgelegt ist und beim Springen ein NULL-Wert an die Zielbezeichnung übergeben wird.</returns>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="type">Eine <see cref="T:System.Type" />, auf die die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen numerischen "Größer als"-Vergleich darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der Operator "Größer als" ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen numerischen "Größer als"-Vergleich darstellt.Die implementierende Methode kann angegeben werden.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="liftToNull">true, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf true festzulegen, und false, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf false festzulegen.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der Operator "Größer als" ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen numerischen "Größer oder gleich"-Vergleich darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der Operator "Größer oder gleich" ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen numerischen "Größer oder gleich"-Vergleich darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="liftToNull">true, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf true festzulegen, und false, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf false festzulegen.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der "Größer oder gleich"-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ConditionalExpression" />, die einen bedingten Block mit einer if-Anweisung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.ConditionalExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> und <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> auf die angegebenen Werte festgelegt sind.Die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />-Eigenschaft ist auf den Standardausdruck festgelegt, und der Typ der resultierenden <see cref="T:System.Linq.Expressions.ConditionalExpression" />, die von dieser Methode zurückgegeben wird, ist <see cref="T:System.Void" />.</returns>
      <param name="test">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />-Eigenschaft festgelegt werden soll.</param>
      <param name="ifTrue">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ConditionalExpression" />, die einen bedingten Block mit if. und else-Anweisungen darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.ConditionalExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> und <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> auf die angegebenen Werte festgelegt sind.Der Typ der resultierenden <see cref="T:System.Linq.Expressions.ConditionalExpression" />, die von dieser Methode zurückgegeben wird, ist <see cref="T:System.Void" />.</returns>
      <param name="test">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />-Eigenschaft festgelegt werden soll.</param>
      <param name="ifTrue">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />-Eigenschaft festgelegt werden soll.</param>
      <param name="ifFalse">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das Erhöhen des Ausdruckswerts um 1 darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den erhöhten Ausdruckswert darstellt.</returns>
      <param name="expression">Eine zu erhöhende <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das Erhöhen des Ausdruckswerts um 1 darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den erhöhten Ausdruckswert darstellt.</returns>
      <param name="expression">Eine zu erhöhende <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, die die implementierende Methode darstellt.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.InvocationExpression" />, das einen Delegaten oder einen Lambda-Ausdruck auf eine Liste von Argumentausdrücken anwendet.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.InvocationExpression" />, das den angegebenen Delegaten oder Lambda-Ausdruck auf die bereitgestellten Argumente anwendet.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, die den anzuwendenden Delegaten oder Lambda-Ausdruck darstellt.</param>
      <param name="arguments">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit den <see cref="T:System.Linq.Expressions.Expression" />-Objekten, die die Argumente darstellen, auf die der Delegat oder Lambda-Ausdruck angewendet wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type stellt keinen Delegattyp und keine <see cref="T:System.Linq.Expressions.Expression`1" /> dar.- oder -Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="arguments" /> kann nicht dem Typ des entsprechenden Parameters des durch <paramref name="expression" /> dargestellten Delegaten zugeordnet werden.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> enthält nicht dieselbe Anzahl an Elementen wie die Liste der Parameter für den durch <paramref name="expression" /> dargestellten Delegaten.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.InvocationExpression" />, das einen Delegaten oder einen Lambda-Ausdruck auf eine Liste von Argumentausdrücken anwendet.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.InvocationExpression" />, das den angegebenen Delegaten oder Lambda-Ausdruck auf die bereitgestellten Argumente anwendet.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, die den anzuwendenden Delegaten oder Lambda-Ausdruck darstellt.</param>
      <param name="arguments">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, die die Argumente darstellen, auf die der Delegat oder der Lambda-Ausdruck angewendet wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type stellt keinen Delegattyp und keine <see cref="T:System.Linq.Expressions.Expression`1" /> dar.- oder -Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="arguments" /> kann nicht dem Typ des entsprechenden Parameters des durch <paramref name="expression" /> dargestellten Delegaten zugeordnet werden.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> enthält nicht dieselbe Anzahl an Elementen wie die Liste der Parameter für den durch <paramref name="expression" /> dargestellten Delegaten.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>Gibt einen Wert zurück, der angibt, ob der Ausdruck false ergibt.</summary>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Eine auszuwertende <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Gibt einen Wert zurück, der angibt, ob der Ausdruck false ergibt.</summary>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Eine auszuwertende <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, die die implementierende Methode darstellt.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>Gibt einen Wert zurück, der angibt, ob der Ausdruck true ergibt.</summary>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Eine auszuwertende <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Gibt einen Wert zurück, der angibt, ob der Ausdruck true ergibt.</summary>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Eine auszuwertende <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, die die implementierende Methode darstellt.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.LabelTarget" />, das eine Bezeichnung mit Void-Typ und ohne Namen darstellt.</summary>
      <returns>Das neue <see cref="T:System.Linq.Expressions.LabelTarget" />, das eine Bezeichnung mit Void-Typ und ohne Namen darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LabelExpression" />, die eine Bezeichnung ohne Standardwert darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.LabelExpression" /> ohne Standardwert.</returns>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, dem dieses <see cref="T:System.Linq.Expressions.LabelExpression" /> zugeordnet wird.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LabelExpression" />, die eine Bezeichnung mit dem angegebenen Standardwert darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.LabelExpression" /> mit dem angegebenen Standardwert.</returns>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, dem dieses <see cref="T:System.Linq.Expressions.LabelExpression" /> zugeordnet wird.</param>
      <param name="defaultValue">Der Wert dieser <see cref="T:System.Linq.Expressions.LabelExpression" />, wenn die Bezeichnung über die normale Ablaufsteuerung erreicht wird.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.LabelTarget" />, das eine Bezeichnung mit Void-Typ und dem angegebenen Namen darstellt.</summary>
      <returns>Das neue <see cref="T:System.Linq.Expressions.LabelTarget" />, das eine Bezeichnung mit Void-Typ und dem angegebenen Namen darstellt.</returns>
      <param name="name">Der Name der Sprungmarke.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.LabelTarget" />, das eine Bezeichnung mit dem angegebenen Typ darstellt.</summary>
      <returns>Das neue <see cref="T:System.Linq.Expressions.LabelTarget" />, das eine Bezeichnung mit dem angegebenen Typ darstellt.</returns>
      <param name="type">Der Werttyp, der beim Springen zur Bezeichnung übergeben wird.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.LabelTarget" />, das eine Bezeichnung mit dem angegebenen Typ und Namen darstellt.</summary>
      <returns>Das neue <see cref="T:System.Linq.Expressions.LabelTarget" />, das eine Bezeichnung mit dem angegebenen Typ und Namen darstellt.</returns>
      <param name="type">Der Werttyp, der beim Springen zur Bezeichnung übergeben wird.</param>
      <param name="name">Der Name der Sprungmarke.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine LambdaExpression, indem zuerst ein Delegattyp konstruiert wird.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei der die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich Lambda ist und die Eigenschaften <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> und <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="body">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="tailCall">Ein <see cref="T:System.Boolean" />, der angibt, ob beim Kompilieren des erstellten Ausdrucks die Endeaufrufoptimierung angewendet wird.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt wird.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.Expression`1" />, bei der der Delegattyp zur Kompilierzeit bekannt ist.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression`1" />, bei der die <see cref="P:System.Linq.Expressions.Expression`1.NodeType" />-Eigenschaft gleich <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.Expression`1.Body" /> und <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="body">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.Expression`1.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="tailCall">Ein <see cref="T:System.Boolean" />, der angibt, ob beim Kompilieren des erstellten Ausdrucks die Endeaufrufoptimierung angewendet wird.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />-Auflistung aufgefüllt wird.</param>
      <typeparam name="TDelegate">Der Delegattyp. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.Expression`1" />, bei der der Delegattyp zur Kompilierzeit bekannt ist.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression`1" />, bei der die <see cref="P:System.Linq.Expressions.Expression`1.NodeType" />-Eigenschaft gleich <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.Expression`1.Body" /> und <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="body">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.Expression`1.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="tailCall">Ein <see cref="T:System.Boolean" />, der angibt, ob beim Kompilieren des erstellten Ausdrucks die Endeaufrufoptimierung angewendet wird.</param>
      <param name="parameters">Ein Array mit <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />-Auflistung aufgefüllt wird.</param>
      <typeparam name="TDelegate">Der Delegattyp. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Erstellt eine LambdaExpression, indem zuerst ein Delegattyp konstruiert wird.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei der die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich Lambda ist und die Eigenschaften <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> und <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="body">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="tailCall">Ein <see cref="T:System.Boolean" />, der angibt, ob beim Kompilieren des erstellten Ausdrucks die Endeaufrufoptimierung angewendet wird.</param>
      <param name="parameters">Ein Array mit <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt wird.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.Expression`1" />, bei der der Delegattyp zur Kompilierzeit bekannt ist.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression`1" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> und <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="body">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt wird.</param>
      <typeparam name="TDelegate">Ein Delegattyp.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> ist NULL.- oder -Eines oder mehrere Elemente in <paramref name="parameters" /> sind null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> ist kein Delegattyp.- oder -<paramref name="body" />.Type stellt einen Typ dar, der nicht dem Rückgabetyp von <paramref name="TDelegate" /> zugeordnet werden kann.- oder -<paramref name="parameters" /> enthält nicht die gleiche Anzahl an Elementen wie die Liste der Parameter für <paramref name="TDelegate" />.- oder -Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="parameters" /> kann nicht dem Typ des entsprechenden Parametertyps von <paramref name="TDelegate" /> zugeordnet werden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine LambdaExpression, indem zuerst ein Delegattyp konstruiert wird.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei der die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich Lambda ist und die Eigenschaften <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> und <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="body">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt wird.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.Expression`1" />, bei der der Delegattyp zur Kompilierzeit bekannt ist.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression`1" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> und <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="body">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="parameters">Ein Array von <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt wird.</param>
      <typeparam name="TDelegate">Ein Delegattyp.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> ist NULL.- oder -Eines oder mehrere Elemente in <paramref name="parameters" /> sind null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> ist kein Delegattyp.- oder -<paramref name="body" />.Type stellt einen Typ dar, der nicht dem Rückgabetyp von <paramref name="TDelegate" /> zugeordnet werden kann.- oder -<paramref name="parameters" /> enthält nicht die gleiche Anzahl an Elementen wie die Liste der Parameter für <paramref name="TDelegate" />.- oder -Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="parameters" /> kann nicht dem Typ des entsprechenden Parametertyps von <paramref name="TDelegate" /> zugeordnet werden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, indem zuerst ein Delegattyp konstruiert wird.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> und <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="body">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="parameters">Ein Array von <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> ist NULL.- oder -Eines oder mehrere Elemente von <paramref name="parameters" /> sind null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> enthält mehr als sechzehn Elemente.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.Expression`1" />, bei der der Delegattyp zur Kompilierzeit bekannt ist.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression`1" />, bei der die <see cref="P:System.Linq.Expressions.Expression`1.NodeType" />-Eigenschaft gleich <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.Expression`1.Body" /> und <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="body">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.Expression`1.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="name">Der Name für Lambda.Wird zum Generieren von Debuginformationen verwendet.</param>
      <param name="tailCall">Ein <see cref="T:System.Boolean" />, der angibt, ob beim Kompilieren des erstellten Ausdrucks die Endeaufrufoptimierung angewendet wird.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />-Auflistung aufgefüllt wird.</param>
      <typeparam name="TDelegate">Der Delegattyp. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine LambdaExpression, indem zuerst ein Delegattyp konstruiert wird.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei der die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich Lambda ist und die Eigenschaften <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> und <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="body">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="name">Der Name für Lambda.Wird zum Ausgeben von Debuginformationen verwendet.</param>
      <param name="tailCall">Ein <see cref="T:System.Boolean" />, der angibt, ob beim Kompilieren des erstellten Ausdrucks die Endeaufrufoptimierung angewendet wird.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt wird.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine LambdaExpression, indem zuerst ein Delegattyp konstruiert wird.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei der die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich Lambda ist und die Eigenschaften <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> und <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="body">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="name">Der Name für Lambda.Wird zum Ausgeben von Debuginformationen verwendet.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt wird.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.Expression`1" />, bei der der Delegattyp zur Kompilierzeit bekannt ist.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.Expression`1" />, bei der die <see cref="P:System.Linq.Expressions.Expression`1.NodeType" />-Eigenschaft gleich <see cref="P:System.Linq.Expressions.Expression`1.Lambda" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.Expression`1.Body" /> und <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="body">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.Expression`1.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="name">Der Name für Lambda.Wird zum Generieren von Debuginformationen verwendet.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />-Auflistung aufgefüllt wird.</param>
      <typeparam name="TDelegate">Der Delegattyp. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine LambdaExpression, indem zuerst ein Delegattyp konstruiert wird.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei der die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich Lambda ist und die Eigenschaften <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> und <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="delegateType">Ein <see cref="P:System.Linq.Expressions.Expression.Type" />, der die Delegatsignatur für das Lambda darstellt.</param>
      <param name="body">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="tailCall">Ein <see cref="T:System.Boolean" />, der angibt, ob beim Kompilieren des erstellten Ausdrucks die Endeaufrufoptimierung angewendet wird.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt wird.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Erstellt eine LambdaExpression, indem zuerst ein Delegattyp konstruiert wird.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei der die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich Lambda ist und die Eigenschaften <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> und <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="delegateType">Ein <see cref="P:System.Linq.Expressions.Expression.Type" />, der die Delegatsignatur für das Lambda darstellt.</param>
      <param name="body">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="tailCall">Ein <see cref="T:System.Boolean" />, der angibt, ob beim Kompilieren des erstellten Ausdrucks die Endeaufrufoptimierung angewendet wird.</param>
      <param name="parameters">Ein Array mit <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt wird.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, indem zuerst ein Delegattyp konstruiert wird.Kann verwendet werden, wenn der Delegattyp zur Kompilierzeit nicht bekannt ist.</summary>
      <returns>Ein Objekt, das einen Lambda-Ausdruck darstellt, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
      <param name="delegateType">Ein <see cref="T:System.Type" />, der eine Delegatsignatur für das Lambda darstellt.</param>
      <param name="body">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> oder <paramref name="body" /> ist null.- oder -Eines oder mehrere Elemente in <paramref name="parameters" /> sind null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> stellt keinen Delegattyp dar.- oder -<paramref name="body" />.Type stellt einen Typ dar, der nicht dem Rückgabetyp des durch <paramref name="delegateType" /> dargestellten Delegatentyps zugeordnet werden kann.- oder -<paramref name="parameters" /> enthält nicht dieselbe Anzahl an Elementen wie die Liste der Parameter für den durch <paramref name="delegateType" /> dargestellten Delegattyp.- oder -Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="parameters" /> kann nicht dem Typ des entsprechenden Parametertyps des durch <paramref name="delegateType" /> dargestellten Delegattyps zugeordnet werden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, indem zuerst ein Delegattyp konstruiert wird.Kann verwendet werden, wenn der Delegattyp zur Kompilierzeit nicht bekannt ist.</summary>
      <returns>Ein Objekt, das einen Lambda-Ausdruck darstellt, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> ist und die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft sowie die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft auf die angegebenen Werte festgelegt sind.</returns>
      <param name="delegateType">Ein <see cref="T:System.Type" />, der eine Delegatsignatur für das Lambda darstellt.</param>
      <param name="body">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="parameters">Ein Array von <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> oder <paramref name="body" /> ist null.- oder -Eines oder mehrere Elemente in <paramref name="parameters" /> sind null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> stellt keinen Delegattyp dar.- oder -<paramref name="body" />.Type stellt einen Typ dar, der nicht dem Rückgabetyp des durch <paramref name="delegateType" /> dargestellten Delegatentyps zugeordnet werden kann.- oder -<paramref name="parameters" /> enthält nicht dieselbe Anzahl an Elementen wie die Liste der Parameter für den durch <paramref name="delegateType" /> dargestellten Delegattyp.- oder -Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="parameters" /> kann nicht dem Typ des entsprechenden Parametertyps des durch <paramref name="delegateType" /> dargestellten Delegattyps zugeordnet werden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine LambdaExpression, indem zuerst ein Delegattyp konstruiert wird.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei der die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich Lambda ist und die Eigenschaften <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> und <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="delegateType">Ein <see cref="P:System.Linq.Expressions.Expression.Type" />, der die Delegatsignatur für das Lambda darstellt.</param>
      <param name="body">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll. </param>
      <param name="name">Der Name für Lambda.Wird zum Ausgeben von Debuginformationen verwendet.</param>
      <param name="tailCall">Ein <see cref="T:System.Boolean" />, der angibt, ob beim Kompilieren des erstellten Ausdrucks die Endeaufrufoptimierung angewendet wird. </param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt wird. </param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine LambdaExpression, indem zuerst ein Delegattyp konstruiert wird.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, bei der die <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />-Eigenschaft gleich Lambda ist und die Eigenschaften <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> und <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="delegateType">Ein <see cref="P:System.Linq.Expressions.Expression.Type" />, der die Delegatsignatur für das Lambda darstellt.</param>
      <param name="body">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft festgelegt werden soll.</param>
      <param name="name">Der Name für Lambda.Wird zum Ausgeben von Debuginformationen verwendet.</param>
      <param name="parameters">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Auflistung aufgefüllt wird.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Linksschiebeoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der Linksschiebeoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Linksschiebeoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der Linksschiebeoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Linksschiebe-Zuweisungsoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Linksschiebe-Zuweisungsoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Linksschiebe-Zuweisungsoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen numerischen "Kleiner als"-Vergleich darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der Operator "Kleiner als" ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen numerischen "Kleiner als"-Vergleich darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="liftToNull">true, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf true festzulegen, und false, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf false festzulegen.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der Operator "Kleiner als" ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, das einen numerischen "Kleiner oder gleich"-Vergleich darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der Operator "Kleiner oder gleich" ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, das einen numerischen "Kleiner oder gleich"-Vergleich darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="liftToNull">true, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf true festzulegen, und false, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf false festzulegen.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der Operator "Kleiner oder gleich" ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.MemberListBinding" />, bei dem der Member ein Feld oder eine Eigenschaft ist.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MemberListBinding" />, bei der die <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> und <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="member">Eine <see cref="T:System.Reflection.MemberInfo" />, die ein Feld oder eine Eigenschaft darstellt, auf die die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft festgelegt werden soll.</param>
      <param name="initializers">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.ElementInit" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> ist null. - oder -Eines oder mehrere Elemente von <paramref name="initializers" /> sind null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> stellt kein Feld bzw. keine Eigenschaft dar.- oder -Der <see cref="P:System.Reflection.FieldInfo.FieldType" /> oder der <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> des Felds oder der Eigenschaft, das bzw. die <paramref name="member" /> darstellt, implementiert nicht <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.MemberListBinding" />, bei dem der Member ein Feld oder eine Eigenschaft ist.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MemberListBinding" />, bei der die <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> und <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="member">Eine <see cref="T:System.Reflection.MemberInfo" />, die ein Feld oder eine Eigenschaft darstellt, auf die die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft festgelegt werden soll.</param>
      <param name="initializers">Ein Array von <see cref="T:System.Linq.Expressions.ElementInit" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> ist null. - oder -Eines oder mehrere Elemente von <paramref name="initializers" /> sind null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> stellt kein Feld bzw. keine Eigenschaft dar.- oder -Der <see cref="P:System.Reflection.FieldInfo.FieldType" /> oder der <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> des Felds oder der Eigenschaft, das bzw. die <paramref name="member" /> darstellt, implementiert nicht <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Erstellt auf der Grundlage einer angegebenen Eigenschaftenaccessormethode ein <see cref="T:System.Linq.Expressions.MemberListBinding" />.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberListBinding" />, bei dem die <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> ist, die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft auf die <see cref="T:System.Reflection.MemberInfo" /> festgelegt ist, die die Eigenschaft darstellt, auf die in <paramref name="propertyAccessor" /> zugegriffen wird, und <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> mit den Elementen von <paramref name="initializers" /> aufgefüllt ist.</returns>
      <param name="propertyAccessor">Eine <see cref="T:System.Reflection.MethodInfo" />, die eine Eigenschaftenaccessormethode darstellt.</param>
      <param name="initializers">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.ElementInit" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> ist null. - oder -Eines oder mehrere Elemente von <paramref name="initializers" /> sind null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> stellt keine Eigenschaftenaccessormethode dar.- oder -Der <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> der Eigenschaft, auf die die durch <paramref name="propertyAccessor" /> dargestellte Methode zugreift, implementiert nicht <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Erstellt auf der Grundlage einer angegebenen Eigenschaftenaccessormethode ein <see cref="T:System.Linq.Expressions.MemberListBinding" />-Objekt.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberListBinding" />, bei dem die <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> ist, die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft auf die <see cref="T:System.Reflection.MemberInfo" /> festgelegt ist, die die Eigenschaft darstellt, auf die in <paramref name="propertyAccessor" /> zugegriffen wird, und <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> mit den Elementen von <paramref name="initializers" /> aufgefüllt ist.</returns>
      <param name="propertyAccessor">Eine <see cref="T:System.Reflection.MethodInfo" />, die eine Eigenschaftenaccessormethode darstellt.</param>
      <param name="initializers">Ein Array von <see cref="T:System.Linq.Expressions.ElementInit" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> ist null. - oder -Eines oder mehrere Elemente von <paramref name="initializers" /> sind null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> stellt keine Eigenschaftenaccessormethode dar.- oder -Der <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> der Eigenschaft, auf die die durch <paramref name="propertyAccessor" /> dargestellte Methode zugreift, implementiert nicht <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ListInitExpression" />, die die angegebenen <see cref="T:System.Linq.Expressions.ElementInit" />-Objekte verwendet, um eine Auflistung zu initialisieren.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.ListInitExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> und <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="newExpression">Eine <see cref="T:System.Linq.Expressions.NewExpression" />, auf die die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="initializers">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.ElementInit" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> oder <paramref name="initializers" /> ist null.- oder -Eines oder mehrere Elemente von <paramref name="initializers" /> sind null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type implementiert nicht <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ListInitExpression" />, die eine Methode mit dem Namen "Add" verwendet, um einer Auflistung Elemente hinzuzufügen.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.ListInitExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> ist und die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
      <param name="newExpression">Eine <see cref="T:System.Linq.Expressions.NewExpression" />, auf die die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="initializers">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> oder <paramref name="initializers" /> ist null.- oder -Eines oder mehrere Elemente von <paramref name="initializers" /> sind null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type implementiert nicht <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">In <paramref name="newExpression" />.Type oder seinen Basistypen wird keine Instanzmethode mit dem Namen "Add" (Groß-/Kleinschreibung wird nicht berücksichtigt) deklariert.- oder -Die add-Methode von <paramref name="newExpression" />.Type oder seinen Basistypen akzeptiert nicht genau ein Argument.- oder -Der Typ, der durch die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft des ersten Elements von <paramref name="initializers" /> dargestellt wird, kann nicht dem Argumenttyp der add-Methode von <paramref name="newExpression" />.Type oder seinem Basistyp zugeordnet werden.- oder -<paramref name="newExpression" />.Type und/oder sein Basistyp weist mehr als eine argumentkompatible Methode mit dem Namen "Add" (Groß-/Kleinschreibung wird nicht berücksichtigt) auf.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ListInitExpression" />, die die angegebenen <see cref="T:System.Linq.Expressions.ElementInit" />-Objekte verwendet, um eine Auflistung zu initialisieren.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.ListInitExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> und <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="newExpression">Eine <see cref="T:System.Linq.Expressions.NewExpression" />, auf die die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="initializers">Ein Array von <see cref="T:System.Linq.Expressions.ElementInit" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> oder <paramref name="initializers" /> ist null.- oder -Eines oder mehrere Elemente von <paramref name="initializers" /> sind null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type implementiert nicht <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ListInitExpression" />, die eine Methode mit dem Namen "Add" verwendet, um einer Auflistung Elemente hinzuzufügen.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.ListInitExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> ist und die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
      <param name="newExpression">Eine <see cref="T:System.Linq.Expressions.NewExpression" />, auf die die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="initializers">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> oder <paramref name="initializers" /> ist null.- oder -Eines oder mehrere Elemente von <paramref name="initializers" /> sind null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type implementiert nicht <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">In <paramref name="newExpression" />.Type oder seinen Basistypen wird keine Instanzmethode mit dem Namen "Add" (Groß-/Kleinschreibung wird nicht berücksichtigt) deklariert.- oder -Die add-Methode von <paramref name="newExpression" />.Type oder seinen Basistypen akzeptiert nicht genau ein Argument.- oder -Der Typ, der durch die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft des ersten Elements von <paramref name="initializers" /> dargestellt wird, kann nicht dem Argumenttyp der add-Methode von <paramref name="newExpression" />.Type oder seinem Basistyp zugeordnet werden.- oder -<paramref name="newExpression" />.Type und/oder sein Basistyp weist mehr als eine argumentkompatible Methode mit dem Namen "Add" (Groß-/Kleinschreibung wird nicht berücksichtigt) auf.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ListInitExpression" />, die eine angegebene Methode verwendet, um einer Auflistung Elemente hinzuzufügen.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.ListInitExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> ist und die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
      <param name="newExpression">Eine <see cref="T:System.Linq.Expressions.NewExpression" />, auf die die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="addMethod">Eine <see cref="T:System.Reflection.MethodInfo" />, die eine Instanzmethode mit dem Namen "Add" (Groß-/Kleinschreibung wird nicht berücksichtigt) darstellt, die einer Auflistung ein Element hinzufügt.</param>
      <param name="initializers">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> oder <paramref name="initializers" /> ist null.- oder -Eines oder mehrere Elemente von <paramref name="initializers" /> sind null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type implementiert nicht <see cref="T:System.Collections.IEnumerable" />.- oder -<paramref name="addMethod" /> ist nicht null und stellt keine Instanzmethode mit dem Namen "Add" (Groß-/Kleinschreibung wird nicht berücksichtigt) dar, die genau ein Argument akzeptiert.- oder -<paramref name="addMethod" /> ist nicht null, und der durch die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft dargestellte Typ einer oder mehrerer Elemente von <paramref name="initializers" /> kann nicht dem Argumenttyp der durch <paramref name="addMethod" /> dargestellten Methode zugeordnet werden.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> ist null, und in <paramref name="newExpression" />.Type oder seinem Basistyp ist keine Instanzmethode mit dem Namen "Add" vorhanden, die genau ein typkompatibles Argument akzeptiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.ListInitExpression" />, die eine angegebene Methode verwendet, um einer Auflistung Elemente hinzuzufügen.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.ListInitExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> ist und die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
      <param name="newExpression">Eine <see cref="T:System.Linq.Expressions.NewExpression" />, auf die die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="addMethod">Eine <see cref="T:System.Reflection.MethodInfo" />, die eine Instanzmethode darstellt, die ein Argument akzeptiert und einer Auflistung ein Element hinzufügt.</param>
      <param name="initializers">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> oder <paramref name="initializers" /> ist null.- oder -Eines oder mehrere Elemente von <paramref name="initializers" /> sind null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type implementiert nicht <see cref="T:System.Collections.IEnumerable" />.- oder -<paramref name="addMethod" /> ist nicht null und stellt keine Instanzmethode mit dem Namen "Add" (Groß-/Kleinschreibung wird nicht berücksichtigt) dar, die genau ein Argument akzeptiert.- oder -<paramref name="addMethod" /> ist nicht null, und der durch die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft dargestellte Typ einer oder mehrerer Elemente von <paramref name="initializers" /> kann nicht dem Argumenttyp der durch <paramref name="addMethod" /> dargestellten Methode zugeordnet werden.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> ist null, und in <paramref name="newExpression" />.Type oder seinem Basistyp ist keine Instanzmethode mit dem Namen "Add" vorhanden, die genau ein typkompatibles Argument akzeptiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.LoopExpression" /> mit dem angegebenen Text.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
      <param name="body">Der Text der Schleife.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.LoopExpression" /> mit dem angegebenen Text und Break-Ziel.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
      <param name="body">Der Text der Schleife.</param>
      <param name="break">Das vom Schleifentext verwendete Break-Ziel.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.LoopExpression" /> mit dem angegebenen Text.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
      <param name="body">Der Text der Schleife.</param>
      <param name="break">Das vom Schleifentext verwendete Break-Ziel.</param>
      <param name="continue">Das vom Schleifentext verwendete Continue-Ziel.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt bei gegebenem linken und rechten Operanden durch Aufrufen einer geeigneten Factorymethode eine <see cref="T:System.Linq.Expressions.BinaryExpression" />.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.BinaryExpression" />, die aus dem Aufruf der geeigneten Factorymethode resultiert.</returns>
      <param name="binaryType">Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der den Typ der binären Operation angibt.</param>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, die den linken Operanden darstellt.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, die den rechten Operanden darstellt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> entspricht keinem Knoten mit einem binären Ausdruck.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Erstellt bei gegebenem linken und rechten Operanden sowie gegebener implementierender Methode eine <see cref="T:System.Linq.Expressions.BinaryExpression" /> durch Aufrufen der geeigneten Factorymethode.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.BinaryExpression" />, die aus dem Aufruf der geeigneten Factorymethode resultiert.</returns>
      <param name="binaryType">Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der den Typ der binären Operation angibt.</param>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, die den linken Operanden darstellt.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, die den rechten Operanden darstellt.</param>
      <param name="liftToNull">true, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf true festzulegen, und false, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf false festzulegen.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, die die implementierende Methode darstellt.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> entspricht keinem Knoten mit einem binären Ausdruck.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt bei gegebenem linken und rechten Operanden sowie gegebener implementierender Methode und Typkonvertierungsfunktion eine <see cref="T:System.Linq.Expressions.BinaryExpression" /> durch Aufrufen der geeigneten Factorymethode.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.BinaryExpression" />, die aus dem Aufruf der geeigneten Factorymethode resultiert.</returns>
      <param name="binaryType">Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der den Typ der binären Operation angibt.</param>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, die den linken Operanden darstellt.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, die den rechten Operanden darstellt.</param>
      <param name="liftToNull">true, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf true festzulegen, und false, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf false festzulegen.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, die die implementierende Methode darstellt.</param>
      <param name="conversion">Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, die eine Typkonvertierungsfunktion darstellt.Dieser Parameter wird nur verwendet, wenn <paramref name="binaryType" /><see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> oder eine zusammengesetzte Zuweisung ist.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> entspricht keinem Knoten mit einem binären Ausdruck.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.CatchBlock" />, der eine Catch-Anweisung mit den angegebenen Elementen darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="type">Der <see cref="P:System.Linq.Expressions.Expression.Type" /> der <see cref="T:System.Exception" />, die dieser <see cref="T:System.Linq.Expressions.CatchBlock" /> behandelt.</param>
      <param name="variable">Eine <see cref="T:System.Linq.Expressions.ParameterExpression" />, die einen Verweis auf das von diesem Handler aufgefangene <see cref="T:System.Exception" />-Objekt darstellt.</param>
      <param name="body">Der Text der Catch-Anweisung.</param>
      <param name="filter">Der Text des <see cref="T:System.Exception" />-Filters.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die einen Sprung zum angegebenen <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> darstellt.Der beim Springen an die Bezeichnung übergebene Wert kann ebenfalls angegeben werden.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich <paramref name="kind" /> ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist, die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf <paramref name="type" /> festgelegt ist und beim Springen <paramref name="value" /> an die Zielbezeichnung übergeben wird.</returns>
      <param name="kind">Die <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> der <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="value">Der Wert, der beim Springen an die zugeordnete Bezeichnung übergeben wird.</param>
      <param name="type">Eine <see cref="T:System.Type" />, auf die die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.IndexExpression" />, die den Zugriff auf eine indizierte Eigenschaft in einem Objekt darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">Das Objekt, zu dem die Eigenschaft gehört.Sollte null sein, wenn die Eigenschaft statisch ist (Shared in Visual Basic).</param>
      <param name="indexer">Eine <see cref="T:System.Linq.Expressions.Expression" />, die die zu indizierende Eigenschaft darstellt.</param>
      <param name="arguments">Ein IEnumerable&lt;Expression&gt; (IEnumerable (Of Expression) in Visual Basic), das die Argumente enthält, mit denen die Eigenschaft indiziert wird.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberExpression" />, die den Zugriff auf ein Feld oder eine Eigenschaft darstellt.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.MemberExpression" />, die aus dem Aufruf der geeigneten Factorymethode resultiert.</returns>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />-Objekt, das das Objekt darstellt, dem der Member angehört.Kann für statische Member NULL sein.</param>
      <param name="member">Die <see cref="T:System.Reflection.MemberInfo" />, die das Feld oder die Eigenschaft beschreibt, auf das bzw. die ein Zugriff erfolgen soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="member" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> stellt kein Feld bzw. keine Eigenschaft dar.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.TryExpression" />, die einen try-Block mit den angegebenen Elementen darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="type">Der Ergebnistyp des Try-Ausdrucks.Bei NULL müssen Text und alle Handler vom selben Typ sein.</param>
      <param name="body">Der Text des Try-Blocks.</param>
      <param name="finally">Der Text des Finally-Blocks.Übergeben Sie NULL, wenn dem Try-Block kein Finally-Block zugeordnet ist.</param>
      <param name="fault">Der Text des Try-Blocks.Übergeben Sie NULL, wenn dem Try-Block kein Fault-Block zugeordnet ist.</param>
      <param name="handlers">Eine Auflistung von <see cref="T:System.Linq.Expressions.CatchBlock" />s, die die dem Try-Block zugeordneten Catch-Anweisungen darstellen.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt bei gegebenem Operanden eine <see cref="T:System.Linq.Expressions.UnaryExpression" /> durch Aufrufen der entsprechenden Factorymethode.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.UnaryExpression" />, die aus dem Aufruf der geeigneten Factorymethode resultiert.</returns>
      <param name="unaryType">Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der den Typ der unären Operation angibt.</param>
      <param name="operand">Eine <see cref="T:System.Linq.Expressions.Expression" />, die den linken Operanden darstellt.</param>
      <param name="type">Der <see cref="T:System.Type" />, der den zu konvertierenden Typ angibt (übergeben Sie NULL, wenn dies nicht benötigt wird).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> entspricht keinem Knoten mit einem unären Ausdruck.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Erstellt bei gegebenem Operanden und gegebener implementierenden Methode eine <see cref="T:System.Linq.Expressions.UnaryExpression" /> durch Aufrufen der entsprechenden Factorymethode.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.UnaryExpression" />, die aus dem Aufruf der geeigneten Factorymethode resultiert.</returns>
      <param name="unaryType">Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der den Typ der unären Operation angibt.</param>
      <param name="operand">Eine <see cref="T:System.Linq.Expressions.Expression" />, die den linken Operanden darstellt.</param>
      <param name="type">Der <see cref="T:System.Type" />, der den zu konvertierenden Typ angibt (übergeben Sie NULL, wenn dies nicht benötigt wird).</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, die die implementierende Methode darstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> entspricht keinem Knoten mit einem unären Ausdruck.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, das die rekursive Initialisierung der Member eines Felds oder einer Eigenschaft darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, bei der die <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> und <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="member">Eine <see cref="T:System.Reflection.MemberInfo" />, auf die die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft festgelegt werden soll.</param>
      <param name="bindings">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.MemberBinding" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> oder <paramref name="bindings" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> stellt kein Feld bzw. keine Eigenschaft dar.- oder -Die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft eines Elements von <paramref name="bindings" /> stellt keinen Member dar, der den Typ des durch <paramref name="member" /> dargestellten Felds bzw. der Eigenschaft aufweist.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, das die rekursive Initialisierung der Member eines Felds oder einer Eigenschaft darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, bei der die <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> und <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="member">Eine <see cref="T:System.Reflection.MemberInfo" />, auf die die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft festgelegt werden soll.</param>
      <param name="bindings">Ein Array von <see cref="T:System.Linq.Expressions.MemberBinding" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> oder <paramref name="bindings" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> stellt kein Feld bzw. keine Eigenschaft dar.- oder -Die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft eines Elements von <paramref name="bindings" /> stellt keinen Member dar, der den Typ des durch <paramref name="member" /> dargestellten Felds bzw. der Eigenschaft aufweist.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, das die rekursive Initialisierung der Member eines Members darstellt, auf den durch eine Eigenschaftenaccessormethode zugegriffen wird.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, bei dem die <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> ist, die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft auf die <see cref="T:System.Reflection.PropertyInfo" /> festgelegt ist, die die Eigenschaft darstellt, auf die in <paramref name="propertyAccessor" /> zugegriffen wird und die <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />-Eigenschaften auf die angegebenen Werte festgelegt sind.</returns>
      <param name="propertyAccessor">Eine <see cref="T:System.Reflection.MethodInfo" />, die eine Eigenschaftenaccessormethode darstellt.</param>
      <param name="bindings">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.MemberBinding" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> oder <paramref name="bindings" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> stellt keine Eigenschaftenaccessormethode dar.- oder -Die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft eines Elements von <paramref name="bindings" /> stellt keinen Member dar, der den Typ der Eigenschaft aufweist, auf die in der durch <paramref name="propertyAccessor" /> dargestellten Methode zugegriffen wird.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, das die rekursive Initialisierung der Member eines Members darstellt, auf den durch eine Eigenschaftenaccessormethode zugegriffen wird.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, bei dem die <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> ist, die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft auf die <see cref="T:System.Reflection.PropertyInfo" /> festgelegt ist, die die Eigenschaft darstellt, auf die in <paramref name="propertyAccessor" /> zugegriffen wird und die <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />-Eigenschaften auf die angegebenen Werte festgelegt sind.</returns>
      <param name="propertyAccessor">Eine <see cref="T:System.Reflection.MethodInfo" />, die eine Eigenschaftenaccessormethode darstellt.</param>
      <param name="bindings">Ein Array von <see cref="T:System.Linq.Expressions.MemberBinding" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> oder <paramref name="bindings" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> stellt keine Eigenschaftenaccessormethode dar.- oder -Die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft eines Elements von <paramref name="bindings" /> stellt keinen Member dar, der den Typ der Eigenschaft aufweist, auf die in der durch <paramref name="propertyAccessor" /> dargestellten Methode zugegriffen wird.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Stellt einen Ausdruck dar, der ein neues Objekt erstellt und eine Eigenschaft des Objekts initialisiert.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MemberInitExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> und <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="newExpression">Eine <see cref="T:System.Linq.Expressions.NewExpression" />, auf die die <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="bindings">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.MemberBinding" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> oder <paramref name="bindings" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft eines Elements von <paramref name="bindings" /> stellt keinen Member dar, der den durch <paramref name="newExpression" />.Type dargestellten Typ aufweist.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MemberInitExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> und <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="newExpression">Eine <see cref="T:System.Linq.Expressions.NewExpression" />, auf die die <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="bindings">Ein Array von <see cref="T:System.Linq.Expressions.MemberBinding" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> oder <paramref name="bindings" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Die <see cref="P:System.Linq.Expressions.MemberBinding.Member" />-Eigenschaft eines Elements von <paramref name="bindings" /> stellt keinen Member dar, der den durch <paramref name="newExpression" />.Type dargestellten Typ aufweist.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Restoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der Modulo-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Restoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der Modulo-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Restzuweisungsoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Restzuweisungsoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Restzuweisungsoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Multiplikation ohne Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der Multiplikationsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Multiplikation ohne Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der Multiplikationsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Multiplikationszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Multiplikationszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Multiplikationszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Multiplikationszuweisungsoperation mit Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Multiplikationszuweisungsoperation mit Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Multiplikationszuweisungsoperation mit Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Multiplikation mit Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der Multiplikationsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Multiplikation mit Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der Multiplikationsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine arithmetische Negationsoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> ist und die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Der unäre Minusoperator ist für <paramref name="expression" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine arithmetische Negationsoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> und <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau ein Argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der unäre Minusoperator ist für <paramref name="expression" />.Type nicht definiert.- oder -<paramref name="expression" />.Type (oder, sofern der Typ NULL-Werte zulässt, der entsprechende Typ, der keine NULL-Werte zulässt) kann nicht dem Argumenttyp der durch <paramref name="method" /> dargestellten Methode zugeordnet werden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine arithmetische Negationsoperation mit Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> ist und die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Der unäre Minusoperator ist für <paramref name="expression" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine arithmetische Negationsoperation mit Überlaufprüfung darstellt.Die implementierende Methode kann angegeben werden.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> und <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau ein Argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der unäre Minusoperator ist für <paramref name="expression" />.Type nicht definiert.- oder -<paramref name="expression" />.Type (oder, sofern der Typ NULL-Werte zulässt, der entsprechende Typ, der keine NULL-Werte zulässt) kann nicht dem Argumenttyp der durch <paramref name="method" /> dargestellten Methode zugeordnet werden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewExpression" />, die den Aufruf des angegebenen Konstruktors darstellt, der keine Argumente akzeptiert.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.NewExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.New" /> ist und die <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
      <param name="constructor">Eine <see cref="T:System.Reflection.ConstructorInfo" />, auf die die <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentException">Der durch <paramref name="constructor" /> darstellte Konstruktor verfügt über mindestens einen Parameter.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewExpression" />, die den Aufruf des angegebenen Konstruktors mit den angegebenen Argumenten darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.NewExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.New" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> und <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="constructor">Eine <see cref="T:System.Reflection.ConstructorInfo" />, auf die die <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arguments">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> ist NULL.- oder -Ein Element von <paramref name="arguments" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Der <paramref name="arguments" />-Parameter enthält nicht dieselbe Anzahl an Elementen wie die Anzahl der Parameter für den durch <paramref name="constructor" /> dargestellten Konstruktor.- oder -Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="arguments" /> kann nicht dem Typ des entsprechenden Parameters des durch <paramref name="constructor" /> dargestellten Konstruktors zugeordnet werden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewExpression" />, die den Aufruf des angegebenen Konstruktors mit den angegebenen Argumenten darstellt.Es werden die Member angegeben, die auf die durch den Konstruktor initialisierten Felder zugreifen.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.NewExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.New" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> und <see cref="P:System.Linq.Expressions.NewExpression.Members" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="constructor">Eine <see cref="T:System.Reflection.ConstructorInfo" />, auf die die <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arguments">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />-Auflistung aufgefüllt wird.</param>
      <param name="members">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Reflection.MemberInfo" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.NewExpression.Members" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> ist NULL.- oder -Ein Element von <paramref name="arguments" /> ist null.- oder -Ein Element von <paramref name="members" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Der <paramref name="arguments" />-Parameter enthält nicht dieselbe Anzahl an Elementen wie die Anzahl der Parameter für den durch <paramref name="constructor" /> dargestellten Konstruktor.- oder -Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="arguments" /> kann nicht dem Typ des entsprechenden Parameters des durch <paramref name="constructor" /> dargestellten Konstruktors zugeordnet werden.- oder -Der <paramref name="members" />-Parameter weist nicht die gleiche Anzahl an Elementen auf wie <paramref name="arguments" />.- oder -Ein Element von <paramref name="arguments" /> weist eine <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf, die einen Typ darstellt, der nicht dem Typ des Members zugeordnet werden kann, der durch das entsprechende Element von <paramref name="members" /> dargestellt wird.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewExpression" />, die den Aufruf des angegebenen Konstruktors mit den angegebenen Argumenten darstellt.Es werden die Member als Array angegeben, die auf die durch den Konstruktor initialisierten Felder zugreifen.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.NewExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.New" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> und <see cref="P:System.Linq.Expressions.NewExpression.Members" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="constructor">Eine <see cref="T:System.Reflection.ConstructorInfo" />, auf die die <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arguments">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />-Auflistung aufgefüllt wird.</param>
      <param name="members">Ein Array von <see cref="T:System.Reflection.MemberInfo" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.NewExpression.Members" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> ist NULL.- oder -Ein Element von <paramref name="arguments" /> ist null.- oder -Ein Element von <paramref name="members" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Der <paramref name="arguments" />-Parameter enthält nicht dieselbe Anzahl an Elementen wie die Anzahl der Parameter für den durch <paramref name="constructor" /> dargestellten Konstruktor.- oder -Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="arguments" /> kann nicht dem Typ des entsprechenden Parameters des durch <paramref name="constructor" /> dargestellten Konstruktors zugeordnet werden.- oder -Der <paramref name="members" />-Parameter weist nicht die gleiche Anzahl an Elementen auf wie <paramref name="arguments" />.- oder -Ein Element von <paramref name="arguments" /> weist eine <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf, die einen Typ darstellt, der nicht dem Typ des Members zugeordnet werden kann, der durch das entsprechende Element von <paramref name="members" /> dargestellt wird.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewExpression" />, die den Aufruf des angegebenen Konstruktors mit den angegebenen Argumenten darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.NewExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.New" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> und <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="constructor">Eine <see cref="T:System.Reflection.ConstructorInfo" />, auf die die <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />-Eigenschaft festgelegt werden soll.</param>
      <param name="arguments">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> ist NULL.- oder -Ein Element von <paramref name="arguments" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Die Länge von <paramref name="arguments" /> entspricht nicht der Anzahl von Parametern für den durch <paramref name="constructor" /> darstellten Konstruktor.- oder -Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="arguments" /> kann nicht dem Typ des entsprechenden Parameters des durch <paramref name="constructor" /> dargestellten Konstruktors zugeordnet werden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewExpression" />, die den Aufruf des Konstruktors vom angegebenen Typ ohne Parameter darstellt.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.NewExpression" />, bei dem die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.New" /> ist und die <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />-Eigenschaft auf die <see cref="T:System.Reflection.ConstructorInfo" /> festgelegt ist, die den Konstruktor ohne Parameter für den angegebenen Typ darstellt.</returns>
      <param name="type">Ein <see cref="T:System.Type" /> mit einem Konstruktor, der keine Argumente akzeptiert.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentException">Der durch <paramref name="type" /> darstellte Typ weist keinen Konstruktor ohne Parameter auf.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewArrayExpression" />, die das Erstellen eines Arrays mit dem angegebenen Rang darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.NewArrayExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> ist und die <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
      <param name="type">Ein <see cref="T:System.Type" />, der den Elementtyp des Arrays darstellt.</param>
      <param name="bounds">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> oder <paramref name="bounds" /> ist null.- oder -Ein Element von <paramref name="bounds" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="bounds" /> stellt keinen ganzzahligen Typ dar.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewArrayExpression" />, die das Erstellen eines Arrays mit dem angegebenen Rang darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.NewArrayExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> ist und die <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
      <param name="type">Ein <see cref="T:System.Type" />, der den Elementtyp des Arrays darstellt.</param>
      <param name="bounds">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> oder <paramref name="bounds" /> ist null.- oder -Ein Element von <paramref name="bounds" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="bounds" /> stellt keinen ganzzahligen Typ dar.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewArrayExpression" />, die das Erstellen eines eindimensionalen Arrays und Initialisieren dieses Arrays aus einer Liste von Elementen darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.NewArrayExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> ist und die <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
      <param name="type">Ein <see cref="T:System.Type" />, der den Elementtyp des Arrays darstellt.</param>
      <param name="initializers">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> oder <paramref name="initializers" /> ist null.- oder -Ein Element von <paramref name="initializers" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="initializers" /> stellt einen Typ dar, der nicht dem durch <paramref name="type" /> dargestellten Typ zugeordnet werden kann.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.NewArrayExpression" />, die das Erstellen eines eindimensionalen Arrays und Initialisieren dieses Arrays aus einer Liste von Elementen darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.NewArrayExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> ist und die <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
      <param name="type">Ein <see cref="T:System.Type" />, der den Elementtyp des Arrays darstellt.</param>
      <param name="initializers">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />-Auflistung aufgefüllt wird.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> oder <paramref name="initializers" /> ist null.- oder -Ein Element von <paramref name="initializers" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft eines Elements von <paramref name="initializers" /> stellt einen Typ dar, der dem Typ <paramref name="type" /> nicht zugeordnet werden kann.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>Ruft den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> ab.</summary>
      <returns>Einer der <see cref="T:System.Linq.Expressions.ExpressionType" />-Werte.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine bitweise Komplementoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> ist und die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Der unäre Not-Operator ist für <paramref name="expression" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine bitweise Komplementoperation darstellt.Die implementierende Methode kann angegeben werden.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> und <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau ein Argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der unäre Not-Operator ist für <paramref name="expression" />.Type nicht definiert.- oder -<paramref name="expression" />.Type (oder, sofern der Typ NULL-Werte zulässt, der entsprechende Typ, der keine NULL-Werte zulässt) kann nicht dem Argumenttyp der durch <paramref name="method" /> dargestellten Methode zugeordnet werden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen Ungleichheitsvergleich darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der Ungleichheitsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen Ungleichheitsvergleich darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="liftToNull">true, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf true festzulegen, und false, um <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> auf false festzulegen.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der Ungleichheitsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>Gibt den Ausdruck zurück, der das Ones-Komplement darstellt.</summary>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Gibt den Ausdruck zurück, der das Ones-Komplement darstellt.</summary>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, die die implementierende Methode darstellt.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, das eine bitweise OR-Operation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der bitweise OR-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, das eine bitweise OR-Operation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der bitweise OR-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise OR-Zuweisungsoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise OR-Zuweisungsoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise OR-Zuweisungsoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, das eine bedingte OR-Operation darstellt, bei dem der zweite Operand nur ausgewertet wird, wenn der erste Operand zu false ausgewertet wird.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der bitweise OR-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.- oder -<paramref name="left" />.Type und <paramref name="right" />.Type weisen nicht denselben booleschen Typ auf.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.BinaryExpression" />, das eine bedingte OR-Operation darstellt, bei dem der zweite Operand nur ausgewertet wird, wenn der erste Operand zu false ausgewertet wird.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der bitweise OR-Operator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.- oder -<paramref name="method" /> ist null, und <paramref name="left" />.Type sowie <paramref name="right" />.Type weisen nicht denselben booleschen Typ auf.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.ParameterExpression" />-Knoten, der verwendet werden kann, um einen Parameter oder eine Variable in einer Ausdrucksbaumstruktur zu identifizieren.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.ParameterExpression" />-Knoten mit dem angegebenen Namen und Typ.</returns>
      <param name="type">Der Typ des Parameters oder der Variablen.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.ParameterExpression" />-Knoten, der verwendet werden kann, um einen Parameter oder eine Variable in einer Ausdrucksbaumstruktur zu identifizieren.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.ParameterExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.Expression.Type" /> und <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="type">Der Typ des Parameters oder der Variablen.</param>
      <param name="name">Der Name des Parameters oder der Variable (wird nur zum Debuggen oder Drucken verwendet).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die die Zuweisung des Ausdrucks mit einer nachfolgenden Verringerung des ursprünglichen Ausdruckswerts um 1 darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den resultierenden Ausdruckswert darstellt.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die Vorgänge angewendet werden.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die die Zuweisung des Ausdrucks mit einer nachfolgenden Verringerung des ursprünglichen Ausdruckswerts um 1 darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den resultierenden Ausdruckswert darstellt.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die Vorgänge angewendet werden.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, die die implementierende Methode darstellt.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die die Zuweisung des Ausdrucks mit einer nachfolgenden Erhöhung des ursprünglichen Ausdruckswerts um 1 darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den resultierenden Ausdruckswert darstellt.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die Vorgänge angewendet werden.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die die Zuweisung des Ausdrucks mit einer nachfolgenden Erhöhung des ursprünglichen Ausdruckswerts um 1 darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den resultierenden Ausdruckswert darstellt.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die Vorgänge angewendet werden.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, die die implementierende Methode darstellt.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die das Potenzieren einer Zahl darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der Potenzierungsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.- oder -<paramref name="left" />.Type und/oder <paramref name="right" />.Type ist nicht <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die das Potenzieren einer Zahl darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der Potenzierungsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.- oder -<paramref name="method" /> ist null, und <paramref name="left" />.Type und/oder <paramref name="right" />.Type ist nicht <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die das Potenzieren eines Ausdrucks und erneute Zuweisen des Ergebnisses zum Ausdruck darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die das Potenzieren eines Ausdrucks und erneute Zuweisen des Ergebnisses zum Ausdruck darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die das Potenzieren eines Ausdrucks und erneute Zuweisen des Ergebnisses zum Ausdruck darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den Ausdruckswert um 1 verringert und das Ergebnis wieder dem Ausdruck zuordnet.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den resultierenden Ausdruckswert darstellt.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die Vorgänge angewendet werden.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den Ausdruckswert um 1 verringert und das Ergebnis wieder dem Ausdruck zuordnet.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den resultierenden Ausdruckswert darstellt.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die Vorgänge angewendet werden.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, die die implementierende Methode darstellt.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den Ausdruckswert um 1 erhöht und das Ergebnis wieder dem Ausdruck zuordnet.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den resultierenden Ausdruckswert darstellt.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die Vorgänge angewendet werden.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den Ausdruckswert um 1 erhöht und das Ergebnis wieder dem Ausdruck zuordnet.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die den resultierenden Ausdruckswert darstellt.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die Vorgänge angewendet werden.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, die die implementierende Methode darstellt.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberExpression" />, die den Zugriff auf eine Eigenschaft durch Verwendung einer Eigenschaftenaccessormethode darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MemberExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> ist, die <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />-Eigenschaft auf <paramref name="expression" /> festgelegt ist und die <see cref="P:System.Linq.Expressions.MemberExpression.Member" />-Eigenschaft auf die <see cref="T:System.Reflection.PropertyInfo" /> festgelegt ist, die die Eigenschaft darstellt, auf die in <paramref name="propertyAccessor" /> zugegriffen wird.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />-Eigenschaft festgelegt werden soll.Kann für statische Eigenschaften NULL sein.</param>
      <param name="propertyAccessor">Eine <see cref="T:System.Reflection.MethodInfo" />, die eine Eigenschaftenaccessormethode darstellt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> ist NULL.- oder -Die durch <paramref name="propertyAccessor" /> dargestellte Methode ist nicht static (Shared in Visual Basic), und <paramref name="expression" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type kann dem deklarierenden Typ der durch <paramref name="propertyAccessor" /> dargestellten Methode nicht zugeordnet werden.- oder -Die durch <paramref name="propertyAccessor" /> dargestellte Methode ist keine Eigenschaftenaccessormethode.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberExpression" />, die den Zugriff auf eine Eigenschaft darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MemberExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> und <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />-Eigenschaft festgelegt werden soll.Kann für statische Eigenschaften NULL sein.</param>
      <param name="property">Eine <see cref="T:System.Reflection.PropertyInfo" />, auf die die <see cref="P:System.Linq.Expressions.MemberExpression.Member" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> ist NULL.- oder -Die durch <paramref name="property" /> dargestellte Eigenschaft ist nicht static (Shared in Visual Basic), und <paramref name="expression" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type kann nicht dem deklarierenden Typ der Eigenschaft zugeordnet werden, die durch <paramref name="property" /> dargestellt wird.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.IndexExpression" />, die den Zugriff auf eine indizierte Eigenschaft darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">Das Objekt, zu dem die Eigenschaft gehört.Wenn die Eigenschaft statisch/freigegeben ist, muss sie NULL sein.</param>
      <param name="indexer">Die <see cref="T:System.Reflection.PropertyInfo" />, die die zu indizierende Eigenschaft darstellt.</param>
      <param name="arguments">Ein <see cref="T:System.Collections.Generic.IEnumerable`1" /> von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, die zum Indizieren der Eigenschaft verwendet werden.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.IndexExpression" />, die den Zugriff auf eine indizierte Eigenschaft darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">Das Objekt, zu dem die Eigenschaft gehört.Wenn die Eigenschaft statisch/freigegeben ist, muss sie NULL sein.</param>
      <param name="indexer">Die <see cref="T:System.Reflection.PropertyInfo" />, die die zu indizierende Eigenschaft darstellt.</param>
      <param name="arguments">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, die zum Indizieren der Eigenschaft verwendet werden.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberExpression" />, die den Zugriff auf eine Eigenschaft darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MemberExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> ist, die <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />-Eigenschaft auf <paramref name="expression" /> festgelegt ist und die <see cref="P:System.Linq.Expressions.MemberExpression.Member" />-Eigenschaft auf die <see cref="T:System.Reflection.PropertyInfo" /> festgelegt ist, die die durch <paramref name="propertyName" /> angegebene Eigenschaft darstellt.</returns>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, dessen <see cref="P:System.Linq.Expressions.Expression.Type" /> eine Eigenschaft mit dem Namen <paramref name="propertyName" /> enthält.Kann für statische Eigenschaften null sein.</param>
      <param name="propertyName">Der Name der Eigenschaft, auf die zugegriffen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="propertyName" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">In <paramref name="expression" />.Type oder den entsprechenden Basistypen ist keine Eigenschaft mit dem Namen <paramref name="propertyName" /> definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.IndexExpression" />, die den Zugriff auf eine indizierte Eigenschaft darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">Das Objekt, zu dem die Eigenschaft gehört.Wenn die Eigenschaft statisch/freigegeben ist, muss sie NULL sein.</param>
      <param name="propertyName">Der Name des Indexers.</param>
      <param name="arguments">Ein Array von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, die zum Indizieren der Eigenschaft verwendet werden.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberExpression" />, die auf eine Eigenschaft zugreift.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.MemberExpression" />.</returns>
      <param name="expression">Das enthaltende Objekt der Eigenschaft.Kann für statische Eigenschaften NULL sein.</param>
      <param name="type">Der <see cref="P:System.Linq.Expressions.Expression.Type" />, der das Eigenschaft enthält.</param>
      <param name="propertyName">Die Eigenschaft, auf die zugegriffen werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.MemberExpression" />, die den Zugriff auf eine Eigenschaft oder ein Feld darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.MemberExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> ist, die <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />-Eigenschaft auf <paramref name="expression" /> festgelegt ist und die <see cref="P:System.Linq.Expressions.MemberExpression.Member" />-Eigenschaft auf die <see cref="T:System.Reflection.PropertyInfo" /> oder <see cref="T:System.Reflection.FieldInfo" /> festgelegt ist, die die durch <paramref name="propertyOrFieldName" /> angegebene Eigenschaft oder das angegebene Feld darstellt.</returns>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, dessen <see cref="P:System.Linq.Expressions.Expression.Type" /> eine Eigenschaft oder ein Feld mit dem Namen <paramref name="propertyOrFieldName" /> enthält.Kann für statische Member NULL sein.</param>
      <param name="propertyOrFieldName">Der Name einer Eigenschaft oder eines Felds, auf die bzw. das zugegriffen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="propertyOrFieldName" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">In <paramref name="expression" />.Type oder seinen Basistypen ist keine Eigenschaft bzw. kein Feld mit dem Namen <paramref name="propertyOrFieldName" /> definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die einen Ausdruck mit einem konstanten Wert vom Typ <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> ist und die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist NULL.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>Reduziert diesen Knoten zu einem einfacheren Ausdruck.Wenn CanReduce true zurückgibt, sollte ein gültiger Ausdruck zurückgegeben werden.Diese Methode kann einen anderen Knoten zurückgeben, der selbst reduziert werden muss.</summary>
      <returns>Der reduzierte Ausdruck.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>Reduziert diesen Knoten zu einem einfacheren Ausdruck.Wenn CanReduce true zurückgibt, sollte ein gültiger Ausdruck zurückgegeben werden.Diese Methode kann einen anderen Knoten zurückgeben, der selbst reduziert werden muss.</summary>
      <returns>Der reduzierte Ausdruck.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>Reduziert den Ausdruck zu einem bekannten Knotentyp (kein Erweiterungsknoten) oder gibt nur den Ausdruck zurück, wenn es sich um einen bereits bekannten Typ handelt.</summary>
      <returns>Der reduzierte Ausdruck.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen Verweisgleichheitsvergleich darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die einen Verweisungleichheitsvergleich darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das erneute Auslösen einer Ausnahme darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das erneute Auslösen einer Ausnahme darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das erneute Auslösen einer Ausnahme eines angegebenen Typs darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das erneute Auslösen einer Ausnahme darstellt.</returns>
      <param name="type">Der neue <see cref="T:System.Type" /> des Ausdrucks.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine Return-Anweisung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich Return ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist und ein NULL-Wert beim Springen an die Zielbezeichnung übergeben wird.</returns>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine Return-Anweisung darstellt.Der beim Springen an die Bezeichnung übergebene Wert kann angegeben werden.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich Continue ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist und beim Springen <paramref name="value" /> an die Zielbezeichnung übergeben wird.</returns>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="value">Der Wert, der beim Springen an die zugeordnete Bezeichnung übergeben wird.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine Return-Anweisung mit dem angegebenen Typ darstellt.Der beim Springen an die Bezeichnung übergebene Wert kann angegeben werden.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich Continue ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist, die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf <paramref name="type" /> festgelegt ist und beim Springen <paramref name="value" /> an die Zielbezeichnung übergeben wird.</returns>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="value">Der Wert, der beim Springen an die zugeordnete Bezeichnung übergeben wird.</param>
      <param name="type">Eine <see cref="T:System.Type" />, auf die die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine Return-Anweisung mit dem angegebenen Typ darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, bei der <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> gleich Return ist, die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft auf <paramref name="target" /> festgelegt ist, die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft auf <paramref name="type" /> festgelegt ist und ein NULL-Wert beim Springen an die Zielbezeichnung übergeben wird.</returns>
      <param name="target">Das <see cref="T:System.Linq.Expressions.LabelTarget" />, zu dem <see cref="T:System.Linq.Expressions.GotoExpression" /> springt.</param>
      <param name="type">Eine <see cref="T:System.Type" />, auf die die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Rechtsschiebeoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der Rechtsschiebeoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Rechtsschiebeoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der Rechtsschiebeoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Rechtsschiebe-Zuweisungsoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Rechtsschiebe-Zuweisungsoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine bitweise Rechtsschiebe-Zuweisungsoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt eine Instanz von <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> ist und die <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
      <param name="variables">Eine Auflistung von <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />-Auflistung aufgefüllt wird.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>Erstellt eine Instanz von <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> ist und die <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
      <param name="variables">Ein Array von <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, mit denen die <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />-Auflistung aufgefüllt wird.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Subtraktion ohne Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der Subtraktionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Subtraktion ohne Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der Subtraktionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Subtraktionszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Subtraktionszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Subtraktionszuweisungsoperation ohne Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Subtraktionszuweisungsoperation mit Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Subtraktionszuweisungsoperation mit Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine Subtraktionszuweisungsoperation mit Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <param name="conversion">Eine <see cref="T:System.Linq.Expressions.LambdaExpression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Subtraktion mit Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.InvalidOperationException">Der Subtraktionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, die eine arithmetische Subtraktion mit Überlaufprüfung darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.BinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> und <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="left">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />-Eigenschaft festgelegt werden soll.</param>
      <param name="right">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> oder <paramref name="right" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau zwei Argumente.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der Subtraktionsoperator ist für <paramref name="left" />.Type und <paramref name="right" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.SwitchExpression" />, die eine switch-Anweisung mit einem Standardfall darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">Der Wert, der für jeden Fall getestet werden soll.</param>
      <param name="defaultBody">Das Ergebnis des Schalters, wenn <paramref name="switchValue" /> mit keinem der Fälle übereinstimmt.</param>
      <param name="cases">Der Satz von Fällen für diesen Schalterausdruck.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.SwitchExpression" />, die eine switch-Anweisung mit einem Standardfall darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">Der Wert, der für jeden Fall getestet werden soll.</param>
      <param name="defaultBody">Das Ergebnis des Schalters, wenn <paramref name="switchValue" /> mit keinem der Fälle übereinstimmt.</param>
      <param name="comparison">Die zu verwendende Methode für den Gleichheitsvergleich.</param>
      <param name="cases">Der Satz von Fällen für diesen Schalterausdruck.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.SwitchExpression" />, die eine switch-Anweisung mit einem Standardfall darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">Der Wert, der für jeden Fall getestet werden soll.</param>
      <param name="defaultBody">Das Ergebnis des Schalters, wenn <paramref name="switchValue" /> mit keinem der Fälle übereinstimmt.</param>
      <param name="comparison">Die zu verwendende Methode für den Gleichheitsvergleich.</param>
      <param name="cases">Der Satz von Fällen für diesen Schalterausdruck.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.SwitchExpression" />, die eine switch-Anweisung ohne Standardfall darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">Der Wert, der für jeden Fall getestet werden soll.</param>
      <param name="cases">Der Satz von Fällen für diesen Schalterausdruck.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.SwitchExpression" />, die eine switch-Anweisung mit einem Standardfall darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="type">Der Ergebnistyp der Option.</param>
      <param name="switchValue">Der Wert, der für jeden Fall getestet werden soll.</param>
      <param name="defaultBody">Das Ergebnis des Schalters, wenn <paramref name="switchValue" /> mit keinem der Fälle übereinstimmt.</param>
      <param name="comparison">Die zu verwendende Methode für den Gleichheitsvergleich.</param>
      <param name="cases">Der Satz von Fällen für diesen Schalterausdruck.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.SwitchExpression" />, die eine switch-Anweisung mit einem Standardfall darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="type">Der Ergebnistyp der Option.</param>
      <param name="switchValue">Der Wert, der für jeden Fall getestet werden soll.</param>
      <param name="defaultBody">Das Ergebnis des Schalters, wenn <paramref name="switchValue" /> mit keinem der Fälle übereinstimmt.</param>
      <param name="comparison">Die zu verwendende Methode für den Gleichheitsvergleich.</param>
      <param name="cases">Der Satz von Fällen für diesen Schalterausdruck.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt ein <see cref="T:System.Linq.Expressions.SwitchCase" />-Objekt, das in einem <see cref="T:System.Linq.Expressions.SwitchExpression" />-Objekt verwendet werden soll.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
      <param name="body">Der Text des Falls.</param>
      <param name="testValues">Die Testwerte des Falls.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.SwitchCase" /> zur Verwendung in einer <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
      <param name="body">Der Text des Falls.</param>
      <param name="testValues">Die Testwerte des Falls.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>Erstellt eine Instanz von <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, deren <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
      <param name="fileName">Eine <see cref="T:System.String" />, auf die die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>Erstellt eine Instanz von <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, bei der die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />-Eigenschaft und die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />-Eigenschaft auf den angegebenen Wert festgelegt sind.</returns>
      <param name="fileName">Eine <see cref="T:System.String" />, auf die die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />-Eigenschaft festgelegt werden soll.</param>
      <param name="language">Eine <see cref="T:System.Guid" />, auf die die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>Erstellt eine Instanz von <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, bei der die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />-Eigenschaft, die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />-Eigenschaft und die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />-Eigenschaft auf den angegebenen Wert festgelegt sind.</returns>
      <param name="fileName">Eine <see cref="T:System.String" />, auf die die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />-Eigenschaft festgelegt werden soll.</param>
      <param name="language">Eine <see cref="T:System.Guid" />, auf die die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />-Eigenschaft festgelegt werden soll.</param>
      <param name="languageVendor">Eine <see cref="T:System.Guid" />, auf die die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Erstellt eine Instanz von <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, bei der die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />Eigenschaft, die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />-Eigenschaft, die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />-Eigenschaft und die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />-Eigenschaft auf den angegebenen Wert festgelegt sind.</returns>
      <param name="fileName">Eine <see cref="T:System.String" />, auf die die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />-Eigenschaft festgelegt werden soll.</param>
      <param name="language">Eine <see cref="T:System.Guid" />, auf die die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />-Eigenschaft festgelegt werden soll.</param>
      <param name="languageVendor">Eine <see cref="T:System.Guid" />, auf die die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />-Eigenschaft festgelegt werden soll.</param>
      <param name="documentType">Eine <see cref="T:System.Guid" />, auf die die <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das erneute Auslösen einer Ausnahme darstellt.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.UnaryExpression" />-Objekt, das die Ausnahme darstellt.</returns>
      <param name="value">Ein <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die das Auslösen einer Ausnahme eines angegebenen Typs darstellt.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.UnaryExpression" />-Objekt, das die Ausnahme darstellt.</returns>
      <param name="value">Ein <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="type">Der neue <see cref="T:System.Type" /> des Ausdrucks.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>Gibt eine Textdarstellung des <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Eine Textdarstellung des <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.TryExpression" />, die einen Try-Block mit einer beliebigen Anzahl von Catch-Anweisungen ohne Fault- und Finally-Block darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">Der Text des Try-Blocks.</param>
      <param name="handlers">Das Array von 0 oder mehr <see cref="T:System.Linq.Expressions.CatchBlock" />-Ausdrücken, die die dem Try-Block zuzuordnenden Catch-Anweisungen darstellen.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.TryExpression" />, die einen Try-Block mit einer beliebigen Anzahl von Catch-Anweisungen und einem Finally-Block darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">Der Text des Try-Blocks.</param>
      <param name="finally">Der Text des Finally-Blocks.</param>
      <param name="handlers">Das Array von 0 oder mehr <see cref="T:System.Linq.Expressions.CatchBlock" />-Ausdrücken, die die dem Try-Block zuzuordnenden Catch-Anweisungen darstellen.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.TryExpression" />, die einen Try-Block mit einem Fault-Block ohne Catch-Anweisungen darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">Der Text des Try-Blocks.</param>
      <param name="fault">Der Text des Fault-Blocks.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.TryExpression" />, die einen Try-Block mit einem Finally-Block ohne Catch-Anweisungen darstellt.</summary>
      <returns>Der erstellte <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">Der Text des Try-Blocks.</param>
      <param name="finally">Der Text des Finally-Blocks.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>Erstellt ein <see cref="P:System.Linq.Expressions.Expression.Type" />-Objekt, das einen generischen System.Action-Delegattyp mit bestimmten Typargumenten darstellt.</summary>
      <returns>true, wenn ein generischer System.Action-Delegattyp für bestimmte <paramref name="typeArgs" /> erstellt wurde, andernfalls false.</returns>
      <param name="typeArgs">Ein Array von Type-Objekten, die die Typargumente für den System.Action-Delegattyp angeben.</param>
      <param name="actionType">Enthält nach dem Beenden dieser Methode den generischen System.Action-Delegattyp mit bestimmten Typargumenten.Enthält NULL, wenn kein generischer System.Action-Delegat vorhanden ist, der <paramref name="typeArgs" /> entspricht. Dieser Parameter wird nicht initialisiert.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>Erstellt ein <see cref="P:System.Linq.Expressions.Expression.Type" />-Objekt, das einen generischen System.Func-Delegattyp mit bestimmten Typargumenten darstellt.Das letzte Typargument gibt den Rückgabetyp des erstellten Delegaten an.</summary>
      <returns>true, wenn ein generischer System.Func-Delegattyp für bestimmte <paramref name="typeArgs" /> erstellt wurde, andernfalls false.</returns>
      <param name="typeArgs">Ein Array von Type-Objekten, die die Typargumente für den System.Func-Delegattyp angeben.</param>
      <param name="funcType">Enthält nach dem Beenden dieser Methode den generischen System.Func-Delegattyp mit bestimmten Typargumenten.Enthält NULL, wenn kein generischer System.Func-Delegat vorhanden ist, der <paramref name="typeArgs" /> entspricht. Dieser Parameter wird nicht initialisiert.</param>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="T:System.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine explizite Verweis- oder Boxingkonvertierung darstellt, bei der null zurückgegeben wird, wenn bei der Konvertierung ein Fehler auftritt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> und <see cref="P:System.Linq.Expressions.Expression.Type" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <param name="type">Eine <see cref="T:System.Type" />, auf die die <see cref="P:System.Linq.Expressions.Expression.Type" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="type" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />, die die Laufzeittypidentität vergleicht.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> ist und die Eigenschaften <see cref="T:System.Linq.Expressions.Expression" /> und <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="T:System.Linq.Expressions.Expression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="type">Eine <see cref="P:System.Linq.Expressions.Expression.Type" />, auf die die <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />-Eigenschaft festgelegt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> und <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />-Eigenschaft festgelegt werden soll.</param>
      <param name="type">Eine <see cref="P:System.Linq.Expressions.Expression.Type" />, auf die die <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> oder <paramref name="type" /> ist null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine unäre Plusoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> ist und die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft auf den angegebenen Wert festgelegt ist.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Der unäre Plus-Operator ist für <paramref name="expression" />.Type nicht definiert.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die eine unäre Plusoperation darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, bei der die <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft gleich <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> ist und die Eigenschaften <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> und <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> auf die angegebenen Werte festgelegt sind.</returns>
      <param name="expression">Eine <see cref="T:System.Linq.Expressions.Expression" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft festgelegt werden soll.</param>
      <param name="method">Eine <see cref="T:System.Reflection.MethodInfo" />, auf die die <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />-Eigenschaft festgelegt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> ist nicht null, und die dadurch dargestellte Methode gibt void zurück, ist nicht static (Shared in Visual Basic) oder akzeptiert nicht genau ein Argument.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> ist null, und der unäre Plus-Operator ist für <paramref name="expression" />.Type nicht definiert.- oder -<paramref name="expression" />.Type (oder, sofern der Typ NULL-Werte zulässt, der entsprechende Typ, der keine NULL-Werte zulässt) kann nicht dem Argumenttyp der durch <paramref name="method" /> dargestellten Methode zugeordnet werden.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>Erstellt eine <see cref="T:System.Linq.Expressions.UnaryExpression" />, die ein explizites Unboxing darstellt.</summary>
      <returns>Eine Instanz von <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Ein <see cref="T:System.Linq.Expressions.Expression" />, auf die Unboxing angewendet werden soll.</param>
      <param name="type">Der neue <see cref="T:System.Type" /> des Ausdrucks.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.ParameterExpression" />-Knoten, der verwendet werden kann, um einen Parameter oder eine Variable in einer Ausdrucksbaumstruktur zu identifizieren.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.ParameterExpression" />-Knoten mit dem angegebenen Namen und Typ.</returns>
      <param name="type">Der Typ des Parameters oder der Variablen.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>Erstellt einen <see cref="T:System.Linq.Expressions.ParameterExpression" />-Knoten, der verwendet werden kann, um einen Parameter oder eine Variable in einer Ausdrucksbaumstruktur zu identifizieren.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.ParameterExpression" />-Knoten mit dem angegebenen Namen und Typ.</returns>
      <param name="type">Der Typ des Parameters oder der Variablen.</param>
      <param name="name">Der Name des Parameters oder der Variablen.Dieser Name wird nur zum Debugging oder Drucken verwendet.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Reduziert den Knoten und ruft dann den Visitor-Delegaten für den reduzierten Ausdruck auf.Die Methode löst eine Ausnahme aus, wenn der Knoten nicht reduziert werden kann.</summary>
      <returns>Der besuchte Ausdruck oder ein Ausdruck, durch den der Ausdruck in der Struktur ersetzt werden soll.</returns>
      <param name="visitor">Eine Instanz von <see cref="T:System.Func`2" />.</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>Stellt einen stark typisierten Lambda-Ausdruck als Datenstruktur in Form einer Ausdrucksbaumstruktur dar.Diese Klasse kann nicht geerbt werden.</summary>
      <typeparam name="TDelegate">Der Typ des Delegaten, den die <see cref="T:System.Linq.Expressions.Expression`1" /> darstellt.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>Kompiliert den von der Ausdrucksbaumstruktur beschriebenen Lambda-Ausdruck in ausführbaren Code und erzeugt einen Delegaten, der den Lambda-Ausdruck darstellt.</summary>
      <returns>Ein Delegat vom Typ <paramref name="TDelegate" />, der den von der <see cref="T:System.Linq.Expressions.Expression`1" /> beschriebenen kompilierten Lambda-Ausdruck darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="body">Die <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />-Eigenschaft des Ergebnisses.</param>
      <param name="parameters">Die <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />-Eigenschaft des Ergebnisses. </param>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>Beschreibt die Knotentypen für die Knoten in einer Ausdrucksbaumstruktur.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>Eine Additionsoperation wie a + b ohne Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>Eine Additionsverbundzuweisung wie (a += b) ohne Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>Eine Additionsverbundzuweisung wie (a += b) mit Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>Eine Additionsoperation wie (a + b) mit Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>Eine bitweise oder logische AND-Operation wie (a &amp; b) in C# und (a And b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>Eine bedingte AND-Operation, bei der der zweite Operand nur ausgewertet wird, wenn der erste Operand zu true ausgewertet wird.Entspricht (a &amp;&amp; b) in C# und (a AndAlso b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>Eine zusammengesetzte bitweise oder logische AND-Zuweisungsoperation wie (a &amp;= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>Ein Indizierungsvorgang in einem eindimensionalen Array wie array[index] in C# oder array(index) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>Ein Vorgang, bei dem die Länge eines eindimensionalen Arrays wie array.Length abgerufen wird.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>Eine Zuweisungsoperation wie (a = b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>Ein Block von Ausdrücken.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>Ein Methodenaufruf wie im obj.sampleMethod()-Ausdruck.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>Ein Knoten, der eine NULL-Zusammenführungsoperation wie (a ?? b) in C# oder If(a, b) in Visual Basic darstellt.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>Eine bedingte Operation wie a &gt; b ? a : b in C# oder If(a &gt; b, a, b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>Ein Konstantenwert.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>Ein Umwandlungs- oder Konvertierungsvorgang wie (SampleType)obj in C#oder CType(obj, SampleType) in Visual Basic.Wenn der konvertierte Wert zu groß für den Zieltyp ist, wird bei einer numerischen Konvertierung keine Ausnahme ausgelöst.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>Ein Umwandlungs- oder Konvertierungsvorgang wie (SampleType)obj in C#oder CType(obj, SampleType) in Visual Basic.Wenn der konvertierte Wert nicht zum Zieltyp passt, wird bei einer numerischen Konvertierung eine Ausnahme ausgelöst.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>Debuginformationen.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>Eine unäre Dekrementoperation wie (a - 1) in C# und Visual Basic.Das Objekt a sollte nicht direkt bearbeitet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>Ein Standardwert.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>Eine Division, z. B. (a / b), für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>Eine Divisionsverbundzuweisungsoperation, z. B. (a /= b), für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>Ein dynamischer Vorgang.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>Ein Knoten, der einen Gleichheitsvergleich wie (a == b) in C# oder (a = b) in Visual Basic darstellt.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>Eine bitweise oder logische XOR-Operation wie (a ^ b) in C# oder (a Xor b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>Eine zusammengesetzte bitweise oder logische XOR-Zuweisungsoperation wie (a ^= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>Ein Erweiterungsausdruck.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>Ein "Go to"-Ausdruck wie goto Label in C# oder GoTo Label in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>Ein "größer als"-Vergleich wie (a &gt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>Ein "größer oder gleich"-Vergleich wie (a &gt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>Eine unäre Inkrementoperation wie (a + 1) in C# und Visual Basic.Das Objekt a sollte nicht direkt bearbeitet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>Eine Indexoperation oder eine Operation, die auf eine Eigenschaft zugreift, die Argumente akzeptiert. </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>Eine Operation, die einen Delegaten oder einen Lambda-Ausdruck aufruft, z. B. sampleDelegate.Invoke().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>Ein false-Bedingungswert.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>Ein true-Bedingungswert.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>Eine Bezeichnung.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>Ein Lambda-Ausdruck wie a =&gt; a + a in C# oder Function(a) a + a in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>Eine bitweise Linksschiebeoperation wie (a &lt;&lt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>Eine bitweise zusammengesetzte Linksschiebezuweisung wie (a &lt;&lt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>Ein "kleiner als"-Vergleich wie (a &lt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>Ein "kleiner oder gleich"-Vergleich wie (a &lt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>Ein Vorgang, bei dem ein neues <see cref="T:System.Collections.IEnumerable" />-Objekt erstellt und aus einer Liste von Elementen initialisiert wird, wie new List&lt;SampleType&gt;(){ a, b, c } in C# oder Dim sampleList = { a, b, c } in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>Eine Schleife wie for oder while.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>Ein Vorgang, bei dem aus einem Feld oder einer Eigenschaft gelesen wird, z. B. obj.SampleProperty.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>Eine Operation, die ein neues Objekt erstellt und einen oder mehrere Member initialisiert, z. B. new Point { X = 1, Y = 2 } in C# oder New Point With {.X = 1, .Y = 2} in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>Eine arithmetische Restoperation wie (a % b) in C# oder (a Mod b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>Eine arithmetische zusammengesetzte Restzuweisungsoperation wie (a %= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>Eine Multiplikationsoperation wie (a * b) ohne Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>Eine Multiplikationsverbundzuweisung wie (a *= b) ohne Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>Eine Multiplikationsverbundzuweisung wie (a *= b) mit Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>Eine Multiplikationsoperation wie (a * b) mit Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>Eine arithmetische Negationsoperation wie (-a).Das Objekt a sollte nicht direkt bearbeitet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>Eine arithmetische Negationsoperation wie (-a) mit Überlaufüberprüfung.Das Objekt a sollte nicht direkt bearbeitet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>Ein Vorgang, bei dem ein Konstruktor aufgerufen wird, um ein neues Objekt wie new SampleType() zu erstellen.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>Ein Vorgang, bei dem ein neues Array erstellt wird, in dem die Grenzen für jede Dimension definiert sind, wie new SampleType[dim1, dim2] in C# oder New SampleType(dim1, dim2) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>Ein Vorgang, bei dem ein neues eindimensionales Array erstellt und aus einer Liste von Elementen initialisiert wird, wie new SampleType[]{a, b, c} in C# oder New SampleType(){a, b, c} in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>Eine bitweise Komplement- oder logische Negationsoperation.In C# entspricht dies (~a) für ganzzahlige Typen und (!a) für boolesche Werte.Die Entsprechung in Visual Basic ist (Not a).Das Objekt a sollte nicht direkt bearbeitet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>Ein Ungleichheitsvergleich wie (a != b) in C# oder (a &lt;&gt; b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>Eine Ones-Komplementoperation wie (~a) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>Eine bitweise oder logische OR-Operation wie (a | b) in C# oder (a Or b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>Eine zusammengesetzte bitweise oder logische OR-Zuweisung wie (a |= b) in C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>Eine verkürzte bedingte OR-Operation wie (a || b) in C# oder (a OrElse b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>Ein Verweis auf einen Parameter oder eine Variable, der bzw. die im Kontext des Ausdrucks definiert ist.Weitere Informationen finden Sie unter <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>Ein unäres Postfixdekrement wie (a--).Das Objekt a sollte direkt bearbeitet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>Ein unäres Postfixinkrement wie (a++).Das Objekt a sollte direkt bearbeitet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>Eine mathematische Operation, bei der eine Zahl potenziert wird, wie (a ^ b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>Eine zusammengesetzte Zuweisungsoperation, bei der eine Zahl potenziert wird, wie (a ^= b) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>Ein unäres Präfixdekrement wie (--a).Das Objekt a sollte direkt bearbeitet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>Ein unäres Präfixinkrement wie (++a).Das Objekt a sollte direkt bearbeitet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>Ein Ausdruck mit einem Konstantenwert vom Typ <see cref="T:System.Linq.Expressions.Expression" />.Ein <see cref="F:System.Linq.Expressions.ExpressionType.Quote" />-Knoten kann Verweise auf Parameter enthalten, die im Kontext des Ausdrucks definiert sind, den der Knoten darstellt.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>Eine bitweise Rechtsschiebeoperation wie (a &gt;&gt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>Eine bitweise zusammengesetzte Rechtsschiebe-Zuweisungsoperation wie (a &gt;&gt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>Eine Liste von Laufzeitvariablen.Weitere Informationen finden Sie unter <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>Eine Subtraktionsoperation wie (a - b) ohne Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>Eine Subtraktionsverbundzuweisung wie (a -= b) ohne Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>Eine Subtraktionsverbundzuweisung wie (a -= b) mit Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>Eine arithmetische Subtraktionsoperation wie (a - b) mit Überlaufüberprüfung für numerische Operanden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>Ein Wechselvorgang wie switch in C# oder Select Case in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>Eine Operation, die eine Ausnahme auslöst, z. B. throw new Exception().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>Ein try-catch-Ausdruck.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>Eine explizite Verweis- oder Boxing-Konvertierung, bei der null angegeben wird, wenn die Konvertierung fehlschlägt, wie (obj as SampleType) in C# oder TryCast(obj, SampleType) in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>Ein genauer Typtest.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>Ein Typtest wie obj is SampleType in C# oder TypeOf obj is SampleType in Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>Eine unäre Plusoperation wie (+a).Das Ergebnis einer unären Plusoperation ist einfach der Wert des Operanden. In benutzerdefinierten Implementierungen können jedoch außergewöhnliche Ergebnisse erzeugt werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>Eine Unboxing-Werttypoperation wie die unbox-Anweisung und die unbox.any-Anweisung in MSIL. </summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>Stellt einen Besucher oder Bearbeiter für Ausdrucksbaumstrukturen dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Linq.Expressions.ExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>Sendet die Liste der Ausdrücke an eine der spezialisierteren Besuchsmethoden in dieser Klasse.</summary>
      <returns>Die geänderte Liste der Ausdrücke, wenn eines der Elemente geändert wurde. Andernfalls wird die ursprüngliche Liste der Ausdrücke zurückgegeben.</returns>
      <param name="nodes">Die Ausdrücke, zu denen gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>Wechselt mit einem angegebenen Elementbesucher zu allen Knoten in der Auflistung.</summary>
      <returns>Die geänderte Knotenliste, wenn eines der Elemente geändert wurde, andernfalls wird die ursprüngliche Knotenliste zurückgegeben.</returns>
      <param name="nodes">Die Knoten, zu denen gewechselt werden soll.</param>
      <param name="elementVisitor">Ein Delegat, der ein einzelnes Element besucht und dieses (optional) durch ein neues Element ersetzt.</param>
      <typeparam name="T">Der Typ der Knoten.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>Sendet den Ausdruck an eine der spezialisierteren Besuchsmethoden in dieser Klasse.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>Wechselt zu einem Ausdruck und wandelt das Ergebnis zurück in den ursprünglichen Ausdruckstyp um.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="nodes">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <param name="callerName">Der Name der aufrufenden Methode. Dieser wird für die Ausgabe einer besseren Fehlermeldung verwendet.</param>
      <typeparam name="T">Der Typ des Ausdrucks.</typeparam>
      <exception cref="T:System.InvalidOperationException">Die Besuchsmethode für diesen Knoten hat einen anderen Typ zurückgegeben.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>Wechselt zu einem Ausdruck und wandelt das Ergebnis zurück in den ursprünglichen Ausdruckstyp um.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <param name="callerName">Der Name der aufrufenden Methode. Dieser wird für die Ausgabe einer besseren Fehlermeldung verwendet.</param>
      <typeparam name="T">Der Typ des Ausdrucks.</typeparam>
      <exception cref="T:System.InvalidOperationException">Die Besuchsmethode für diesen Knoten hat einen anderen Typ zurückgegeben.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.BinaryExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.BlockExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.CatchBlock" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.ConditionalExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>Wechselt zur <see cref="T:System.Linq.Expressions.ConstantExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>Wechselt zur <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>Wechselt zur <see cref="T:System.Linq.Expressions.DefaultExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.ElementInit" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>Wechselt zu den untergeordneten Elementen des Erweiterungsausdrucks.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.IndexExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.InvocationExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.LabelExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>Wechselt zur <see cref="T:System.Linq.Expressions.LabelTarget" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.Expression`1" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
      <typeparam name="T">Der Typ des Delegaten.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.ListInitExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.LoopExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.MemberExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.MemberAssignment" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.MemberListBinding" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.MemberMemberBinding" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.NewExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.NewArrayExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>Wechselt zur <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.SwitchCase" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.TryExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>Wechselt zu den untergeordneten Elementen der <see cref="T:System.Linq.Expressions.UnaryExpression" />.</summary>
      <returns>Der geänderte Ausdruck, wenn dieser oder einer seiner Teilausdrücke geändert wurde. Andernfalls wird der ursprüngliche Ausdruck zurückgegeben.</returns>
      <param name="node">Der Ausdruck, zu dem gewechselt werden soll.</param>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>Stellt einen bedingungslosen Sprung dar.Hierzu zählen return-Anweisungen, break- und continue-Anweisungen sowie andere Sprünge.</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>Die Art des "Gehe zu"-Ausdrucks.Dient nur zu Informationszwecken.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.GotoExpressionKind" />-Objekt, das die Art des "Gehe zu"-Ausdrucks darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der diesen Ausdruck darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>Die Zielmarke, zu der von diesem Knoten gewechselt wird.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.LabelTarget" />-Objekt, das die Zielmarke für diesen Knoten darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.GotoExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="target">Die <see cref="P:System.Linq.Expressions.GotoExpression.Target" />-Eigenschaft des Ergebnisses. </param>
      <param name="value">Die <see cref="P:System.Linq.Expressions.GotoExpression.Value" />-Eigenschaft des Ergebnisses. </param>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>Der an das Ziel übergebene Wert oder NULL, wenn das Ziel vom Typ System.Void ist.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.Expression" />-Objekt, das den an das Ziel übergebenen Wert darstellt, oder NULL.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>Gibt an, welche Art von Sprung diese <see cref="T:System.Linq.Expressions.GotoExpression" /> darstellt.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine break-Anweisung darstellt.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine continue-Anweisung darstellt.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die einen Sprung zu einer Position darstellt.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>Eine <see cref="T:System.Linq.Expressions.GotoExpression" />, die eine return-Anweisung darstellt.</summary>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>Stellt das Indizieren einer Eigenschaft oder eines Arrays dar.</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>Ruft die Argumente ab, mit denen die Eigenschaft oder das Array indiziert wird.</summary>
      <returns>Die schreibgeschützte Auflistung, die die Argumente enthält, mit denen die Eigenschaft oder das Array indiziert wird.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>Ruft die <see cref="T:System.Reflection.PropertyInfo" /> für die Eigenschaft ab, wenn der Ausdruck eine indizierte Eigenschaft darstellt. Andernfalls wird NULL zurückgegeben.</summary>
      <returns>Die <see cref="T:System.Reflection.PropertyInfo" /> für die Eigenschaft, wenn der Ausdruck eine indizierte Eigenschaft darstellt, andernfalls NULL.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der diesen Ausdruck darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>Ein zu indizierendes Objekt.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.Expression" />, der das zu indizierende Objekt darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.IndexExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="object">Die <see cref="P:System.Linq.Expressions.IndexExpression.Object" />-Eigenschaft des Ergebnisses.</param>
      <param name="arguments">Die <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>Stellt einen Ausdruck dar, der einen Delegaten oder einen Lambda-Ausdruck auf eine Liste von Argumentausdrücken anwendet.</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>Ruft die Argumente ab, auf die der Delegat oder Lambda-Ausdruck angewendet wird.</summary>
      <returns>Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, die die Argumente darstellen, auf die der Delegat angewendet wird.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>Ruft den Delegaten oder Lambda-Ausdruck ab, der angewendet werden soll.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.Expression" />, der den anzuwendenden Delegaten darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück.Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> zurückgeben, wenn diese Methode überschrieben wird.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="expression">Die <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" />-Eigenschaft des Ergebnisses.</param>
      <param name="arguments">Die <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>Stellt eine Bezeichnung dar, die in einen beliebigen <see cref="T:System.Linq.Expressions.Expression" />-Kontext platziert werden kann.Bei einem Sprung in die Bezeichnung wird der durch den entsprechenden <see cref="T:System.Linq.Expressions.GotoExpression" /> angegebene Wert abgerufen.Andernfalls wird der Wert in <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> empfangen.Wenn der <see cref="T:System.Type" /> gleich System.Void ist, darf kein Wert angegeben werden.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>Der Wert des <see cref="T:System.Linq.Expressions.LabelExpression" />, wenn die Bezeichnung durch die reguläre Ablaufsteuerung (und z. B. nicht durch einen Sprung) erreicht wird.</summary>
      <returns>Das Expression-Objekt, das den Wert des <see cref="T:System.Linq.Expressions.LabelExpression" /> darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der diesen Ausdruck darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>Das <see cref="T:System.Linq.Expressions.LabelTarget" />, dem die Bezeichnung zugeordnet ist.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.LabelTarget" />, dem die Bezeichnung zugeordnet ist.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.LabelExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="target">Die <see cref="P:System.Linq.Expressions.LabelExpression.Target" />-Eigenschaft des Ergebnisses.</param>
      <param name="defaultValue">Die <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>Stellt das Ziel einer <see cref="T:System.Linq.Expressions.GotoExpression" /> dar.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>Ruft den Namen der Bezeichnung ab.</summary>
      <returns>Der Name der Sprungmarke.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>Gibt einen <see cref="T:System.String" /> zurück, der den aktuellen <see cref="T:System.Object" /> darstellt.</summary>
      <returns>Ein <see cref="T:System.String" />, der das aktuelle <see cref="T:System.Object" /> darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>Der Typ des beim Springen zur Bezeichnung übergebenen Werts (oder <see cref="T:System.Void" />, wenn kein Wert übergeben werden soll).</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Typ des beim Springen zur Bezeichnung übergebenen Werts darstellt, oder <see cref="T:System.Void" />, wenn kein Wert übergeben werden soll.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>Beschreibt einen Lambda-Ausdruck.Zeichnet einen Codeblock auf, der mit einem .NET-Methodentext vergleichbar ist.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>Ruft den Text des Lambda-Ausdrucks ab.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.Expression" />, der den Text des Lambda-Ausdrucks darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>Erzeugt einen Delegaten, der den Lambda-Ausdruck darstellt.</summary>
      <returns>Ein <see cref="T:System.Delegate" />, das die kompilierte Version des Lambda-Ausdrucks enthält.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>Ruft den Namen des Lambda-Ausdrucks ab.</summary>
      <returns>Der Name des Lambda-Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der diesen Ausdruck darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>Ruft die Parameter des Lambda-Ausdrucks ab.</summary>
      <returns>Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> von <see cref="T:System.Linq.Expressions.ParameterExpression" />-Objekten, die die Parameter des Lambda-Ausdrucks darstellen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>Ruft den Rückgabetyp des Lambda-Ausdrucks ab.</summary>
      <returns>Das <see cref="T:System.Type" />-Objekt, das den Typ des Lambda-Ausdrucks darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>Ruft den Wert ab, der angibt, ob der Lambda-Ausdruck mit der Endeaufrufoptimierung kompiliert wird.</summary>
      <returns>True, wenn der Lambda-Ausdruck mit der Endeaufrufoptimierung kompiliert wird, andernfalls false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>Stellt einen Konstruktoraufruf dar, der einen Auflistungsinitialisierer aufweist.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>Ruft einen Wert ab, der angibt, ob der Knoten der Ausdrucksbaumstruktur reduziert werden kann.</summary>
      <returns>True, wenn der Knoten reduziert werden kann, andernfalls False.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>Ruft die Elementinitialisierer ab, die zum Initialisieren einer Auflistung verwendet werden.</summary>
      <returns>Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> von <see cref="T:System.Linq.Expressions.ElementInit" />-Objekten, die die Elemente darstellen, die zum Initialisieren der Auflistung verwendet werden.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>Ruft den Ausdruck ab, der einen Aufruf des Konstruktors für einen Auflistungstyp enthält.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.NewExpression" />, die den Aufruf des Konstruktors für einen Auflistungstyp darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der diesen Ausdruck darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>Reduziert auf den binären Ausdrucksknoten auf einen einfacheren Ausdruck.</summary>
      <returns>Der reduzierte Ausdruck.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="newExpression">Die <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />-Eigenschaft des Ergebnisses.</param>
      <param name="initializers">Die <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>Stellt eine Endlosschleife dar.Diese kann mit "break" beendet werden.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>Ruft den <see cref="T:System.Linq.Expressions.Expression" /> ab, der den Text der Schleife darstellt.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.Expression" />, der den Text der Schleife darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>Ruft das <see cref="T:System.Linq.Expressions.LabelTarget" /> ab, das vom Schleifentext als Ziel der break-Anweisung verwendet wird.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.LabelTarget" />, das vom Schleifentext als Ziel der break-Anweisung verwendet wird.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>Ruft das <see cref="T:System.Linq.Expressions.LabelTarget" /> ab, das vom Schleifentext als Ziel der continue-Anweisung verwendet wird.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.LabelTarget" />, das vom Schleifentext als Ziel der continue-Anweisung verwendet wird.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück.Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> zurückgeben, wenn diese Methode überschrieben wird.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.LoopExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="breakLabel">Die <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" />-Eigenschaft des Ergebnisses.</param>
      <param name="continueLabel">Die <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" />-Eigenschaft des Ergebnisses.</param>
      <param name="body">Die <see cref="P:System.Linq.Expressions.LoopExpression.Body" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>Stellt die Zuweisungsoperation für ein Feld oder eine Eigenschaft eines Objekts dar.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>Ruft den Ausdruck ab, der dem Feld oder der Eigenschaft zugewiesen werden soll.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.Expression" />, der den Wert darstellt, der dem Feld oder der Eigenschaft zugewiesen werden soll.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="expression">Die <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>Stellt die Basisklasse dar, von der die Klassen abgeleitet werden, die Bindungen darstellen, die zum Initialisieren von Membern eines neu erstellten Objekts verwendet werden.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Linq.Expressions.MemberBinding" />-Klasse.</summary>
      <param name="type">Der <see cref="T:System.Linq.Expressions.MemberBindingType" />, der den dargestellten Bindungstyp von anderen unterscheidet.</param>
      <param name="member">Die <see cref="T:System.Reflection.MemberInfo" />, die ein zu initialisierendes Feld oder eine zu initialisierende Eigenschaft darstellt.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>Ruft den dargestellten Bindungstyp ab.</summary>
      <returns>Einer der <see cref="T:System.Linq.Expressions.MemberBindingType" />-Werte.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>Ruft das zu initialisierende Feld oder die zu initialisierende Eigenschaft ab.</summary>
      <returns>Die <see cref="T:System.Reflection.MemberInfo" />, die das zu initialisierende Feld oder die zu initialisierende Eigenschaft darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>Gibt eine Textdarstellung des <see cref="T:System.Linq.Expressions.MemberBinding" /> zurück.</summary>
      <returns>Eine Textdarstellung des <see cref="T:System.Linq.Expressions.MemberBinding" />.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>Beschreibt die Bindungstypen, die in <see cref="T:System.Linq.Expressions.MemberInitExpression" />-Objekten verwendet werden.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>Eine Bindung, die das Initialisieren eines Members mit dem Wert eines Ausdrucks darstellt.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>Eine Bindung, die das Initialisieren eines Members vom Typ <see cref="T:System.Collections.IList" /> oder <see cref="T:System.Collections.Generic.ICollection`1" /> von einer Liste von Elementen darstellt.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>Eine Bindung, die das rekursive Initialisieren von Membern eines Members darstellt.</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>Stellt den Zugriff auf ein Feld oder eine Eigenschaft dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp.Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /><see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>Ruft das enthaltende Objekt des Felds oder der Eigenschaft ab.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.Expression" />, der das enthaltende Objekt des Felds oder der Eigenschaft darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>Ruft das Feld oder die Eigenschaft ab, auf das bzw. die zugegriffen werden soll.</summary>
      <returns>Die <see cref="T:System.Reflection.MemberInfo" />, die das Feld oder die Eigenschaft darstellt, auf das bzw. die zugegriffen werden soll.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der diesen Ausdruck darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="expression">Die <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>Stellt das Aufrufen eines Konstruktors und Initialisieren eines oder mehrerer Member des neuen Objekts dar.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>Ruft die Bindungen ab, die beschreiben, wie die Member des neu erstellten Objekts initialisiert werden.</summary>
      <returns>Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> von <see cref="T:System.Linq.Expressions.MemberBinding" />-Objekten, die beschreiben, wie die Member initialisiert werden.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>Ruft einen Wert ab, der angibt, ob der Knoten der Ausdrucksbaumstruktur reduziert werden kann.</summary>
      <returns>True, wenn der Knoten reduziert werden kann, andernfalls False.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>Ruft den Ausdruck ab, der den Konstruktoraufruf darstellt.</summary>
      <returns>Eine <see cref="T:System.Linq.Expressions.NewExpression" />, die den Konstruktoraufruf darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück.Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> zurückgeben, wenn diese Methode überschrieben wird.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>Reduziert <see cref="T:System.Linq.Expressions.MemberInitExpression" /> auf einen einfacheren Ausdruck. </summary>
      <returns>Der reduzierte Ausdruck.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="newExpression">Die <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />-Eigenschaft des Ergebnisses.</param>
      <param name="bindings">Die <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>Stellt das Initialisieren der Elemente eines Auflistungsmembers für ein neu erstelltes Objekt dar.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>Ruft die Elementinitialisierer zum Initialisieren eines Auflistungsmembers für ein neu erstelltes Objekt ab.</summary>
      <returns>Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> von <see cref="T:System.Linq.Expressions.ElementInit" />-Objekten zum Initialisieren eines Auflistungsmembers.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="initializers">Die <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>Stellt initialisierende Member eines Members für ein neu erstelltes Objekt dar.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>Ruft die Bindungen ab, die beschreiben, wie die Member eines Members initialisiert werden.</summary>
      <returns>Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> von <see cref="T:System.Linq.Expressions.MemberBinding" />-Objekten, die beschreiben, wie die Member des Members initialisiert werden.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="bindings">Die <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>Stellt einen Aufruf einer statischen Methode oder einer Instanzmethode dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp.Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /><see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>Ruft eine Auflistung von Ausdrücken ab, die Argumente der aufgerufenen Methode darstellen.</summary>
      <returns>Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, die die Argumente für die aufgerufene Methode darstellen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>Ruft die <see cref="T:System.Reflection.MethodInfo" /> für die aufzurufende Methode ab.</summary>
      <returns>Die <see cref="T:System.Reflection.MethodInfo" />, die die aufgerufene Methode darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der diesen Ausdruck darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>Ruft den <see cref="T:System.Linq.Expressions.Expression" /> ab, der die Instanz für Instanzmethodenaufrufe oder NULL für statische Methodenaufrufe darstellt.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.Expression" />, der das empfangende Objekt der Methode darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="object">Die <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />-Eigenschaft des Ergebnisses.</param>
      <param name="arguments">Die <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>Stellt das Erstellen eines neuen Arrays und möglicherweise das Initialisieren der Elemente im neuen Array dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp.Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /><see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>Ruft die Grenzen des Arrays ab, wenn der Wert der <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> ist, oder die Werte zum Initialisieren der Elemente im neuen Array, wenn der Wert der <see cref="P:System.Linq.Expressions.Expression.NodeType" />-Eigenschaft <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> ist.</summary>
      <returns>Eine <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, die die Grenzen des Arrays oder aber die Initialisierungswerte darstellen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="expressions">Die <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>Stellt einen Konstruktoraufruf dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp.Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /><see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>Ruft die Argumente für den Konstruktor ab.</summary>
      <returns>Eine Auflistung von <see cref="T:System.Linq.Expressions.Expression" />-Objekten, die die Argumente für den Konstruktor darstellen.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>Ruft den aufgerufenen Konstruktor ab.</summary>
      <returns>Die <see cref="T:System.Reflection.ConstructorInfo" />, die den aufgerufenen Konstruktor darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>Ruft die Member ab, die die Werte der mit Konstruktorargumenten initialisierten Felder abrufen können.</summary>
      <returns>Eine Auflistung von <see cref="T:System.Reflection.MemberInfo" />Objekten, die die Member darstellen, die die Werte der mit Konstruktorargumenten initialisierten Felder abrufen können.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der diesen Ausdruck darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.NewExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="arguments">Die <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>Stellt einen Ausdruck mit einem benannten Parameter dar.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Sendet an die spezifische Visit-Methode für diesen Knotentyp.Beispielsweise ruft <see cref="T:System.Linq.Expressions.MethodCallExpression" /><see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> auf.</summary>
      <returns>Das Ergebnis eines Besuchs dieses Knotens.</returns>
      <param name="visitor">Der Besucher, mit dem dieser Knoten besucht werden soll.</param>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>Gibt an, dass dieser ParameterExpression als ByRef-Parameter behandelt werden soll.</summary>
      <returns>True, wenn dieser ParameterExpression ein ByRef-Parameter ist, andernfalls false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>Ruft den Namen des Parameters oder der Variable ab.</summary>
      <returns>Eine <see cref="T:System.String" />, die den Namen des Parameters enthält.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der diesen Ausdruck darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>Ein Ausdruck, der die Laufzeitberechtigung für Lese-/Schreibzugriff für Variablen bereitstellt.</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück.Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> zurückgeben, wenn diese Methode überschrieben wird.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="variables">Die <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>Die Variablen oder Parameter, auf die Laufzeitzugriff ermöglicht werden soll.</summary>
      <returns>Die schreibgeschützte Auflistung, die Parameter enthält, für die der Laufzeitzugriff ermöglicht wird.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>Stellt einen Fall einer <see cref="T:System.Linq.Expressions.SwitchExpression" /> dar.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>Ruft den Text dieses Falls ab.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.Expression" />-Objekt, das den Text des Fallblocks darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>Ruft die Werte dieses Falls ab.Dieser Fall wird für die Ausführung ausgewählt, wenn der <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> einem dieser Werte entspricht.</summary>
      <returns>Die schreibgeschützte Auflistung der Werte für diesen Fallblock.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>Gibt einen <see cref="T:System.String" /> zurück, der den aktuellen <see cref="T:System.Object" /> darstellt.</summary>
      <returns>Ein <see cref="T:System.String" />, der das aktuelle <see cref="T:System.Object" /> darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="testValues">Die <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" />-Eigenschaft des Ergebnisses.</param>
      <param name="body">Die <see cref="P:System.Linq.Expressions.SwitchCase.Body" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>Stellt einen Steuerausdruck dar, der die Mehrfachauswahl durch das Übergeben der Steuerung an <see cref="T:System.Linq.Expressions.SwitchCase" /> behandelt.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>Ruft die Auflistung der <see cref="T:System.Linq.Expressions.SwitchCase" />-Objekte für die Switch-Anweisung ab.</summary>
      <returns>Die Auflistung von <see cref="T:System.Linq.Expressions.SwitchCase" />-Objekten.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>Ruft die Methode für Vergleichsoperationen auf Gleichheit ab (falls vorhanden).</summary>
      <returns>Das <see cref="T:System.Reflection.MethodInfo" />-Objekt, das die Methode für Vergleichsoperationen auf Gleichheit darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>Ruft den Test für den Schalter ab.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.Expression" />-Objekt, das den Test für den Schalter darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück.Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> zurückgeben, wenn diese Methode überschrieben wird.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>Ruft den Test für den Schalter ab.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.Expression" />-Objekt, das den Test für den Schalter darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="switchValue">Die <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" />-Eigenschaft des Ergebnisses.</param>
      <param name="cases">Die <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" />-Eigenschaft des Ergebnisses.</param>
      <param name="defaultBody">Die <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>Speichert Informationen, die für die Ausgabe von Debugsymbolinformationen für eine Quelldatei erforderlich sind, insbesondere den Dateinamen und den eindeutigen Sprachenbezeichner.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>Gibt den eindeutigen Bezeichner des Dokumenttyps zurück (falls vorhanden).Standardmäßig ist dies die GUID für eine Textdatei.</summary>
      <returns>Der eindeutige Bezeichner des Dokumenttyps.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>Der Name der Quelldatei.</summary>
      <returns>Die Zeichenfolge, die den Namen der Quelldatei darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>Gibt den eindeutigen Bezeichner der Sprache zurück (falls vorhanden).</summary>
      <returns>Der eindeutige Bezeichner der Sprache.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>Gibt den eindeutigen Bezeichner des Sprachenanbieters zurück (falls vorhanden).</summary>
      <returns>Der eindeutige Bezeichner des Sprachenanbieters.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>Stellt einen try/catch/finally/fault-Block dar.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>Ruft den <see cref="T:System.Linq.Expressions.Expression" /> ab, der den Text des try-Blocks darstellt.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.Expression" />, der den Text des try-Blocks darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>Ruft den <see cref="T:System.Linq.Expressions.Expression" /> ab, der den fault-Block darstellt.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.Expression" />, der den fault-Block darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>Ruft den <see cref="T:System.Linq.Expressions.Expression" /> ab, der den finally-Block darstellt.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.Expression" />, der den finally-Block darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>Ruft die Auflistung der <see cref="T:System.Linq.Expressions.CatchBlock" />-Ausdrücke ab, die dem try-Block zugeordnet sind.</summary>
      <returns>Die Auflistung der <see cref="T:System.Linq.Expressions.CatchBlock" />-Ausdrücke, die dem try-Block zugeordnet sind.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der diesen Ausdruck darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.TryExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="body">Die <see cref="P:System.Linq.Expressions.TryExpression.Body" />-Eigenschaft des Ergebnisses.</param>
      <param name="handlers">Die <see cref="P:System.Linq.Expressions.TryExpression.Handlers" />-Eigenschaft des Ergebnisses.</param>
      <param name="finally">Die <see cref="P:System.Linq.Expressions.TryExpression.Finally" />-Eigenschaft des Ergebnisses.</param>
      <param name="fault">Die <see cref="P:System.Linq.Expressions.TryExpression.Fault" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>Stellt eine Operation zwischen einem Ausdruck und einem Typ dar.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>Ruft den Ausdrucksoperanden einer Typtestoperation ab.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.Expression" />, der den Ausdrucksoperanden einer Typtestoperation darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>Gibt den Knotentyp dieses Ausdrucks zurück.Erweiterungsknoten sollten <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> zurückgeben, wenn diese Methode überschrieben wird.</summary>
      <returns>Die <see cref="T:System.Linq.Expressions.ExpressionType" /> des Ausdrucks.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>Ruft den Typoperanden einer Typtestoperation ab.</summary>
      <returns>Ein <see cref="T:System.Type" />, der den Typoperanden einer Typtestoperation darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="expression">Die <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>Stellt einen Ausdruck dar, der einen unären Operator aufweist.</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>Ruft einen Wert ab, der angibt, ob der Knoten der Ausdrucksbaumstruktur reduziert werden kann.</summary>
      <returns>True, wenn ein Knoten reduziert werden kann, andernfalls False.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>Ruft einen Wert ab, der angibt, ob der Ausdrucksstrukturknoten einen transformierten Aufruf eines Operators darstellt.</summary>
      <returns>true, wenn der Knoten einen transformierten Aufruf darstellt, andernfalls false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>Ruft einen Wert ab, der angibt, ob der Ausdrucksstrukturknoten einen transformierten Aufruf eines Operators darstellt, dessen Rückgabetyp zu einem Typ transformiert wird, der NULL-Werte zulässt.</summary>
      <returns>true, wenn der Rückgabetyp des Operators zu einem Typ, der NULL-Werte zulässt, transformiert wird, andernfalls false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>Ruft die implementierende Methode für die unäre Operation ab.</summary>
      <returns>Eine <see cref="T:System.Reflection.MethodInfo" />, die die implementierende Methode darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>Gibt den Knotentyp dieses <see cref="T:System.Linq.Expressions.Expression" /> zurück.</summary>
      <returns>Der <see cref="T:System.Linq.Expressions.ExpressionType" />, der diesen Ausdruck darstellt.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>Ruft den Operanden der unären Operation ab.</summary>
      <returns>Ein <see cref="T:System.Linq.Expressions.Expression" />, der den Operanden der unären Operation darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>Reduziert auf den Ausdrucksknoten auf einen einfacheren Ausdruck. </summary>
      <returns>Der reduzierte Ausdruck.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>Ruft den statischen Typ des Ausdrucks ab, den diese <see cref="T:System.Linq.Expressions.Expression" /> darstellt.</summary>
      <returns>Der <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />, der den statischen Typ des Ausdrucks darstellt.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Erstellt einen neuen Ausdruck wie diesen, verwendet jedoch die angegebenen untergeordneten Elemente.Wenn alle untergeordneten Elemente übereinstimmen, wird der Ausdruck zurückgegeben.</summary>
      <returns>Dieser Ausdruck, wenn keine untergeordneten Elemente geändert werden, oder ein Ausdruck mit den aktualisierten untergeordneten Elementen.</returns>
      <param name="operand">Die <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />-Eigenschaft des Ergebnisses.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>Eine Basisklasse für eine dynamische Aufrufsite.Dieser Typ wird als Parametertyp für die dynamischen Siteziele verwendet.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>Für das Binden von dynamischen Vorgängen auf der dynamischen Site zuständige Klasse.</summary>
      <returns>Das für das Binden von dynamischen Vorgängen zuständige <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />-Objekt.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Erstellt eine Aufrufsite mit dem angegebenen Delegattyp und Binder.</summary>
      <returns>Die neue aufrufende Site.</returns>
      <param name="delegateType">Der Delegattyp der Aufrufsite.</param>
      <param name="binder">Der Binder der Aufrufsite.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>Typ der dynamischen Site.</summary>
      <typeparam name="T">Der Delegattyp.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Erstellt eine Instanz der dynamischen Aufrufsite, die mit dem für die Laufzeitbindung zuständigen Binder der dynamischen Vorgänge auf dieser Aufrufsite initialisiert wird.</summary>
      <returns>Die neue Instanz der dynamischen Aufrufsite.</returns>
      <param name="binder">Der für die Laufzeitbindung von dynamischen Vorgängen auf dieser Aufrufsite zuständige Binder.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>Der Cache der Ebene 0: Ein auf Grundlage des Siteverlaufs spezialisierter Delegat.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>Der Updatedelegat.Wird aufgerufen, wenn auf der dynamischen Site ein fehlgeschlagener Cachezugriff auftritt.</summary>
      <returns>Der Updatedelegat.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>Die für die Laufzeitbindung von dynamischen Vorgängen auf der dynamischen Aufrufsite zuständige Klasse.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />-Klasse.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Führt die Laufzeitbindung des dynamischen Vorgangs für einen Satz von Argumenten aus.</summary>
      <returns>Ein Ausdruck, der Tests für die Argumente des dynamischen Vorgangs ausführt und den dynamischen Vorgang ausführt, wenn die Testergebnisse gültig sind.Wenn die Tests bei nachfolgenden Instanzen des dynamischen Vorgangs fehlschlagen, wird erneut Bind aufgerufen, um eine neue <see cref="T:System.Linq.Expressions.Expression" /> für die neuen Argumenttypen zu erstellen.</returns>
      <param name="args">Ein Array von Argumenten für den dynamischen Vorgang.</param>
      <param name="parameters">Das Array von <see cref="T:System.Linq.Expressions.ParameterExpression" />-Instanzen, die die Parameter der Aufrufsite im Bindungsprozess darstellen.</param>
      <param name="returnLabel">Ein LabelTarget, mit dem das Ergebnis der dynamischen Bindung zurückgegeben wird.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>Stellt Laufzeitbindungsunterstützung auf niedriger Ebene bereit.Klassen können dies überschreiben und einen direkten Delegaten für die Implementierung der Regel bereitstellen.Hierdurch können Regeln auf dem Datenträger gespeichert, spezialisierte Regeln zur Laufzeit verfügbar gemacht oder unterschiedliche Cachingrichtlinien bereitgestellt werden.</summary>
      <returns>Ein neuer Delegat, der das CallSite-Ziel ersetzt.</returns>
      <param name="site">Die CallSite, für die die Bindung ausgeführt wird.</param>
      <param name="args">Die Argumente für den Binder.</param>
      <typeparam name="T">Der Zieltyp der CallSite.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>Fügt dem Cache von bekannten Zielen ein Ziel hinzu.Die zwischengespeicherten Ziele werden vor dem Aufrufen von BindDelegate zum Erstellen der neuen Regel überprüft.</summary>
      <param name="target">Der Zieldelegat, der dem Cache hinzugefügt werden soll.</param>
      <typeparam name="T">Der Typ des Ziels, das hinzugefügt wird.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>Ruft eine Bezeichnung ab, durch die veranlasst werden kann, dass die Bindung aktualisiert wird.Dieser gibt an, dass die Bindung des Ausdrucks nicht mehr gültig ist.Dies wird in der Regel verwendet, wenn die "Version" eines dynamischen Objekts geändert wurde.</summary>
      <returns>Das <see cref="T:System.Linq.Expressions.LabelTarget" />-Objekt, das eine Bezeichnung darstellt, mit der das Bindungsupdate ausgelöst werden kann.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>Klasse, die Hilfsmethoden für DLR-CallSites enthält.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>Überprüft, ob eine <see cref="T:System.Reflection.MethodBase" /> von DLR intern verwendet wird und nicht im Stapel des Sprachcodes angezeigt werden soll.</summary>
      <returns>True, wenn die Eingabe-<see cref="T:System.Reflection.MethodBase" /> von DLR intern verwendet wird und nicht im Stapel des Sprachcodes angezeigt werden soll.Andernfalls false.</returns>
      <param name="mb">Die Eingabe <see cref="T:System.Reflection.MethodBase" /></param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>Gibt an, dass die Verwendung von <see cref="T:System.Object" /> bei einem Member wie ein dynamisch weitergeleiteter Typ behandelt werden soll.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" />-Klasse.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" />-Klasse.</summary>
      <param name="transformFlags">Gibt in einem Präfixdurchlauf der Konstruktion eines Typs an, welche Vorkommen von <see cref="T:System.Object" /> als dynamisch weitergeleiteter Typ behandelt werden sollen.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>Gibt in einem Präfixdurchlauf der Konstruktion eines Typs an, welche Vorkommen von <see cref="T:System.Object" /> als dynamisch weitergeleiteter Typ behandelt werden sollen.</summary>
      <returns>Die Liste der Vorkommen von <see cref="T:System.Object" />, die als dynamisch weitergeleiteter Typ behandelt werden sollen.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExecutionScope">
      <summary>Stellt den Laufzeitzustand einer dynamisch generierten Methode dar.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateDelegate(System.Int32,System.Object[])">
      <summary>Erstellt einen Delegaten, der verwendet werden kann, um eine dynamisch generierte Methode auszuführen.</summary>
      <returns>Ein <see cref="T:System.Delegate" />, der eine dynamisch generierte Methode ausführen kann.</returns>
      <param name="indexLambda">Der Index des Objekts, das Informationen über den zugeordneten Lambda-Ausdruck der dynamischen Methode speichert.</param>
      <param name="locals">Ein Array, das die herausgehobenen lokalen Variablen des übergeordneten Kontexts enthält.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateHoistedLocals">
      <summary>Erstellt ein Array zum Speichern der herausgehobenen lokalen Variablen.</summary>
      <returns>Ein Array zum Speichern der herausgehobenen lokalen Variablen.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Globals">
      <summary>Stellt die nicht trivialen Konstanten und lokal ausführbaren Ausdrücke dar, auf die eine dynamisch generierte Methode verweist.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.IsolateExpression(System.Linq.Expressions.Expression,System.Object[])">
      <summary>Gibt die externen Parameterverweise einer angegebenen Ausdrucksbaumstruktur frei, indem der Parameter durch seinen aktuellen Wert ersetzt wird.</summary>
      <returns>Eine Ausdrucksbaumstruktur, die keine externen Parameterverweise enthält.</returns>
      <param name="expression">Eine Ausdrucksbaumstruktur, deren externe Parameterverweise freigegeben werden sollen.</param>
      <param name="locals">Ein Array, das die herausgehobenen lokalen Variablen enthält.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Locals">
      <summary>Stellt die herausgehobenen lokalen Variablen des übergeordneten Kontexts dar.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Parent">
      <summary>Stellt den Ausführungsbereich des aufrufenden Delegaten dar.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>Definiert eine Eigenschaft für den Zugriff auf den Wert, auf den ein Objekt verweist.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>Ruft den Wert ab, auf den ein Objekt verweist, oder legt diesen fest.</summary>
      <returns>Der Wert, auf den das Objekt verweist.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>Enthält einen Verweis auf einen Wert.</summary>
      <typeparam name="T">Der Typ des Werts, auf den die <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> verweist.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor"></member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />-Klasse mit dem bereitgestellten Wert. </summary>
      <param name="value">Ein Wert, auf den die <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> verweist.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>Ruft den Wert ab oder legt den Wert fest, auf den die <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> verweist.</summary>
      <returns>Der Wert, auf den die <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> verweist.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>Stellt den Wert dar, auf den die <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> verweist.</summary>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>Stellt eine verwaltete Implementierung des symmetrischen AES (Advanced Encryption Standard)-Algorithmus bereit. </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.AesManaged" />-Klasse.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>Erstellt ein symmetrisches Entschlüsselungsobjekt mit dem aktuellen Schlüssel und Initialisierungsvektor (IV).</summary>
      <returns>Ein symmetrisches Entschlüsselungsobjekt.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Erstellt ein symmetrisches Entschlüsselungsobjekt mit dem angegebenen Schlüssel und Initialisierungsvektor (IV).</summary>
      <returns>Ein symmetrisches Entschlüsselungsobjekt.</returns>
      <param name="key">Der geheime Schlüssel, der für den symmetrischen Algorithmus verwendet werden soll.</param>
      <param name="iv">Der Initialisierungsvektor, der für den symmetrischen Algorithmus verwendet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Der Initialisierungsvektor<paramref name=" iv " />ist eine ungültige Größe.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>Erstellt ein symmetrisches Verschlüsselungsobjekt mit dem aktuellen Schlüssel und Initialisierungsvektor (IV).</summary>
      <returns>Ein symmetrisches Verschlüsselungsobjekt.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Erstellt ein symmetrisches Verschlüsselungsobjekt mit dem angegebenen Schlüssel und Initialisierungsvektor (IV).</summary>
      <returns>Ein symmetrisches Verschlüsselungsobjekt.</returns>
      <param name="key">Der geheime Schlüssel, der für den symmetrischen Algorithmus verwendet werden soll.</param>
      <param name="iv">Der Initialisierungsvektor, der für den symmetrischen Algorithmus verwendet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> ist null.</exception>
      <exception cref="T:System.ArgumentException">Der Initialisierungsvektor<paramref name=" iv " />ist eine ungültige Größe.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>Generiert einen zufälligen Initialisierungsvektor (IV) für den symmetrischen Algorithmus.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>Generiert einen zufälligen Schlüssel für den symmetrischen Algorithmus.</summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>Ruft den Initialisierungsvektor (IV) für den symmetrischen Algorithmus ab oder legt diesen fest.</summary>
      <returns>Der Initialisierungsvektor, der für den symmetrischen Algorithmus verwendet wird.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>Ruft den geheimen Schlüssel für den symmetrischen Algorithmus ab oder legt diesen fest.</summary>
      <returns>Der Schlüssel für den symmetrischen Algorithmus.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>Ruft die Größe des geheimen Schlüssels für den symmetrischen Algorithmus in Bits ab oder legt diese fest. </summary>
      <returns>Die Schlüsselgröße für den symmetrischen Algorithmus in Bits.</returns>
    </member>
    <member name="T:System.Threading.LockRecursionPolicy">
      <summary>Gibt an, ob eine Sperre mehrmals dem gleichen Thread zugewiesen werden kann.</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.NoRecursion">
      <summary>Wenn ein Thread rekursiv versucht, eine Sperre zu erhalten, wird eine Ausnahme ausgelöst. Einige Klassen gestatten gewisse Rekursionen, wenn diese Einstellung aktiv ist. </summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.SupportsRecursion">
      <summary>Ein Thread kann rekursiv eine Sperre erhalten. Einige Klassen beschränken diese Möglichkeit einer rekursiven Zuweisung. </summary>
    </member>
    <member name="T:System.Threading.ReaderWriterLockSlim">
      <summary>Stellt eine Sperre dar, mit der der Zugriff auf eine Ressource verwaltet wird. Mehrere Threads können hierbei Lesezugriff oder exklusiven Schreibzugriff erhalten.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.ReaderWriterLockSlim" />-Klasse mit Standardeigenschaftswerten.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Threading.ReaderWriterLockSlim" />-Klasse unter Angabe der Rekursionsrichtlinie für die Sperre.</summary>
      <param name="recursionPolicy">Einer der Enumerationswerte, der die Rekursionsrichtlinie für die Sperre angibt. </param>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount">
      <summary>Ruft die Gesamtzahl von eindeutigen Threads ab, denen die Sperre im Lesemodus zugewiesen ist.</summary>
      <returns>Die Anzahl von eindeutigen Threads, denen die Sperre im Lesemodus zugewiesen ist.</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.Dispose">
      <summary>Gibt alle von der aktuellen Instanz der <see cref="T:System.Threading.ReaderWriterLockSlim" />-Klasse verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterReadLock">
      <summary>Versucht, die Sperre im Lesemodus zu erhalten.</summary>
      <exception cref="T:System.Threading.LockRecursionException">Die <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />-Eigenschaft ist <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, und der aktuelle Thread befindet sich bereits im Lesemodus. - oder -Die Rekursionszahl würde die Kapazität des Zählers übersteigen. Diese Kapazität ist so groß, dass Anwendungen diese Grenze niemals erreichen dürften.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock">
      <summary>Versucht, die Sperre im erweiterbaren Modus zu erhalten.</summary>
      <exception cref="T:System.Threading.LockRecursionException">Die <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />-Eigenschaft ist <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, und dem aktuellen Thread wurde die Sperre bereits in einem der Modi zugewiesen. - oder -Der aktuelle Thread befindet sich im Lesemodus, sodass durch eine Zuweisung des erweiterbaren Modus die Möglichkeit eines Deadlocks entstehen würde. - oder -Die Rekursionszahl würde die Kapazität des Zählers übersteigen. Die Kapazität ist so groß, dass Anwendungen diese Grenze niemals erreichen dürften.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock">
      <summary>Versucht, die Sperre im Schreibmodus zu erhalten.</summary>
      <exception cref="T:System.Threading.LockRecursionException">Die <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />-Eigenschaft ist <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, und dem aktuellen Thread wurde die Sperre bereits in einem der Modi zugewiesen. - oder -Der aktuelle Thread befindet sich im Lesemodus, sodass durch eine Zuweisung des Schreibmodus die Möglichkeit eines Deadlocks entstehen würde. - oder -Die Rekursionszahl würde die Kapazität des Zählers übersteigen. Die Kapazität ist so groß, dass Anwendungen diese Grenze niemals erreichen dürften.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitReadLock">
      <summary>Verringert die Rekursionszahl für den Lesemodus oder beendet den Lesemodus, wenn das Rekursionsergebnis 0 (null) ist.</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">Der aktuelle Thread befindet sich nicht im Lesemodus.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock">
      <summary>Verringert die Rekursionszahl für den erweiterbaren Modus oder beendet den erweiterbaren Modus, wenn das Rekursionsergebnis 0 (null) ist.</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">Der aktuelle Thread befindet sich nicht im erweiterbaren Modus.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock">
      <summary>Verringert die Rekursionszahl für den Schreibmodus oder beendet den Schreibmodus, wenn das Rekursionsergebnis 0 (null) ist.</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">Der aktuelle Thread befindet sich nicht im Schreibmodus.</exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld">
      <summary>Ruft einen Wert ab, der angibt, ob die Sperre dem aktuellen Thread im Lesemodus zugewiesen ist.</summary>
      <returns>true, wenn sich der aktuelle Thread im Lesemodus befindet, andernfalls false.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld">
      <summary>Ruft einen Wert ab, der angibt, ob die Sperre dem aktuellen Thread im erweiterbaren Modus zugewiesen ist. </summary>
      <returns>true, wenn sich der aktuelle Thread im erweiterbaren Modus befindet, andernfalls false.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld">
      <summary>Ruft einen Wert ab, der angibt, ob die Sperre dem aktuellen Thread im Schreibmodus zugewiesen ist.</summary>
      <returns>true, wenn sich der aktuelle Thread im Schreibmodus befindet, andernfalls false.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy">
      <summary>Ruft einen Wert ab, der die Rekursionsrichtlinie für das aktuelle <see cref="T:System.Threading.ReaderWriterLockSlim" />-Objekt angibt.</summary>
      <returns>Einer der Enumerationswerte, der die Rekursionsrichtlinie für die Sperre angibt.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount">
      <summary>Ruft einen Wert ab, der als Indikator für eine Rekursion angibt, wie oft dem aktuellen Thread die Sperre im Lesemodus zugewiesen ist.</summary>
      <returns>0 (null), wenn sich der aktuelle Thread nicht im Lesemodus befindet, 1, wenn sich der Thread im Lesemodus befindet und diesen nicht rekursiv angefordert hat, oder n, wenn der Thread die Sperre n - 1 Mal rekursiv angefordert hat.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount">
      <summary>Ruft einen Wert ab, der als Indikator für eine Rekursion angibt, wie oft dem aktuellen Thread die Sperre im erweiterbaren Modus zugewiesen ist.</summary>
      <returns>0 (null), wenn sich der aktuelle Thread nicht im erweiterbaren Modus befindet, 1, wenn sich der Thread im erweiterbaren Modus befindet und diesen nicht rekursiv angefordert hat, oder n, wenn der Thread die Sperre n - 1 Mal rekursiv angefordert hat.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount">
      <summary>Ruft einen Wert ab, der als Indikator für eine Rekursion angibt, wie oft dem aktuellen Thread die Sperre im Schreibmodus zugewiesen ist.</summary>
      <returns>0 (null), wenn sich der aktuelle Thread nicht im Schreibmodus befindet, 1, wenn sich der Thread im Schreibmodus befindet und diesen nicht rekursiv angefordert hat, oder n, wenn der Thread die Sperre n - 1 Mal rekursiv angefordert hat.</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)">
      <summary>Versucht, die Sperre im Lesemodus zu erhalten. Optional wird ein ganzzahliger Timeout berücksichtigt.</summary>
      <returns>true, wenn sich der aufrufende Thread im Lesemodus befindet, andernfalls false.</returns>
      <param name="millisecondsTimeout">Die Zeit in Millisekunden, die gewartet wird, oder -1 (<see cref="F:System.Threading.Timeout.Infinite" />), um unbegrenzt zu warten.</param>
      <exception cref="T:System.Threading.LockRecursionException">Die <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />-Eigenschaft ist <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, und der aktuelle Thread hat die Sperre bereits erhalten. - oder -Die Rekursionszahl würde die Kapazität des Zählers übersteigen. Die Kapazität ist so groß, dass Anwendungen diese Grenze niemals erreichen dürften.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der Wert von <paramref name="millisecondsTimeout" /> ist negativ, aber ungleich <see cref="F:System.Threading.Timeout.Infinite" /> (-1), der den einzigen zulässigen negativen Wert darstellt. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)">
      <summary>Versucht, die Sperre im Lesemodus zu erhalten. Optional wird ein Timeout berücksichtigt.</summary>
      <returns>true, wenn sich der aufrufende Thread im Lesemodus befindet, andernfalls false.</returns>
      <param name="timeout">Der Zeitintervall bis zum Timeout, oder -1 Millisekunden, um unbegrenzt zu warten. </param>
      <exception cref="T:System.Threading.LockRecursionException">Die <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />-Eigenschaft ist <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, und der aktuelle Thread hat die Sperre bereits erhalten. - oder -Die Rekursionszahl würde die Kapazität des Zählers übersteigen. Die Kapazität ist so groß, dass Anwendungen diese Grenze niemals erreichen dürften.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der Wert von <paramref name="timeout" /> ist negativ, aber ungleich -1 Millisekunden. (Dies ist der einzige zulässige negative Wert.)- oder -Der Wert von <paramref name="timeout" /> ist größer als <see cref="F:System.Int32.MaxValue" /> Millisekunden. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)">
      <summary>Versucht, die Sperre im erweiterbaren Modus zu erhalten. Optional wird ein Timeout berücksichtigt.</summary>
      <returns>true, wenn sich der aufrufende Thread im erweiterbaren Modus befindet, andernfalls false.</returns>
      <param name="millisecondsTimeout">Die Zeit in Millisekunden, die gewartet wird, oder -1 (<see cref="F:System.Threading.Timeout.Infinite" />), um unbegrenzt zu warten.</param>
      <exception cref="T:System.Threading.LockRecursionException">Die <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />-Eigenschaft ist <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, und der aktuelle Thread hat die Sperre bereits erhalten. - oder -Der aktuelle Thread befindet sich bereits im Lesemodus, sodass durch eine Zuweisung des erweiterbaren Modus die Möglichkeit eines Deadlocks entstehen würde. - oder -Die Rekursionszahl würde die Kapazität des Zählers übersteigen. Die Kapazität ist so groß, dass Anwendungen diese Grenze niemals erreichen dürften.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der Wert von <paramref name="millisecondsTimeout" /> ist negativ, aber ungleich <see cref="F:System.Threading.Timeout.Infinite" /> (-1), der den einzigen zulässigen negativen Wert darstellt. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)">
      <summary>Versucht, die Sperre im erweiterbaren Modus zu erhalten. Optional wird ein Timeout berücksichtigt.</summary>
      <returns>true, wenn sich der aufrufende Thread im erweiterbaren Modus befindet, andernfalls false.</returns>
      <param name="timeout">Der Zeitintervall bis zum Timeout, oder -1 Millisekunden, um unbegrenzt zu warten.</param>
      <exception cref="T:System.Threading.LockRecursionException">Die <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />-Eigenschaft ist <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, und der aktuelle Thread hat die Sperre bereits erhalten. - oder -Der aktuelle Thread befindet sich bereits im Lesemodus, sodass durch eine Zuweisung des erweiterbaren Modus die Möglichkeit eines Deadlocks entstehen würde. - oder -Die Rekursionszahl würde die Kapazität des Zählers übersteigen. Die Kapazität ist so groß, dass Anwendungen diese Grenze niemals erreichen dürften.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der Wert von <paramref name="timeout" /> ist negativ, aber ungleich -1 Millisekunden. (Dies ist der einzige zulässige negative Wert.)- oder -Der Wert von <paramref name="timeout" /> ist größer als <see cref="F:System.Int32.MaxValue" /> Millisekunden. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)">
      <summary>Versucht, die Sperre im Schreibmodus zu erhalten. Optional wird ein Timeout berücksichtigt.</summary>
      <returns>true, wenn sich der aufrufende Thread im Schreibmodus befindet, andernfalls false.</returns>
      <param name="millisecondsTimeout">Die Zeit in Millisekunden, die gewartet wird, oder -1 (<see cref="F:System.Threading.Timeout.Infinite" />), um unbegrenzt zu warten.</param>
      <exception cref="T:System.Threading.LockRecursionException">Die <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />-Eigenschaft ist <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, und der aktuelle Thread hat die Sperre bereits erhalten. - oder -Der aktuelle Thread befindet sich bereits im Lesemodus, sodass durch eine Zuweisung des Schreibmodus die Möglichkeit eines Deadlocks entstehen würde. - oder -Die Rekursionszahl würde die Kapazität des Zählers übersteigen. Die Kapazität ist so groß, dass Anwendungen diese Grenze niemals erreichen dürften.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der Wert von <paramref name="millisecondsTimeout" /> ist negativ, aber ungleich <see cref="F:System.Threading.Timeout.Infinite" /> (-1), der den einzigen zulässigen negativen Wert darstellt. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)">
      <summary>Versucht, die Sperre im Schreibmodus zu erhalten. Optional wird ein Timeout berücksichtigt.</summary>
      <returns>true, wenn sich der aufrufende Thread im Schreibmodus befindet, andernfalls false.</returns>
      <param name="timeout">Der Zeitintervall bis zum Timeout, oder -1 Millisekunden, um unbegrenzt zu warten.</param>
      <exception cref="T:System.Threading.LockRecursionException">Die <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" />-Eigenschaft ist <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, und der aktuelle Thread hat die Sperre bereits erhalten. - oder -Der aktuelle Thread befindet sich bereits im Lesemodus, sodass durch eine Zuweisung des Schreibmodus die Möglichkeit eines Deadlocks entstehen würde. - oder -Die Rekursionszahl würde die Kapazität des Zählers übersteigen. Die Kapazität ist so groß, dass Anwendungen diese Grenze niemals erreichen dürften.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der Wert von <paramref name="timeout" /> ist negativ, aber ungleich -1 Millisekunden. (Dies ist der einzige zulässige negative Wert.)- oder -Der Wert von <paramref name="timeout" /> ist größer als <see cref="F:System.Int32.MaxValue" /> Millisekunden. </exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount">
      <summary>Ruft die Gesamtzahl von Threads ab, die auf eine Zuweisung des Lesemodus warten.</summary>
      <returns>Die Gesamtzahl von Threads, die auf eine Zuweisung des Lesemodus warten.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount">
      <summary>Ruft die Gesamtzahl von Threads ab, die auf eine Zuweisung des erweiterbaren Modus warten.</summary>
      <returns>Die Gesamtzahl von Threads, die auf eine Zuweisung des erweiterbaren Modus warten.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount">
      <summary>Ruft die Gesamtzahl von Threads ab, die auf eine Zuweisung des Schreibmodus warten.</summary>
      <returns>Die Gesamtzahl von Threads, die auf eine Zuweisung des Schreibmodus warten.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>Stellt einen Satz mit statischen Methoden (Shared in Visual Basic) für die Arbeit mit bestimmten Arten von <see cref="T:System.Threading.Tasks.Task" />-Instanzen bereit.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>Erstellt einen <see cref="T:System.Threading.Tasks.Task" /> für Proxys, der den asynchronen Vorgang eines Task&lt;Task&lt;T&gt;&gt; (C#) oder Task (Of Task(Of T)) (Visual Basic) darstellt.</summary>
      <returns>Ein <see cref="System.Threading.Tasks.Task`1" /> für Proxys, der den asynchronen Vorgang des angegebenen Task&lt;Task&lt;T&gt;&gt; (C#) oder Task (Of Task(Of T)) (Visual Basic) darstellt.</returns>
      <param name="task">Der zu entpackende Task&lt;Task&lt;T&gt;&gt; (C#) oder Task (Of Task(Of T)) (Visual Basic).</param>
      <typeparam name="TResult">Der Typ des Aufgabenergebnisses.</typeparam>
      <exception cref="T:System.ArgumentNullException">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="task" />-Argument NULL ist.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>Erstellt ein <see cref="T:System.Threading.Tasks.Task" />-Objekt für Proxys, das den asynchronen Vorgang eines <see cref="T:System.Threading.Tasks.Task{System.Threading.Tasks.Task}" /> darstellt.</summary>
      <returns>Ein Task, der den asynchronen Vorgang des angegebenen System.Threading.Tasks.Task(Of Task) darstellt.</returns>
      <param name="task">Der zu entpackende Task&lt;Task&gt; (C#) oder Task (Of Task) (Visual Basic).</param>
      <exception cref="T:System.ArgumentNullException">Die Ausnahme, die ausgelöst wird, wenn das <paramref name="task" />-Argument NULL ist.</exception>
    </member>
  </members>
</doc>