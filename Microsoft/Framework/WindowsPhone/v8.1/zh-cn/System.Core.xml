<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Core</name>
  </assembly>
  <members>
    <member name="T:System.Action`10">
      <summary>封装一个方法，该方法具有 10 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`11">
      <summary>封装一个方法，该方法具有 11 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`12">
      <summary>封装一个方法，该方法具有 12 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`13">
      <summary>封装一个方法，该方法具有 13 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`14">
      <summary>封装一个方法，该方法具有 14 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装的方法的第十四个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`15">
      <summary>封装一个方法，该方法具有 15 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装的方法的第十四个参数。</param>
      <param name="arg15">此委托封装的方法的第十五个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`16">
      <summary>封装一个方法，该方法具有 16 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装的方法的第十四个参数。</param>
      <param name="arg15">此委托封装的方法的第十五个参数。</param>
      <param name="arg16">此委托封装的方法的第十六个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
      <typeparam name="T16">此委托封装的方法的第十六个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`9">
      <summary>封装一个方法，该方法具有九个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
    </member>
    <member name="T:System.Func`10">
      <summary>封装一个方法，该方法具有九个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
    </member>
    <member name="T:System.Func`11">
      <summary>封装一个方法，该方法具有 10 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
    </member>
    <member name="T:System.Func`12">
      <summary>封装一个方法，该方法具有 11 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
    </member>
    <member name="T:System.Func`13">
      <summary>封装一个方法，该方法具有 12 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
    </member>
    <member name="T:System.Func`14">
      <summary>封装一个方法，该方法具有 13 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
    </member>
    <member name="T:System.Func`15">
      <summary>封装一个方法，该方法具有 14 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装的方法的第十四个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
    </member>
    <member name="T:System.Func`16">
      <summary>封装一个方法，该方法具有 15 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装的方法的第十四个参数。</param>
      <param name="arg15">此委托封装的方法的第十五个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
    </member>
    <member name="T:System.Func`17">
      <summary>封装一个方法，该方法具有 16 个参数，并返回 <paramref name="TResult" /> 参数所指定的类型的值。</summary>
      <returns>此委托封装的方法的返回值。</returns>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装的方法的第十四个参数。</param>
      <param name="arg15">此委托封装的方法的第十五个参数。</param>
      <param name="arg16">此委托封装的方法的第十六个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。该类型参数是逆变的。即可以使用指定的类型或派生程度更低的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
      <typeparam name="T16">此委托封装的方法的第十六个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary>表示值的集。</summary>
      <typeparam name="T">哈希集中的元素类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的一个新实例，该实例为空并使用集类型的默认相等比较器。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的一个新实例，该实例使用集类型的默认相等比较器，包含从指定的集合复制的元素，并且有足够的容量容纳所复制的这些元素。</summary>
      <param name="collection">其元素被复制到新集中的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的一个新实例，该实例使用集类型的指定相等比较器，包含从指定的集合复制的元素，并且有足够的容量容纳所复制的这些元素。</summary>
      <param name="collection">其元素被复制到新集中的集合。</param>
      <param name="comparer">在比较集中的值时使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现，或为 null 以使用集类型的默认 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.HashSet`1" /> 类的一个新实例，该实例为空并使用集类型的指定相等比较器。</summary>
      <param name="comparer">在比较集中的值时使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现，或为 null 以使用集类型的默认 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 实现。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary>将指定的元素添加到集中。</summary>
      <returns>如果该元素被添加到 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中，则为 true；如果该元素已存在则为 false。</returns>
      <param name="item">要添加到集中的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary>从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中移除所有元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary>获取用于确定集中的值是否相等的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对象。</summary>
      <returns>用于确定集中的值是否相等的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary>确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否包含指定的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象包含指定的元素，则为 true；否则为 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中查找的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary>将 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的元素复制到数组中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象复制的元素的目标位置的一维数组。该数组必须具有从零开始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary>从指定数组索引处开始，将 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的元素复制到数组中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象复制的元素的目标位置的一维数组。该数组必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> 大于目标 <paramref name="array" /> 的长度。- 或 -<paramref name="count" /> 大于目标 <paramref name="array" /> 的大小。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>从指定数组索引处开始，将 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的指定数目的元素复制到数组中。</summary>
      <param name="array">作为从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象复制的元素的目标位置的一维数组。该数组必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，在此处开始复制。</param>
      <param name="count">要复制到 <paramref name="array" /> 的元素的数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。- 或 -<paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> 大于目标 <paramref name="array" /> 的长度。- 或 -<paramref name="count" /> 大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary>获取集中包含的元素数。</summary>
      <returns>集中包含的元素数。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>从当前 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中移除指定集合中的所有元素。</summary>
      <param name="other">要从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中移除的项的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的枚举器。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的 <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象，以仅包含该对象和指定集合中存在的元素。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否为指定集合的真子集。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是 <paramref name="other" /> 的真子集，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否为指定集合的真超集。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是 <paramref name="other" /> 的真超集，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否为指定集合的子集。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是 <paramref name="other" /> 的子集，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是否为指定集合的超集。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象是 <paramref name="other" /> 的超集，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象和指定的集合是否共享公共元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象与 <paramref name="other" /> 至少共享一个公共元素，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中移除指定的元素。</summary>
      <returns>如果成功找到并移除该元素，则为 true；否则为 false。如果在 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象中找不到 <paramref name="item" />，则此方法返回 false。</returns>
      <param name="item">要移除的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>从 <see cref="T:System.Collections.Generic.HashSet`1" /> 集合中移除与指定的谓词所定义的条件相匹配的所有元素。</summary>
      <returns>已从 <see cref="T:System.Collections.Generic.HashSet`1" /> 集合中移除的元素的个数。</returns>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委托，用于定义要移除的元素应满足的条件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象与指定的集合中是否包含相同的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象等于 <paramref name="other" />，则为 true；否则为 false。</returns>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象，以仅包含该对象或指定集合中存在的元素（但不可包含同时在该对象和指定集合中都存在的元素）。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>向 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象添加一个项。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象中的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示集合是否为只读。</summary>
      <returns>如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary>将 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的容量设置为它所包含的元素的实际个数，向上舍入为接近的特定于实现的值。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象，以包含在该对象本身和指定集合中都存在的所有元素。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary>枚举 <see cref="T:System.Collections.Generic.HashSet`1" /> 对象的元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary>获取位于枚举器当前位置的元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 集合中位于枚举器当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary>释放 <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> 对象使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary>将枚举器推进到 <see cref="T:System.Collections.Generic.HashSet`1" /> 集合的下一个元素。</summary>
      <returns>如果枚举器成功地推进到下一个元素，则为 true；如果枚举器越过集合的结尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在创建了枚举器后集合被修改了。</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取位于枚举器当前位置的元素。</summary>
      <returns>集合中位于枚举器当前位置的元素，如 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.InvalidOperationException">枚举器定位在该集合的第一个元素之前或最后一个元素之后。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>将枚举器设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在创建了枚举器后集合被修改了。 </exception>
    </member>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>表示调用站点上的二元动态运算，它提供绑定语义和有关操作的详细信息。</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>初始化 <see cref="T:System.Dynamic.BinaryOperationBinder" /> 类的新实例。</summary>
      <param name="operation">二元运算类型。</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态二元运算的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态操作的目标。</param>
      <param name="args">动态操作的参数数组。</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行二元动态运算的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态二元运算的目标。</param>
      <param name="arg">动态二元运算的右操作数。</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>当在派生类中被重写时，如果无法绑定目标动态对象，则执行二元动态运算的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态二元运算的目标。</param>
      <param name="arg">动态二元运算的右操作数。</param>
      <param name="errorSuggestion">绑定失败时的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>二元运算类型。</summary>
      <returns>表示二元运算的类型的 <see cref="T:System.Linq.Expressions.ExpressionType" /> 对象。</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>表示应用于 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的一组绑定限制，只有满足这些限制的动态绑定才是有效的。</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>将 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例列表中的绑定限制合并到一个限制集中。</summary>
      <returns>新的绑定限制集。</returns>
      <param name="contributingObjects">要合并其中的限制的 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例列表。</param>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>表示一个空的绑定限制集。此字段为只读。</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>创建用来检查表达式中的任意不可变属性的绑定限制。</summary>
      <returns>新绑定限制。</returns>
      <param name="expression">表示限制的表达式。</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>创建用来检查表达式中的对象实例标识的绑定限制。</summary>
      <returns>新绑定限制。</returns>
      <param name="expression">要测试的表达式。</param>
      <param name="instance">要测试的确切对象实例。</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建用来检查表达式中的运行时类型标识的绑定限制。</summary>
      <returns>新绑定限制。</returns>
      <param name="expression">要测试的表达式。</param>
      <param name="type">要测试的确切类型。</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>将绑定限制集与当前绑定限制合并。</summary>
      <returns>新的绑定限制集。</returns>
      <param name="restrictions">用于与当前绑定限制合并的限制集。</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>创建表示绑定限制的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>表示限制的表达式目录树。</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>描述动态绑定进程中的参数。</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>创建一个新的 CallInfo，它表示动态绑定进程中的参数。</summary>
      <param name="argCount">参数的数量。</param>
      <param name="argNames">参数名称。</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>创建一个新的 PositionalArgumentInfo。</summary>
      <param name="argCount">参数的数量。</param>
      <param name="argNames">参数名称。</param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>参数的数量。</summary>
      <returns>参数的数量。</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>参数名称。</summary>
      <returns>参数名称的只读集合。</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>确定是否将指定的 CallInfo 实例视为等于当前实例。</summary>
      <returns>如果指定的实例等于当前实例，则为 true；否则为 false。</returns>
      <param name="obj">要与当前实例进行比较的 <see cref="T:System.Dynamic.CallInfo" />。</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>用作当前 <see cref="T:System.Dynamic.CallInfo" /> 的哈希函数。</summary>
      <returns>当前 <see cref="T:System.Dynamic.CallInfo" /> 的哈希代码。</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>表示调用站点上的转换动态操作，它提供绑定语义和有关操作的详细信息。</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.ConvertBinder" /> 的新实例。</summary>
      <param name="type">要转换到的类型。</param>
      <param name="explicit">如果应将转换视为显式转换，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态转换操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态转换操作的目标。</param>
      <param name="args">动态转换操作的参数数组。</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>获取一个值，该值指示是否应将转换视为显式转换。</summary>
      <returns>如果存在显式转换，则为 True；否则为 false。</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行动态转换操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态转换操作的目标。</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>当在派生类中被重写时，如果无法绑定目标动态对象，则执行动态转换操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态转换操作的目标。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>要转换到的类型。</summary>
      <returns>表示要转换到的类型的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>表示调用站点上的动态创建操作，它提供绑定语义和有关操作的详细信息。</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.CreateInstanceBinder" /> 的新实例。</summary>
      <param name="callInfo">调用站点上的参数的签名。</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态创建操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态创建操作的目标。</param>
      <param name="args">动态创建操作的参数数组。</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>获取调用站点上的参数的签名。</summary>
      <returns>调用站点上的参数的签名。</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果无法绑定目标动态对象，则执行动态创建操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态创建操作的目标。</param>
      <param name="args">动态创建操作的参数。</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>当在派生类中被重写时，如果无法绑定目标动态对象，则执行动态创建操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态创建操作的目标。</param>
      <param name="args">动态创建操作的参数。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>表示调用站点上的动态删除索引操作，它提供绑定语义和有关操作的细节。</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.DeleteIndexBinder" /> 的新实例。</summary>
      <param name="callInfo">调用站点上的参数的签名。</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态删除索引操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态删除索引操作的目标。</param>
      <param name="args">动态删除索引操作的参数数组。</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>获取调用站点上的参数的签名。</summary>
      <returns>调用站点上的参数的签名。</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果无法绑定目标动态对象，则执行动态删除索引操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态删除索引操作的目标。</param>
      <param name="indexes">动态删除索引操作的参数。</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>当在派生类中被重写时，如果无法绑定目标动态对象，则执行动态删除索引操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态删除索引操作的目标。</param>
      <param name="indexes">动态删除索引操作的参数。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>表示调用站点上的动态删除成员操作，它提供绑定语义和有关操作的详细信息。</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.DeleteIndexBinder" /> 的新实例。</summary>
      <param name="name">要删除的成员的名称。</param>
      <param name="ignoreCase">如果在匹配名称时应忽略大小写，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态删除成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态删除成员操作的目标。</param>
      <param name="args">动态删除成员操作的参数数组。</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行动态删除成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态删除成员操作的目标。</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>当在派生类中被重写时，如果无法绑定目标动态对象，则执行动态删除成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态删除成员操作的目标。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>获取指示字符串比较是否应忽略成员名称大小写的值。</summary>
      <returns>如果字符串比较应忽略大小写，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>获取要删除的成员的名称。</summary>
      <returns>要删除的成员的名称。</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>表示动态绑定和参与动态绑定的对象的绑定逻辑。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>初始化 <see cref="T:System.Dynamic.DynamicMetaObject" /> 类的新实例。</summary>
      <param name="expression">在动态绑定进程中表示此 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的表达式。</param>
      <param name="restrictions">在此限制下绑定有效的绑定限制集。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>初始化 <see cref="T:System.Dynamic.DynamicMetaObject" /> 类的新实例。</summary>
      <param name="expression">在动态绑定进程中表示此 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的表达式。</param>
      <param name="restrictions">在此限制下绑定有效的绑定限制集。</param>
      <param name="value">由 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示的运行时值。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>执行动态二元运算的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.BinaryOperationBinder" /> 实例，表示动态操作的详细信息。</param>
      <param name="arg">一个 <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例，表示二元运算的右侧。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>执行动态转换操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.ConvertBinder" /> 实例，表示动态操作的详细信息。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态创建实例操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.CreateInstanceBinder" /> 实例，表示动态操作的详细信息。</param>
      <param name="args">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例（即，创建实例操作的参数）的数组。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态删除索引操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.DeleteIndexBinder" /> 实例，表示动态操作的详细信息。</param>
      <param name="indexes">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例（即，删除索引操作的索引）的数组。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>执行动态删除成员操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.DeleteMemberBinder" /> 实例，表示动态操作的详细信息。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态获取索引操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.GetIndexBinder" /> 实例，表示动态操作的详细信息。</param>
      <param name="indexes">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例（即，获取索引操作的索引）的数组。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>执行动态获取成员操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.GetMemberBinder" /> 实例，表示动态操作的详细信息。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态调用操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.InvokeBinder" /> 实例，表示动态操作的详细信息。</param>
      <param name="args">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例（即，调用操作的参数）的数组。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态调用成员操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.InvokeMemberBinder" /> 实例，表示动态操作的详细信息。</param>
      <param name="args">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例（即，调用成员操作的参数）的数组。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>执行动态设置索引操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.SetIndexBinder" /> 实例，表示动态操作的详细信息。</param>
      <param name="indexes">
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 实例（即，设置索引操作的索引）的数组。</param>
      <param name="value">表示设置索引操作的值的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>执行动态设置成员操作的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.SetMemberBinder" /> 实例，表示动态操作的详细信息。</param>
      <param name="value">表示设置成员操作的值的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>执行动态一元运算的绑定。</summary>
      <returns>表示绑定结果的新 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="binder">一个 <see cref="T:System.Dynamic.UnaryOperationBinder" /> 实例，表示动态操作的详细信息。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>为指定对象创建一个元对象。</summary>
      <returns>如果给定对象实现 <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" />，并且它不是来自当前 AppDomain 的外部的远程对象，则返回由 <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" /> 返回的此对象的特定元对象。否则，将创建并返回无限制的新的纯元对象。</returns>
      <param name="value">要为其获取元对象的对象。</param>
      <param name="expression">在动态绑定进程中表示此 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的表达式。</param>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>表示 <see cref="T:System.Dynamic.DynamicMetaObject" /> 类型的空数组。此字段为只读。</summary>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>在动态绑定进程中表示此 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的表达式。</summary>
      <returns>在动态绑定进程中表示此 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的表达式。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>返回所有动态成员名称的枚举。</summary>
      <returns>动态成员名称的列表。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>获取一个值，该值指示 <see cref="T:System.Dynamic.DynamicMetaObject" /> 是否具有运行时值。</summary>
      <returns>如果 <see cref="T:System.Dynamic.DynamicMetaObject" /> 具有运行时值，则为 True；否则为 False。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>获取 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的限制类型。</summary>
      <returns>如果运行时值可用，则为 <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" />；否则为 <see cref="P:System.Dynamic.DynamicMetaObject.Expression" /> 的类型。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>在此限制下绑定有效的绑定限制集。</summary>
      <returns>绑定限制集。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>获取运行时值的 <see cref="T:System.Type" />；如果 <see cref="T:System.Dynamic.DynamicMetaObject" /> 没有与其关联的值，则为 null。</summary>
      <returns>运行时值的 <see cref="T:System.Type" />，或为 null。</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>由此 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示的运行时值。</summary>
      <returns>由此 <see cref="T:System.Dynamic.DynamicMetaObject" /> 表示的运行时值。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>参与 <see cref="T:System.Dynamic.DynamicMetaObject" /> 绑定协议的动态调用站点联编程序。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>初始化 <see cref="T:System.Dynamic.DynamicMetaObjectBinder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>当在派生类中被重写时，执行动态操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态操作的目标。</param>
      <param name="args">动态操作的参数数组。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>针对一组参数执行动态操作的运行时绑定。</summary>
      <returns>一个表达式，对动态操作参数执行测试；如果测试有效，则执行动态操作。如果对后续动态操作执行的测试失败，则将再次调用 Bind 以便为新的参数类型生成新的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
      <param name="args">动态操作的参数数组。</param>
      <param name="parameters">表示绑定进程中调用站点的参数的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 实例数组。</param>
      <param name="returnLabel">用于返回动态绑定的结果的 LabelTarget。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>延迟操作绑定，直至已计算出所有动态操作参数的运行时值。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态操作的目标。</param>
      <param name="args">动态操作的参数数组。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>延迟操作绑定，直至已计算出所有动态操作参数的运行时值。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="args">动态操作的参数数组。</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>获取一个表达式，该表达式将使绑定得到更新。它指示表达式的绑定不再有效。这通常在动态对象的“版本”已更改时使用。</summary>
      <returns>更新表达式。</returns>
      <param name="type">结果表达式的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性；允许任何类型。</param>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>提供用于指定运行时的动态行为的基类。必须继承此类；不能直接实例化此类。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>使派生的类型可以初始化 <see cref="T:System.Dynamic.DynamicObject" /> 类型的新实例。</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>返回所有动态成员名称的枚举。</summary>
      <returns>一个包含动态成员名称的序列。</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>提供调度到动态虚方法的 <see cref="T:System.Dynamic.DynamicMetaObject" />。可以将该对象封装到另一个 <see cref="T:System.Dynamic.DynamicMetaObject" /> 中，以便为各个不同操作提供自定义行为。此方法支持语言实现器的动态语言运行时基础结构，不应从代码直接使用。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 类型的对象。</returns>
      <param name="parameter">表示要调度到动态虚方法的 <see cref="T:System.Dynamic.DynamicMetaObject" /> 的表达式。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>提供二元运算的实现。从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为诸如加法和乘法这样的运算指定动态行为。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关二元运算的信息。binder.Operation 属性返回一个 <see cref="T:System.Linq.Expressions.ExpressionType" /> 对象。例如，对于 sum = first + second 语句（其中 first 和 second 派生自 DynamicObject 类），binder.Operation 将返回 ExpressionType.Add。</param>
      <param name="arg">二元运算的右操作数。例如，对于 sum = first + second 语句（其中 first 和 second 派生自 DynamicObject 类），<paramref name="arg" /> 将等于 second。</param>
      <param name="result">二元运算的结果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>提供类型转换运算的实现。从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为将某个对象从一种类型转换为另一种类型的运算指定动态行为。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关转换运算的信息。binder.Type 属性提供必须将对象转换为的类型。例如，对于 C# 中的语句 (String)sampleObject（Visual Basic 中为 CType(sampleObject, Type)）（其中 sampleObject 是派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类的一个类实例），binder.Type 将返回 <see cref="T:System.String" /> 类型。binder.Explicit 属性提供有关所发生转换的类型的信息。对于显式转换，它返回 true；对于隐式转换，它返回 false。</param>
      <param name="result">类型转换运算的结果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>为初始化动态对象的新实例的操作提供实现。不应将此方法用于 C# 或 Visual Basic。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关初始化操作的信息。</param>
      <param name="args">初始化期间传递给对象的参数。例如，对于 new SampleType(100) 操作（其中 SampleType 是派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类的类型），<paramref name="args[0]" /> 等于 100。</param>
      <param name="result">初始化的结果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>为按索引删除对象的操作提供实现。不应将此方法用于 C# 或 Visual Basic。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关删除的信息。</param>
      <param name="indexes">要删除的索引。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>为删除对象成员的操作提供实现。不应将此方法用于 C# 或 Visual Basic。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关删除的信息。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>为按索引获取值的操作提供实现。从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为索引操作指定动态行为。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发运行时异常。）</returns>
      <param name="binder">提供有关该操作的信息。</param>
      <param name="indexes">该操作中使用的索引。例如，对于 C# 中的 sampleObject[3] 操作（Visual Basic 中为 sampleObject(3)）（其中 sampleObject 派生自 DynamicObject 类），<paramref name="indexes[0]" /> 等于 3。</param>
      <param name="result">索引操作的结果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>为获取成员值的操作提供实现。从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为诸如获取属性值这样的操作指定动态行为。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发运行时异常。）</returns>
      <param name="binder">提供有关调用了动态操作的对象的信息。binder.Name 属性提供针对其执行动态操作的成员的名称。例如，对于 Console.WriteLine(sampleObject.SampleProperty) 语句（其中 sampleObject 是派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类的一个类实例），binder.Name 将返回“SampleProperty”。binder.IgnoreCase 属性指定成员名称是否区分大小写。</param>
      <param name="result">获取操作的结果。例如，如果为某个属性调用该方法，则可以为 <paramref name="result" /> 指派该属性值。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>为调用对象的操作提供实现。从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为诸如调用对象或委托这样的操作指定动态行为。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关调用操作的信息。</param>
      <param name="args">调用操作期间传递给对象的参数。例如，对于 sampleObject(100) 操作（其中 sampleObject 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类），<paramref name="args[0]" /> 等于 100。</param>
      <param name="result">对象调用的结果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>为调用成员的操作提供实现。从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为诸如调用方法这样的操作指定动态行为。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关动态操作的信息。binder.Name 属性提供针对其执行动态操作的成员的名称。例如，对于 sampleObject.SampleMethod(100) 语句（其中 sampleObject 是派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类的一个类实例），binder.Name 将返回“SampleMethod”。binder.IgnoreCase 属性指定成员名称是否区分大小写。</param>
      <param name="args">调用操作期间传递给对象成员的参数。例如，对于 sampleObject.SampleMethod(100) 语句（其中 sampleObject 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类），<paramref name="args[0]" /> 等于 100。</param>
      <param name="result">成员调用的结果。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>为按索引设置值的操作提供实现。从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为按指定索引访问对象的操作指定动态行为。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关该操作的信息。</param>
      <param name="indexes">该操作中使用的索引。例如，对于 C# 中的 sampleObject[3] = 10 操作（Visual Basic 中为 sampleObject(3) = 10）（其中 sampleObject 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类），<paramref name="indexes[0]" /> 等于 3。</param>
      <param name="value">要为具有指定索引的对象设置的值。例如，对于 C# 中的 sampleObject[3] = 10 操作（Visual Basic 中为 sampleObject(3) = 10）（其中 sampleObject 派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类），<paramref name="value" /> 等于 10。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>为设置成员值的操作提供实现。从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为诸如设置属性值这样的操作指定动态行为。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关调用了动态操作的对象的信息。binder.Name 属性提供将该值分配到的成员的名称。例如，对于 sampleObject.SampleProperty = "Test" 语句（其中 sampleObject 是派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类的一个类实例），binder.Name 将返回“SampleProperty”。binder.IgnoreCase 属性指定成员名称是否区分大小写。</param>
      <param name="value">要设置为成员的值。例如，对于 sampleObject.SampleProperty = "Test"（其中 sampleObject 是派生自 <see cref="T:System.Dynamic.DynamicObject" /> 类的一个类实例），<paramref name="value" /> 为“Test”。</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>提供一元运算的实现。从 <see cref="T:System.Dynamic.DynamicObject" /> 类派生的类可以重写此方法，以便为诸如求反、递增、递减这样的运算指定动态行为。</summary>
      <returns>如果此运算成功，则为 true；否则为 false。如果此方法返回 false，则该语言的运行时联编程序将决定行为。（大多数情况下，将引发语言特定的运行时异常。）</returns>
      <param name="binder">提供有关一元运算的信息。binder.Operation 属性返回一个 <see cref="T:System.Linq.Expressions.ExpressionType" /> 对象。例如，对于 negativeNumber = -number 语句（其中 number 派生自 DynamicObject 类），binder.Operation 将返回“Negate”。</param>
      <param name="result">一元运算的结果。</param>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>表示一个对象，该对象包含可在运行时动态添加和移除的成员。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>初始化不包含任何成员的新 ExpandoObject。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>将指定值添加到具有指定键的 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。</summary>
      <param name="item">表示要添加到集合中的键和值的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Clear">
      <summary>从集合中移除所有项。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>确定 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定的键和值。</summary>
      <returns>如果集合包含特定的键和值，则为 true；否则为 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中查找的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>从指定的数组索引开始，将 <see cref="T:System.Collections.Generic.ICollection`1" /> 的元素复制到类型 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的数组中。</summary>
      <param name="array">类型 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的一维数组，是从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 元素的目标数组。该数组的索引必须从零开始。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Count">
      <summary>获取 <see cref="T:System.Collections.Generic.ICollection`1" /> 中元素的数目。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 中元素的数目。</returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>从集合中移除键和值。</summary>
      <returns>如果成功找到并移除了键和值，则为 true；否则为 false。如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中未找到键和值，则此方法将返回 false。</returns>
      <param name="item">表示要从集合中移除的键和值的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Add(System.String,System.Object)">
      <summary>将指定的键和值添加到字典中。</summary>
      <param name="key">要用作键的对象。</param>
      <param name="value">要用作值的对象。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(System.String)">
      <summary>确定字典是否包含指定键。</summary>
      <returns>如果字典包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要在字典中查找的键。</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Item(System.String)">
      <summary>获取或设置具有指定键的元素。</summary>
      <returns>具有指定键的元素。</returns>
      <param name="key">要获取或设置的元素的键。</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>获取包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，其中包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象的键。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(System.String)">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 中移除具有指定键的元素。</summary>
      <returns>如果成功移除此元素，则为 true；否则为 false。如果在原始 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中未找到 <paramref name="key" />，则此方法也会返回 false。</returns>
      <param name="key">要移除的元素的键。</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(System.String,System.Object@)">
      <summary>获取与指定的键相关联的值。</summary>
      <returns>如果实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象包含具有指定键的元素，则为 true；否则为 false。</returns>
      <param name="key">要获取的值的键。</param>
      <param name="value">当此方法返回时，如果找到该键，便会包含与指定的键相关联的值；否则，包含 <paramref name="value" /> 参数的类型默认值。该参数未经初始化即被传递。</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>获取包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，其中包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象中的值。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>一个可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象。</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>在更改属性值时发生。</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>提供的 MetaObject 将调度到动态虚方法。可以将该对象封装到另一个 MetaObject 中，以便为单个操作提供自定义行为。</summary>
      <returns>
        <see cref="T:System.Dynamic.DynamicMetaObject" /> 类型的对象。</returns>
      <param name="parameter">表示要调度到动态虚方法的 MetaObject 的表达式。</param>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>表示调用站点上的动态获取索引操作，它提供绑定语义和有关操作的详细信息。</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.GetIndexBinder" /> 的新实例。</summary>
      <param name="callInfo">调用站点上的参数的签名。</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态获取索引操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态获取索引操作的目标。</param>
      <param name="args">动态获取索引操作的参数数组。</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>获取调用站点上的参数的签名。</summary>
      <returns>调用站点上的参数的签名。</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果无法绑定目标动态对象，则执行动态获取索引操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态获取索引操作的目标。</param>
      <param name="indexes">动态获取索引操作的参数。</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>当在派生类中被重写时，如果无法绑定目标动态对象，则执行动态获取索引操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态获取索引操作的目标。</param>
      <param name="indexes">动态获取索引操作的参数。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>表示调用站点上的动态获取成员操作，它提供绑定语义和有关操作的详细信息。</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.GetMemberBinder" /> 的新实例。</summary>
      <param name="name">要获取的成员的名称。</param>
      <param name="ignoreCase">如果在匹配名称时应忽略大小写，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态获取成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态获取成员操作的目标。</param>
      <param name="args">动态获取成员操作的参数数组。</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行动态获取成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态获取成员操作的目标。</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>当在派生类中被重写时，如果无法绑定目标动态对象，则执行动态获取成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态获取成员操作的目标。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>获取指示字符串比较是否应忽略成员名称大小写的值。</summary>
      <returns>如果忽略大小写，则为 true，否则为 false。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>获取要获取的成员的名称。</summary>
      <returns>要获取的成员的名称。</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>表示一个动态对象，在运行时可将该对象的操作进行绑定。</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>返回 <see cref="T:System.Dynamic.DynamicMetaObject" />，它负责绑定对此对象执行的操作。</summary>
      <returns>要绑定此对象的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="parameter">运行时值的表达式目录树表示形式。</param>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>表示有关某个动态获取成员操作的信息，该信息指示此获取成员在执行获取操作时是否应该调用属性。</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>获取一个值，该值指示此获取成员在执行获取操作时是否应该调用属性。此接口不存在时，默认值为 true。</summary>
      <returns>如果此获取成员在执行获取操作时应该调用属性，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>表示调用站点上的调用动态操作，它提供绑定语义和有关操作的详细信息。</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.InvokeBinder" /> 的新实例。</summary>
      <param name="callInfo">调用站点上的参数的签名。</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态调用操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态调用操作的目标。</param>
      <param name="args">动态调用操作的参数数组。</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>获取调用站点上的参数的签名。</summary>
      <returns>调用站点上的参数的签名。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果无法绑定目标动态对象，则执行动态调用操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态调用操作的目标。</param>
      <param name="args">动态调用操作的参数。</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行动态调用操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态调用操作的目标。</param>
      <param name="args">动态调用操作的参数。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>表示调用站点上的调用成员动态操作，它提供绑定语义和有关操作的详细信息。</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.InvokeMemberBinder" /> 的新实例。</summary>
      <param name="name">要调用的成员的名称。</param>
      <param name="ignoreCase">如果在匹配名称时应忽略大小写，则为 true；否则为 false。</param>
      <param name="callInfo">调用站点上的参数的签名。</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态调用成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态调用成员操作的目标。</param>
      <param name="args">动态调用成员操作的参数数组。</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>获取调用站点上的参数的签名。</summary>
      <returns>调用站点上的参数的签名。</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>当在派生类中被重写时，如果无法绑定目标动态对象，则执行动态调用操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态调用操作的目标。</param>
      <param name="args">动态调用操作的参数。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>如果无法绑定目标动态对象，则执行动态调用成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态调用成员操作的目标。</param>
      <param name="args">动态调用成员操作的参数。</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>当在派生类中被重写时，如果无法绑定目标动态对象，则执行动态调用成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态调用成员操作的目标。</param>
      <param name="args">动态调用成员操作的参数。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>获取指示字符串比较是否应忽略成员名称大小写的值。</summary>
      <returns>如果忽略大小写，则为 true，否则为 false。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>获取要调用的成员的名称。</summary>
      <returns>要调用的成员的名称。</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>表示调用站点上的动态设置索引操作，它提供绑定语义和有关操作的详细信息。</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>初始化 <see cref="T:System.Dynamic.SetIndexBinder" /> 的新实例。</summary>
      <param name="callInfo">调用站点上的参数的签名。</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态设置索引操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态设置索引操作的目标。</param>
      <param name="args">动态设置索引操作的参数数组。</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>获取调用站点上的参数的签名。</summary>
      <returns>调用站点上的参数的签名。</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行动态设置索引操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态设置索引操作的目标。</param>
      <param name="indexes">动态设置索引操作的参数。</param>
      <param name="value">要设置为集合的值。</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>当在派生类中被重写时，如果无法绑定目标动态对象，则执行动态设置索引操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态设置索引操作的目标。</param>
      <param name="indexes">动态设置索引操作的参数。</param>
      <param name="value">要设置为集合的值。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>表示调用站点上的动态设置成员操作，它提供绑定语义和有关操作的详细信息。</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Dynamic.SetMemberBinder" /> 的新实例。</summary>
      <param name="name">要获取的成员的名称。</param>
      <param name="ignoreCase">如果在匹配名称时应忽略大小写，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态设置成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态设置成员操作的目标。</param>
      <param name="args">动态设置成员操作的参数数组。</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行动态设置成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态设置成员操作的目标。</param>
      <param name="value">要设置为成员的值。</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行动态设置成员操作的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态设置成员操作的目标。</param>
      <param name="value">要设置为成员的值。</param>
      <param name="errorSuggestion">绑定失败时要使用的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>获取指示字符串比较是否应忽略成员名称大小写的值。</summary>
      <returns>如果忽略大小写，则为 true，否则为 false。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>获取要获取的成员的名称。</summary>
      <returns>要获取的成员的名称。</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>表示调用站点上的一元动态运算，它提供绑定语义和有关操作的详细信息。</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>初始化 <see cref="T:System.Dynamic.BinaryOperationBinder" /> 类的新实例。</summary>
      <param name="operation">一元运算类型。</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>执行动态一元运算的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态操作的目标。</param>
      <param name="args">动态操作的参数数组。</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行一元动态运算的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态一元运算的目标。</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>如果无法绑定目标动态对象，则执行一元动态运算的绑定。</summary>
      <returns>表示绑定结果的 <see cref="T:System.Dynamic.DynamicMetaObject" />。</returns>
      <param name="target">动态一元运算的目标。</param>
      <param name="errorSuggestion">绑定失败时的绑定结果，或为 null。</param>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>一元运算类型。</summary>
      <returns>表示一元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" /> 的对象。</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>操作的结果类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示操作的结果类型。</returns>
    </member>
    <member name="T:System.Linq.Enumerable">
      <summary>提供一组用于查询实现 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的对象的 static（在 Visual Basic 中为 Shared）方法。</summary>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>对序列应用累加器函数。</summary>
      <returns>累加器的最终值。</returns>
      <param name="source">要聚合的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>对序列应用累加器函数。指定的种子值用作初始的累加器值。</summary>
      <returns>累加器的最终值。</returns>
      <param name="source">要聚合的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>对序列应用累加器函数。将指定的种子值用作累加器的初始值，并使用指定的函数选择结果值。</summary>
      <returns>已转换的累加器最终值。</returns>
      <param name="source">要聚合的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <param name="resultSelector">将累加器的最终值转换为结果值的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <typeparam name="TResult">结果值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>确定序列中的所有元素是否满足条件。</summary>
      <returns>如果源序列中的每个元素都通过指定谓词中的测试，或者序列为空，则为 true；否则为 false。</returns>
      <param name="source">包含要应用谓词的元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>确定序列是否包含任何元素。</summary>
      <returns>如果源序列包含任何元素，则为 true；否则为 false。</returns>
      <param name="source">要检查是否为空的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>确定序列中的任何元素是否都满足条件。</summary>
      <returns>如果源序列中的任何元素都通过指定谓词中的测试，则为 true；否则为 false。</returns>
      <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素将应用谓词。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回类型化为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的输入。</summary>
      <returns>类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的输入序列。</returns>
      <param name="source">类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>计算 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>计算 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>计算 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>计算 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的可以为 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">序列中元素之和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>计算可以为 null 的 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的可以为 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的可以为 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">序列中元素之和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的可以为 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">序列中元素之和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>计算可以为 null 的 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的可以为 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>计算 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>计算 <see cref="T:System.Decimal" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">序列中元素之和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>计算 <see cref="T:System.Double" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>计算 <see cref="T:System.Int32" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">序列中元素之和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>计算 <see cref="T:System.Int64" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">源中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
      <exception cref="T:System.OverflowException">序列中元素之和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">序列中元素之和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>计算可以为 null 的 <see cref="T:System.Double" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int32" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">序列中元素之和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int64" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>计算可以为 null 的 <see cref="T:System.Single" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>计算 <see cref="T:System.Single" /> 值序列的平均值，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
      <summary>将 <see cref="T:System.Collections.IEnumerable" /> 的元素转换为指定的类型。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含已转换为指定类型的源序列的每个元素。</returns>
      <param name="source">包含要转换的元素的 <see cref="T:System.Collections.IEnumerable" />。</param>
      <typeparam name="TResult">
        <paramref name="source" /> 中的元素要转换成的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidCastException">序列中的元素不能强制转换为 <paramref name="TResult" /> 类型。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>连接两个序列。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含两个输入序列的连接元素。</returns>
      <param name="first">要连接的第一个序列。</param>
      <param name="second">要与第一个序列连接的序列。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>通过使用默认的相等比较器确定序列是否包含指定的元素。</summary>
      <returns>如果源序列包含具有指定值的元素，则为 true；否则为 false。</returns>
      <param name="source">要在其中定位某个值的序列。</param>
      <param name="value">要在序列中定位的值。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 确定序列是否包含指定的元素。</summary>
      <returns>如果源序列包含具有指定值的元素，则为 true；否则为 false。</returns>
      <param name="source">要在其中定位某个值的序列。</param>
      <param name="value">要在序列中定位的值。</param>
      <param name="comparer">一个对值进行比较的相等比较器。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回序列中的元素数量。</summary>
      <returns>输入序列中的元素数量。</returns>
      <param name="source">包含要计数的元素的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回一个数字，表示在指定的序列中满足条件的元素数量。</summary>
      <returns>一个数字，表示序列中满足谓词函数条件的元素数量。</returns>
      <param name="source">包含要测试和计数的元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回指定序列的元素；如果序列为空，则返回单一实例集合中的类型参数的默认值。</summary>
      <returns>如果 <paramref name="source" /> 为空，则为包含 <paramref name="TSource" /> 类型的默认值的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象；否则为 <paramref name="source" />。</returns>
      <param name="source">序列为空时返回默认值的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>返回指定序列中的元素；如果序列为空，则返回单一实例集合中的指定值。</summary>
      <returns>用于在 <paramref name="source" /> 为空的情况下包含 <paramref name="defaultValue" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />；否则为 <paramref name="source" />。</returns>
      <param name="source">序列为空时为其返回指定值的序列。</param>
      <param name="defaultValue">序列为空时要返回的值。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器对值进行比较返回序列中的非重复元素。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含源序列中的非重复元素。</returns>
      <param name="source">要从中移除重复元素的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较返回序列中的非重复元素。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含源序列中的非重复元素。</returns>
      <param name="source">要从中移除重复元素的序列。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>返回序列中指定索引处的元素。</summary>
      <returns>源序列中指定位置处的元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="index">要检索的从零开始的元素索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于等于 <paramref name="source" /> 中的元素数量。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>返回序列中指定索引处的元素；如果索引超出范围，则返回默认值。</summary>
      <returns>如果索引超出源序列的范围，则为默认值 (<paramref name="TSource" />)；否则为源序列中指定位置处的元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="index">要检索的从零开始的元素索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Empty``1">
      <summary>返回一个具有指定的类型参数的空 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
      <returns>一个类型参数为 <paramref name="TResult" /> 的空 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <typeparam name="TResult">分配给返回的泛型 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的类型参数的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器对值进行比较生成两个序列的差集。</summary>
      <returns>包含两个序列元素的差集的序列。</returns>
      <param name="first">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将返回其也不在 <paramref name="second" /> 中的元素。</param>
      <param name="second">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，如果它的元素也出现在第一个序列中，则将导致从返回的序列中移除这些元素。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较产生两个序列的差集。</summary>
      <returns>包含两个序列元素的差集的序列。</returns>
      <param name="first">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将返回其也不在 <paramref name="second" /> 中的元素。</param>
      <param name="second">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，如果它的元素也出现在第一个序列中，则将导致从返回的序列中移除这些元素。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回序列中的第一个元素。</summary>
      <returns>返回指定序列中的第一个元素。</returns>
      <param name="source">要返回其第一个元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足指定条件的第一个元素。</summary>
      <returns>序列中通过指定谓词函数中的测试的第一个元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足 <paramref name="predicate" /> 中的条件。- 或 -源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回序列中的第一个元素；如果序列中不包含任何元素，则返回默认值。</summary>
      <returns>如果 <paramref name="source" /> 为空，则返回默认值 (<paramref name="TSource" />)；否则返回 <paramref name="source" /> 中的第一个元素。</returns>
      <param name="source">要返回其第一个元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足条件的第一个元素；如果未找到这样的元素，则返回默认值。</summary>
      <returns>如果 <paramref name="source" /> 为空或没有元素通过 <paramref name="predicate" /> 指定的测试，则返回默认值 (<paramref name="TSource" />)，否则返回 <paramref name="source" /> 中通过 <paramref name="predicate" /> 指定测试的第一个元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组。</summary>
      <returns>C# 中的 IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; 或 Visual Basic 中的 IEnumerable(Of IGrouping(Of TKey, TSource))，其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象包含一个对象和键序列。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并使用指定的比较器对键进行比较。</summary>
      <returns>C# 中的 IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; 或 Visual Basic 中的 IEnumerable(Of IGrouping(Of TKey, TSource))，其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象包含一个对象和键的集合。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且通过使用指定的函数对每个组中的元素进行投影。</summary>
      <returns>C# 中的 IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; 或 Visual Basic 中的 IEnumerable(Of IGrouping(Of TKey, TElement))，其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象包含一个对象类型 <paramref name="TElement" /> 和一个键的集合。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据键选择器函数对序列中的元素进行分组。通过使用比较器对键进行比较，并且通过使用指定的函数对每个组的元素进行投影。</summary>
      <returns>C# 中的 IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; 或 Visual Basic 中的 IEnumerable(Of IGrouping(Of TKey, TElement))，其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象包含一个对象类型 <paramref name="TElement" /> 和一个键的集合。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。通过使用指定的函数对每个组的元素进行投影。</summary>
      <returns>
        <paramref name="TResult" /> 类型的元素的集合，其中每个元素都表示对一个组及其键的投影。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">每个 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。通过使用指定的比较器对键值进行比较，并且通过使用指定的函数对每个组的元素进行投影。</summary>
      <returns>
        <paramref name="TResult" /> 类型的元素的集合，其中每个元素都表示对一个组及其键的投影。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">每个 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。</summary>
      <returns>
        <paramref name="TResult" /> 类型的元素的集合，其中每个元素都表示对一个组及其键的投影。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。通过使用指定的比较器对键进行比较。</summary>
      <returns>
        <paramref name="TResult" /> 类型的元素的集合，其中每个元素都表示对一个组及其键的投影。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>基于键相等对两个序列的元素进行关联并对结果进行分组。使用默认的相等比较器对键进行比较。</summary>
      <returns>一个包含 <paramref name="TResult" /> 类型的元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，这些元素可通过对两个序列执行分组联接获取。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>基于键相等对两个序列的元素进行关联并对结果进行分组。使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</summary>
      <returns>一个包含 <paramref name="TResult" /> 类型的元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，这些元素可通过对两个序列执行分组联接获取。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <param name="comparer">一个 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />，用于对键进行哈希处理和比较。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器对值进行比较生成两个序列的交集。</summary>
      <returns>包含组成两个序列交集的元素的序列。</returns>
      <param name="first">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将返回其也出现在 <paramref name="second" /> 中的非重复元素。</param>
      <param name="second">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将返回其也出现在第一个序列中的非重复元素。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较产生两个序列的交集。</summary>
      <returns>包含组成两个序列交集的元素的序列。</returns>
      <param name="first">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将返回其也出现在 <paramref name="second" /> 中的非重复元素。</param>
      <param name="second">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将返回其也出现在第一个序列中的非重复元素。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>基于匹配键对两个序列的元素进行关联。使用默认的相等比较器对键进行比较。</summary>
      <returns>一个具有 <paramref name="TResult" /> 类型元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，这些元素是通过对两个序列执行内部联接得来的。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从两个匹配元素创建结果元素的函数。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>基于匹配键对两个序列的元素进行关联。使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</summary>
      <returns>一个具有 <paramref name="TResult" /> 类型元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，这些元素是通过对两个序列执行内部联接得来的。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从两个匹配元素创建结果元素的函数。</param>
      <param name="comparer">一个 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />，用于对键进行哈希处理和比较。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回序列的最后一个元素。</summary>
      <returns>源序列中最后位置处的值。</returns>
      <param name="source">要返回其最后一个元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足指定条件的最后一个元素。</summary>
      <returns>序列中通过指定谓词函数中的测试的最后一个元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足 <paramref name="predicate" /> 中的条件。- 或 -源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回序列中的最后一个元素；如果序列中不包含任何元素，则返回默认值。</summary>
      <returns>如果源序列为空，则返回默认值 (<paramref name="TSource" />)；否则返回 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 中的最后一个元素。</returns>
      <param name="source">要返回其最后一个元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足条件的最后一个元素；如果未找到这样的元素，则返回默认值。</summary>
      <returns>如果序列为空或没有元素通过谓词函数中的测试，则返回默认值 (<paramref name="TSource" />)；否则返回通过谓词函数中的测试的最后一个元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回一个 <see cref="T:System.Int64" />，表示序列中的元素的总数量。</summary>
      <returns>源序列中的元素的数量。</returns>
      <param name="source">包含要进行计数的元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">元素的数量超过 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回一个 <see cref="T:System.Int64" />，表示序列中满足条件的元素的数量。</summary>
      <returns>一个数字，表示序列中满足谓词函数条件的元素数量。</returns>
      <param name="source">包含要进行计数的元素的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">匹配元素的数量超过 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>返回 <see cref="T:System.Decimal" /> 值序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>返回 <see cref="T:System.Double" /> 值序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>返回 <see cref="T:System.Int32" /> 值序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>返回 <see cref="T:System.Int64" /> 值序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>返回可以为 null 的 <see cref="T:System.Decimal" /> 值序列中的最大值。</summary>
      <returns>一个与序列中的最大值相对应的值，该值的类型在 C# 中为 Nullable&lt;Decimal&gt;，在 Visual Basic 中为 Nullable(Of Decimal)。</returns>
      <param name="source">要确定其最大值的可以为 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>返回可以为 null 的 <see cref="T:System.Double" /> 值序列中的最大值。</summary>
      <returns>一个与序列中的最大值相对应的值，该值的类型在 C# 中为 Nullable&lt;Double&gt;，在 Visual Basic 中为 Nullable(Of Double)。</returns>
      <param name="source">要确定其最大值的可以为 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>返回可以为 null 的 <see cref="T:System.Int32" /> 值序列中的最大值。</summary>
      <returns>一个与序列中的最大值相对应的值，该值的类型在 C# 中为 Nullable&lt;Int32&gt;，在 Visual Basic 中为 Nullable(Of Int32)。</returns>
      <param name="source">要确定其最大值的可以为 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>返回可以为 null 的 <see cref="T:System.Int64" /> 值序列中的最大值。</summary>
      <returns>一个与序列中的最大值相对应的值，该值的类型在 C# 中为 Nullable&lt;Int64&gt;，在 Visual Basic 中为 Nullable(Of Int64)。</returns>
      <param name="source">要确定其最大值的可以为 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>返回可以为 null 的 <see cref="T:System.Single" /> 值序列中的最大值。</summary>
      <returns>一个与序列中的最大值相对应的值，该值的类型在 C# 中为 Nullable&lt;Single&gt;，在 Visual Basic 中为 Nullable(Of Single)。</returns>
      <param name="source">要确定其最大值的可以为 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>返回 <see cref="T:System.Single" /> 值序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回泛型序列中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>调用序列的每个元素上的转换函数并返回 <see cref="T:System.Decimal" /> 的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>调用序列的每个元素上的转换函数并返回 <see cref="T:System.Double" /> 的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>调用序列的每个元素上的转换函数并返回 <see cref="T:System.Int32" /> 的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>调用序列的每个元素上的转换函数并返回 <see cref="T:System.Int64" /> 的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>调用序列的每个元素上的转换函数并返回可以为 null 的 <see cref="T:System.Decimal" /> 的最大值。</summary>
      <returns>一个与序列中的最大值相对应的值，该值的类型在 C# 中为 Nullable&lt;Decimal&gt;，在 Visual Basic 中为 Nullable(Of Decimal)。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>调用序列的每个元素上的转换函数并返回可以为 null 的 <see cref="T:System.Double" /> 的最大值。</summary>
      <returns>一个与序列中的最大值相对应的值，该值的类型在 C# 中为 Nullable&lt;Double&gt;，在 Visual Basic 中为 Nullable(Of Double)。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>调用序列的每个元素上的转换函数并返回可以为 null 的 <see cref="T:System.Int32" /> 的最大值。</summary>
      <returns>一个与序列中的最大值相对应的值，该值的类型在 C# 中为 Nullable&lt;Int32&gt;，在 Visual Basic 中为 Nullable(Of Int32)。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>调用序列的每个元素上的转换函数并返回可以为 null 的 <see cref="T:System.Int64" /> 的最大值。</summary>
      <returns>一个与序列中的最大值相对应的值，该值的类型在 C# 中为 Nullable&lt;Int64&gt;，在 Visual Basic 中为 Nullable(Of Int64)。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>调用序列的每个元素上的转换函数并返回可以为 null 的 <see cref="T:System.Single" /> 的最大值。</summary>
      <returns>一个与序列中的最大值相对应的值，该值的类型在 C# 中为 Nullable&lt;Single&gt;，在 Visual Basic 中为 Nullable(Of Single)。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>调用序列的每个元素上的转换函数并返回 <see cref="T:System.Single" /> 的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>调用泛型序列的每个元素上的转换函数并返回最大结果值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定其最大值的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>返回 <see cref="T:System.Decimal" /> 值序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要确定其最小值的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>返回 <see cref="T:System.Double" /> 值序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要确定其最小值的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>返回 <see cref="T:System.Int32" /> 值序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要确定其最小值的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>返回 <see cref="T:System.Int64" /> 值序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要确定其最小值的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>返回可以为 null 的 <see cref="T:System.Decimal" /> 值序列中的最小值。</summary>
      <returns>一个与序列中的最小值相对应的值，该值的类型在 C# 中为 Nullable&lt;Decimal&gt;，在 Visual Basic 中为 Nullable(Of Decimal)。</returns>
      <param name="source">要确定其最小值的可以为 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>返回可以为 null 的 <see cref="T:System.Double" /> 值序列中的最小值。</summary>
      <returns>一个与序列中的最小值相对应的值，该值的类型在 C# 中为 Nullable&lt;Double&gt;，在 Visual Basic 中为 Nullable(Of Double)。</returns>
      <param name="source">要确定其最小值的可以为 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>返回可以为 null 的 <see cref="T:System.Int32" /> 值序列中的最小值。</summary>
      <returns>一个与序列中的最小值相对应的值，该值的类型在 C# 中为 Nullable&lt;Int32&gt;，在 Visual Basic 中为 Nullable(Of Int32)。</returns>
      <param name="source">要确定其最小值的可以为 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>返回可以为 null 的 <see cref="T:System.Int64" /> 值序列中的最小值。</summary>
      <returns>一个与序列中的最小值相对应的值，该值的类型在 C# 中为 Nullable&lt;Int64&gt;，在 Visual Basic 中为 Nullable(Of Int64)。</returns>
      <param name="source">要确定其最小值的可以为 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>返回可以为 null 的 <see cref="T:System.Single" /> 值序列中的最小值。</summary>
      <returns>一个与序列中的最小值相对应的值，该值的类型在 C# 中为 Nullable&lt;Single&gt;，在 Visual Basic 中为 Nullable(Of Single)。</returns>
      <param name="source">要确定其最小值的可以为 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>返回 <see cref="T:System.Single" /> 值序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要确定其最小值的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回泛型序列中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>调用序列的每个元素上的转换函数并返回 <see cref="T:System.Decimal" /> 的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>调用序列的每个元素上的转换函数并返回 <see cref="T:System.Double" /> 的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>调用序列的每个元素上的转换函数并返回 <see cref="T:System.Int32" /> 的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>调用序列的每个元素上的转换函数并返回 <see cref="T:System.Int64" /> 的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>调用序列的每个元素上的转换函数并返回可以为 null 的 <see cref="T:System.Decimal" /> 的最小值。</summary>
      <returns>一个与序列中的最小值相对应的值，该值的类型在 C# 中为 Nullable&lt;Decimal&gt;，在 Visual Basic 中为 Nullable(Of Decimal)。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>调用序列的每个元素上的转换函数并返回可以为 null 的 <see cref="T:System.Double" /> 的最小值。</summary>
      <returns>一个与序列中的最小值相对应的值，该值的类型在 C# 中为 Nullable&lt;Double&gt;，在 Visual Basic 中为 Nullable(Of Double)。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>调用序列的每个元素上的转换函数并返回可以为 null 的 <see cref="T:System.Int32" /> 的最小值。</summary>
      <returns>一个与序列中的最小值相对应的值，该值的类型在 C# 中为 Nullable&lt;Int32&gt;，在 Visual Basic 中为 Nullable(Of Int32)。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>调用序列的每个元素上的转换函数并返回可以为 null 的 <see cref="T:System.Int64" /> 的最小值。</summary>
      <returns>一个与序列中的最小值相对应的值，该值的类型在 C# 中为 Nullable&lt;Int64&gt;，在 Visual Basic 中为 Nullable(Of Int64)。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>调用序列的每个元素上的转换函数并返回可以为 null 的 <see cref="T:System.Single" /> 的最小值。</summary>
      <returns>一个与序列中的最小值相对应的值，该值的类型在 C# 中为 Nullable&lt;Single&gt;，在 Visual Basic 中为 Nullable(Of Single)。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>调用序列的每个元素上的转换函数并返回 <see cref="T:System.Single" /> 的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>调用泛型序列的每个元素上的转换函数并返回最小结果值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">一个值序列，用于确定最小值。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary>根据指定类型筛选 <see cref="T:System.Collections.IEnumerable" /> 的元素。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含类型为 <paramref name="TResult" /> 的输入序列中的元素。</returns>
      <param name="source">
        <see cref="T:System.Collections.IEnumerable" />，其元素用于筛选。</param>
      <typeparam name="TResult">筛选序列元素所根据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>根据键按升序对序列的元素排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，其元素按键排序。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按升序对序列的元素排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，其元素按键排序。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>根据键按降序对序列的元素排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，将根据键按降序对其元素进行排序。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按降序对序列的元素排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，将根据键按降序对其元素进行排序。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary>生成指定范围内的整数的序列。</summary>
      <returns>C# 中的 IEnumerable&lt;Int32&gt; 或 Visual Basic 中的 IEnumerable(Of Int32)，其中包含某个范围的顺序整数。</returns>
      <param name="start">序列中第一个整数的值。</param>
      <param name="count">要生成的顺序整数的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于 0。- 或 -<paramref name="start" /> + <paramref name="count" /> -1 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary>生成包含一个重复值的序列。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含一个重复值。</returns>
      <param name="element">要重复的值。</param>
      <param name="count">在生成序列中重复该值的次数。</param>
      <typeparam name="TResult">要在结果序列中重复的值的类型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于 0。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>反转序列中元素的顺序。</summary>
      <returns>一个序列，其元素以相反顺序对应于输入序列的元素。</returns>
      <param name="source">要反转的值序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>将序列中的每个元素投影到新表中。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素为对 <paramref name="source" /> 的每个元素调用转换函数的结果。</returns>
      <param name="source">一个值序列，要对该序列调用转换函数。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary>通过合并元素的索引将序列的每个元素投影到新表中。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素为对 <paramref name="source" /> 的每个元素调用转换函数的结果。</returns>
      <param name="source">一个值序列，要对该序列调用转换函数。</param>
      <param name="selector">一个应用于每个源元素的转换函数；函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>将序列的每个元素投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" />，并将结果序列合并为一个序列，并对其中每个元素调用结果选择器函数。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是对 <paramref name="source" /> 的每个元素调用一对多转换函数 <paramref name="collectionSelector" />，然后将那些序列元素中的每一个及其相应的源元素映射为结果元素的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="collectionSelector">一个应用于输入序列的每个元素的转换函数。</param>
      <param name="resultSelector">一个应用于中间序列的每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" /> 收集的中间元素的类型。</typeparam>
      <typeparam name="TResult">结果序列的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>将序列的每个元素投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 并将结果序列合并为一个序列。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是对输入序列的每个元素调用一对多转换函数的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 返回的序列元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>将序列的每个元素投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" />，并将结果序列合并为一个序列，并对其中每个元素调用结果选择器函数。每个源元素的索引用于该元素的中间投影表。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是对 <paramref name="source" /> 的每个元素调用一对多转换函数 <paramref name="collectionSelector" />，然后将那些序列元素中的每一个及其相应的源元素映射为结果元素的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="collectionSelector">一个应用于每个源元素的转换函数；函数的第二个参数表示源元素的索引。</param>
      <param name="resultSelector">一个应用于中间序列的每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TCollection">
        <paramref name="collectionSelector" /> 收集的中间元素的类型。</typeparam>
      <typeparam name="TResult">结果序列的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>将序列的每个元素投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 并将结果序列合并为一个序列。每个源元素的索引用于该元素的投影表。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素是对输入序列的每个元素调用一对多转换函数的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">一个应用于每个源元素的转换函数；函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> 返回的序列元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用相应类型的默认相等比较器对序列的元素进行比较，以确定两个序列是否相等。</summary>
      <returns>如果根据相应类型的默认相等比较器，两个源序列的长度相等，且其相应元素相等，则为 true；否则为 false。</returns>
      <param name="first">要与 <paramref name="second" /> 进行比较的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="second">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于与第一个序列进行比较。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对两个序列的元素进行比较，以确定序列是否相等。</summary>
      <returns>如果根据 <paramref name="comparer" />，两个源序列的长度相等，且其相应元素相等，则为 true；否则为 false。</returns>
      <param name="first">要与 <paramref name="second" /> 进行比较的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="second">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于与第一个序列进行比较。</param>
      <param name="comparer">一个用于比较元素的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 具有多个元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。</summary>
      <returns>输入序列的单个元素。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于返回单个元素。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">输入序列包含多个元素。- 或 -输入序列为空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足指定条件的唯一元素；如果有多个这样的元素存在，则会引发异常。</summary>
      <returns>输入序列中满足条件的单个元素。</returns>
      <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于从中返回单个元素。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足 <paramref name="predicate" /> 中的条件。- 或 -多个元素满足 <paramref name="predicate" />. 中的条件。- 或 -源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>返回序列中的唯一元素；如果该序列为空，则返回默认值；如果该序列包含多个元素，此方法将引发异常。</summary>
      <returns>返回输入序列的单个元素；如果序列不包含任何元素，则返回默认值 (<paramref name="TSource" />)。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于返回单个元素。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">输入序列包含多个元素。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>返回序列中满足指定条件的唯一元素；如果这类元素不存在，则返回默认值；如果有多个元素满足该条件，此方法将引发异常。</summary>
      <returns>返回输入序列中满足条件的单个元素；如果未找到这样的元素，则返回默认值 (<paramref name="TSource" />)。</returns>
      <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于从中返回单个元素。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>跳过序列中指定数量的元素，然后返回剩余的元素。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 包含输入序列中指定索引后出现的元素。</returns>
      <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于从中返回元素。</param>
      <param name="count">返回剩余元素前要跳过的元素数量。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>只要满足指定的条件，就跳过序列中的元素，然后返回剩余元素。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列中的元素，该输入序列从线性系列中没有通过 <paramref name="predicate" /> 指定测试的第一个元素开始。</returns>
      <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于从中返回元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>只要满足指定的条件，就跳过序列中的元素，然后返回剩余元素。将在谓词函数的逻辑中使用元素的索引。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列中的元素，该输入序列从线性系列中没有通过 <paramref name="predicate" /> 指定测试的第一个元素开始。</returns>
      <param name="source">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，用于从中返回元素。</param>
      <param name="predicate">用于测试每个源元素是否满足条件的函数；该函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>计算 <see cref="T:System.Decimal" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>计算 <see cref="T:System.Double" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>计算 <see cref="T:System.Int32" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>计算 <see cref="T:System.Int64" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的可以为 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>计算可以为 null 的 <see cref="T:System.Double" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的可以为 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int32" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的可以为 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int64" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的可以为 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>计算可以为 null 的 <see cref="T:System.Single" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的可以为 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>计算 <see cref="T:System.Single" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>计算 <see cref="T:System.Decimal" /> 值序列的和，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>计算 <see cref="T:System.Double" /> 值序列的和，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>计算 <see cref="T:System.Int32" /> 值序列的和，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>计算 <see cref="T:System.Int64" /> 值序列的和，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列的和，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>计算可以为 null 的 <see cref="T:System.Double" /> 值序列的和，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int32" /> 值序列的和，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int64" /> 值序列的和，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>计算可以为 null 的 <see cref="T:System.Single" /> 值序列的和，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>计算 <see cref="T:System.Single" /> 值序列的和，该值可通过调用输入序列的每个元素的转换函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">用于计算和的值序列。</param>
      <param name="selector">应用于每个元素的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>从序列的开头返回指定数量的连续元素。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列开头的指定数量的元素。</returns>
      <param name="source">要从其返回元素的序列。</param>
      <param name="count">要返回的元素数量。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>只要满足指定的条件，就会返回序列的元素。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列中出现在测试不再能够通过的元素之前的元素。</returns>
      <param name="source">要从其返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>只要满足指定的条件，就会返回序列的元素。将在谓词函数的逻辑中使用元素的索引。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列中出现在测试不再能够通过的元素之前的元素。</returns>
      <param name="source">要从其返回元素的序列。</param>
      <param name="predicate">用于测试每个源元素是否满足条件的函数；该函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>根据某个键按升序对序列中的元素执行后续排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，其元素按键排序。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按升序对序列中的元素执行后续排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，其元素按键排序。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>根据某个键按降序对序列中的元素执行后续排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，将根据键按降序对其元素进行排序。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按降序对序列中的元素执行后续排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，将根据键按降序对其元素进行排序。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个数组。</summary>
      <returns>一个包含输入序列中的元素的数组。</returns>
      <param name="source">要从其创建数组的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>根据指定的键选择器函数，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>一个包含键和值的 <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <param name="source">用于从中创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。- 或 -<paramref name="keySelector" /> 产生了一个 null 键。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 为两个元素产生了重复键。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数和键比较器，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>一个包含键和值的 <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
      <param name="source">用于从中创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。- 或 -<paramref name="keySelector" /> 产生了一个 null 键。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 为两个元素产生了重复键。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>根据指定的键选择器和元素选择器函数，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，包含从输入序列中选择的类型为 <paramref name="TElement" /> 的值。</returns>
      <param name="source">用于从中创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。- 或 -<paramref name="keySelector" /> 产生了一个 null 键。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 为两个元素产生了重复键。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数、比较器和元素选择器函数从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Collections.Generic.Dictionary`2" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.Dictionary`2" />，包含从输入序列中选择的类型为 <paramref name="TElement" /> 的值。</returns>
      <param name="source">用于从中创建 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。- 或 -<paramref name="keySelector" /> 产生了一个 null 键。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> 为两个元素产生了重复键。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>一个包含输入序列中元素的 <see cref="T:System.Collections.Generic.List`1" />。</returns>
      <param name="source">用于从中创建 <see cref="T:System.Collections.Generic.List`1" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>根据指定的键选择器函数，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Linq.Lookup`2" />。</summary>
      <returns>一个包含键和值的 <see cref="T:System.Linq.Lookup`2" />。</returns>
      <param name="source">用于从中创建 <see cref="T:System.Linq.Lookup`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数和键比较器，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Linq.Lookup`2" />。</summary>
      <returns>一个包含键和值的 <see cref="T:System.Linq.Lookup`2" />。</returns>
      <param name="source">用于从中创建 <see cref="T:System.Linq.Lookup`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>根据指定的键选择器和元素选择器函数，从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Linq.Lookup`2" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Lookup`2" />，包含从输入序列中选择的类型为 <paramref name="TElement" /> 的值。</returns>
      <param name="source">用于从中创建 <see cref="T:System.Linq.Lookup`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数、比较器和元素选择器函数从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 创建一个 <see cref="T:System.Linq.Lookup`2" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Lookup`2" />，包含从输入序列中选择的类型为 <paramref name="TElement" /> 的值。</returns>
      <param name="source">用于从中创建 <see cref="T:System.Linq.Lookup`2" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="elementSelector">用于从每个元素产生结果元素值的转换函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 返回的键的类型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> 返回的值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器生成两个序列的并集。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含两个输入序列中的非重复元素。</returns>
      <param name="first">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它的非重复元素构成联合的第一个集。</param>
      <param name="second">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它的非重复元素构成联合的第二个集。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 生成两个序列的并集。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含两个输入序列中的非重复元素。</returns>
      <param name="first">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它的非重复元素构成联合的第一个集。</param>
      <param name="second">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它的非重复元素构成联合的第二个集。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>基于谓词筛选值序列。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列中满足条件的元素。</returns>
      <param name="source">要筛选的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>基于谓词筛选值序列。将在谓词函数的逻辑中使用每个元素的索引。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含输入序列中满足条件的元素。</returns>
      <param name="source">要筛选的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="predicate">用于测试每个源元素是否满足条件的函数；该函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>通过使用指定的谓词函数合并两个序列。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含两个输入序列的已合并元素。</returns>
      <param name="first">要合并的第一个序列。</param>
      <param name="second">要合并的第二个序列。</param>
      <param name="resultSelector">用于指定如何合并这两个序列的元素的函数。</param>
      <typeparam name="TFirst">第一个输入序列中的元素的类型。</typeparam>
      <typeparam name="TSecond">第二个输入序列中的元素的类型。</typeparam>
      <typeparam name="TResult">结果序列的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> 或 <paramref name="second" /> 为 null。</exception>
    </member>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary>表示一个表达式目录树，并提供在重写该表达式目录树后执行该表达式目录树的功能。</summary>
    </member>
    <member name="M:System.Linq.EnumerableExecutor.#ctor">
      <summary>初始化 <see cref="T:System.Linq.EnumerableExecutor" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary>表示一个表达式目录树，并提供在重写该表达式目录树后执行该表达式目录树的功能。</summary>
      <typeparam name="T">执行表达式目录树后所得到的值的数据类型。</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>初始化 <see cref="T:System.Linq.EnumerableExecutor`1" /> 类的新实例。</summary>
      <param name="expression">要与新实例关联的表达式目录树。</param>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary>将 <see cref="T:System.Collections.IEnumerable" /> 表示为 <see cref="T:System.Linq.EnumerableQuery" /> 数据源。</summary>
    </member>
    <member name="M:System.Linq.EnumerableQuery.#ctor">
      <summary>初始化 <see cref="T:System.Linq.EnumerableQuery" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary>将 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合表示为 <see cref="T:System.Linq.IQueryable`1" /> 数据源。</summary>
      <typeparam name="T">集合中数据的类型。</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Linq.EnumerableQuery`1" /> 类的新实例，并将该实例与 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合关联。</summary>
      <param name="enumerable">要与新实例关联的集合。</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>初始化 <see cref="T:System.Linq.EnumerableQuery`1" /> 类的新实例，并将该实例与表达式目录树关联。</summary>
      <param name="expression">要与新实例关联的表达式目录树。</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个枚举器，该枚举器可以循环访问关联的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合，如果该集合为空，则循环访问通过将关联的表达式目录树重写为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 数据源上的查询并执行该查询而得到的集合。</summary>
      <returns>可用来循环访问关联的数据源的枚举器。</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个枚举器，该枚举器可以循环访问关联的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合，如果该集合为空，则循环访问通过将关联的表达式目录树重写为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 数据源上的查询并执行该查询而得到的集合。</summary>
      <returns>可用来循环访问关联的数据源的枚举器。</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary>获取该实例所表示的集合中的数据的类型。</summary>
      <returns>该实例所表示的集合中的数据的类型。</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary>获取与该实例关联或者表示该实例的表达式目录树。</summary>
      <returns>与该实例关联或者表示该实例的表达式目录树。</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary>获取与该实例关联的查询提供程序。</summary>
      <returns>与该实例关联的查询提供程序。</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>构造一个新的 <see cref="T:System.Linq.EnumerableQuery`1" /> 对象，并将它与表示 <see cref="T:System.Linq.IQueryable`1" /> 数据集合的指定表达式目录树关联。</summary>
      <returns>与 <paramref name="expression" /> 关联的 EnumerableQuery 对象。</returns>
      <param name="expression">要执行的表达式目录树。</param>
      <typeparam name="S">
        <paramref name="expression" /> 所表示的集合中的数据的类型。</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>构造一个新的 <see cref="T:System.Linq.EnumerableQuery`1" /> 对象，并将它与表示 <see cref="T:System.Linq.IQueryable" /> 数据集合的指定表达式目录树关联。</summary>
      <returns>与 <paramref name="expression" /> 关联的 <see cref="T:System.Linq.EnumerableQuery`1" /> 对象。</returns>
      <param name="expression">表示 <see cref="T:System.Linq.IQueryable" /> 数据集合的表达式目录树。</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>在重写表达式后执行表达式，重写的目的是对无法通过 <see cref="T:System.Linq.Queryable" /> 方法查询的任何可枚举器据源调用 <see cref="T:System.Linq.Enumerable" /> 方法，而不是调用 <see cref="T:System.Linq.Queryable" /> 方法。</summary>
      <returns>执行 <paramref name="expression" /> 后所得到的值。</returns>
      <param name="expression">要执行的表达式目录树。</param>
      <typeparam name="S">
        <paramref name="expression" /> 所表示的集合中的数据的类型。</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>在重写表达式后执行表达式，重写的目的是对无法通过 <see cref="T:System.Linq.Queryable" /> 方法查询的任何可枚举器据源调用 <see cref="T:System.Linq.Enumerable" /> 方法，而不是调用 <see cref="T:System.Linq.Queryable" /> 方法。</summary>
      <returns>执行 <paramref name="expression" /> 后所得到的值。</returns>
      <param name="expression">要执行的表达式目录树。</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary>返回可枚举集合的文本表示形式；如果该集合为 null，则返回与此实例关联的表达式目录树的文本表示形式。</summary>
      <returns>可枚举集合的文本表示形式；如果该集合为 null，则为与此实例关联的表达式目录树的文本表示形式。</returns>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary>表示具有公共键的对象的集合。</summary>
      <typeparam name="TKey">
        <see cref="T:System.Linq.IGrouping`2" /> 的键的类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.IGrouping`2" /> 的值的类型。</typeparam>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary>获取 <see cref="T:System.Linq.IGrouping`2" /> 的键。</summary>
      <returns>
        <see cref="T:System.Linq.IGrouping`2" /> 的键。</returns>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary>定义索引器、大小属性以及将键映射到 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 值序列的数据结构的布尔搜索方法。</summary>
      <typeparam name="TKey">
        <see cref="T:System.Linq.ILookup`2" /> 中的键的类型。</typeparam>
      <typeparam name="TElement">组成 <see cref="T:System.Linq.ILookup`2" /> 中的值的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary>确定指定的键是否位于 <see cref="T:System.Linq.ILookup`2" /> 中。</summary>
      <returns>如果 <paramref name="key" /> 在 <see cref="T:System.Linq.ILookup`2" /> 中，则为 true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Linq.ILookup`2" /> 中搜索的键。</param>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary>获取包含在 <see cref="T:System.Linq.ILookup`2" /> 中的键/值集合对的数目。</summary>
      <returns>
        <see cref="T:System.Linq.ILookup`2" /> 中键/值对集合的数目。</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary>获取按指定键进行索引的值的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</summary>
      <returns>按指定键进行索引的值的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</returns>
      <param name="key">所需值序列的键。</param>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary>表示已排序序列。</summary>
      <typeparam name="TElement">序列中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary>根据某个键对 <see cref="T:System.Linq.IOrderedEnumerable`1" /> 的元素执行后续排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedEnumerable`1" />，其元素按键排序。</returns>
      <param name="keySelector">用于提取每个元素的键的 <see cref="T:System.Func`2" />。</param>
      <param name="comparer">用于比较键在返回序列中的位置的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <param name="descending">如果为 true，则对元素进行降序排序；如果为 false，则对元素进行升序排序。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> 生成的键的类型。</typeparam>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>表示排序操作的结果。</summary>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>表示排序操作的结果。</summary>
      <typeparam name="T">数据源中数据的类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>提供对未指定数据类型的特定数据源的查询进行计算的功能。</summary>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>获取在执行与 <see cref="T:System.Linq.IQueryable" /> 的此实例关联的表达式目录树时返回的元素的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，表示在执行与此对象关联的表达式目录树时返回的元素的类型。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>获取与 <see cref="T:System.Linq.IQueryable" /> 的实例关联的表达式目录树。</summary>
      <returns>与 <see cref="T:System.Linq.IQueryable" /> 的此实例关联的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>获取与此数据源关联的查询提供程序。</summary>
      <returns>与此数据源关联的 <see cref="T:System.Linq.IQueryProvider" />。</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>提供对数据类型已知的特定数据源的查询进行计算的功能。</summary>
      <typeparam name="T">数据源中数据的类型。该类型参数是协变的。即可以使用指定的类型或派生程度更高的类型。 有关协变和逆变的更多信息，请参阅[2678dc63-c7f9-4590-9ddc-0a4df684d42e]。</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>定义用于创建和执行 <see cref="T:System.Linq.IQueryable" /> 对象所描述的查询的方法。</summary>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>构造一个 <see cref="T:System.Linq.IQueryable`1" /> 对象，该对象可计算指定表达式目录树所表示的查询。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，它可计算指定表达式目录树所表示的查询。</returns>
      <param name="expression">表示 LINQ 查询的表达式目录树。</param>
      <typeparam name="TElement">返回的 <see cref="T:System.Linq.IQueryable`1" /> 元素的类型。</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>构造一个 <see cref="T:System.Linq.IQueryable" /> 对象，该对象可计算指定表达式目录树所表示的查询。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable" />，它可计算指定表达式树所表示的查询。</returns>
      <param name="expression">表示 LINQ 查询的表达式目录树。</param>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>执行指定表达式目录树所表示的强类型查询。</summary>
      <returns>执行指定查询所生成的值。</returns>
      <param name="expression">表示 LINQ 查询的表达式目录树。</param>
      <typeparam name="TResult">执行查询所生成的值的类型。</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>执行指定表达式目录树所表示的查询。</summary>
      <returns>执行指定查询所生成的值。</returns>
      <param name="expression">表示 LINQ 查询的表达式目录树。</param>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary>表示映射到一个或多个值的各个键的集合。</summary>
      <typeparam name="TKey">
        <see cref="T:System.Linq.Lookup`2" /> 中的键的类型。</typeparam>
      <typeparam name="TElement">
        <see cref="T:System.Linq.Lookup`2" /> 中的每个 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 值的元素的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary>对每个键及其关联值应用转换函数，并返回结果。</summary>
      <returns>包含 <see cref="T:System.Linq.Lookup`2" /> 中的各个键/值对集合中的一个值的集合。</returns>
      <param name="resultSelector">从每个键及其关联值投影结果值的函数。</param>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 生成的结果值的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary>确定指定的键是否位于 <see cref="T:System.Linq.Lookup`2" /> 中。</summary>
      <returns>如果 <paramref name="key" /> 在 <see cref="T:System.Linq.Lookup`2" /> 中，则为true；否则为 false。</returns>
      <param name="key">要在 <see cref="T:System.Linq.Lookup`2" /> 中查找的键。</param>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary>获取包含在 <see cref="T:System.Linq.Lookup`2" /> 中的键/值集合对的数目。</summary>
      <returns>
        <see cref="T:System.Linq.Lookup`2" /> 中键/值对集合的数目。</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary>返回一个循环访问 <see cref="T:System.Linq.Lookup`2" /> 的泛型枚举器。</summary>
      <returns>
        <see cref="T:System.Linq.Lookup`2" /> 的枚举器。</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary>获取按指定键进行索引的值的集合。</summary>
      <returns>按指定键进行索引的值的集合。</returns>
      <param name="key">所需值集合的键。</param>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问 <see cref="T:System.Linq.Lookup`2" /> 的枚举器。无法继承此类。</summary>
      <returns>
        <see cref="T:System.Linq.Lookup`2" /> 的枚举器。</returns>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary>提供一组用于查询实现 <see cref="T:System.Linq.IQueryable`1" /> 的数据结构的 static（在 Visual Basic 中为 Shared）方法。</summary>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary>对序列应用累加器函数。</summary>
      <returns>累加器的最终值。</returns>
      <param name="source">要聚合的序列。</param>
      <param name="func">要应用于每个元素的累加器函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary>对序列应用累加器函数。指定的种子值用作初始的累加器值。</summary>
      <returns>累加器的最终值。</returns>
      <param name="source">要聚合的序列。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary>对序列应用累加器函数。将指定的种子值用作累加器的初始值，并使用指定的函数选择结果值。</summary>
      <returns>已转换的累加器最终值。</returns>
      <param name="source">要聚合的序列。</param>
      <param name="seed">累加器的初始值。</param>
      <param name="func">要对每个元素调用的累加器函数。</param>
      <param name="selector">将累加器的最终值转换为结果值的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TAccumulate">累加器值的类型。</typeparam>
      <typeparam name="TResult">结果值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="func" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>确定序列中的所有元素是否都满足条件。</summary>
      <returns>如果源序列中的每个元素都通过指定谓词中的测试，或者序列为空，则为 true；否则为 false。</returns>
      <param name="source">要测试其元素是否满足条件的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary>确定序列是否包含任何元素。</summary>
      <returns>如果源序列包含任何元素，则为 true；否则为 false。</returns>
      <param name="source">要检查是否为空的序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>确定序列中的任何元素是否都满足条件。</summary>
      <returns>如果源序列中的任何元素都通过指定谓词中的测试，则为 true；否则为 false。</returns>
      <param name="source">要测试其元素是否满足条件的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>将泛型 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 转换为泛型 <see cref="T:System.Linq.IQueryable`1" />。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，表示输入序列。</returns>
      <param name="source">要转换的序列。</param>
      <typeparam name="TElement">
        <paramref name="source" /> 的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary>将 <see cref="T:System.Collections.IEnumerable" /> 转换为 <see cref="T:System.Linq.IQueryable" />。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable" />，表示输入序列。</returns>
      <param name="source">要转换的序列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 未为某些 <paramref name="T" /> 实现 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary>计算 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary>计算 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary>计算 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary>计算 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的可以为 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>计算可以为 null 的 <see cref="T:System.Double" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的可以为 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int32" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的可以为 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int64" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的可以为 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>计算可以为 null 的 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>值序列的平均值；如果源序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的可以为 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary>计算 <see cref="T:System.Single" /> 值序列的平均值。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>计算 <see cref="T:System.Decimal" /> 值序列的平均值，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">用于计算平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>计算 <see cref="T:System.Double" /> 值序列的平均值，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>计算 <see cref="T:System.Int32" /> 值序列的平均值，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>计算 <see cref="T:System.Int64" /> 值序列的平均值，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列的平均值，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>值序列的平均值；如果 <paramref name="source" /> 序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Double" /> 值序列的平均值，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>值序列的平均值；如果 <paramref name="source" /> 序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int32" /> 值序列的平均值，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>值序列的平均值；如果 <paramref name="source" /> 序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int64" /> 值序列的平均值，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>值序列的平均值；如果 <paramref name="source" /> 序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Single" /> 值序列的平均值，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>值序列的平均值；如果 <paramref name="source" /> 序列为空或仅包含为 null 的值，则为 null。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>计算 <see cref="T:System.Single" /> 值序列的平均值，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>值序列的平均值。</returns>
      <param name="source">要计算其平均值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 中不包含任何元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary>将 <see cref="T:System.Linq.IQueryable" /> 的元素转换为指定的类型。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含已转换为指定类型的源序列的每个元素。</returns>
      <param name="source">包含要转换的元素的 <see cref="T:System.Linq.IQueryable" />。</param>
      <typeparam name="TResult">
        <paramref name="source" /> 中的元素要转换成的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidCastException">序列中的元素不能强制转换为 <paramref name="TResult" /> 类型。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>连接两个序列。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含两个输入序列的连接元素。</returns>
      <param name="source1">要连接的第一个序列。</param>
      <param name="source2">要与第一个序列连接的序列。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary>通过使用默认的相等比较器确定序列是否包含指定的元素。</summary>
      <returns>如果输入序列包含具有指定值的元素，则为 true；否则为 false。</returns>
      <param name="source">要在其中定位 <paramref name="item" /> 的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="item">要在序列中定位的对象。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 确定序列是否包含指定的元素。</summary>
      <returns>如果输入序列包含具有指定值的元素，则为 true；否则为 false。</returns>
      <param name="source">要在其中定位 <paramref name="item" /> 的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="item">要在序列中定位的对象。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary>返回序列中的元素数量。</summary>
      <returns>输入序列中的元素数量。</returns>
      <param name="source">包含要进行计数的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回指定序列中满足条件的元素数量。</summary>
      <returns>序列中满足谓词函数的条件的元素数量。</returns>
      <param name="source">包含要进行计数的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 中的元素数量大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary>返回指定序列的元素；如果序列为空，则返回单一实例集合中的类型参数的默认值。</summary>
      <returns>用于在 <paramref name="source" /> 为空的情况下，包含默认值 (<paramref name="TSource" />) 的 <see cref="T:System.Linq.IQueryable`1" />；否则为 <paramref name="source" />。</returns>
      <param name="source">用于在序列为空的情况下返回默认值的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary>返回指定序列中的元素；如果序列为空，则返回单一实例集合中的指定值。</summary>
      <returns>用于在 <paramref name="source" /> 为空的情况下包含 <paramref name="defaultValue" /> 的 <see cref="T:System.Linq.IQueryable`1" />；否则为 <paramref name="source" />。</returns>
      <param name="source">用于在序列为空的情况下返回指定值的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="defaultValue">序列为空时要返回的值。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary>通过使用默认的相等比较器对值进行比较返回序列中的非重复元素。</summary>
      <returns>包含 <paramref name="source" /><see cref="中的非重复元素的T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">要从中移除重复项的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较返回序列中的非重复元素。</summary>
      <returns>包含 <paramref name="source" /><see cref="中的非重复元素的T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">要从中移除重复项的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>返回序列中指定索引处的元素。</summary>
      <returns>
        <paramref name="source" /> 中指定位置处的元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="index">要检索的从零开始的元素索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>返回序列中指定索引处的元素；如果索引超出范围，则返回默认值。</summary>
      <returns>如果 <paramref name="index" /> 超出 <paramref name="source" /> 的界限，则返回默认值 (<paramref name="TSource" />)；否则返回 <paramref name="source" /> 中指定位置处的元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="index">要检索的从零开始的元素索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器对值进行比较生成两个序列的差集。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含两个序列的差集。</returns>
      <param name="source1">一个 <see cref="T:System.Linq.IQueryable`1" />，将返回其也不在 <paramref name="source2" /> 中的元素。</param>
      <param name="source2">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其也出现在第一个序列中的元素将不会出现在返回的序列中。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较产生两个序列的差集。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含两个序列的差集。</returns>
      <param name="source1">一个 <see cref="T:System.Linq.IQueryable`1" />，将返回其也不在 <paramref name="source2" /> 中的元素。</param>
      <param name="source2">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其也出现在第一个序列中的元素将不会出现在返回的序列中。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary>返回序列中的第一个元素。</summary>
      <returns>
        <paramref name="source" /> 中的第一个元素。</returns>
      <param name="source">要返回其第一个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回序列中满足指定条件的第一个元素。</summary>
      <returns>通过 <paramref name="predicate" /> 中测试的 <paramref name="source" /> 的第一个元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足 <paramref name="predicate" /> 中的条件。- 或 -源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>返回序列中的第一个元素；如果序列中不包含任何元素，则返回默认值。</summary>
      <returns>如果 <paramref name="source" /> 为空；则返回默认值 (<paramref name="TSource" />)；否则返回 <paramref name="source" /> 中的第一个元素。</returns>
      <param name="source">要返回其第一个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回序列中满足指定条件的第一个元素，如果未找到这样的元素，则返回默认值。</summary>
      <returns>如果 <paramref name="source" /> 为空或没有元素通过 <paramref name="predicate" /> 指定的测试，则返回默认值 (<paramref name="TSource" />)，否则返回 <paramref name="predicate" /> 中通过 <paramref name="source" /> 指定测试的第一个元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组。</summary>
      <returns>C# 中的 IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; 或 Visual Basic 中的 IQueryable(Of IGrouping(Of TKey, TSource))，其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象都包含一个对象序列和一个键。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并使用指定的比较器对键进行比较。</summary>
      <returns>在 C# 中的 IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; 或 Visual Basic 中的 IQueryable(Of IGrouping(Of TKey, TSource))，其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象都包含一个对象序列和一个键。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且通过使用指定的函数对每个组中的元素进行投影。</summary>
      <returns>在 C# 中的 IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; 或 Visual Basic 中的 IQueryable(Of IGrouping(Of TKey, TElement))，其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象都包含一个类型 <paramref name="TElement" /> 的对象序列和一个键。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <typeparam name="TElement">每个 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>对序列中的元素进行分组并且通过使用指定的函数对每组中的元素进行投影。通过使用指定的比较器对键值进行比较。</summary>
      <returns>在 C# 中的 IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; 或 Visual Basic 中的 IQueryable(Of IGrouping(Of TKey, TElement))，其中每个 <see cref="T:System.Linq.IGrouping`2" /> 对象都包含一个类型 <paramref name="TElement" /> 的对象序列和一个键。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <typeparam name="TElement">每个 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。通过使用指定的函数对每个组的元素进行投影。</summary>
      <returns>一个具有 <paramref name="TResult" /> 的类型参数的 T:System.Linq.IQueryable`1，其中每个元素表示某个组及其键上的投影。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <typeparam name="TElement">每个 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。通过使用指定的比较器对键进行比较，并且通过使用指定的函数对每个组的元素进行投影。</summary>
      <returns>一个具有 <paramref name="TResult" /> 的类型参数的 T:System.Linq.IQueryable`1，其中每个元素表示某个组及其键上的投影。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="elementSelector">用于将每个源元素映射到 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <typeparam name="TElement">每个 <see cref="T:System.Linq.IGrouping`2" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="elementSelector" /> 或 <paramref name="resultSelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。</summary>
      <returns>一个具有 <paramref name="TResult" /> 的类型参数的 T:System.Linq.IQueryable`1，其中每个元素表示某个组及其键上的投影。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>根据指定的键选择器函数对序列中的元素进行分组，并且从每个组及其键中创建结果值。通过使用指定的比较器对键进行比较。</summary>
      <returns>一个具有 <paramref name="TResult" /> 的类型参数的 T:System.Linq.IQueryable`1，其中每个元素表示某个组及其键上的投影。</returns>
      <param name="source">要对其元素进行分组的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">用于提取每个元素的键的函数。</param>
      <param name="resultSelector">用于从每个组中创建结果值的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <typeparam name="TResult">
        <paramref name="resultSelector" /> 返回的结果值的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="resultSelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary>基于键相等对两个序列的元素进行关联并对结果进行分组。使用默认的相等比较器对键进行比较。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含通过对两个序列执行已分组的联接而获得的 <paramref name="TResult" /> 类型的元素。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>基于键相等对两个序列的元素进行关联并对结果进行分组。使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含通过对两个序列执行已分组的联接而获得的 <paramref name="TResult" /> 类型的元素。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从第一个序列的元素和第二个序列的匹配元素集合中创建结果元素的函数。</param>
      <param name="comparer">用于对键进行哈希处理和比较的比较器。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器对值进行比较生成两个序列的交集。</summary>
      <returns>一个包含两个序列的交集的序列。</returns>
      <param name="source1">一个序列，将返回其也出现在 <paramref name="source2" /> 中的非重复元素。</param>
      <param name="source2">一个序列，将返回其也在第一个序列中出现的非重复元素。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对值进行比较产生两个序列的交集。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含两个序列的交集。</returns>
      <param name="source1">一个 <see cref="T:System.Linq.IQueryable`1" />，将返回其也出现在 <paramref name="source2" /> 中的非重复元素。</param>
      <param name="source2">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，将返回其也出现在第一个序列中的非重复元素。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>基于匹配键对两个序列的元素进行关联。使用默认的相等比较器对键进行比较。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，具有通过对两个序列执行内部联接而获得的 <paramref name="TResult" /> 类型的元素。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从两个匹配元素创建结果元素的函数。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>基于匹配键对两个序列的元素进行关联。使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 对键进行比较。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，具有通过对两个序列执行内部联接而获得的 <paramref name="TResult" /> 类型的元素。</returns>
      <param name="outer">要联接的第一个序列。</param>
      <param name="inner">要与第一个序列联接的序列。</param>
      <param name="outerKeySelector">用于从第一个序列的每个元素提取联接键的函数。</param>
      <param name="innerKeySelector">用于从第二个序列的每个元素提取联接键的函数。</param>
      <param name="resultSelector">用于从两个匹配元素创建结果元素的函数。</param>
      <param name="comparer">一个 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />，用于对键进行哈希处理和比较。</param>
      <typeparam name="TOuter">第一个序列中的元素的类型。</typeparam>
      <typeparam name="TInner">第二个序列中的元素的类型。</typeparam>
      <typeparam name="TKey">键选择器函数返回的键的类型。</typeparam>
      <typeparam name="TResult">结果元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> 或 <paramref name="inner" /> 或 <paramref name="outerKeySelector" /> 或 <paramref name="innerKeySelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary>返回序列中的最后一个元素。</summary>
      <returns>位于 <paramref name="source" /> 中最后位置处的值。</returns>
      <param name="source">要返回其最后一个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回序列中满足指定条件的最后一个元素。</summary>
      <returns>
        <paramref name="source" /> 中的最后一个元素，它通过了由 <paramref name="predicate" /> 指定的测试。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足 <paramref name="predicate" /> 中的条件。- 或 -源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>返回序列中的最后一个元素，如果序列中不包含任何元素，则返回默认值。</summary>
      <returns>如果 <paramref name="source" /> 为空；则返回默认值 (<paramref name="TSource" />)；否则返回 <paramref name="source" /> 中的最后一个元素。</returns>
      <param name="source">要返回其最后一个元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回序列中满足条件的最后一个元素；如果未找到这样的元素，则返回默认值。</summary>
      <returns>如果 <paramref name="source" /> 为空或没有元素通过谓词函数中的测试，则返回默认值 (<paramref name="TSource" />)；否则，返回通过谓词函数中测试的 <paramref name="source" /> 的最后一个元素。</returns>
      <param name="source">要从中返回元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary>返回一个 <see cref="T:System.Int64" />，表示序列中的元素的总数量。</summary>
      <returns>
        <paramref name="source" /> 中的元素的数量。</returns>
      <param name="source">包含要进行计数的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">元素的数量超过 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回一个 <see cref="T:System.Int64" />，它表示序列中满足条件的元素数量。</summary>
      <returns>
        <paramref name="source" /> 中满足谓词函数的条件的元素数量。</returns>
      <param name="source">包含要进行计数的元素的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">匹配元素的数量超过 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary>返回泛型 <see cref="T:System.Linq.IQueryable`1" /> 中的最大值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定最大值的值序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>对泛型 <see cref="T:System.Linq.IQueryable`1" /> 的每个元素调用投影函数，并返回最大结果值。</summary>
      <returns>序列中的最大值。</returns>
      <param name="source">要确定最大值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="selector" /> 表示的函数返回的值类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary>返回泛型 <see cref="T:System.Linq.IQueryable`1" /> 中的最小值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要确定最小值的值序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>对泛型 <see cref="T:System.Linq.IQueryable`1" /> 的每个元素调用投影函数，并返回最小结果值。</summary>
      <returns>序列中的最小值。</returns>
      <param name="source">要确定最小值的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="selector" /> 表示的函数返回的值类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary>根据指定类型筛选 <see cref="T:System.Linq.IQueryable" /> 的元素。</summary>
      <returns>一个集合，包含 <paramref name="source" /> 中的类型为 <paramref name="TResult" /> 的元素。</returns>
      <param name="source">要对其元素进行筛选的 <see cref="T:System.Linq.IQueryable" />。</param>
      <typeparam name="TResult">筛选序列元素所根据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>根据键按升序对序列的元素排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，其元素按键排序。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按升序对序列的元素排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，其元素按键排序。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>根据键按降序对序列的元素排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，将根据键按降序对其元素进行排序。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按降序对序列的元素排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，将根据键按降序对其元素进行排序。</returns>
      <param name="source">一个要排序的值序列。</param>
      <param name="keySelector">用于从元素中提取键的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary>反转序列中元素的顺序。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，其元素以相反顺序对应于输入序列的元素。</returns>
      <param name="source">要反转的值序列。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>将序列中的每个元素投影到新表中。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，其元素为对 <paramref name="source" /> 的每个元素调用投影函数的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="selector" /> 表示的函数返回的值类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary>通过合并元素的索引将序列的每个元素投影到新表中。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，其元素为对 <paramref name="source" /> 的每个元素调用投影函数的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="selector" /> 表示的函数返回的值类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>将序列的每个元素投影到一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，并对其中的每个元素调用结果选择器函数。每个中间序列的结果值都组合为一个一维序列，并将其返回。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，其元素是对 <paramref name="source" /> 的每个元素调用一对多投影函数 <paramref name="collectionSelector" />，然后将那些 <paramref name="source" /> 元素中的每一个及其相应的源元素映射为结果元素的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="collectionSelector">一个应用于输入序列的每个元素的投影函数。</param>
      <param name="resultSelector">一个应用于每个中间序列的每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TCollection">由 <paramref name="collectionSelector" /> 表示的函数收集的中间元素类型。</typeparam>
      <typeparam name="TResult">结果序列的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>将序列的每个元素投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 并将结果序列组合成一个序列。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，其元素是对输入序列的每个元素调用一对多投影函数的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="selector" /> 表示的函数返回的序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>将序列中的每个元素投影到一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，它合并了生成它的源元素的索引。对每个中间序列的每个元素调用结果选择器函数，并且将结果值合并为一个一维序列，并将其返回。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，其元素是对 <paramref name="source" /> 的每个元素调用一对多投影函数 <paramref name="collectionSelector" />，然后将那些 <paramref name="source" /> 元素中的每一个及其相应的源元素映射为结果元素的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="collectionSelector">要应用于输入序列的每个元素的投影函数；此函数的第二个参数表示源元素的索引。</param>
      <param name="resultSelector">一个应用于每个中间序列的每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TCollection">由 <paramref name="collectionSelector" /> 表示的函数收集的中间元素类型。</typeparam>
      <typeparam name="TResult">结果序列的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="collectionSelector" /> 或 <paramref name="resultSelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>将序列的每个元素投影到 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 并将结果序列组合成一个序列。每个源元素的索引用于该元素的投影表。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，其元素是对输入序列的每个元素调用一对多投影函数的结果。</returns>
      <param name="source">一个要投影的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数；此函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="selector" /> 表示的函数返回的序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器比较元素以确定两个序列是否相等。</summary>
      <returns>如果两个源序列的长度相等并且它们的对应元素也相等，则为 true；否则为 false。</returns>
      <param name="source1">一个 <see cref="T:System.Linq.IQueryable`1" />，其元素用于与 <paramref name="source2" /> 中的元素进行比较。</param>
      <param name="source2">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素用于与第一个序列中的元素进行比较。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 比较元素以确定两个序列是否相等。</summary>
      <returns>如果两个源序列的长度相等并且它们的对应元素也相等，则为 true；否则为 false。</returns>
      <param name="source1">一个 <see cref="T:System.Linq.IQueryable`1" />，其元素用于与 <paramref name="source2" /> 中的元素进行比较。</param>
      <param name="source2">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其元素用于与第一个序列中的元素进行比较。</param>
      <param name="comparer">一个用于比较元素的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary>返回序列的唯一元素；如果该序列并非恰好包含一个元素，则会引发异常。</summary>
      <returns>输入序列的单个元素。</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" />，用于返回单个元素。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 具有多个元素。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回序列中满足指定条件的唯一元素；如果有多个这样的元素存在，则会引发异常。</summary>
      <returns>满足 <paramref name="predicate" /> 中条件的输入序列中的单个元素。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IQueryable`1" />，用于从中返回单个元素。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有元素满足 <paramref name="predicate" /> 中的条件。- 或 -多个元素满足 <paramref name="predicate" />. 中的条件。- 或 -源序列为空。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>返回序列中的唯一元素；如果该序列为空，则返回默认值；如果该序列包含多个元素，此方法将引发异常。</summary>
      <returns>返回输入序列的单个元素；如果序列不包含任何元素，则返回默认值 (<paramref name="TSource" />)。</returns>
      <param name="source">
        <see cref="T:System.Linq.IQueryable`1" />，用于返回单个元素。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>返回序列中满足指定条件的唯一元素；如果这类元素不存在，则返回默认值；如果有多个元素满足该条件，此方法将引发异常。</summary>
      <returns>返回输入序列中满足 <paramref name="predicate" /> 中条件的单个元素；如果未找到这样的元素，则返回默认值 (<paramref name="TSource" />)。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IQueryable`1" />，用于从中返回单个元素。</param>
      <param name="predicate">用于测试元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>跳过序列中指定数量的元素，然后返回剩余的元素。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含输入序列中指定索引后出现的元素。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IQueryable`1" />，用于从中返回元素。</param>
      <param name="count">返回剩余元素前要跳过的元素数量。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>只要满足指定的条件，就跳过序列中的元素，然后返回剩余元素。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含从未通过 <paramref name="predicate" /> 指定测试的线性系列中的第一个元素开始的 <paramref name="source" /> 中的元素。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IQueryable`1" />，用于从中返回元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>只要满足指定的条件，就跳过序列中的元素，然后返回剩余元素。将在谓词函数的逻辑中使用元素的索引。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含从未通过 <paramref name="predicate" /> 指定测试的线性系列中的第一个元素开始的 <paramref name="source" /> 中的元素。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IQueryable`1" />，用于从中返回元素。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数；此函数的第二个参数表示源元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary>计算 <see cref="T:System.Decimal" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary>计算 <see cref="T:System.Double" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary>计算 <see cref="T:System.Int32" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary>计算 <see cref="T:System.Int64" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的可以为 null 的 <see cref="T:System.Decimal" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>计算可以为 null 的 <see cref="T:System.Double" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的可以为 null 的 <see cref="T:System.Double" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int32" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的可以为 null 的 <see cref="T:System.Int32" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int64" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的可以为 null 的 <see cref="T:System.Int64" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>计算可以为 null 的 <see cref="T:System.Single" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的可以为 null 的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary>计算 <see cref="T:System.Single" /> 值序列的和。</summary>
      <returns>序列值之和。</returns>
      <param name="source">要计算其和的 <see cref="T:System.Single" /> 值序列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>计算 <see cref="T:System.Decimal" /> 值序列的和，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>计算 <see cref="T:System.Double" /> 值序列的和，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>计算 <see cref="T:System.Int32" /> 值序列的和，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>计算 <see cref="T:System.Int64" /> 值序列的和，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Decimal" /> 值序列的和，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Double" /> 值序列的和，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int32" /> 值序列的和，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Int64" /> 值序列的和，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
      <exception cref="T:System.OverflowException">和大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>计算可以为 null 的 <see cref="T:System.Single" /> 值序列的和，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>计算 <see cref="T:System.Single" /> 值序列的和，该值可通过调用输入序列的每个元素的投影函数获取。</summary>
      <returns>投影值之和。</returns>
      <param name="source">一个 <paramref name="TSource" /> 类型的值序列。</param>
      <param name="selector">要应用于每个元素的投影函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="selector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>从序列的开头返回指定数量的连续元素。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含从 <paramref name="source" /> 开始处的指定数量的元素。</returns>
      <param name="source">要从其返回元素的序列。</param>
      <param name="count">要返回的元素数量。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>只要满足指定的条件，就会返回序列的元素。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含不再通过由 <paramref name="predicate" /> 指定测试的元素之前出现的输入序列中的元素。</returns>
      <param name="source">要从其返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>只要满足指定的条件，就会返回序列的元素。将在谓词函数的逻辑中使用元素的索引。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含不再通过由 <paramref name="predicate" /> 指定测试的元素之前出现的输入序列中的元素。</returns>
      <param name="source">要从其返回元素的序列。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数；此函数的第二个参数表示源序列中元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>根据某个键按升序对序列中的元素执行后续排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，其元素按键排序。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按升序对序列中的元素执行后续排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，其元素按键排序。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>根据某个键按降序对序列中的元素执行后续排序。</summary>
      <returns>一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，将根据键按降序对其元素进行排序。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 表示的函数返回的键类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>使用指定的比较器按降序对序列中的元素执行后续排序。</summary>
      <returns>一个集合，其中的元素是根据某个键按降序进行排序的。</returns>
      <param name="source">一个 <see cref="T:System.Linq.IOrderedQueryable`1" />，包含要排序的元素。</param>
      <param name="keySelector">用于从每个元素中提取键的函数。</param>
      <param name="comparer">用于比较键的 <see cref="T:System.Collections.Generic.IComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <typeparam name="TKey">由 <paramref name="keySelector" /> 函数返回的键的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="keySelector" /> 或 <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>通过使用默认的相等比较器生成两个序列的并集。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含两个输入序列中的非重复元素。</returns>
      <param name="source1">非重复元素组成合并运算的第一组的一个序列。</param>
      <param name="source2">非重复元素组成合并运算的第二组的一个序列。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>通过使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 生成两个序列的并集。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含两个输入序列中的非重复元素。</returns>
      <param name="source1">非重复元素组成合并运算的第一组的一个序列。</param>
      <param name="source2">非重复元素组成合并运算的第二组的一个序列。</param>
      <param name="comparer">用于比较值的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">输入序列中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>基于谓词筛选值序列。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含满足由 <paramref name="predicate" /> 指定的条件的输入序列中的元素。</returns>
      <param name="source">要筛选的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>基于谓词筛选值序列。将在谓词函数的逻辑中使用每个元素的索引。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含满足由 <paramref name="predicate" /> 指定的条件的输入序列中的元素。</returns>
      <param name="source">要筛选的 <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">用于测试每个元素是否满足条件的函数；此函数的第二个参数表示源序列中元素的索引。</param>
      <typeparam name="TSource">
        <paramref name="source" /> 中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 或 <paramref name="predicate" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>通过使用指定的谓词函数合并两个序列。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，包含两个输入序列的已合并元素。</returns>
      <param name="source1">要合并的第一个序列。</param>
      <param name="source2">要合并的第二个序列。</param>
      <param name="resultSelector">用于指定如何合并这两个序列的元素的函数。</param>
      <typeparam name="TFirst">第一个输入序列中的元素的类型。</typeparam>
      <typeparam name="TSecond">第二个输入序列中的元素的类型。</typeparam>
      <typeparam name="TResult">结果序列的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> 或 <paramref name="source2 " /> 为 null。</exception>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>表示包含二元运算符的表达式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>获取一个值，该值指示是否可以减小此表达式目录树节点。</summary>
      <returns>如果可以简化表达式目录树节点，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>获取合并运算或复合赋值运算使用的类型转换函数。</summary>
      <returns>一个表示类型转换函数的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>获取一个值，该值指示表达式目录树节点是否表示对运算符的提升调用。</summary>
      <returns>如果该节点表示提升调用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>获取一个值，该值指示表达式目录树节点是否表示对运算符（其返回类型提升为可以为 null 的类型）的提升调用。</summary>
      <returns>如果该运算符的返回类型提升为可以为 null 的类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>获取二元运算的左操作数。</summary>
      <returns>表示二元运算的左操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>获取二元运算的实现方法。</summary>
      <returns>表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>将二进制表达式节点简化为更简单的表达式。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>获取二元运算的右操作数。</summary>
      <returns>表示二元运算的右操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="left">结果的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性。</param>
      <param name="conversion">结果的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性。</param>
      <param name="right">结果的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>表示一个包含可在其中定义变量的表达式序列的块。</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>获取此块中的表达式。</summary>
      <returns>包含此块中所有表达式的只读集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>返回此表达式的节点类型。扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>获取此块中的最后一个表达式。</summary>
      <returns>表示此块中最后一个表达式的 <see cref="T:System.Linq.Expressions.Expression" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.BlockExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="variables">结果的 <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> 属性。</param>
      <param name="expressions">结果的 <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> 属性。</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>获取在此块中定义的变量。</summary>
      <returns>包含在此块中定义的所有变量的只读集合。</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>表示 try 块中的 catch 语句。</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>获取 catch 块的主体。</summary>
      <returns>表示 catch 主体的 <see cref="T:System.Linq.Expressions.Expression" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>获取 <see cref="T:System.Linq.Expressions.CatchBlock" /> 筛选器的主体。</summary>
      <returns>表示 <see cref="T:System.Linq.Expressions.CatchBlock" /> 筛选器的主体的 <see cref="T:System.Linq.Expressions.Expression" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>获取此处理程序捕获的 <see cref="T:System.Exception" /> 的类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示此处理程序捕获的 <see cref="T:System.Exception" /> 的类型。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>返回一个 <see cref="T:System.String" />，它表示当前 <see cref="T:System.Object" />。</summary>
      <returns>一个 <see cref="T:System.String" />，它表示当前的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="variable">结果的 <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> 属性。</param>
      <param name="filter">结果的 <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> 属性。</param>
      <param name="body">结果的 <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> 属性。</param>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>获取对此处理程序捕获的 <see cref="T:System.Exception" /> 对象的引用。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象，表示对此处理程序捕获的 <see cref="T:System.Exception" /> 对象的引用。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>表示包含条件运算符的表达式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>获取当测试的计算结果为 false 时要执行的表达式。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression" />，表示当测试为 false 时要执行的表达式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>获取当测试的计算结果为 true 时要执行的表达式。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression" />，表示当测试为 true 时要执行的表达式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>返回此表达式的节点类型。扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>获取条件运算的测试。</summary>
      <returns>一个表示条件运算的测试的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="test">结果的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 属性。</param>
      <param name="ifTrue">结果的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 属性。</param>
      <param name="ifFalse">结果的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>表示具有常量值的表达式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>返回此表达式的节点类型。扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>获取常量表达式的值。</summary>
      <returns>
        <see cref="T:System.Object" /> 等于所表示的表达式的值。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>发出或清除调试信息的序列点。这允许调试器在调试时突出显示正确的源代码。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>获取表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</summary>
      <returns>表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>获取此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的结束列。</summary>
      <returns>用于生成包装表达式的代码的结束列号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>获取此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的结束行。</summary>
      <returns>用于生成包装表达式的代码的结束行号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>获取指示 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 是否用于清除序列点的值。</summary>
      <returns>如果 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 用于清除序列点，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>获取此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始列。</summary>
      <returns>用于生成包装表达式的代码的起始列号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>获取此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始行。</summary>
      <returns>用于生成包装表达式的代码的起始行号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>表示类型或空表达式的默认值。</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>返回此表达式的节点类型。扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>表示动态操作。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>获取动态操作的参数。</summary>
      <returns>包含动态操作的参数的只读集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>获取 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />，它确定动态站点的运行时行为。</summary>
      <returns>确定动态站点的运行时行为的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>获取由 <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示由 <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arguments">动态操作的参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
      <param name="arg3">动态操作的第四个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="returnType">动态表达式的结果类型。</param>
      <param name="arguments">动态操作的参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arguments">动态操作的参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和一个参数绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和两个参数绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和三个参数绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 和四个参数绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arg0">动态操作的第一个参数。</param>
      <param name="arg1">动态操作的第二个参数。</param>
      <param name="arg2">动态操作的第三个参数。</param>
      <param name="arg3">动态操作的第四个参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，它表示由提供的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 绑定的动态操作。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DynamicExpression" />，其 <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> 等于 <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />，并且其 <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、<see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> 和 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 均设置为指定的值。</returns>
      <param name="delegateType">
        <see cref="T:System.Runtime.CompilerServices.CallSite" /> 使用的委托的类型。</param>
      <param name="binder">动态操作的运行时联编程序。</param>
      <param name="arguments">动态操作的参数。</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>返回此表达式的节点类型。扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.DynamicExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>将发送到参数 arguments 的值与 DynamicExpression 的当前实例的 Arguments 属性进行对比。如果参数的值与属性相等，将返回当前实例。如果它们不相等，将返回与当前实例等同的新的 DynamicExpression 实例（Arguments 属性设置为参数 arguments 的值的情况除外）。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="arguments">结果的 <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary>表示动态表达式目录树的访问者或重写者。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor" /> 的新实例。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.DynamicExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则返回 <see cref="T:System.Linq.Expressions.Expression" />，修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>表示 <see cref="T:System.Collections.IEnumerable" /> 集合的单个元素的初始值设定项。</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>获取用于将某个元素添加到 <see cref="T:System.Collections.IEnumerable" /> 集合的实例方法。</summary>
      <returns>表示用于将某个元素添加到集合的实例方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>获取传递给某一方法的参数集合，该方法会将元素添加到 <see cref="T:System.Collections.IEnumerable" /> 集合中。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，这些对象表示用于将元素添加到集合中的方法的参数。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>返回 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的文本表示形式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的文本化表示形式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="arguments">结果的 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>提供一种基类，表示表达式目录树节点的类派生自该基类。它还包含用来创建各种节点类型的 static（在 Visual Basic 中为 Shared）工厂方法。这是一个 abstract 类。</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>构造 <see cref="T:System.Linq.Expressions.Expression" /> 的新实例。</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>初始化 <see cref="T:System.Linq.Expressions.Expression" /> 类的新实例。</summary>
      <param name="nodeType">要设置为节点类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="type">此 <see cref="T:System.Linq.Expressions.Expression" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义加法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义加法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示不进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义加法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义加法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位 AND 运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.And" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义按位 AND 运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位 AND 运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.And" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义按位 AND 运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示仅在第一个操作数的计算结果为 true 时才计算第二个操作数的条件 AND 运算。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义按位 AND 运算符。- 或 -<paramref name="left" />.Type 和 <paramref name="right" />.Type 不是同一布尔值类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示仅在第一个操作数解析为 true 时才计算第二个操作数的条件 AND 运算。可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义按位 AND 运算符。- 或 -<paramref name="method" /> 为 null 并且 <paramref name="left" />.Type 和 <paramref name="right" />.Type 不是同一布尔值类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位 AND 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位 AND 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示按位 AND 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个用于访问多维数组的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="array">一个表示多维数组的表达式。</param>
      <param name="indexes">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用于为数组编制索引的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>创建一个用于访问数组的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="array">一个表示要编制索引的数组的表达式。</param>
      <param name="indexes">一个数组，其中包含用于为数组编制索引的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个表示对秩大于 1 的数组应用数组索引运算符的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性均设置为指定的值。</returns>
      <param name="array">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="indexes">其中包含用来填充 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或<paramref name="indexes" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不表示数组类型。- 或 -<paramref name="array" />.Type 的秩与 <paramref name="indexes" /> 中的元素数量不匹配。- 或 -<paramref name="indexes" /> 的一个或多个元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不表示 <see cref="T:System.Int32" /> 类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示对秩为 1 的数组应用数组索引运算符的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="array">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="index">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或<paramref name="index" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不表示数组类型。- 或 -<paramref name="array" />.Type 表示秩不为 1 的数组类型。- 或 -<paramref name="index" />.Type 不表示 <see cref="T:System.Int32" /> 类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>创建一个表示对多维数组应用数组索引运算符的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性均设置为指定的值。</returns>
      <param name="array">
        <see cref="T:System.Linq.Expressions.Expression" /> 实例（即，数组索引操作的索引）的数组。</param>
      <param name="indexes">用来填充 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或<paramref name="indexes" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不表示数组类型。- 或 -<paramref name="array" />.Type 的秩与 <paramref name="indexes" /> 中的元素数量不匹配。- 或 -<paramref name="indexes" /> 的一个或多个元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不表示 <see cref="T:System.Int32" /> 类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示用于获取一维数组的长度的表达式。</summary>
      <returns>其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> 且 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性等于 <paramref name="array" /> 的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="array">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不表示数组类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Assign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>创建一个表示初始化字段或属性的 <see cref="T:System.Linq.Expressions.MemberAssignment" />。</summary>
      <returns>其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 等于 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> 并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.MemberAssignment" />。</returns>
      <param name="member">要将 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或<paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。- 或 -<paramref name="member" /> 所表示的属性没有 set 访问器。- 或 -<paramref name="expression" />.Type 不能赋给 <paramref name="member" /> 所表示的字段或属性的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>使用属性访问器方法创建一个表示成员初始化的 <see cref="T:System.Linq.Expressions.MemberAssignment" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberAssignment" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示在 <paramref name="propertyAccessor" /> 中访问的属性的 <see cref="T:System.Reflection.PropertyInfo" />，并且 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 属性设置为 <paramref name="expression" />。</returns>
      <param name="propertyAccessor">一个表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或<paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。- 或 -<paramref name="propertyAccessor" /> 所访问的属性没有 set 访问器。- 或 -<paramref name="expression" />.Type 不能赋给 <paramref name="member" /> 所表示的字段或属性的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="variables">块中的变量。</param>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="variables">块中的变量。</param>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含两个表达式，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">块中的第一个表达式。</param>
      <param name="arg1">块中的第二个表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含三个表达式，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">块中的第一个表达式。</param>
      <param name="arg1">块中的第二个表达式。</param>
      <param name="arg2">块中的第三个表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含四个表达式，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">块中的第一个表达式。</param>
      <param name="arg1">块中的第二个表达式。</param>
      <param name="arg2">块中的第三个表达式。</param>
      <param name="arg3">块中的第四个表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含五个表达式，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">块中的第一个表达式。</param>
      <param name="arg1">块中的第二个表达式。</param>
      <param name="arg2">块中的第三个表达式。</param>
      <param name="arg3">块中的第四个表达式。</param>
      <param name="arg4">块中的第五个表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式和特定结果类型，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">块的结果类型。</param>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">块的结果类型。</param>
      <param name="variables">块中的变量。</param>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">块的结果类型。</param>
      <param name="variables">块中的变量。</param>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式和特定结果类型，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">块的结果类型。</param>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>创建一个表示 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，并且其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。可以指定在跳转时传递给标签的值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，并且其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示具有指定类型的 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。可以指定在跳转时传递给标签的值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>创建一个表示具有指定类型的 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对不带参数的实例方法的调用。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="instance">一个 <see cref="T:System.Linq.Expressions.Expression" />，它指定一个实例方法调用的实例（对于 static 方法（在 Visual Basic 中为 Shared 方法）应传递 null）。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。- 或 -<paramref name="instance" /> 为 null，并且 <paramref name="method" /> 表示实例方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type 不能赋给 <paramref name="method" /> 所表示的方法的声明类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个表示调用带参数的方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性均设置为指定的值。</returns>
      <param name="instance">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />（对于 static 方法（在 Visual Basic 中为 Shared 应传递为 null）。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">其中包含用来填充 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。- 或 -<paramref name="instance" /> 为 null，并且 <paramref name="method" /> 表示实例方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type 不能赋给 <paramref name="method" /> 所表示的方法的声明类型。- 或 -<paramref name="arguments" /> 中的元素数量与 <paramref name="method" /> 所表示的方法的参数数量不相等。- 或 -<paramref name="arguments" /> 的一个或多个元素不能赋给 <paramref name="method" /> 所表示的方法的相应参数。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示调用带两个参数的静态方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="instance">指定一个实例调用的实例的 <see cref="T:System.Linq.Expressions.Expression" />。对于 static 方法（在 Visual Basic 中为 Shared 方法）应传递 null。</param>
      <param name="method">表示目标方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示调用不带参数的方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="instance">指定一个实例调用的实例的 <see cref="T:System.Linq.Expressions.Expression" />。对于 static 方法（在 Visual Basic 中为 Shared 方法）应传递 null。</param>
      <param name="method">表示目标方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>创建一个表示调用带参数的方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性均设置为指定的值。</returns>
      <param name="instance">一个 <see cref="T:System.Linq.Expressions.Expression" />，它指定一个实例方法调用的实例（对于 static 方法（在 Visual Basic 中为 Shared 方法）应传递 null）。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">用来填充 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。- 或 -<paramref name="instance" /> 为 null，并且 <paramref name="method" /> 表示实例方法。- 或 -<paramref name="arguments" /> 不为 null，且其一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type 不能赋给 <paramref name="method" /> 所表示的方法的声明类型。- 或 -<paramref name="arguments" /> 中的元素数量与 <paramref name="method" /> 所表示的方法的参数数量不相等。- 或 -<paramref name="arguments" /> 的一个或多个元素不能赋给 <paramref name="method" /> 所表示的方法的相应参数。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>通过调用适当的工厂方法创建一个表示调用实例方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />， <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 属性等于 <paramref name="instance" />，<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 设置为表示指定实例方法的 <see cref="T:System.Reflection.MethodInfo" />，并且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 设置为指定参数。</returns>
      <param name="instance">一个 <see cref="T:System.Linq.Expressions.Expression" />，将搜索其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性值以查找特定方法。</param>
      <param name="methodName">方法的名称。</param>
      <param name="typeArguments">指定泛型方法的类型参数的 <see cref="T:System.Type" /> 对象的数组。当 methodName 指定非泛型方法时，此参数应为 null。</param>
      <param name="arguments">表示方法的参数的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 或<paramref name="methodName" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在 <paramref name="instance" />.Type 或其基类型中找不到这样的方法：名称为 <paramref name="methodName" />、类型参数与 <paramref name="typeArguments" /> 相匹配，且参数类型与 <paramref name="arguments" /> 相匹配。- 或 -在 <paramref name="instance" />.Type 或其基类型中找到多个这样的方法：名称为 <paramref name="methodName" />，类型参数与 <paramref name="typeArguments" /> 相匹配，参数类型与 <paramref name="arguments" /> 相匹配。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对 static 方法（在 Visual Basic 中为 Shared 方法）的调用。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="method">表示目标方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">表示调用参数的 <see cref="T:System.Linq.Expressions.Expression" /> 的集合。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对具有一个参数的 static 方法（在 Visual Basic 中为 Shared 方法）的调用。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示调用带两个参数的静态方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示调用带三个参数的静态方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示调用带四个参数的静态方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3">用于表示第四个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示调用带五个参数的静态方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3">用于表示第四个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg4">用于表示第五个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对具有参数的 static 方法（在 Visual Basic 中为 Shared 方法）的调用。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性均设置为指定的值。</returns>
      <param name="method">一个 <see cref="T:System.Reflection.MethodInfo" />，表示要将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等的 static（在 Visual Basic 中为 Shared）方法。</param>
      <param name="arguments">用来填充 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 中的元素数量与 <paramref name="method" /> 所表示的方法的参数数量不相等。- 或 -<paramref name="arguments" /> 的一个或多个元素不能赋给 <paramref name="method" /> 所表示的方法的相应参数。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>通过调用适当的工厂方法创建一个表示调用 static（在 Visual Basic 中为 Shared）方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为表示指定 static（在 Visual Basic 中为 Shared）方法的 <see cref="T:System.Reflection.MethodInfo" />，并且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定场所。</returns>
      <param name="type">用于指定类型的 <see cref="T:System.Type" />，该类型中包含指定的 static（在 Visual Basic 中为 Shared）方法。</param>
      <param name="methodName">方法的名称。</param>
      <param name="typeArguments">指定泛型方法的类型参数的 <see cref="T:System.Type" /> 对象的数组。当 methodName 指定非泛型方法时，此参数应为 null。</param>
      <param name="arguments">表示方法的参数的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或<paramref name="methodName" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在 <paramref name="type" /> 或其基类型中找不到这样的方法：名称为 <paramref name="methodName" />、类型参数与 <paramref name="typeArguments" /> 相匹配，且参数类型与 <paramref name="arguments" /> 相匹配。- 或 -在 <paramref name="type" /> 或其基类型中找到多个这样的方法：名称为 <paramref name="methodName" />，类型参数与 <paramref name="typeArguments" /> 相匹配，参数类型与 <paramref name="arguments" /> 相匹配。</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>指示可将节点简化为更简单的节点。如果返回 true，则可以调用 Reduce() 以生成简化形式。</summary>
      <returns>如果可以简化节点，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />，其中具有对已捕获的 <see cref="T:System.Exception" /> 对象的引用以便在处理程序主体中使用。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="variable">一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />，它表示对此处理程序捕获的 <see cref="T:System.Exception" /> 对象的引用。</param>
      <param name="body">catch 语句的主体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />，其中具有 <see cref="T:System.Exception" /> 筛选器和对已捕获的 <see cref="T:System.Exception" /> 对象的引用。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="variable">一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />，它表示对此处理程序捕获的 <see cref="T:System.Exception" /> 对象的引用。</param>
      <param name="body">catch 语句的主体。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 筛选器的主体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="type">此 <see cref="T:System.Linq.Expressions.CatchBlock" /> 将处理的 <see cref="T:System.Exception" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body">catch 语句的主体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />，其中具有 <see cref="T:System.Exception" /> 筛选器，但没有对已捕获的 <see cref="T:System.Exception" /> 对象的引用。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="type">此 <see cref="T:System.Linq.Expressions.CatchBlock" /> 将处理的 <see cref="T:System.Exception" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="body">catch 语句的主体。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 筛选器的主体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>创建一个用于清除序列点的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <returns>用于清除序列点的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的实例。</returns>
      <param name="document">表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示合并运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不表示引用类型或可以为 null 的值类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type 和 <paramref name="right" />.Type 不可相互转换。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>在给定转换函数的情况下，创建一个表示合并运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type 和 <paramref name="right" />.Type 不可相互转换。- 或 -<paramref name="conversion" /> 不为 null，并且 <paramref name="conversion" />.Type 为不是正好带一个参数的委托类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="left" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不表示引用类型或可以为 null 的值类型。- 或 -<paramref name="left" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性表示一个类型，该类型不能赋给委托类型 <paramref name="conversion" />.Type 的参数类型。- 或 -<paramref name="right" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不等于委托类型 <paramref name="conversion" />.Type 的返回类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示条件语句的 <see cref="T:System.Linq.Expressions.ConditionalExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性均设置为指定的值。</returns>
      <param name="test">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifTrue">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifFalse">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="test" /> 或<paramref name="ifTrue" /> 或 <paramref name="ifFalse" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="test" />.Type 不为 <see cref="T:System.Boolean" />。- 或 -<paramref name="ifTrue" />.Type 不等于 <paramref name="ifFalse" />.Type。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示条件语句的 <see cref="T:System.Linq.Expressions.ConditionalExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性均设置为指定的值。</returns>
      <param name="test">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifTrue">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifFalse">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>创建一个 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.ConstantExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />，并且其 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 属性设置为指定的值。</returns>
      <param name="value">要将 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 属性设置为与其相等的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>创建一个 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.ConstantExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />，并且其 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性均设置为指定的值。</returns>
      <param name="value">要将 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 属性设置为与其相等的 <see cref="T:System.Object" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不为 null 并且 <paramref name="type" /> 不可从 <paramref name="value" /> 的动态类型赋值。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>创建一个表示 continue 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Continue，并且其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>创建一个表示具有指定类型的 continue 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Continue，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示类型转换运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性均设置为指定的值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或<paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">未定义 <paramref name="expression" />.Type 和 <paramref name="type" /> 之间的转换运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示已为其指定实现方法的转换运算。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或<paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">未定义 <paramref name="expression" />.Type 和 <paramref name="type" /> 之间的转换运算符。- 或 -<paramref name="expression" />.Type 不能赋给 <paramref name="method" /> 所表示的方法的参数类型。- 或 -<paramref name="method" /> 所表示的方法的返回类型不能赋给 <paramref name="type" />。- 或 -<paramref name="expression" />.Type 或 <paramref name="type" /> 为可以为 null 的值类型，并且相应的不可以为 null 的值类型不分别等于 <paramref name="method" /> 所表示的方法的参数类型或返回类型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个与 <paramref name="method" /> 说明相匹配的方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示在目标类型发生溢出时引发异常的转换运算。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性均设置为指定的值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或<paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">未定义 <paramref name="expression" />.Type 和 <paramref name="type" /> 之间的转换运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示在目标类型发生溢出时引发异常并为其指定了实现方法的转换运算。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或<paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">未定义 <paramref name="expression" />.Type 和 <paramref name="type" /> 之间的转换运算符。- 或 -<paramref name="expression" />.Type 不能赋给 <paramref name="method" /> 所表示的方法的参数类型。- 或 -<paramref name="method" /> 所表示的方法的返回类型不能赋给 <paramref name="type" />。- 或 -<paramref name="expression" />.Type 或 <paramref name="type" /> 为可以为 null 的值类型，并且相应的不可以为 null 的值类型不分别等于 <paramref name="method" /> 所表示的方法的参数类型或返回类型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个与 <paramref name="method" /> 说明相匹配的方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>创建一个具有指定跨度的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的实例。</returns>
      <param name="document">表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
      <param name="startLine">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始行。必须大于 0。</param>
      <param name="startColumn">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始列。必须大于 0。</param>
      <param name="endLine">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的结束行。必须大于或等于起始行。</param>
      <param name="endColumn">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的结束列。如果结束行与起始行相同，则结束列必须大于或等于起始列。任何情况下都必须大于 0。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递减表达式值。</summary>
      <returns>一个表示已递减的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要递减的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递减表达式值。</summary>
      <returns>一个表示已递减的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要递减的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>创建一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.DefaultExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DefaultExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定的类型。</returns>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示算术除法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义除法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示算术除法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义除法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的除法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的除法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示不进行溢出检查的除法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>在给定 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 作为第二个参数的情况下，创建一个 <see cref="T:System.Linq.Expressions.ElementInit" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ElementInit" />，其 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 和 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性设置为指定值。</returns>
      <param name="addMethod">要将 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含要将 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> 或<paramref name="arguments" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="addMethod" /> 表示的方法未命名为“Add”（不区分大小写）。- 或 -<paramref name="addMethod" /> 表示的方法不是实例方法。- 或 -<paramref name="arguments" /> 包含的元素数量与 <paramref name="addMethod" /> 所表示的方法的参数数量不同。- 或 -<paramref name="arguments" /> 的一个或多个元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不能赋给 <paramref name="addMethod" /> 所表示的方法的相应参数的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>在给定值数组作为第二个参数的情况下，创建一个 <see cref="T:System.Linq.Expressions.ElementInit" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ElementInit" />，其 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 和 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性设置为指定值。</returns>
      <param name="addMethod">要将 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">要将 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> 或<paramref name="arguments" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">addMethod 表示的方法未命名为“Add”（不区分大小写）。- 或 -addMethod 表示的方法不是实例方法。- 或 -arguments 包含的元素数量与 addMethod 所表示的方法的参数数量不同。- 或 -<paramref name="arguments" /> 的一个或多个元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不能赋给 <paramref name="addMethod" /> 所表示的方法的相应参数的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>创建具有 <see cref="T:System.Void" /> 类型的空表达式。</summary>
      <returns>其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />，并且 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <see cref="T:System.Void" /> 的 <see cref="T:System.Linq.Expressions.DefaultExpression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义相等运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，并且其<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">如果为 true，则将 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 设置为 true；如果为 false，则将 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 设置为 false。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义相等运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>通过对用户定义的类型使用 op_ExclusiveOr，创建一个表示按位 XOR<see cref="运算的T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义 XOR 运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>通过对用户定义的类型使用 op_ExclusiveOr，创建一个表示按位 XOR<see cref="运算的T:System.Linq.Expressions.BinaryExpression" />。可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义 XOR 运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>通过对用户定义的类型使用 op_ExclusiveOr，创建一个表示按位 XOR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>通过对用户定义的类型使用 op_ExclusiveOr，创建一个表示按位 XOR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>通过对用户定义的类型使用 op_ExclusiveOr，创建一个表示按位 XOR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>创建一个表示访问字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，并且其 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性均设置为指定的值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。对于 static（在 Visual Basic 中为 Shared），<paramref name="expression" /> 必须为 null。</param>
      <param name="field">要将 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为与其相等的 <see cref="T:System.Reflection.FieldInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> 为 null。- 或 -<paramref name="field" /> 表示的字段不为 static（在 Visual Basic 中为 Shared），而且 <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 不能赋给 <paramref name="field" /> 所表示的字段的声明类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>在给定字段名称的情况下，创建一个表示访问此字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为 <paramref name="expression" />，并且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为 <see cref="T:System.Reflection.FieldInfo" /> 所表示的字段的 <paramref name="fieldName" />。</returns>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 中包含一个名为 <paramref name="fieldName" /> 的字段。对于静态字段，这可以为 null。</param>
      <param name="fieldName">要访问的字段的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或<paramref name="fieldName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有在 <paramref name="expression" />.Type 或其基类型中定义名为 <paramref name="fieldName" /> 的字段。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>创建一个表示访问字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">字段的包含对象。对于静态字段，这可以为 null。</param>
      <param name="type">包含字段的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="fieldName">要访问的字段。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>创建一个 <see cref="T:System.Type" /> 对象，该对象表示具有特定类型参数的泛型 System.Action 委托类型。</summary>
      <returns>具有指定类型参数的 System.Action 委托的类型。</returns>
      <param name="typeArgs">
        <see cref="T:System.Type" /> 对象的数组，这些对象指定 System.Action 委托类型的类型参数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> 包含四个以上的元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>获取一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 对象，该对象表示具有特定类型参数的泛型 System.Func 或 System.Action 委托类型。</summary>
      <returns>委托类型。</returns>
      <param name="typeArgs">委托的类型参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>创建一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 对象，该对象表示具有特定类型参数的泛型 System.Func 委托类型。最后一个类型参数指定已创建委托的返回类型。</summary>
      <returns>具有指定类型参数的 System.Func 委托的类型。</returns>
      <param name="typeArgs">包含零到五个 <see cref="T:System.Type" /> 对象的数组，这些对象指定 System.Func 委托类型的类型参数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> 包含少于一个或多于五个的元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>创建一个表示“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，并且其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为指定值，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。可以指定在跳转时传递给标签的值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，并且其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示具有指定类型的“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。可以指定在跳转时传递给标签的值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>创建一个表示具有指定类型的“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为指定的值，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时传递给目标标签的 null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“大于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义"大于"运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示“大于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />，并且其<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">如果为 true，则将 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 设置为 true；如果为 false，则将 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 设置为 false。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义“大于”运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“大于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义“大于或等于”运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示“大于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />，并且其<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">如果为 true，则将 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 设置为 true；如果为 false，则将 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 设置为 false。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义“大于或等于”运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，它表示带 if 语句的条件块。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 属性均设置为指定的值。<see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为默认表达式，并且此方法返回的结果 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的类型为 <see cref="T:System.Void" />。</returns>
      <param name="test">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifTrue">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，它表示带 if 和 else 语句的条件块。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性均设置为指定的值。此方法返回的结果 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的类型为 <see cref="T:System.Void" />。</returns>
      <param name="test">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifTrue">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="ifFalse">要将 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递增表达式值。</summary>
      <returns>一个表示已递增的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要递增的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递增表达式值。</summary>
      <returns>一个表示已递增的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要递增的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它将委托或 lambda 表达式应用于一个参数表达式列表。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它对提供的参数应用指定的委托或 lambda 表达式。</returns>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />，它表示要应用的委托或 lambda 表达式。</param>
      <param name="arguments">一个包含 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />，这些对象表示要对其应用委托或 lambda 表达式的参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 不表示委托类型或 <see cref="T:System.Linq.Expressions.Expression`1" />。- 或 -<paramref name="arguments" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不能赋给 <paramref name="expression" /> 所表示的委托的相应参数的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> 没有包含与 <paramref name="expression" /> 所表示的委托的参数列表相同数量的元素。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它将委托或 lambda 表达式应用于一个参数表达式列表。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它对提供的参数应用指定的委托或 lambda 表达式。</returns>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />，它表示要应用的委托或 lambda 表达式。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组，这些对象表示要对其应用委托或 lambda 表达式的参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 不表示委托类型或 <see cref="T:System.Linq.Expressions.Expression`1" />。- 或 -<paramref name="arguments" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不能赋给 <paramref name="expression" /> 所表示的委托的相应参数的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> 没有包含与 <paramref name="expression" /> 所表示的委托的参数列表相同数量的元素。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>返回表达式的计算结果是否为 false。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的实例。</returns>
      <param name="expression">要计算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>返回表达式的计算结果是否为 false。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的实例。</returns>
      <param name="expression">要计算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>返回表达式的计算结果是否为 true。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的实例。</returns>
      <param name="expression">要计算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>返回表达式的计算结果是否为 true。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的实例。</returns>
      <param name="expression">要计算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有 void 类型但没有名称的标签。</summary>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有 void 类型但没有名称的标签。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelExpression" />，它表示不带默认值的标签。</summary>
      <returns>不带默认值的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
      <param name="target">此 <see cref="T:System.Linq.Expressions.LabelExpression" /> 将关联的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelExpression" />，它表示具有给定默认值的标签。</summary>
      <returns>具有给定默认值的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
      <param name="target">此 <see cref="T:System.Linq.Expressions.LabelExpression" /> 将关联的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="defaultValue">当通过常规控制流到达标签时，此 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有 void 类型和给定名称的标签。</summary>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有 void 类型和给定名称的标签。</returns>
      <param name="name">标签的名称。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有给定类型的标签。</summary>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有给定类型的标签。</returns>
      <param name="type">跳转到标签时传递的值的类型。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有给定类型和名称的标签。</summary>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有 void 类型和给定类型和名称的标签。</returns>
      <param name="type">跳转到标签时传递的值的类型。</param>
      <param name="name">标签的名称。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> 属性等于 <see cref="P:System.Linq.Expressions.Expression`1.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 和 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TDelegate">委托类型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> 属性等于 <see cref="P:System.Linq.Expressions.Expression`1.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 和 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的数组。</param>
      <typeparam name="TDelegate">委托类型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的数组。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TDelegate">一种委托类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 为 null。- 或 -<paramref name="parameters" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> 不是委托类型。- 或 -<paramref name="body" />.Type 表示一种不能赋给 <paramref name="TDelegate" /> 的返回类型的类型。- 或 -<paramref name="parameters" /> 所含元素个数与 <paramref name="TDelegate" /> 参数列表的元素个数不同。- 或 -<paramref name="parameters" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不可从 <paramref name="TDelegate" /> 的相应参数类型的类型赋值。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的数组。</param>
      <typeparam name="TDelegate">一种委托类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 为 null。- 或 -<paramref name="parameters" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> 不是委托类型。- 或 -<paramref name="body" />.Type 表示一种不能赋给 <paramref name="TDelegate" /> 的返回类型的类型。- 或 -<paramref name="parameters" /> 所含元素个数与 <paramref name="TDelegate" /> 参数列表的元素个数不同。- 或 -<paramref name="parameters" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不可从 <paramref name="TDelegate" /> 的相应参数类型的类型赋值。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>通过先构造一个委托类型来创建一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 为 null。- 或 -<paramref name="parameters" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 包含 16 个以上的元素。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> 属性等于 <see cref="P:System.Linq.Expressions.Expression`1.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 和 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">lambda 的名称。用于生成调试信息。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TDelegate">委托类型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">lambda 的名称。用于发出调试信息。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">lambda 的名称。用于发出调试信息。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> 属性等于 <see cref="P:System.Linq.Expressions.Expression`1.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 和 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.Expression`1.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">lambda 的名称。用于生成调试信息。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <typeparam name="TDelegate">委托类型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="delegateType">一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="delegateType">一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的数组。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />。如果委托类型在编译时未知，则可以使用它。</summary>
      <returns>一个表示 lambda 表达式的对象，该表达式的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <param name="delegateType">一个 <see cref="T:System.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> 或<paramref name="body" /> 为 null。- 或 -<paramref name="parameters" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> 不表示委托类型。- 或 -<paramref name="body" />.Type 表示一个类型，该类型不能赋给 <paramref name="delegateType" /> 所表示的委托类型的返回类型。- 或 -<paramref name="parameters" /> 所含元素个数与 <paramref name="delegateType" /> 所表示委托类型的参数列表的元素个数不同。- 或 -<paramref name="parameters" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不可从 <paramref name="delegateType" /> 所表示的委托类型的相应参数类型的类型赋值。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>通过先构造一个委托类型来创建一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />。如果委托类型在编译时未知，则可以使用它。</summary>
      <returns>一个表示 lambda 表达式的对象，该表达式的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <param name="delegateType">一个 <see cref="T:System.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="parameters">用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> 或<paramref name="body" /> 为 null。- 或 -<paramref name="parameters" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> 不表示委托类型。- 或 -<paramref name="body" />.Type 表示一个类型，该类型不能赋给 <paramref name="delegateType" /> 所表示的委托类型的返回类型。- 或 -<paramref name="parameters" /> 所含元素个数与 <paramref name="delegateType" /> 所表示委托类型的参数列表的元素个数不同。- 或 -<paramref name="parameters" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不可从 <paramref name="delegateType" /> 所表示的委托类型的相应参数类型的类型赋值。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="delegateType">一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">lambda 的名称。用于发出调试信息。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="delegateType">一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="name">lambda 的名称。用于发出调试信息。</param>
      <param name="parameters">其中包含用来填充 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位左移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义左移位运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位左移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义左移位运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位左移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位左移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示按位左移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“小于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义"小于"运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示“小于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">如果为 true，则将 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 设置为 true；如果为 false，则将 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 设置为 false。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义“小于”运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“小于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义"小于或等于"运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示“小于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">如果为 true，则将 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 设置为 true；如果为 false，则将 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 设置为 false。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义“小于或等于”运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>创建一个其成员为字段或属性的 <see cref="T:System.Linq.Expressions.MemberListBinding" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 属性均设置为指定的值。</returns>
      <param name="member">一个 <see cref="T:System.Reflection.MemberInfo" />，表示要将 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为与其相等的字段或属性。</param>
      <param name="initializers">其中包含用来填充 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 为 null。- 或 -<paramref name="initializers" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。- 或 -<paramref name="member" /> 所表示的字段或属性的 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 或 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>创建一个其成员为字段或属性的 <see cref="T:System.Linq.Expressions.MemberListBinding" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 属性均设置为指定的值。</returns>
      <param name="member">一个 <see cref="T:System.Reflection.MemberInfo" />，表示要将 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为与其相等的字段或属性。</param>
      <param name="initializers">用来填充 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 为 null。- 或 -<paramref name="initializers" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。- 或 -<paramref name="member" /> 所表示的字段或属性的 <see cref="P:System.Reflection.FieldInfo.FieldType" /> 或 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>基于指定的属性访问器方法创建一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示 <paramref name="propertyAccessor" /> 中访问的属性的 <see cref="T:System.Reflection.MemberInfo" />，并且 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 由 <paramref name="initializers" /> 中的元素填充。</returns>
      <param name="propertyAccessor">一个表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">其中包含用来填充 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 为 null。- 或 -<paramref name="initializers" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。- 或 -<paramref name="propertyAccessor" /> 所表示的方法所访问的属性的 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>基于指定的属性访问器方法创建一个 <see cref="T:System.Linq.Expressions.MemberListBinding" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示 <paramref name="propertyAccessor" /> 中访问的属性的 <see cref="T:System.Reflection.MemberInfo" />，并且 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 由 <paramref name="initializers" /> 中的元素填充。</returns>
      <param name="propertyAccessor">一个表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">用来填充 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 为 null。- 或 -<paramref name="initializers" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。- 或 -<paramref name="propertyAccessor" /> 所表示的方法所访问的属性的 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>创建一个使用指定 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象来初始化集合的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 属性均设置为指定的值。</returns>
      <param name="newExpression">要将 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="initializers">其中包含用来填充 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或<paramref name="initializers" /> 为 null。- 或 -<paramref name="initializers" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个使用名为“Add”的方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定的值。</returns>
      <param name="newExpression">要将 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="initializers">其中包含用来填充 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或<paramref name="initializers" /> 为 null。- 或 -<paramref name="initializers" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
      <exception cref="T:System.InvalidOperationException">没有在 <paramref name="newExpression" />.Type 或其基类型中声明任何名为“Add”（不区分大小写）的实例方法。- 或 -<paramref name="newExpression" />.Type 或其基类型上的 add 方法不是正好带一个参数。- 或 -<paramref name="initializers" /> 的第一个元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性所表示的类型不能赋给 <paramref name="newExpression" />.Type 或其基类型上的 add 方法的参数类型。- 或 -<paramref name="newExpression" />.Type 和/或其基类型上存在多个名为“Add”（不区分大小写）的参数兼容的方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>创建一个使用指定 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象来初始化集合的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 属性均设置为指定的值。</returns>
      <param name="newExpression">要将 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="initializers">用来填充 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或<paramref name="initializers" /> 为 null。- 或 -<paramref name="initializers" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>创建一个使用名为“Add”的方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定的值。</returns>
      <param name="newExpression">要将 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="initializers">用来填充 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或<paramref name="initializers" /> 为 null。- 或 -<paramref name="initializers" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
      <exception cref="T:System.InvalidOperationException">没有在 <paramref name="newExpression" />.Type 或其基类型中声明任何名为“Add”（不区分大小写）的实例方法。- 或 -<paramref name="newExpression" />.Type 或其基类型上的 add 方法不是正好带一个参数。- 或 -<paramref name="initializers" /> 的第一个元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性所表示的类型不能赋给 <paramref name="newExpression" />.Type 或其基类型上的 add 方法的参数类型。- 或 -<paramref name="newExpression" />.Type 和/或其基类型上存在多个名为“Add”（不区分大小写）的参数兼容的方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个使用指定方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定的值。</returns>
      <param name="newExpression">要将 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="addMethod">一个 <see cref="T:System.Reflection.MethodInfo" />，表示名为“Add”（不区分大小写）且用于将元素添加到集合的实例方法。</param>
      <param name="initializers">其中包含用来填充 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或<paramref name="initializers" /> 为 null。- 或 -<paramref name="initializers" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 没有实现 <see cref="T:System.Collections.IEnumerable" />。- 或 -<paramref name="addMethod" /> 不为 null，并且它不表示名为“Add”（不区分大小写）的正好带一个参数的实例方法。- 或 -<paramref name="addMethod" /> 不为 null，并且 <paramref name="initializers" /> 的一个或多个元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性所表示的类型不能赋给 <paramref name="addMethod" /> 所表示的方法的参数类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> 为 null，并且 <paramref name="newExpression" />.Type 或其基类型上不存在名为“Add”的带一个兼容类型的参数的任何实例方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>创建一个使用指定方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定的值。</returns>
      <param name="newExpression">要将 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="addMethod">一个 <see cref="T:System.Reflection.MethodInfo" />，表示带一个参数且用于将元素添加到集合中的实例方法。</param>
      <param name="initializers">用来填充 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或<paramref name="initializers" /> 为 null。- 或 -<paramref name="initializers" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 没有实现 <see cref="T:System.Collections.IEnumerable" />。- 或 -<paramref name="addMethod" /> 不为 null，并且它不表示名为“Add”（不区分大小写）的正好带一个参数的实例方法。- 或 -<paramref name="addMethod" /> 不为 null，并且 <paramref name="initializers" /> 的一个或多个元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性所表示的类型不能赋给 <paramref name="addMethod" /> 所表示的方法的参数类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> 为 null，并且 <paramref name="newExpression" />.Type 或其基类型上不存在名为“Add”的带一个兼容类型的参数的任何实例方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>创建具有给定主体的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
      <param name="body">循环体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>创建具有给定主体和中断目标的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
      <param name="body">循环体。</param>
      <param name="break">循环体使用的中断目标。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>创建具有给定主体的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
      <param name="body">循环体。</param>
      <param name="break">循环体使用的中断目标。</param>
      <param name="continue">循环体使用的继续目标。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>在给定左操作数和右操作数的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="binaryType">指定二元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left">一个表示左操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">一个表示右操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 与二元表达式节点不对应。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>在给定左操作数、右操作数和实现方法的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="binaryType">指定二元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left">一个表示左操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">一个表示右操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">如果为 true，则将 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 设置为 true；如果为 false，则将 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 设置为 false。</param>
      <param name="method">指定实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 与二元表达式节点不对应。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>在给定左操作数、右操作数、实现方法和类型转换函数的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="binaryType">指定二元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left">一个表示左操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">一个表示右操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">如果为 true，则将 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 设置为 true；如果为 false，则将 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 设置为 false。</param>
      <param name="method">指定实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">一个表示类型转换函数的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。只有在 <paramref name="binaryType" /> 为 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> 或复合赋值时，才使用此参数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 与二元表达式节点不对应。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示具有指定元素的 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="type">此 <see cref="T:System.Linq.Expressions.CatchBlock" /> 将处理的 <see cref="T:System.Exception" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="variable">一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />，它表示对此处理程序捕获的 <see cref="T:System.Exception" /> 对象的引用。</param>
      <param name="body">catch 语句的主体。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 筛选器的主体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，它表示指定的 <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 的跳转。也可以指定在跳转时传递给标签的值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 <paramref name="kind" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
      <param name="kind">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 的 <see cref="T:System.Linq.Expressions.GotoExpressionKind" />。</param>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.IndexExpression" />，它表示访问对象中的索引属性。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">属性所属的对象。如果属性为 static（在 Visual Basic 中为 shared），则它应为 null。</param>
      <param name="indexer">一个 <see cref="T:System.Linq.Expressions.Expression" />，它表示要编制索引的属性。</param>
      <param name="arguments">一个 IEnumerable&lt;Expression&gt;（在 Visual Basic 中为IEnumerable (Of Expression)），其中包含将用于为属性编制索引的参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>创建一个表示访问字段或属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">一个表示成员所属对象的 <see cref="T:System.Linq.Expressions.Expression" />。对于静态成员，这可以为 null。</param>
      <param name="member">描述要访问的字段或属性的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或<paramref name="member" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>创建一个表示具有指定元素的 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="type">try 表达式的结果类型。如果为 null，则 bodh 和所有处理程序必须具有相同的类型。</param>
      <param name="body">try 块的主体。</param>
      <param name="finally">finally 块的主体。如果 try 块不具有关联的 finally 块，则传递 null。</param>
      <param name="fault">try 块的主体。如果 try 块不具有关联的 fault 块，则传递 null。</param>
      <param name="handlers">表示要与 try 块关联的 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" /> 的集合。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>在给定操作数的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="unaryType">指定一元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="operand">一个表示操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">指定转换的目标的类型的 <see cref="T:System.Type" />（如果不适用，则传递 null）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> 与一元表达式节点不对应。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>在给定操作数和实现方法的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="unaryType">指定一元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="operand">一个表示操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">指定转换的目标的类型的 <see cref="T:System.Type" />（如果不适用，则传递 null）。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> 与一元表达式节点不对应。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>创建一个表示递归初始化某个字段或属性的成员的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性均设置为指定的值。</returns>
      <param name="member">要将 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <param name="bindings">其中包含用来填充 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 集合的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或<paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。- 或 -<paramref name="bindings" /> 的元素的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性不表示 <paramref name="member" /> 所表示的字段或属性类型的成员。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>创建一个表示递归初始化某个字段或属性的成员的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性均设置为指定的值。</returns>
      <param name="member">要将 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <param name="bindings">用来填充 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 集合的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或<paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。- 或 -<paramref name="bindings" /> 的元素的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性不表示 <paramref name="member" /> 所表示的字段或属性类型的成员。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>使用属性访问器方法创建一个表示对所访问的成员的成员进行递归初始化的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示在 <paramref name="propertyAccessor" /> 中访问的属性的 <see cref="T:System.Reflection.PropertyInfo" />，并且 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性设置为指定的值。</returns>
      <param name="propertyAccessor">表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="bindings">其中包含用来填充 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 集合的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或<paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。- 或 -<paramref name="bindings" /> 的元素的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性不表示 <paramref name="propertyAccessor" /> 所表示的方法访问的属性类型的成员。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>使用属性访问器方法创建一个表示对所访问的成员的成员进行递归初始化的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示在 <paramref name="propertyAccessor" /> 中访问的属性的 <see cref="T:System.Reflection.PropertyInfo" />，并且 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性设置为指定的值。</returns>
      <param name="propertyAccessor">表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="bindings">用来填充 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 集合的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或<paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。- 或 -<paramref name="bindings" /> 的元素的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性不表示 <paramref name="propertyAccessor" /> 所表示的方法访问的属性类型的成员。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>表示一个表达式，该表达式创建新对象并初始化该对象的一个属性。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />，并且其 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 属性均设置为指定的值。</returns>
      <param name="newExpression">要将 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="bindings">其中包含用来填充 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 集合的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或<paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bindings" /> 的元素的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性不表示 <paramref name="newExpression" />.Type 所表示的类型的成员。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>创建 <see cref="T:System.Linq.Expressions.MemberInitExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />，并且其 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 属性均设置为指定的值。</returns>
      <param name="newExpression">要将 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.NewExpression" />。</param>
      <param name="bindings">用来填充 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 集合的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或<paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bindings" /> 的元素的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性不表示 <paramref name="newExpression" />.Type 所表示的类型的成员。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示算术余数运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义取模运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示算术余数运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义取模运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示余数赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示余数赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示余数赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义乘法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义乘法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示不进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示进行溢出检查的乘法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义乘法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的算术乘法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义乘法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>创建一个表示算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定的值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="expression" />.Type 定义一元负运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="expression" />.Type 定义一元负运算符。- 或 -<paramref name="expression" />.Type（如果它是可以为 null 的值类型，则取其相应的不可以为 null 的类型）不能赋给 <paramref name="method" /> 所表示的方法的参数类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定的值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="expression" />.Type 定义一元负运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的算术求反运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="expression" />.Type 定义一元负运算符。- 或 -<paramref name="expression" />.Type（如果它是可以为 null 的值类型，则取其相应的不可以为 null 的类型）不能赋给 <paramref name="method" /> 所表示的方法的参数类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>创建一个表示调用不带参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 属性设置为指定的值。</returns>
      <param name="constructor">要将 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 属性设置为与其相等的 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="constructor" /> 表示的构造函数至少具有一个参数。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个表示调用带指定参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 属性均设置为指定的值。</returns>
      <param name="constructor">要将 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 属性设置为与其相等的 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="arguments">其中包含用来填充 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 null。- 或 -<paramref name="arguments" /> 的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 参数包含的元素数量与 <paramref name="constructor" /> 所表示的构造函数的参数数量不同。- 或 -<paramref name="arguments" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不能赋给 <paramref name="constructor" /> 所表示的构造函数的相应参数类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>创建一个表示调用带指定参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。其中指定了访问构造函数初始化的字段的成员。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、<see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 属性均设置为指定的值。</returns>
      <param name="constructor">要将 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 属性设置为与其相等的 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="arguments">其中包含用来填充 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="members">其中包含用来填充 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 集合的 <see cref="T:System.Reflection.MemberInfo" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 null。- 或 -<paramref name="arguments" /> 的一个元素为 null。- 或 -<paramref name="members" /> 的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 参数包含的元素数量与 <paramref name="constructor" /> 所表示的构造函数的参数数量不同。- 或 -<paramref name="arguments" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不能赋给 <paramref name="constructor" /> 所表示的构造函数的相应参数类型。- 或 -<paramref name="members" /> 参数没有包含与 <paramref name="arguments" /> 相同数量的元素。- 或 -<paramref name="arguments" /> 的元素具有 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性，该属性表示不能赋给 <paramref name="members" /> 的相应元素所表示的成员类型的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>创建一个表示调用带指定参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。将访问构造函数初始化字段的成员指定为数组。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、<see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 属性均设置为指定的值。</returns>
      <param name="constructor">要将 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 属性设置为与其相等的 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="arguments">其中包含用来填充 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <param name="members">用来填充 <see cref="P:System.Linq.Expressions.NewExpression.Members" /> 集合的 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 null。- 或 -<paramref name="arguments" /> 的一个元素为 null。- 或 -<paramref name="members" /> 的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 参数包含的元素数量与 <paramref name="constructor" /> 所表示的构造函数的参数数量不同。- 或 -<paramref name="arguments" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不能赋给 <paramref name="constructor" /> 所表示的构造函数的相应参数类型。- 或 -<paramref name="members" /> 参数没有包含与 <paramref name="arguments" /> 相同数量的元素。- 或 -<paramref name="arguments" /> 的元素具有 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性，该属性表示不能赋给 <paramref name="members" /> 的相应元素所表示的成员类型的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>创建一个表示调用带指定参数的指定构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 和 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 属性均设置为指定的值。</returns>
      <param name="constructor">要将 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 属性设置为与其相等的 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="arguments">用来填充 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> 为 null。- 或 -<paramref name="arguments" /> 的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 的长度与 <paramref name="constructor" /> 表示的构造函数的参数数量正好相匹配。- 或 -<paramref name="arguments" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不能赋给 <paramref name="constructor" /> 所表示的构造函数的相应参数类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>创建一个表示调用指定类型的无参数构造函数的 <see cref="T:System.Linq.Expressions.NewExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.New" />，并且其 <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> 属性设置为 <see cref="T:System.Reflection.ConstructorInfo" />，这表示不带指定类型的参数的构造函数。</returns>
      <param name="type">一个具有不带参数的构造函数的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 所表示的类型不具有无参数构造函数。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个表示创建具有指定秩的数组的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />，并且其 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 属性设置为指定的值。</returns>
      <param name="type">一个表示数组的元素类型的 <see cref="T:System.Type" />。</param>
      <param name="bounds">其中包含用来填充 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或<paramref name="bounds" /> 为 null。- 或 -<paramref name="bounds" /> 的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bounds" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不表示整型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>创建一个表示创建具有指定秩的数组的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />，并且其 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 属性设置为指定的值。</returns>
      <param name="type">一个表示数组的元素类型的 <see cref="T:System.Type" />。</param>
      <param name="bounds">用来填充 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或<paramref name="bounds" /> 为 null。- 或 -<paramref name="bounds" /> 的一个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bounds" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性不表示整型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个表示创建一维数组并使用元素列表初始化该数组的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />，并且其 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 属性设置为指定的值。</returns>
      <param name="type">一个表示数组的元素类型的 <see cref="T:System.Type" />。</param>
      <param name="initializers">其中包含用来填充 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或<paramref name="initializers" /> 为 null。- 或 -<paramref name="initializers" /> 的一个元素为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="initializers" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性表示不能赋给 <paramref name="type" /> 所表示的类型的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>创建一个表示创建一维数组并使用元素列表初始化该数组的 <see cref="T:System.Linq.Expressions.NewArrayExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.NewArrayExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />，并且其 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 属性设置为指定的值。</returns>
      <param name="type">一个表示数组的元素类型的 <see cref="T:System.Type" />。</param>
      <param name="initializers">用来填充 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 集合的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或<paramref name="initializers" /> 为 null。- 或 -<paramref name="initializers" /> 的一个元素为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="initializers" /> 的元素的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性表示不能赋给 <paramref name="type" /> 所表示的类型的类型。</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>其中一个 <see cref="T:System.Linq.Expressions.ExpressionType" /> 值。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位求补运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Not" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定的值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="expression" />.Type 定义一元 not 运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位求补运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Not" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="expression" />.Type 定义一元 not 运算符。- 或 -<paramref name="expression" />.Type（如果它是可以为 null 的值类型，则取其相应的不可以为 null 的类型）不能赋给 <paramref name="method" /> 所表示的方法的参数类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义不相等运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示不相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">如果为 true，则将 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 设置为 true；如果为 false，则将 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 设置为 false。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义不等运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>返回表示二进制反码的表达式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的实例。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>返回表示二进制反码的表达式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的实例。</returns>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位 OR 运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义按位 OR 运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位 OR 运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Or" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义按位 OR 运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位 OR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位 OR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示按位 OR 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示仅在第一个操作数的计算结果为 false 时才计算第二个操作数的条件 OR 运算。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义按位 OR 运算符。- 或 -<paramref name="left" />.Type 和 <paramref name="right" />.Type 不是同一布尔值类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示仅在第一个操作数的计算结果为 false 时才计算第二个操作数的条件 OR 运算。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义按位 OR 运算符。- 或 -<paramref name="method" /> 为 null 并且 <paramref name="left" />.Type 和 <paramref name="right" />.Type 不是同一布尔值类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点，该节点可用于标识表达式目录树中的参数或变量。</summary>
      <returns>具有指定的名称和类型的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点。</returns>
      <param name="type">参数或变量的类型。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点，该节点可用于标识表达式目录树中的参数或变量。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> 属性均设置为指定的值。</returns>
      <param name="type">参数或变量的类型。</param>
      <param name="name">仅用于调试或打印目的的参数或变量的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示在对表达式进行赋值之后将原始表达式递减 1。</summary>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示在对表达式进行赋值之后将原始表达式递减 1。</summary>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示在对表达式进行赋值之后将原始表达式递增 1。</summary>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示在对表达式进行赋值之后将原始表达式递增 1。</summary>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示对数进行幂运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义幂运算符。- 或 -<paramref name="left" />.Type 和/或 <paramref name="right" />.Type 不为 <see cref="T:System.Double" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示对数进行幂运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Power" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义幂运算符。- 或 -<paramref name="method" /> 为 null，并且 <paramref name="left" />.Type 和/或 <paramref name="right" />.Type 不为 <see cref="T:System.Double" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示对表达式求幂并将结果赋回给表达式。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示对表达式求幂并将结果赋回给表达式。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示对表达式求幂并将结果赋回给表达式。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它将表达式递减 1 并将结果赋回给表达式。</summary>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它将表达式递减 1 并将结果赋回给表达式。</summary>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它将表达式递增 1 并将结果赋回给表达式。</summary>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它将表达式递增 1 并将结果赋回给表达式。</summary>
      <returns>一个表示结果表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要进行运算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>使用属性访问器方法创建一个表示访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为 <paramref name="expression" />，并且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为表示在 <paramref name="propertyAccessor" /> 中访问的属性的 <see cref="T:System.Reflection.PropertyInfo" />。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。对于静态属性，这可以为 null。</param>
      <param name="propertyAccessor">表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 为 null。- 或 -<paramref name="propertyAccessor" /> 表示的字段不为 static（在 Visual Basic 中为 Shared），而且 <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 不能赋给 <paramref name="propertyAccessor" /> 所表示的方法的声明类型。- 或 -<paramref name="propertyAccessor" /> 所表示的方法不为属性访问器方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>创建一个表示访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，并且其 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性均设置为指定的值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。对于静态属性，这可以为 null。</param>
      <param name="property">要将 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为与其相等的 <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> 为 null。- 或 -<paramref name="property" /> 表示的属性不为 static（在 Visual Basic 中为 Shared），而且 <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 不能赋给 <paramref name="property" /> 所表示的属性的声明类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.IndexExpression" />，它表示对索引属性的访问。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">属性所属的对象。如果该属性为 static/shared，则此对象必须为 null。</param>
      <param name="indexer">表示要编制索引的属性的 <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="arguments">用于为属性编制索引的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.IndexExpression" />，它表示对索引属性的访问。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">属性所属的对象。如果该属性为 static/shared，则此对象必须为 null。</param>
      <param name="indexer">表示要编制索引的属性的 <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="arguments">用于为属性编制索引的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>创建一个表示访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为 <paramref name="expression" />，并且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为 <paramref name="propertyName" /> 所表示的属性的 <see cref="T:System.Reflection.PropertyInfo" />。</returns>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 中包含一个名为 <paramref name="propertyName" /> 的属性。对于静态属性，这可以为 null。</param>
      <param name="propertyName">要访问的属性的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或<paramref name="propertyName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有在 <paramref name="expression" />.Type 或其基类型中定义名为 <paramref name="propertyName" /> 的属性。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.IndexExpression" />，它表示对索引属性的访问。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">属性所属的对象。如果该属性为 static/shared，则此对象必须为 null。</param>
      <param name="propertyName">索引器的名称。</param>
      <param name="arguments">用于为属性编制索引的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>创建一个访问属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">属性的包含对象。对于静态属性，这可以为 null。</param>
      <param name="type">包含属性的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="propertyName">要访问的属性。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>创建一个表示访问属性或字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为 <paramref name="expression" />，并且 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为 <paramref name="propertyOrFieldName" /> 所表示的属性或字段的 <see cref="T:System.Reflection.PropertyInfo" /> 或 <see cref="T:System.Reflection.FieldInfo" />。</returns>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 中包含一个名为 <paramref name="propertyOrFieldName" /> 的属性或字段。对于静态成员，这可以为 null。</param>
      <param name="propertyOrFieldName">要访问的属性或字段的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或<paramref name="propertyOrFieldName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有在 <paramref name="expression" />.Type 或其基类型中定义名为 <paramref name="propertyOrFieldName" /> 的属性或字段。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>创建一个表示具有类型 <see cref="T:System.Linq.Expressions.Expression" /> 的常量值的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Quote" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定的值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>将此节点简化为更简单的表达式。如果 CanReduce 返回 true，则它应返回有效的表达式。此方法可以返回本身必须简化的另一个节点。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>将此节点简化为更简单的表达式。如果 CanReduce 返回 true，则它应返回有效的表达式。此方法可以返回本身必须简化的另一个节点。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>将表达式简化为已知节点类型（即非 Extension 节点）或仅在此类型为已知类型时返回表达式。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示引用相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示引用不相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示重新引发异常。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示重新引发异常。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示重新引发具有给定类型的异常。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示重新引发异常。</returns>
      <param name="type">表达式的新 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>创建一个表示 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Return，并且其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。可以指定在跳转时传递给标签的值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Continue，并且其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示具有指定类型的 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。可以指定在跳转时传递给标签的值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Continue，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>创建一个表示具有指定类型的 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Return，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.GotoExpression" /> 将跳至的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位右移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义右移位运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位右移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义右移位运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位右移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位右移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示按位右移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的实例。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的实例，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />，并且其 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 属性设置为指定的值。</returns>
      <param name="variables">用于填充 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的集合。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>创建 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的实例。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的实例，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />，并且其 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 属性设置为指定的值。</returns>
      <param name="variables">用来填充 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 集合的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的数组。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义减法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义减法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示不进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示进行溢出检查的减法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义减法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的算术减法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="left">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或<paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义减法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>创建一个表示具有默认分支的 switch 语句的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">要针对每个分支测试的值。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时的多分支选择的结果。</param>
      <param name="cases">此 switch 表达式的分支集。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>创建一个表示具有默认分支的 switch 语句的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">要针对每个分支测试的值。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时的多分支选择的结果。</param>
      <param name="comparison">要使用的相等比较方法。</param>
      <param name="cases">此 switch 表达式的分支集。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>创建一个表示具有默认分支的 switch 语句的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">要针对每个分支测试的值。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时的多分支选择的结果。</param>
      <param name="comparison">要使用的相等比较方法。</param>
      <param name="cases">此 switch 表达式的分支集。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>创建一个表示不带默认分支的 switch 语句的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="switchValue">要针对每个分支测试的值。</param>
      <param name="cases">此 switch 表达式的分支集。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>创建一个表示具有默认分支的 switch 语句的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="type">switch 的结果类型。</param>
      <param name="switchValue">要针对每个分支测试的值。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时的多分支选择的结果。</param>
      <param name="comparison">要使用的相等比较方法。</param>
      <param name="cases">此 switch 表达式的分支集。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>创建一个表示具有默认分支的 switch 语句的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchExpression" />。</returns>
      <param name="type">switch 的结果类型。</param>
      <param name="switchValue">要针对每个分支测试的值。</param>
      <param name="defaultBody">
        <paramref name="switchValue" /> 不匹配任何分支时的多分支选择的结果。</param>
      <param name="comparison">要使用的相等比较方法。</param>
      <param name="cases">此 switch 表达式的分支集。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建要在 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 对象中使用的 <see cref="T:System.Linq.Expressions.SwitchCase" /> 对象。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
      <param name="body">分支的主体。</param>
      <param name="testValues">分支的测试值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>创建要在 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 中使用的 <see cref="T:System.Linq.Expressions.SwitchCase" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.SwitchCase" />。</returns>
      <param name="body">分支的主体。</param>
      <param name="testValues">分支的测试值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的实例。</summary>
      <returns>其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</returns>
      <param name="fileName">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 设置为与其相等的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的实例。</summary>
      <returns>其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</returns>
      <param name="fileName">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 设置为与其相等的 <see cref="T:System.String" />。</param>
      <param name="language">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 设置为与其相等的 <see cref="T:System.Guid" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的实例。</summary>
      <returns>其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 和 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 属性设置为指定值的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</returns>
      <param name="fileName">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 设置为与其相等的 <see cref="T:System.String" />。</param>
      <param name="language">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 设置为与其相等的 <see cref="T:System.Guid" />。</param>
      <param name="languageVendor">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 设置为与其相等的 <see cref="T:System.Guid" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>创建 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> 的实例。</summary>
      <returns>其 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 以及 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> 属性均设置为指定值的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</returns>
      <param name="fileName">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> 设置为与其相等的 <see cref="T:System.String" />。</param>
      <param name="language">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> 设置为与其相等的 <see cref="T:System.Guid" />。</param>
      <param name="languageVendor">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> 设置为与其相等的 <see cref="T:System.Guid" />。</param>
      <param name="documentType">要将 <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> 设置为与其相等的 <see cref="T:System.Guid" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示引发异常。</summary>
      <returns>表示异常的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="value">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示引发具有给定类型的异常。</summary>
      <returns>表示异常的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="value">
        <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">表达式的新 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>返回 <see cref="T:System.Linq.Expressions.Expression" /> 的文本化表示形式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 的文本化表示形式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />，该 try 块包含任意数量的 catch 语句，但不包含 fault 和 finally 块。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try 块的主体。</param>
      <param name="handlers">包含零个或多个 <see cref="T:System.Linq.Expressions.CatchBlock" /> 表达式的数组，这些表达式表示要与 try 块关联的 catch 语句。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />，该 try 块包含任意数量的 catch 语句和一个 finally 块。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try 块的主体。</param>
      <param name="finally">finally 块的主体。</param>
      <param name="handlers">包含零个或多个 <see cref="T:System.Linq.Expressions.CatchBlock" /> 表达式的数组，这些表达式表示要与 try 块关联的 catch 语句。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />，该 try 块包含一个 fault 块，但不包含 catch 语句。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try 块的主体。</param>
      <param name="fault">fault 块的主体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />，该 try 块包含一个 finally 块，但不包含 catch 语句。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="body">try 块的主体。</param>
      <param name="finally">finally 块的主体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>创建一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 对象，该对象表示具有特定类型参数的泛型 System.Action 委托类型。</summary>
      <returns>如果已为特定的 <paramref name="typeArgs" /> 创建泛型 System.Action 委托类型，则为 true；否则为 false。</returns>
      <param name="typeArgs">Type 对象的数组，这些对象指定 System.Action 委托类型的类型参数。</param>
      <param name="actionType">在此方法返回时，包含具有特定类型参数的泛型 System.Action 委托类型。如果没有与 <paramref name="typeArgs" /> 匹配的泛型 System.Action 委托，则包含 null。此参数以未初始化状态传递。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>创建一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 对象，该对象表示具有特定类型参数的泛型 System.Func 委托类型。最后一个类型参数指定已创建委托的返回类型。</summary>
      <returns>如果已为特定的 <paramref name="typeArgs" /> 创建泛型 System.Func 委托类型，则为 true；否则为 false。</returns>
      <param name="typeArgs">Type 对象的数组，这些对象指定 System.Func 委托类型的类型参数。</param>
      <param name="funcType">在此方法返回时，包含具有特定类型参数的泛型 System.Func 委托类型。如果没有与 <paramref name="typeArgs" /> 匹配的泛型 System.Func 委托，则包含 null。此参数以未初始化状态传递。</param>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个显式引用或装箱转换的 <see cref="T:System.Linq.Expressions.UnaryExpression" />（如果转换失败，则提供 null）。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性均设置为指定的值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或<paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个比较运行时类型标识的 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" />，并且其 <see cref="T:System.Linq.Expressions.Expression" /> 和 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 属性均设置为指定的值。</returns>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" />，并且其 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 属性均设置为指定的值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或<paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>创建一个表示一元正运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为指定的值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="expression" />.Type 定义一元正运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示一元正运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性均设置为指定的值。</returns>
      <param name="expression">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性设置为与其相等的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">要将 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为与其相等的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中为 Shared）或者不是正好带一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="expression" />.Type 定义一元正运算符。- 或 -<paramref name="expression" />.Type（如果它是可以为 null 的值类型，则取其相应的不可以为 null 的类型）不能赋给 <paramref name="method" /> 所表示的方法的参数类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示显式取消装箱的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的实例。</returns>
      <param name="expression">要取消装箱的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">表达式的新 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点，该节点可用于标识表达式目录树中的参数或变量。</summary>
      <returns>具有指定的名称和类型的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点。</returns>
      <param name="type">参数或变量的类型。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点，该节点可用于标识表达式目录树中的参数或变量。</summary>
      <returns>具有指定的名称和类型的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 节点。</returns>
      <param name="type">参数或变量的类型。</param>
      <param name="name">参数或变量的名称。此名称仅用于调试或打印目的。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>简化节点，然后对简化的表达式调用访问者委托。该方法在节点不可简化时引发异常。</summary>
      <returns>要访问的表达式，或应在树中替换此表达式的表达式。</returns>
      <param name="visitor">
        <see cref="T:System.Func`2" /> 的实例。</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>以表达式目录树的形式将强类型 lambda 表达式表示为数据结构。无法继承此类。</summary>
      <typeparam name="TDelegate">
        <see cref="T:System.Linq.Expressions.Expression`1" /> 表示的委托的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>将表达式目录树描述的 lambda 表达式编译为可执行代码，并生成表示该 lambda 表达式的委托。</summary>
      <returns>一个 <paramref name="TDelegate" /> 类型的委托，它表示由 <see cref="T:System.Linq.Expressions.Expression`1" /> 描述的已编译的 lambda 表达式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="body">结果的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 属性。</param>
      <param name="parameters">结果的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>描述表达式目录树的节点的节点类型。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>加法运算，如 a + b，针对数值操作数，不进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>加法复合赋值运算，如 (a += b)，针对数值操作数，不进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>加法复合赋值运算，如 (a += b)，针对数值操作数，进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>加法运算，如 (a + b)，针对数值操作数，进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>按位或逻辑 AND 运算，如 C# 中的 (a &amp; b) 和 Visual Basic 中的 (a And b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>条件 AND 运算，它仅在第一个操作数的计算结果为 true 时才计算第二个操作数。它与 C# 中的 (a &amp;&amp; b) 和 Visual Basic 中的 (a AndAlso b) 对应。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>按位或逻辑 AND 复合赋值运算，如 C# 中的 (a &amp;= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>一维数组中的索引运算，如 C# 中的 array[index] 或 Visual Basic 中的 array(index)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>获取一维数组长度的运算，如 array.Length。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>赋值运算，如 (a = b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>表达式块。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>方法调用，如在 obj.sampleMethod() 表达式中。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>表示 null 合并运算的节点，如 C# 中的 (a ?? b) 或 Visual Basic 中的 If(a, b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>条件运算，如 C# 中的 a &gt; b ? a : b 或 Visual Basic 中的 If(a &gt; b, a, b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>一个常量值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>强制转换或转换运算，如 C#  中的 (SampleType)obj 或 Visual Basic 中的 CType(obj, SampleType)。对于数值转换，如果转换后的值对于目标类型来说太大，这不会引发异常。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>强制转换或转换运算，如 C#  中的 (SampleType)obj 或 Visual Basic 中的 CType(obj, SampleType)。对于数值转换，如果转换后的值与目标类型大小不符，则引发异常。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>调试信息。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>一元递减运算，如 C# 和 Visual Basic 中的 (a - 1)。不应就地修改 a 对象。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>默认值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>除法运算，如 (a / b)，针对数值操作数。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>除法复合赋值运算，如 (a /= b)，针对数值操作数。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>动态操作。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>表示相等比较的节点，如 C# 中的 (a == b) 或 Visual Basic 中的 (a = b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>按位或逻辑 XOR 运算，如 C# 中的 (a ^ b) 或 Visual Basic 中的 (a Xor b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>按位或逻辑 XOR 复合赋值运算，如 C# 中的 (a ^= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>扩展表达式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>“跳转”表达式，如 C# 中的 goto Label 或 Visual Basic 中的 GoTo Label。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>“大于”比较，如 (a &gt; b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>“大于或等于”比较，如 (a &gt;= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>一元递增运算，如 C# 和 Visual Basic 中的 (a + 1)。不应就地修改 a 对象。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>索引运算或访问使用参数的属性的运算。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>调用委托或 lambda 表达式的运算，如 sampleDelegate.Invoke().。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>false 条件值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>true 条件值。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>标签。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>lambda 表达式，如 C# 中的 a =&gt; a + a 或 Visual Basic 中的 Function(a) a + a。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>按位左移运算，如 (a &lt;&lt; b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>按位左移复合赋值运算，如 (a &lt;&lt;= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>“小于”比较，如 (a &lt; b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>“小于或等于”比较，如 (a &lt;= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>创建新的 <see cref="T:System.Collections.IEnumerable" /> 对象并从元素列表中初始化该对象的运算，如 C# 中的 new List&lt;SampleType&gt;(){ a, b, c } 或 Visual Basic 中的 Dim sampleList = { a, b, c }。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>循环，如 for 或 while。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>从字段或属性进行读取的运算，如 obj.SampleProperty。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>创建新的对象并初始化其一个或多个成员的运算，如 C# 中的 new Point { X = 1, Y = 2 } 或 Visual Basic 中的 New Point With {.X = 1, .Y = 2}。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>算术余数运算，如 C# 中的 (a % b) 或 Visual Basic 中的 (a Mod b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>算术余数复合赋值运算，如 C# 中的 (a %= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>乘法运算，如 (a * b)，针对数值操作数，不进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>乘法复合赋值运算，如 (a *= b)，针对数值操作数，不进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>乘法复合赋值运算，如 (a *= b)，针对数值操作数，进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>乘法运算，如 (a * b)，针对数值操作数，进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>算术求反运算，如 (-a)。不应就地修改 a 对象。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>算术求反运算，如 (-a)，进行溢出检查。不应就地修改 a 对象。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>调用构造函数创建新对象的运算，如 new SampleType()。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>创建新数组（其中每个维度的界限均已指定）的运算，如 C# 中的 new SampleType[dim1, dim2] 或 Visual Basic 中的 New SampleType(dim1, dim2)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>创建新的一维数组并从元素列表中初始化该数组的运算，如 C# 中的 new SampleType[]{a, b, c} 或 Visual Basic 中的 New SampleType(){a, b, c}。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>按位求补运算或逻辑求反运算。在 C# 中，它与整型的 (~a) 和布尔值的 (!a) 等效。在 Visual Basic 中，它与 (Not a)等效。不应就地修改 a 对象。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>不相等比较，如 C# 中的 (a != b) 或 Visual Basic 中的 (a &lt;&gt; b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>二进制反码运算，如 C# 中的 (~a)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>按位或逻辑 OR 运算，如 C# 中的 (a | b) 或 Visual Basic 中的 (a Or b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>按位或逻辑 OR 复合赋值，如 C# 中的 (a |= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>短路条件 OR 运算，如 C# 中的 (a || b) 或 Visual Basic 中的 (a OrElse b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>对在表达式上下文中定义的参数或变量的引用。有关更多信息，请参见 <see cref="T:System.Linq.Expressions.ParameterExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>一元后缀递减，如 (a--)。应就地修改 a 对象。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>一元后缀递增，如 (a++)。应就地修改 a 对象。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>对某个数字进行幂运算的数学运算，如 Visual Basic 中的 (a ^ b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>对某个数字进行幂运算的复合赋值运算，如 Visual Basic 中的 (a ^= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>一元前缀递减，如 (--a)。应就地修改 a 对象。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>一元前缀递增，如 (++a)。应就地修改 a 对象。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>具有类型为 <see cref="T:System.Linq.Expressions.Expression" /> 的常量值的表达式。<see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> 节点可包含对参数的引用，这些参数在该节点表示的表达式的上下文中定义。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>按位右移运算，如 (a &gt;&gt; b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>按位右移复合赋值运算，如 (a &gt;&gt;= b)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>运行时变量的列表。有关更多信息，请参见 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>减法运算，如 (a - b)，针对数值操作数，不进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>减法复合赋值运算，如 (a -= b)，针对数值操作数，不进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>减法复合赋值运算，如 (a -= b)，针对数值操作数，进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>算术减法运算，如 (a - b)，针对数值操作数，进行溢出检查。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>多分支选择运算，如 C# 中的 switch 或 Visual Basic 中的 Select Case。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>引发异常的运算，如 throw new Exception()。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>try-catch 表达式。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>显式引用或装箱转换，其中如果转换失败则提供 null，如 C# 中的 (obj as SampleType) 或 Visual Basic 中的 TryCast(obj, SampleType)。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>确切类型测试。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>类型测试，如 C# 中的 obj is SampleType 或 Visual Basic 中的 TypeOf obj is SampleType。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>一元加法运算，如 (+a)。预定义的一元加法运算的结果是操作数的值，但用户定义的实现可以产生特殊结果。</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>取消装箱值类型运算，如 MSIL 中的 unbox 和 unbox.any 指令。 </summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>表示表达式目录树的访问者或重写者。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>初始化 <see cref="T:System.Linq.Expressions.ExpressionVisitor" /> 的新实例。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>将表达式列表调度到此类中更专用的访问方法之一。</summary>
      <returns>如果修改了任何一个元素，则为修改后的表达式列表；否则返回原始的表达式列表。</returns>
      <param name="nodes">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>使用指定的元素访问者访问集合中的所有节点。</summary>
      <returns>如果修改了任何元素，则为修改后的节点列表；否则返回原始的节点列表。</returns>
      <param name="nodes">要访问的节点。</param>
      <param name="elementVisitor">一个委托，访问单个元素，还可以将它替换为新元素。</param>
      <typeparam name="T">节点的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>将表达式调度到此类中更专用的访问方法之一。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>访问表达式，将结果强制转换回原始的表达式类型。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="nodes">要访问的表达式。</param>
      <param name="callerName">调用方法的名称，用于报告更好的错误消息。</param>
      <typeparam name="T">表达式的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">此节点的访问方法返回不同的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>访问表达式，将结果强制转换回原始的表达式类型。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
      <param name="callerName">调用方法的名称，用于报告更好的错误消息。</param>
      <typeparam name="T">表达式的类型。</typeparam>
      <exception cref="T:System.InvalidOperationException">此节点的访问方法返回不同的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.BlockExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>访问 <see cref="T:System.Linq.Expressions.CatchBlock" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.ConstantExpression" />。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.DefaultExpression" />。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>访问 <see cref="T:System.Linq.Expressions.ElementInit" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>访问扩展表达式的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.GotoExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.IndexExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.InvocationExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>访问 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>访问 <see cref="T:System.Linq.Expressions.Expression`1" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
      <typeparam name="T">委托的类型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.LoopExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.MemberExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>访问 <see cref="T:System.Linq.Expressions.MemberAssignment" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>访问 <see cref="T:System.Linq.Expressions.MemberBinding" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>访问 <see cref="T:System.Linq.Expressions.MemberListBinding" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>访问 <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.NewExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.NewArrayExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.ParameterExpression" />。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>访问 <see cref="T:System.Linq.Expressions.SwitchCase" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.TryExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>访问 <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的子级。</summary>
      <returns>如果修改了该表达式或任何子表达式，则为修改后的表达式；否则返回原始表达式。</returns>
      <param name="node">要访问的表达式。</param>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>表示无条件跳转。这包括 return 语句、break 和 continue 语句以及其他跳转。</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>“转到”表达式的种类。仅供参考。</summary>
      <returns>表示“转到”表达式种类的 <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>此节点跳转到的目标标签。</summary>
      <returns>表示此节点的目标标签的 <see cref="T:System.Linq.Expressions.LabelTarget" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.GotoExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="target">结果的 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性。</param>
      <param name="value">结果的 <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> 属性。</param>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>传递到目标的值或 null（如果目标类型为 System.Void）。</summary>
      <returns>表示传递到目标的值或 null 的 <see cref="T:System.Linq.Expressions.Expression" /> 对象。</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>指定此 <see cref="T:System.Linq.Expressions.GotoExpression" /> 表示的跳转种类。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>一个表示 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>一个表示 continue 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>一个表示跳转到某个位置的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>一个表示 return 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>表示编制属性或数组的索引。</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>获取将用于编制属性或数组索引的参数。</summary>
      <returns>包含将用于编制属性或数组索引的参数的只读集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>如果表达式表示索引属性，则获取属性的 <see cref="T:System.Reflection.PropertyInfo" />，否则返回 null。</summary>
      <returns>如果表达式表示索引属性，则为属性的 <see cref="T:System.Reflection.PropertyInfo" />，否则为 null。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>要编制索引的对象。</summary>
      <returns>表示要编制索引的对象的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.IndexExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="object">结果的 <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> 属性。</param>
      <param name="arguments">结果的 <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>表示将委托或 lambda 表达式应用于参数表达式列表的表达式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>获取对其应用委托或 lambda 表达式的参数。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，表示对其应用委托的参数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>获取要应用的委托或 lambda 表达式。</summary>
      <returns>表示要应用的委托的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>返回此表达式的节点类型。扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>获取此 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="expression">结果的 <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> 属性。</param>
      <param name="arguments">结果的 <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>表示一个标签，可以将该标签放置在任何 <see cref="T:System.Linq.Expressions.Expression" /> 上下文中。如果已跳转到该标签，则它将获取由对应的 <see cref="T:System.Linq.Expressions.GotoExpression" /> 提供的值。否则，它接收 <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> 中的值。如果 <see cref="T:System.Type" /> 等于 System.Void，则不应提供值。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>通过常规控制流到达标签（例如，不跳转到标签）时 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的值。</summary>
      <returns>Expression 对象，表示 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的值。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>此标签与其关联的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns>此标签与其关联的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.LabelExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="target">结果的 <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> 属性。</param>
      <param name="defaultValue">结果的 <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> 属性</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>用于表示 <see cref="T:System.Linq.Expressions.GotoExpression" /> 的目标。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>获取标签的名称。</summary>
      <returns>标签的名称。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>返回一个 <see cref="T:System.String" />，它表示当前 <see cref="T:System.Object" />。</summary>
      <returns>一个 <see cref="T:System.String" />，它表示当前的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>跳转到标签时传递的值的类型或 <see cref="T:System.Void" />（如果不应传递值）。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示跳转到标签时传递的值的类型或 <see cref="T:System.Void" />（如果不应传递值）</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>描述一个 lambda 表达式。这将捕获与 .NET 方法体类似的代码块。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>获取 lambda 表达式的主体。</summary>
      <returns>一个表示 lambda 表达式主体的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>生成表示 lambda 表达式的委托。</summary>
      <returns>一个 <see cref="T:System.Delegate" />，它包含 lambda 表达式的已编译版本。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>获取 lambda 表达式的名称。</summary>
      <returns>lambda 表达式的名称。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>获取 lambda 表达式的参数。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，表示 lambda 表达式的参数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>获取 lambda 表达式的返回类型。</summary>
      <returns>表示 lambda 表达式的类型的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>获取一个值，该值指示是否将通过尾调用优化来编译 lambda 表达式。</summary>
      <returns>如果将通过尾调用优化来编译 lambda 表达式，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>表示包含集合初始值设定项的构造函数调用。</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>获取一个值，该值指示是否可以减小此表达式目录树节点。</summary>
      <returns>如果可以简化节点，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>获取用于初始化集合的元素初始值设定项。</summary>
      <returns>表示用于初始化集合的元素的 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>获取包含对集合类型的构造函数的调用的表达式。</summary>
      <returns>表示对集合类型的构造函数的调用的 <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>将二进制表达式节点简化为更简单的表达式。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="newExpression">结果的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性。</param>
      <param name="initializers">结果的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>表示无限循环。可以使用“break”退出它。</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>获取作为循环体的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>作为循环体的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>获取循环体用作 break 语句目标的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns>循环体用作 break 语句目标的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>获取循环体用作 continue 语句目标的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</summary>
      <returns>循环体用作 continue 语句目标的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>返回此表达式的节点类型。扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.LoopExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="breakLabel">结果的 <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> 属性。</param>
      <param name="continueLabel">结果的 <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> 属性。</param>
      <param name="body">结果的 <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>表示针对对象的字段或属性的赋值运算。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>获取要分配给字段或属性的表达式。</summary>
      <returns>表示要分配给字段或属性的值的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="expression">结果的 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>提供一种基类，该基类派生表示绑定的类，这些绑定用于初始化新创建对象的成员。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>初始化 <see cref="T:System.Linq.Expressions.MemberBinding" /> 类的新实例。</summary>
      <param name="type">区分所表示的绑定类型的 <see cref="T:System.Linq.Expressions.MemberBindingType" />。</param>
      <param name="member">表示要初始化的字段或属性的 <see cref="T:System.Reflection.MemberInfo" />。</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>获取所表示的绑定类型。</summary>
      <returns>其中一个 <see cref="T:System.Linq.Expressions.MemberBindingType" /> 值。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>获取要初始化的字段或属性。</summary>
      <returns>表示要初始化的字段或属性的 <see cref="T:System.Reflection.MemberInfo" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>返回 <see cref="T:System.Linq.Expressions.MemberBinding" /> 的文本化表示形式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberBinding" /> 的文本化表示形式。</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>描述 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 对象中使用的绑定类型。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>一个绑定，它表示使用表达式的值来初始化成员。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>一个绑定，它表示根据元素列表来初始化类型为 <see cref="T:System.Collections.IList" /> 或 <see cref="T:System.Collections.Generic.ICollection`1" /> 的成员。</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>一个绑定，它表示以递归方式来初始化某个成员的成员。</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>表示访问字段或属性。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>获取字段或属性的包含对象。</summary>
      <returns>表示字段或属性的包含对象的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>获取要访问的字段或属性。</summary>
      <returns>表示要访问的字段或属性的 <see cref="T:System.Reflection.MemberInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>返回此 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="expression">结果的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>表示调用构造函数并初始化新对象的一个或多个成员。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>获取描述如何初始化新创建对象的成员的绑定。</summary>
      <returns>描述如何初始化成员的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>获取一个值，该值指示是否可以减小此表达式目录树节点。</summary>
      <returns>如果可以简化节点，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>获取表示构造函数调用的表达式。</summary>
      <returns>表示构造函数调用的 <see cref="T:System.Linq.Expressions.NewExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>返回此表达式的节点类型。扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>将 <see cref="T:System.Linq.Expressions.MemberInitExpression" /> 简化为更简单的表达式。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="newExpression">结果的 <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> 属性。</param>
      <param name="bindings">结果的 <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>表示初始化新创建对象的集合成员的元素。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>获取用于初始化新创建对象的集合成员的元素初始值设定项。</summary>
      <returns>用来初始化集合成员的 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="initializers">结果的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>表示初始化新创建对象的成员的成员。</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>获取描述如何初始化某个成员的成员的绑定。</summary>
      <returns>描述如何初始化该成员的成员的 <see cref="T:System.Linq.Expressions.MemberBinding" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="bindings">结果的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>表示对静态方法或实例方法的调用。</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>获取表示已调用方法的参数的表达式集合。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，表示被调用方法的参数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>获取要调用的方法的 <see cref="T:System.Reflection.MethodInfo" />。</summary>
      <returns>表示被调用方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>获取 <see cref="T:System.Linq.Expressions.Expression" />，对于实例方法调用，它表示实例，而对于静态方法调用，它表示 null。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression" />，表示方法的接收对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="object">结果的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 属性。</param>
      <param name="arguments">结果的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>表示创建新数组并可能初始化该新数组的元素。</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>如果 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性的值为 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />，则获取数组的界限；如果 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性的值为 <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />，则获取用来初始化新数组的元素的值。</summary>
      <returns>表示数组的界限或初始化值的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="expressions">结果的 <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>表示构造函数调用。</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>获取构造函数的参数。</summary>
      <returns>表示构造函数的参数的 <see cref="T:System.Linq.Expressions.Expression" /> 对象的集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>获取被调用的构造函数。</summary>
      <returns>表示被调用构造函数的 <see cref="T:System.Reflection.ConstructorInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>获取符合以下条件的成员：它们可以检索已使用构造函数参数进行初始化的字段的值。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 对象的集合，该对象表示可检索已使用构造函数参数进行初始化的字段值的成员。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.NewExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="arguments">结果的 <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>表示命名的参数表达式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>指示此 ParameterExpression 将被视为 ByRef 参数。</summary>
      <returns>如果此 ParameterExpression 是 ByRef 参数，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>获取参数或变量的名称。</summary>
      <returns>一个包含参数名的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>一个为变量提供运行时读/写权限的表达式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>返回此表达式的节点类型。扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="variables">结果的 <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> 属性。</param>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>为其提供运行时访问权限的变量或参数。</summary>
      <returns>包含将为其提供运行时访问权限的参数的只读集合。</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>表示 <see cref="T:System.Linq.Expressions.SwitchExpression" /> 的一个事例。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>获取此事例的主体。</summary>
      <returns>表示事例块主体的 <see cref="T:System.Linq.Expressions.Expression" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>获取此事例的值。当 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> 与其中任一值匹配时，会选择此事例以便执行。</summary>
      <returns>此事例块的值的只读集合。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>返回一个 <see cref="T:System.String" />，它表示当前 <see cref="T:System.Object" />。</summary>
      <returns>一个 <see cref="T:System.String" />，它表示当前的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="testValues">结果的 <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> 属性。</param>
      <param name="body">结果的 <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>表示一个控制表达式，该表达式通过将控制传递到 <see cref="T:System.Linq.Expressions.SwitchCase" /> 来处理多重选择。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>获取开关的 <see cref="T:System.Linq.Expressions.SwitchCase" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.SwitchCase" /> 对象的集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>获取相等比较方法（如果有）。</summary>
      <returns>表示相等比较方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>获取开关的测试。</summary>
      <returns>表示开关的测试的 <see cref="T:System.Linq.Expressions.Expression" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>返回此表达式的节点类型。扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>获取开关的测试。</summary>
      <returns>表示开关的测试的 <see cref="T:System.Linq.Expressions.Expression" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="switchValue">结果的 <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> 属性。</param>
      <param name="cases">结果的 <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> 属性。</param>
      <param name="defaultBody">结果的 <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>存储发出源文件的调试符号信息所需的信息，尤其是文件名和唯一语言标识符。</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>返回文档类型的唯一标识符（如果有）。对于文本文件，默认为 GUID。</summary>
      <returns>文档类型的唯一标识符。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>源文件名称。</summary>
      <returns>表示源文件名称的字符串。</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>返回语言的唯一标识符（如果有）。</summary>
      <returns>语言的唯一标识符</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>返回语言供应商的唯一标识符（如果有）。</summary>
      <returns>语言供应商的唯一标识符。</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>表示 try/catch/finally/fault 块。</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>获取表示 try 块的主体的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>表示 try 块的主体的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>获取表示 fault 块的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>表示 fault 块的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>获取表示 finally 块的 <see cref="T:System.Linq.Expressions.Expression" />。</summary>
      <returns>表示 finally 块的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>获取与 try 块关联的 <see cref="T:System.Linq.Expressions.CatchBlock" /> 表达式的集合。</summary>
      <returns>与 try 块关联的 <see cref="T:System.Linq.Expressions.CatchBlock" /> 表达式的集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.TryExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="body">结果的 <see cref="P:System.Linq.Expressions.TryExpression.Body" /> 属性。</param>
      <param name="handlers">结果的 <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> 属性。</param>
      <param name="finally">结果的 <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> 属性。</param>
      <param name="fault">结果的 <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>表示表达式和类型之间的操作。</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>获取类型测试操作的表达式操作数。</summary>
      <returns>表示类型测试操作的表达式操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>返回此表达式的节点类型。扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>获取此 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>获取类型测试操作的类型操作数。</summary>
      <returns>表示类型测试操作的类型操作数的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="expression">结果的 <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>表示包含一元运算符的表达式。</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>获取一个值，该值指示是否可以减小此表达式目录树节点。</summary>
      <returns>如果可以简化节点，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>获取一个值，该值指示表达式目录树节点是否表示对运算符的提升调用。</summary>
      <returns>如果该节点表示提升调用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>获取一个值，该值指示表达式目录树节点是否表示对运算符（其返回类型提升为可以为 null 的类型）的提升调用。</summary>
      <returns>如果该运算符的返回类型提升为可以为 null 的类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>获取一元运算的实现方法。</summary>
      <returns>表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>获取一元运算的操作数。</summary>
      <returns>一个表示一元运算的操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>将表达式节点简化为更简单的表达式。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="operand">结果的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>动态调用站点的基类。此类型用作动态站点目标的参数类型。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>负责在动态站点上绑定动态操作的类。</summary>
      <returns>负责绑定动态操作的 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>使用给定的委托类型和联编程序创建一个调用站点。</summary>
      <returns>新的调用站点。</returns>
      <param name="delegateType">调用站点的委托类型。</param>
      <param name="binder">调用站点的联编程序。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>动态站点类型。</summary>
      <typeparam name="T">委托类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>创建动态调用站点的实例，使用负责此调用站点上动态操作的运行时绑定的联编程序进行初始化。</summary>
      <returns>动态调用站点的新实例。</returns>
      <param name="binder">负责此调用站点上动态操作的运行时绑定的联编程序。</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>0 级缓存 - 基于站点历史记录专用的委托。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>更新委托。在动态站点遇到缓存未命中时调用。</summary>
      <returns>更新委托。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>负责动态调用站点上动态操作的运行时绑定的类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>针对一组参数执行动态操作的运行时绑定。</summary>
      <returns>一个表达式，对动态操作参数执行测试；如果测试有效，则执行动态操作。如果对后续动态操作执行的测试失败，则将再次调用 Bind 以便为新的参数类型生成新的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
      <param name="args">动态操作的参数数组。</param>
      <param name="parameters">表示绑定进程中调用站点的参数的 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 实例数组。</param>
      <param name="returnLabel">用于返回动态绑定的结果的 LabelTarget。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>提供低级别的运行时绑定支持。类可以对此进行重写，并为规则的实现提供直接委托。这样，就可以将规则保存到磁盘，使专用规则在运行时可用，或则提供不同的缓存策略。</summary>
      <returns>替换调用站点目标的新委托。</returns>
      <param name="site">为其执行绑定的调用站点。</param>
      <param name="args">联编程序的参数。</param>
      <typeparam name="T">调用站点的目标类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>将一个目标添加到已知目标的缓存。在调用 BindDelegate 生成新规则之前，将扫描已缓存的目标。</summary>
      <param name="target">要添加到缓存的目标委托。</param>
      <typeparam name="T">要添加的目标的类型。</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>获取一个可用于导致绑定被更新的标签。它指示表达式的绑定不再有效。这通常在动态对象的“版本”已更改时使用。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 对象，表示可用于触发绑定更新的标签。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>包含 DLR 调用站点的帮助器方法的类。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>检查 <see cref="T:System.Reflection.MethodBase" /> 是否由 DLR 在内部使用且不应显示在语言代码的堆栈上。</summary>
      <returns>如果输入 <see cref="T:System.Reflection.MethodBase" /> 由 DLR 在内部使用且不应显示在语言代码的堆栈上，则为 True。否则为 false。</returns>
      <param name="mb">输入 <see cref="T:System.Reflection.MethodBase" /></param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>指示在成员上使用 <see cref="T:System.Object" /> 应被视为动态调度的类型。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" /> 类的新实例。</summary>
      <param name="transformFlags">指定在类型结构的前缀遍历中哪些 <see cref="T:System.Object" /> 匹配项应被视为动态调度的类型。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>指定在类型结构的前缀遍历中哪些 <see cref="T:System.Object" /> 匹配项应被视为动态调度的类型。</summary>
      <returns>应被视为动态调度的类型的 <see cref="T:System.Object" /> 匹配项的列表。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExecutionScope">
      <summary>表示动态生成方法的运行时状态。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateDelegate(System.Int32,System.Object[])">
      <summary>创建一个可用于执行动态生成方法的委托。</summary>
      <returns>一个可执行动态生成的方法的 <see cref="T:System.Delegate" />。</returns>
      <param name="indexLambda">对象的索引，该对象存储有关动态方法的关联 lambda 表达式的信息。</param>
      <param name="locals">包含从父级上下文提升的局部变量的数组。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateHoistedLocals">
      <summary>创建用于存储提升的局部变量的数组。</summary>
      <returns>用于存储提升的局部变量的数组。</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Globals">
      <summary>表示不常用常量和由动态生成的方法引用的可在本地执行的表达式。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.IsolateExpression(System.Linq.Expressions.Expression,System.Object[])">
      <summary>通过将参数替换为其当前值，来释放外部参数引用的指定的表达式目录树。</summary>
      <returns>不包含外部参数引用的表达式目录树。</returns>
      <param name="expression">要释放的外部参数引用的表达式目录树。</param>
      <param name="locals">包含提升的局部变量的数组。</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Locals">
      <summary>表示从父级上下文提升的局部变量。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Parent">
      <summary>表示调用委托的执行范围。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>定义一个用于访问某个对象引用的值的属性。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>获取或设置某个对象引用的值。</summary>
      <returns>该对象引用的值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>保存对某个值的引用。</summary>
      <typeparam name="T">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用的值的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor"></member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>使用提供的值初始化 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 类的一个新实例。</summary>
      <param name="value">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 将引用的值。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>获取或设置 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用的值。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用的值。</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>表示 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用的值。</summary>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>提供高级加密标准 (AES) 对称算法的托管实现。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AesManaged" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>使用当前的密钥和初始化向量 (IV) 创建对称解密器对象。</summary>
      <returns>对称解密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的密钥和初始化向量 (IV) 创建对称解密器对象。</summary>
      <returns>对称解密器对象。</returns>
      <param name="key">用于对称算法的密钥。</param>
      <param name="iv">用于对称算法的初始化向量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">初始化向量<paramref name=" iv " />为无效大小。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>使用当前的密钥和初始化向量 (IV) 创建对称加密器对象。</summary>
      <returns>对称加密器对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的密钥和初始化向量 (IV) 创建对称加密器对象。</summary>
      <returns>对称加密器对象。</returns>
      <param name="key">用于对称算法的密钥。</param>
      <param name="iv">用于对称算法的初始化向量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">初始化向量<paramref name=" iv " />为无效大小。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>生成用于对称算法的随机初始化向量 (IV)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>生成用于对称算法的随机密钥。</summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>获取或设置用于对称算法的初始化向量 (IV)。</summary>
      <returns>用于对称算法的初始化向量。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>获取或设置用于对称算法的密钥。</summary>
      <returns>用于对称算法的密钥。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>获取或设置用于对称算法的密钥大小（以位为单位）。</summary>
      <returns>用于对称算法的密钥大小（以位为单位）。</returns>
    </member>
    <member name="T:System.Threading.LockRecursionPolicy">
      <summary>指定同一个线程是否可以多次进入一个锁定状态。</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.NoRecursion">
      <summary>如果线程尝试以递归方式进入锁定状态，将引发异常。某些类可能会在此设置生效时允许使用特定的递归方式。</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.SupportsRecursion">
      <summary>线程可以采用递归方式进入锁定状态。某些类可能会限制此功能。 </summary>
    </member>
    <member name="T:System.Threading.ReaderWriterLockSlim">
      <summary>表示用于管理资源访问的锁定状态，可实现多线程读取或进行独占式写入访问。</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor">
      <summary>使用默认属性值初始化 <see cref="T:System.Threading.ReaderWriterLockSlim" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)">
      <summary>初始化 <see cref="T:System.Threading.ReaderWriterLockSlim" /> 类的新实例，从而指定锁定递归策略。</summary>
      <param name="recursionPolicy">枚举值之一，用于指定锁定递归策略。</param>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount">
      <summary>获取已进入读取模式锁定状态的独有线程的总数。</summary>
      <returns>已进入读取模式锁定状态的独有线程的数量。</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.Dispose">
      <summary>释放由 <see cref="T:System.Threading.ReaderWriterLockSlim" /> 类的当前实例使用的所有资源。</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterReadLock">
      <summary>尝试进入读取模式锁定状态。</summary>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，而且当前线程已进入读取模式。- 或 -递归数将超出计数器的容量。此限制数值很大，因此任何情况下应用程序都不应遇到此情况。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock">
      <summary>尝试进入可升级模式锁定状态。</summary>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，而且当前线程已进入任意模式的锁定状态。- 或 -当前线程已进入读取模式，因此尝试进入可升级模式将有可能导致死锁。- 或 -递归数将超出计数器的容量。此限制数值很大，因此任何情况下应用程序都不应遇到此情况。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock">
      <summary>尝试进入写入模式锁定状态。</summary>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，而且当前线程已进入任意模式的锁定状态。- 或 -当前线程已进入读取模式，因此尝试进入写入模式锁定状态将有可能导致死锁。- 或 -递归数将超出计数器的容量。此限制数值很大，因此任何情况下应用程序都不应遇到此情况。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitReadLock">
      <summary>减少读取模式的递归计数，并在生成的计数为 0（零）时退出读取模式。</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">当前线程未进入读取模式锁定状态。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock">
      <summary>减少可升级模式的递归计数，并在生成的计数为 0（零）时退出可升级模式。</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">当前线程未进入可升级模式锁定状态。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock">
      <summary>减少写入模式的递归计数，并在生成的计数为 0（零）时退出写入模式。</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">当前线程未进入写入模式锁定状态。</exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld">
      <summary>获取一个值，该值指示当前线程是否已进入读取模式的锁定状态。</summary>
      <returns>如果当前线程已进入读取模式，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld">
      <summary>获取一个值，该值指示当前线程是否已进入可升级模式的锁定状态。</summary>
      <returns>如果当前线程已进入可升级模式，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld">
      <summary>获取一个值，该值指示当前线程是否已进入写入模式的锁定状态。</summary>
      <returns>如果当前线程已进入写入模式，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Threading.ReaderWriterLockSlim" /> 对象的递归策略。</summary>
      <returns>枚举值之一，用于指定锁定递归策略。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount">
      <summary>获取当前线程进入读取模式锁定状态的次数，用于指示递归。</summary>
      <returns>如果当前线程未进入读取模式，则为 0（零）；如果线程已进入读取模式但却不是以递归方式进入的，则为 1；或者如果线程已经以递归方式进入锁定模式 n - 1 次，则为 n。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount">
      <summary>获取当前线程进入可升级模式锁定状态的次数，用于指示递归。</summary>
      <returns>如果当前线程没有进入可升级模式，则为 0；如果线程已进入可升级模式却不是以递归方式进入的，则为 1；或者如果线程已经以递归方式进入可升级模式 n - 1 次，则为 n。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount">
      <summary>获取当前线程进入写入模式锁定状态的次数，用于指示递归。</summary>
      <returns>如果当前线程没有进入写入模式，则为 0；如果线程已进入写入模式却不是以递归方式进入的，则为 1；或者如果线程已经以递归方式进入写入模式 n - 1 次，则为 n。</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)">
      <summary>尝试进入读取模式锁定状态，可以选择整数超时时间。</summary>
      <returns>如果调用线程已进入读取模式，则为 true；否则为 false。</returns>
      <param name="millisecondsTimeout">等待的毫秒数；或为 -1 (<see cref="F:System.Threading.Timeout.Infinite" />)，表示无限期等待。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，而且当前线程已进入锁定状态。- 或 -递归数将超出计数器的容量。此限制数值很大，因此任何情况下应用程序都不应遇到此情况。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 的值为负，但不等于 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，这是唯一允许使用的负值。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)">
      <summary>尝试进入读取模式锁定状态，可以选择超时时间。</summary>
      <returns>如果调用线程已进入读取模式，则为 true；否则为 false。</returns>
      <param name="timeout">等待的间隔；或为 -1 毫秒，表示无限期等待。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，而且当前线程已进入锁定状态。- 或 -递归数将超出计数器的容量。此限制数值很大，因此任何情况下应用程序都不应遇到此情况。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 的值为负，但不等于 -1 毫秒，这是唯一允许使用的负值。- 或 -<paramref name="timeout" /> 的值大于 <see cref="F:System.Int32.MaxValue" /> 毫秒。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)">
      <summary>尝试进入可升级模式锁定状态，可以选择超时时间。</summary>
      <returns>如果调用线程已进入可升级模式，则为 true；否则为 false。</returns>
      <param name="millisecondsTimeout">等待的毫秒数；或为 -1 (<see cref="F:System.Threading.Timeout.Infinite" />)，表示无限期等待。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，而且当前线程已进入锁定状态。- 或 -初始状态下，当前线程进入读取模式锁定状态，因此尝试进入可升级模式将有可能导致死锁。- 或 -递归数将超出计数器的容量。此限制数值很大，因此任何情况下应用程序都不应遇到此情况。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 的值为负，但不等于 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，这是唯一允许使用的负值。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)">
      <summary>尝试进入可升级模式锁定状态，可以选择超时时间。</summary>
      <returns>如果调用线程已进入可升级模式，则为 true；否则为 false。</returns>
      <param name="timeout">等待的间隔；或为 -1 毫秒，表示无限期等待。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，而且当前线程已进入锁定状态。- 或 -初始状态下，当前线程进入读取模式锁定状态，因此尝试进入可升级模式将有可能导致死锁。- 或 -递归数将超出计数器的容量。此限制数值很大，因此任何情况下应用程序都不应遇到此情况。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 的值为负，但不等于 -1 毫秒，这是唯一允许使用的负值。- 或 -<paramref name="timeout" /> 的值大于 <see cref="F:System.Int32.MaxValue" /> 毫秒。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)">
      <summary>尝试进入写入模式锁定状态，可以选择超时时间。</summary>
      <returns>如果调用线程已进入写入模式，则为 true；否则为 false。</returns>
      <param name="millisecondsTimeout">等待的毫秒数；或为 -1 (<see cref="F:System.Threading.Timeout.Infinite" />)，表示无限期等待。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，而且当前线程已进入锁定状态。- 或 -初始状态下，当前线程进入读取模式锁定状态，因此尝试进入写入模式将有可能导致死锁。- 或 -递归数将超出计数器的容量。此限制数值很大，因此任何情况下应用程序都不应遇到此情况。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 的值为负，但不等于 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，这是唯一允许使用的负值。</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)">
      <summary>尝试进入写入模式锁定状态，可以选择超时时间。</summary>
      <returns>如果调用线程已进入写入模式，则为 true；否则为 false。</returns>
      <param name="timeout">等待的间隔；或为 -1 毫秒，表示无限期等待。</param>
      <exception cref="T:System.Threading.LockRecursionException">
        <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> 属性为 <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />，而且当前线程已进入锁定状态。- 或 -初始状态下，当前线程进入读取模式锁定状态，因此尝试进入写入模式将有可能导致死锁。- 或 -递归数将超出计数器的容量。此限制数值很大，因此任何情况下应用程序都不应遇到此情况。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 的值为负，但不等于 -1 毫秒，这是唯一允许使用的负值。- 或 -<paramref name="timeout" /> 的值大于 <see cref="F:System.Int32.MaxValue" /> 毫秒。 </exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount">
      <summary>获取等待进入读取模式锁定状态的线程总数。</summary>
      <returns>等待进入读取模式的线程总数。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount">
      <summary>获取等待进入可升级模式锁定状态的线程总数。</summary>
      <returns>等待进入可升级模式的线程总数。</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount">
      <summary>获取等待进入写入模式锁定状态的线程总数。</summary>
      <returns>等待进入写入模式的线程总数。</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>提供一组用于处理特定类型的 <see cref="T:System.Threading.Tasks.Task" /> 实例的静态方法（在 Visual Basic 中为共享方法）。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>创建一个表示 Task&lt;Task&lt;T&gt;&gt; (C#) 或 Task (Of Task(Of T)) (Visual Basic) 的异步操作的代理 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>表示提供的 Task&lt;Task&lt;T&gt;&gt; (C#) 或 Task (Of Task(Of T)) (Visual Basic) 的异步操作的 <see cref="System.Threading.Tasks.Task`1" />。</returns>
      <param name="task">要解包的 Task&lt;Task&lt;T&gt;&gt; (C#) 或 Task (Of Task) (Visual Basic)。</param>
      <typeparam name="TResult">任务结果的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 参数为 null 时引发的异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>创建一个表示 <see cref="T:System.Threading.Tasks.Task{System.Threading.Tasks.Task}" /> 的异步操作的代理 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>表示 System.Threading.Tasks.Task(Of Task) 提供的异步操作的任务。</returns>
      <param name="task">要解包的 Task&lt;Task&gt; (C#) 或 Task (Of Task) (Visual Basic)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 参数为 null 时引发的异常。</exception>
    </member>
  </members>
</doc>