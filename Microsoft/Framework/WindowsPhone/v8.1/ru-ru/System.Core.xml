<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Core</name>
  </assembly>
  <members>
    <member name="T:System.Action`10">
      <summary>Инкапсулирует метод, который принимает 10 параметров и не возвращает значений.</summary>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    </member>
    <member name="T:System.Action`11">
      <summary>Инкапсулирует метод, который принимает 11 параметров и не возвращает значений.</summary>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    </member>
    <member name="T:System.Action`12">
      <summary>Инкапсулирует метод, который принимает 12 параметров и не возвращает значений.</summary>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    </member>
    <member name="T:System.Action`13">
      <summary>Инкапсулирует метод, который принимает 13 параметров и не возвращает значений.</summary>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg13">Тринадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T13">Тип тринадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    </member>
    <member name="T:System.Action`14">
      <summary>Инкапсулирует метод, который принимает 14 параметров и не возвращает значений.</summary>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg13">Тринадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg14">Четырнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T13">Тип тринадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T14">Тип четырнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    </member>
    <member name="T:System.Action`15">
      <summary>Инкапсулирует метод, который принимает 15 параметров и не возвращает значений.</summary>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg13">Тринадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg14">Четырнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg15">Пятнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T13">Тип тринадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T14">Тип четырнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T15">Тип пятнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    </member>
    <member name="T:System.Action`16">
      <summary>Инкапсулирует метод, который принимает 16 параметров и не возвращает значений.</summary>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg13">Тринадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg14">Четырнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg15">Пятнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg16">Шестнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T13">Тип тринадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T14">Тип четырнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T15">Тип пятнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T16">Тип шестнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    </member>
    <member name="T:System.Action`9">
      <summary>Инкапсулирует метод, который принимает девять параметров и не возвращает значений.</summary>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
    </member>
    <member name="T:System.Func`10">
      <summary>Инкапсулирует метод, который принимает девять параметров и возвращает значение типа, указанного в параметре <paramref name="TResult" />.</summary>
      <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`11">
      <summary>Инкапсулирует метод, который принимает 10 параметров и возвращает значение типа, указанного в параметре <paramref name="TResult" />.</summary>
      <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`12">
      <summary>Инкапсулирует метод, который принимает 11 параметров и возвращает значение типа, указанного в параметре <paramref name="TResult" />.</summary>
      <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`13">
      <summary>Инкапсулирует метод, который принимает 12 параметров и возвращает значение типа, указанного в параметре <paramref name="TResult" />.</summary>
      <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`14">
      <summary>Инкапсулирует метод, который принимает 13 параметров и возвращает значение типа, указанного в параметре <paramref name="TResult" />.</summary>
      <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg13">Тринадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T13">Тип тринадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`15">
      <summary>Инкапсулирует метод, который принимает 14 параметров и возвращает значение типа, указанного в параметре <paramref name="TResult" />.</summary>
      <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg13">Тринадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg14">Четырнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T13">Тип тринадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T14">Тип четырнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`16">
      <summary>Инкапсулирует метод, который принимает 15 параметров и возвращает значение типа, указанного в параметре <paramref name="TResult" />.</summary>
      <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg13">Тринадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg14">Четырнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg15">Пятнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T13">Тип тринадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T14">Тип четырнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T15">Тип пятнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`17">
      <summary>Инкапсулирует метод, который принимает 16 параметров и возвращает значение типа, указанного в параметре <paramref name="TResult" />.</summary>
      <returns>Возвращаемое значение метода, инкапсулируемого данным делегатом.</returns>
      <param name="arg1">Первый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg2">Второй параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg3">Третий параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg4">Четвертый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg5">Пятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg6">Шестой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg7">Седьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg8">Восьмой параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg9">Девятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg10">Десятый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg11">Одиннадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg12">Двенадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg13">Тринадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg14">Четырнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg15">Пятнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <param name="arg16">Шестнадцатый параметр метода, инкапсулируемого данным делегатом.</param>
      <typeparam name="T1">Тип первого параметра метода, инкапсулируемого данным делегатом.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">Тип второго параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T3">Тип третьего параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T4">Тип четвертого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T5">Тип пятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T6">Тип шестого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T7">Тип седьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T8">Тип восьмого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T9">Тип девятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T10">Тип десятого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T11">Тип одиннадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T12">Тип двенадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T13">Тип тринадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T14">Тип четырнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T15">Тип пятнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="T16">Тип шестнадцатого параметра метода, инкапсулируемого данным делегатом.</typeparam>
      <typeparam name="TResult">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary>Представляет набор значений.</summary>
      <typeparam name="T">Тип элементов в хэше.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary>Инициализирует пустой экземпляр класса <see cref="T:System.Collections.Generic.HashSet`1" />, который является пустым и использует компаратор по умолчанию для типа набора.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Generic.HashSet`1" />, который использует компаратор по умолчанию для типа набора, содержит элементы, скопированные из указанной коллекции, и обладает емкостью, достаточной для того, чтобы вместить количество скопированных элементов.</summary>
      <param name="collection">Коллекция, элементы которой копируются в новый набор.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Collections.Generic.HashSet`1" />, который использует указанный компаратор для типа набора, содержит элементы, скопированные из указанной коллекции, и обладает емкостью, достаточной для того, чтобы вместить количество скопированных элементов.</summary>
      <param name="collection">Коллекция, элементы которой копируются в новый набор.</param>
      <param name="comparer">Реализация <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, которую следует использовать при сравнении значений в наборе, или значение null, чтобы использовать реализацию <see cref="T:System.Collections.Generic.EqualityComparer`1" /> по умолчанию для типа набора.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Инициализирует пустой экземпляр класса <see cref="T:System.Collections.Generic.HashSet`1" />, который является пустым и использует указанный компаратор для типа набора.</summary>
      <param name="comparer">Реализация <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, которую следует использовать при сравнении значений в наборе, или значение null, чтобы использовать реализацию <see cref="T:System.Collections.Generic.EqualityComparer`1" /> по умолчанию для типа набора.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary>Добавляет указанный элемент в набор.</summary>
      <returns>Значение true, если элемент добавлен в объект <see cref="T:System.Collections.Generic.HashSet`1" />; значение false, если элемент уже присутствует в нем.</returns>
      <param name="item">Элемент, добавляемый в набор.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary>Удаляет все элементы из объекта <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary>Получает объект <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для определения равенства для значений в наборе.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для определения равенства для значений в наборе.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary>Определяет, содержит ли объект <see cref="T:System.Collections.Generic.HashSet`1" /> указанный элемент.</summary>
      <returns>Значение true, если объект <see cref="T:System.Collections.Generic.HashSet`1" /> содержит указанный элемент; в противном случае — значение false.</returns>
      <param name="item">Объект, который требуется отыскать в объекте <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary>Копирует элементы объекта <see cref="T:System.Collections.Generic.HashSet`1" /> в массив.</summary>
      <param name="array">Одномерный массив, являющийся назначением элементов, копируемых из объекта <see cref="T:System.Collections.Generic.HashSet`1" />. Индексы массива должны начинаться с нуля.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary>Копирует элементы объекта <see cref="T:System.Collections.Generic.HashSet`1" /> в массив, начиная с указанного индекса массива.</summary>
      <param name="array">Одномерный массив, являющийся назначением элементов, копируемых из объекта <see cref="T:System.Collections.Generic.HashSet`1" />. Индексы массива должны начинаться с нуля.</param>
      <param name="arrayIndex">Значение начинающегося с нуля индекса в массиве <paramref name="array" />, с которого начинается копирование.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="arrayIndex" /> меньше 0.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="arrayIndex" /> больше длине массива назначения <paramref name="array" />.-или-Значение <paramref name="count" /> больше размера массива назначения <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>Копирует указанное количество элементов объекта <see cref="T:System.Collections.Generic.HashSet`1" /> в массив, начиная с указанного индекса массива.</summary>
      <param name="array">Одномерный массив, являющийся назначением элементов, копируемых из объекта <see cref="T:System.Collections.Generic.HashSet`1" />. Индексы массива должны начинаться с нуля.</param>
      <param name="arrayIndex">Значение начинающегося с нуля индекса в массиве <paramref name="array" />, с которого начинается копирование.</param>
      <param name="count">Число элементов, копируемых в массив <paramref name="array" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="arrayIndex" /> меньше 0.-или-Значение параметра <paramref name="count" /> меньше 0.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="arrayIndex" /> больше длине массива назначения <paramref name="array" />.-или-Значение <paramref name="count" /> превышает доступное место, начиная с индекса <paramref name="index" /> и до конца массива назначения <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary>Возвращает число элементов, содержащихся в наборе.</summary>
      <returns>Число элементов, содержащихся в наборе.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет все элементы в указанной коллекции из текущего объекта <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <param name="other">Коллекция элементов, удаляемая из объекта <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary>Возвращает перечислитель, осуществляющий перебор элементов объекта <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> для объекта <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий объект <see cref="T:System.Collections.Generic.HashSet`1" />, чтобы он содержал только элементы, которые имеются в этом объекте и в указанной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли объект <see cref="T:System.Collections.Generic.HashSet`1" /> строгим подмножеством указанной коллекции.</summary>
      <returns>Значение true, если объект <see cref="T:System.Collections.Generic.HashSet`1" /> является строгим подмножеством объекта <paramref name="other" />; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли объект <see cref="T:System.Collections.Generic.HashSet`1" /> строгим надмножеством указанной коллекции.</summary>
      <returns>Значение true, если объект <see cref="T:System.Collections.Generic.HashSet`1" /> является строгим надмножеством объекта <paramref name="other" />; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли объект <see cref="T:System.Collections.Generic.HashSet`1" /> подмножеством указанной коллекции.</summary>
      <returns>Значение true, если текущий объект <see cref="T:System.Collections.Generic.HashSet`1" /> является подмножеством <paramref name="other" />; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли объект <see cref="T:System.Collections.Generic.HashSet`1" /> надмножеством указанной коллекции.</summary>
      <returns>Значение true, если объект <see cref="T:System.Collections.Generic.HashSet`1" /> является надмножеством объекта <paramref name="other" />; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, имеются ли общие элементы в текущем объекте <see cref="T:System.Collections.Generic.HashSet`1" /> и в заданной коллекции.</summary>
      <returns>Значение true, если объекты <see cref="T:System.Collections.Generic.HashSet`1" /> и <paramref name="other" /> совместно используют по крайней мере один общий элемент; в противном случае — значение false.</returns>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary>Удаляет указанный элемент из объекта <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns>true, если элемент был успешно найден и удален; в противном случае — значение false.  Этот метод возвращает значение false, если <paramref name="item" /> не найден в <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
      <param name="item">Удаляемый элемент.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>Удаляет все элементы, удовлетворяющие условиям, которые были определены указанным предикатом из коллекции <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns>Количество элементов, удаленных из коллекции <see cref="T:System.Collections.Generic.HashSet`1" />.</returns>
      <param name="match">Делегат <see cref="T:System.Predicate`1" />, определяющий условия удаления элемента.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, содержат ли объект <see cref="T:System.Collections.Generic.HashSet`1" /> и указанная коллекция одни и те же элементы.</summary>
      <returns>true, если объект <see cref="T:System.Collections.Generic.HashSet`1" /> равен <paramref name="other" />, в противном случае — false.</returns>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий объект <see cref="T:System.Collections.Generic.HashSet`1" />, чтобы он содержал только элементы, которые имеются либо в этом объекте, либо в указанной коллекции, но не одновременно в них обоих.</summary>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Добавляет элемент в объект <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">Объект, добавляемый в объект <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Объект <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Получает значение, указывающее, доступна ли коллекция только для чтения.</summary>
      <returns>true, если коллекция доступна только для чтения; в противном случае — false.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию в коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerator`1" />, который может использоваться для перебора элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию в коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для перебора элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary>Задает емкость объекта <see cref="T:System.Collections.Generic.HashSet`1" /> равной фактическому числу элементов, которые в нем содержатся, округленному в большую сторону ближайшего значения, зависящего от реализации.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий объект <see cref="T:System.Collections.Generic.HashSet`1" />, чтобы он содержал все элементы, которые имеются и в этом объекте, и в указанной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Generic.HashSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> имеет значение null.</exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary>Выполняет перечисление элементов объекта <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент коллекции <see cref="T:System.Collections.Generic.HashSet`1" />, соответствующий текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary>Освобождает все ресурсы, используемые объектом <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу коллекции <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
      <returns>Значение true, если перечислитель был успешно перемещен к следующему элементу; значение false, если перечислитель достиг конца коллекции.</returns>
      <exception cref="T:System.InvalidOperationException">Коллекция была изменена после создания перечислителя. </exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент коллекции, находящийся в текущей позиции перечислителя, в виде объекта <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.InvalidOperationException">Перечислитель помещается перед первым элементом коллекции или после последнего элемента. </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Устанавливает перечислитель в его начальное положение, перед первым элементом коллекции.</summary>
      <exception cref="T:System.InvalidOperationException">Коллекция была изменена после создания перечислителя. </exception>
    </member>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>Представляет бинарную динамическую операцию в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.BinaryOperationBinder" />.</summary>
      <param name="operation">Вид бинарной операции.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической бинарной операции.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции.</param>
      <param name="args">Массив аргументов динамической операции.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку бинарной динамической операции, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической бинарной операции.</param>
      <param name="arg">Правый операнд динамической бинарной операции.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической бинарной операции, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической бинарной операции.</param>
      <param name="arg">Правый операнд динамической бинарной операции.</param>
      <param name="errorSuggestion">Результат привязки в случае ее неудачного завершения или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>Вид бинарной операции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, который предоставляет вид бинарной операции.</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>Представляет набор ограничений привязки в <see cref="T:System.Dynamic.DynamicMetaObject" />, при соблюдении которых динамическая привязка является допустимой.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>Объединяет ограничения привязки из списка экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" /> в один набор ограничений.</summary>
      <returns>Новый набор ограничений привязки.</returns>
      <param name="contributingObjects">Список экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, ограничения которых объединяются в общий набор.</param>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>Представляет пустой набор ограничений привязки.Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>Создает ограничение привязки, которое проверяет выражение на наличие неизменяемых свойств.</summary>
      <returns>Новые ограничения привязки.</returns>
      <param name="expression">Выражение, представляющее ограничения.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>Создает ограничение привязки, которое проверяет удостоверения экземпляров объектов в выражении.</summary>
      <returns>Новые ограничения привязки.</returns>
      <param name="expression">Выражение для проверки.</param>
      <param name="instance">Точный экземпляр объекта для проверки.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает ограничение привязки, которое проверяет удостоверение типа среды выполнения в выражении.</summary>
      <returns>Новые ограничения привязки.</returns>
      <param name="expression">Выражение для проверки.</param>
      <param name="type">Точный тип для проверки.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>Объединяет набор ограничений привязки с текущими ограничениями привязки.</summary>
      <returns>Новый набор ограничений привязки.</returns>
      <param name="restrictions">Набор ограничений привязки, объединяемый с текущими ограничениями привязки.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий ограничения привязки.</summary>
      <returns>Дерево выражения, представляющее ограничения.</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>Описывает аргументы в процессе динамической привязки.</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Создает новый объект CallInfo, представляющий аргументы в процессе динамической привязки.</summary>
      <param name="argCount">Число аргументов.</param>
      <param name="argNames">Имена аргументов.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>Создает новый объект PositionalArgumentInfo.</summary>
      <param name="argCount">Число аргументов.</param>
      <param name="argNames">Имена аргументов.</param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>Число аргументов.</summary>
      <returns>Число аргументов.</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>Имена аргументов.</summary>
      <returns>Доступная только для чтения коллекция имен аргументов.</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>Определяет, равен ли указанный экземпляр CallInfo текущему экземпляру.</summary>
      <returns>Значение true, если указанный экземпляр равен текущему экземпляру; в противном случае — значение false.</returns>
      <param name="obj">Экземпляр <see cref="T:System.Dynamic.CallInfo" />, сравниваемый с текущим экземпляром.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>Служит в качестве хэш-функции для текущего экземпляра <see cref="T:System.Dynamic.CallInfo" />.</summary>
      <returns>Хэш-код для текущего атрибута <see cref="T:System.Dynamic.CallInfo" />.</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>Представляет динамическую операцию преобразования в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.ConvertBinder" />.</summary>
      <param name="type">Тип, к которому выполняется преобразование.</param>
      <param name="explicit">Значение true, если преобразование должно быть явным; в противном случае — значение false.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции преобразования.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции преобразования.</param>
      <param name="args">Массив аргументов динамической операции преобразования.</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>Получает значение, указывающее, должно ли преобразование быть явным.</summary>
      <returns>True, если преобразование является явным; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции преобразования, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции преобразования.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции преобразования, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции преобразования.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>Тип, к которому выполняется преобразование.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип, в который выполняется преобразование.</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>Представляет динамическую операцию создания в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.CreateInstanceBinder" />.</summary>
      <param name="callInfo">Сигнатура аргументов в источнике вызова.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции создания.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции создания.</param>
      <param name="args">Массив аргументов динамической операции создания.</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>Получает сигнатуру аргументов в источнике вызова.</summary>
      <returns>Сигнатура аргументов в источнике вызова.</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции создания, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции создания.</param>
      <param name="args">Аргументы динамической операции создания.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции создания, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции создания.</param>
      <param name="args">Аргументы динамической операции создания.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>Представляет динамическую операцию удаления индекса в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.DeleteIndexBinder" />.</summary>
      <param name="callInfo">Сигнатура аргументов в источнике вызова.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции удаления индекса.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции удаления индекса.</param>
      <param name="args">Массив аргументов динамической операции удаления индекса.</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>Получает сигнатуру аргументов в источнике вызова.</summary>
      <returns>Сигнатура аргументов в источнике вызова.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции удаления индекса, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции удаления индекса.</param>
      <param name="indexes">Аргументы динамической операции удаления индекса.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции удаления индекса, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции удаления индекса.</param>
      <param name="indexes">Аргументы динамической операции удаления индекса.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>Представляет динамическую операцию удаления члена в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.DeleteIndexBinder" />.</summary>
      <param name="name">Имя члена, который требуется удалить.</param>
      <param name="ignoreCase">Значение true, если имя должно сравниваться без учета регистра; в противном случае — значение false.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции удаления члена.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции удаления члена.</param>
      <param name="args">Массив аргументов динамической операции удаления члена.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции удаления члена, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции удаления члена.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции удаления члена, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции удаления члена.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>Получает значение, указывающее, следует ли игнорировать регистр имен членов при сравнении строк.</summary>
      <returns>Значение true, если строки должны сравниваться без учета регистра; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>Получает имя члена, который требуется удалить.</summary>
      <returns>Имя члена, который требуется удалить.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>Представляет динамическую привязку и логику привязки объекта, участвующего в динамической привязке.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <param name="expression">Выражение, представляющее данный объект <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.</param>
      <param name="restrictions">Набор ограничений привязки, при соблюдении которых привязка является допустимой.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <param name="expression">Выражение, представляющее данный объект <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.</param>
      <param name="restrictions">Набор ограничений привязки, при соблюдении которых привязка является допустимой.</param>
      <param name="value">Значение среды выполнения, представленное объектом <see cref="T:System.Dynamic.DynamicMetaObject" />.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической бинарной операции.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр <see cref="T:System.Dynamic.BinaryOperationBinder" />, который представляет сведения о динамической операции.</param>
      <param name="arg">Экземпляр класса <see cref="T:System.Dynamic.DynamicMetaObject" />, который представляет правый операнд бинарной операции.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>Выполняет привязку динамической операции преобразования.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр <see cref="T:System.Dynamic.ConvertBinder" />, который представляет сведения о динамической операции.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции создания экземпляра.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр <see cref="T:System.Dynamic.CreateInstanceBinder" />, который представляет сведения о динамической операции.</param>
      <param name="args">Массив экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, которые являются аргументами операции создания экземпляра.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции удаления индекса.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр <see cref="T:System.Dynamic.DeleteIndexBinder" />, который представляет сведения о динамической операции.</param>
      <param name="indexes">Массив экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, которые являются индексами для операции удаления индекса.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Выполняет привязку динамической операции удаления члена.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр <see cref="T:System.Dynamic.DeleteMemberBinder" />, который представляет сведения о динамической операции.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции получения индекса.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр <see cref="T:System.Dynamic.GetIndexBinder" />, который представляет сведения о динамической операции.</param>
      <param name="indexes">Массив экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, которые являются индексами для операции получения индекса.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>Выполняет привязку динамической операции получения члена.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр <see cref="T:System.Dynamic.GetMemberBinder" />, который представляет сведения о динамической операции.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции вызова.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр <see cref="T:System.Dynamic.InvokeBinder" />, который представляет сведения о динамической операции.</param>
      <param name="args">Массив экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, которые являются аргументами для операции вызова.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции вызова члена.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр <see cref="T:System.Dynamic.InvokeMemberBinder" />, который представляет сведения о динамической операции.</param>
      <param name="args">Массив экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, которые являются аргументами для операции вызова.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции задания индекса.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр <see cref="T:System.Dynamic.SetIndexBinder" />, который представляет сведения о динамической операции.</param>
      <param name="indexes">Массив экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, которые являются индексами для операции задания индекса.</param>
      <param name="value">Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий значение операции задания индекса.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции задания члена.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр <see cref="T:System.Dynamic.SetMemberBinder" />, который представляет сведения о динамической операции.</param>
      <param name="value">Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий значение операции задания члена.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>Выполняет привязку динамической унарной операции.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="binder">Экземпляр <see cref="T:System.Dynamic.UnaryOperationBinder" />, который представляет сведения о динамической операции.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>Создает метаобъект для указанного объекта.</summary>
      <returns>Если заданный объект реализует интерфейс <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" /> и не является удаленным объектом из другого домена приложения, метод <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" /> возвращает метаобъект, относящийся к конкретному объекту.В противном случае создается и возвращается новый обычный метаобъект без ограничений.</returns>
      <param name="value">Объект, для которого создается метаобъект.</param>
      <param name="expression">Выражение, представляющее данный объект <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.</param>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>Представляет пустой массив типа <see cref="T:System.Dynamic.DynamicMetaObject" />.Это поле доступно только для чтения.</summary>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>Выражение, представляющее данный объект <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.</summary>
      <returns>Выражение, представляющее данный объект <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>Возвращает перечисление имен всех динамических членов.</summary>
      <returns>Список имен динамических членов.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>Получает значение, показывающее, имеет ли объект <see cref="T:System.Dynamic.DynamicMetaObject" /> значение среды выполнения.</summary>
      <returns>Значение true, если объект <see cref="T:System.Dynamic.DynamicMetaObject" /> имеет значение среды выполнения; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>Получает тип ограничения <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <returns>
        <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" />, если значение среды выполнения доступно; в противном случае — тип свойства <see cref="P:System.Dynamic.DynamicMetaObject.Expression" />.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>Набор ограничений привязки, при соблюдении которых привязка является допустимой.</summary>
      <returns>Набор ограничений привязки.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>Получает объект <see cref="T:System.Type" /> значения среды выполнения или NULL, если с объектом <see cref="T:System.Dynamic.DynamicMetaObject" /> не связано никакое значение.</summary>
      <returns>Объект <see cref="T:System.Type" /> значения среды выполнения или NULL.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>Значение среды выполнения, представленное объектом <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <returns>Значение среды выполнения, представленное объектом <see cref="T:System.Dynamic.DynamicMetaObject" />.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>Связыватель динамического источника вызова, участвующий в протоколе привязки <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.DynamicMetaObjectBinder" />.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>При переопределении в производном классе выполняет привязку динамической операции.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции.</param>
      <param name="args">Массив аргументов динамической операции.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Выполняет привязку динамической операции к набору аргументов в среде выполнения.</summary>
      <returns>Выражение, проверяющее аргументы динамической операции и выполняющее эту операцию, если проверки пройдены успешно.Если проверки не пройдены успешно при последующих выполнениях динамической операции, метод Bind вызывается еще раз, чтобы создать новый объект <see cref="T:System.Linq.Expressions.Expression" /> для новых типов аргументов.</returns>
      <param name="args">Массив аргументов динамической операции.</param>
      <param name="parameters">Массив экземпляров <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющих параметры источника вызова в процессе привязки.</param>
      <param name="returnLabel">Элемент LabelTarget, возвращающий результат динамической привязки.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Откладывает привязку операции до вычисления значений среды выполнения всех аргументов динамической операции.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции.</param>
      <param name="args">Массив аргументов динамической операции.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>Откладывает привязку операции до вычисления значений среды выполнения всех аргументов динамической операции.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="args">Массив аргументов динамической операции.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>Получает выражение, которое вызовет обновление привязки.Она указывает, что привязка выражения более недействительна.Обычно используется в случае изменения "версии" динамического объекта.</summary>
      <returns>Выражение обновления.</returns>
      <param name="type">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> итогового выражения; допустим любой тип.</param>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>Предоставляет базовый класс для указания динамического поведения во время выполнения.Этот класс должен наследоваться; непосредственно создавать его экземпляры нельзя.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>Позволяет производным типам инициализировать новый экземпляр типа <see cref="T:System.Dynamic.DynamicObject" />.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>Возвращает перечисление имен всех динамических членов. </summary>
      <returns>Последовательность, содержащая имена динамических членов.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Предоставляет объект <see cref="T:System.Dynamic.DynamicMetaObject" />, вызывающий динамические виртуальные методы.Объект можно инкапсулировать в другой объект <see cref="T:System.Dynamic.DynamicMetaObject" />, чтобы обеспечить пользовательское поведение для отдельных действий.Данный метод поддерживает инфраструктуру среды DLR для разработчиков языков и не предназначен для непосредственного использования из кода.</summary>
      <returns>Объект типа <see cref="T:System.Dynamic.DynamicMetaObject" />.</returns>
      <param name="parameter">Выражение, представляющее объект <see cref="T:System.Dynamic.DynamicMetaObject" />, вызывающий динамические виртуальные методы.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>Предоставляет реализацию для двоичных операций.Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как сложение и умножение.</summary>
      <returns>true в случае успешного выполнения операции; в противном случае возвращает значение false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения о двоичной операции.Свойство binder.Operation возвращает объект <see cref="T:System.Linq.Expressions.ExpressionType" />.Например, для оператора sum = first + second, где first и second являются производными класса DynamicObject, binder.Operation возвращает значение ExpressionType.Add.</param>
      <param name="arg">Правый операнд для двоичной операции.Например, для оператора sum = first + second, где first и second являются производными класса DynamicObject, <paramref name="arg" /> возвращает значение second.</param>
      <param name="result">Результат двоичной операции.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>Предоставляет реализацию для операций преобразования типа.Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для операций, преобразующих объект из одного типа в другой.</summary>
      <returns>true в случае успешного выполнения операции; в противном случае возвращает значение false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об операции преобразования.Свойство binder.Type предоставляет тип, в который необходимо преобразовать объект.Например, для оператора (String)sampleObject в C# (CType(sampleObject, Type) в Visual Basic), где sampleObject — экземпляр класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, binder.Type возвращает тип <see cref="T:System.String" />.Свойство binder.Explicit предоставляет сведения о виде преобразования, который имеет место.Для явного преобразования возвращается значение true, для неявного — значение false.</param>
      <param name="result">Результат операции преобразования типа.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>Предоставляет реализацию для операций, инициализирующих новый экземпляр динамического объекта.Этот метод не предназначен для использования в C# или Visual Basic.</summary>
      <returns>true в случае успешного выполнения операции; в противном случае возвращает значение false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об операции инициализации.</param>
      <param name="args">Аргументы, переданные объекту во время инициализации.Например, для операции new SampleType(100), где SampleType — тип, производный от класса <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="args[0]" /> равен 100.</param>
      <param name="result">Результат инициализации.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>Предоставляет реализацию для операций, удаляющих объект по индексу.Этот метод не предназначен для использования в C# или Visual Basic.</summary>
      <returns>true в случае успешного выполнения операции; в противном случае возвращает значение false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об удалении.</param>
      <param name="indexes">Удаляемые индексы.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Предоставляет реализацию для операций, удаляющих элемент объекта.Этот метод не предназначен для использования в C# или Visual Basic.</summary>
      <returns>true в случае успешного выполнения операции; в противном случае возвращает значение false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об удалении.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>Предоставляет реализацию для операций, получающих значение по индексу.Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для операций индексации.</summary>
      <returns>true в случае успешного выполнения операции; в противном случае возвращает значение false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об операции. </param>
      <param name="indexes">Индексы, которые используются в операции.Например, для операции sampleObject[3] в C# (sampleObject(3) в Visual Basic), где sampleObject является производным от класса DynamicObject, <paramref name="indexes[0]" /> равно 3.</param>
      <param name="result">Результат операции индексации.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>Предоставляет реализацию для операций, получающих значения членов.Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как получение значения свойства.</summary>
      <returns>true в случае успешного выполнения операции; в противном случае возвращает значение false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об объекте, вызвавшем динамическую операцию.Свойство binder.Name предоставляет имя члена, с которым выполняется динамическая операция.Например, для оператора Console.WriteLine(sampleObject.SampleProperty), где sampleObject является экземпляром класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, binder.Name возвращает значение "SampleProperty".Свойство binder.IgnoreCase задает, учитывается ли регистр в имени члена.</param>
      <param name="result">Результат операции получения.Например, если для свойства вызывается метод, можно присвоить свойству значение <paramref name="result" />.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>Предоставляет реализацию для операций, вызывающих объект.Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как вызов объекта или делегата.</summary>
      <returns>true в случае успешного выполнения операции; в противном случае возвращает значение false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об операции вызова.</param>
      <param name="args">Аргументы, переданные объекту во время операции вызова.Например, для операции sampleObject(100), где sampleObject — тип, производный от класса <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="args[0]" /> равен 100.</param>
      <param name="result">Результат вызова объекта.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>Предоставляет реализацию для операций, вызывающих член.Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как вызов метода.</summary>
      <returns>true в случае успешного выполнения операции; в противном случае возвращает значение false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения о динамической операции.Свойство binder.Name предоставляет имя члена, с которым выполняется динамическая операция.Например, для оператора sampleObject.SampleMethod(100), где sampleObject является экземпляром класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, binder.Name возвращает значение "SampleMethod".Свойство binder.IgnoreCase задает, учитывается ли регистр в имени члена.</param>
      <param name="args">Аргументы, переданные члену объекта во время операции вызова.Например, для операции sampleObject.SampleMethod(100), где sampleObject — тип, производный от класса <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="args[0]" /> равен 100.</param>
      <param name="result">Результат вызова члена.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>Предоставляет реализацию для операций, задающих значение по индексу.Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для операций, осуществляющих доступ к объектам по заданному индексу.</summary>
      <returns>true в случае успешного выполнения операции; в противном случае возвращает значение false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об операции. </param>
      <param name="indexes">Индексы, которые используются в операции.Например, для операции sampleObject[3] = 10 в C# (sampleObject(3) = 10 в Visual Basic), где sampleObject является производным от класса <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="indexes[0]" /> равно 3.</param>
      <param name="value">Значение, которое необходимо задать для объекта с заданным индексом.Например, для операции sampleObject[3] = 10 в C# (sampleObject(3) = 10 в Visual Basic), где sampleObject является производным от класса <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="value" /> равно 10.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>Предоставляет реализацию для операций, задающих значения членов.Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как задание значения свойства.</summary>
      <returns>true в случае успешного выполнения операции; в противном случае возвращает значение false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об объекте, вызвавшем динамическую операцию.Свойство binder.Name предоставляет имя члена, которому присваивается значение.Например, для оператора sampleObject.SampleProperty = "Test", где sampleObject является экземпляром класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, binder.Name возвращает значение "SampleProperty".Свойство binder.IgnoreCase задает, учитывается ли регистр в имени члена.</param>
      <param name="value">Значение, задаваемое для члена.Например, для sampleObject.SampleProperty = "Test", где sampleObject является экземпляром класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="value" /> является "Test".</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>Предоставляет реализацию для унарных операций.Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как вычитание, увеличение или уменьшение.</summary>
      <returns>true в случае успешного выполнения операции; в противном случае возвращает значение false.Если данный метод возвращает значение false, поведение определяется связывателем среды языка.(В большинстве случаев создается языковое исключение во время выполнения).</returns>
      <param name="binder">Предоставляет сведения об унарной операции.Свойство binder.Operation возвращает объект <see cref="T:System.Linq.Expressions.ExpressionType" />.Например, для оператора negativeNumber = -number, где number является производным от класса DynamicObject, binder.Operation возвращает значение "Negate".</param>
      <param name="result">Результат унарной операции.</param>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>Представляет объект, члены которого можно динамически добавлять и удалять во время выполнения.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>Инициализирует новый объект ExpandoObject, не содержащий членов.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Добавляет указанное значение в коллекцию <see cref="T:System.Collections.Generic.ICollection`1" />, которая имеет указанный ключ.</summary>
      <param name="item">Структура <see cref="T:System.Collections.Generic.KeyValuePair`2" />, представляющая ключ и значение, которые требуется добавить в коллекцию.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Удаляет все элементы из коллекции.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Определяет, содержит ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> заданный ключ и значение.</summary>
      <returns>true, если коллекция содержит указанные ключ и значение; в противном случае — значение false.</returns>
      <param name="item">Структура <see cref="T:System.Collections.Generic.KeyValuePair`2" />, которую требуется найти в коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Копирует элементы коллекции <see cref="T:System.Collections.Generic.ICollection`1" /> в массив типа <see cref="T:System.Collections.Generic.KeyValuePair`2" />, начиная с заданного индекса массива.</summary>
      <param name="array">Одномерный массив типа <see cref="T:System.Collections.Generic.KeyValuePair`2" />, в который копируются элементы <see cref="T:System.Collections.Generic.KeyValuePair`2" /> из коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.Индексы массива должны начинаться с нуля.</param>
      <param name="arrayIndex">Отсчитываемый от ноля индекс в массиве <paramref name="array" />, с которого начинается копирование.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Count">
      <summary>Возвращает число элементов, содержащихся в коллекции <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>Число элементов в <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Получает значение, указывающее, доступна ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> только для чтения.</summary>
      <returns>true, если <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — false.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Удаляет из коллекции ключ и значение.</summary>
      <returns>true, если ключ и значение найдены и удалены; в противном случае — значение false.Этот метод возвращает значение false, если ключ и значение не найдены в <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="item">Структура <see cref="T:System.Collections.Generic.KeyValuePair`2" />, представляющая ключ и значение, которые требуется удалить из коллекции.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Add(System.String,System.Object)">
      <summary>Добавляет указанные ключ и значение в словарь.</summary>
      <param name="key">Объект, который используется в качестве ключа.</param>
      <param name="value">Объект, который используется в качестве значения.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(System.String)">
      <summary>Определяет, содержится ли указанный ключ в словаре.</summary>
      <returns>true, если словарь содержит элемент с указанным ключом; в противном случае — значение false.</returns>
      <param name="key">Ключ, который нужно найти в словаре.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Item(System.String)">
      <summary>Получает или задает элемент, имеющий указанный ключ.</summary>
      <returns>Элемент, имеющий указанный ключ.</returns>
      <param name="key">Ключ элемента, который требуется получить или задать.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Возвращает коллекцию <see cref="T:System.Collections.Generic.ICollection`1" />, содержащую ключи из словаря <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />, содержащая ключи объекта, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(System.String)">
      <summary>Удаляет из <see cref="T:System.Collections.IDictionary" /> элемент, имеющий указанный ключ.</summary>
      <returns>true, если элемент был успешно удален; в противном случае — значение false.Этот метод также возвращает значение false, если ключ <paramref name="key" /> не найден в исходной коллекции <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
      <param name="key">Ключ элемента, который требуется удалить.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(System.String,System.Object@)">
      <summary>Получает значение, связанное с указанным ключом.</summary>
      <returns>true, если объект, реализующий <see cref="T:System.Collections.Generic.IDictionary`2" />, содержит элемент с указанным ключом, в противном случае — значение false.</returns>
      <param name="key">Ключ значения, которое необходимо получить.</param>
      <param name="value">После завершения метода содержит значение, связанное с указанном ключом, если он найден; в противном случае — значение по умолчанию для типа данного параметра <paramref name="value" />.Этот параметр передается без инициализации.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Возвращает коллекцию <see cref="T:System.Collections.Generic.ICollection`1" />, содержащую значения из словаря <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Коллекция <see cref="T:System.Collections.Generic.ICollection`1" />, содержащая значения в объекте, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию по элементам коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerator`1" />, который может использоваться для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий итерацию по элементам коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для перебора элементов коллекции.</returns>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Происходит при изменениях значения свойства.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Предоставленный объект MetaObject будет вызывать динамические виртуальные методы.Объект можно инкапсулировать внутри другого объекта MetaObject, чтобы обеспечить пользовательское поведение для отдельных действий.</summary>
      <returns>Объект типа <see cref="T:System.Dynamic.DynamicMetaObject" />.</returns>
      <param name="parameter">Выражение, представляющее объект MetaObject, который будет вызывать динамические виртуальные методы.</param>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>Представляет динамическую операцию получения индекса в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.GetIndexBinder" />.</summary>
      <param name="callInfo">Сигнатура аргументов в источнике вызова.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции получения индекса.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции получения индекса.</param>
      <param name="args">Массив аргументов динамической операции получения индекса.</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>Получает сигнатуру аргументов в источнике вызова.</summary>
      <returns>Сигнатура аргументов в источнике вызова.</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции получения индекса, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции получения индекса.</param>
      <param name="indexes">Аргументы динамической операции получения индекса.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции получения индекса, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции получения индекса.</param>
      <param name="indexes">Аргументы динамической операции получения индекса.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>Представляет динамическую операцию получения члена в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.GetMemberBinder" />.</summary>
      <param name="name">Имя члена, который необходимо получить.</param>
      <param name="ignoreCase">Значение true, если имя должно сравниваться без учета регистра; в противном случае — значение false.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции получения члена.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции получения члена.</param>
      <param name="args">Массив аргументов динамической операции получения члена.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции получения члена, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции получения члена.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции получения члена, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции получения члена.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>Получает значение, указывающее, следует ли игнорировать регистр имен членов при сравнении строк.</summary>
      <returns>Значение true, если регистр знаков не учитывается; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>Получает имя члена, который требуется получить.</summary>
      <returns>Имя члена, который необходимо получить.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>Представляет динамический объект, операции которого могут привязываться во время выполнения.</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Возвращает объект <see cref="T:System.Dynamic.DynamicMetaObject" />, который отвечает за выполняемые с данным объектом операции привязки.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, который необходимо привязать к данному объекту.</returns>
      <param name="parameter">Представление дерева выражений значения среды выполнения.</param>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>Представляет сведения о динамической операции получения члена, указывающие, должен ли метод получения члена вызывать свойства при выполнении операции получения.</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>Получает значение, указывающее, должна ли данная операция получения члена вызывать свойства при выполнении операции получения.Значение по умолчанию при отсутствии данного интерфейса — true.</summary>
      <returns>Значение true, если данная операция получения члена должна вызывать свойства при выполнении операции получения; в противном случае — значение false.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>Представляет динамическую операцию вызова в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.InvokeBinder" />.</summary>
      <param name="callInfo">Сигнатура аргументов в источнике вызова.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции вызова.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции вызова.</param>
      <param name="args">Массив аргументов динамической операции вызова.</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>Получает сигнатуру аргументов в источнике вызова.</summary>
      <returns>Сигнатура аргументов в источнике вызова.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции вызова, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции вызова.</param>
      <param name="args">Аргументы динамической операции вызова.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции вызова, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции вызова.</param>
      <param name="args">Аргументы динамической операции вызова.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>Представляет динамическую операцию вызова члена в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.InvokeMemberBinder" />.</summary>
      <param name="name">Имя элемента, который предполагается вызвать.</param>
      <param name="ignoreCase">Значение true, если имя должно сравниваться без учета регистра; в противном случае — значение false.</param>
      <param name="callInfo">Сигнатура аргументов в источнике вызова.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции вызова члена.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции вызова члена.</param>
      <param name="args">Массив аргументов динамической операции вызова члена.</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>Получает сигнатуру аргументов в источнике вызова.</summary>
      <returns>Сигнатура аргументов в источнике вызова.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции вызова, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции вызова.</param>
      <param name="args">Аргументы динамической операции вызова.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции вызова члена, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции вызова члена.</param>
      <param name="args">Аргументы динамической операции вызова члена.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции вызова члена, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции вызова члена.</param>
      <param name="args">Аргументы динамической операции вызова члена.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>Получает значение, указывающее, следует ли игнорировать регистр имен членов при сравнении строк.</summary>
      <returns>Значение true, если регистр знаков не учитывается; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>Получает имя члена, который требуется вызвать.</summary>
      <returns>Имя элемента, который предполагается вызвать.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>Представляет динамическую операцию задания индекса в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.SetIndexBinder" />.</summary>
      <param name="callInfo">Сигнатура аргументов в источнике вызова.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции задания индекса.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции задания индекса.</param>
      <param name="args">Массив аргументов динамической операции задания индекса.</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>Получает сигнатуру аргументов в источнике вызова.</summary>
      <returns>Сигнатура аргументов в источнике вызова.</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции задания индекса, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции задания индекса.</param>
      <param name="indexes">Аргументы динамической операции задания индекса.</param>
      <param name="value">Значение, задаваемое для коллекции.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции задания индекса, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции задания индекса.</param>
      <param name="indexes">Аргументы динамической операции задания индекса.</param>
      <param name="value">Значение, задаваемое для коллекции.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>Представляет динамическую операцию задания члена в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.SetMemberBinder" />.</summary>
      <param name="name">Имя члена, который необходимо получить.</param>
      <param name="ignoreCase">Значение true, если имя должно сравниваться без учета регистра; в противном случае — значение false.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции задания члена.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции задания члена.</param>
      <param name="args">Массив аргументов динамической операции задания члена.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции задания члена, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции задания члена.</param>
      <param name="value">Значение, задаваемое для члена.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции задания члена, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции задания члена.</param>
      <param name="value">Значение, задаваемое для члена.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>Получает значение, указывающее, следует ли игнорировать регистр имен членов при сравнении строк.</summary>
      <returns>Значение true, если регистр знаков не учитывается; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>Получает имя члена, который требуется получить.</summary>
      <returns>Имя члена, который необходимо получить.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>Представляет унарную динамическую операцию в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.BinaryOperationBinder" />.</summary>
      <param name="operation">Вид унарной операции.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической унарной операции.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической операции.</param>
      <param name="args">Массив аргументов динамической операции.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку унарной динамической операции, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической унарной операции.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку унарной динамической операции, если не удается привязать динамический целевой объект.</summary>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
      <param name="target">Целевой объект динамической унарной операции.</param>
      <param name="errorSuggestion">Результат привязки в случае ее неудачного завершения или значение NULL.</param>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>Вид унарной операции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, который представляет вид унарной операции.</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Linq.Enumerable">
      <summary>Предоставляет набор static (Shared в Visual Basic) методов для выполнения запросов к объектам, реализующим интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>Применяет к последовательности агрегатную функцию.</summary>
      <returns>Конечное агрегатное значение.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, для которого выполняется статистическая операция.</param>
      <param name="func">Агрегатная функция, вызываемая для каждого элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="source" /> или <paramref name="func" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>Применяет к последовательности агрегатную функцию.Указанное начальное значение используется в качестве исходного значения агрегатной операции.</summary>
      <returns>Конечное агрегатное значение.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, для которого выполняется статистическая операция.</param>
      <param name="seed">Начальное агрегатное значение.</param>
      <param name="func">Агрегатная функция, вызываемая для каждого элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Тип агрегатного значения.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="source" /> или <paramref name="func" /> — null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>Применяет к последовательности агрегатную функцию.Указанное начальное значение служит исходным значением для агрегатной операции, а указанная функция используется для выбора результирующего значения.</summary>
      <returns>Преобразованное конечное агрегатное значение.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, для которого выполняется статистическая операция.</param>
      <param name="seed">Начальное агрегатное значение.</param>
      <param name="func">Агрегатная функция, вызываемая для каждого элемента.</param>
      <param name="resultSelector">Функция, преобразующая конечное агрегатное значение в результирующее значение.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Тип агрегатного значения.</typeparam>
      <typeparam name="TResult">Тип результирующего значения.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="func" /> или <paramref name="resultSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Проверяет, все ли элементы последовательности удовлетворяют условию.</summary>
      <returns>true, если каждый элемент исходной последовательности проходит проверку, определяемую указанным предикатом, или если последовательность пуста; в противном случае — значение false.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы, к которым применяется предикат.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="source" /> или <paramref name="predicate" /> — null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Проверяет, содержит ли последовательность какие-либо элементы.</summary>
      <returns>true, если исходная последовательность содержит какие-либо элементы; в противном случае — значение false.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, проверяемый на пустоту.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Проверяет, удовлетворяет ли какой-либо элемент последовательности заданному условию.</summary>
      <returns>true, если хотя бы один элемент исходной последовательности проходит проверку, определяемую указанным предикатом; в противном случае — значение false.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, к элементам которого применяется предикат.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="source" /> или <paramref name="predicate" /> — null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает входные данные, приведенные к типу <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>Входная последовательность, приведенная к типу <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="source">Последовательность, которая приводится к типу <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Decimal" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Double" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Int32" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Int64" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Decimal" />, допускающих значения NULL.</summary>
      <returns>Среднее арифметическое значений последовательности или значение null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, допускающих значения NULL, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма элементов последовательности больше значения <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Double" />, допускающих значения NULL.</summary>
      <returns>Среднее арифметическое значений последовательности или значение null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, допускающих значения NULL, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Int32" />, допускающих значения NULL.</summary>
      <returns>Среднее арифметическое значений последовательности или значение null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, допускающих значения NULL, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма элементов последовательности больше значения <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Int64" />, допускающих значения NULL.</summary>
      <returns>Среднее арифметическое значений последовательности или значение null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, допускающих значения NULL, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма элементов последовательности больше значения <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Single" />, допускающих значения NULL.</summary>
      <returns>Среднее арифметическое значений последовательности или значение null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, допускающих значения NULL, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Single" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Decimal" />, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
      <exception cref="T:System.OverflowException">Сумма элементов последовательности больше значения <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Double" />, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Int32" />, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
      <exception cref="T:System.OverflowException">Сумма элементов последовательности больше значения <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Int64" />, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов исходной последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
      <exception cref="T:System.OverflowException">Сумма элементов последовательности больше значения <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Decimal" />, допускающих значения NULL, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности или значение null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.OverflowException">Сумма элементов последовательности больше значения <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Double" />, допускающих значения NULL, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности или значение null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Int32" />, допускающих значения NULL, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности или значение null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.OverflowException">Сумма элементов последовательности больше значения <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Int64" />, допускающих значения NULL, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности или значение null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Single" />, допускающих значения NULL, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности или значение null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Single" />, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
      <summary>Преобразует элементы объекта <see cref="T:System.Collections.IEnumerable" /> в заданный тип.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит все элементы исходной последовательности, преобразованные в заданный тип.</returns>
      <param name="source">Объект <see cref="T:System.Collections.IEnumerable" />, содержащий преобразуемые элементы.</param>
      <typeparam name="TResult">Тип, в который преобразуются элементы <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidCastException">Элемент последовательности не может быть приведен к типу <paramref name="TResult" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Объединяет две последовательности.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объединенные элементы двух входных последовательностей.</returns>
      <param name="first">Первая из объединяемых последовательностей.</param>
      <param name="second">Последовательность, объединяемая с первой последовательностью.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Определяет, содержится ли указанный элемент в последовательности, используя компаратор проверки на равенство по умолчанию.</summary>
      <returns>true, если исходная последовательность содержит элемент с указанным значением; в противном случае — значение false.</returns>
      <param name="source">Последовательность, в которой требуется найти данное значение.</param>
      <param name="value">Значение, которое требуется найти в последовательности.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Определяет, содержит ли последовательность заданный элемент, используя указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>true, если исходная последовательность содержит элемент с указанным значением; в противном случае — значение false.</returns>
      <param name="source">Последовательность, в которой требуется найти данное значение.</param>
      <param name="value">Значение, которое требуется найти в последовательности.</param>
      <param name="comparer">Компаратор проверки на равенство, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает количество элементов в последовательности.</summary>
      <returns>Число элементов во входной последовательности.</returns>
      <param name="source">Последовательность, элементы которой требуется подсчитать.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает число, представляющее количество элементов последовательности, удовлетворяющих заданному условию.</summary>
      <returns>Число, представляющее количество элементов последовательности, удовлетворяющих условию функции предиката.</returns>
      <param name="source">Последовательность, элементы которой требуется проверить и подсчитать.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает элементы указанной последовательности или одноэлементную коллекцию, содержащую значение параметра типа по умолчанию, если последовательность пуста.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий значение по умолчанию для типа <paramref name="TSource" />, если параметр <paramref name="source" /> пуст; в противном случае — <paramref name="source" />.</returns>
      <param name="source">Последовательность, для которой возвращается значение по умолчанию, если она пуста.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Возвращает элементы указанной последовательности или одноэлементную коллекцию, содержащую указанное значение, если последовательность пуста.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий значение <paramref name="defaultValue" />, если последовательность <paramref name="source" /> пуста; в противном случае возвращается <paramref name="source" />.</returns>
      <param name="source">Последовательность, для которой возвращается указанное значение, если она пуста.</param>
      <param name="defaultValue">Значение, возвращаемое в случае пустой последовательности.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает различающиеся элементы последовательности, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий различающиеся элементы из исходной последовательности.</returns>
      <param name="source">Последовательность, из которой требуется удалить дубликаты элементов.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Возвращает различающиеся элементы последовательности, используя для сравнения значений указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий различающиеся элементы из исходной последовательности.</returns>
      <param name="source">Последовательность, из которой требуется удалить дубликаты элементов.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Возвращает элемент по указанному индексу в последовательности.</summary>
      <returns>Элемент, находящийся в указанной позиции в исходной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элемент.</param>
      <param name="index">Отсчитываемый от нуля индекс элемента, который требуется извлечь.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> меньше 0 либо больше или равно числу элементов последовательности <paramref name="source" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Возвращает элемент по указанному индексу в последовательности или значение по умолчанию, если индекс вне допустимого диапазона.</summary>
      <returns>default (<paramref name="TSource" />), если индекс указывает позицию вне исходной последовательности, в противном случае — элемент, находящийся в указанной позиции в исходной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элемент.</param>
      <param name="index">Отсчитываемый от нуля индекс элемента, который требуется извлечь.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Empty``1">
      <summary>Возвращает пустой объект <see cref="T:System.Collections.Generic.IEnumerable`1" /> с указанным аргументом типа.</summary>
      <returns>Пустой объект <see cref="T:System.Collections.Generic.IEnumerable`1" /> с аргументом типа <paramref name="TResult" />.</returns>
      <typeparam name="TResult">Тип, присваиваемый параметру типа возвращаемого универсального интерфейса <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Находит разность множеств, представленных двумя последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <returns>Последовательность, представляющая собой разность двух последовательностей как множеств.</returns>
      <param name="first">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется извлечь элементы, отсутствующие в последовательности <paramref name="second" />.</param>
      <param name="second">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого, входящие также в первую последовательность, должны быть исключены из возвращаемой последовательности.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Находит разность множеств, представленных двумя последовательностями, используя для сравнения значений указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Последовательность, представляющая собой разность двух последовательностей как множеств.</returns>
      <param name="first">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется извлечь элементы, отсутствующие в последовательности <paramref name="second" />.</param>
      <param name="second">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого, входящие также в первую последовательность, должны быть исключены из возвращаемой последовательности.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает первый элемент последовательности.</summary>
      <returns>Первый элемент указанной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, первый элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает первый элемент последовательности, удовлетворяющий указанному условию.</summary>
      <returns>Первый элемент последовательности, который прошел проверку, определенную указанной функцией предиката.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">Ни один элемент не удовлетворяет условию <paramref name="predicate" />.-или-Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает первый элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</summary>
      <returns>default (<paramref name="TSource" />), если объект <paramref name="source" /> пуст; в противном случае — первый элемент в <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, первый элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает первый удовлетворяющий условию элемент последовательности или значение по умолчанию, если ни одного такого элемента не найдено.</summary>
      <returns>default(<paramref name="TSource" />), если объект <paramref name="source" /> пуст или если ни один его элемент не прошел проверку, определенную предикатом <paramref name="predicate" />; в противном случае — первый элемент в <paramref name="source" />, прошедший проверку, определенную предикатом <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа.</summary>
      <returns>Объект IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; в C# или IEnumerable(Of IGrouping(Of TKey, TSource)) в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит последовательность объектов и ключ.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и сравнивает ключи с помощью указанного компаратора.</summary>
      <returns>Объект IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; в C# или IEnumerable(Of IGrouping(Of TKey, TSource)) в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит коллекцию объектов и ключ.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и проецирует элементы каждой группы с помощью указанной функции.</summary>
      <returns>Объект IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; в C# или IEnumerable(Of IGrouping(Of TKey, TElement)) в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит коллекцию объектов типа <paramref name="TElement" /> и ключ.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом в объекте <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов объекта <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы последовательности в соответствии с функцией селектора ключа.Ключи сравниваются с помощью компаратора, элементы каждой группы проецируются с помощью указанной функции.</summary>
      <returns>Объект IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; в C# или IEnumerable(Of IGrouping(Of TKey, TElement)) в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит коллекцию объектов типа <paramref name="TElement" /> и ключ.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом в объекте <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов объекта <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.Элементы каждой группы проецируются с помощью указанной функции.</summary>
      <returns>Коллекция элементов типа <paramref name="TResult" />, в которой каждый элемент представляет проекцию группы и ее ключа.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом в объекте <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов в каждом объекте <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.Значения ключей сравниваются с помощью указанного компаратора, элементы каждой группы проецируются с помощью указанной функции.</summary>
      <returns>Коллекция элементов типа <paramref name="TResult" />, в которой каждый элемент представляет проекцию группы и ее ключа.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом в объекте <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов в каждом объекте <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.</summary>
      <returns>Коллекция элементов типа <paramref name="TResult" />, в которой каждый элемент представляет проекцию группы и ее ключа.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.Ключи сравниваются с использованием заданного компаратора.</summary>
      <returns>Коллекция элементов типа <paramref name="TResult" />, в которой каждый элемент представляет проекцию группы и ее ключа.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Устанавливает корреляцию между элементами двух последовательностей на основе равенства ключей и группирует результаты.Для сравнения ключей используется компаратор проверки на равенство по умолчанию.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате соединения двух последовательностей с группированием.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Устанавливает корреляцию между элементами двух последовательностей на основе равенства ключей и группирует результаты.Для сравнения ключей используется указанный объект <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате соединения двух последовательностей с группированием.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для хэширования и сравнения ключей.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Находит пересечение множеств, представленных двумя последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <returns>Последовательность элементов, представляющая собой пересечение двух заданных последовательностей как множеств.</returns>
      <param name="first">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого извлекаются различающиеся элементы, входящие также в последовательность <paramref name="second" />.</param>
      <param name="second">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого извлекаются различающиеся элементы, входящие также в первую последовательность.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Находит пересечение двух последовательностей, используя для сравнения значений указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Последовательность элементов, представляющая собой пересечение двух заданных последовательностей как множеств.</returns>
      <param name="first">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого извлекаются различающиеся элементы, входящие также в последовательность <paramref name="second" />.</param>
      <param name="second">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого извлекаются различающиеся элементы, входящие также в первую последовательность.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Устанавливает корреляцию между элементами двух последовательностей на основе сопоставления ключей.Для сравнения ключей используется компаратор проверки на равенство по умолчанию.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате внутреннего соединения двух последовательностей.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция для создания результирующего элемента для пары соответствующих элементов.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Устанавливает корреляцию между элементами двух последовательностей на основе сопоставления ключей.Для сравнения ключей используется указанный объект <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате внутреннего соединения двух последовательностей.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция для создания результирующего элемента для пары соответствующих элементов.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для хэширования и сравнения ключей.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает последний элемент последовательности.</summary>
      <returns>Значение, находящееся в последней позиции исходной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, последний элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает последний элемент последовательности, удовлетворяющий указанному условию.</summary>
      <returns>Последний элемент последовательности, который прошел проверку, определенную указанной функцией предиката.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">Ни один элемент не удовлетворяет условию <paramref name="predicate" />.-или-Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает последний элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</summary>
      <returns>default (<paramref name="TSource" />), если исходная последовательность пуста; в противном случае — последний элемент в <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, последний элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает последний элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если ни одного такого элемента не найдено.</summary>
      <returns>default (<paramref name="TSource" />), если последовательность пуста или ни один ее элемент не прошел проверку функцией предиката; в противном случае — последний элемент, прошедший проверку функцией предиката.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает значение типа <see cref="T:System.Int64" />, представляющее общее число элементов в последовательности.</summary>
      <returns>Число элементов в исходной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Число элементов превышает <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает значение типа <see cref="T:System.Int64" />, представляющее число элементов последовательности, удовлетворяющих заданному условию.</summary>
      <returns>Число, представляющее количество элементов последовательности, удовлетворяющих условию функции предиката.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
      <exception cref="T:System.OverflowException">Число соответствующих элементов превышает <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Возвращает максимальное значение, содержащееся в последовательности значений <see cref="T:System.Decimal" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Возвращает максимальное значение, содержащееся в последовательности значений <see cref="T:System.Double" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Возвращает максимальное значение, содержащееся в последовательности значений <see cref="T:System.Int32" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Возвращает максимальное значение, содержащееся в последовательности значений <see cref="T:System.Int64" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Возвращает максимальное значение, содержащееся в последовательности значений <see cref="T:System.Decimal" />, допускающей значения NULL.</summary>
      <returns>Значение типа Nullable&lt;Decimal&gt; в C# или Nullable(Of Decimal) в Visual Basic, соответствующее максимальному значению последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, допускающая значения NULL, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Возвращает максимальное значение, содержащееся в последовательности значений <see cref="T:System.Double" />, допускающей значения NULL.</summary>
      <returns>Значение типа Nullable&lt;Double&gt; в C# или Nullable(Of Double) в Visual Basic, соответствующее максимальному значению последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, допускающая значения NULL, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Возвращает максимальное значение, содержащееся в последовательности значений <see cref="T:System.Int32" />, допускающей значения NULL.</summary>
      <returns>Значение типа Nullable&lt;Int32&gt; в C# или Nullable(Of Int32) в Visual Basic, соответствующее максимальному значению последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, допускающая значения NULL, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Возвращает максимальное значение, содержащееся в последовательности значений <see cref="T:System.Int64" />, допускающей значения NULL.</summary>
      <returns>Значение типа Nullable&lt;Int64&gt; в C# или Nullable(Of Int64) в Visual Basic, соответствующее максимальному значению последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, допускающая значения NULL, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Возвращает максимальное значение, содержащееся в последовательности значений <see cref="T:System.Single" />, допускающей значения NULL.</summary>
      <returns>Значение типа Nullable&lt;Single&gt; в C# или Nullable(Of Single) в Visual Basic, соответствующее максимальному значению последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, допускающая значения NULL, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Возвращает максимальное значение, содержащееся в последовательности значений <see cref="T:System.Single" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, для которой определяется максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает максимальное значение, содержащееся в универсальной последовательности.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Decimal" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Double" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Int32" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Int64" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Decimal" />, поддерживающее значение NULL.</summary>
      <returns>Значение типа Nullable&lt;Decimal&gt; в C# или Nullable(Of Decimal) в Visual Basic, соответствующее максимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Double" />, поддерживающее значение NULL.</summary>
      <returns>Значение типа Nullable&lt;Double&gt; в C# или Nullable(Of Double) в Visual Basic, соответствующее максимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Int32" />, поддерживающее значение NULL.</summary>
      <returns>Значение типа Nullable&lt;Int32&gt; в C# или Nullable(Of Int32) в Visual Basic, соответствующее максимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Int64" />, поддерживающее значение NULL.</summary>
      <returns>Значение типа Nullable&lt;Int64&gt; в C# или Nullable(Of Int64) в Visual Basic, соответствующее максимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Single" />, поддерживающее значение NULL.</summary>
      <returns>Значение типа Nullable&lt;Single&gt; в C# или Nullable(Of Single) в Visual Basic, соответствующее максимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает максимальное значение <see cref="T:System.Single" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Вызывает функцию преобразования для каждого элемента универсальной последовательности и возвращает максимальное результирующее значение.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Возвращает минимальное значение, содержащееся в последовательности значений <see cref="T:System.Decimal" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Возвращает минимальное значение, содержащееся в последовательности значений <see cref="T:System.Double" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Возвращает минимальное значение, содержащееся в последовательности значений <see cref="T:System.Int32" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Возвращает минимальное значение, содержащееся в последовательности значений <see cref="T:System.Int64" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Возвращает минимальное значение, содержащееся в последовательности значений <see cref="T:System.Decimal" />, допускающей значения NULL.</summary>
      <returns>Значение типа Nullable&lt;Decimal&gt; в C# или Nullable(Of Decimal) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, допускающая значения NULL, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Возвращает минимальное значение, содержащееся в последовательности значений <see cref="T:System.Double" />, допускающей значения NULL.</summary>
      <returns>Значение типа Nullable&lt;Double&gt; в C# или Nullable(Of Double) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, допускающая значения NULL, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Возвращает минимальное значение, содержащееся в последовательности значений <see cref="T:System.Int32" />, допускающей значения NULL.</summary>
      <returns>Значение типа Nullable&lt;Int32&gt; в C# или Nullable(Of Int32) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, допускающая значения NULL, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Возвращает минимальное значение, содержащееся в последовательности значений <see cref="T:System.Int64" />, допускающей значения NULL.</summary>
      <returns>Значение типа Nullable&lt;Int64&gt; в C# или Nullable(Of Int64) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, допускающая значения NULL, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Возвращает минимальное значение, содержащееся в последовательности значений <see cref="T:System.Single" />, допускающей значения NULL.</summary>
      <returns>Значение типа Nullable&lt;Single&gt; в C# или Nullable(Of Single) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, допускающая значения NULL, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Возвращает минимальное значение, содержащееся в последовательности значений <see cref="T:System.Single" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, для которой определяется минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает минимальное значение, содержащееся в универсальной последовательности.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Decimal" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Double" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Int32" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Int64" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Decimal" />, поддерживающее значение NULL.</summary>
      <returns>Значение типа Nullable&lt;Decimal&gt; в C# или Nullable(Of Decimal) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Double" />, поддерживающее значение NULL.</summary>
      <returns>Значение типа Nullable&lt;Double&gt; в C# или Nullable(Of Double) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Int32" />, поддерживающее значение NULL.</summary>
      <returns>Значение типа Nullable&lt;Int32&gt; в C# или Nullable(Of Int32) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Int64" />, поддерживающее значение NULL.</summary>
      <returns>Значение типа Nullable&lt;Int64&gt; в C# или Nullable(Of Int64) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Single" />, поддерживающее значение NULL.</summary>
      <returns>Значение типа Nullable&lt;Single&gt; в C# или Nullable(Of Single) в Visual Basic, соответствующее минимальному значению последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Вызывает функцию преобразования для каждого элемента последовательности и возвращает минимальное значение <see cref="T:System.Single" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Вызывает функцию преобразования для каждого элемента универсальной последовательности и возвращает минимальное результирующее значение.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимальное значение.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary>Выполняет фильтрацию элементов объекта <see cref="T:System.Collections.IEnumerable" /> по заданному типу.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы из входной последовательности типа <paramref name="TResult" />.</returns>
      <param name="source">Объект <see cref="T:System.Collections.IEnumerable" />, элементы которого следует фильтровать.</param>
      <typeparam name="TResult">Тип, по которому фильтруются элементы последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Сортирует элементы последовательности в порядке возрастания ключа.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Сортирует элементы последовательности в порядке возрастания с использованием указанного компаратора.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Сортирует элементы последовательности в порядке убывания ключа.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Сортирует элементы последовательности в порядке убывания с использованием указанного компаратора.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary>Генерирует последовательность целых чисел в заданном диапазоне.</summary>
      <returns>Объект IEnumerable&lt;Int32&gt; в C# или IEnumerable(Of Int32) в Visual Basic, содержащий диапазон последовательных целых чисел.</returns>
      <param name="start">Значение первого целого числа для последовательности.</param>
      <param name="count">Количество генерируемых последовательных целых чисел.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> меньше 0.-или-<paramref name="start" /> + <paramref name="count" /> -1 больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary>Генерирует последовательность, содержащую одно повторяющееся значение.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий повторяющееся значение.</returns>
      <param name="element">Повторяемое значение.</param>
      <param name="count">Требуемое число повторений данного значения в создаваемой последовательности.</param>
      <typeparam name="TResult">Тип значения, которое будет повторяться в результирующей последовательности.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> меньше 0.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Изменяет порядок элементов последовательности на противоположный.</summary>
      <returns>Последовательность, элементы которой соответствуют элементам входной последовательности, но следуют в противоположном порядке.</returns>
      <param name="source">Последовательность значений, которые следует расставить в обратном порядке.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Проецирует каждый элемент последовательности в новую форму.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования для каждого элемента в <paramref name="source" />.</returns>
      <param name="source">Последовательность значений, для которых вызывается функция преобразования.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary>Проецирует каждый элемент последовательности в новую форму, добавляя индекс элемента.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования для каждого элемента в <paramref name="source" />.</returns>
      <param name="source">Последовательность значений, для которых вызывается функция преобразования.</param>
      <param name="selector">Функция преобразования, применяемая к каждому исходному элементу; второй параметр функции представляет индекс исходного элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, объединяет результирующие последовательности в одну и вызывает функцию селектора результата для каждого элемента этой последовательности.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования "один ко многим" <paramref name="collectionSelector" /> для каждого элемента в <paramref name="source" /> и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующего ему исходного элемента с результирующим элементом.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="collectionSelector">Функция преобразования, применяемая к каждому элементу входной последовательности.</param>
      <param name="resultSelector">Функция преобразования, применяемая к каждому элементу промежуточной последовательности.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">Тип промежуточных элементов, собранных <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">Тип элементов результирующей последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="collectionSelector" /> или <paramref name="resultSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" /> и объединяет результирующие последовательности в одну последовательность.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования "один ко многим" для каждого элемента входной последовательности.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип элементов последовательности, возвращаемой <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, объединяет результирующие последовательности в одну и вызывает функцию селектора результата для каждого элемента этой последовательности.Индекс каждого элемента исходной последовательности используется в промежуточной проецированной форме этого элемента.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования "один ко многим" <paramref name="collectionSelector" /> для каждого элемента в <paramref name="source" /> и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующего ему исходного элемента с результирующим элементом.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="collectionSelector">Функция преобразования, применяемая к каждому исходному элементу; второй параметр функции представляет индекс исходного элемента.</param>
      <param name="resultSelector">Функция преобразования, применяемая к каждому элементу промежуточной последовательности.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">Тип промежуточных элементов, собранных <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">Тип элементов результирующей последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="collectionSelector" /> или <paramref name="resultSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" /> и объединяет результирующие последовательности в одну последовательность.Индекс каждого элемента исходной последовательности используется в проецированной форме этого элемента.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования "один ко многим" для каждого элемента входной последовательности.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="selector">Функция преобразования, применяемая к каждому исходному элементу; второй параметр функции представляет индекс исходного элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип элементов последовательности, возвращаемой <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Определяет, совпадают ли две последовательности, используя для сравнения элементов компаратор проверки на равенство по умолчанию, предназначенный для их типа.</summary>
      <returns>Значение true, если у двух исходных последовательностей одинаковая длина и соответствующие элементы совпадают (согласно компаратору проверки на равенство по умолчанию для этого типа элементов); в противном случае — значение false.</returns>
      <param name="first">Компаратор <see cref="T:System.Collections.Generic.IEnumerable`1" />, используемый для сравнения значений<paramref name="second" />.</param>
      <param name="second">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, сравниваемый с первой последовательностью.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Определяет, совпадают ли две последовательности, используя для сравнения элементов указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>true, если у двух исходных последовательностей одинаковая длина и соответствующие элементы совпадают согласно компаратору <paramref name="comparer" />; в противном случае — false.</returns>
      <param name="first">Компаратор <see cref="T:System.Collections.Generic.IEnumerable`1" />, используемый для сравнения значений<paramref name="second" />.</param>
      <param name="second">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, сравниваемый с первой последовательностью.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения элементов.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> имеет более одного элемента.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает единственный элемент последовательности и генерирует исключение, если число элементов последовательности отлично от 1.</summary>
      <returns>Единственный элемент входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, единственный элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Во входной последовательности больше одного элемента.-или-Входная последовательность пуста.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает единственный элемент последовательности, удовлетворяющий заданному условию, и генерирует исключение, если таких элементов больше одного.</summary>
      <returns>Единственный элемент входной последовательности, удовлетворяющий условию.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить единственный элемент.</param>
      <param name="predicate">Функция для проверки элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">Ни один элемент не удовлетворяет условию <paramref name="predicate" />.-или-Условию предиката <paramref name="predicate" /> удовлетворяет более одного элемента.-или-Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Возвращает единственный элемент последовательности или значение по умолчанию, если последовательность пуста; если в последовательности более одного элемента, генерируется исключение.</summary>
      <returns>Отдельный элемент входной последовательности или default (<paramref name="TSource" />), если в последовательности нет элементов.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, единственный элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Во входной последовательности больше одного элемента.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает единственный элемент последовательности, удовлетворяющий заданному условию, или значение по умолчанию, если такого элемента не существует; если условию удовлетворяет более одного элемента, генерируется исключение.</summary>
      <returns>Отдельный элемент входной последовательности, удовлетворяющий условию, или default (<paramref name="TSource" />), если такой элемент не найден.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить единственный элемент.</param>
      <param name="predicate">Функция для проверки элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Пропускает заданное число элементов в последовательности и возвращает остальные элементы.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы из входной последовательности, начиная с указанного индекса.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элементы.</param>
      <param name="count">Число элементов, пропускаемых перед возвращением остальных элементов.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Пропускает элементы в последовательности, пока они удовлетворяют заданному условию, и затем возвращает оставшиеся элементы.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий цепочку элементов входной последовательности, начиная с первого элемента, который не прошел проверку, заданную предикатом <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элементы.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Пропускает элементы в последовательности, пока они удовлетворяют заданному условию, и затем возвращает оставшиеся элементы.Индекс элемента используется в логике функции предиката.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий цепочку элементов входной последовательности, начиная с первого элемента, который не прошел проверку, заданную предикатом <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется возвратить элементы.</param>
      <param name="predicate">Функция, применяемая к каждому исходному элементу для проверки условия; второй параметр функции представляет индекс исходного элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Decimal" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Double" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Int32" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Int64" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Decimal" />, допускающей значения NULL.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" /> с поддержкой значения NULL, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Double" />, допускающей значения NULL.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" /> с поддержкой значения NULL, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Int32" />, допускающей значения NULL.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" /> с поддержкой значения NULL, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Int64" />, допускающей значения NULL.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" /> с поддержкой значения NULL, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Single" />, допускающей значения NULL.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" /> с поддержкой значения NULL, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Single" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Decimal" />, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Double" />, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Int32" />, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Int64" />, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Decimal" />, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Double" />, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Int32" />, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Int64" />, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Single" />, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Single" />, получаемых в результате применения функции преобразования к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется сумма.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Возвращает указанное число подряд идущих элементов с начала последовательности.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий заданное число элементов с начала входной последовательности.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="count">Число возвращаемых элементов.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает цепочку элементов последовательности, удовлетворяющих указанному условию.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы входной последовательности до первого элемента, который не прошел проверку.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Возвращает цепочку элементов последовательности, удовлетворяющих указанному условию.Индекс элемента используется в логике функции предиката.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы входной последовательности до первого элемента, который не прошел проверку.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="predicate">Функция, применяемая к каждому исходному элементу для проверки условия; второй параметр функции представляет индекс исходного элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>Выполняет дополнительное упорядочение элементов последовательности в порядке возрастания ключа.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Выполняет дополнительное упорядочение элементов последовательности в порядке возрастания с использованием указанного компаратора.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>Выполняет дополнительное упорядочение элементов последовательности в порядке убывания ключа.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Выполняет дополнительное упорядочение элементов последовательности в порядке убывания с использованием указанного компаратора.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Создает массив из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>Массив, содержащий элементы из входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, на основе которого создается массив.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Создает объект <see cref="T:System.Collections.Generic.Dictionary`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданной функцией селектора ключа.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.Dictionary`2" />, содержащий ключи и значения.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется создать <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> равняется null.-или-<paramref name="keySelector" /> возвращает null в качестве ключа.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> выдает дубликаты ключей для двух элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Создает объект <see cref="T:System.Collections.Generic.Dictionary`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданной функцией селектора ключа и с заданным компаратором ключа.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.Dictionary`2" />, содержащий ключи и значения.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется создать <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> равняется null.-или-<paramref name="keySelector" /> возвращает null в качестве ключа.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> выдает дубликаты ключей для двух элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Создает объект <see cref="T:System.Collections.Generic.Dictionary`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданными функциями селектора ключа и селектора элемента.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит значения типа <paramref name="TElement" />, выбранные из входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется создать <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования для получения результирующего значения каждого элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип значения, возвращаемого <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> равен null.-или-<paramref name="keySelector" /> возвращает null в качестве ключа.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> выдает дубликаты ключей для двух элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Создает словарь <see cref="T:System.Collections.Generic.Dictionary`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданным компаратором и функциями селектора ключа и селектора элемента.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит значения типа <paramref name="TElement" />, выбранные из входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется создать <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования для получения результирующего значения каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип значения, возвращаемого <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> равен null.-или-<paramref name="keySelector" /> возвращает null в качестве ключа.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> выдает дубликаты ключей для двух элементов.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Создает универсальный объект <see cref="T:System.Collections.Generic.List`1" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.List`1" />, содержащий элементы из входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется создать <see cref="T:System.Collections.Generic.List`1" />.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Создает объект <see cref="T:System.Linq.Lookup`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданной функцией селектора ключа.</summary>
      <returns>Объект <see cref="T:System.Linq.Lookup`2" />, содержащий ключи и значения.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется создать <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Создает объект <see cref="T:System.Linq.Lookup`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданной функцией селектора ключа и с заданным компаратором ключа.</summary>
      <returns>Объект <see cref="T:System.Linq.Lookup`2" />, содержащий ключи и значения.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется создать <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Создает объект <see cref="T:System.Linq.Lookup`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданными функциями селектора ключа и селектора элемента.</summary>
      <returns>Объект <see cref="T:System.Linq.Lookup`2" />, который содержит значения типа <paramref name="TElement" />, выбранные из входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется создать <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования для получения результирующего значения каждого элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип значения, возвращаемого <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Создает словарь <see cref="T:System.Linq.Lookup`2" /> из объекта <see cref="T:System.Collections.Generic.IEnumerable`1" /> в соответствии с заданным компаратором и функциями селектора ключа и селектора элемента.</summary>
      <returns>Объект <see cref="T:System.Linq.Lookup`2" />, который содержит значения типа <paramref name="TElement" />, выбранные из входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого требуется создать <see cref="T:System.Linq.Lookup`2" />.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования для получения результирующего значения каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип значения, возвращаемого <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Находит объединение множеств, представленных двумя последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы, имеющиеся в обеих входных последовательностях, кроме дубликатов.</returns>
      <param name="first">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, различающиеся элементы которого образуют первое множество для объединения.</param>
      <param name="second">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, различающиеся элементы которого образуют второе множество для объединения.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Находит объединение множеств, представленных двумя последовательностями, используя указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы, имеющиеся в обеих входных последовательностях, кроме дубликатов.</returns>
      <param name="first">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, различающиеся элементы которого образуют первое множество для объединения.</param>
      <param name="second">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, различающиеся элементы которого образуют второе множество для объединения.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Выполняет фильтрацию последовательности значений на основе заданного предиката.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы входной последовательности, которые удовлетворяют условию.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, подлежащий фильтрации.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Выполняет фильтрацию последовательности значений на основе заданного предиката.Индекс каждого элемента используется в логике функции предиката.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий элементы входной последовательности, которые удовлетворяют условию.</returns>
      <param name="source">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, подлежащий фильтрации.</param>
      <param name="predicate">Функция, применяемая к каждому исходному элементу для проверки условия; второй параметр функции представляет индекс исходного элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>Объединяет две последовательности, используя указанную функцию предиката.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объединенные элементы двух входных последовательностей.</returns>
      <param name="first">Первая последовательность для объединения.</param>
      <param name="second">Вторая последовательность для объединения.</param>
      <param name="resultSelector">Функция, которая определяет, как объединить элементы двух последовательностей.</param>
      <typeparam name="TFirst">Тип элементов первой входной последовательности.</typeparam>
      <typeparam name="TSecond">Тип элементов второй входной последовательности.</typeparam>
      <typeparam name="TResult">Тип элементов результирующей последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> или <paramref name="second" /> равняется null.</exception>
    </member>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary>Представляет дерево выражения и обеспечивает функциональность для выполнения дерева выражения после его перезаписи.</summary>
    </member>
    <member name="M:System.Linq.EnumerableExecutor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Linq.EnumerableExecutor" />.</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary>Представляет дерево выражения и обеспечивает функциональность для выполнения дерева выражения после его перезаписи.</summary>
      <typeparam name="T">Тип данных значения, получаемого в результате выполнения дерева выражения.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Linq.EnumerableExecutor`1" />.</summary>
      <param name="expression">Дерево выражения, которое должно быть связано с новым экземпляром.</param>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary>Представляет коллекцию <see cref="T:System.Collections.IEnumerable" /> в виде источника данных <see cref="T:System.Linq.EnumerableQuery" />. </summary>
    </member>
    <member name="M:System.Linq.EnumerableQuery.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Linq.EnumerableQuery" />.</summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary>Представляет коллекцию <see cref="T:System.Collections.Generic.IEnumerable`1" /> в виде источника данных <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <typeparam name="T">Тип данных в коллекции.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Linq.EnumerableQuery`1" /> и связывает его с указанной коллекцией <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="enumerable">Коллекция, которую необходимо связать с новым экземпляром.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>Инициализирует новый экземпляр класса<see cref="T:System.Linq.EnumerableQuery`1" /> и связывает его с деревом выражения.</summary>
      <param name="expression">Дерево выражения, которое должно быть связано с новым экземпляром.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, который позволяет выполнять перебор элементов связанной коллекции <see cref="T:System.Collections.Generic.IEnumerable`1" /> или, если коллекция имеет значение NULL, коллекции, получаемой в результате перезаписи связанного дерева выражения в виде запроса к источнику данных <see cref="T:System.Collections.Generic.IEnumerable`1" /> и его выполнения.</summary>
      <returns>Перечислитель, с помощью которого можно осуществлять перебор по связанному источнику данных.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который позволяет выполнять перебор элементов связанной коллекции <see cref="T:System.Collections.Generic.IEnumerable`1" /> или, если коллекция имеет значение NULL, коллекции, получаемой в результате перезаписи связанного дерева выражения в виде запроса к источнику данных <see cref="T:System.Collections.Generic.IEnumerable`1" /> и его выполнения.</summary>
      <returns>Перечислитель, с помощью которого можно осуществлять перебор по связанному источнику данных.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary>Получает тип данных в коллекции, представленной данным экземпляром.</summary>
      <returns>Тип данных в коллекции, представленной данным экземпляром.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary>Получает дерево выражения, связанное с данным экземпляром или представляющее его.</summary>
      <returns>Дерево выражения, связанное с данным экземпляром или представляющее его.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary>Получает объект поставщика запросов, связанного с данным экземпляром.</summary>
      <returns>Поставщик запросов, связанный с данным экземпляром.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Создает новый объект <see cref="T:System.Linq.EnumerableQuery`1" /> и связывает его с указанным деревом выражения, которое представляет коллекцию данных <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>Объект EnumerableQuery, связанный с этим выражением <paramref name="expression" />.</returns>
      <param name="expression">Дерево выражения, которое требуется выполнить.</param>
      <typeparam name="S">Тип данных в коллекции, представленной выражением <paramref name="expression" />.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Создает новый объект <see cref="T:System.Linq.EnumerableQuery`1" /> и связывает его с указанным деревом выражения, которое представляет коллекцию данных <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>Объект <see cref="T:System.Linq.EnumerableQuery`1" />, связанный с этим выражением <paramref name="expression" />.</returns>
      <param name="expression">Дерево выражения, которое представляет коллекцию данных <see cref="T:System.Linq.IQueryable" />.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>Выполняет выражение после его перезаписи, чтобы вместо методов <see cref="T:System.Linq.Queryable" /> для всех перечислимых источников данных, к которым нельзя создать запрос с помощью методов <see cref="T:System.Linq.Queryable" />, вызывались методы <see cref="T:System.Linq.Enumerable" />.</summary>
      <returns>Значение, получаемое в результате выполнения <paramref name="expression" />.</returns>
      <param name="expression">Дерево выражения, которое требуется выполнить.</param>
      <typeparam name="S">Тип данных в коллекции, представленной выражением <paramref name="expression" />.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>Выполняет выражение после его перезаписи, чтобы вместо методов <see cref="T:System.Linq.Queryable" /> для всех перечислимых источников данных, к которым нельзя создать запрос с помощью методов <see cref="T:System.Linq.Queryable" />, вызывались методы <see cref="T:System.Linq.Enumerable" />.</summary>
      <returns>Значение, получаемое в результате выполнения <paramref name="expression" />.</returns>
      <param name="expression">Дерево выражения, которое требуется выполнить.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary>Возвращает текстовое представление перечислимой коллекции или, если она имеет значение NULL, дерева выражения, связанного с данным экземпляром.</summary>
      <returns>Текстовое представление перечислимой коллекции или, если она имеет значение NULL, дерева выражения, связанного с данным экземпляром.</returns>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary>Представляет коллекцию объектов, имеющих общий ключ.</summary>
      <typeparam name="TKey">Тип ключа объекта <see cref="T:System.Linq.IGrouping`2" />.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="TElement">Тип значений объекта <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary>Возвращает ключ объекта <see cref="T:System.Linq.IGrouping`2" />.</summary>
      <returns>Ключ объекта <see cref="T:System.Linq.IGrouping`2" />.</returns>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary>Определяет индексатор, свойство размера и метод логического поиска для структур данных, сопоставляющих ключи с последовательностями <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <typeparam name="TKey">Тип ключей объекта <see cref="T:System.Linq.ILookup`2" />.</typeparam>
      <typeparam name="TElement">Тип элементов в последовательностях <see cref="T:System.Collections.Generic.IEnumerable`1" />, представляющих значения объекта <see cref="T:System.Linq.ILookup`2" />.</typeparam>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary>Определяет, существует ли указанный ключ в объекте <see cref="T:System.Linq.ILookup`2" />.</summary>
      <returns>true, если <paramref name="key" /> обнаружен в <see cref="T:System.Linq.ILookup`2" />; в обратном случае false.</returns>
      <param name="key">Ключ, который требуется найти для объекта <see cref="T:System.Linq.ILookup`2" />.</param>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary>Возвращает число пар "ключ-значение", содержащихся в объекте <see cref="T:System.Linq.ILookup`2" />.</summary>
      <returns>Число пар "ключ/коллекция значений", содержащихся в объекте <see cref="T:System.Linq.ILookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary>Получает последовательность <see cref="T:System.Collections.Generic.IEnumerable`1" /> значений по индексу, определенному указанным ключом.</summary>
      <returns>Последовательность значений <see cref="T:System.Collections.Generic.IEnumerable`1" /> с индексом, определенным указанным ключом.</returns>
      <param name="key">Ключ требуемой последовательности значений.</param>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary>Представляет отсортированную последовательность.</summary>
      <typeparam name="TElement">Тип элементов последовательности.</typeparam>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary>Выполняет дополнительное упорядочение элементов объекта <see cref="T:System.Linq.IOrderedEnumerable`1" /> по ключу.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу.</returns>
      <param name="keySelector">Функция <see cref="T:System.Func`2" />, используемая для извлечения ключа для каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей при формировании возвращаемой последовательности.</param>
      <param name="descending">true, если элементы требуется сортировать в порядке убывания; false, чтобы сортировать элементы в порядке возрастания.</param>
      <typeparam name="TKey">Тип ключа, созданного функцией <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>Представляет результат операции сортировки.</summary>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>Представляет результат операции сортировки.</summary>
      <typeparam name="T">Тип содержимого источника данных.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>Предоставляет функциональные возможности расчета запросов к конкретному источнику данных, для которого не указан тип данных.</summary>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>Получает тип элементов, которые возвращаются при выполнении дерева выражения, связанного с данным экземпляром класса <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>Тип <see cref="T:System.Type" />, представляющий тип элементов, которые возвращаются при выполнении дерева выражения, связанного с данным объектом.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>Получает дерево выражения, связанное с экземпляром класса <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>Экземпляр <see cref="T:System.Linq.Expressions.Expression" />, связанный с данным объектом <see cref="T:System.Linq.IQueryable" />.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>Возвращает объект поставщика запросов, связанного с указанным источником данных.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryProvider" />, связанный с указанным источником данных.</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>Предоставляет функциональные возможности расчета запросов к конкретному источнику данных с известным типом данных.</summary>
      <typeparam name="T">Тип данных в источнике данных.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>Определяет методы создания и выполнения запросов, описываемых объектом <see cref="T:System.Linq.IQueryable" />.</summary>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.IQueryable`1" />, который позволяет вычислить запрос, представленный заданным деревом выражения.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, который позволяет вычислить запрос, представленный заданным деревом выражения.</returns>
      <param name="expression">Дерево выражения, представляющее запрос LINQ.</param>
      <typeparam name="TElement">Тип элементов возвращаемого объекта <see cref="T:System.Linq.IQueryable`1" />.</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.IQueryable" />, который позволяет вычислить запрос, представленный заданным деревом выражения.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable" />, который позволяет вычислить запрос, представленный заданным деревом выражения.</returns>
      <param name="expression">Дерево выражения, представляющее запрос LINQ.</param>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>Выполняет строго типизированный запрос, представленный заданным деревом выражения.</summary>
      <returns>Значение, получаемое в результате выполнения указанного запроса.</returns>
      <param name="expression">Дерево выражения, представляющее запрос LINQ.</param>
      <typeparam name="TResult">Тип значения, получаемого в результате выполнения запроса.</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>Выполняет запрос, представленный заданным деревом выражения.</summary>
      <returns>Значение, получаемое в результате выполнения указанного запроса.</returns>
      <param name="expression">Дерево выражения, представляющее запрос LINQ.</param>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary>Представляет коллекцию ключей, каждый из которых сопоставлен с одним или несколькими значениями.</summary>
      <typeparam name="TKey">Тип ключей объекта <see cref="T:System.Linq.Lookup`2" />.</typeparam>
      <typeparam name="TElement">Тип элементов для каждого значения <see cref="T:System.Collections.Generic.IEnumerable`1" /> в составе объекта <see cref="T:System.Linq.Lookup`2" />.</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary>Применяет функцию преобразования к каждому ключу и связанным с ним значениям и возвращает результаты.</summary>
      <returns>Коллекция, содержащая одно значение для каждой пары "ключ/коллекция значений", содержащейся в объекте <see cref="T:System.Linq.Lookup`2" />.</returns>
      <param name="resultSelector">Функция, проецирующая результирующее значение из каждого ключа и связанных с ним значений.</param>
      <typeparam name="TResult">Тип результирующих значений, возвращаемых функцией <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary>Определяет, существует ли указанный ключ в объекте <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>true, если <paramref name="key" /> обнаружен в <see cref="T:System.Linq.Lookup`2" />; в обратном случае false.</returns>
      <param name="key">Ключ, который требуется найти в объекте <see cref="T:System.Linq.Lookup`2" />.</param>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary>Возвращает число пар "ключ-значение", содержащихся в объекте <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>Число пар "ключ/коллекция значений", содержащихся в объекте <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary>Возвращает универсальный перечислитель, осуществляющий итерацию элементов объекта <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>Перечислитель для объекта <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary>Получает коллекцию значений по индексу, определенному указанным ключом.</summary>
      <returns>Коллекция значений по индексу, определенному указанным ключом.</returns>
      <param name="key">Ключ требуемой коллекции значений.</param>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, осуществляющий перебор элементов массива <see cref="T:System.Linq.Lookup`2" />.Данный класс не наследуется.</summary>
      <returns>Перечислитель для объекта <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary>Предоставляет набор статических (static) (общих (Shared) в Visual Basic) методов для выполнения запросов к структурам данных, реализующим интерфейс <see cref="T:System.Linq.IQueryable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary>Применяет к последовательности агрегатную функцию.</summary>
      <returns>Конечное агрегатное значение.</returns>
      <param name="source">Последовательность, для которой выполняется статистическая операция.</param>
      <param name="func">Агрегатная функция, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="func" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary>Применяет к последовательности агрегатную функцию.Указанное начальное значение используется в качестве исходного значения агрегатной операции.</summary>
      <returns>Конечное агрегатное значение.</returns>
      <param name="source">Последовательность, для которой выполняется статистическая операция.</param>
      <param name="seed">Начальное агрегатное значение.</param>
      <param name="func">Агрегатная функция, вызываемая для каждого элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Тип агрегатного значения.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="func" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary>Применяет к последовательности агрегатную функцию.Указанное начальное значение служит исходным значением для агрегатной операции, а указанная функция используется для выбора результирующего значения.</summary>
      <returns>Преобразованное конечное агрегатное значение.</returns>
      <param name="source">Последовательность, для которой выполняется статистическая операция.</param>
      <param name="seed">Начальное агрегатное значение.</param>
      <param name="func">Агрегатная функция, вызываемая для каждого элемента.</param>
      <param name="selector">Функция, преобразующая конечное агрегатное значение в результирующее значение.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">Тип агрегатного значения.</typeparam>
      <typeparam name="TResult">Тип результирующего значения.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="func" /> или <paramref name="selector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Проверяет, все ли элементы последовательности удовлетворяют условию.</summary>
      <returns>true, если каждый элемент исходной последовательности проходит проверку, определяемую указанным предикатом, или если последовательность пуста; в противном случае — значение false.</returns>
      <param name="source">Последовательность, элементы которой проверяются на соответствие условию.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary>Проверяет, содержит ли последовательность какие-либо элементы.</summary>
      <returns>true, если исходная последовательность содержит какие-либо элементы; в противном случае — значение false.</returns>
      <param name="source">Последовательность, проверяемая на наличие элементов.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Проверяет, удовлетворяет ли какой-либо элемент последовательности заданному условию.</summary>
      <returns>true, если хотя бы один элемент исходной последовательности проходит проверку, определяемую указанным предикатом; в противном случае — значение false.</returns>
      <param name="source">Последовательность, элементы которой проверяются на соответствие условию.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Преобразовывает универсальный объект <see cref="T:System.Collections.Generic.IEnumerable`1" /> в универсальный объект <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, представляющий входную последовательность.</returns>
      <param name="source">Последовательность, подлежащая преобразованию.</param>
      <typeparam name="TElement">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary>Преобразовывает объект <see cref="T:System.Collections.IEnumerable" /> в <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable" />, представляющий входную последовательность.</returns>
      <param name="source">Последовательность, подлежащая преобразованию.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> не реализует объект <see cref="T:System.Collections.Generic.IEnumerable`1" /> для некоторых типов <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Decimal" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Double" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Int32" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Int64" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Decimal" />, допускающих значения NULL.</summary>
      <returns>Среднее арифметическое значений последовательности или значение null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, допускающих значения NULL, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Double" />, допускающих значения NULL.</summary>
      <returns>Среднее арифметическое значений последовательности или значение null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, допускающих значения NULL, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Int32" />, допускающих значения NULL.</summary>
      <returns>Среднее арифметическое значений последовательности или значение null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, допускающих значения NULL, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Int64" />, допускающих значения NULL.</summary>
      <returns>Среднее арифметическое значений последовательности или значение null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, допускающих значения NULL, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Single" />, допускающих значения NULL.</summary>
      <returns>Среднее арифметическое значений последовательности или значение null, если исходная последовательность пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, допускающих значения NULL, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary>Вычисляет среднее для последовательности значений <see cref="T:System.Single" />.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, для которых вычисляется среднее.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Decimal" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, используемых для вычисления среднего.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Double" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Int32" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Int64" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Decimal" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности или null, если последовательность <paramref name="source" /> пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Double" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности или null, если последовательность <paramref name="source" /> пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Int32" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности или null, если последовательность <paramref name="source" /> пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Int64" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности или null, если последовательность <paramref name="source" /> пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Single" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее арифметическое значений последовательности или null, если последовательность <paramref name="source" /> пуста либо содержит только значения null.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Вычисляет среднее для последовательности значений типа <see cref="T:System.Single" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Среднее для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary>Преобразует элементы объекта <see cref="T:System.Linq.IQueryable" /> в заданный тип.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, который содержит все элементы исходной последовательности, преобразованные в заданный тип.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable" />, содержащий преобразуемые элементы.</param>
      <typeparam name="TResult">Тип, в который преобразуются элементы <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidCastException">Элемент последовательности не может быть приведен к типу <paramref name="TResult" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Объединяет две последовательности.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий объединенные элементы двух входных последовательностей.</returns>
      <param name="source1">Первая из объединяемых последовательностей.</param>
      <param name="source2">Последовательность, объединяемая с первой последовательностью.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> или <paramref name="source2" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary>Определяет, содержится ли указанный элемент в последовательности, используя компаратор проверки на равенство по умолчанию.</summary>
      <returns>true, если входная последовательность содержит элемент с указанным значением; в противном случае — значение false.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, в котором требуется найти элемент <paramref name="item" />.</param>
      <param name="item">Объект, который требуется найти в последовательности.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Определяет, содержит ли последовательность заданный элемент, используя указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>true, если входная последовательность содержит элемент с указанным значением; в противном случае — значение false.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, в котором требуется найти элемент <paramref name="item" />.</param>
      <param name="item">Объект, который требуется найти в последовательности.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает количество элементов в последовательности.</summary>
      <returns>Число элементов во входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Возвращает количество элементов указанной последовательности, удовлетворяющих определенному условию.</summary>
      <returns>Число элементов последовательности, удовлетворяющих условию функции предиката.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает элементы указанной последовательности или одноэлементную коллекцию, содержащую значение параметра типа по умолчанию, если последовательность пуста.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий значение default (<paramref name="TSource" />), если последовательность <paramref name="source" /> пуста; в противном случае возвращается <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, для которого возвращается значение по умолчанию, если последовательность пуста.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary>Возвращает элементы указанной последовательности или одноэлементную коллекцию, содержащую указанное значение, если последовательность пуста.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий значение <paramref name="defaultValue" />, если последовательность <paramref name="source" /> пуста; в противном случае возвращается <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, для которого возвращается указанное значение, если последовательность пуста.</param>
      <param name="defaultValue">Значение, возвращаемое в случае пустой последовательности.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает различающиеся элементы последовательности, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий различающиеся элементы из <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется удалить дубликаты.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Возвращает различающиеся элементы последовательности, используя для сравнения значений указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий различающиеся элементы из <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется удалить дубликаты.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="comparer" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Возвращает элемент по указанному индексу в последовательности.</summary>
      <returns>Элемент, находящийся в указанной позиции в <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить элемент.</param>
      <param name="index">Отсчитываемый от нуля индекс элемента, который требуется извлечь.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> меньше нуля.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Возвращает элемент по указанному индексу в последовательности или значение по умолчанию, если индекс вне допустимого диапазона.</summary>
      <returns>default (<paramref name="TSource" />), если позиция <paramref name="index" /> находится вне последовательности <paramref name="source" />; в противном случае — элемент, находящийся в указанной позиции в <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить элемент.</param>
      <param name="index">Отсчитываемый от нуля индекс элемента, который требуется извлечь.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Находит разность множеств, представленных двумя последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, являющийся разностью двух последовательностей как множеств.</returns>
      <param name="source1">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется извлечь элементы, отсутствующие в последовательности <paramref name="source2" />.</param>
      <param name="source2">Последовательность <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которой, входящие также в первую последовательность, не будут включены в возвращаемую последовательность.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> или <paramref name="source2" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Находит разность множеств, представленных двумя последовательностями, используя для сравнения значений указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, являющийся разностью двух последовательностей как множеств.</returns>
      <param name="source1">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется извлечь элементы, отсутствующие в последовательности <paramref name="source2" />.</param>
      <param name="source2">Последовательность <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которой, входящие также в первую последовательность, не будут включены в возвращаемую последовательность.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> или <paramref name="source2" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает первый элемент последовательности.</summary>
      <returns>Первый элемент в <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, первый элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Возвращает первый элемент последовательности, удовлетворяющий указанному условию.</summary>
      <returns>Первый элемент в <paramref name="source" />, прошедший проверку с помощью предиката <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">Ни один элемент не удовлетворяет условию <paramref name="predicate" />.-или-Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает первый элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</summary>
      <returns>default (<paramref name="TSource" />), если объект <paramref name="source" /> пуст; в противном случае — первый элемент в <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, первый элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Возвращает первый элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если ни одного такого элемента не найдено.</summary>
      <returns>default(<paramref name="TSource" />), если объект <paramref name="source" /> пуст или если ни один его элемент не прошел проверку, определенную предикатом <paramref name="predicate" />; в противном случае — первый элемент в <paramref name="source" />, прошедший проверку, определенную предикатом <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа.</summary>
      <returns>Объект IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; в C# или IQueryable(Of IGrouping(Of TKey, TSource)) в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит последовательность объектов и ключ.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и сравнивает ключи с помощью указанного компаратора.</summary>
      <returns>Объект IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; в C# или IQueryable(Of IGrouping(Of TKey, TSource)) в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит последовательность объектов и ключ.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="comparer" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и проецирует элементы каждой группы с помощью указанной функции.</summary>
      <returns>Объект IIQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; в C# или IQueryable(Of IGrouping(Of TKey, TElement)) в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит последовательность объектов типа <paramref name="TElement" /> и ключ.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом в объекте <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов в каждом объекте <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="elementSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы последовательности и проецирует элементы каждой группы с помощью указанной функции.Значения ключей сравниваются с использованием заданного компаратора.</summary>
      <returns>Объект IIQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; в C# или IQueryable(Of IGrouping(Of TKey, TElement)) в Visual Basic, где каждый объект <see cref="T:System.Linq.IGrouping`2" /> содержит последовательность объектов типа <paramref name="TElement" /> и ключ.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом в объекте <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов в каждом объекте <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" />, <paramref name="elementSelector" />, <paramref name="comparer" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.Элементы каждой группы проецируются с помощью указанной функции.</summary>
      <returns>Объект T:System.Linq.IQueryable`1 с аргументом типа <paramref name="TResult" />, каждый элемент которого представляет проекцию группы и ее ключа.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом в объекте <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов в каждом объекте <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" />, <paramref name="elementSelector" />, <paramref name="resultSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.Ключи сравниваются с помощью указанного компаратора, элементы каждой группы проецируются с помощью указанной функции.</summary>
      <returns>Объект T:System.Linq.IQueryable`1 с аргументом типа <paramref name="TResult" />, каждый элемент которого представляет проекцию группы и ее ключа.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="elementSelector">Функция, сопоставляющая каждый исходный элемент с элементом в объекте <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип элементов в каждом объекте <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" />, <paramref name="elementSelector" />, <paramref name="resultSelector" /> или <paramref name="comparer" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.</summary>
      <returns>Объект T:System.Linq.IQueryable`1 с аргументом типа <paramref name="TResult" />, каждый элемент которого представляет проекцию группы и ее ключа.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="resultSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Группирует элементы последовательности в соответствии с заданной функцией селектора ключа и создает результирующее значение для каждой группы и ее ключа.Ключи сравниваются с использованием заданного компаратора.</summary>
      <returns>Объект T:System.Linq.IQueryable`1 с аргументом типа <paramref name="TResult" />, каждый элемент которого представляет проекцию группы и ее ключа.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого следует сгруппировать.</param>
      <param name="keySelector">Функция, извлекающая ключ для каждого элемента.</param>
      <param name="resultSelector">Функция для создания результирующего значения для каждой группы.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Тип результирующего значения, возвращаемого <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" />, <paramref name="resultSelector" />, <paramref name="comparer" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary>Устанавливает корреляцию между элементами двух последовательностей на основе равенства ключей и группирует результаты.Для сравнения ключей используется компаратор проверки на равенство по умолчанию.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате соединения двух последовательностей с группированием.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Устанавливает корреляцию между элементами двух последовательностей на основе равенства ключей и группирует результаты.Для сравнения ключей используется указанный объект <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате соединения двух последовательностей с группированием.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция, создающая результирующий элемент для элемента первой последовательности и коллекции соответствующих элементов второй последовательности.</param>
      <param name="comparer">Компаратор, используемый для хэширования и сравнения ключей.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Находит пересечение множеств, представленных двумя последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <returns>Последовательность, представляющая собой пересечение двух заданных последовательностей как множеств.</returns>
      <param name="source1">Последовательность, из которой возвращаются различающиеся элементы, входящие также в <paramref name="source2" />.</param>
      <param name="source2">Последовательность, из которой возвращаются различающиеся элементы, входящие также в первую последовательность.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> или <paramref name="source2" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Находит пересечение двух последовательностей, используя для сравнения значений указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, являющийся пересечением двух последовательностей как множеств.</returns>
      <param name="source1">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого извлекаются различающиеся элементы, входящие также в последовательность <paramref name="source2" />.</param>
      <param name="source2">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, из которого извлекаются различающиеся элементы, входящие также в первую последовательность.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> или <paramref name="source2" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>Устанавливает корреляцию между элементами двух последовательностей на основе сопоставления ключей.Для сравнения ключей используется компаратор проверки на равенство по умолчанию.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате внутреннего соединения двух последовательностей.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция для создания результирующего элемента для пары соответствующих элементов.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Устанавливает корреляцию между элементами двух последовательностей на основе сопоставления ключей.Для сравнения ключей используется указанный объект <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, который содержит элементы типа <paramref name="TResult" />, полученные в результате внутреннего соединения двух последовательностей.</returns>
      <param name="outer">Первая последовательность для соединения.</param>
      <param name="inner">Последовательность, соединяемая с первой последовательностью.</param>
      <param name="outerKeySelector">Функция, извлекающая ключ соединения из каждого элемента первой последовательности.</param>
      <param name="innerKeySelector">Функция, извлекающая ключ соединения из каждого элемента второй последовательности.</param>
      <param name="resultSelector">Функция для создания результирующего элемента для пары соответствующих элементов.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для хэширования и сравнения ключей.</param>
      <typeparam name="TOuter">Тип элементов первой последовательности.</typeparam>
      <typeparam name="TInner">Тип элементов второй последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей, возвращаемых функциями селектора ключа.</typeparam>
      <typeparam name="TResult">Тип результирующих элементов.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKeySelector" />, <paramref name="innerKeySelector" /> или <paramref name="resultSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает последний элемент последовательности.</summary>
      <returns>Значение, находящееся в последней позиции последовательности <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, последний элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Возвращает последний элемент последовательности, удовлетворяющий указанному условию.</summary>
      <returns>Последний элемент в <paramref name="source" />, прошедший проверку, заданную предикатом <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">Ни один элемент не удовлетворяет условию <paramref name="predicate" />.-или-Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает последний элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</summary>
      <returns>default (<paramref name="TSource" />), если последовательность <paramref name="source" /> пуста; в противном случае — последний элемент в <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, последний элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Возвращает последний элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если ни одного такого элемента не найдено.</summary>
      <returns>default (<paramref name="TSource" />), если последовательность <paramref name="source" /> пуста или ни один ее элемент не прошел проверку функцией предиката; в противном случае — последний элемент в <paramref name="source" />, прошедший проверку функцией предиката.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить элемент.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает значение типа <see cref="T:System.Int64" />, представляющее общее число элементов в последовательности.</summary>
      <returns>Число элементов в последовательности <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Число элементов превышает <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Возвращает значение типа <see cref="T:System.Int64" />, представляющее число элементов последовательности, удовлетворяющих заданному условию.</summary>
      <returns>Число элементов последовательности <paramref name="source" />, удовлетворяющих условию функции предиката.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
      <exception cref="T:System.OverflowException">Число соответствующих элементов превышает <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает максимальное значение для универсального интерфейса <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимум.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Вызывает функцию проекции для каждого элемента универсального интерфейса <see cref="T:System.Linq.IQueryable`1" /> и возвращает максимальное результирующее значение.</summary>
      <returns>Максимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется максимум.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого функцией, заданной параметром <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает минимальное значение универсального интерфейса <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимум.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Вызывает функцию проекции для каждого элемента универсального интерфейса <see cref="T:System.Linq.IQueryable`1" /> и возвращает минимальное результирующее значение.</summary>
      <returns>Минимальное значение в последовательности.</returns>
      <param name="source">Последовательность значений, для которой определяется минимум.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого функцией, заданной параметром <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary>Выполняет фильтрацию элементов объекта <see cref="T:System.Linq.IQueryable" /> по заданному типу.</summary>
      <returns>Коллекция элементов последовательности <paramref name="source" />, имеющих тип <paramref name="TResult" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable" />, элементы которого следует фильтровать.</param>
      <typeparam name="TResult">Тип, по которому фильтруются элементы последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Сортирует элементы последовательности в порядке возрастания ключа.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, элементы которого отсортированы по ключу.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Сортирует элементы последовательности в порядке возрастания с использованием указанного компаратора.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, элементы которого отсортированы по ключу.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="comparer" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Сортирует элементы последовательности в порядке убывания ключа.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Сортирует элементы последовательности в порядке убывания с использованием указанного компаратора.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Последовательность значений, которые следует упорядочить.</param>
      <param name="keySelector">Функция, извлекающая ключ из элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="comparer" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary>Изменяет порядок элементов последовательности на противоположный.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого соответствуют элементам входной последовательности, но следуют в обратном порядке.</returns>
      <param name="source">Последовательность значений, которые следует расставить в обратном порядке.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Проецирует каждый элемент последовательности в новую форму.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого получены в результате вызова функции проекции для каждого элемента в <paramref name="source" />.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого функцией, заданной параметром <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary>Проецирует каждый элемент последовательности в новую форму, добавляя индекс элемента.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого получены в результате вызова функции проекции для каждого элемента в <paramref name="source" />.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого функцией, заданной параметром <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" /> и вызывает функцию селектора результата для каждого его элемента.Результирующие значения из всех промежуточных последовательностей возвращаются объединенными в одну одномерную последовательность.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого получены в результате вызова функции проекции "один ко многим" <paramref name="collectionSelector" /> для каждого элемента последовательности <paramref name="source" />  и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующего ему элемента последовательности <paramref name="source" /> с результирующим элементом.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="collectionSelector">Функция проекции, применяемая к каждому элементу входной последовательности.</param>
      <param name="resultSelector">Функция проекции, применяемая к каждому элементу каждой промежуточной последовательности.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">Тип промежуточных элементов, собранных функцией, заданной параметром <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">Тип элементов результирующей последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="collectionSelector" /> или <paramref name="resultSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" /> и объединяет результирующие последовательности в одну последовательность.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого получены в результате вызова функции проекции "один ко многим" для каждого элемента входной последовательности.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип элементов последовательности, возвращаемых функцией, заданной параметром <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, включающий индекс исходного элемента, на основе которого он был создан.Для каждого элемента каждой промежуточной последовательности вызывается функция селектора результата, и результирующие значения возвращаются объединенными в одну одномерную последовательность.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого получены в результате вызова функции проекции "один ко многим" <paramref name="collectionSelector" /> для каждого элемента последовательности <paramref name="source" />  и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующего ему элемента последовательности <paramref name="source" /> с результирующим элементом.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="collectionSelector">Функция проекции, применяемая к каждому элементу входной последовательности; второй параметр этой функции представляет индекс исходного элемента.</param>
      <param name="resultSelector">Функция проекции, применяемая к каждому элементу каждой промежуточной последовательности.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">Тип промежуточных элементов, собранных функцией, заданной параметром <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">Тип элементов результирующей последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="collectionSelector" /> или <paramref name="resultSelector" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" /> и объединяет результирующие последовательности в одну последовательность.Индекс каждого элемента исходной последовательности используется в проецированной форме этого элемента.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого получены в результате вызова функции проекции "один ко многим" для каждого элемента входной последовательности.</returns>
      <param name="source">Последовательность значений, которые следует проецировать.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу; второй параметр этой функции представляет индекс исходного элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип элементов последовательности, возвращаемых функцией, заданной параметром <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Определяет, совпадают ли две последовательности, используя для сравнения элементов компаратор проверки на равенство по умолчанию.</summary>
      <returns>Значение true, если у двух исходных последовательностей одинаковая длина и соответствующие элементы совпадают; в противном случае — значение false.</returns>
      <param name="source1">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого сравниваются с элементами последовательности <paramref name="source2" />.</param>
      <param name="source2">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого сравниваются с элементами первой последовательности.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> или <paramref name="source2" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Определяет, совпадают ли две последовательности, используя для сравнения элементов указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Значение true, если у двух исходных последовательностей одинаковая длина и соответствующие элементы совпадают; в противном случае — значение false.</returns>
      <param name="source1">Объект <see cref="T:System.Linq.IQueryable`1" />, элементы которого сравниваются с элементами последовательности <paramref name="source2" />.</param>
      <param name="source2">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого сравниваются с элементами первой последовательности.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения элементов.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> или <paramref name="source2" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает единственный элемент последовательности и генерирует исключение, если число элементов последовательности отлично от 1.</summary>
      <returns>Единственный элемент входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, единственный элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> имеет более одного элемента.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Возвращает единственный элемент последовательности, удовлетворяющий заданному условию, и генерирует исключение, если таких элементов больше одного.</summary>
      <returns>Отдельный элемент входной последовательности, удовлетворяющий условию предиката <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить единственный элемент.</param>
      <param name="predicate">Функция для проверки элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
      <exception cref="T:System.InvalidOperationException">Ни один элемент не удовлетворяет условию <paramref name="predicate" />.-или-Условию предиката <paramref name="predicate" /> удовлетворяет более одного элемента.-или-Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает единственный элемент последовательности или значение по умолчанию, если последовательность пуста; если в последовательности более одного элемента, генерируется исключение.</summary>
      <returns>Отдельный элемент входной последовательности или default (<paramref name="TSource" />), если в последовательности нет элементов.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, единственный элемент которого требуется возвратить.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Возвращает единственный элемент последовательности, удовлетворяющий заданному условию, или значение по умолчанию, если такого элемента не существует; если условию удовлетворяет более одного элемента, генерируется исключение.</summary>
      <returns>Отдельный элемент входной последовательности, удовлетворяющий условию в <paramref name="predicate" />, или default (<paramref name="TSource" />), если такой элемент не найден.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить единственный элемент.</param>
      <param name="predicate">Функция для проверки элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Пропускает заданное число элементов в последовательности и возвращает остальные элементы.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы из входной последовательности, начиная с указанного индекса.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить элементы.</param>
      <param name="count">Число элементов, пропускаемых перед возвращением остальных элементов.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Пропускает элементы в последовательности, пока они удовлетворяют заданному условию, и затем возвращает оставшиеся элементы.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий цепочку элементов последовательности <paramref name="source" />, начиная с первого элемента, который не прошел проверку, заданную предикатом <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить элементы.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Пропускает элементы в последовательности, пока они удовлетворяют заданному условию, и затем возвращает оставшиеся элементы.Индекс элемента используется в логике функции предиката.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий цепочку элементов последовательности <paramref name="source" />, начиная с первого элемента, который не прошел проверку, заданную предикатом <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, из которого требуется возвратить элементы.</param>
      <param name="predicate">Функция, применяемая к каждому элементу для проверки условия; второй параметр этой функции представляет индекс исходного элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Decimal" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Double" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Int32" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Int64" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Decimal" />, допускающей значения NULL.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" /> с поддержкой значения NULL, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Double" />, допускающей значения NULL.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" /> с поддержкой значения NULL, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Int32" />, допускающей значения NULL.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" /> с поддержкой значения NULL, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Int64" />, допускающей значения NULL.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" /> с поддержкой значения NULL, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Single" />, допускающей значения NULL.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" /> с поддержкой значения NULL, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary>Вычисляет сумму для последовательности значений <see cref="T:System.Single" />.</summary>
      <returns>Сумма последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, для которых вычисляется сумма.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Decimal" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Double" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Int32" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Int64" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Decimal" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Double" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Int32" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Int64" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
      <exception cref="T:System.OverflowException">Сумма больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Single" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Вычисляет сумму для последовательности значений типа <see cref="T:System.Single" />, получаемых в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Сумма проецированных значений.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="selector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Возвращает указанное число подряд идущих элементов с начала последовательности.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий заданное число элементов с начала последовательности <paramref name="source" />..</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="count">Число возвращаемых элементов.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Возвращает цепочку элементов последовательности, удовлетворяющих указанному условию.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы входной последовательности до первого элемента, который не прошел проверку, заданную предикатом <paramref name="predicate" />.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Возвращает цепочку элементов последовательности, удовлетворяющих указанному условию.Индекс элемента используется в логике функции предиката.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы входной последовательности до первого элемента, который не прошел проверку, заданную предикатом <paramref name="predicate" />.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="predicate">Функция, применяемая к каждому элементу для проверки условия; второй параметр этой функции представляет индекс элемента в исходной последовательности.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Выполняет дополнительное упорядочение элементов последовательности в порядке возрастания ключа.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, элементы которого отсортированы по ключу.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Выполняет дополнительное упорядочение элементов последовательности в порядке возрастания с использованием указанного компаратора.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, элементы которого отсортированы по ключу.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="comparer" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Выполняет дополнительное упорядочение элементов последовательности в порядке убывания ключа.</summary>
      <returns>Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, элементы которого отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией, заданной параметром <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="keySelector" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Выполняет дополнительное упорядочение элементов последовательности в порядке убывания с использованием указанного компаратора.</summary>
      <returns>Коллекция, элементы которой отсортированы по ключу в порядке убывания.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IOrderedQueryable`1" />, содержащий сортируемые элементы.</param>
      <param name="keySelector">Функция, извлекающая ключ из каждого элемента.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращаемого функцией <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> или <paramref name="comparer" /> равен null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Находит объединение множеств, представленных двумя последовательностями, используя для сравнения значений компаратор проверки на равенство по умолчанию.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, который содержит элементы, имеющиеся в обеих входных последовательностях, кроме дубликатов.</returns>
      <param name="source1">Последовательность, различающиеся элементы которой образуют первое множество для операции объединения.</param>
      <param name="source2">Последовательность, различающиеся элементы которой образуют второе множество для операции объединения.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> или <paramref name="source2" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Находит объединение множеств, представленных двумя последовательностями, используя указанный компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, который содержит элементы, имеющиеся в обеих входных последовательностях, кроме дубликатов.</returns>
      <param name="source1">Последовательность, различающиеся элементы которой образуют первое множество для операции объединения.</param>
      <param name="source2">Последовательность, различающиеся элементы которой образуют второе множество для операции объединения.</param>
      <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IEqualityComparer`1" />, используемый для сравнения значений.</param>
      <typeparam name="TSource">Тип элементов входных последовательностей.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> или <paramref name="source2" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Выполняет фильтрацию последовательности значений на основе заданного предиката.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы входной последовательности, которые удовлетворяют условию, заданному предикатом <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, подлежащий фильтрации.</param>
      <param name="predicate">Функция для проверки каждого элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Выполняет фильтрацию последовательности значений на основе заданного предиката.Индекс каждого элемента используется в логике функции предиката.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы входной последовательности, которые удовлетворяют условию, заданному предикатом <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, подлежащий фильтрации.</param>
      <param name="predicate">Функция, применяемая к каждому элементу для проверки условия; второй параметр этой функции представляет индекс элемента в исходной последовательности.</param>
      <typeparam name="TSource">Тип элементов <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> или <paramref name="predicate" /> равняется null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Объединяет две последовательности, используя указанную функцию предиката.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий объединенные элементы двух входных последовательностей.</returns>
      <param name="source1">Первая последовательность для объединения.</param>
      <param name="source2">Вторая последовательность для объединения.</param>
      <param name="resultSelector">Функция, которая определяет, как объединить элементы двух последовательностей.</param>
      <typeparam name="TFirst">Тип элементов первой входной последовательности.</typeparam>
      <typeparam name="TSecond">Тип элементов второй входной последовательности.</typeparam>
      <typeparam name="TResult">Тип элементов результирующей последовательности.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> или <paramref name="source2 " /> равняется null.</exception>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>Представляет выражение, содержащее бинарный оператор.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>Получает значение, которое указывает, можно ли сократить узел дерева выражений.</summary>
      <returns>Значение true, если узел дерева выражений можно сократить; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>Получает функцию преобразования типа, используемую операцией преобразования или составного присваивания.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, представляющий тип функции преобразования.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>Возвращает значение, указывающее, представляет ли узел дерева выражения ликвидированный вызов оператора.</summary>
      <returns>true, если узел представляет удаленный вызов; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>Возвращает значение, указывающее, представляет ли узел дерева выражения ликвидированный вызов оператора, тип возврата которого удален для типа со значением NULL.</summary>
      <returns>true, если тип возврата оператора удален до типа со значением NULL; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>Получает левый операнд бинарной операции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, который предоставляет левый операнд бинарной операции.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>Получает реализацию метода для бинарной операции.</summary>
      <returns>Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>Сокращает узел бинарных выражений до более простого выражения.</summary>
      <returns>Сокращенное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>Получает правый операнд бинарной операции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, который предоставляет правый операнд бинарной операции.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="left">Свойство <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> результата. </param>
      <param name="conversion">Свойство <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> результата.</param>
      <param name="right">Свойство <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> результата. </param>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>Представляет блок, содержащий последовательность выражений, в которых могут быть определены переменные.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>Получает выражения в этом блоке.</summary>
      <returns>Доступная только для чтения коллекция, содержащая все выражения данного блока.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>Возвращает тип узла данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Свойство <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>Получает последнее выражение в этом блоке.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий последнее выражение в этом блоке.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.BlockExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="variables">Свойство <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> результата. </param>
      <param name="expressions">Свойство <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> результата. </param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>Получает переменные, определенные в данном блоке.</summary>
      <returns>Доступная только для чтения коллекция, содержащая все переменные данного блока.</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>Представляет оператор catch в блоке try.</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>Получает тело блока catch.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока catch.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>Получает тело фильтра <see cref="T:System.Linq.Expressions.CatchBlock" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело фильтра <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>Получает тип исключений <see cref="T:System.Exception" />, перехватываемых этим обработчиком.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип исключений <see cref="T:System.Exception" />, перехватываемых этим обработчиком.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>Возвращает объект <see cref="T:System.String" />, который представляет текущий объект <see cref="T:System.Object" />.</summary>
      <returns>Возвращает <see cref="T:System.String" />, который представляет текущий <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="variable">Свойство <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> результата.</param>
      <param name="filter">Свойство <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> результата.</param>
      <param name="body">Свойство <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> результата.</param>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>Получает ссылку на объект <see cref="T:System.Exception" />, перехватываемый этим обработчиком.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ParameterExpression" />, который представляет ссылку на объект <see cref="T:System.Exception" />, перехватываемый этим обработчиком.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>Представляет выражение, содержащее условный оператор.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>Получает выражение для выполнения, если результат проверки вычислен как false.</summary>
      <returns>Свойство <see cref="T:System.Linq.Expressions.Expression" />, представляющее выражение для выполнения, если значение проверки вычислено как false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>Получает выражение для выполнения, если результат проверки вычислен как true.</summary>
      <returns>Свойство <see cref="T:System.Linq.Expressions.Expression" />, представляющее выражение для выполнения, если значение проверки вычислено как true.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>Возвращает тип узла данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Свойство <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>Получает проверку условной операции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, который предоставляет проверку условной операции.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="test">Свойство <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> результата.</param>
      <param name="ifTrue">Свойство <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> результата.</param>
      <param name="ifFalse">Свойство <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>Представляет выражение, содержащее постоянное значение.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>Возвращает тип узла для данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Свойство <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>Возвращает значение постоянного выражения.</summary>
      <returns>Значение <see cref="T:System.Object" /> значению представленного выражения.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>Выпускает или очищает точку следования для сведений отладки.Это позволяет отладчику выделять при отладке правильный исходный код.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, представляющий исходный файл.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, представляющий исходный файл.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>Получает конечный столбец данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Номер конечного столбца кода, с помощью которого было создано заключенное в оболочку выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>Получает конечный столбец данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Номер конечной строки кода, с помощью которого было создано заключенное в оболочку выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>Получает значение, указывающее, предназначено ли выражение <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> для очистки точки следования.</summary>
      <returns>True, если выражение <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> предназначено для очистки точки следования; в противном случае — выражение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>Получает начальный столбец данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Номер начального столбца кода, с помощью которого было создано заключенное в оболочку выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>Получает начальный столбец данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Номер начальной строки кода, с помощью которого было создано заключенное в оболочку выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>Представляет значение по умолчанию для типа или пустое выражение.</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>Возвращает тип узла данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Свойство <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>Представляет динамическую операцию.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>Получает аргументы для динамической операции.</summary>
      <returns>Доступная только для чтения коллекция, содержащая аргументы динамической операции.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>Получает объект <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, который определят поведение динамического сайта во время выполнения.</summary>
      <returns>Объект <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, который определят поведение динамического сайта во время выполнения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>Получает тип делегата, используемого объектом <see cref="T:System.Runtime.CompilerServices.CallSite" />.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип делегата, используемого объектом <see cref="T:System.Runtime.CompilerServices.CallSite" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arguments">Аргументы динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <param name="arg2">Третий аргумент динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <param name="arg2">Третий аргумент динамической операции.</param>
      <param name="arg3">Четвертый аргумент динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arguments">Аргументы динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arguments">Аргументы динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и одного аргумента.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arg0">Аргумент динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и двух аргументов.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и трех аргументов.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <param name="arg2">Третий аргумент динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и четырех аргументов.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <param name="arg2">Третий аргумент динамической операции.</param>
      <param name="arg3">Четвертый аргумент динамической операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arguments">Аргументы динамической операции.</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>Возвращает тип узла данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Свойство <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.DynamicExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Сравнивает значение, переданное в параметр arguments, со свойством Arguments текущего экземпляра DynamicExpression.Если значения равны, возвращается текущий экземпляр.Если они не равны, возвращается новый экземпляр DynamicExpression, идентичный текущему за тем исключением, что свойство Arguments у него будет равно параметру arguments.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="arguments">Свойство <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary>Представляет метод просмотра или перезаписи деревьев выражений.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.DynamicExpression" />.</summary>
      <returns>Измененное выражение <see cref="T:System.Linq.Expressions.Expression" /> в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>Представляет инициализатор отдельного элемента коллекции <see cref="T:System.Collections.IEnumerable" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>Получает метод экземпляра, который используется для добавления элемента в коллекцию <see cref="T:System.Collections.IEnumerable" />.</summary>
      <returns>Объект <see cref="T:System.Reflection.MethodInfo" />, который представляет метод экземпляра, добавляющий элемент в коллекцию.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>Получает коллекцию аргументов, которые передаются методу, добавляющему элемент в коллекцию <see cref="T:System.Collections.IEnumerable" />.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих аргументы для метода, добавляющего элемент к коллекции.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>Возвращает текстовое представление объекта <see cref="T:System.Linq.Expressions.ElementInit" />.</summary>
      <returns>Текстовое представление <see cref="T:System.Linq.Expressions.ElementInit" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="arguments">Свойство <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>Предоставляет базовый класс, производными от которого являются классы, представляющие узлы дерева выражения.Также содержит static (Shared в Visual Basic) фабричные методы для создания различных типов узлов.Этот класс является abstract.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>Создает новый экземпляр класса <see cref="T:System.Linq.Expressions.Expression" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <param name="nodeType">Значение <see cref="T:System.Linq.Expressions.ExpressionType" /> для установки в качестве типа узла.</param>
      <param name="type">Тип <see cref="P:System.Linq.Expressions.Expression.Type" /> данного объекта <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Add" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор сложения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, не содержащую проверку переполнения.Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Add" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор сложения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания сложения, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания сложения, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания сложения, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию арифметического сложения, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор сложения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию арифметического сложения, содержащую проверку переполнения.Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор сложения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию AND.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.And" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Побитовый оператор AND не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию AND.Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.And" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и побитовый оператор AND не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию AND, вычисляющую второй операнд, только если первый операнд имеет значение true.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Побитовый оператор AND не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.-или-Типы <paramref name="left" />.Type и <paramref name="right" />.Type являются разными логическими типами.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию AND, вычисляющую второй операнд, только если первый операнд имеет значение true.Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и побитовый оператор AND не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.-или-Метод <paramref name="method" /> равен null, а типы <paramref name="left" />.Type и <paramref name="right" />.Type являются разными логическими типами.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию присваивания AND.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию присваивания AND.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию присваивания AND.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" /> для доступа к многомерному массиву.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="array">Выражение, представляющее многомерный массив.</param>
      <param name="indexes">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий выражения для индексации массива.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" /> для доступа к массиву.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="array">Выражение, представляющее индексируемый массив.</param>
      <param name="indexes">Массив, содержащий выражения для индексации массива.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее применение оператора индекса массива к массиву с рангом более одного.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, а для свойств <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> заданы указанные значения.</returns>
      <param name="array">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />.</param>
      <param name="indexes">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="array" /> или <paramref name="indexes" /> — null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />Тип .Type не представляет тип массива.-или-Ранг типа <paramref name="array" />.Type не соответствует количеству элементов в <paramref name="indexes" />.-или-Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов <paramref name="indexes" /> не представляет тип <see cref="T:System.Int32" /> .</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее применение оператора индекса массива к массиву ранга один.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="array">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="index">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="array" /> или <paramref name="index" /> — null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />Тип .Type не представляет тип массива.-или-<paramref name="array" />Тип .Type представляет тип массива, ранг которого не равен 1.-или-Тип <paramref name="index" />.Type не представляет тип <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее применение оператора индекса массива к многомерному массиву.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, а для свойств <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> заданы указанные значения.</returns>
      <param name="array">Массив экземпляров <see cref="T:System.Linq.Expressions.Expression" />, которые являются индексами для операции удаления индекса.</param>
      <param name="indexes">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, используемых для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="array" /> или <paramref name="indexes" /> — null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />Тип .Type не представляет тип массива.-или-Ранг типа <paramref name="array" />.Type не соответствует количеству элементов в <paramref name="indexes" />.-или-Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов <paramref name="indexes" /> не представляет тип <see cref="T:System.Int32" /> .</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> для получения длины одномерного массива.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" />, и свойство <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, равное <paramref name="array" />.</returns>
      <param name="array">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="array" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />Тип .Type не представляет тип массива.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Assign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberAssignment" />, который представляет инициализацию поля или свойства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberAssignment" /> со свойством <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равным <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, и свойствами <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />, для которых заданы указанные значения.</returns>
      <param name="member">Объект <see cref="T:System.Reflection.MemberInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="member" /> или <paramref name="expression" /> — null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> не представляет поле или свойство.-или-Свойство, представленное <paramref name="member" />, не обладает методом доступа set.-или-Тип <paramref name="expression" />.Type не может быть назначен типу поля или свойства, который представляет <paramref name="member" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberAssignment" />, который представляет инициализацию элемента с помощью метода доступа свойства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberAssignment" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, свойству <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> присвоено значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство, доступ к которому осуществляется в <paramref name="propertyAccessor" />, и свойство <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />, для которого задано значение <paramref name="expression" />.</returns>
      <param name="propertyAccessor">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа свойства.</param>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="propertyAccessor" /> или <paramref name="expression" /> — null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> не представляет метод доступа свойства.-или-Свойство, представленное <paramref name="propertyAccessor" />, не обладает методом доступа set.-или-Тип <paramref name="expression" />.Type не может быть назначен типу поля или свойства, который представляет <paramref name="member" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий заданные выражения и не содержащий переменных.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="expressions">Выражения в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий указанные переменные и выражения.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="variables">Переменные в блоке.</param>
      <param name="expressions">Выражения в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий указанные переменные и выражения.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="variables">Переменные в блоке.</param>
      <param name="expressions">Выражения в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий два выражения и не содержащий переменных.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">Первое выражение в блоке.</param>
      <param name="arg1">Второе выражение в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий три выражения и не содержащий переменных.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">Первое выражение в блоке.</param>
      <param name="arg1">Второе выражение в блоке.</param>
      <param name="arg2">Третье выражение в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий четыре выражения и не содержащий переменных.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">Первое выражение в блоке.</param>
      <param name="arg1">Второе выражение в блоке.</param>
      <param name="arg2">Третье выражение в блоке.</param>
      <param name="arg3">Четвертое выражение в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий пять выражений и не содержащий переменных.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">Первое выражение в блоке.</param>
      <param name="arg1">Второе выражение в блоке.</param>
      <param name="arg2">Третье выражение в блоке.</param>
      <param name="arg3">Четвертое выражение в блоке.</param>
      <param name="arg4">Пятое выражение в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий заданные выражения и не содержащий переменных.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="expressions">Выражения в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий данные выражения, не содержащий переменных и имеющий конкретный тип результатов.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">Тип результата блока.</param>
      <param name="expressions">Выражения в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий указанные переменные и выражения.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">Тип результата блока.</param>
      <param name="variables">Переменные в блоке.</param>
      <param name="expressions">Выражения в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий указанные переменные и выражения.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">Тип результата блока.</param>
      <param name="variables">Переменные в блоке.</param>
      <param name="expressions">Выражения в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий данные выражения, не содержащий переменных и имеющий конкретный тип результатов.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">Тип результата блока.</param>
      <param name="expressions">Выражения в блоке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор break.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, а при переходе целевой метке передается значение NULL.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор break.Можно указать значение, передаваемое метке при переходе.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, а при переходе целевой метке передается значение <paramref name="value" />.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор break с указанным типом.Можно указать значение, передаваемое метке при переходе.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />, а при переходе целевой метке передается значение <paramref name="value" />.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор break с указанным типом.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, а свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода экземпляра без аргументов.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, а для свойств <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> заданы указанные значения.</returns>
      <param name="instance">Объект <see cref="T:System.Linq.Expressions.Expression" />, задающий экземпляр для вызова метода экземпляра (передачи значения null для static (Shared в Visual Basic) метода.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="method" /> имеет значение null.-или-Параметр <paramref name="instance" /> равен null, и <paramref name="method" /> представляет метод экземпляра.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="instance" />.Type не назначается объявляемому типу метода, представленному параметром <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов метода, принимающего аргументы.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, а для свойств <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> заданы указанные значения.</returns>
      <param name="instance">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> (передать null для static (Shared в Visual Basic) метода).</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arguments">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="method" /> имеет значение null.-или-Параметр <paramref name="instance" /> равен null, и <paramref name="method" /> представляет метод экземпляра.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="instance" />.Type не назначается объявляемому типу метода, представленному параметром <paramref name="method" />.-или-Количество элементов в <paramref name="arguments" /> не равно количеству параметров для метода, представленного <paramref name="method" />.-или-Один или несколько элементов <paramref name="arguments" /> нельзя назначить для соответствующего параметра для метода, представленного параметром <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов статического метода, принимающего два аргумента.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, а для свойств <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> заданы указанные значения.</returns>
      <param name="instance">Объект <see cref="T:System.Linq.Expressions.Expression" />, задающий экземпляр для вызова экземпляра.(для статического метода (Shared в Visual Basic) передается NULL).</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий целевой метод.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <param name="arg1">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов метода, принимающего аргументы.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, а для свойств <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> заданы указанные значения.</returns>
      <param name="instance">Объект <see cref="T:System.Linq.Expressions.Expression" />, задающий экземпляр для вызова экземпляра.(для статического метода (Shared в Visual Basic) передается NULL).</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий целевой метод.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <param name="arg1">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</param>
      <param name="arg2">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов метода, принимающего аргументы.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, а для свойств <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> заданы указанные значения.</returns>
      <param name="instance">Объект <see cref="T:System.Linq.Expressions.Expression" />, задающий экземпляр для вызова метода экземпляра (передачи значения null для static (Shared в Visual Basic) метода.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, используемых для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="method" /> имеет значение null.-или-Параметр <paramref name="instance" /> равен null, и <paramref name="method" /> представляет метод экземпляра.-или-<paramref name="arguments" /> не равно null, а один или несколько элементов равно null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="instance" />.Type не назначается объявляемому типу метода, представленному параметром <paramref name="method" />.-или-Количество элементов в <paramref name="arguments" /> не равно количеству параметров для метода, представленного <paramref name="method" />.-или-Один или несколько элементов <paramref name="arguments" /> нельзя назначить для соответствующего параметра для метода, представленного параметром <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов метода экземпляра, вызывая соответствующий фабричный метод.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, равное <paramref name="instance" />, для <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, задано значение <see cref="T:System.Reflection.MethodInfo" />, представляющее указанный метод экземпляра, а для указанных аргументов заданы значения <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</returns>
      <param name="instance">Объект <see cref="T:System.Linq.Expressions.Expression" />, значение свойства <see cref="P:System.Linq.Expressions.Expression.Type" /> которого будет искать конкретный метод.</param>
      <param name="methodName">Имя метода.</param>
      <param name="typeArguments">Массив объектов <see cref="T:System.Type" />, указывающий тип параметров универсального метода.Если methodName задает неуниверсальный метод, данный аргумент должен иметь значение NULL.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, который представляет аргументы для метода.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="instance" /> или <paramref name="methodName" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Отсутствует метод с именем <paramref name="methodName" />, параметры типа которого соответствуют <paramref name="typeArguments" /> и типы параметров которого <paramref name="arguments" /> есть в типе <paramref name="instance" />.Type или его базовых типах.-или-Отсутствует метод с именем <paramref name="methodName" />, параметры типа которого соответствуют <paramref name="typeArguments" /> и типы параметров которого <paramref name="arguments" /> есть в типе <paramref name="instance" />.Type или его базовых типах.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов статического метода (общего в Visual Basic).</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, а для свойств <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> заданы указанные значения.</returns>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий целевой метод.</param>
      <param name="arguments">Коллекция выражений <see cref="T:System.Linq.Expressions.Expression" />, представляющая аргументы вызова.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов метода static (Shared в Visual Basic), который имеет один аргумент.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, а для свойств <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> заданы указанные значения.</returns>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов статического метода, принимающего два аргумента.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, а для свойств <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> заданы указанные значения.</returns>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <param name="arg1">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов статического метода, принимающего три аргумента.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, а для свойств <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> заданы указанные значения.</returns>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <param name="arg1">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</param>
      <param name="arg2">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов статического метода, принимающего четыре аргумента.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, а для свойств <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> заданы указанные значения.</returns>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <param name="arg1">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</param>
      <param name="arg2">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.</param>
      <param name="arg3">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий четвертый аргумент.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов статического метода, принимающего пять аргументов.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, а для свойств <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> заданы указанные значения.</returns>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <param name="arg1">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</param>
      <param name="arg2">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.</param>
      <param name="arg3">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий четвертый аргумент.</param>
      <param name="arg4">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий пятый аргумент.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов метода static (Shared в Visual Basic), который имеет аргументы.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, а для свойств <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> заданы указанные значения.</returns>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий static (Shared в Visual Basic) метод, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, используемых для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="method" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Количество элементов в <paramref name="arguments" /> не равно количеству параметров для метода, представленного <paramref name="method" />.-или-Один или несколько элементов <paramref name="arguments" /> нельзя назначить для соответствующего параметра для метода, представленного параметром <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов static (Shared в Visual Basic) метода путем вызова соответствующего фабричного метода.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, для свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> задано значение <see cref="T:System.Reflection.MethodInfo" />, представляющее указанный метод static (Shared в Visual Basic), а для свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> заданы указанные аргументы.</returns>
      <param name="type">Объект <see cref="T:System.Type" />, указывающий тип, который содержит указанный static (Shared в Visual Basic) метод.</param>
      <param name="methodName">Имя метода.</param>
      <param name="typeArguments">Массив объектов <see cref="T:System.Type" />, указывающий тип параметров универсального метода.Если methodName задает неуниверсальный метод, данный аргумент должен иметь значение NULL.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, который представляет аргументы для метода.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="type" /> или <paramref name="methodName" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Отсутствует метод с именем <paramref name="methodName" />, параметры типа которого соответствуют <paramref name="typeArguments" /> и типы параметров которого <paramref name="arguments" /> есть в типе <paramref name="type" />.Type или его базовых типах.-или-Отсутствует метод с именем <paramref name="methodName" />, параметры типа которого соответствуют <paramref name="typeArguments" /> и типы параметров которого <paramref name="arguments" /> есть в типе <paramref name="type" />.Type или его базовых типах.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>Указывает, что узел можно сократить до более простого.Если возвращается значение true, для получения сокращенной формы можно вызвать Reduce().</summary>
      <returns>Значение true, если узел можно сократить; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch со ссылкой на перехваченный объект <see cref="T:System.Exception" />, который используется в теле обработчика.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="variable">Объект <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющий ссылку на объект <see cref="T:System.Exception" />, перехваченный этим обработчиком.</param>
      <param name="body">Тело оператора catch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch с фильтром <see cref="T:System.Exception" /> и ссылкой на перехваченный объект <see cref="T:System.Exception" />.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="variable">Объект <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющий ссылку на объект <see cref="T:System.Exception" />, перехваченный этим обработчиком.</param>
      <param name="body">Тело оператора catch.</param>
      <param name="filter">Тело фильтра <see cref="T:System.Exception" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="type">Тип <see cref="P:System.Linq.Expressions.Expression.Type" /> объекта <see cref="T:System.Exception" />, который будет обрабатывать <see cref="T:System.Linq.Expressions.CatchBlock" />.</param>
      <param name="body">Тело оператора catch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch с фильтром <see cref="T:System.Exception" />, но без ссылки на перехваченный объект <see cref="T:System.Exception" />.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="type">Тип <see cref="P:System.Linq.Expressions.Expression.Type" /> объекта <see cref="T:System.Exception" />, который будет обрабатывать <see cref="T:System.Linq.Expressions.CatchBlock" />.</param>
      <param name="body">Тело оператора catch.</param>
      <param name="filter">Тело фильтра <see cref="T:System.Exception" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> для очистки точки следования.</summary>
      <returns>Экземпляр объекта <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> для очистки точки следования.</returns>
      <param name="document">Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, представляющий исходный файл.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий объединяющую операцию.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> параметра <paramref name="left" /> не представляет тип ссылки или тип, поддерживающий значение null.</exception>
      <exception cref="T:System.ArgumentException">Типы <paramref name="left" />.Type и <paramref name="right" />.Type не преобразовываются друг в друга.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий объединяющую операцию, заданную функции преобразования.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Типы <paramref name="left" />.Type и <paramref name="right" />.Type не преобразовываются друг в друга.-или-<paramref name="conversion" /> не является null, а тип <paramref name="conversion" />.Type является типом делегата, не принимающим ровно один аргумент.</exception>
      <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> параметра <paramref name="left" /> не представляет тип ссылки или тип, поддерживающий значение null.-или-Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> в <paramref name="left" /> представляет тип, который не назначается для типа параметра типа делегата <paramref name="conversion" />.Type.-или-Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> в <paramref name="right" /> не равно типу возврата типа делегата <paramref name="conversion" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный оператор.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, а для свойств <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> заданы указанные значения.</returns>
      <param name="test">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</param>
      <param name="ifTrue">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</param>
      <param name="ifFalse">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="test" />, <paramref name="ifTrue" />, <paramref name="ifFalse" /> равен null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="test" />.Type не является типом <see cref="T:System.Boolean" />.-или-Тип <paramref name="ifTrue" />.Type не равен типу <paramref name="ifFalse" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный оператор.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, а для свойств <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> заданы указанные значения.</returns>
      <param name="test">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</param>
      <param name="ifTrue">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</param>
      <param name="ifFalse">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.</param>
      <param name="type">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ConstantExpression" />, для свойства <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> которого задано указанное значение.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ConstantExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />, а для свойства <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> задано указанное значение.</returns>
      <param name="value">Объект <see cref="T:System.Object" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ConstantExpression" />, имеющий свойства <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ConstantExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />, а для свойств <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> и <see cref="P:System.Linq.Expressions.Expression.Type" /> заданы указанные значения.</returns>
      <param name="value">Объект <see cref="T:System.Object" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="type" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="value" /> не имеет значение null, а <paramref name="type" /> не может быть назначен из динамического типа <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор continue.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, а при переходе целевой метке передается значение NULL.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор continue с указанным типом.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — значение в параметре <paramref name="type" />, а при переходе целевой метке передается значение NULL.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию преобразования типов.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />, а для свойств <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.Expression.Type" /> заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> или <paramref name="type" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор преобразования не определен для типов <paramref name="expression" />.Type и <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который представляет операцию преобразования, для которой указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />, а для свойств <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> или <paramref name="type" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно один аргумент.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор преобразования не определен для типов <paramref name="expression" />.Type и <paramref name="type" />.-или-Параметр <paramref name="expression" />.Type не назначается типу аргумента метода, представленному параметром <paramref name="method" />.-или-Тип возврата метода, представленный <paramref name="method" />, не назначается для <paramref name="type" />.-или-Тип <paramref name="expression" />.Type или <paramref name="type" /> поддерживает тип значения, а соответствующий тип, не поддерживающий значение null, не равен типу аргумента и типу возврата, соответственно метода, представленного <paramref name="method" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">Найдено более одного метода, соответствующего описанию <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию преобразования, создающую исключение, если целевой тип переполняется.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />, а для свойств <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.Expression.Type" /> заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> или <paramref name="type" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор преобразования не определен для типов <paramref name="expression" />.Type и <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию преобразования, создающую исключение, если целевой тип переполняется, и для которой указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />, а для свойств <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> или <paramref name="type" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно один аргумент.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор преобразования не определен для типов <paramref name="expression" />.Type и <paramref name="type" />.-или-Тип <paramref name="expression" />.Type не назначается типу аргумента метода, представленному параметром <paramref name="method" />.-или-Тип возврата метода, представленный <paramref name="method" />, не назначается для <paramref name="type" />.-или-Тип <paramref name="expression" />.Type или <paramref name="type" /> поддерживает тип значения, а соответствующий тип, не поддерживающий значение null, не равен типу аргумента и типу возврата, соответственно метода, представленного <paramref name="method" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">Найдено более одного метода, соответствующего описанию <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> с заданным диапазоном.</summary>
      <returns>Экземпляр <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</returns>
      <param name="document">Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, представляющий исходный файл.</param>
      <param name="startLine">Начальная строка данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.Должно быть больше 0.</param>
      <param name="startColumn">Начальный столбец данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.Должно быть больше 0.</param>
      <param name="endLine">Конечная строка данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.Значение должно быть больше или равно значению начальной строки.</param>
      <param name="endColumn">Конечный столбец данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.Если конечная строка совпадает с начальной строкой, это значение должно быть больше или равно значению начального столбца.В любом случае оно должно быть больше 0.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшение выражения на 1.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшенное выражение.</returns>
      <param name="expression">Выражение <see cref="T:System.Linq.Expressions.Expression" /> для уменьшения.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшение выражения на 1.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшенное выражение.</returns>
      <param name="expression">Выражение <see cref="T:System.Linq.Expressions.Expression" /> для уменьшения.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DefaultExpression" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> которого имеет значение указанного типа.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DefaultExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Default" />, а для свойства <see cref="P:System.Linq.Expressions.Expression.Type" /> задан указанный тип.</returns>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию арифметического деления.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор деления не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию арифметического деления.Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор деления не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания деления, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания деления, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания деления, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ElementInit" />, присвоенный <see cref="T:System.Collections.Generic.IEnumerable`1" /> в качестве второго аргумента.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ElementInit" />, содержащее свойства <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> и <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="addMethod">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />.</param>
      <param name="arguments">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.Expression" />, которые следует задать для свойства <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="addMethod" /> или <paramref name="arguments" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Метод, представленный параметром <paramref name="addMethod" />, не назван "Add" (без учета регистра).-или-Метод, представленный параметром <paramref name="addMethod" />, не является методом экземпляра.-или-<paramref name="arguments" /> не содержит количество элементов, равное количеству параметров для метода, представленного <paramref name="addMethod" />.-или-Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов <paramref name="arguments" />  нельзя назначить для типа соответствующего параметра метода, представленного параметром <paramref name="addMethod" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ElementInit" />, присвоенный массиву значений в качестве второго аргумента.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ElementInit" />, содержащее свойства <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> и <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />, для которых заданы указанные значения.</returns>
      <param name="addMethod">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, которые следует задать для свойства <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="addMethod" /> или <paramref name="arguments" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Название метода, представленного параметром addMethod, отлично от "Add" (без учета регистра).-или-Метод, представленный параметром addMethod, не является методом экземпляра.-или-Число элементов, содержащихся в параметре arguments, отличается от числа параметров для метода, представленного параметром addMethod.-или-Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов <paramref name="arguments" />  нельзя назначить для типа соответствующего параметра метода, представленного параметром <paramref name="addMethod" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>Создает пустое выражение типа <see cref="T:System.Void" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DefaultExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Default" />, и свойство <see cref="P:System.Linq.Expressions.Expression.Type" />, равное <see cref="T:System.Void" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее сравнение для определения равенства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор равенства не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее сравнение для определения равенства.Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">true, чтобы задать <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> как true; false, чтобы задать <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> как false.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор равенства не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию XOR, с использованием op_ExclusiveOr для пользовательских типов.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор XOR не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию XOR, с использованием op_ExclusiveOr для пользовательских типов.Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор XOR не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию XOR, с использованием op_ExclusiveOr для пользовательских типов.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию XOR, с использованием op_ExclusiveOr для пользовательских типов.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию XOR, с использованием op_ExclusiveOr для пользовательских типов.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к полю.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, а для свойств <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> и <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.Для static (Shared в Visual Basic) объектов параметр <paramref name="expression" /> должен иметь значение null.</param>
      <param name="field">Объект <see cref="T:System.Reflection.FieldInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MemberExpression.Member" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="field" /> имеет значение null.-или-Поле, представленное параметром <paramref name="field" />, не является static (Shared в Visual Basic), и параметр <paramref name="expression" /> равен null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="expression" />.Type не назначается объявляемому типу поля, представленному параметром <paramref name="field" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, предоставляющий доступ к полю, которому предоставлено имя поля.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойству <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> присвоено значение <paramref name="expression" />, а свойству <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> присвоено значение <see cref="T:System.Reflection.FieldInfo" />, представляющее поле, обозначенное с помощью параметра <paramref name="fieldName" />.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, чье свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> содержит поле с именем <paramref name="fieldName" />.Для статических полей допускается значение NULL.</param>
      <param name="fieldName">Имя поля для доступа.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> или <paramref name="fieldName" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Не определено поле с именем <paramref name="fieldName" /> для параметра <paramref name="expression" />.Type или его базовых типов.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к полю.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.MemberExpression" />.</returns>
      <param name="expression">Объект, содержащий поле.Для статических полей допускается значение NULL.</param>
      <param name="type">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, содержащий поле.</param>
      <param name="fieldName">Поле для доступа.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>Создает объект <see cref="T:System.Type" />, представляющий универсальный тип делегата System.Action с определенным типом аргументов.</summary>
      <returns>Тип делегата System.Action с определенными аргументами типа.</returns>
      <param name="typeArgs">Массив объектов <see cref="T:System.Type" />, указывающих аргументы типа для типа делегата System.Action.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> содержит более четырех элементов.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="typeArgs" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>Получает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата System.Func или System.Action с определенным типом аргументов.</summary>
      <returns>Тип делегата.</returns>
      <param name="typeArgs">Тип аргументов делегата.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>Создает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата System.Func с определенным типом аргументов.Аргумент последнего типа задает тип возврата созданного делегата.</summary>
      <returns>Тип делегата System.Func с определенными аргументами типа.</returns>
      <param name="typeArgs">Массив от одного до пяти объектов <see cref="T:System.Type" />, указывающих аргументы типа для типа делегата System.Func.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> содержит менее одного или более пяти элементов.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="typeArgs" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор goto.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — указанное значение, а при переходе целевой метке передается значение NULL.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор goto.Можно указать значение, передаваемое метке при переходе.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, а при переходе целевой метке передается значение <paramref name="value" />.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор goto с указанным типом.Можно указать значение, передаваемое метке при переходе.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — значение в параметре <paramref name="type" />, а при переходе целевой метке передается значение в параметре <paramref name="value" />.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор goto с указанным типом.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — указанное значение, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — значение в параметре <paramref name="type" />, а при переходе целевой метке передается значение NULL.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "больше, чем".</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор "больше чем" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "больше, чем".Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">true, чтобы задать <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> как true; false, чтобы задать <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> как false.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор "больше чем" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "больше или равно".</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор "больше чем или равно" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "больше или равно".</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">true, чтобы задать <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> как true; false, чтобы задать <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> как false.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор "больше чем или равно" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный блок с операторами if.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, а для свойств <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> заданы указанные значения.Свойству <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> присваивается значение выражения по умолчанию, тип получаемого выражения <see cref="T:System.Linq.Expressions.ConditionalExpression" />, возвращаемого этим методом, — <see cref="T:System.Void" />.</returns>
      <param name="test">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</param>
      <param name="ifTrue">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный блок с операторами if и else.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, а для свойств <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> заданы указанные значения.Тип выражения <see cref="T:System.Linq.Expressions.ConditionalExpression" />, возвращаемого этим методом, — <see cref="T:System.Void" />.</returns>
      <param name="test">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</param>
      <param name="ifTrue">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</param>
      <param name="ifFalse">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий увеличение выражения на 1.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий увеличенное выражение.</returns>
      <param name="expression">Увеличиваемое выражение <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий увеличение выражения на 1.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий увеличенное выражение.</returns>
      <param name="expression">Увеличиваемое выражение <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, применяющее делегат или лямбда-выражение к списку выражений аргумента.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, которое применяет заданный делегат или лямбда-выражение к предоставленным аргументам.</returns>
      <param name="expression">Выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее делегат или лямбда-выражение для применения.</param>
      <param name="arguments">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.Expression" />, представляющие аргументы, к которым применяется делегат или лямбда-выражение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="expression" />.Type не представляет тип делегата или <see cref="T:System.Linq.Expressions.Expression`1" />.-или-Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра делегата, представленного параметром <paramref name="expression" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> не содержит количество элементов, равное количеству списка параметров для делегата, представленного <paramref name="expression" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, применяющее делегат или лямбда-выражение к списку выражений аргумента.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, которое применяет заданный делегат или лямбда-выражение к предоставленным аргументам.</returns>
      <param name="expression">Выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее делегат или лямбда-выражение для применения.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих аргументы, к которым применяется делегат или лямбда-выражение.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="expression" />.Type не представляет тип делегата или <see cref="T:System.Linq.Expressions.Expression`1" />.-или-Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра делегата, представленного параметром <paramref name="expression" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> не содержит количество элементов, равное количеству списка параметров для делегата, представленного <paramref name="expression" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>Возвращает значение, показывающее, имеет ли выражение значение false.</summary>
      <returns>Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Возвращает значение, показывающее, имеет ли выражение значение false.</summary>
      <returns>Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>Возвращает значение, показывающее, имеет ли выражение значение true.</summary>
      <returns>Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Возвращает значение, показывающее, имеет ли выражение значение true.</summary>
      <returns>Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с типом void и без имени.</summary>
      <returns>Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с типом void и без имени.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LabelExpression" />, представляющий метку без значения по умолчанию.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LabelExpression" /> без значения по умолчанию.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, с которым будет связано данное выражение <see cref="T:System.Linq.Expressions.LabelExpression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.LabelExpression" />, представляющее метку с данным значением по умолчанию.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LabelExpression" /> с данным значением по умолчанию.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, с которым будет связано данное выражение <see cref="T:System.Linq.Expressions.LabelExpression" />.</param>
      <param name="defaultValue">Значение данного выражения <see cref="T:System.Linq.Expressions.LabelExpression" /> после достижения метки через стандартный поток управления.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с типом void и заданным именем.</summary>
      <returns>Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с типом void и данным именем.</returns>
      <param name="name">Имя метки.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с данным типом.</summary>
      <returns>Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с данным типом.</returns>
      <param name="type">Тип значения, которое передается при переходе к метке.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с данным типом и именем.</summary>
      <returns>Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с данным типом и данным именем.</returns>
      <param name="type">Тип значения, которое передается при переходе к метке.</param>
      <param name="name">Имя метки.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает лямбда-выражение, сначала создавая тип делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется Lambda, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> равняется <see cref="P:System.Linq.Expressions.Expression`1.Lambda" />, а для свойств <see cref="P:System.Linq.Expressions.Expression`1.Body" /> и <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression`1.Body" />.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />.</param>
      <typeparam name="TDelegate">Тип делегата. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> равняется <see cref="P:System.Linq.Expressions.Expression`1.Lambda" />, а для свойств <see cref="P:System.Linq.Expressions.Expression`1.Body" /> и <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression`1.Body" />.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">Массив, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />.</param>
      <typeparam name="TDelegate">Тип делегата. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает лямбда-выражение, сначала создавая тип делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется Lambda, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">Массив, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <typeparam name="TDelegate">Тип делегата</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="body" /> имеет значение null.-или-Один или несколько элементов в <paramref name="parameters" /> равны null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> не является типом делегата.-или-Тип <paramref name="body" />.Type представляет тип, который не может быть назначен для типа возврата параметра <paramref name="TDelegate" />.-или-<paramref name="parameters" /> не содержит количество элементов, равное количеству списка параметров для <paramref name="TDelegate" />.-или-Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="parameters" /> нельзя назначить из типа соответствующего параметра <paramref name="TDelegate" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает лямбда-выражение, сначала создавая тип делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется Lambda, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемых для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <typeparam name="TDelegate">Тип делегата</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="body" /> имеет значение null.-или-Один или несколько элементов в <paramref name="parameters" /> равны null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> не является типом делегата.-или-Тип <paramref name="body" />.Type представляет тип, который не может быть назначен для типа возврата параметра <paramref name="TDelegate" />.-или-<paramref name="parameters" /> не содержит количество элементов, равное количеству списка параметров для <paramref name="TDelegate" />.-или-Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="parameters" /> нельзя назначить из типа соответствующего параметра <paramref name="TDelegate" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LambdaExpression" /> по первому созданию типа делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемых для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="body" /> имеет значение null.-или-Один или несколько элементов в <paramref name="parameters" /> равны null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> содержит более шестнадцати элементов.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> равняется <see cref="P:System.Linq.Expressions.Expression`1.Lambda" />, а для свойств <see cref="P:System.Linq.Expressions.Expression`1.Body" /> и <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression`1.Body" />.</param>
      <param name="name">Имя лямбда-выражения.Используется для создания сведений об отладке.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />.</param>
      <typeparam name="TDelegate">Тип делегата. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает лямбда-выражение, сначала создавая тип делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется Lambda, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="name">Имя для лямбда-функции.Используется для выпуска сведений об отладке.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает лямбда-выражение, сначала создавая тип делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется Lambda, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="name">Имя для лямбда-функции.Используется для выпуска сведений об отладке.</param>
      <param name="parameters">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.Expression`1" />, где тип делегата известен в момент компиляции.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression`1.NodeType" /> равняется <see cref="P:System.Linq.Expressions.Expression`1.Lambda" />, а для свойств <see cref="P:System.Linq.Expressions.Expression`1.Body" /> и <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> заданы указанные значения.</returns>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression`1.Body" />.</param>
      <param name="name">Имя лямбда-выражения.Используется для создания сведений об отладке.</param>
      <param name="parameters">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.Expression`1.Parameters" />.</param>
      <typeparam name="TDelegate">Тип делегата. </typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает лямбда-выражение, сначала создавая тип делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется Lambda, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="delegateType">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</param>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает лямбда-выражение, сначала создавая тип делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется Lambda, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="delegateType">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</param>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">Массив, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LambdaExpression" /> по первому созданию типа делегата.Он может использоваться, если тип делегата неизвестен в момент компиляции.</summary>
      <returns>Объект, представляющий лямбда-выражение со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, и свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</returns>
      <param name="delegateType">Тип <see cref="T:System.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</param>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="delegateType" /> или <paramref name="body" /> — null.-или-Один или несколько элементов в <paramref name="parameters" /> равны null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> не представляет тип делегата.-или-Тип <paramref name="body" />.Type представляет тип, который не может быть назначен для типа возврата типа делегата, представленного <paramref name="delegateType" />.-или-<paramref name="parameters" /> не содержит количество элементов, равное количеству списка параметров для типа делегата, представленного <paramref name="delegateType" />.-или-Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="parameters" /> нельзя назначить от типа соответствующего типа параметра типа делегата, представленного через <paramref name="delegateType" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LambdaExpression" /> по первому созданию типа делегата.Он может использоваться, если тип делегата неизвестен в момент компиляции.</summary>
      <returns>Объект, представляющий лямбда-выражение со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, и свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</returns>
      <param name="delegateType">Тип <see cref="T:System.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</param>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемых для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="delegateType" /> или <paramref name="body" /> — null.-или-Один или несколько элементов в <paramref name="parameters" /> равны null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> не представляет тип делегата.-или-Тип <paramref name="body" />.Type представляет тип, который не может быть назначен для типа возврата типа делегата, представленного <paramref name="delegateType" />.-или-<paramref name="parameters" /> не содержит количество элементов, равное количеству списка параметров для типа делегата, представленного <paramref name="delegateType" />.-или-Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="parameters" /> нельзя назначить от типа соответствующего типа параметра типа делегата, представленного через <paramref name="delegateType" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает лямбда-выражение, сначала создавая тип делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется Lambda, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="delegateType">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</param>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />. </param>
      <param name="name">Имя для лямбда-функции.Используется для выпуска сведений об отладке.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения. </param>
      <param name="parameters">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />. </param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает лямбда-выражение, сначала создавая тип делегата.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется Lambda, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
      <param name="delegateType">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</param>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="name">Имя для лямбда-функции.Используется для выпуска сведений об отладке.</param>
      <param name="parameters">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию сдвига влево.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор сдвига влево не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию сдвига влево.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, а оператор сдвига влево не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию присваивания сдвига влево.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию присваивания сдвига влево.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию присваивания сдвига влево.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше, чем".</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор "меньше чем" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше, чем".</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">true, чтобы задать <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> как true; false, чтобы задать <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> как false.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор "меньше чем" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше или равно".</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор "меньше чем или равно" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше или равно".</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">true, чтобы задать <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> как true; false, чтобы задать <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> как false.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор "меньше чем или равно" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberListBinding" />, где элемент является полем или свойством.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" />, у которого свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> равняется <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, а для свойств <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> заданы указанные значения.</returns>
      <param name="member">Объект <see cref="T:System.Reflection.MemberInfo" />, представляющий поле или свойство, которое следует задать для свойства <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="initializers">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ElementInit" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> имеет значение null. -или-Один или несколько элементов в <paramref name="initializers" /> равны null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> не представляет поле или свойство.-или-Тип <see cref="P:System.Reflection.FieldInfo.FieldType" /> или <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> поля или свойства, которые представляет <paramref name="member" />, не реализовывает <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberListBinding" />, где элемент является полем или свойством.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" />, у которого свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> равняется <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, а для свойств <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> заданы указанные значения.</returns>
      <param name="member">Объект <see cref="T:System.Reflection.MemberInfo" />, представляющий поле или свойство, которое следует задать для свойства <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="initializers">Массив объектов <see cref="T:System.Linq.Expressions.ElementInit" />, используемых для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> имеет значение null. -или-Один или несколько элементов в <paramref name="initializers" /> равны null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> не представляет поле или свойство.-или-Тип <see cref="P:System.Reflection.FieldInfo.FieldType" /> или <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> поля или свойства, которые представляет <paramref name="member" />, не реализовывает <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberListBinding" /> на основе указанного метода доступа к свойству.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, свойству <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> присвоено значение <see cref="T:System.Reflection.MemberInfo" />, представляющее свойство, доступ к которому осуществляется в <paramref name="propertyAccessor" />, и свойство <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />, которое заполнено элементами <paramref name="initializers" />.</returns>
      <param name="propertyAccessor">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа свойства.</param>
      <param name="initializers">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ElementInit" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> имеет значение null. -или-Один или несколько элементов в <paramref name="initializers" /> равны null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> не представляет метод доступа свойства.-или-Тип <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> свойства, к которому дает доступ метод, представленный как <paramref name="propertyAccessor" />, не реализовывает <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberListBinding" /> на основе указанного метода доступа к свойству.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, свойству <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> присвоено значение <see cref="T:System.Reflection.MemberInfo" />, представляющее свойство, доступ к которому осуществляется в <paramref name="propertyAccessor" />, и свойство <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />, которое заполнено элементами <paramref name="initializers" />.</returns>
      <param name="propertyAccessor">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа свойства.</param>
      <param name="initializers">Массив объектов <see cref="T:System.Linq.Expressions.ElementInit" />, используемых для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> имеет значение null. -или-Один или несколько элементов в <paramref name="initializers" /> равны null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> не представляет метод доступа свойства.-или-Тип <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> свойства, к которому дает доступ метод, представленный как <paramref name="propertyAccessor" />, не реализовывает <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанные объекты <see cref="T:System.Linq.Expressions.ElementInit" /> для инициализации коллекции.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, а для свойств <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> заданы указанные значения.</returns>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="initializers">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.ElementInit" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="newExpression" /> или <paramref name="initializers" /> — null.-или-Один или несколько элементов в <paramref name="initializers" /> равны null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий метод с именем "Add" для добавления элементов в коллекцию.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, а для свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> задано указанное значение.</returns>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="initializers">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="newExpression" /> или <paramref name="initializers" /> — null.-или-Один или несколько элементов в <paramref name="initializers" /> равны null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">Не существует метод экземпляра с именем "Add" (без учета регистра), объявленного в <paramref name="newExpression" />.Type или его базовом типе.-или-Метод сложения для типа <paramref name="newExpression" />.Type или его базового типа не принимает точно один аргумент.-или-Тип, представленный свойством <see cref="P:System.Linq.Expressions.Expression.Type" /> первого элемента <paramref name="initializers" />, не назначается для типа метода добавления для <paramref name="newExpression" />.Type или его базового типа.-или-Метод, совместимый более чем с одним аргументом, с именем "Add" (без учета регистра), существует для типа <paramref name="newExpression" />.Type или его базового типа.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанные объекты <see cref="T:System.Linq.Expressions.ElementInit" /> для инициализации коллекции.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, а для свойств <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> заданы указанные значения.</returns>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="initializers">Массив объектов <see cref="T:System.Linq.Expressions.ElementInit" />, используемых для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="newExpression" /> или <paramref name="initializers" /> — null.-или-Один или несколько элементов в <paramref name="initializers" /> равны null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий метод с именем "Add" для добавления элементов в коллекцию.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, а для свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> задано указанное значение.</returns>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="initializers">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, используемых для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="newExpression" /> или <paramref name="initializers" /> — null.-или-Один или несколько элементов в <paramref name="initializers" /> равны null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">Не существует метод экземпляра с именем "Add" (без учета регистра), объявленного в <paramref name="newExpression" />.Type или его базовом типе.-или-Метод сложения для типа <paramref name="newExpression" />.Type или его базового типа не принимает точно один аргумент.-или-Тип, представленный свойством <see cref="P:System.Linq.Expressions.Expression.Type" /> первого элемента <paramref name="initializers" />, не назначается для типа метода добавления для <paramref name="newExpression" />.Type или его базового типа.-или-Метод, совместимый более чем с одним аргументом, с именем "Add" (без учета регистра), существует для типа <paramref name="newExpression" />.Type или его базового типа.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанный метод, чтобы добавить элементы к коллекции.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, а для свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> задано указанное значение.</returns>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="addMethod">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод экземпляра с именем "Add" (без учета регистра), добавляющий элемент к коллекции.</param>
      <param name="initializers">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="newExpression" /> или <paramref name="initializers" /> — null.-или-Один или несколько элементов в <paramref name="initializers" /> равны null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.-или-Значение <paramref name="addMethod" /> не равно null и не представляет метод экземпляра с именем "Add" (без учета регистра), принимающий точно один аргумент.-или-Значение <paramref name="addMethod" /> не равно null, а тип, представленный свойством <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов параметра <paramref name="initializers" />, нельзя назначить для типа аргумента метода, представленного <paramref name="addMethod" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> не равен null, и отсутствует метод экземпляра с именем "Add", принимающий один аргумент, совместимый с типом, для параметра <paramref name="newExpression" />.Type или его базового типа.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанный метод, чтобы добавить элементы к коллекции.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, а для свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> задано указанное значение.</returns>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="addMethod">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод экземпляра с одним аргументом, добавляющий элемент к коллекции.</param>
      <param name="initializers">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, используемых для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="newExpression" /> или <paramref name="initializers" /> — null.-или-Один или несколько элементов в <paramref name="initializers" /> равны null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.-или-Значение <paramref name="addMethod" /> не равно null и не представляет метод экземпляра с именем "Add" (без учета регистра), принимающий точно один аргумент.-или-Значение <paramref name="addMethod" /> не равно null, а тип, представленный свойством <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов параметра <paramref name="initializers" />, нельзя назначить для типа аргумента метода, представленного <paramref name="addMethod" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> не равен null, и отсутствует метод экземпляра с именем "Add", принимающий один аргумент, совместимый с типом, для параметра <paramref name="newExpression" />.Type или его базового типа.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.LoopExpression" /> с данным телом.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
      <param name="body">Тело цикла.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LoopExpression" /> с заданным телом и целью оператора break.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
      <param name="body">Тело цикла.</param>
      <param name="break">Цель оператора break, используемая телом цикла.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.LoopExpression" /> с данным телом.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
      <param name="body">Тело цикла.</param>
      <param name="break">Цель оператора break, используемая телом цикла.</param>
      <param name="continue">Цель оператора continue, используемая телом цикла.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, присвоенные левый и правый операнды, с помощью вызова соответствующего фабричного метода.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, полученный в результате вызова соответствующего заводского метода.</returns>
      <param name="binaryType">Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип бинарной операции.</param>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий левый операнд.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий правый операнд.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> не соответствует двоичному узлу выражения.</exception>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, присвоенный левый операнд, правый операнд и метод реализации с помощью вызова соответствующего фабричного метода.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, полученный в результате вызова соответствующего заводского метода.</returns>
      <param name="binaryType">Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип бинарной операции.</param>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий левый операнд.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий правый операнд.</param>
      <param name="liftToNull">true, чтобы задать <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> как true; false, чтобы задать <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> как false.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> не соответствует двоичному узлу выражения.</exception>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, присвоенный левый операнд, правый операнд, метод реализации и функцию преобразования типов с помощью вызова соответствующего фабричного метода.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, полученный в результате вызова соответствующего заводского метода.</returns>
      <param name="binaryType">Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип бинарной операции.</param>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий левый операнд.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий правый операнд.</param>
      <param name="liftToNull">true, чтобы задать <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> как true; false, чтобы задать <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> как false.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, представляющий тип функции преобразования.Этот параметр используется только, если <paramref name="binaryType" /> имеет значение <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> или составного присваивания.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> не соответствует двоичному узлу выражения.</exception>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch с указанными элементами.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="type">Тип <see cref="P:System.Linq.Expressions.Expression.Type" /> объекта <see cref="T:System.Exception" />, который будет обрабатывать <see cref="T:System.Linq.Expressions.CatchBlock" />.</param>
      <param name="variable">Объект <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющий ссылку на объект <see cref="T:System.Exception" />, перехваченный этим обработчиком.</param>
      <param name="body">Тело оператора catch.</param>
      <param name="filter">Тело фильтра <see cref="T:System.Exception" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий переход указанного объекта <see cref="T:System.Linq.Expressions.GotoExpressionKind" />.Также можно указать значение, передаваемое метке при переходе.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение <paramref name="kind" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />, а при переходе целевой метке передается значение <paramref name="value" />.</returns>
      <param name="kind">Тип <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> данного объекта <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющий доступ к индексированному свойству объекта.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">Объект, которому принадлежит это свойство.Он должен быть пустым, если свойство static (shared в Visual Basic).</param>
      <param name="indexer">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий индексируемое свойство.</param>
      <param name="arguments">Коллекция IEnumerable&lt;Expression&gt; (IEnumerable (Of Expression) в Visual Basic), содержащая аргументы, которые будут использоваться для индексации свойства.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, который представляет доступ к полю или свойству.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.MemberExpression" />, полученный в результате вызова соответствующего заводского метода.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий объект, к которому принадлежит элемент.Для статических членов допускается значение NULL.</param>
      <param name="member">Объект <see cref="T:System.Reflection.MemberInfo" />, описывающий поле или свойство, к которому следует осуществить доступ.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> или <paramref name="member" /> — null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> не представляет поле или свойство.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.TryExpression" />, представляющий блок try с указанными элементами.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="type">Тип результата выражения try.Если он имеет значение NULL, bodh и все обработчики должны иметь одинаковый тип.</param>
      <param name="body">Тело блока try.</param>
      <param name="finally">Тело блока finally.Если с блоком try не связан ни один блок finally, передается NULL.</param>
      <param name="fault">Тело блока try.Если с блоком try не связан ни один блок fault, передается NULL.</param>
      <param name="handlers">Коллекция объектов <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющих операторы catch, которые следует связать с блоком try.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, присвоенный операнду с помощью вызова соответствующего фабричного метода.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, полученный в результате вызова соответствующего заводского метода.</returns>
      <param name="unaryType">Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип унарной операции.</param>
      <param name="operand">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий операнд.</param>
      <param name="type">Тип <see cref="T:System.Type" />, указывающий тип для преобразования (передачи значения null, если не применяется).</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="operand" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> не соответствует унарному узлу выражения.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, присвоенный операнд и метод реализации с помощью вызова соответствующего фабричного метода.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, полученный в результате вызова соответствующего заводского метода.</returns>
      <param name="unaryType">Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип унарной операции.</param>
      <param name="operand">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий операнд.</param>
      <param name="type">Тип <see cref="T:System.Type" />, указывающий тип для преобразования (передачи значения null, если не применяется).</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="operand" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> не соответствует унарному узлу выражения.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов поля или свойства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, у которого свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> равняется <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, а для свойств <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> заданы указанные значения.</returns>
      <param name="member">Объект <see cref="T:System.Reflection.MemberInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="bindings">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.MemberBinding" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="member" /> или <paramref name="bindings" /> — null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> не представляет поле или свойство.-или-Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа поля или свойства, представленного <paramref name="member" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов поля или свойства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, у которого свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> равняется <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, а для свойств <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> заданы указанные значения.</returns>
      <param name="member">Объект <see cref="T:System.Reflection.MemberInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="bindings">Массив объектов <see cref="T:System.Linq.Expressions.MemberBinding" />, используемых для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="member" /> или <paramref name="bindings" /> — null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> не представляет поле или свойство.-или-Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа поля или свойства, представленного <paramref name="member" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов элемента, доступ к которому осуществляется с помощью метода доступа свойства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, свойству <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> присвоено значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство, доступ к которому осуществляется в <paramref name="propertyAccessor" />, и свойство <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />, для которого заданы указанные значения.</returns>
      <param name="propertyAccessor">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа свойства.</param>
      <param name="bindings">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.MemberBinding" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="propertyAccessor" /> или <paramref name="bindings" /> — null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> не представляет метод доступа свойства.-или-Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа свойства, доступ к которому осуществляется методом, который представляет <paramref name="propertyAccessor" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов элемента, доступ к которому осуществляется с помощью метода доступа свойства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, свойству <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> присвоено значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство, доступ к которому осуществляется в <paramref name="propertyAccessor" />, и свойство <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />, для которого заданы указанные значения.</returns>
      <param name="propertyAccessor">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа свойства.</param>
      <param name="bindings">Массив объектов <see cref="T:System.Linq.Expressions.MemberBinding" />, используемых для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="propertyAccessor" /> или <paramref name="bindings" /> — null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> не представляет метод доступа свойства.-или-Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа свойства, доступ к которому осуществляется методом, который представляет <paramref name="propertyAccessor" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Представляет выражение, создающее новый объект и инициализирующее свойство объекта.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberInitExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />, а для свойств <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> заданы указанные значения.</returns>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />.</param>
      <param name="bindings">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.MemberBinding" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="newExpression" /> или <paramref name="bindings" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа поля или свойства, который представляет <paramref name="newExpression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberInitExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />, а для свойств <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> заданы указанные значения.</returns>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />.</param>
      <param name="bindings">Массив объектов <see cref="T:System.Linq.Expressions.MemberBinding" />, используемых для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="newExpression" /> или <paramref name="bindings" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа поля или свойства, который представляет <paramref name="newExpression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию получения арифметического остатка.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор остатка от деления не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию получения арифметического остатка.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор остатка от деления не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор умножения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор умножения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания умножения, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания умножения, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания умножения, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию арифметического умножения, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор умножения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию арифметического умножения, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор умножения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее операцию арифметического изменения знака.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />, а для свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> задано указанное значение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Унарный минус-оператор не определен для типа <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее операцию арифметического изменения знака.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />, а для свойств <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно один аргумент.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равно null, а унарный минус-оператор не определен для типа <paramref name="expression" />.Type.-или-Тип <paramref name="expression" />.Type (или соответствующий тип, не поддерживающий значение null, если он является типом, поддерживающим значение null) не назначается типу аргумента метода, представленного <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее операцию арифметического изменения знака, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />, а для свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> задано указанное значение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Унарный минус-оператор не определен для типа <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее операцию арифметического изменения знака, содержащую проверку переполнения.Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />, а для свойств <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно один аргумент.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равно null, а унарный минус-оператор не определен для типа <paramref name="expression" />.Type.-или-Тип <paramref name="expression" />.Type (или соответствующий тип, не поддерживающий значение null, если он является типом, поддерживающим значение null) не назначается типу аргумента метода, представленного <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора без аргументов.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.New" />, а для свойства <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> задано указанное значение.</returns>
      <param name="constructor">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="constructor" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Конструктор, который представляет <paramref name="constructor" />, содержит не менее одного параметра.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.New" />, а для свойств <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> и <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> заданы указанные значения.</returns>
      <param name="constructor">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <param name="arguments">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="constructor" /> имеет значение null.-или-Элемент <paramref name="arguments" /> равен null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="arguments" /> не содержит количество элементов, равное количеству параметров для конструктора, представленного <paramref name="constructor" />.-или-Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра делегата, представленного параметром <paramref name="constructor" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами.Указаны элементы с доступом к полям, инициализированным конструктором.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.New" />, а для свойств <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> и <see cref="P:System.Linq.Expressions.NewExpression.Members" /> заданы указанные значения.</returns>
      <param name="constructor">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <param name="arguments">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</param>
      <param name="members">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Reflection.MemberInfo" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Members" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="constructor" /> имеет значение null.-или-Элемент <paramref name="arguments" /> равен null.-или-Элемент <paramref name="members" /> равен null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="arguments" /> не содержит количество элементов, равное количеству параметров для конструктора, представленного <paramref name="constructor" />.-или-Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра делегата, представленного параметром <paramref name="constructor" />.-или-Параметр <paramref name="members" /> не содержит то же количество элементов, что и параметр <paramref name="arguments" />.-или-Элемент свойства <paramref name="arguments" /> содержит<see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий тип, который нельзя назначить для типа элемента, представленного соответствующим элементом <paramref name="members" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами.Указаны элементы с доступом к полям, инициализированным в качестве массива.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.New" />, а для свойств <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> и <see cref="P:System.Linq.Expressions.NewExpression.Members" /> заданы указанные значения.</returns>
      <param name="constructor">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <param name="arguments">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</param>
      <param name="members">Массив объектов <see cref="T:System.Reflection.MemberInfo" />, используемых для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Members" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="constructor" /> имеет значение null.-или-Элемент <paramref name="arguments" /> равен null.-или-Элемент <paramref name="members" /> равен null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="arguments" /> не содержит количество элементов, равное количеству параметров для конструктора, представленного <paramref name="constructor" />.-или-Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра делегата, представленного параметром <paramref name="constructor" />.-или-Параметр <paramref name="members" /> не содержит то же количество элементов, что и параметр <paramref name="arguments" />.-или-Элемент свойства <paramref name="arguments" /> содержит<see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий тип, который нельзя назначить для типа элемента, представленного соответствующим элементом <paramref name="members" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.New" />, а для свойств <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> и <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> заданы указанные значения.</returns>
      <param name="constructor">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, используемых для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="constructor" /> имеет значение null.-или-Элемент <paramref name="arguments" /> равен null.</exception>
      <exception cref="T:System.ArgumentException">Длина <paramref name="arguments" /> не соответствует количеству для конструктора, который представляет <paramref name="constructor" />.-или-Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра делегата, представленного параметром <paramref name="constructor" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов конструктора указанного типа без параметров.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойство <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, для которого задано значение <see cref="T:System.Reflection.ConstructorInfo" />, представляющее конструктор указанного типа без параметров.</returns>
      <param name="type">Объект <see cref="T:System.Type" />, имеющий конструктор без аргументов.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="type" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Тип, который представляет <paramref name="type" />, не содержит конструктор без параметров.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющий создание массива с указанным рангом.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, а для свойства <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> задано указанное значение.</returns>
      <param name="type">Тип <see cref="T:System.Type" />, представляющий тип элемента массива.</param>
      <param name="bounds">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="type" /> или <paramref name="bounds" /> — null.-или-Элемент <paramref name="bounds" /> равен null.</exception>
      <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="bounds" /> не представляет целочисленный тип.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющий создание массива с указанным рангом.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, а для свойства <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> задано указанное значение.</returns>
      <param name="type">Тип <see cref="T:System.Type" />, представляющий тип элемента массива.</param>
      <param name="bounds">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, используемых для заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="type" /> или <paramref name="bounds" /> — null.-или-Элемент <paramref name="bounds" /> равен null.</exception>
      <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="bounds" /> не представляет целочисленный тип.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющий создание одномерного массива и его инициализацию из списка элементов.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />, а для свойства <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> задано указанное значение.</returns>
      <param name="type">Тип <see cref="T:System.Type" />, представляющий тип элемента массива.</param>
      <param name="initializers">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="type" /> или <paramref name="initializers" /> — null.-или-Элемент <paramref name="initializers" /> равен null.</exception>
      <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="initializers" /> представляет тип, который не назначается для типа, который представляет <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющий создание одномерного массива и его инициализацию из списка элементов.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />, а для свойства <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> задано указанное значение.</returns>
      <param name="type">Тип <see cref="T:System.Type" />, представляющий тип элемента массива.</param>
      <param name="initializers">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, используемых для заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="type" /> или <paramref name="initializers" /> — null.-или-Элемент <paramref name="initializers" /> равен null.</exception>
      <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="initializers" /> представляет тип, который не назначается для типа, который представляет <paramref name="type" />.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Одно из значений <see cref="T:System.Linq.Expressions.ExpressionType" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее битовую операцию дополнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Not" />, а для свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> задано указанное значение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор унарного отрицания не определен для типа <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее битовую операцию дополнения.Может быть указан метод реализации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Not" />, а для свойств <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно один аргумент.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равно null, а оператор унарного отрицания не определен для типа <paramref name="expression" />.Type.-или-Тип <paramref name="expression" />.Type (или соответствующий тип, не поддерживающий значение null, если он является типом, поддерживающим значение null) не назначается типу аргумента метода, представленного <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее сравнение для определения неравенства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор неравенства не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее сравнение для определения неравенства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">true, чтобы задать <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> как true; false, чтобы задать <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> как false.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор неравенства не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>Возвращает выражение, представляющее дополнение до единицы.</summary>
      <returns>Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Возвращает выражение, представляющее дополнение до единицы.</summary>
      <returns>Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию OR.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Or" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Побитовый оператор OR не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию OR.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Or" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и побитовый оператор OR не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию присваивания OR.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию присваивания OR.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию присваивания OR.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию OR, вычисляющую второй операнд, только если первый операнд имеет значение false.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Побитовый оператор OR не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.-или-Типы <paramref name="left" />.Type и <paramref name="right" />.Type являются разными логическими типами.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию OR, вычисляющую второй операнд, только если первый операнд имеет значение false.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и побитовый оператор OR не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.-или-Метод <paramref name="method" /> равен null, а типы <paramref name="left" />.Type и <paramref name="right" />.Type являются разными логическими типами.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.</summary>
      <returns>Узел <see cref="T:System.Linq.Expressions.ParameterExpression" /> с указанными именем и типом.</returns>
      <param name="type">Тип параметра или переменной.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ParameterExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" />, а для свойств <see cref="P:System.Linq.Expressions.Expression.Type" /> и <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> заданы указанные значения.</returns>
      <param name="type">Тип параметра или переменной.</param>
      <param name="name">Имя параметра или переменной только для целей отладки и печати.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="type" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее уменьшение исходного выражения на 1.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее уменьшение исходного выражения на 1.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее увеличение исходного выражения на 1.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее увеличение исходного выражения на 1.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение числа в степень.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Power" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор степени не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.-или-Типы <paramref name="left" />.Type и <paramref name="right" />.Type не являются <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение числа в степень.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Power" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор степени не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.-или-Значение <paramref name="method" /> равно null, а типы <paramref name="left" />.Type и <paramref name="right" />.Type не равны <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение выражения в степень и назначение результата исходному выражению.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение выражения в степень и назначение результата исходному выражению.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение выражения в степень и назначение результата исходному выражению.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который уменьшает выражение на 1 и присваивает результат исходному выражению.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который уменьшает выражение на 1 и присваивает результат исходному выражению.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который увеличивает выражение на 1 и присваивает результат исходному выражению.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который увеличивает выражение на 1 и присваивает результат исходному выражению.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, который представляет доступ к свойству с помощью метода доступа свойства.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойству <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> присвоено значение <paramref name="expression" />, и свойство <see cref="P:System.Linq.Expressions.MemberExpression.Member" />, заданное как <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство, доступ к которому осуществляется в <paramref name="propertyAccessor" />.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.Для статических свойств допускается значение NULL.</param>
      <param name="propertyAccessor">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа свойства.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyAccessor" /> имеет значение null.-или-Метод, представленный параметром <paramref name="propertyAccessor" />, не является static (Shared в Visual Basic), и параметр <paramref name="expression" /> равен null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="expression" />.Type не назначается объявляемому типу метода, представленному параметром <paramref name="propertyAccessor" />.-или-Метод, который представляет <paramref name="propertyAccessor" />, не является методом доступа к свойству.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к свойству.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, а для свойств <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> и <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.Для статических свойств допускается значение NULL.</param>
      <param name="property">Объект <see cref="T:System.Reflection.PropertyInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.MemberExpression.Member" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="property" /> имеет значение null.-или-Свойство, представленное параметром <paramref name="property" />, не является static (Shared в Visual Basic), и параметр <paramref name="expression" /> равен null.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="expression" />.Type не может быть назначен объявляемому типу свойства, представленного параметром <paramref name="property" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющий доступ к индексированному свойству.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">Объект, которому принадлежит это свойство.Если свойство статическое или общее, оно должно иметь значение NULL.</param>
      <param name="indexer">Объект <see cref="T:System.Reflection.PropertyInfo" />, представляющий индексируемое свойство.</param>
      <param name="arguments">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, которые используются для индексации свойства.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющий доступ к индексированному свойству.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">Объект, которому принадлежит это свойство.Если свойство статическое или общее, оно должно иметь значение NULL.</param>
      <param name="indexer">Объект <see cref="T:System.Reflection.PropertyInfo" />, представляющий индексируемое свойство.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, которые используются для индексации свойства.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к свойству.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойству <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> присвоено значение <paramref name="expression" />, а свойству <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> присвоено значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее поле, обозначенное с помощью параметра <paramref name="propertyName" />.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, чье <see cref="P:System.Linq.Expressions.Expression.Type" /> содержит свойство с именем <paramref name="propertyName" />.Для статических свойств допускается значение null.</param>
      <param name="propertyName">Имя свойства для доступа.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> или <paramref name="propertyName" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Не определено свойство с именем <paramref name="propertyName" /> для <paramref name="expression" />.Type или его базовых типов.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющий доступ к индексированному свойству.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="instance">Объект, которому принадлежит это свойство.Если свойство статическое или общее, оно должно иметь значение NULL.</param>
      <param name="propertyName">Имя индексатора.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, которые используются для индексации свойства.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к свойству.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.MemberExpression" />.</returns>
      <param name="expression">Объект, в котором содержится свойство.Для статических свойств допускается значение NULL.</param>
      <param name="type">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, содержащий свойство.</param>
      <param name="propertyName">Свойство для доступа.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к свойству или полю.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойству <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> присвоено значение <paramref name="expression" />, а свойству <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> присвоено значение <see cref="T:System.Reflection.PropertyInfo" /> или <see cref="T:System.Reflection.FieldInfo" />, представляющее поле или свойство, обозначенное с помощью параметра <paramref name="propertyOrFieldName" />.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, чей тип <see cref="P:System.Linq.Expressions.Expression.Type" /> содержит свойство или поле с именем <paramref name="propertyOrFieldName" />.Для статических членов допускается значение NULL.</param>
      <param name="propertyOrFieldName">Имя свойства или поля для доступа.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> или <paramref name="propertyOrFieldName" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Не определено свойство или поле с именем <paramref name="propertyOrFieldName" /> для <paramref name="expression" />.Type или его базовых типов.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий выражение, которое содержит постоянное значение типа <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Quote" />, а для свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> задано указанное значение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>Сокращает данный узел до более простого выражения.Если CanReduce возвращает значение true, данный метод должен вернуть допустимое выражение.Данный метод может вернуть другой узел, который нужно будет уменьшать еще раз.</summary>
      <returns>Сокращенное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>Сокращает данный узел до более простого выражения.Если CanReduce возвращает значение true, данный метод должен вернуть допустимое выражение.Данный метод может вернуть другой узел, который нужно будет уменьшать еще раз.</summary>
      <returns>Сокращенное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>Сокращает выражение до известного типа узла (не являющегося узлом Extension) или возвращает выражение, если оно имеет известный тип.</summary>
      <returns>Сокращенное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее проверку равенства ссылок.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий проверку неравенства ссылок.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий повторное создание исключения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий повторное создание исключения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий повторное создание исключения с заданным типом.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий повторное создание исключения.</returns>
      <param name="type">Новый тип <see cref="T:System.Type" /> выражения.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор return.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Return, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, а при переходе целевой метке передается значение NULL.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор return.Можно указать значение, передаваемое метке при переходе.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, а при переходе целевой метке передается значение <paramref name="value" />.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор return с указанным типом.Можно указать значение, передаваемое метке при переходе.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />, а при переходе целевой метке передается значение <paramref name="value" />.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор return с указанным типом.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Return, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение в параметре <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — значение в параметре <paramref name="type" />, а при переходе целевой метке передается значение NULL.</returns>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию сдвига вправо.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор сдвига вправо не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию сдвига вправо.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор сдвига вправо не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию сдвига вправо.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию сдвига вправо.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию сдвига вправо.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает экземпляр <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>Экземпляр класса <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />, и свойством <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />, для которого задано указанное значение.</returns>
      <param name="variables">Коллекция объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает экземпляр <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>Экземпляр класса <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />, и свойством <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />, для которого задано указанное значение.</returns>
      <param name="variables">Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемых для заполнения коллекции <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор вычитания не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор вычитания не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, не содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания вычитания, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания вычитания, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания вычитания, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию арифметического вычитания, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор вычитания не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию арифметического вычитания, содержащую проверку переполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />, а для свойств <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен null, и оператор вычитания не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор switch с вариантом case по умолчанию.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">Значение, проверяемое для каждого варианта case.</param>
      <param name="defaultBody">Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.</param>
      <param name="cases">Набор вариантов case для данного выражения switch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор switch с вариантом case по умолчанию.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">Значение, проверяемое для каждого варианта case.</param>
      <param name="defaultBody">Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.</param>
      <param name="comparison">Используемый метод проверки равенства.</param>
      <param name="cases">Набор вариантов case для данного выражения switch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор switch с вариантом case по умолчанию.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">Значение, проверяемое для каждого варианта case.</param>
      <param name="defaultBody">Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.</param>
      <param name="comparison">Используемый метод проверки равенства.</param>
      <param name="cases">Набор вариантов case для данного выражения switch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор switch без варианта case по умолчанию.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="switchValue">Значение, проверяемое для каждого варианта case.</param>
      <param name="cases">Набор вариантов case для данного выражения switch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор switch с вариантом case по умолчанию.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="type">Тип результата оператора switch.</param>
      <param name="switchValue">Значение, проверяемое для каждого варианта case.</param>
      <param name="defaultBody">Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.</param>
      <param name="comparison">Используемый метод проверки равенства.</param>
      <param name="cases">Набор вариантов case для данного выражения switch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор switch с вариантом case по умолчанию.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
      <param name="type">Тип результата оператора switch.</param>
      <param name="switchValue">Значение, проверяемое для каждого варианта case.</param>
      <param name="defaultBody">Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.</param>
      <param name="comparison">Используемый метод проверки равенства.</param>
      <param name="cases">Набор вариантов case для данного выражения switch.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchCase" /> для использования в объекте <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
      <param name="body">Тело варианта case.</param>
      <param name="testValues">Тестовые значения варианта case.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchCase" /> для использования в выражении <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
      <param name="body">Тело варианта case.</param>
      <param name="testValues">Тестовые значения варианта case.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>Создает экземпляр <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, для свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> которого задано указанное значение.</returns>
      <param name="fileName">Объект <see cref="T:System.String" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>Создает экземпляр <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, для свойств <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> и <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> которого задано указанное значение.</returns>
      <param name="fileName">Объект <see cref="T:System.String" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</param>
      <param name="language">Объект <see cref="T:System.Guid" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>Создает экземпляр <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, для свойств <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> и <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> которого задано указанное значение.</returns>
      <param name="fileName">Объект <see cref="T:System.String" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</param>
      <param name="language">Объект <see cref="T:System.Guid" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.</param>
      <param name="languageVendor">Объект <see cref="T:System.Guid" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Создает экземпляр <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, для свойств <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> и <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> которого задано указанное значение.</returns>
      <param name="fileName">Объект <see cref="T:System.String" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</param>
      <param name="language">Объект <see cref="T:System.Guid" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.</param>
      <param name="languageVendor">Объект <see cref="T:System.Guid" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />.</param>
      <param name="documentType">Объект <see cref="T:System.Guid" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий создание исключения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее исключение.</returns>
      <param name="value">Объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий создание исключения с заданным типом.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее исключение.</returns>
      <param name="value">Объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="type">Новый тип <see cref="T:System.Type" /> выражения.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>Возвращает текстовое представление выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Текстовое представление <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.TryExpression" />, представляющий блок try с произвольным числом операторов catch и без блоков fault и finally.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">Тело блока try.</param>
      <param name="handlers">Массив из ноля или более выражений <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющих операторы catch, которые следует связать с блоком try.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.TryExpression" />, представляющий блок try с произвольным числом операторов catch и блоком finally.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">Тело блока try.</param>
      <param name="finally">Тело блока finally.</param>
      <param name="handlers">Массив из ноля или более выражений <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющих операторы catch, которые следует связать с блоком try.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.TryExpression" />, представляющий блок try с блоком fault и без операторов catch.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">Тело блока try.</param>
      <param name="fault">Тело блока fault.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.TryExpression" />, представляющий блок try с блоком finally и без операторов catch.</summary>
      <returns>Созданный объект <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
      <param name="body">Тело блока try.</param>
      <param name="finally">Тело блока finally.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>Создает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата System.Action с определенным типом аргументов.</summary>
      <returns>Значение true, если тип делегата System.Action создан для определенного <paramref name="typeArgs" />; в противном случае — значение false.</returns>
      <param name="typeArgs">Массив от объектов Type, указывающих аргументы типа для типа делегата System.Action.</param>
      <param name="actionType">После выполнения возврата этим методом содержит универсальный тип делегата System.Action с определенным типом аргументов.Содержит NULL, если ни один универсальный делегат System.Action не соответствует <paramref name="typeArgs" />.Этот параметр передается неинициализированным.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>Создает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата System.Func с определенным типом аргументов.Аргумент последнего типа задает тип возврата созданного делегата.</summary>
      <returns>Значение true, если тип делегата System.Func создан для определенного <paramref name="typeArgs" />; в противном случае — значение false.</returns>
      <param name="typeArgs">Массив объектов Type, указывающих аргументы типа для типа делегата System.Func.</param>
      <param name="funcType">После выполнения возврата этим методом содержит универсальный тип делегата System.Func с определенным типом аргументов.Содержит NULL, если ни один универсальный делегат System.Func не соответствует <paramref name="typeArgs" />.Этот параметр передается неинициализированным.</param>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="T:System.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий преобразование явной ссылки или упаковки, где в случае неудачного преобразования передается значение null.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" />, а для свойств <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.Expression.Type" /> заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> или <paramref name="type" /> — null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />, сравнивающее идентификацию типов времени выполнения.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" />, а для свойств <see cref="T:System.Linq.Expressions.Expression" /> и <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="type">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" />, а для свойств <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> и <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />.</param>
      <param name="type">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> или <paramref name="type" /> — null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий унарную операцию "плюс".</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />, а для свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> задано указанное значение.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Унарный плюс-оператор не определен для типа <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий унарную операцию "плюс".</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />, а для свойств <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> заданы указанные значения.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно null, и метод, который он представляет, возвращает void, не является static (Shared в Visual Basic) или не принимает ровно один аргумент.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равно null, а оператор унарного плюса не определен для типа <paramref name="expression" />.Type.-или-Тип <paramref name="expression" />.Type (или соответствующий тип, не поддерживающий значение null, если он является типом, поддерживающим значение null) не назначается типу аргумента метода, представленного <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий явную распаковку-преобразование.</summary>
      <returns>Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" /> для распаковки-преобразования.</param>
      <param name="type">Новый тип <see cref="T:System.Type" /> выражения.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.</summary>
      <returns>Узел <see cref="T:System.Linq.Expressions.ParameterExpression" /> с указанными именем и типом.</returns>
      <param name="type">Тип параметра или переменной.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.</summary>
      <returns>Узел <see cref="T:System.Linq.Expressions.ParameterExpression" /> с указанными именем и типом.</returns>
      <param name="type">Тип параметра или переменной.</param>
      <param name="name">Имя параметра или переменной.Это имя используется только для целей отладки и печати.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Сокращает узел и вызывает делегат-посетитель для сокращенного выражения.Данный метод создает исключение, если узел невозможно сократить.</summary>
      <returns>Просмотренное выражение или выражение, которое должно заменить его в дереве.</returns>
      <param name="visitor">Экземпляр <see cref="T:System.Func`2" />.</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>Представляет строго типизированное лямбда-выражение в виде структуры данные в форме дерева выражений.Данный класс не наследуется.</summary>
      <typeparam name="TDelegate">Тип делегата, который представляет <see cref="T:System.Linq.Expressions.Expression`1" />.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>Компилирует лямбда-выражение, описанное с помощью дерева выражений в исполняемый код и создает делегат, представляющий лямбда-выражение.</summary>
      <returns>Делегат типа <paramref name="TDelegate" />, который представляет скомпилированное лямбда-выражение, описанное с помощью <see cref="T:System.Linq.Expressions.Expression`1" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="body">Свойство <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> результата.</param>
      <param name="parameters">Свойство <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> результата. </param>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>Описывает типы узлов для узлов дерева выражений.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>Операция арифметического сложения, например a + b, без проверки переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>Операция составного присваивания арифметического сложения, например (a += b), без проверки переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>Операция составного присваивания арифметического сложения, например (a += b), с проверкой переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>Операция арифметического сложения, например (a + b), с проверкой переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>Побитовая или логическая операция AND, например (a &amp; b) в C# и (a And b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>Условная операция AND, вычисляющая второй операнд, только если первый операнд имеет значение true.Она соответствует (a &amp;&amp; b) в C# и (a AndAlso b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>Побитовая или логическая операция составного присваивания AND, например (a &amp;= b) в C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>Операция индексации в одномерном массиве, например array[index] в C# или array(index) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>Операция получения длины одномерного массива, например array.Length.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>Операция присваивания, например (a = b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>Блок выражений.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>Вызов метода, например выражение obj.sampleMethod().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>Узел, представляющий операцию объединения null, например (a ?? b) в C# или If(a, b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>Условная операция, например a &gt; b ? a : b в C# или If(a &gt; b, a, b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>Константа.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>Операция приведения или преобразования, например (SampleType)obj в C# или CType(obj, SampleType) в Visual Basic.Если преобразованное значение слишком велико для целевого типа, в ходе числового преобразования не создается исключение.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>Операция приведения или преобразования, например (SampleType)obj в C# или CType(obj, SampleType) в Visual Basic.Если преобразованное значение не соответствует целевому типу, в ходе числового преобразования создается исключение.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>Сведения для отладки.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>Унарная операция декремента, такая как (a - 1) в C# и Visual Basic.Сам объект a не должен быть изменен.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>Значение по умолчанию.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>Операция деления, например (a / b), для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>Операция составного присваивания арифметического деления, например (a /= b), для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>Динамическая операция.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>Узел, представляющий сравнение для определения равенства, например (a == b) в C# или (a = b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>Побитовая или логическая операция XOR, например (a ^ b) в C# и (a Xor b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>Побитовая или логическая операция составного присваивания XOR, например (a ^= b) в C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>Выражение расширения.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>Выражение "перейти к", например goto Label в C# или GoTo Label в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>Числовое сравнение "больше, чем", например (a &gt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>Сравнение "больше или равно", например (a &gt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>Унарная операция инкремента, такая как (a + 1) в C# и Visual Basic.Сам объект a не должен быть изменен.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>Операция индекса или операция, осуществляющая доступ к свойству, которое принимает аргументы. </summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>Операция, вызывающая делегат или лямбда-выражение, например sampleDelegate.Invoke().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>Значение условия false.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>Значение условия true.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>Метка.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>Лямбда-выражение, например a =&gt; a + a в C# или Function(a) a + a в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>Побитовая операция сдвига влево, например (a &lt;&lt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>Побитовая операция составного присваивания сдвига влево, например (a &lt;&lt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>Числовое сравнение "меньше, чем", например (a &lt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>Сравнение "меньше или равно", например (a &lt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>Операция создания нового объекта <see cref="T:System.Collections.IEnumerable" /> и его инициализации из списка элементов, например new List&lt;SampleType&gt;(){ a, b, c } в C# или Dim sampleList = { a, b, c } в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>Цикл, например for или while.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>Операция чтения из поля или свойства, например obj.SampleProperty.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>Операция создания нового объекта и инициализации одного или нескольких его членов из списка элементов, например new Point { X = 1, Y = 2 } в C# или New Point With {.X = 1, .Y = 2} в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>Операция получения арифметического остатка, например (a % b) в C# или (a Mod b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>Операция составного присваивания арифметического остатка, например (a %= b) в C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>Операция арифметического умножения, например (a * b), без проверки переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>Операция составного присваивания арифметического умножения, например (a *= b), без проверки переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>Операция составного присваивания арифметического умножения, например (a *= b), с проверкой переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>Операция арифметического умножения, например (a * b), с проверкой переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>Операция арифметического изменения знака, например (-a).Сам объект a не должен быть изменен.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>Операция арифметического изменения знака, например (-a), с проверкой переполнения.Сам объект a не должен быть изменен.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>Операция вызова конструктора для создания нового объекта, например new SampleType().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>Операция создания нового массива, где указаны границы всех измерений, например new SampleType[dim1, dim2] в C# или New SampleType(dim1, dim2) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>Операция создания нового одномерного массива и его инициализации из списка элементов, например new SampleType[]{a, b, c} в C# или New SampleType(){a, b, c} в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>Побитовая операция дополнения или логического отрицания.В C# она эквивалентна операциям (~a) для целочисленных типов и (!a) для логических значений.В Visual Basic она эквивалентна операции (Not a).Сам объект a не должен быть изменен.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>Операция определения неравенства, например (a != b) в C# или (a &lt;&gt; b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>Операция дополнения до единицы, например (~a) в C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>Побитовая или логическая операция OR, например (a | b) в C# и (a Or b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>Побитовая или логическая операция составного присваивания OR, например (a |= b) в C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>Сокращенная условная операция OR, например (a || b) в C# или (a OrElse b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>Ссылка на параметр или переменную, определенную в контексте выражения.Дополнительные сведения см. в разделе <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>Унарное постфиксное уменьшение, например (a--).Сам объект a должен быть изменен.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>Унарное постфиксное увеличение, например (a++).Сам объект a должен быть изменен.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>Математическая операция возведения числа в степень, например (a ^ b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>Операция составного присваивания возведения числа в степень, например (a ^= b) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>Унарное префиксное уменьшение, например (--a).Сам объект a должен быть изменен.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>Унарное префиксное увеличение, например (++a).Сам объект a должен быть изменен.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>Выражение, содержащее постоянное значение типа <see cref="T:System.Linq.Expressions.Expression" />.Узел <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> может содержать ссылку на параметры, определенные в контексте представленного выражения.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>Битовая операция сдвига вправо, например (a &gt;&gt; b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>Битовая операция составного присваивания сдвига вправо, например (a &gt;&gt;= b).</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>Список переменных времени выполнения.Дополнительные сведения см. в разделе <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>Операция вычитания, например (a - b), без проверки переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>Операция составного присваивания арифметического вычитания, например (a -= b), без проверки переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>Операция составного присваивания арифметического вычитания, например (a -= b), с проверкой переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>Операция арифметического вычитания, например (a - b), с проверкой переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>Операция переключения, например switch в C# или Select Case в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>Операция создания исключения, например throw new Exception().</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>Выражение try-catch.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>Преобразование явной ссылки или упаковки, где в случае неудачного преобразования предоставляется null, например (obj as SampleType) в C# или TryCast(obj, SampleType) в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>Проверка совпадения типа.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>Проверка типа, например obj is SampleType в C# или TypeOf obj is SampleType в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>Унарная операция "плюс", например (+a).Результатом заранее определенной унарной операции "плюс" является просто значение операнда, но определенные пользователем реализации могут иметь нетривиальные результаты.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>Операция распаковки-преобразования типа значения, например инструкции unbox и unbox.any в MSIL. </summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>Представляет метод просмотра или перезаписи деревьев выражений.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Linq.Expressions.ExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>Распределяет список выражений среди одного или нескольких более узких методов просмотра в классе.</summary>
      <returns>Измененный список выражений в случае изменения любого из его элементов; в противном случае возвращается исходный список выражений.</returns>
      <param name="nodes">Выражения, которые необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>Просматривает все узлы в коллекции, используя указанный метод просмотра элементов.</summary>
      <returns>Измененный список узлов в случае изменения любого из его элементов; в противном случае возвращается исходный список узлов.</returns>
      <param name="nodes">Узлы, которое необходимо просмотреть.</param>
      <param name="elementVisitor">Делегат, который просматривает отдельный элемент, при необходимости заменяя его новым элементом.</param>
      <typeparam name="T">Тип узлов.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>Распределяет выражение среди одного или нескольких более узких методов просмотра в классе.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>Просматривает выражение, приводя результат к типу исходного выражения.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="nodes">Выражение, которое необходимо просмотреть.</param>
      <param name="callerName">Имя метода вызова; используется для создания более подробного сообщения об ошибке.</param>
      <typeparam name="T">Тип выражения.</typeparam>
      <exception cref="T:System.InvalidOperationException">Метод посещения данного узла вернул другой тип.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>Просматривает выражение, приводя результат к типу исходного выражения.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <param name="callerName">Имя метода вызова; используется для создания более подробного сообщения об ошибке.</param>
      <typeparam name="T">Тип выражения.</typeparam>
      <exception cref="T:System.InvalidOperationException">Метод посещения данного узла вернул другой тип.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.BinaryExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.BlockExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.CatchBlock" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.ConditionalExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>Просматривает выражение <see cref="T:System.Linq.Expressions.ConstantExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>Просматривает выражение <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>Просматривает выражение <see cref="T:System.Linq.Expressions.DefaultExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.ElementInit" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>Просматривает дочерний элемент выражения расширения.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.IndexExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.InvocationExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.LabelExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>Просматривает выражение <see cref="T:System.Linq.Expressions.LabelTarget" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.Expression`1" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <typeparam name="T">Тип данного делегата.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.ListInitExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.LoopExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MemberExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MemberAssignment" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MemberListBinding" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MemberMemberBinding" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.NewExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.NewArrayExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>Просматривает выражение <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.SwitchCase" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.TryExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.UnaryExpression" />.</summary>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>Представляет безусловный переход.Включает инструкции return, break и continue, а также другие переходы.</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>Вид выражения "go to".Используется только в информационных целях.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpressionKind" />, представляющий вид выражения "go to".</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>Целевая метка, к которой нужно перейти из данного узла.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий целевую метку для данного узла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.GotoExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="target">Свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> результата. </param>
      <param name="value">Свойство <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> результата. </param>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>Значение, передаваемое целевому выражению, или NULL, если целевой тип — System.Void.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий значение, переданное целевому выражению, или NULL.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>Задает тип перехода, представляемый этим выражением <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор break.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор continue.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее переход в некоторую позицию.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор return.</summary>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>Представляет индексацию свойства или массива.</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>Получает аргументы, которые будут использоваться для индексации свойства или массива.</summary>
      <returns>Доступная только для чтения коллекция, содержащая аргументы, которые будут использоваться для индексации свойства или массива.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>Получает объект <see cref="T:System.Reflection.PropertyInfo" /> для свойства, если выражение представляет индексированное свойство; в противном случае возвращает значение NULL.</summary>
      <returns>Объект <see cref="T:System.Reflection.PropertyInfo" /> для свойства, если выражение представляет индексированное свойство; в противном случае — значение NULL.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>Объект для индексации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее индексируемый объект.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.IndexExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="object">Свойство <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> результата.</param>
      <param name="arguments">Свойство <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>Представляет выражение, применяющее делегата или лямбда-выражения к списку выражений аргумента.</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>Получает аргументы, к которым применяется делегат или лямбда-выражение.</summary>
      <returns>Коллекция <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих аргументы, к которым применяется делегат.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>Получает делегата или лямбда-выражение для применения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий делегата для применения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>Возвращает тип узла данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Свойство <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="expression">Свойство <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> результата.</param>
      <param name="arguments">Свойство <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>Представляет метку, которую можно поместить в контекст любого выражения <see cref="T:System.Linq.Expressions.Expression" />.При перемещении к этой метке будет получено значение соответствующего выражения <see cref="T:System.Linq.Expressions.GotoExpression" />.В противном случае будет получено значение <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" />.Если тип <see cref="T:System.Type" /> имеет значение System.Void, никакое значение не предоставляется.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>Значение выражения <see cref="T:System.Linq.Expressions.LabelExpression" />, если метка была достигнута с помощью стандартного потока управления (например, без применения оператора goto).</summary>
      <returns>Объект выражения, представляющий значение объекта <see cref="T:System.Linq.Expressions.LabelExpression" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, с которым связана данная метка.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, с которым связана данная метка.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.LabelExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="target">Свойство <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> результата.</param>
      <param name="defaultValue">Свойство <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>Служит для представления целевой точки выражения <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>Получает имя метки.</summary>
      <returns>Имя метки.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>Возвращает объект <see cref="T:System.String" />, который представляет текущий объект <see cref="T:System.Object" />.</summary>
      <returns>Возвращает <see cref="T:System.String" />, который представляет текущий <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>Тип значения, которое передается при переходе к метке (или <see cref="T:System.Void" />, если значение передавать не нужно).</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип значения, которое передается при переходе к метке, или <see cref="T:System.Void" />, если значение передавать не нужно.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>Описывает лямбда-выражение.Оно захватывает блок кода, сходный с телом метода .NET.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>Возвращает тело лямбда-выражения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, который предоставляет тело лямбда-выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>Производит делегата, который представляет лямбда-выражение.</summary>
      <returns>Объект <see cref="T:System.Delegate" />, содержащий скомпилированную версию лямбда-выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>Получает имя лямбда-выражения.</summary>
      <returns>Имя лямбда-выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>Возвращает параметры лямбда-выражения.</summary>
      <returns>Коллекция <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.ParameterExpression" />, предоставляющих параметры лямбда-выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>Получает возвращаемый тип лямбда-выражения.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип лямбда-выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>Получает значение, которое определяет, можно ли компилировать лямбда-выражение с оптимизацией с помощью вызова с префиксом tail.</summary>
      <returns>Значение true, если лямбда-выражение будет компилироваться с оптимизацией с помощью вызова с префиксом tail; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>Представляет вызов конструктора, который содержит инициализатор коллекции.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>Получает значение, которое указывает, можно ли сократить узел дерева выражений.</summary>
      <returns>Значение true, если узел можно сократить; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>Получает инициализаторы элементов, которые используются для инициализации коллекции.</summary>
      <returns>Коллекция <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.ElementInit" />, представляющих элементы, которые используются для инициализации коллекции.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>Возвращает выражение содержащее вызов в конструктор типа коллекции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов в конструктор типа коллекции.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>Сокращает узел бинарных выражений до более простого выражения.</summary>
      <returns>Сокращенное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="newExpression">Свойство <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> результата.</param>
      <param name="initializers">Свойство <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>Представляет бесконечный цикл.Может быть прерван с помощью оператора break.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.Expression" />, являющийся телом цикла.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, являющийся телом цикла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, который используется телом цикла в качестве целевого выражения оператора break.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, который используется телом цикла в качестве целевого выражения оператора break.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, который используется телом цикла в качестве целевого выражения оператора continue.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, который используется телом цикла в качестве целевого выражения оператора continue.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>Возвращает тип узла данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Свойство <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.LoopExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="breakLabel">Свойство <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> результата.</param>
      <param name="continueLabel">Свойство <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> результата.</param>
      <param name="body">Свойство <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>Представляет операцию присваивания для поля или свойства объекта.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>Получает выражение для назначения полю или свойству.</summary>
      <returns>Тип <see cref="T:System.Linq.Expressions.Expression" />, представляющий значение для назначения полю или свойству.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="expression">Свойство <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>Обеспечивает базовый класс, производными от которого являются классы, представляющие привязки, используемые для инициализации элементов созданных производных объекта.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <param name="type">Тип <see cref="T:System.Linq.Expressions.MemberBindingType" />, дискриминирующий тип представленной привязки.</param>
      <param name="member">Тип <see cref="T:System.Reflection.MemberInfo" />, представляющий поле или свойство для инициализации.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>Получает представленный тип привязки.</summary>
      <returns>Одно из значений <see cref="T:System.Linq.Expressions.MemberBindingType" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>Получает поле или свойство для инициализации.</summary>
      <returns>Тип <see cref="T:System.Reflection.MemberInfo" />, представляющий поле или свойство для инициализации.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>Возвращает текстовое представление выражения <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <returns>Текстовое представление <see cref="T:System.Linq.Expressions.MemberBinding" />.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>Описывает типы привязки, которые используются в объектах <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>Привязка, представляющая инициализацию элемента со значением выражения.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>Привязка, представляющая инициализацию элемента типа <see cref="T:System.Collections.IList" /> или <see cref="T:System.Collections.Generic.ICollection`1" /> из списка элементов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>Привязка, представляющаяся рекуррентную инициализацию элементов элемента.</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>Представляет доступ к полю или свойству.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>Получает содержащийся объект поля или свойства.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, который представляет содержащийся объект поля или свойства.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>Получает поле или свойство для доступа.</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" />, представляющий поле или свойство для доступа.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="expression">Свойство <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>Представляет вызов конструктора и инициализацию одного или нескольких членов нового объекта.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>Получает привязки, описывающие способы инициализации членов созданного объекта.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.MemberBinding" />, описывающих способы инициализации членов.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>Получает значение, которое указывает, можно ли сократить узел дерева выражений.</summary>
      <returns>Значение true, если узел можно сократить; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>Возвращает выражение, представляющее вызов конструктора.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewExpression" />, представляющее вызов конструктора.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>Возвращает тип узла для данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Свойство <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>Сокращает выражение <see cref="T:System.Linq.Expressions.MemberInitExpression" /> до более простого выражения. </summary>
      <returns>Сокращенное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="newExpression">Свойство <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> результата.</param>
      <param name="bindings">Свойство <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>Предоставляет инициализацию элементов коллекции созданного объекта.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>Предоставляет инициализаторы элементов для инициализации коллекции элементов созданного объекта.</summary>
      <returns>Коллекция <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.ElementInit" /> для инициализации элемента коллекции.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="initializers">Свойство <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>Предоставляет инициализацию элементов элемента созданного объекта.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>Получает привязки, описывающие способы инициализации элементов элемента.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> из объектов <see cref="T:System.Linq.Expressions.MemberBinding" />, описывающих способы инициализации элементов элемента.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="bindings">Свойство <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>Представляет вызов к статическому методу или методу экземпляра.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>Получает коллекцию выражений, представляющих аргументы вызванного метода.</summary>
      <returns>Коллекция <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих аргументы вызванному методу.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>Получает <see cref="T:System.Reflection.MethodInfo" /> для вызываемого метода.</summary>
      <returns>Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий вызванный метод.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>Получает выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее экземпляр для вызовов методов экземпляра или NULL для вызовов статических методов.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, предоставляющий получающий объект метода.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="object">Свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> результата.</param>
      <param name="arguments">Свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>Представляет создание нового массива и возможную инициализацию элемента нового массива.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>Получает границы массива, если значение свойства <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равно <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, или значения используются для инициализации элементов нового массива, если значение свойства <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равно <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />.</summary>
      <returns>Коллекция <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих границы массива или значения инициализации.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="expressions">Свойство <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>Представляет вызов конструктора.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>Получает аргументы для конструктора.</summary>
      <returns>Коллекция объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих аргументы конструктору.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>Получает вызванный конструктор.</summary>
      <returns>
        <see cref="T:System.Reflection.ConstructorInfo" />, представляющий вызванный конструктор.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>Получает элементы, которые могут извлечь значения полей, инициализированных с помощью аргументов конструктора.</summary>
      <returns>Коллекция объектов <see cref="T:System.Reflection.MemberInfo" />, представляющих элементы, которые могут извлечь значения полей, инициализированных с помощью аргументов конструктора.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.NewExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="arguments">Свойство <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>Представляет именованное выражение параметра.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла.Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>Результат посещения этого узла.</returns>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>Указывает, что данное выражение ParameterExpression должно рассматриваться в качестве параметра ByRef.</summary>
      <returns>True, если данный параметр ParameterExpression является параметром ByRef; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>Получает имя параметра или переменной.</summary>
      <returns>
        <see cref="T:System.String" />, где содержится имя параметра.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>Выражение, которое предоставляет разрешения среды выполнения на чтение и запись переменных.</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>Возвращает тип узла для данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Свойство <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="variables">Свойство <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> результата.</param>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>Переменные или параметры, к которым среда выполнения предоставляет доступ.</summary>
      <returns>Доступная только для чтения коллекция, содержащая параметры, к которым средой выполнения будет предоставлен доступ.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>Представляет один из вариантов для выражения <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>Получает тело блока case.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока case.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>Получает значение для данного блока case.Блок case для выполнения выбирается, когда свойство <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> совпадает с одним из этих значений.</summary>
      <returns>Доступная только для чтения коллекция значений данного блока case.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>Возвращает объект <see cref="T:System.String" />, который представляет текущий объект <see cref="T:System.Object" />.</summary>
      <returns>Возвращает <see cref="T:System.String" />, который представляет текущий <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="testValues">Свойство <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> результата.</param>
      <param name="body">Свойство <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>Представляет выражение управления, которое обрабатывает выбор из нескольких вариантов путем передачи управления объекту <see cref="T:System.Linq.Expressions.SwitchCase" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>Получает коллекцию объектов <see cref="T:System.Linq.Expressions.SwitchCase" /> для переключателя.</summary>
      <returns>Коллекция объектов <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>Получает метод проверки равенства, если он существует.</summary>
      <returns>Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод проверки равенства.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>Получает процедуру проверки для выбора варианта.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий процедуру проверки для выбора варианта.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>Возвращает тип узла для данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Свойство <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>Получает процедуру проверки для выбора варианта.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий процедуру проверки для выбора варианта.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="switchValue">Свойство <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> результата.</param>
      <param name="cases">Свойство <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> результата.</param>
      <param name="defaultBody">Свойство <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>Сохраняет информацию, необходимую для создания информации отладочных символов для исходного файла, в частности имени файла и уникального идентификатора языка.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>Возвращает уникальный идентификатор типа документа, если он существует.Для текстовых файлов по умолчанию принимает значение GUID.</summary>
      <returns>Уникальный идентификатор типа документа.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>Имя исходного файла.</summary>
      <returns>Строковое представление имени исходного файла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>Возвращает уникальный идентификатор языка, если он существует.</summary>
      <returns>Уникальный идентификатор языка.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>Возвращает уникальный идентификатор поставщика языка, если он существует.</summary>
      <returns>Уникальный идентификатор поставщика языка.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>Представляет блок try/catch/finally/fault.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока try.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока try.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока fault.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока fault.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока finally.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока finally.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>Получает коллекцию выражений <see cref="T:System.Linq.Expressions.CatchBlock" />, связанных с блоком try.</summary>
      <returns>Коллекция выражений <see cref="T:System.Linq.Expressions.CatchBlock" />, связанных с блоком try.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.TryExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="body">Свойство <see cref="P:System.Linq.Expressions.TryExpression.Body" /> результата.</param>
      <param name="handlers">Свойство <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> результата.</param>
      <param name="finally">Свойство <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> результата.</param>
      <param name="fault">Свойство <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>Представляет операцию между выражением и типом.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>Получает операнд выражения операции проверки типа.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, который предоставляет операнд выражения операции проверки типа.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>Возвращает тип узла для данного выражения.При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Свойство <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>Получает операнд типа операции проверки типа.</summary>
      <returns>Объект <see cref="T:System.Type" />, который предоставляет операнд типа операции проверки типа.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="expression">Свойство <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> результата.</param>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>Представляет выражение, содержащее унарный оператор.</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>Получает значение, которое указывает, можно ли сократить узел дерева выражений.</summary>
      <returns>Значение true, если узел можно сократить; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>Возвращает значение, указывающее, представляет ли узел дерева выражения ликвидированный вызов оператора.</summary>
      <returns>true, если узел представляет удаленный вызов; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>Возвращает значение, указывающее, представляет ли узел дерева выражения ликвидированный вызов оператора, тип возврата которого удален для типа со значением NULL.</summary>
      <returns>true, если тип возврата оператора удален до типа со значением NULL; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>Получает реализацию метода для унарной операции.</summary>
      <returns>Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>Получает операнд унарной операции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, который предоставляет операнд унарной операции.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>Сокращает узел выражений до более простого выражения. </summary>
      <returns>Сокращенное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы.Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
      <param name="operand">Свойство <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> результата.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>Базовый класс динамического источника вызова.Этот тип используется в качестве типа параметра для целей динамического источника вызова.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>Класс, предназначенный для привязки динамических операций к динамическому сайту.</summary>
      <returns>Объект <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, предназначенный для привязки динамических операций.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Создает источник вызова с данными типом делегата и построителем.</summary>
      <returns>Новый источник вызова.</returns>
      <param name="delegateType">Тип делегата источника вызова.</param>
      <param name="binder">Привязчик источника вызова.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>Тип динамического сайта.</summary>
      <typeparam name="T">Тип делегата.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Создает экземпляр динамического источника вызова, инициализированного с помощью привязчика, ответственного за привязку среды выполнения динамических операций этого источника вызова.</summary>
      <returns>Новый экземпляр динамического источника вызова.</returns>
      <param name="binder">Привязчик, предназначенный для привязки среды выполнения динамических операций этого источника вызова.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>Кэш уровня 0 — специальный делегат на основе журнала сайта.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>Делегат обновления.Вызывается при отсутствии на динамическом сайте совпадений в кэше.</summary>
      <returns>Делегат обновления.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>Класс, предназначенный для привязки динамических операций к динамическому источнику вызова в среде выполнения.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Выполняет привязку динамической операции к набору аргументов в среде выполнения.</summary>
      <returns>Выражение, проверяющее аргументы динамической операции и выполняющее эту операцию, если проверки пройдены успешно.Если проверки не пройдены успешно при последующих выполнениях динамической операции, метод Bind вызывается еще раз, чтобы создать новый объект <see cref="T:System.Linq.Expressions.Expression" /> для новых типов аргументов.</returns>
      <param name="args">Массив аргументов динамической операции.</param>
      <param name="parameters">Массив экземпляров <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющих параметры источника вызова в процессе привязки.</param>
      <param name="returnLabel">Элемент LabelTarget, возвращающий результат динамической привязки.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>Обеспечивает низкоуровневую поддержку привязки в среде выполнения.Этот метод можно переопределять в классах, обеспечивая прямой делегат для реализации правила.Это позволяет сохранять правила на диск, обеспечивать специализированные правила в среде выполнения и предоставлять альтернативную политику кэширования.</summary>
      <returns>Новый делегат, заменяющий целевой элемент источника вызова.</returns>
      <param name="site">Источник вызова, для которого выполняется привязка.</param>
      <param name="args">Аргументы для привязки.</param>
      <typeparam name="T">Тип целевого элемента источника вызова.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>Добавляет целевой элемент в кэш известных целевых элементов.Целевые элементы в кэше сканируются перед вызовом метода BindDelegate для получения нового правила.</summary>
      <param name="target">Целевой делегат, добавляемый в кэш.</param>
      <typeparam name="T">Тип добавляемого целевого элемента.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>Получает метку, с помощью которой можно обеспечить обновление привязки.Она указывает, что привязка выражения более недействительна.Обычно используется в случае изменения "версии" динамического объекта.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку, с помощью которой можно обеспечить обновление привязки.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>Класс, содержащий вспомогательные методы для источников вызова динамической среды выполнения (DLR).</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>Проверяет, используется ли объект <see cref="T:System.Reflection.MethodBase" /> в качестве внутреннего объекта среды DLR (в этом случае он не должен отображаться в стеке кода языка).</summary>
      <returns>Значение true, если вводимый объект <see cref="T:System.Reflection.MethodBase" /> используется в качестве внутреннего объекта среды DLR (в этом случае он не должен отображаться в стеке кода языка).В противном случае — значение false.</returns>
      <param name="mb">Вводимый объект  <see cref="T:System.Reflection.MethodBase" /></param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>Указывает, что использование объекта <see cref="T:System.Object" /> с элементом следует рассматривать как динамически выполняемый тип.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" />.</summary>
      <param name="transformFlags">Указывает с помощью префикса обхода конструкции типа, какие экземпляры <see cref="T:System.Object" /> следует считать динамически выполняемыми типами.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>Указывает с помощью префикса обхода конструкции типа, какие экземпляры <see cref="T:System.Object" /> следует считать динамически выполняемыми типами.</summary>
      <returns>Список объектов <see cref="T:System.Object" />, которые следует рассматривать как динамически выполняемые типы.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExecutionScope">
      <summary>Представляет состояние динамически создаваемого метода во время выполнения.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateDelegate(System.Int32,System.Object[])">
      <summary>Создает делегат, который может использоваться для выполнения динамически создаваемого метода.</summary>
      <returns>
        <see cref="T:System.Delegate" />, который может выполнять динамически создаваемый метод.</returns>
      <param name="indexLambda">Индекс объекта, в котором хранится информация о связанном лямбда-выражении динамического метода.</param>
      <param name="locals">Массив, содержащий поднятые локальные переменные из родительского контекста.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.CreateHoistedLocals">
      <summary>Создает массив для хранения поднятых локальных переменных.</summary>
      <returns>Массив для хранения поднятых локальных переменных.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Globals">
      <summary>Представляет нетривиальные константы и локально выполняемые выражения, на которые ссылается динамически создаваемый метод.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExecutionScope.IsolateExpression(System.Linq.Expressions.Expression,System.Object[])">
      <summary>Освобождает указанное дерево выражений от ссылок на внешние параметры, заменяя параметр его текущим значением.</summary>
      <returns>Дерево выражений, которое не содержит ссылок на внешние параметры.</returns>
      <param name="expression">Дерево выражений, которое требуется освободить от ссылок на внешние параметры.</param>
      <param name="locals">Массив, содержащий поднятые локальные переменные.</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Locals">
      <summary>Представляет поднятые локальные переменные из родительского контекста.</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.ExecutionScope.Parent">
      <summary>Представляет область выполнения вызывающего делегата.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>Определяет свойство для доступа к значению, на которое ссылается объект.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>Получает или задает значение, на которое ссылается объект.</summary>
      <returns>Значение, на которое ссылается объект.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>Содержит ссылку на значение.</summary>
      <typeparam name="T">Тип значения, на которое ссылается <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor"></member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />, используя указанное значение. </summary>
      <param name="value">Значение, на которое будет ссылаться объект <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>Получает или задает значение, на которое ссылается объект <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />.</summary>
      <returns>Значение, на которое ссылается <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>Представляет значение, на которое ссылается объект <see cref="T:System.Runtime.CompilerServices.StrongBox`1" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>Предоставляет управляемую реализацию алгоритма симметричного шифрования AES. </summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.AesManaged" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>Создает объект-дешифратор для алгоритма симметричного шифрования, используя текущий ключ и вектор инициализации.</summary>
      <returns>Объект-дешифратор для алгоритма симметричного шифрования.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Создает объект-дешифратор для алгоритма симметричного шифрования, используя заданный ключ и вектор инициализации.</summary>
      <returns>Объект-дешифратор для алгоритма симметричного шифрования.</returns>
      <param name="key">Секретный ключ, используемый в алгоритме симметричного шифрования.</param>
      <param name="iv">Вектор инициализации, используемый в алгоритме симметричного шифрования.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Вектор инициализации <paramref name=" iv " /> имеет недопустимый размер.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>Создает объект-шифратор для алгоритма симметричного шифрования, используя текущий ключ и вектор инициализации.</summary>
      <returns>Объект-шифратор для алгоритма симметричного шифрования.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Создает объект-шифратор для алгоритма симметричного шифрования, используя заданный ключ и вектор инициализации.</summary>
      <returns>Объект-шифратор для алгоритма симметричного шифрования.</returns>
      <param name="key">Секретный ключ, используемый в алгоритме симметричного шифрования.</param>
      <param name="iv">Вектор инициализации, используемый в алгоритме симметричного шифрования.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Вектор инициализации <paramref name=" iv " /> имеет недопустимый размер.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>Генерирует случайный вектор инициализации для использования в алгоритме симметричного шифрования.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>Генерирует случайный ключ для использования в алгоритме симметричного шифрования.</summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>Получает или задает вектор инициализации для алгоритма симметричного шифрования.</summary>
      <returns>Вектор инициализации, используемый в алгоритме симметричного шифрования.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>Получает или задает секретный ключ для алгоритма симметричного шифрования.</summary>
      <returns>Секретный ключ для алгоритма симметричного шифрования.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>Получает или задает размер секретного ключа (в битах), используемого алгоритмом симметричного шифрования. </summary>
      <returns>Размер ключа (в битах), используемого алгоритмом симметричного шифрования.</returns>
    </member>
    <member name="T:System.Threading.LockRecursionPolicy">
      <summary>Указывает, можно ли несколько раз войти в блокировку из одного и того же потока.</summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.NoRecursion">
      <summary>Если поток пытается войти в блокировку рекурсивно, выдается ошибка. Некоторые классы могут допускать определенные виды рекурсий при активированном параметре. </summary>
    </member>
    <member name="F:System.Threading.LockRecursionPolicy.SupportsRecursion">
      <summary>Допускается рекурсивный вход потока в блокировку. Некоторые классы могут игнорировать эту возможность. </summary>
    </member>
    <member name="T:System.Threading.ReaderWriterLockSlim">
      <summary>Представляет блокировку, используемую для управления доступом к ресурсу, которая позволяет нескольким потокам производить считывание или получать монопольный доступ на запись.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.ReaderWriterLockSlim" /> значениями свойств по умолчанию.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.#ctor(System.Threading.LockRecursionPolicy)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.ReaderWriterLockSlim" /> с указанием политики рекурсии блокировки.</summary>
      <param name="recursionPolicy">Одно из значений перечисления, определяющее политику рекурсии блокировки. </param>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.CurrentReadCount">
      <summary>Возвращает общее количество уникальных потоков, вошедших в блокировку в режиме чтения.</summary>
      <returns>Количество уникальных потоков, вошедших в блокировку в режиме чтения.</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.Dispose">
      <summary>Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Threading.ReaderWriterLockSlim" />.</summary>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterReadLock">
      <summary>Пытается выполнить вход в блокировку в режиме чтения.</summary>
      <exception cref="T:System.Threading.LockRecursionException">Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, а текущий поток уже вошел в режим чтения. -или-Глубина рекурсии превышает емкость счетчика. Это ограничение настолько велико, что оно не должно достигаться приложениями на практике.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock">
      <summary>Пытается выполнить вход в блокировку в обновляемом режиме.</summary>
      <exception cref="T:System.Threading.LockRecursionException">Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, а текущий поток уже вошел в блокировку в любом из режимов. -или-Текущий поток вошел в режим чтения, поэтому попытка войти в обновляемый режим создаст возможность взаимоблокировки. -или-Глубина рекурсии превышает емкость счетчика. Ограничение допускает настолько большое число рекурсивных вхождений, что оно не должно достигаться приложениями на практике.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.EnterWriteLock">
      <summary>Пытается выполнить вход в блокировку в режиме записи.</summary>
      <exception cref="T:System.Threading.LockRecursionException">Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, а текущий поток уже вошел в блокировку в любом из режимов. -или-Текущий поток вошел в режим чтения, поэтому попытка войти в блокировку в обновляемом режиме создаст риск взаимоблокировки. -или-Глубина рекурсии превышает емкость счетчика. Ограничение допускает настолько большое число рекурсивных вхождений, что оно не должно достигаться приложениями на практике.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitReadLock">
      <summary>Уменьшает счетчик глубины рекурсии для режима чтения, и выходит из режима чтения, если значение счетчик принял значение 0 (нуль).</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">Текущий поток не вошел в блокировку в режиме чтения.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitUpgradeableReadLock">
      <summary>Уменьшает счетчик глубины рекурсии для обновляемого режима, и выходит из обновляемого режима, если счетчик принял значение 0 (нуль).</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">Текущий поток не вошел в блокировку в обновляемом режиме.</exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.ExitWriteLock">
      <summary>Уменьшает счетчик глубины рекурсии для режима записи, и выходит из режима записи, если счетчик принял значение 0 (нуль).</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">Текущий поток не вошел в блокировку в режиме записи.</exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsReadLockHeld">
      <summary>Возвращает значение, указывающее, вошел ли текущий поток в блокировку в режиме чтения.</summary>
      <returns>Значение true, если текущий поток вошел в режим чтения, в противном случае – false..</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsUpgradeableReadLockHeld">
      <summary>Возвращает значение, указывающее, вошел ли текущий поток в блокировку в обновляемом режиме. </summary>
      <returns>Значение true, если текущий поток вошел в режим обновления, в противном случае – false.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.IsWriteLockHeld">
      <summary>Возвращает значение, указывающее, вошел ли текущий поток в блокировку в режиме записи.</summary>
      <returns>Значение true, если текущий поток вошел в режим записи, в противном случае – false.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy">
      <summary>Возвращает значение, указывающее политику рекурсии для текущего объекта <see cref="T:System.Threading.ReaderWriterLockSlim" />.</summary>
      <returns>Одно из значений перечисления, определяющее политику рекурсии блокировки.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveReadCount">
      <summary>Возвращает количество раз, которые текущий поток входил в блокировку в режиме чтения, как показатель рекурсии.</summary>
      <returns>0 (нуль), если текущий поток не вошел в режим чтения, 1, если поток вошел в режим чтения, но не вошел в него рекурсивно, или n, если поток вошел в блокировку рекурсивно n - 1 раз.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveUpgradeCount">
      <summary>Возвращает количество раз, которые текущий поток входил в блокировку в обновляемом режиме, как показатель рекурсии.</summary>
      <returns>0 (нуль), если текущий поток не вошел в обновляемый режим, 1, если поток вошел в обновляемый режим, но не вошел в него рекурсивно, или n, если поток вошел в обновляемый режим рекурсивно n - 1 раз.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.RecursiveWriteCount">
      <summary>Возвращает количество раз, которые текущий поток входил в блокировку в режиме записи, как показатель рекурсии.</summary>
      <returns>0 (нуль), если текущий поток, не вошел в режим записи, 1, если поток вошел в режим записи, но не вошел в него рекурсивно, или n, если поток вошел в режим записи рекурсивно n - 1 раз.</returns>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.Int32)">
      <summary>Пытается войти в блокировку в режиме чтения с необязательным указанием времени ожидания целым числом.</summary>
      <returns>Значение true, если вызывающий поток вошел в режим чтения, в противном случае – false.</returns>
      <param name="millisecondsTimeout">Время ожидания в миллисекундах или -1 (<see cref="F:System.Threading.Timeout.Infinite" />) для неограниченного времени ожидания.</param>
      <exception cref="T:System.Threading.LockRecursionException">Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, а текущий поток уже вошел в блокировку. -или-Глубина рекурсии превышает емкость счетчика. Ограничение допускает настолько большое число рекурсивных вхождений, что оно не должно достигаться приложениями на практике.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="millisecondsTimeout" /> меньше нуля, но не равно <see cref="F:System.Threading.Timeout.Infinite" /> (-1), которое является единственным допустимым отрицательным значением. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterReadLock(System.TimeSpan)">
      <summary>Пытается войти в блокировку в режиме чтения с необязательным указанием времени ожидания.</summary>
      <returns>Значение true, если вызывающий поток вошел в режим чтения, в противном случае – false.</returns>
      <param name="timeout">Период ожидания или значение -1 миллисекунда для ожидания неограниченное время. </param>
      <exception cref="T:System.Threading.LockRecursionException">Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, а текущий поток уже вошел в блокировку. -или-Глубина рекурсии превышает емкость счетчика. Ограничение допускает настолько большое число рекурсивных вхождений, что оно не должно достигаться приложениями на практике.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="timeout" /> отрицательное, но оно не равно -1 миллисекунде, которое является единственным допустимым отрицательным значением.-или-Значение <paramref name="timeout" /> больше <see cref="F:System.Int32.MaxValue" /> миллисекунд. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.Int32)">
      <summary>Пытается войти в блокировку в обновляемом режиме с необязательным указанием времени ожидания.</summary>
      <returns>Значение true, если вызывающий поток вошел в режим обновления, в противном случае – false.</returns>
      <param name="millisecondsTimeout">Время ожидания в миллисекундах или -1 (<see cref="F:System.Threading.Timeout.Infinite" />) для неограниченного времени ожидания.</param>
      <exception cref="T:System.Threading.LockRecursionException">Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, а текущий поток уже вошел в блокировку. -или-Текущий поток изначально вошел в блокировку в режиме чтения, поэтому попытка войти в обновляемый режим создаст возможность взаимоблокировки. -или-Глубина рекурсии превышает емкость счетчика. Ограничение допускает настолько большое число рекурсивных вхождений, что оно не должно достигаться приложениями на практике.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="millisecondsTimeout" /> меньше нуля, но не равно <see cref="F:System.Threading.Timeout.Infinite" /> (-1), которое является единственным допустимым отрицательным значением. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLock(System.TimeSpan)">
      <summary>Пытается войти в блокировку в обновляемом режиме с необязательным указанием времени ожидания.</summary>
      <returns>Значение true, если вызывающий поток вошел в режим обновления, в противном случае – false.</returns>
      <param name="timeout">Период ожидания или значение -1 миллисекунда для ожидания неограниченное время.</param>
      <exception cref="T:System.Threading.LockRecursionException">Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, а текущий поток уже вошел в блокировку. -или-Текущий поток изначально вошел в блокировку в режиме чтения, поэтому попытка войти в обновляемый режим создаст возможность взаимоблокировки. -или-Глубина рекурсии превышает емкость счетчика. Ограничение допускает настолько большое число рекурсивных вхождений, что оно не должно достигаться приложениями на практике.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="timeout" /> отрицательное, но оно не равно -1 миллисекунде, которое является единственным допустимым отрицательным значением.-или-Значение <paramref name="timeout" /> больше <see cref="F:System.Int32.MaxValue" /> миллисекунд. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.Int32)">
      <summary>Пытается войти в блокировку в режиме записи с необязательным указанием времени ожидания.</summary>
      <returns>Значение true, если вызывающий поток вошел в режим записи, в противном случае – false.</returns>
      <param name="millisecondsTimeout">Время ожидания в миллисекундах или -1 (<see cref="F:System.Threading.Timeout.Infinite" />) для неограниченного времени ожидания.</param>
      <exception cref="T:System.Threading.LockRecursionException">Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, а текущий поток уже вошел в блокировку. -или-Текущий поток изначально вошел в блокировку в режиме чтения, поэтому попытка войти в режим записи создаст возможность взаимоблокировки. -или-Глубина рекурсии превышает емкость счетчика. Ограничение допускает настолько большое число рекурсивных вхождений, что оно не должно достигаться приложениями на практике.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="millisecondsTimeout" /> меньше нуля, но не равно <see cref="F:System.Threading.Timeout.Infinite" /> (-1), которое является единственным допустимым отрицательным значением. </exception>
    </member>
    <member name="M:System.Threading.ReaderWriterLockSlim.TryEnterWriteLock(System.TimeSpan)">
      <summary>Пытается войти в блокировку в режиме записи с необязательным указанием времени ожидания.</summary>
      <returns>Значение true, если вызывающий поток вошел в режим записи, в противном случае – false.</returns>
      <param name="timeout">Период ожидания или значение -1 миллисекунда для ожидания неограниченное время.</param>
      <exception cref="T:System.Threading.LockRecursionException">Свойство <see cref="P:System.Threading.ReaderWriterLockSlim.RecursionPolicy" /> имеет значение <see cref="F:System.Threading.LockRecursionPolicy.NoRecursion" />, а текущий поток уже вошел в блокировку. -или-Текущий поток изначально вошел в блокировку в режиме чтения, поэтому попытка войти в режим записи создаст возможность взаимоблокировки. -или-Глубина рекурсии превышает емкость счетчика. Ограничение допускает настолько большое число рекурсивных вхождений, что оно не должно достигаться приложениями на практике.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="timeout" /> отрицательное, но оно не равно -1 миллисекунде, которое является единственным допустимым отрицательным значением.-или-Значение <paramref name="timeout" /> больше <see cref="F:System.Int32.MaxValue" /> миллисекунд. </exception>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingReadCount">
      <summary>Возвращает общее количество потоков, ожидающих вхождения в блокировку в режиме чтения.</summary>
      <returns>Общее количество потоков, ожидающих вхождения в режим чтения.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingUpgradeCount">
      <summary>Возвращает общее количество потоков, ожидающих входа в блокировку в обновляемом режиме.</summary>
      <returns>Общее количество потоков, ожидающих входа в обновляемый режим.</returns>
    </member>
    <member name="P:System.Threading.ReaderWriterLockSlim.WaitingWriteCount">
      <summary>Возвращает общее количество потоков, ожидающих входа в блокировку в режиме записи.</summary>
      <returns>Общее количество потоков, ожидающих входа в режим записи.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>Предоставляет набор статических методов (Shared в Visual Basic) для работы с определенными типами экземпляров <see cref="T:System.Threading.Tasks.Task" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>Создает прокси-объект <see cref="T:System.Threading.Tasks.Task" />, представляющий асинхронную операцию задачи Task&lt;Task&lt;T&gt;&gt; (C#) или Task (Of Task(Of T)) (Visual Basic).</summary>
      <returns>
        <see cref="System.Threading.Tasks.Task`1" />, представляющий асинхронную операцию задачи Task&lt;Task&lt;T&gt;&gt; (C#) или Task (Of Task(Of T)) (Visual Basic).</returns>
      <param name="task">Task&lt;Task&lt;T&gt;&gt; (C#) или Task (Of Task(Of T)) (Visual Basic), чтобы разворачивать.</param>
      <typeparam name="TResult">Тип результата задачи.</typeparam>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, если аргумент <paramref name="task" /> равен null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>Создает прокси-объект <see cref="T:System.Threading.Tasks.Task" />, представляющий асинхронную операцию задачи <see cref="T:System.Threading.Tasks.Task{System.Threading.Tasks.Task}" />.</summary>
      <returns>Задача, которая представляет асинхронную операцию из предоставляемых  System.Threading.Tasks.Task (из задач).</returns>
      <param name="task">Задача &lt;Task&gt;    (C#) или  Задача (из)  (Visual Basic), чтобы разворачивать.</param>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, если аргумент <paramref name="task" /> равен null.</exception>
    </member>
  </members>
</doc>