<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System</name>
  </assembly>
  <members>
    <member name="T:System.FileStyleUriParser">
      <summary>ファイル スキームに基づくカスタマイズ可能なパーサー。</summary>
    </member>
    <member name="M:System.FileStyleUriParser.#ctor">
      <summary>ファイル スキームに基づくカスタマイズ可能なパーサーを作成します。</summary>
    </member>
    <member name="T:System.FtpStyleUriParser">
      <summary>ファイル転送プロトコル (FTP: File Transfer Protocol) スキームに基づくカスタマイズ可能なパーサー。</summary>
    </member>
    <member name="M:System.FtpStyleUriParser.#ctor">
      <summary>ファイル転送プロトコル (FTP) スキームに基づくカスタマイズ可能なパーサーを作成します。</summary>
    </member>
    <member name="T:System.GenericUriParser">
      <summary>階層化された URI のカスタマイズ可能なパーサー。</summary>
    </member>
    <member name="M:System.GenericUriParser.#ctor(System.GenericUriParserOptions)">
      <summary>階層化された URI のカスタマイズ可能なパーサーを作成します。</summary>
      <param name="options">この <see cref="T:System.GenericUriParser" /> のオプションを指定します。</param>
    </member>
    <member name="T:System.GenericUriParserOptions">
      <summary>
        <see cref="T:System.UriParser" /> のオプションを指定します。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.AllowEmptyAuthority">
      <summary>パーサーは権限のない URI を許可します。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Default">
      <summary>パーサーの概要:</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontCompressPath">
      <summary>パーサーは URI を正規化しません。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontConvertPathBackslashes">
      <summary>パーサーは円記号をスラッシュに変換しません。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontUnescapePathDotsAndSlashes">
      <summary>パーサーはパスのドット、スラッシュ、または円記号をエスケープ解除しません。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.GenericAuthority">
      <summary>パーサーはレジストリ ベースの権限を許可します。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Idn">
      <summary>このパーサーは、国際化ドメイン名 (IDN: Internationalized Domain Name) によるホスト名の解析をサポートしています。IDN が使用されるかどうかは、構成値によって指定されます。詳細については、「解説」を参照してください。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.IriParsing">
      <summary>このパーサーは、IRI (International Resource Identifier) の RFC 3987 で指定された解析規則をサポートしています。IRI が使用されるかどうかは、構成値によって指定されます。詳細については、「解説」を参照してください。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoFragment">
      <summary>スキームでフラグメント部分が定義されていません。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoPort">
      <summary>スキームでポートが定義されていません。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoQuery">
      <summary>スキームでクエリ部分が定義されていません。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoUserInfo">
      <summary>スキームでユーザー情報部分が定義されていません。</summary>
    </member>
    <member name="T:System.HttpStyleUriParser">
      <summary>HTTP スキームに基づくカスタマイズ可能なパーサー。</summary>
    </member>
    <member name="M:System.HttpStyleUriParser.#ctor">
      <summary>HTTP スキームに基づくカスタマイズ可能なパーサーを作成します。</summary>
    </member>
    <member name="T:System.Uri">
      <summary>URI (Uniform Resource Identifier) のオブジェクト表現を提供し、URI の一部へ簡単にアクセスできるようにします。</summary>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
      <summary>指定した URI を使用して、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="uriString">URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> が null です。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uriString" /> が空です。または<paramref name="uriString" /> に指定されたスキームの形式が誤っています。「<see cref="M:System.Uri.CheckSchemeName(System.String)" />」を参照してください。または<paramref name="uriString" /> に含まれているスラッシュが多すぎます。または<paramref name="uriString" /> に指定されたパスワードが無効です。または<paramref name="uriString" /> に指定されたホスト名が無効です。または<paramref name="uriString" /> に指定されたファイル名が無効です。または<paramref name="uriString" /> に指定されたユーザー名が無効です。または<paramref name="uriString" /> に指定するホスト名または権限名の末尾には、円記号を使用できません。または<paramref name="uriString" /> に指定されたポート番号が無効であるか、解析できません。または<paramref name="uriString" /> の長さが 65519 文字を超えています。または<paramref name="uriString" /> に指定されたスキームの長さが 1024 文字を超えています。または<paramref name="uriString" /> に無効な文字シーケンスが含まれています。または<paramref name="uriString" /> に指定する MS-DOS パスは、c:\\ で始める必要があります。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
      <summary>指定した URI を使用して、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。このコンストラクターでは、URI を相対 URI、絶対 URI、または不確定のいずれかに指定できます。</summary>
      <param name="uriString">
        <see cref="T:System.Uri" /> インスタンスで表されるリソースを表す文字列。</param>
      <param name="uriKind">URI 文字列が相対 URI、絶対 URI、または不確定のいずれであるかを指定します。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="uriKind" /> は有効ではありません (有効な値は <see cref="F:System.UriKind.Absolute" />、<see cref="F:System.UriKind.Relative" />、または <see cref="F:System.UriKind.RelativeOrAbsolute" /> です)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> が null です。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uriString" /> に相対 URI が格納されており、<paramref name="uriKind" /> が <see cref="F:System.UriKind.Absolute" /> です。または<paramref name="uriString" /> に絶対 URI が格納されており、<paramref name="uriKind" /> が <see cref="F:System.UriKind.Relative" /> です。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
      <summary>指定したベース URI と相対 URI 文字列に基づいて、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="baseUri">ベース URI。</param>
      <param name="relativeUri">ベース URI に追加する相対 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> は、絶対 <see cref="T:System.Uri" /> のインスタンスではありません。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI が空であるか、または空白文字だけが含まれています。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたスキームが無効です。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI のスラッシュが多すぎます。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたパスワードが無効です。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたホスト名が無効です。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたファイル名が無効です。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたユーザー名が無効です。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI で指定するホスト名または権限名の末尾には、円記号を使用できません。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたポート番号が無効であるか、または解析できません。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI の長さが 65519 文字を超えています。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたスキームの長さが 1024 文字を超えています。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に無効な文字シーケンスが含まれています。または<paramref name="uriString" /> に指定する MS-DOS パスは、c:\\ で始める必要があります。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.Uri)">
      <summary>指定したベース <see cref="T:System.Uri" /> のインスタンスと相対 <see cref="T:System.Uri" /> のインスタンスの組み合わせに基づいて、<see cref="T:System.Uri" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="baseUri">新しい <see cref="T:System.Uri" /> インスタンスのベースとなる絶対 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">
        <paramref name="baseUri" /> と組み合わせる相対 <see cref="T:System.Uri" /> インスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> は、絶対 <see cref="T:System.Uri" /> のインスタンスではありません。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI が空であるか、または空白文字だけが含まれています。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたスキームが無効です。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI のスラッシュが多すぎます。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたパスワードが無効です。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたホスト名が無効です。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたファイル名が無効です。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたユーザー名が無効です。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI で指定するホスト名または権限名の末尾には、円記号を使用できません。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたポート番号が無効であるか、または解析できません。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI の長さが 65519 文字を超えています。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に指定されたスキームの長さが 1024 文字を超えています。または<paramref name="baseUri" /> と <paramref name="relativeUri" /> を組み合わせて作成された URI に無効な文字シーケンスが含まれています。または<paramref name="uriString" /> に指定する MS-DOS パスは、c:\\ で始める必要があります。</exception>
    </member>
    <member name="P:System.Uri.AbsolutePath">
      <summary>URI の絶対パスを取得します。</summary>
      <returns>リソースの絶対パスを含む <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">このプロパティは、絶対 <see cref="T:System.Uri" /> インスタンスの場合にのみ有効です。</exception>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
      <summary>絶対 URI を取得します。</summary>
      <returns>URI 全体を含む <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">このプロパティは、絶対 <see cref="T:System.Uri" /> インスタンスの場合にのみ有効です。</exception>
    </member>
    <member name="P:System.Uri.Authority">
      <summary>サーバーの DNS (Domain Name System) ホスト名または IP アドレスと、ポート番号を取得します。</summary>
      <returns>このインスタンスで表される URI の証明機関コンポーネントを格納している <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
    </member>
    <member name="M:System.Uri.CheckHostName(System.String)">
      <summary>指定したホスト名が有効な DNS 名であるかどうかを判断します。</summary>
      <returns>ホスト名の型を示す <see cref="T:System.UriHostNameType" />。ホスト名の型を判断できない場合、またはホスト名が null か長さ 0 の文字列の場合、このメソッドは <see cref="F:System.UriHostNameType.Unknown" /> を返します。</returns>
      <param name="name">検証対象のホスト名。値は、IPv4 アドレス、IPv6 アドレス、またはインターネット ホスト名です。</param>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
      <summary>指定したスキーム名が有効かどうかを判断します。</summary>
      <returns>スキーム名が有効な場合は true、有効でない場合は false の <see cref="T:System.Boolean" /> 値。</returns>
      <param name="schemeName">検証対象のスキーム名。</param>
    </member>
    <member name="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)">
      <summary>指定した比較規則を使用して、2 つの URI の指定部分を比較します。</summary>
      <returns>比較する <see cref="T:System.Uri" /> コンポーネントの構文上の関係を示す <see cref="T:System.Int32" /> 値。値説明ゼロより小<paramref name="uri1" /> が <paramref name="uri2" /> より小さい。ゼロ<paramref name="uri1" /> と <paramref name="uri2" /> は等しい。ゼロより大<paramref name="uri1" /> が <paramref name="uri2" /> より大きい。</returns>
      <param name="uri1">第 1 の <see cref="T:System.Uri" />。</param>
      <param name="uri2">第 2 の <see cref="T:System.Uri" />。</param>
      <param name="partsToCompare">比較する <paramref name="uri1" /> と <paramref name="uri2" /> の部分を指定する <see cref="T:System.UriComponents" /> 値のビットごとの組み合わせ。</param>
      <param name="compareFormat">URI のコンポーネントの比較時に使用する文字エスケープを指定する <see cref="T:System.UriFormat" /> 値の 1 つ。</param>
      <param name="comparisonType">
        <see cref="T:System.StringComparison" /> 値の 1 つ。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> が有効な <see cref="T:System.StringComparison" /> 値ではありません。</exception>
    </member>
    <member name="P:System.Uri.DnsSafeHost">
      <summary>DNS の解決に安全に使用できるエスケープ解除されたホスト名を取得します。</summary>
      <returns>DNS の解決に適した URI のエスケープ解除されたホスト部分を格納している <see cref="T:System.String" />。または、エスケープ解除された元のホスト文字列が解決に適している場合はその文字列。</returns>
      <exception cref="T:System.InvalidOperationException">このプロパティは、絶対 <see cref="T:System.Uri" /> インスタンスの場合にのみ有効です。</exception>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
      <summary>2 つの <see cref="T:System.Uri" /> インスタンスを比較し、相互に等しいかどうかを判断します。</summary>
      <returns>2 つのインスタンスが同じ URI を表している場合は true、それ以外の場合は false の <see cref="T:System.Boolean" /> 値。</returns>
      <param name="comparand">現在のインスタンスと比較する <see cref="T:System.Uri" /> インスタンスまたは URI 識別子。</param>
    </member>
    <member name="M:System.Uri.EscapeDataString(System.String)">
      <summary>文字列をエスケープ表現に変換します。</summary>
      <returns>
        <paramref name="stringToEscape" /> のエスケープ表現を格納する <see cref="T:System.String" />。</returns>
      <param name="stringToEscape">エスケープする文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> が null です。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stringToEscape" /> の長さが 32766 文字を超えています。</exception>
    </member>
    <member name="M:System.Uri.EscapeUriString(System.String)">
      <summary>URI 文字列をエスケープ表現に変換します。</summary>
      <returns>
        <paramref name="stringToEscape" /> のエスケープ表現を格納する <see cref="T:System.String" />。</returns>
      <param name="stringToEscape">エスケープする文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> が null です。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stringToEscape" /> の長さが 32766 文字を超えています。</exception>
    </member>
    <member name="P:System.Uri.Fragment">
      <summary>エスケープ URI フラグメントを取得します。</summary>
      <returns>URI フラグメント情報を含む <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">このプロパティは、絶対 <see cref="T:System.Uri" /> インスタンスの場合にのみ有効です。</exception>
    </member>
    <member name="M:System.Uri.FromHex(System.Char)">
      <summary>16 進数の数字に対応する 10 進数値を取得します。</summary>
      <returns>指定した 16 進数に対応する 0 ～ 15 の数値を含む <see cref="T:System.Int32" /> 値。</returns>
      <param name="digit">変換する 16 進数の数字 (0 ～ 9、a ～ f、A ～ F)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="digit" /> が有効な 16 進数の数字 (0 ～ 9、a ～ f、A ～ F) ではありません。</exception>
    </member>
    <member name="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)">
      <summary>指定した特殊文字エスケープを使用して、現在のインスタンスの指定したコンポーネントを取得します。</summary>
      <returns>コンポーネントを格納する <see cref="T:System.String" />。</returns>
      <param name="components">現在のインスタンスの中で呼び出し元に返す部分を指定する <see cref="T:System.UriComponents" /> 値のビットごとの組み合わせ。</param>
      <param name="format">特殊文字のエスケープ方法を制御する <see cref="T:System.UriFormat" /> の値の 1 つ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="uriComponents" /> が、有効な <see cref="T:System.UriComponents" /> 値の組み合わせではありません。</exception>
      <exception cref="T:System.InvalidOperationException">このメソッドは絶対 <see cref="T:System.Uri" /> インスタンスにのみ有効です。</exception>
    </member>
    <member name="M:System.Uri.GetHashCode">
      <summary>URI を処理するためのハッシュ コードを取得します。</summary>
      <returns>この URI に対して作成されたハッシュ コードを格納している <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.Uri.Host">
      <summary>このインスタンスのホスト コンポーネントを取得します。</summary>
      <returns>ホスト名を含む <see cref="T:System.String" />。通常は、サーバーの DNS ホスト名または IP アドレスです。</returns>
      <exception cref="T:System.InvalidOperationException">このプロパティは、絶対 <see cref="T:System.Uri" /> インスタンスの場合にのみ有効です。</exception>
    </member>
    <member name="P:System.Uri.HostNameType">
      <summary>URI に指定したホスト名の型を取得します。</summary>
      <returns>
        <see cref="T:System.UriHostNameType" /> 列挙体のメンバー。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
    </member>
    <member name="P:System.Uri.IsAbsoluteUri">
      <summary>
        <see cref="T:System.Uri" /> インスタンスが絶対インスタンスであるかどうかの値を取得します。</summary>
      <returns>
        <see cref="T:System.Uri" /> インスタンスが絶対インスタンスである場合は true、それ以外の場合は false の <see cref="T:System.Boolean" /> 値。</returns>
    </member>
    <member name="M:System.Uri.IsBaseOf(System.Uri)">
      <summary>現在の <see cref="T:System.Uri" /> インスタンスが、指定した <see cref="T:System.Uri" /> のベースかどうかを判断します。</summary>
      <returns>現在の <see cref="T:System.Uri" /> インスタンスが <paramref name="uri" /> のベースである場合は true。それ以外の場合は false。</returns>
      <param name="uri">テスト対象に指定する <see cref="T:System.Uri" />。</param>
    </member>
    <member name="P:System.Uri.IsDefaultPort">
      <summary>URI のポート値が、このスキームの既定のポート値かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="P:System.Uri.Port" /> プロパティの値がこのスキームの既定ポートである場合は true、それ以外の場合は false の <see cref="T:System.Boolean" /> 値。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
    </member>
    <member name="P:System.Uri.IsFile">
      <summary>指定した <see cref="T:System.Uri" /> がファイル URI かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Uri" /> がファイル URI である場合は true、それ以外の場合は false の <see cref="T:System.Boolean" /> 値。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
    </member>
    <member name="M:System.Uri.IsHexDigit(System.Char)">
      <summary>指定した文字が有効な 16 進数の数字かどうかを判断します。</summary>
      <returns>文字が有効な 16 進数の数字である場合は true、それ以外の場合は false の <see cref="T:System.Boolean" /> 値。</returns>
      <param name="character">検証する文字。</param>
    </member>
    <member name="P:System.Uri.IsLoopback">
      <summary>指定した <see cref="T:System.Uri" /> がローカル ホストを参照するかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Uri" /> がローカル ホストを参照している場合は true、それ以外の場合は false の <see cref="T:System.Boolean" /> 値。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
    </member>
    <member name="P:System.Uri.IsUnc">
      <summary>指定した <see cref="T:System.Uri" /> が UNC (Universal Naming Convention) パスかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Uri" /> が UNC パスである場合は true、それ以外の場合は false の <see cref="T:System.Boolean" /> 値。</returns>
      <exception cref="T:System.InvalidOperationException">このプロパティは、絶対 <see cref="T:System.Uri" /> インスタンスの場合にのみ有効です。</exception>
    </member>
    <member name="M:System.Uri.IsWellFormedOriginalString">
      <summary>この <see cref="T:System.Uri" /> の作成に使用された文字列が整形式であるかどうか、およびこれ以上エスケープする必要がないかどうかを示します。</summary>
      <returns>文字列が整形式である場合は true、それ以外の場合は false の <see cref="T:System.Boolean" /> 値。</returns>
    </member>
    <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
      <summary>文字列を使用して <see cref="T:System.Uri" /> を作成する際に、文字列が整形式であるかどうかを示し、文字列をそれ以上エスケープする必要がないことを確認します。</summary>
      <returns>文字列の形式が RFC 3986 に準拠しており、整形式である場合は true、それ以外の場合は false の <see cref="T:System.Boolean" /> 値。</returns>
      <param name="uriString">文字列で表される <see cref="T:System.Uri" />。</param>
      <param name="uriKind">
        <paramref name="uriString" /> パラメーター内の URI の型。</param>
    </member>
    <member name="P:System.Uri.LocalPath">
      <summary>ローカル オペレーティング システムでのファイル名表現を取得します。</summary>
      <returns>ローカル オペレーティング システムでのファイル名表現を含む <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">このプロパティは、絶対 <see cref="T:System.Uri" /> インスタンスの場合にのみ有効です。</exception>
    </member>
    <member name="M:System.Uri.MakeRelativeUri(System.Uri)">
      <summary>2 つの <see cref="T:System.Uri" /> インスタンスの相違点を判断します。</summary>
      <returns>この URI インスタンスと <paramref name="toUri" /> のホスト名およびスキームが同じである場合、現在の URI インスタンスに追加したときに <paramref name="toUri" /> を作成する相対 <see cref="T:System.Uri" /> がこのメソッドから返されます。ホスト名またはスキームが異なる場合は、<paramref name="toUri" /> パラメーターを表す <see cref="T:System.Uri" /> がこのメソッドから返されます。</returns>
      <param name="uri">現在の URI と比較する URI。</param>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
    </member>
    <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
      <summary>2 つの <see cref="T:System.Uri" /> インスタンスの値が同じであるかどうかを判断します。</summary>
      <returns>
        <see cref="T:System.Uri" /> インスタンスが等しい場合は true、それ以外の場合は false の <see cref="T:System.Boolean" /> 値。</returns>
      <param name="uri1">
        <paramref name="uri2" /> と比較する <see cref="T:System.Uri" /> インスタンス。</param>
      <param name="uri2">
        <paramref name="uri1" /> と比較する <see cref="T:System.Uri" /> インスタンス。</param>
    </member>
    <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
      <summary>2 つの <see cref="T:System.Uri" /> インスタンスの値が同じでないかどうかを判断します。</summary>
      <returns>2 つの<see cref="T:System.Uri" /> インスタンスが同じでない場合は true、それ以外の場合は false の <see cref="T:System.Boolean" /> 値。どちらかのパラメーターが null の場合、このメソッドは true を返します。</returns>
      <param name="uri1">
        <paramref name="uri2" /> と比較する <see cref="T:System.Uri" /> インスタンス。</param>
      <param name="uri2">
        <paramref name="uri1" /> と比較する <see cref="T:System.Uri" /> インスタンス。</param>
    </member>
    <member name="P:System.Uri.OriginalString">
      <summary>
        <see cref="T:System.Uri" /> コンストラクターに渡された元の URI 文字列を取得します。</summary>
      <returns>このインスタンスの作成時に指定した URI 自体を含む <see cref="T:System.String" />。それ以外の場合は <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
    </member>
    <member name="P:System.Uri.PathAndQuery">
      <summary>
        <see cref="P:System.Uri.AbsolutePath" /> プロパティと <see cref="P:System.Uri.Query" /> プロパティを疑問符 (?) で区切った形式で取得します。</summary>
      <returns>
        <see cref="P:System.Uri.AbsolutePath" /> プロパティと <see cref="P:System.Uri.Query" /> プロパティが疑問符 (?) で区切られた形式で含まれている <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
    </member>
    <member name="P:System.Uri.Port">
      <summary>この URI のポート番号を取得します。</summary>
      <returns>この URI のポート番号を格納している <see cref="T:System.Int32" /> 値。</returns>
      <exception cref="T:System.InvalidOperationException">このプロパティは、絶対 <see cref="T:System.Uri" /> インスタンスの場合にのみ有効です。</exception>
    </member>
    <member name="P:System.Uri.Query">
      <summary>指定した URI に含まれているクエリ情報を取得します。</summary>
      <returns>指定した URI のクエリ情報を含む <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">このプロパティは、絶対 <see cref="T:System.Uri" /> インスタンスの場合にのみ有効です。</exception>
    </member>
    <member name="P:System.Uri.Scheme">
      <summary>この URI のスキーム名を取得します。</summary>
      <returns>この URI のスキームを含み、小文字に変換された <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">このプロパティは、絶対 <see cref="T:System.Uri" /> インスタンスの場合にのみ有効です。</exception>
    </member>
    <member name="F:System.Uri.SchemeDelimiter">
      <summary>URI のアドレス部分と通信プロトコル スキームを区切る文字を指定します。このフィールドは読み取り専用です。</summary>
    </member>
    <member name="P:System.Uri.Segments">
      <summary>指定した URI を構成するパス セグメントを格納している配列を取得します。</summary>
      <returns>指定した URI を構成するパス セグメントを格納している <see cref="T:System.String" /> 配列。</returns>
      <exception cref="T:System.InvalidOperationException">このインスタンスは相対 URI を表します。このプロパティは、絶対 URI でのみ有効です。</exception>
    </member>
    <member name="M:System.Uri.ToString">
      <summary>指定した <see cref="T:System.Uri" /> インスタンスの正規文字列表現を取得します。</summary>
      <returns>エスケープ解除された正規表現の <see cref="T:System.Uri" /> インスタンスを格納している <see cref="T:System.String" /> インスタンス。#、?、および % 以外のすべての文字は、エスケープ解除されます。</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)">
      <summary>指定した <see cref="T:System.String" /> インスタンスと <see cref="T:System.UriKind" /> を使用して、新しい <see cref="T:System.Uri" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Uri" /> が正常に作成された場合は true、正常に作成されなかった場合は false となる <see cref="T:System.Boolean" /> 値。</returns>
      <param name="uriString">
        <see cref="T:System.Uri" /> を表す <see cref="T:System.String" />。</param>
      <param name="uriKind">URI の種類。</param>
      <param name="result">このメソッドから制御が戻るときに、作成された <see cref="T:System.Uri" /> を格納します。</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)">
      <summary>指定したベース <see cref="T:System.Uri" /> および相対 <see cref="T:System.String" /> インスタンスを使用して、新しい Uri を作成します。</summary>
      <returns>
        <see cref="T:System.Uri" /> が正常に作成された場合は true、正常に作成されなかった場合は false となる <see cref="T:System.Boolean" /> 値。</returns>
      <param name="baseUri">ベース <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">ベース <see cref="T:System.Uri" /> に追加する <see cref="T:System.String" /> として表される相対 <see cref="T:System.Uri" />。</param>
      <param name="result">このメソッドから制御が戻るときに、<paramref name="baseUri" /> および <paramref name="relativeUri" /> から作成される <see cref="T:System.Uri" /> を格納します。このパラメーターは初期化されずに渡されます。</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)">
      <summary>指定したベースおよび相対 <see cref="T:System.Uri" /> のインスタンスを使用して、新しい <see cref="T:System.Uri" /> を作成します。</summary>
      <returns>
        <see cref="T:System.Uri" /> が正常に作成された場合は true、正常に作成されなかった場合は false となる <see cref="T:System.Boolean" /> 値。</returns>
      <param name="baseUri">ベース <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">ベース <see cref="T:System.Uri" /> に追加する相対 <see cref="T:System.Uri" />。</param>
      <param name="result">このメソッドから制御が戻るときに、<paramref name="baseUri" /> および <paramref name="relativeUri" /> から作成される <see cref="T:System.Uri" /> を格納します。このパラメーターは初期化されずに渡されます。</param>
    </member>
    <member name="M:System.Uri.UnescapeDataString(System.String)">
      <summary>文字列をエスケープ解除された表現に変換します。</summary>
      <returns>
        <paramref name="stringToUnescape" /> のエスケープ解除された表現を格納する <see cref="T:System.String" />。</returns>
      <param name="stringToUnescape">エスケープ解除する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToUnescape" /> が null です。</exception>
    </member>
    <member name="F:System.Uri.UriSchemeFile">
      <summary>URI がファイルを指すポインターであることを指定します。このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeFtp">
      <summary>ファイル転送プロトコル (FTP: File Transfer Protocol) 経由で URI にアクセスすることを指定します。このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeGopher">
      <summary>Gopher プロトコル経由で URI にアクセスすることを指定します。このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttp">
      <summary>HTTP (Hypertext Transfer Protocol) 経由で URI にアクセスすることを指定します。このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttps">
      <summary>HTTPS (Secure Hypertext Transfer Protocol) 経由で URI にアクセスすることを指定します。このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeMailto">
      <summary>URI が電子メール アドレスであり、SMTP (Simple Mail Transport Protocol) 経由でこの URI にアクセスすることを指定します。このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetPipe">
      <summary>"Indigo" システムの NetPipe スキームを使用して URI にアクセスするように指定します。このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetTcp">
      <summary>"Indigo" システムの NetTcp スキームを使用して URI にアクセスするように指定します。このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNews">
      <summary>URI がインターネット ニュース グループであり、この URI へ NNTP (Network News Transport Protocol) 経由でアクセスすることを指定します。このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNntp">
      <summary>URI がインターネット ニュース グループであり、この URI へ NNTP (Network News Transport Protocol) 経由でアクセスすることを指定します。このフィールドは読み取り専用です。</summary>
    </member>
    <member name="P:System.Uri.UserEscaped">
      <summary>
        <see cref="T:System.Uri" /> インスタンスの作成前に、URI 文字列が完全にエスケープされたことを示します。</summary>
      <returns>
        <see cref="T:System.Uri" /> インスタンスの作成時に <paramref name="dontEscape" /> パラメーターが true に設定されている場合は true、それ以外の場合は false の <see cref="T:System.Boolean" /> 値。</returns>
    </member>
    <member name="P:System.Uri.UserInfo">
      <summary>指定した URI に関連付けられているユーザー名、パスワードなどのユーザー固有の情報を取得します。</summary>
      <returns>URI に関連付けられたユーザー情報を格納する <see cref="T:System.String" />。戻り値には、URI のユーザー情報部分の区切り記号として予約されている '@' 文字が含まれません。</returns>
      <exception cref="T:System.InvalidOperationException">このプロパティは、絶対 <see cref="T:System.Uri" /> インスタンスの場合にのみ有効です。</exception>
    </member>
    <member name="T:System.UriBuilder">
      <summary>URI (Uniform Resource Identifier) のカスタム コンストラクターを提供し、<see cref="T:System.Uri" /> クラスの URI を変更します。</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>
        <see cref="T:System.UriBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>指定した URI を使用して、<see cref="T:System.UriBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="uri">URI 文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> が null です。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uri" /> が長さ 0 の文字列か、空白だけです。または解析ルーチンが無効な形式のスキームを検出しました。または解析により、"file" スキームを使用しない URI で、3 つ以上の連続するスラッシュが検出されました。または<paramref name="uri" /> が有効な URI ではありません。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>指定したスキームとホストを使用して、<see cref="T:System.UriBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="schemeName">インターネット アクセス プロトコル。</param>
      <param name="hostName">DNS スタイルのドメイン名、または IP アドレス。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="schemeName" /> が有効なスキーマ名ではありません。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>指定したスキーム、ホスト、およびポートを使用して、<see cref="T:System.UriBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="scheme">インターネット アクセス プロトコル。</param>
      <param name="host">DNS スタイルのドメイン名、または IP アドレス。</param>
      <param name="portNumber">このサービスの IP ポート番号。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="scheme" /> は有効なスキーマ名ではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="portNumber" /> の値が 0 未満であるか、65,535 を超えています。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>指定したスキーム、ホスト、ポート番号、およびパスを使用して、<see cref="T:System.UriBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="scheme">インターネット アクセス プロトコル。</param>
      <param name="host">DNS スタイルのドメイン名、または IP アドレス。</param>
      <param name="port">このサービスの IP ポート番号。</param>
      <param name="pathValue">インターネット リソースへのパス。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="scheme" /> は有効なスキーマ名ではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> が 0 未満か、65,535 よりも大きい値です。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>指定したスキーム、ホスト、ポート番号、パス、およびクエリ文字列またはフラグメント識別子を使用して、<see cref="T:System.UriBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="scheme">インターネット アクセス プロトコル。</param>
      <param name="host">DNS スタイルのドメイン名、または IP アドレス。</param>
      <param name="port">このサービスの IP ポート番号。</param>
      <param name="path">インターネット リソースへのパス。</param>
      <param name="extraValue">クエリ文字列またはフラグメント識別子。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="extraValue" /> が、null、<see cref="F:System.String.Empty" />、シャープ記号 (#) で始まる有効なフラグメント識別子、または疑問符 (?) で始まる有効なクエリ文字列のどれでもありません。または<paramref name="scheme" /> が有効なスキーム名ではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> が 0 未満か、65,535 よりも大きい値です。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>指定した <see cref="T:System.Uri" /> インスタンスを使用して、<see cref="T:System.UriBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="uri">
        <see cref="T:System.Uri" /> クラスのインスタンス。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="uri" /> が null です。</exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>既存の <see cref="T:System.Uri" /> インスタンスと、<see cref="T:System.UriBuilder" /> のコンテンツが等しいかどうかを比較します。</summary>
      <returns>
        <paramref name="rparam" /> がこの <see cref="T:System.UriBuilder" /> インスタンスによって構築される <see cref="T:System.Uri" /> と同じ <see cref="T:System.Uri" /> を表す場合は true。それ以外の場合は false。</returns>
      <param name="rparam">現在のインスタンスと比較するオブジェクト。</param>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>URI のフラグメント部分を取得または設定します。</summary>
      <returns>URI のフラグメント部分。フラグメント識別子 ("#") がフラグメントの先頭に追加されます。</returns>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>URI のハッシュ コードを返します。</summary>
      <returns>URI に対して生成されたハッシュ コード。</returns>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>サーバーの DNS (Domain Name System) ホスト名または IP アドレスを取得または設定します。</summary>
      <returns>サーバーの DNS ホスト名または IP アドレス。</returns>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>URI へアクセスするユーザーに関連付けられているパスワードを取得または設定します。</summary>
      <returns>URI へアクセスするユーザーのパスワード。</returns>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>URI によって参照されるリソースのパスを取得または設定します。</summary>
      <returns>URI によって参照されるリソースのパス。</returns>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>URI のポート番号を取得または設定します。</summary>
      <returns>URI のポート番号。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">ポート番号には、0 未満または 65,535 を超える値は設定できません。</exception>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>URI に含まれているクエリ情報を取得または設定します。</summary>
      <returns>URI に含まれているクエリ情報。</returns>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>URI のスキーム名を取得または設定します。</summary>
      <returns>URI のスキーム。</returns>
      <exception cref="T:System.ArgumentException">スキーム名に設定できるのは正式なスキーム名だけです。</exception>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>指定した <see cref="T:System.UriBuilder" /> インスタンスの表示文字列を返します。</summary>
      <returns>
        <see cref="T:System.UriBuilder" /> のエスケープ解除した表示文字列が含まれている文字列。</returns>
      <exception cref="T:System.UriFormatException">
        <see cref="T:System.UriBuilder" /> プロパティによって作成された URI のユーザー名とパスワードが不正です (<see cref="P:System.UriBuilder.UserName" /> プロパティは null または空の文字列ですが、<see cref="P:System.UriBuilder.Password" /> プロパティは空でありません)。</exception>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>指定した <see cref="T:System.UriBuilder" /> により作成された <see cref="T:System.Uri" /> インスタンスを取得します。</summary>
      <returns>
        <see cref="T:System.UriBuilder" /> により作成された URI が含まれる <see cref="T:System.Uri" />。</returns>
      <exception cref="T:System.UriFormatException">
        <see cref="T:System.UriBuilder" /> プロパティにより作成された URI が無効です。</exception>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>URI へアクセスするユーザーに関連付けられているユーザー名。</summary>
      <returns>URI へアクセスするユーザーのユーザー名。</returns>
    </member>
    <member name="T:System.UriComponents">
      <summary>
        <see cref="T:System.Uri" /> の各部分を指定します。</summary>
    </member>
    <member name="F:System.UriComponents.AbsoluteUri">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.UserInfo" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" />、<see cref="P:System.Uri.Query" />、および <see cref="P:System.Uri.Fragment" /> の各データ。</summary>
    </member>
    <member name="F:System.UriComponents.Fragment">
      <summary>
        <see cref="P:System.Uri.Fragment" /> データ。</summary>
    </member>
    <member name="F:System.UriComponents.Host">
      <summary>
        <see cref="P:System.Uri.Host" /> データ。</summary>
    </member>
    <member name="F:System.UriComponents.HostAndPort">
      <summary>
        <see cref="P:System.Uri.Host" /> データおよび <see cref="P:System.Uri.Port" /> データ。URI 内にポート データがなく、既定のポートが <see cref="P:System.Uri.Scheme" /> に割り当てられている場合、既定のポートが返されます。既定のポートがない場合、-1 が返されます。</summary>
    </member>
    <member name="F:System.UriComponents.HttpRequestUrl">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" />、および <see cref="P:System.Uri.Query" /> の各データ。</summary>
    </member>
    <member name="F:System.UriComponents.KeepDelimiter">
      <summary>区切り記号を含めるように指定します。</summary>
    </member>
    <member name="F:System.UriComponents.NormalizedHost">
      <summary>指定した <see cref="P:System.Uri.Host" /> の正規化形式。</summary>
    </member>
    <member name="F:System.UriComponents.Path">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> データ。</summary>
    </member>
    <member name="F:System.UriComponents.PathAndQuery">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> データおよび <see cref="P:System.Uri.Query" /> データ。</summary>
    </member>
    <member name="F:System.UriComponents.Port">
      <summary>
        <see cref="P:System.Uri.Port" /> データ。</summary>
    </member>
    <member name="F:System.UriComponents.Query">
      <summary>
        <see cref="P:System.Uri.Query" /> データ。</summary>
    </member>
    <member name="F:System.UriComponents.Scheme">
      <summary>
        <see cref="P:System.Uri.Scheme" /> データ。</summary>
    </member>
    <member name="F:System.UriComponents.SchemeAndServer">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.Host" />、および <see cref="P:System.Uri.Port" /> の各データ。</summary>
    </member>
    <member name="F:System.UriComponents.SerializationInfoString">
      <summary>URI シリアライザーに必要な完全な <see cref="T:System.Uri" /> コンテキスト。コンテキストには、IPv6 スコープが含まれます。</summary>
    </member>
    <member name="F:System.UriComponents.StrongAuthority">
      <summary>
        <see cref="P:System.Uri.UserInfo" />、<see cref="P:System.Uri.Host" />、および <see cref="P:System.Uri.Port" /> の各データ。<see cref="T:System.Uri" /> 内にポート データがなく、既定のポートが <see cref="P:System.Uri.Scheme" /> に割り当てられている場合は、既定のポートが返されます。既定のポートがない場合、-1 が返されます。</summary>
    </member>
    <member name="F:System.UriComponents.StrongPort">
      <summary>
        <see cref="P:System.Uri.Port" /> データ。<see cref="T:System.Uri" /> 内にポート データがなく、既定のポートが <see cref="P:System.Uri.Scheme" /> に割り当てられている場合は、既定のポートが返されます。既定のポートがない場合、-1 が返されます。</summary>
    </member>
    <member name="F:System.UriComponents.UserInfo">
      <summary>
        <see cref="P:System.Uri.UserInfo" /> データ。</summary>
    </member>
    <member name="T:System.UriFormat">
      <summary>URI 情報のエスケープ方法を制御します。</summary>
    </member>
    <member name="F:System.UriFormat.SafeUnescaped">
      <summary>要求された URI コンポーネントで意味が予約されている文字は、エスケープされます。その他は、すべてエスケープされません。解説を参照してください。</summary>
    </member>
    <member name="F:System.UriFormat.Unescaped">
      <summary>エスケープは実行されません。</summary>
    </member>
    <member name="F:System.UriFormat.UriEscaped">
      <summary>RFC 3986 の規則に基づいて、エスケープが実行されます。</summary>
    </member>
    <member name="T:System.UriFormatException">
      <summary>無効な URI (Uniform Resource Identifier) が検出された場合にスローされる例外。</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor">
      <summary>
        <see cref="T:System.UriFormatException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.UriFormatException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="textString">エラー メッセージ文字列。</param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String,System.Exception)">
      <summary>指定したメッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.UriFormatException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="textString">エラー メッセージ文字列。</param>
      <param name="e">現在の例外の原因である例外。<paramref name="e" /> パラメーターが null 参照 (Visual Basic の場合は Nothing) でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。 </param>
    </member>
    <member name="T:System.UriHostNameType">
      <summary>
        <see cref="M:System.Uri.CheckHostName(System.String)" /> メソッドのホスト名の型を定義します。</summary>
    </member>
    <member name="F:System.UriHostNameType.Basic">
      <summary>ホストは設定されましたが、型を決定できません。</summary>
    </member>
    <member name="F:System.UriHostNameType.Dns">
      <summary>ホスト名は、ドメイン名システム (DNS: Domain Name System) 形式のホスト名です。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv4">
      <summary>ホスト名は、Internet Protocol (IP) Version 4 形式のホスト アドレスです。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv6">
      <summary>ホスト名は、Internet Protocol (IP) Version 6 形式のホスト アドレスです。</summary>
    </member>
    <member name="F:System.UriHostNameType.Unknown">
      <summary>ホスト名の型が指定されていません。</summary>
    </member>
    <member name="T:System.UriIdnScope">
      <summary>国際化ドメイン名 (IDN: Internationalized Domain Name) による解析の構成設定の有効値を提供します。</summary>
    </member>
    <member name="F:System.UriIdnScope.All">
      <summary>この値は、Unicode のドメイン名があれば、それを対応する Punycode (IDN 名) に変換します。</summary>
    </member>
    <member name="F:System.UriIdnScope.AllExceptIntranet">
      <summary>この値は、すべての外部 Unicode ドメイン名を、対応する Punycode (IDN 名) を使用するように変換します。このように、ローカルなイントラネットで国際名を処理する場合、このイントラネットで使用する DNS サーバーは Unicode 名をサポートしている必要があります。</summary>
    </member>
    <member name="F:System.UriIdnScope.None">
      <summary>この値は、どの Unicode のドメイン名も、Punycode を使用するように変換しません。これは、.NET Framework 2.0 の動作と一貫した既定値です。</summary>
    </member>
    <member name="T:System.UriKind">
      <summary>
        <see cref="Overload:System.Uri.#ctor" /> メソッドの <see cref="T:System.Uri" /> の種類を定義します。</summary>
    </member>
    <member name="F:System.UriKind.Absolute">
      <summary>この URI は、絶対 URI です。</summary>
    </member>
    <member name="F:System.UriKind.Relative">
      <summary>この URI は、相対 URI です。</summary>
    </member>
    <member name="F:System.UriKind.RelativeOrAbsolute">
      <summary>URI の種類は、不確定です。</summary>
    </member>
    <member name="T:System.UriParser">
      <summary>新しい URI スキームを解析します。これは抽象クラスです。</summary>
    </member>
    <member name="M:System.UriParser.#ctor">
      <summary>既定の URI パーサーを作成します。</summary>
    </member>
    <member name="M:System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)">
      <summary>URI からコンポーネントを取得します。</summary>
      <returns>コンポーネントを格納する文字列。</returns>
      <param name="uri">解析する <see cref="T:System.Uri" />。</param>
      <param name="components">
        <paramref name="uri" /> から取得する <see cref="T:System.UriComponents" />。</param>
      <param name="format">特殊文字のエスケープ方法を制御する <see cref="T:System.UriFormat" /> の値の 1 つ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> が無効です。または<paramref name="components" /> が、有効な <see cref="T:System.UriComponents" /> 値の組み合わせではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="uri" /> が、ユーザーによる解析を必要とします。または<paramref name="uri" /> が絶対 URI ではありません。相対 URI は、このメソッドでは使用できません。</exception>
    </member>
    <member name="M:System.UriParser.InitializeAndValidate(System.Uri,System.UriFormatException@)">
      <summary>パーサーの状態を初期化し、URI を検証します。</summary>
      <param name="uri">検証対象の <see cref="T:System.Uri" />。</param>
      <param name="parsingError">検証エラー (存在する場合)。</param>
    </member>
    <member name="M:System.UriParser.IsBaseOf(System.Uri,System.Uri)">
      <summary>
        <paramref name="baseUri" /> が <paramref name="relativeUri" /> のベース URI であるかどうかを判断します。</summary>
      <returns>
        <paramref name="baseUri" /> が <paramref name="relativeUri" /> のベース URI である場合は true。それ以外の場合は false。</returns>
      <param name="baseUri">ベース URI。</param>
      <param name="relativeUri">テスト対象の URI。</param>
    </member>
    <member name="M:System.UriParser.IsKnownScheme(System.String)">
      <summary>スキームのパーサーが登録されているかどうかを示します。</summary>
      <returns>
        <paramref name="schemeName" /> が登録されている場合は true。それ以外の場合は false。</returns>
      <param name="schemeName">確認対象のスキーム名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemeName" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="schemeName" /> パラメーターが有効ではありません。</exception>
    </member>
    <member name="M:System.UriParser.IsWellFormedOriginalString(System.Uri)">
      <summary>URI の構成が正しいかどうかを示します。</summary>
      <returns>
        <paramref name="uri" /> の構成が正しい場合は true。それ以外の場合は false。</returns>
      <param name="uri">確認対象の URI。</param>
    </member>
    <member name="M:System.UriParser.OnNewUri">
      <summary>
        <see cref="T:System.Uri" /> コンストラクターによって起動され、<see cref="T:System.UriParser" /> インスタンスを取得します。</summary>
      <returns>構築された <see cref="T:System.Uri" /> の <see cref="T:System.UriParser" />。</returns>
    </member>
    <member name="M:System.UriParser.OnRegister(System.String,System.Int32)">
      <summary>
        <see cref="T:System.UriParser" /> メソッドが登録されている場合、Framework によって起動されます。</summary>
      <param name="schemeName">この <see cref="T:System.UriParser" /> に関連付けられているスキーム。</param>
      <param name="defaultPort">スキームのポート番号。</param>
    </member>
    <member name="M:System.UriParser.Register(System.UriParser,System.String,System.Int32)">
      <summary>スキームとポート番号を <see cref="T:System.UriParser" /> に関連付けます。</summary>
      <param name="uriParser">登録する <see cref="T:System.UriParser" />。</param>
      <param name="schemeName">このパーサーに関連付けられたスキームの名前。</param>
      <param name="defaultPort">指定したスキームの既定のポート番号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriParser" /> パラメーターが null です。または<paramref name="schemeName" /> パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="schemeName" /> パラメーターが有効ではありません。または<paramref name="defaultPort" /> パラメーターが有効ではありません。<paramref name="defaultPort" /> パラメーターは 0 以上か、65534 以下である必要があります。</exception>
    </member>
    <member name="M:System.UriParser.Resolve(System.Uri,System.Uri,System.UriFormatException@)">
      <summary>相対 URI を解決するために、<see cref="T:System.Uri" /> コンストラクターと <see cref="Overload:System.Uri.TryCreate" /> によって呼び出されます。</summary>
      <returns>解決された相対 <see cref="T:System.Uri" /> の文字列。</returns>
      <param name="baseUri">ベース URI。</param>
      <param name="relativeUri">相対 URI。</param>
      <param name="parsingError">解決処理中のエラー (存在する場合)。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="baseUri" /> パラメーターが絶対値ではありません。<see cref="T:System.Uri" />または<paramref name="baseUri" /> パラメーターが、ユーザーによる解析を必要とします。</exception>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary>
        <see cref="T:System.String" /> 型のインスタンスを <see cref="T:System.Uri" /> インスタンスに変換します。</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary>
        <see cref="T:System.UriTypeConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>対象のコンバーターが、指定した変換前の型のオブジェクトを <see cref="T:System.Uri" /> 型のインスタンスに変換できるかどうかを返します。</summary>
      <returns>コンバーターが指定した型を <see cref="T:System.Uri" /> のインスタンスに変換できる場合は true、それ以外の場合は false の <see cref="T:System.Boolean" /> 値。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceType" /> は null (Visual Basic では Nothing) です。</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>コンバーターが、指定したコンテキストを使用して、指定した型にオブジェクトを変換できるかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="destinationType" /> の型が <see cref="T:System.String" /> または <see cref="T:System.Uri" /> である場合は true、それ以外の場合は false の <see cref="T:System.Boolean" /> 値。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定したオブジェクトをコンバーターの型に変換します。</summary>
      <returns>変換後の <see cref="T:System.Object" /> を表す <see cref="T:System.Uri" /> インスタンス。<paramref name="value" /> パラメーターが null の場合は、null  が返されます。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">
        <see cref="T:System.Uri" /> のインスタンスに変換する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">変換を実行できません。この例外は、<paramref name="value" /> の型が <see cref="T:System.String" /> でも <see cref="T:System.Uri" /> でもない場合に発生します。また、<paramref name="context" /> パラメーターまたは <paramref name="culture" /> パラメーターが <paramref name="value" /> パラメーターに対してサポートされない場合にも、この例外が発生します。</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定した値オブジェクトを、指定した型に変換します。</summary>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。null が渡された場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <paramref name="value" /> パラメーターの変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> パラメーターが null です。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratedCodeAttribute">
      <summary>ツールで生成されたコードを識別します。このクラスは継承できません。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.GeneratedCodeAttribute.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.CodeDom.Compiler.GeneratedCodeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tool">コードを生成したツールの名前。</param>
      <param name="version">コードを生成したツールのバージョン。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Tool">
      <summary>コードを生成したツールの名前を取得します。</summary>
      <returns>コードを生成したツールの名前。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Version">
      <summary>コードを生成したツールのバージョンを取得します。</summary>
      <returns>コードを生成したツールのバージョン。</returns>
    </member>
    <member name="T:System.Collections.Generic.ISet`1">
      <summary>セットの抽象化のための基本インターフェイスを提供します。</summary>
      <typeparam name="T">セット内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
      <summary>現在のセットに要素を追加し、その要素が正常に追加されたかどうかを示す値を返します。</summary>
      <returns>要素がセットに追加された場合は true。セットに既に要素が存在していた場合は false。</returns>
      <param name="item">セットに追加する要素。</param>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットから、指定されたコレクションに含まれる要素をすべて削除します。</summary>
      <param name="other">セットから削除する項目のコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定されたコレクションにも存在する要素だけが含まれるように現在のセットを変更します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットが、指定されたコレクションの真のサブセット (真部分集合) であるかどうかを判断します。</summary>
      <returns>現在のセットが <paramref name="other" /> の真のサブセットの場合は true。それ以外の場合は false。</returns>
      <param name="other">現在のセットと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットが、指定されたコレクションの真のスーパーセット (真上位集合) であるかどうかを判断します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ISet`1" /> オブジェクトが <paramref name="other" /> の真のスーパーセットの場合は true。それ以外の場合は false。</returns>
      <param name="other">現在のセットと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>セットが、指定されたコレクションのサブセットであるかどうかを判断します。</summary>
      <returns>現在のセットが <paramref name="other" /> のサブセットの場合は true。それ以外の場合は false。</returns>
      <param name="other">現在のセットと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットが、指定されたコレクションのスーパーセットであるかどうかを判断します。</summary>
      <returns>現在のセットが <paramref name="other" /> のスーパーセットの場合は true。それ以外の場合は false。</returns>
      <param name="other">現在のセットと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットと、指定されたコレクションとで重なり合う部分が存在するかどうかを判断します。</summary>
      <returns>現在のセットと <paramref name="other" /> で共通の要素を 1 つでも共有している場合は true。それ以外の場合は false。</returns>
      <param name="other">現在のセットと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットと指定されたコレクションに同じ要素が存在するかどうかを判断します。</summary>
      <returns>現在のセットが <paramref name="other" /> と等しい場合は true。それ以外の場合は false。</returns>
      <param name="other">現在のセットと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットを、そのセットと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納されるように変更します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在のセットを、そのセットと指定されたコレクションの両方に存在するすべての要素が格納されるように変更します。</summary>
      <param name="other">現在のセットと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
      <summary>ダブルリンク リストを表します。</summary>
      <typeparam name="T">リンク リストの要素の型を示します。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> クラスの新しい空のインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定した <see cref="T:System.Collections.IEnumerable" /> からコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.Generic.LinkedList`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection">新しい <see cref="T:System.Collections.Generic.LinkedList`1" /> に要素がコピーされた <see cref="T:System.Collections.IEnumerable" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の指定した既存のノードの後に、指定した新しいノードを追加します。</summary>
      <param name="node">
        <paramref name="newNode" /> を挿入する位置の直前の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="newNode">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> に追加する新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> が null です。または<paramref name="newNode" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> は、現在の <see cref="T:System.Collections.Generic.LinkedList`1" /> に含まれていません。または<paramref name="newNode" /> は他の <see cref="T:System.Collections.Generic.LinkedList`1" /> に属しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の指定した既存のノードの後に、指定した値を含んだ新しいノードを追加します。</summary>
      <returns>
        <paramref name="value" /> を含んだ新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
      <param name="node">
        <paramref name="value" /> を含んだ新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" /> を挿入する位置の直前の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> に追加する値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> は、現在の <see cref="T:System.Collections.Generic.LinkedList`1" /> に含まれていません。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の指定した既存のノードの前に、指定した新しいノードを追加します。</summary>
      <param name="node">
        <paramref name="newNode" /> を挿入する位置の直後の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="newNode">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> に追加する新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> が null です。または<paramref name="newNode" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> は、現在の <see cref="T:System.Collections.Generic.LinkedList`1" /> に含まれていません。または<paramref name="newNode" /> は他の <see cref="T:System.Collections.Generic.LinkedList`1" /> に属しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の指定した既存のノードの前に、指定した値を含んだ新しいノードを追加します。</summary>
      <returns>
        <paramref name="value" /> を含んだ新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
      <param name="node">
        <paramref name="value" /> を含んだ新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" /> を挿入する位置の直後の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> に追加する値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> は、現在の <see cref="T:System.Collections.Generic.LinkedList`1" /> に含まれていません。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の先頭に指定した新しいノードを追加します。</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の先頭に追加する新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> は他の <see cref="T:System.Collections.Generic.LinkedList`1" /> に属しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の先頭に、指定した値を含んだ新しいノードを追加します。</summary>
      <returns>
        <paramref name="value" /> を含んだ新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の先頭に追加する値。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の末尾に、指定した新しいノードを追加します。</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の末尾に追加する新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> は他の <see cref="T:System.Collections.Generic.LinkedList`1" /> に属しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の末尾に、指定した値を含んだ新しいノードを追加します。</summary>
      <returns>
        <paramref name="value" /> を含んだ新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の末尾に追加する値。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> からすべてのノードを削除します。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
      <summary>ある値が <see cref="T:System.Collections.Generic.LinkedList`1" /> 内に存在するかどうかを判断します。</summary>
      <returns>
        <paramref name="value" /> が <see cref="T:System.Collections.Generic.LinkedList`1" /> に存在する場合は true。それ以外の場合は false。</returns>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内で検索する値。参照型の場合、null の値を使用できます。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 全体を互換性のある 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> から要素がコピーされる 1 次元の <see cref="T:System.Array" />。<see cref="T:System.Array" /> には 0 から始まるインデックスが必要です。</param>
      <param name="index">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が <paramref name="array" /> の長さ以上です。または<paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.LinkedList`1" /> の要素数が、コピー先の <paramref name="array" /> の <paramref name="index" /> から最後までの領域を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> に実際に格納されているノードの数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> に実際に格納されているノードの数。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
      <summary>指定した値を含む最初のノードを検索します。</summary>
      <returns>見つかった場合は、指定した値を含む最初の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。それ以外の場合は null。</returns>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内で検索する値。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
      <summary>指定した値を含む最後のノードを検索します。</summary>
      <returns>見つかった場合は、指定した値を含む最後の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。それ以外の場合は null。</returns>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内で検索する値。</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の最初のノードを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の最初の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の最後のノードを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の最後の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
      <summary>指定したノードを <see cref="T:System.Collections.Generic.LinkedList`1" /> から削除します。</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> から削除する <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> は、現在の <see cref="T:System.Collections.Generic.LinkedList`1" /> に含まれていません。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内で最初に見つかった指定の値を削除します。</summary>
      <returns>
        <paramref name="value" /> を含んだ要素が正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="value" /> が元の<see cref="T:System.Collections.Generic.LinkedList`1" /> に見つからなかった場合にも false を返します。</returns>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> から削除する値。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の先頭にあるノードを削除します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> が空です。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の末尾にあるノードを削除します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> が空です。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> の末尾に項目を追加します。</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.ICollection`1" /> の末尾に追加する値。</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用の場合は true。それ以外の場合は false。<see cref="T:System.Collections.Generic.LinkedList`1" /> の既定の実装では、このプロパティは常に false を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">
        <see cref="T:System.Collections.ICollection" /> から要素がコピーされる 1 次元の <see cref="T:System.Array" />。<see cref="T:System.Array" /> には 0 から始まるインデックスが必要です。</param>
      <param name="index">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。または<paramref name="array" /> に 0 から始まるインデックス番号がありません。またはコピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先の <paramref name="array" /> の <paramref name="index" /> から最後までの領域を超えています。またはコピー元の <see cref="T:System.Collections.ICollection" /> の型が、コピー先の <paramref name="array" /> の型に自動的にキャストできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) 場合は true。それ以外の場合は false。<see cref="T:System.Collections.Generic.LinkedList`1" /> の既定の実装では、このプロパティは常に false を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。<see cref="T:System.Collections.Generic.LinkedList`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションとしてリンク リストを反復処理する列挙子を返します。</summary>
      <returns>コレクションとしてリンク リストを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の要素を列挙します。</summary>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.LinkedList`1" /> の次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は true。列挙子がコレクションの末尾を越えた場合は false。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が、コレクションの最初の要素の前、または最後の要素の後に位置しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。このクラスは継承できません。</summary>
      <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。</exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> のノードを表します。このクラスは継承できません。</summary>
      <typeparam name="T">リンク リストの要素の型を示します。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
      <summary>指定した値を含んだ <see cref="T:System.Collections.Generic.LinkedListNode`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> に格納する値。</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> が属する <see cref="T:System.Collections.Generic.LinkedList`1" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> が属する <see cref="T:System.Collections.Generic.LinkedList`1" /> への参照。<see cref="T:System.Collections.Generic.LinkedListNode`1" /> がリンクされていない場合は、null。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の次のノードを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の次のノードへの参照。現在のノードが <see cref="T:System.Collections.Generic.LinkedList`1" /> の最後の要素 (<see cref="P:System.Collections.Generic.LinkedList`1.Last" />) である場合は、null。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の前のノードを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の前のノードへの参照。現在のノードが <see cref="T:System.Collections.Generic.LinkedList`1" /> の最初の要素 (<see cref="P:System.Collections.Generic.LinkedList`1.First" />) である場合は、null。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
      <summary>ノードに格納された値を取得します。</summary>
      <returns>ノードに格納された値。</returns>
    </member>
    <member name="T:System.Collections.Generic.Queue`1">
      <summary>オブジェクトの先入れ先出しコレクションを表します。</summary>
      <typeparam name="T">キュー内の要素の型を指定します。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
      <summary>空で、既定の初期量を備えた、<see cref="T:System.Collections.Generic.Queue`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定したコレクションからコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.Generic.Queue`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection">新しい <see cref="T:System.Collections.Generic.Queue`1" /> に要素がコピーされたコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
      <summary>空で、指定した初期量を備えた、<see cref="T:System.Collections.Generic.Queue`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Queue`1" /> が格納できる要素数の初期値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> からすべてのオブジェクトを削除します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
      <summary>ある要素が <see cref="T:System.Collections.Generic.Queue`1" /> 内に存在するかどうかを判断します。</summary>
      <returns>
        <paramref name="item" /> が <see cref="T:System.Collections.Generic.Queue`1" /> に存在する場合は true。それ以外の場合は false。</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.Queue`1" /> 内で検索するオブジェクト。参照型の場合、null の値を使用できます。</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> の要素を既存の 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.Queue`1" /> から要素がコピーされる 1 次元の <see cref="T:System.Array" />。<see cref="T:System.Array" /> には 0 から始まるインデックスが必要です。</param>
      <param name="arrayIndex">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.Queue`1" /> の要素数が、コピー先の <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの領域を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> に格納されている要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> に格納されている要素の数。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> の先頭にあるオブジェクトを削除し、返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> の先頭から削除されたオブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" /> が空です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> の末尾にオブジェクトを追加します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.Queue`1" /> に追加するオブジェクト。参照型の場合、null の値を使用できます。</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> の <see cref="T:System.Collections.Generic.Queue`1.Enumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> の先頭にあるオブジェクトを削除せずに返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> の先頭にあるオブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" /> が空です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">
        <see cref="T:System.Collections.ICollection" /> から要素がコピーされる 1 次元の <see cref="T:System.Array" />。<see cref="T:System.Array" /> には 0 から始まるインデックスが必要です。</param>
      <param name="index">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。または<paramref name="array" /> に 0 から始まるインデックス番号がありません。またはコピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先の <paramref name="array" /> の <paramref name="index" /> から最後までの領域を超えています。またはコピー元の <see cref="T:System.Collections.ICollection" /> の型が、コピー先の <paramref name="array" /> の型に自動的にキャストできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) 場合は true。それ以外の場合は false。<see cref="T:System.Collections.Generic.Queue`1" /> の既定の実装では、このプロパティから必ず false が返されます。</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。<see cref="T:System.Collections.Generic.Queue`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> の要素を新しい配列にコピーします。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> からコピーした要素を格納する新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> 内にある実際の要素数が現在の容量の 90% 未満の場合は、容量をその数に設定します。</summary>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> の要素を列挙します。</summary>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> 内の、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が、コレクションの最初の要素の前、または最後の要素の後に位置しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.Queue`1" /> の次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は true。列挙子がコレクションの末尾を越えた場合は false。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が、コレクションの最初の要素の前、または最後の要素の後に位置しています。 </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2">
      <summary>キーに基づいて並べ替えられた、キーと値のペアのコレクションを表します。</summary>
      <typeparam name="TKey">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue">ディクショナリ内の値の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor">
      <summary>空で、キーの型の既定の <see cref="T:System.Collections.Generic.IComparer`1" /> 実装を使用する、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>空で、指定した <see cref="T:System.Collections.Generic.IComparer`1" /> を使用してキーを比較する、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="comparer">キーの比較時に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。キーの型の既定の <see cref="T:System.Collections.Generic.Comparer`1" /> を使用する場合は null。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>指定した <see cref="T:System.Collections.Generic.IDictionary`2" /> から要素をコピーして格納し、キーの型の既定の <see cref="T:System.Collections.Generic.IComparer`1" /> 実装を使用する、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">新しい <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に要素がコピーされた <see cref="T:System.Collections.Generic.IDictionary`2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> に、1 つ以上の重複するキーが格納されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>指定した <see cref="T:System.Collections.Generic.IDictionary`2" /> から要素をコピーして格納し、指定した <see cref="T:System.Collections.Generic.IComparer`1" /> 実装を使用してキーを比較する、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">新しい <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に要素がコピーされた <see cref="T:System.Collections.Generic.IDictionary`2" />。</param>
      <param name="comparer">キーの比較時に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。キーの型の既定の <see cref="T:System.Collections.Generic.Comparer`1" /> を使用する場合は null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> に、1 つ以上の重複するキーが格納されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)">
      <summary>指定したキーおよび値を持つ要素を <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に追加します。</summary>
      <param name="key">追加する要素のキー。</param>
      <param name="value">追加する要素の値。参照型の場合、null を使用できます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> からすべての要素を削除します。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Comparer">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の要素の順序付けに使用する <see cref="T:System.Collections.Generic.IComparer`1" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の要素の順序付けに使用する <see cref="T:System.Collections.Generic.IComparer`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)">
      <summary>指定したキーの要素が <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に格納されているかどうかを確認します。</summary>
      <returns>指定したキーを持つ要素が <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内で検索されるキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)">
      <summary>指定した値の要素が <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に格納されているかどうかを確認します。</summary>
      <returns>指定した値を持つ要素が <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に格納されている場合は true。それ以外の場合は false。</returns>
      <param name="value">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内で検索される値。参照型の場合、null の値を使用できます。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>指定したインデックスを開始位置として、指定した <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 構造体の配列に <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 要素をコピーします。</summary>
      <param name="array">現在の <see cref="T:System.Collections.Generic.SortedDictionary`2" /> からコピーされる要素のコピー先である <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 構造体の 1 次元配列。この配列には、0 から始まるインデックスを使用する必要があります。</param>
      <param name="index">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の要素数が、コピー先の <paramref name="array" /> の <paramref name="index" /> から最後までの領域を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Count">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に格納されているキー/値ペアの数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に格納されているキー/値ペアの数。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Item(`0)">
      <summary>指定したキーに関連付けられている値を取得または設定します。</summary>
      <returns>指定したキーに関連付けられている値。指定したキーが見つからなかった場合、get 操作は <see cref="T:System.Collections.Generic.KeyNotFoundException" /> をスローし、set 操作は指定したキーを持つ新しい要素を作成します。</returns>
      <param name="key">取得または設定する値のキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">プロパティが取得されましたが、コレクション内に <paramref name="key" /> が存在しません。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Keys">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内のキーを格納しているコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内のキーを格納している <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Remove(`0)">
      <summary>指定したキーを持つ要素を <see cref="T:System.Collections.Generic.SortedDictionary`2" /> から削除します。</summary>
      <returns>要素が正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="key" /> が <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に見つからなかった場合にも false を返します。</returns>
      <param name="key">削除する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に項目を追加します。</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に追加する <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 構造体。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyValuePair" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に特定のキーと値が格納されているかどうかを判断します。</summary>
      <returns>
        <paramref name="keyValuePair" /> が <see cref="T:System.Collections.Generic.ICollection`1" /> で見つかった場合は true。それ以外の場合は false。</returns>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で検索される <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 構造体。</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用の場合は true。それ以外の場合は false。<see cref="T:System.Collections.Generic.SortedDictionary`2" /> の既定の実装では、このプロパティは常に false を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で最初に見つかった指定の要素を削除します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> から <paramref name="keyValuePair" /> が正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="keyValuePair" /> が <see cref="T:System.Collections.Generic.ICollection`1" /> に見つからなかった場合にも false を返します。</returns>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から削除する <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 構造体。</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> のキーを格納している <see cref="T:System.Collections.Generic.ICollection`1" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> のキーを保持している <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 内の値を格納している <see cref="T:System.Collections.Generic.ICollection`1" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 内の値を格納している <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>指定した配列インデックスを開始位置として、配列に <see cref="T:System.Collections.Generic.ICollection`1" /> の要素をコピーします。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から要素がコピーされる 1 次元配列。配列のインデックスは 0 から始まっている必要があります。</param>
      <param name="index">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。または<paramref name="array" /> に 0 から始まるインデックス番号がありません。またはコピー元の <see cref="T:System.Collections.Generic.ICollection`1" /> の要素数が、コピー先の <paramref name="array" /> の <paramref name="index" /> から最後までの領域を超えています。またはコピー元の <see cref="T:System.Collections.Generic.ICollection`1" /> の型が、コピー先の <paramref name="array" /> の型に自動的にキャストできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) 場合は true。それ以外の場合は false。<see cref="T:System.Collections.Generic.SortedDictionary`2" /> の既定の実装では、このプロパティは常に false を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>指定したキーおよび値を持つ要素を <see cref="T:System.Collections.IDictionary" /> に追加します。</summary>
      <param name="key">追加する要素のキーとして使用するオブジェクト。</param>
      <param name="value">追加する要素の値として使用するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> が、<see cref="T:System.Collections.IDictionary" /> のキーの型 <paramref name="TKey" /> に代入できない型です。または<paramref name="value" /> が、<see cref="T:System.Collections.IDictionary" /> の値型 <paramref name="TValue" /> に代入できない型です。または同じキーを持つ要素が、<see cref="T:System.Collections.IDictionary" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>指定したキーを持つ要素が <see cref="T:System.Collections.IDictionary" /> に含まれているかどうかを判断します。</summary>
      <returns>キーを持つ要素が <see cref="T:System.Collections.IDictionary" /> に格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">
        <see cref="T:System.Collections.IDictionary" /> 内で検索されるキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> の <see cref="T:System.Collections.IDictionaryEnumerator" /> を返します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> の <see cref="T:System.Collections.IDictionaryEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> が固定サイズの場合は true。それ以外の場合は false。<see cref="T:System.Collections.Generic.SortedDictionary`2" /> の既定の実装では、このプロパティは常に false を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> が読み取り専用の場合は true。それ以外の場合は false。<see cref="T:System.Collections.Generic.SortedDictionary`2" /> の既定の実装では、このプロパティは常に false を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>指定したキーを持つ要素を取得または設定します。</summary>
      <returns>指定したキーに関連付けられた要素。<paramref name="key" /> がディクショナリにない場合、または <paramref name="key" /> が<see cref="T:System.Collections.Generic.SortedDictionary`2" /> のキー型 <paramref name="TKey" /> に代入できる型ではない場合は null。</returns>
      <param name="key">取得する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">値を代入しようとしていますが、<paramref name="key" /> は、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> のキーの型 <paramref name="TKey" /> に代入できない型です。または値を代入しようとしていますが、<paramref name="value" /> は、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> の値の型 <paramref name="TValue" /> に代入できない型です。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> のキーを格納している <see cref="T:System.Collections.ICollection" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> のキーを格納している <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>指定したキーを持つ要素を <see cref="T:System.Collections.IDictionary" /> から削除します。</summary>
      <param name="key">削除する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> 内の値を格納している <see cref="T:System.Collections.ICollection" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 内の値を格納している <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>指定したキーに関連付けられている値を取得します。</summary>
      <returns>指定したキーを持つ要素が <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に格納されている場合は true。それ以外の場合は false。</returns>
      <param name="key">取得する値のキー。</param>
      <param name="value">このメソッドから制御が戻るとき、指定されたキーが見つかった場合はそのキーに関連付けられている値。それ以外の場合は <paramref name="value" /> パラメーターの型の既定値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Values">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内の値を格納しているコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内の値を格納している <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の要素を列挙します。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は true。列挙子がコレクションの末尾を越えた場合は false。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>列挙子の現在位置の要素を <see cref="T:System.Collections.DictionaryEntry" /> 構造体として取得します。</summary>
      <returns>
        <see cref="T:System.Collections.DictionaryEntry" /> 構造体としての、ディクショナリの現在の位置にあるコレクション内の要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が、コレクションの最初の要素の前、または最後の要素の後に位置しています。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>列挙子の現在位置の要素のキーを取得します。</summary>
      <returns>コレクション内の列挙子の現在位置にある要素のキー。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が、コレクションの最初の要素の前、または最後の要素の後に位置しています。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>列挙子の現在位置の要素の値を取得します。</summary>
      <returns>コレクション内の列挙子の現在位置にある要素の値。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が、コレクションの最初の要素の前、または最後の要素の後に位置しています。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が、コレクションの最初の要素の前、または最後の要素の後に位置しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。 </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内のキーのコレクションを表します。このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>指定した <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内のキーを反映する、<see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">新しい <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> にキーが反映される <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の要素を既存の 1 次元の配列にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> から要素がコピーされる 1 次元配列。配列のインデックスは 0 から始まっている必要があります。</param>
      <param name="index">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の要素数が、コピー先の <paramref name="array" /> の <paramref name="index" /> から最後までの領域を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Count">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> に格納されている要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> に格納されている要素の数。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> 構造体。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に項目を追加します。この実装は、常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。コレクションが読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> からすべての項目を削除します。この実装は、常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <exception cref="T:System.NotSupportedException">常にスローされます。コレクションが読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>指定した値が <see cref="T:System.Collections.Generic.ICollection`1" /> に格納されているかどうかを判断します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> で <paramref name="item" /> が見つかった場合は true、見つからなかった場合は false。</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で検索するオブジェクト。</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用の場合は true。それ以外の場合は false。<see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の既定の実装では、このプロパティは常に false を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>指定したオブジェクトが <see cref="T:System.Collections.Generic.ICollection`1" /> 内にあるときに、最初に出現したものを削除します。この実装は、常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>
        <paramref name="item" /> が <see cref="T:System.Collections.Generic.ICollection`1" /> から正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="item" /> が <see cref="T:System.Collections.Generic.ICollection`1" /> に見つからない場合にも false を返します。</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。コレクションが読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>特定の配列インデックスを開始位置として、配列に <see cref="T:System.Collections.ICollection" /> の要素をコピーします。</summary>
      <param name="array">
        <see cref="T:System.Collections.ICollection" /> から要素がコピーされる 1 次元配列。配列のインデックスは 0 から始まっている必要があります。</param>
      <param name="index">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。または<paramref name="array" /> に 0 から始まるインデックス番号がありません。またはコピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先の <paramref name="array" /> の <paramref name="index" /> から最後までの領域を超えています。またはコピー元の <see cref="T:System.Collections.ICollection" /> の型が、コピー先の <paramref name="array" /> の型に自動的にキャストできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) 場合は true。それ以外の場合は false。<see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の既定の実装では、このプロパティは常に false を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。<see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の要素を列挙します。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は true。列挙子がコレクションの末尾を越えた場合は false。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が、コレクションの最初の要素の前、または最後の要素の後に位置しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。 </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内の値のコレクションを表します。このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>指定した <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内の値を反映する、<see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary">新しい <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> に値が反映される <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の要素を既存の 1 次元の配列にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> から要素がコピーされる 1 次元配列。配列のインデックスは 0 から始まっている必要があります。</param>
      <param name="index">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の要素数が、コピー先の <paramref name="array" /> の <paramref name="index" /> から最後までの領域を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Count">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> に格納されている要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> に格納されている要素の数。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> 構造体。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Add(`1)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に項目を追加します。この実装は、常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。コレクションが読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> からすべての項目を削除します。この実装は、常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <exception cref="T:System.NotSupportedException">常にスローされます。コレクションが読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Contains(`1)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に指定した値が格納されているかどうかを判断します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> で <paramref name="item" /> が見つかった場合は true、見つからなかった場合は false。</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で検索するオブジェクト。</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用の場合は true。それ以外の場合は false。<see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の既定の実装では、このプロパティは常に false を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Remove(`1)">
      <summary>指定したオブジェクトが <see cref="T:System.Collections.Generic.ICollection`1" /> 内にあるときに、最初に出現したものを削除します。この実装は、常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>
        <paramref name="item" /> が <see cref="T:System.Collections.Generic.ICollection`1" /> から正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="item" /> が <see cref="T:System.Collections.Generic.ICollection`1" /> に見つからない場合にも false を返します。</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">常にスローされます。コレクションが読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>指定したオブジェクトが <see cref="T:System.Collections.Generic.ICollection`1" /> 内にあるときに、最初に出現したものを削除します。この実装は、常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>
        <paramref name="item" /> が <see cref="T:System.Collections.Generic.ICollection`1" /> から正常に削除された場合は true。それ以外の場合は false。このメソッドは、<paramref name="item" /> が <see cref="T:System.Collections.Generic.ICollection`1" /> に見つからない場合にも false を返します。</returns>
      <exception cref="T:System.NotSupportedException">常にスローされます。コレクションが読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>特定の配列インデックスを開始位置として、配列に <see cref="T:System.Collections.ICollection" /> の要素をコピーします。</summary>
      <param name="array">
        <see cref="T:System.Collections.ICollection" /> から要素がコピーされる 1 次元配列。配列のインデックスは 0 から始まっている必要があります。</param>
      <param name="index">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。または<paramref name="array" /> に 0 から始まるインデックス番号がありません。またはコピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先の <paramref name="array" /> の <paramref name="index" /> から最後までの領域を超えています。またはコピー元の <see cref="T:System.Collections.ICollection" /> の型が、コピー先の <paramref name="array" /> の型に自動的にキャストできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) 場合は true。それ以外の場合は false。<see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の既定の実装では、このプロパティは常に false を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。<see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の要素を列挙します。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は true。列挙子がコレクションの末尾を越えた場合は false。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が、コレクションの最初の要素の前、または最後の要素の後に位置しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。 </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1">
      <summary>一定の並べ替え順序で管理されたオブジェクトのコレクションを表します。</summary>
      <typeparam name="T">セット内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>指定された比較子を使用する <see cref="T:System.Collections.Generic.SortedSet`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="comparer">オブジェクトの比較に使用する既定の比較子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定の列挙可能なコレクションからコピーされた要素を格納する、<see cref="T:System.Collections.Generic.SortedSet`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection">コピーする列挙可能なコレクション。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
      <summary>指定の列挙可能なコレクションからコピーされた要素を格納し、指定された比較子を使用する、<see cref="T:System.Collections.Generic.SortedSet`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection">コピーする列挙可能なコレクション。</param>
      <param name="comparer">オブジェクトの比較に使用する既定の比較子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Add(`0)">
      <summary>要素をセットに追加し、正常に追加されたかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="item" /> がセットに追加される場合は true。それ以外の場合は false。</returns>
      <param name="item">セットに追加する要素。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Clear">
      <summary>セットからすべての要素を削除します。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Comparer">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 内の値の等価性を調べるための <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> オブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 内の値の等価性を調べるための比較子。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Contains(`0)">
      <summary>セットに特定の要素が含まれているかどうかを判断します。</summary>
      <returns>セットに <paramref name="item" /> が含まれている場合は true。それ以外の場合は false。</returns>
      <param name="item">セット内で検索する要素。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[])">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 全体を互換性のある 1 次元の配列にコピーします。コピー操作は、コピー先の配列の先頭から始まります。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> から要素がコピーされる 1 次元配列。</param>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.SortedSet`1" /> の要素数が、コピー先の配列に格納できる要素の数を超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 全体を互換性のある 1 次元配列にコピーします。コピー操作は、配列の指定したインデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> から要素がコピーされる 1 次元配列。配列のインデックスは 0 から始まっている必要があります。</param>
      <param name="index">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentException">コピー元の配列の要素数が、<paramref name="index" /> からコピー先の配列の末尾までに格納できる数を超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>指定された数の要素を <see cref="T:System.Collections.Generic.SortedSet`1" /> から互換性のある 1 次元配列にコピーします。コピー操作は、指定された配列インデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> から要素がコピーされる 1 次元配列。配列のインデックスは 0 から始まっている必要があります。</param>
      <param name="index">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <param name="count">コピーする要素数。</param>
      <exception cref="T:System.ArgumentException">コピー元の配列の要素数が、<paramref name="index" /> からコピー先の配列の末尾までに格納できる数を超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。または<paramref name="count" /> が 0 未満です。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Count">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> にある要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> にある要素の数。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトから、指定されたコレクションに含まれる要素をすべて削除します。</summary>
      <param name="other">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトから削除する項目のコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> を並べ替えた順序で反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 内のサブセットのビューを返します。</summary>
      <returns>指定された範囲の値だけを含むサブセット ビュー。</returns>
      <param name="lowerValue">目的のビューの範囲の最小値。</param>
      <param name="upperValue">目的のビューの範囲の最大値。</param>
      <exception cref="T:System.ArgumentException">比較子に照らすと、<paramref name="lowerValue" /> が <paramref name="upperValue" /> を超えています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">ビューで試行された操作が、<paramref name="lowerValue" /> および <paramref name="upperValue" /> で指定された範囲外です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定されたコレクションに存在する要素だけが含まれるように現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトを変更します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが、指定されたコレクションの真のサブセット (真部分集合) であるかどうかを判断します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが <paramref name="other" /> の真のサブセットである場合は true。それ以外の場合は false。</returns>
      <param name="other">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが、指定されたコレクションの真のスーパーセット (真上位集合) であるかどうかを判断します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが <paramref name="other" /> の真のスーパーセットである場合は true。それ以外の場合は false。</returns>
      <param name="other">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが、指定されたコレクションのサブセットであるかどうかを判断します。</summary>
      <returns>現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが <paramref name="other" /> のサブセットである場合は true。それ以外の場合は false。</returns>
      <param name="other">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが、指定されたコレクションのスーパーセットであるかどうかを判断します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが <paramref name="other" /> のスーパーセットである場合は true。それ以外の場合は false。</returns>
      <param name="other">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Max">
      <summary>比較子によって定義された、<see cref="T:System.Collections.Generic.SortedSet`1" /> 内の最大値を取得します。</summary>
      <returns>セット内の最大値。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Min">
      <summary>比較子によって定義された、<see cref="T:System.Collections.Generic.SortedSet`1" /> 内の最小値を取得します。</summary>
      <returns>セット内の最小値。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと指定されたコレクションとが共通の要素を共有しているかどうかを判断します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと<paramref name="other" /> との間に共通する要素が 1 つでも存在する場合は true。それ以外の場合は false。</returns>
      <param name="other">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Remove(`0)">
      <summary>指定した項目を <see cref="T:System.Collections.Generic.SortedSet`1" /> から削除します。</summary>
      <returns>要素が見つかり、正常に削除された場合は true。それ以外の場合は false。</returns>
      <param name="item">削除する要素。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>指定の述語によって定義された条件に一致するすべての要素を <see cref="T:System.Collections.Generic.SortedSet`1" /> から削除します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> コレクションから削除された要素数。</returns>
      <param name="match">削除する要素の条件を定義するデリゲート。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Reverse">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> を逆順で反復処理する <see cref="T:System.Collections.Generic.IEnumerable`1" /> を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> を逆順で反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと指定されたコレクションに同じ要素が存在するかどうかを判断します。</summary>
      <returns>現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが <paramref name="other" /> と等しい場合は true。それ以外の場合は false。</returns>
      <param name="other">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトを、そのオブジェクトと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納されるように変更します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトに項目を追加します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> は読み取り専用です。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.ICollection" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>コレクションが読み取り専用の場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 全体を互換性のある 1 次元配列にコピーします。コピー操作は、配列の指定したインデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> から要素がコピーされる 1 次元配列。配列のインデックスは 0 から始まっている必要があります。</param>
      <param name="index">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentException">コピー元の配列の要素数が、<paramref name="index" /> からコピー先の配列の末尾までに格納できる数を超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。<see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトを、そのオブジェクトまたは指定されたコレクションのどちらかに存在するすべての要素が格納されるように変更します。</summary>
      <param name="other">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトの要素を列挙します。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.SortedSet`1" /> コレクションの次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は true。列挙子がコレクションの末尾を越えた場合は false。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が、コレクションの最初の要素の前、または最後の要素の後に位置しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。 </exception>
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
      <summary>任意の同じ型のインスタンスの、後入れ先出し (LIFO) の可変サイズのコレクションを表します。</summary>
      <typeparam name="T">スタック内の要素の型を指定します。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
      <summary>空で、既定の初期量を備えた、<see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>指定したコレクションからコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection">要素のコピー元のコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
      <summary>空で、指定した初期量または既定の初期量のうち大きい方の初期量を備えた、<see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Stack`1" /> が格納できる要素数の初期値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" /> からすべてのオブジェクトを削除します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
      <summary>ある要素が <see cref="T:System.Collections.Generic.Stack`1" /> 内に存在するかどうかを判断します。</summary>
      <returns>
        <paramref name="item" /> が <see cref="T:System.Collections.Generic.Stack`1" /> に存在する場合は true。それ以外の場合は false。</returns>
      <param name="item">
        <see cref="T:System.Collections.Generic.Stack`1" /> 内で検索するオブジェクト。参照型の場合、null の値を使用できます。</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
      <summary>既存の 1 次元の <see cref="T:System.Array" /> に <see cref="T:System.Collections.Generic.Stack`1" /> をコピーします。コピー操作は、配列の指定したインデックスから始まります。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.Stack`1" /> から要素がコピーされる 1 次元の <see cref="T:System.Array" />。<see cref="T:System.Array" /> には 0 から始まるインデックスが必要です。</param>
      <param name="arrayIndex">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元の <see cref="T:System.Collections.Generic.Stack`1" /> の要素数が、コピー先の <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの領域を超えています。</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" /> に格納されている要素の数を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> に格納されている要素の数。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" /> の列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> の <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" /> の先頭にあるオブジェクトを削除せずに返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> の先頭にあるオブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" /> が空です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" /> の先頭にあるオブジェクトを削除し、返します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> の先頭から削除されたオブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" /> が空です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" /> の先頭にオブジェクトを挿入します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.Stack`1" /> にプッシュするオブジェクト。参照型の場合、null の値を使用できます。</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">
        <see cref="T:System.Collections.ICollection" /> から要素がコピーされる 1 次元の <see cref="T:System.Array" />。<see cref="T:System.Array" /> には 0 から始まるインデックスが必要です。</param>
      <param name="arrayIndex">コピーの開始位置となる、<paramref name="array" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。または<paramref name="array" /> に 0 から始まるインデックス番号がありません。またはコピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先の <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの領域を超えています。またはコピー元の <see cref="T:System.Collections.ICollection" /> の型が、コピー先の <paramref name="array" /> の型に自動的にキャストできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) 場合は true。それ以外の場合は false。<see cref="T:System.Collections.Generic.Stack`1" /> の既定の実装では、このプロパティから必ず false が返されます。</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。<see cref="T:System.Collections.Generic.Stack`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" /> を新しい配列にコピーします。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> の要素のコピーを格納する新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" /> 内にある実際の要素数が現在の容量の 90% 未満の場合は、容量をその数に設定します。</summary>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" /> の要素を列挙します。</summary>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> 内の、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が、コレクションの最初の要素の前、または最後の要素の後に位置しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
      <summary>列挙子を <see cref="T:System.Collections.Generic.Stack`1" /> の次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は true。列挙子がコレクションの末尾を越えた場合は false。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
      <exception cref="T:System.InvalidOperationException">列挙子が、コレクションの最初の要素の前、または最後の要素の後に位置しています。 </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。このクラスは継承できません。</summary>
      <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ObservableCollection`1">
      <summary>項目が追加、削除されたとき、またはリスト全体が更新されたときに通知を提供する動的なデータ コレクションを表します。</summary>
      <typeparam name="T">コレクション内の項目の型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
      <summary>
        <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> クラスの新しい空のインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> クラスの新しいインスタンスを初期化し、指定されたコレクションからコピーした項目を設定します。</summary>
      <param name="collection">項目のコピー元のコレクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
      <summary>
        <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> クラスの新しいインスタンスを初期化し、指定されたリストからコピーした項目を設定します。</summary>
      <param name="list">項目のコピー元のリスト。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy">
      <summary>このコレクションを変更するための再入試行を禁止します。</summary>
      <returns>オブジェクトの破棄に使用できる <see cref="T:System.IDisposable" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy">
      <summary>このコレクションを変更するための再入試行をチェックします。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" /> が呼び出され、その <see cref="T:System.IDisposable" /> 戻り値がまだ破棄されていない場合。通常、これは、<see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> イベントの発生中に、コレクションに対して追加の変更が実行されることを意味します。ただし、このような状況が発生するかどうかは、派生クラスが <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" /> の呼び出しを選択するタイミングに応じて異なります。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
      <summary>コレクションからすべての項目を削除します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> または <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> イベント ハンドラーでメソッドが呼び出されています。</exception>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
      <summary>コレクション内の項目が変更されたとき、またはコレクション全体が変更されたときに発生します。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary>コレクション内の指定したインデックスの位置に項目を挿入します。</summary>
      <param name="index">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス番号。</param>
      <param name="item">挿入するオブジェクト。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> または <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> イベント ハンドラーでメソッドが呼び出されています。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)">
      <summary>指定したインデックスが示す位置にある項目を、コレクション内の新しい場所に移動します。</summary>
      <param name="oldIndex">移動する項目の場所を指定する、0 から始まるインデックス。</param>
      <param name="newIndex">項目の新しい場所を指定する、0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)">
      <summary>指定したインデックスが示す位置にある項目を、コレクション内の新しい場所に移動します。</summary>
      <param name="oldIndex">移動する項目の場所を指定する、0 から始まるインデックス。</param>
      <param name="newIndex">項目の新しい場所を指定する、0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>指定されたイベント データを使用して、<see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> イベントを発生させます。</summary>
      <param name="e">イベントで報告するイベント データ。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>指定された引数を使用して、<see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> イベントを発生させます。</summary>
      <param name="e">イベントで報告するイベント データ。</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
      <summary>コレクション内の個々の項目のプロパティが変更されたときに発生します。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
      <summary>コレクション内の指定したインデックス位置にある項目を削除します。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> または <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> イベント ハンドラーでメソッドが呼び出されています。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
      <summary>指定したインデックス位置にある項目を置換します。</summary>
      <param name="index">置き換えられる項目の 0 から始まるインデックス。</param>
      <param name="item">指定したインデックス位置に存在する項目の新しい値。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> または <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> イベント ハンドラーでメソッドが呼び出されています。</exception>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>プロパティ値が変更されたときに発生します。</summary>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1">
      <summary>読み取り専用の <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> を表します。</summary>
      <typeparam name="T">コレクションが保持するオブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
      <summary>指定した <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> のラッパーとして使用される <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="list">ラップするコレクション。</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged">
      <summary>項目が追加または削除されるときに発生します。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
        <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged" /> イベントを発生させます。</summary>
      <param name="args">イベントのデータ。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
        <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged" /> イベントを発生させます。</summary>
      <param name="args">イベントのデータ。</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged">
      <summary>プロパティ値が変更されたときに発生します。</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>このメンバーの説明については、<see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> のトピックを参照してください。</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>このメンバーの説明については、<see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> のトピックを参照してください。</summary>
    </member>
    <member name="T:System.Collections.Specialized.INotifyCollectionChanged">
      <summary>項目が追加または削除されたとき、あるいはコレクション オブジェクトがリセットされたときなどに、コレクションに対する動的な変更をリスナーに通知します。</summary>
    </member>
    <member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
      <summary>コレクションの項目リストが変更されたとき、またはコレクションがリセットされたときに発生します。</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
      <summary>
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントを発生させるアクションを説明します。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
      <summary>1 つ以上の項目がコレクションに追加されました。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move">
      <summary>コレクション内で 1 つ以上の項目が移動されました。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
      <summary>1 つ以上の項目がコレクションから削除されました。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
      <summary>コレクション内で 1 つ以上の項目が置き換えられました。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
      <summary>コレクションの内容が大幅に変更されました。</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
      <summary>
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントのイベント データを提供します。</summary>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
      <summary>
        <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction" /> 値を指定して、<see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">列挙値としてのアクション値。これは常に <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" /> です。詳細については「解説」を参照してください。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" /> が <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" /> ではありません。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
      <summary>複数項目の変更を表す <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">イベントの原因となったアクション。<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />、<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />、または <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> に設定できます。</param>
      <param name="changedItems">変更の影響を受ける項目。</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
      <summary>
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> による複数項目の変更を表す <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">イベントの原因となったアクション。<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> のみに設定できます。</param>
      <param name="newItems">元の項目を置き換える新しい項目。</param>
      <param name="oldItems">置き換えられる元の項目。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> が Replace ではない場合。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldItems" /> または <paramref name="newItems" /> が null の場合。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary>
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> による複数項目の変更を表す <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">イベントの原因となったアクション。<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> のみに設定できます。</param>
      <param name="newItems">元の項目を置き換える新しい項目。</param>
      <param name="oldItems">置き換えられる元の項目。</param>
      <param name="startingIndex">置き換えられる項目の最初の項目のインデックス。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> が Replace ではない場合。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldItems" /> または <paramref name="newItems" /> が null の場合。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
      <summary>複数項目の変更または <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" /> による変更を表す <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">イベントの原因となったアクション。<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />、<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />、または <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> に設定できます。</param>
      <param name="changedItems">変更の影響を受ける項目。</param>
      <param name="startingIndex">変更が発生したインデックス。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> が Reset、Add、Remove ではない場合、<paramref name="action" /> が Reset で、かつ<paramref name="changedItems" /> が null ではないか、<paramref name="startingIndex" /> が -1 ではない場合、または action が Add または Remove で、かつ<paramref name="startingIndex" /> が -1 より小さい場合。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> が Add または Remove で、<paramref name="changedItems" /> が null の場合。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
      <summary>
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> による複数項目の変更を表す <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">イベントの原因となったアクション。<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> のみに設定できます。</param>
      <param name="changedItems">変更の影響を受ける項目。</param>
      <param name="index">変更された項目の新しいインデックス。</param>
      <param name="oldIndex">変更された項目の古いインデックス。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> が Move ではない場合、または <paramref name="index" /> が 0 未満の場合。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
      <summary>1 項目の変更を表す <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">イベントの原因となったアクション。<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />、<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />、または <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> に設定できます。</param>
      <param name="changedItem">変更の影響を受ける項目。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> が Reset、Add、Remove ではない場合、または <paramref name="action" /> が Reset で、かつ <paramref name="changedItem" /> が null ではない場合。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
      <summary>
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> または <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> の変更を説明する <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">列挙値としてのアクション値。これは <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> または <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> です。詳細については「解説」を参照してください。</param>
      <param name="changedItem">変更の影響を受ける項目。</param>
      <param name="index">変更が発生したインデックス。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" /> が <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> または <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> ではありません。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
      <summary>1 項目の <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> の変更を表す <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">イベントの原因となったアクション。<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> のみに設定できます。</param>
      <param name="changedItem">変更の影響を受ける項目。</param>
      <param name="index">変更された項目の新しいインデックス。</param>
      <param name="oldIndex">変更された項目の古いインデックス。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> が Move ではない場合、または <paramref name="index" /> が 0 未満の場合。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
      <summary>
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> による 1 項目の変更を表す <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">イベントの原因となったアクション。<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> のみに設定できます。</param>
      <param name="newItem">元の項目を置き換える新しい項目。</param>
      <param name="oldItem">置き換えられる元の項目。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> が Replace ではない場合。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
      <summary>
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> による変更を表す <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">列挙値としてのアクション値。これは <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> です。詳細については「解説」を参照してください。</param>
      <param name="newItem">元の項目を置き換える新しい項目。</param>
      <param name="oldItem">置き換えられる元の項目。</param>
      <param name="index">置き換えられる項目のインデックス。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" /> が <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> ではありません。</exception>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
      <summary>イベントの原因となったアクションの説明を取得します。</summary>
      <returns>イベントを発生させたアクションの説明である列挙体の値。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
      <summary>アクションの影響を受ける項目を取得します。</summary>
      <returns>アクションの影響を受ける項目のリスト。既定値は null です。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
      <summary>変更が発生した位置のインデックスを取得します。</summary>
      <returns>変更が発生したインデックス。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
      <summary>
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> アクションまたは <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> アクションの影響を受けた項目を取得します。</summary>
      <returns>
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> または <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> アクションの影響を受ける項目のリスト。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
      <summary>
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> アクションまたは <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> アクションで変更が発生した位置のインデックスを取得します。</summary>
      <returns>
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> または <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> アクションによる変更が発生したインデックス。</returns>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
      <summary>
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントを実装するイベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントを発生させたオブジェクト。</param>
      <param name="e">イベントのデータ。</param>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventArgs">
      <summary>MethodNameCompleted イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="error">非同期操作中に発生したエラー。</param>
      <param name="cancelled">非同期操作がキャンセルされたかどうかを示す値。</param>
      <param name="userState">Completed イベントを発生させたタスクの特定に使用する、オプションのユーザー指定の状態オブジェクト。</param>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
      <summary>非同期操作が取り消されたかどうかを示す値を取得します。</summary>
      <returns>非同期操作が取り消された場合は true。それ以外の場合は false。既定値は false です。</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
      <summary>非同期操作中に発生したエラーを示す値を取得します。</summary>
      <returns>非同期操作中にエラーが発生した場合は <see cref="T:System.Exception" /> インスタンス。それ以外の場合は null。</returns>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
      <summary>非同期操作が失敗した場合は、ユーザー指定の例外を発生させます。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> プロパティが true です。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> プロパティは、非同期操作によって設定されています。</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
      <summary>非同期タスクの一意の識別子を取得します。</summary>
      <returns>非同期タスクを一意に識別するオブジェクト参照。値が設定されていない場合は null。</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventHandler">
      <summary>非同期操作の MethodNameCompleted イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.AsyncOperation">
      <summary>非同期操作の有効期間を追跡します。</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.OperationCompleted">
      <summary>非同期操作の有効期間を終了します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" />  は、このタスクに対して既に呼び出されています。</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>アプリケーション モデルに適したスレッドまたはコンテキストでデリゲートを呼び出します。</summary>
      <param name="d">操作終了時に呼び出されるデリゲートをラップする <see cref="T:System.Threading.SendOrPostCallback" /> オブジェクト。</param>
      <param name="arg">
        <paramref name="d" /> パラメーターに格納されているデリゲートの引数。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> メソッドは、このタスクに対して既に呼び出されています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> が null です。</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
      <summary>非同期操作の有効期間を終了します。</summary>
      <param name="d">操作終了時に呼び出されるデリゲートをラップする <see cref="T:System.Threading.SendOrPostCallback" /> オブジェクト。</param>
      <param name="arg">
        <paramref name="d" /> パラメーターに格納されているデリゲートの引数。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> メソッドは、このタスクに対して既に呼び出されています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> が null です。</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
      <summary>
        <see cref="T:System.ComponentModel.AsyncOperationManager" /> によってオブジェクトが作成されたときにコンストラクターに渡された <see cref="T:System.Threading.SynchronizationContext" /> オブジェクトを取得します。</summary>
      <returns>コンストラクターに渡された <see cref="T:System.Threading.SynchronizationContext" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
      <summary>非同期操作を一意に識別するために使用するオブジェクトを取得します。</summary>
      <returns>非同期メソッド呼び出しに渡される状態オブジェクト。</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncOperationManager">
      <summary>非同期メソッドの呼び出しをサポートするクラスに同時実行管理を提供します。このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
      <summary>特定の非同期操作の存続期間を追跡するために使用する <see cref="T:System.ComponentModel.AsyncOperation" /> を返します。</summary>
      <returns>非同期メソッドの呼び出しの存続期間を追跡するために使用できる <see cref="T:System.ComponentModel.AsyncOperation" />。</returns>
      <param name="userSuppliedState">クライアント状態の一部 (タスク ID など) を特定の非同期操作に関連付けるために使用されるオブジェクト。</param>
    </member>
    <member name="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
      <summary>非同期操作の <see cref="T:System.Threading.SynchronizationContext" /> を取得または設定します。</summary>
      <returns>非同期操作の <see cref="T:System.Threading.SynchronizationContext" />。</returns>
    </member>
    <member name="T:System.ComponentModel.BackgroundWorker">
      <summary>別のスレッドで操作を実行します。</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.BackgroundWorker" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.CancelAsync">
      <summary>保留中のバックグラウンド操作の取り消しを要求します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> が false です。</exception>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.CancellationPending">
      <summary>アプリケーションがバックグラウンド操作の取り消しを要求したかどうかを示す値を取得します。</summary>
      <returns>アプリケーションがバックグラウンド操作の取り消しを要求した場合は true。それ以外の場合は false。既定値は false です。</returns>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.DoWork">
      <summary>
        <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> が呼び出されると発生します。</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.IsBusy">
      <summary>
        <see cref="T:System.ComponentModel.BackgroundWorker" /> がバックグラウンド操作を実行しているかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.BackgroundWorker" /> がバックグラウンド操作を実行中の場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> イベントを発生させます。</summary>
      <param name="e">イベント データが含まれている <see cref="T:System.ComponentModel.DoWorkEventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> イベントを発生させます。</summary>
      <param name="e">イベント データが含まれている <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> イベントを発生させます。</summary>
      <param name="e">イベント データが含まれている <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" />。</param>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
      <summary>
        <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /> が呼び出されると発生します。</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
      <summary>
        <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> イベントを発生させます。</summary>
      <param name="percentProgress">バックグラウンド操作の完了した割合 (0 ～ 100%)。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> プロパティが false に設定されています。</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
      <summary>
        <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> イベントを発生させます。</summary>
      <param name="percentProgress">バックグラウンド操作の完了した割合 (0 ～ 100%)。</param>
      <param name="userState">
        <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /> に渡される状態オブジェクト。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> プロパティが false に設定されています。</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
      <summary>バックグラウンド操作の実行を開始します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> が true です。</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
      <summary>バックグラウンド操作の実行を開始し、バックグラウンド操作で使用するパラメーターを含めます。</summary>
      <param name="argument">
        <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> イベント ハンドラーのバックグラウンド操作で使用するパラメーター。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> が true です。</exception>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
      <summary>バックグラウンド操作の完了時、取り消し時、またはバックグラウンド操作によって例外が発生したときに発生します。</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
      <summary>
        <see cref="T:System.ComponentModel.BackgroundWorker" /> が進行状況の更新を報告できるかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.BackgroundWorker" /> が進行状況の更新をサポートしている場合は true。それ以外の場合は false。既定値は false です。</returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
      <summary>
        <see cref="T:System.ComponentModel.BackgroundWorker" /> が非同期の取り消しをサポートしているかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.BackgroundWorker" /> が取り消しをサポートしている場合は true。それ以外の場合は false。既定値は false です。</returns>
    </member>
    <member name="T:System.ComponentModel.BrowsableAttribute">
      <summary>プロパティまたはイベントを [プロパティ] ウィンドウに表示するかどうかを指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.BrowsableAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="browsable">プロパティまたはイベントをデザイン時に変更できる場合は true。それ以外の場合は false。既定値は true です。</param>
    </member>
    <member name="P:System.ComponentModel.BrowsableAttribute.Browsable">
      <summary>オブジェクトが参照可能かどうかを示す値を取得します。</summary>
      <returns>オブジェクトが参照可能である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.BrowsableAttribute" /> の既定値 (<see cref="F:System.ComponentModel.BrowsableAttribute.Yes" />) を指定します。この static フィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.Equals(System.Object)">
      <summary>このインスタンスと指定したオブジェクトが等値であるかどうかを示します。</summary>
      <returns>
        <paramref name="obj" /> がこのインスタンスに等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のもう 1 つのオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.No">
      <summary>プロパティまたはイベントをデザイン時に変更できないことを指定します。この static フィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Yes">
      <summary>プロパティまたはイベントをデザイン時に変更できることを指定します。この static フィールドは読み取り専用です。</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventArgs">
      <summary>キャンセルできるイベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.CancelEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.CancelEventArgs" /> プロパティが特定の値に設定されている <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="cancel">操作を取り消す場合は true。それ以外の場合は false。</param>
    </member>
    <member name="P:System.ComponentModel.CancelEventArgs.Cancel">
      <summary>操作を取り消す必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>操作を取り消す場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.ComponentModel.CategoryAttribute">
      <summary>[カテゴリ別] モードに設定されているプロパティ グリッド コントロールに表示されるときのプロパティまたはイベントを分類するカテゴリの名前を指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor">
      <summary>Default というカテゴリ名を使用して、<see cref="T:System.ComponentModel.CategoryAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor(System.String)">
      <summary>指定したカテゴリ名を使用して、<see cref="T:System.ComponentModel.CategoryAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="category">カテゴリの名前。</param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Action">
      <summary>Action カテゴリを表す <see cref="T:System.ComponentModel.CategoryAttribute" /> を取得します。</summary>
      <returns>Action カテゴリの <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Appearance">
      <summary>Appearance カテゴリを表す <see cref="T:System.ComponentModel.CategoryAttribute" /> を取得します。</summary>
      <returns>Appearance カテゴリの <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Asynchronous">
      <summary>Asynchronous カテゴリを表す <see cref="T:System.ComponentModel.CategoryAttribute" /> を取得します。</summary>
      <returns>Asynchronous カテゴリの <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Behavior">
      <summary>Behavior カテゴリを表す <see cref="T:System.ComponentModel.CategoryAttribute" /> を取得します。</summary>
      <returns>Behavior カテゴリの <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Category">
      <summary>この属性が適用されているプロパティまたはイベントのカテゴリ名を取得します。</summary>
      <returns>この属性が適用されているプロパティまたはイベントのカテゴリ名。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Data">
      <summary>Data カテゴリを表す <see cref="T:System.ComponentModel.CategoryAttribute" /> を取得します。</summary>
      <returns>Data カテゴリの <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Default">
      <summary>Default カテゴリを表す <see cref="T:System.ComponentModel.CategoryAttribute" /> を取得します。</summary>
      <returns>Default カテゴリの <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Design">
      <summary>Design カテゴリを表す <see cref="T:System.ComponentModel.CategoryAttribute" /> を取得します。</summary>
      <returns>Design カテゴリの <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.DragDrop">
      <summary>DragDrop カテゴリを表す <see cref="T:System.ComponentModel.CategoryAttribute" /> を取得します。</summary>
      <returns>DragDrop カテゴリの <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.Equals(System.Object)">
      <summary>指定されたオブジェクトの値が現在の <see cref="T:System.ComponentModel.CategoryAttribute" /> と等しいかどうかを返します。</summary>
      <returns>指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.CategoryAttribute" /> と等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">値が等しいかどうかを確認するオブジェクト。</param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Focus">
      <summary>Focus カテゴリを表す <see cref="T:System.ComponentModel.CategoryAttribute" /> を取得します。</summary>
      <returns>Focus カテゴリの <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Format">
      <summary>Format カテゴリを表す <see cref="T:System.ComponentModel.CategoryAttribute" /> を取得します。</summary>
      <returns>Format カテゴリの <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetHashCode">
      <summary>この属性のハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)">
      <summary>指定したカテゴリのローカライズされた名前を検索します。</summary>
      <returns>ローカライズされたカテゴリ名。ローカライズされた名前がない場合は null。</returns>
      <param name="value">検索するカテゴリの識別子。</param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Key">
      <summary>Key カテゴリを表す <see cref="T:System.ComponentModel.CategoryAttribute" /> を取得します。</summary>
      <returns>Key カテゴリの <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Layout">
      <summary>Layout カテゴリを表す <see cref="T:System.ComponentModel.CategoryAttribute" /> を取得します。</summary>
      <returns>Layout カテゴリの <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Mouse">
      <summary>Mouse カテゴリを表す <see cref="T:System.ComponentModel.CategoryAttribute" /> を取得します。</summary>
      <returns>Mouse カテゴリの <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.WindowStyle">
      <summary>WindowStyle カテゴリを表す <see cref="T:System.ComponentModel.CategoryAttribute" /> を取得します。</summary>
      <returns>WindowStyle カテゴリの <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentCollection">
      <summary>コンテナー内の特定のコンポーネントを取得します。</summary>
    </member>
    <member name="T:System.ComponentModel.DataErrorsChangedEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.DataErrorsChangedEventArgs.#ctor(System.String)">
      <summary>
        <see cref="T:System.ComponentModel.DataErrorsChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="propertyName">エラーが変更されたプロパティの名前。エンティティ レベルのエラーの場合は null または <see cref="F:System.String.Empty" />。</param>
    </member>
    <member name="P:System.ComponentModel.DataErrorsChangedEventArgs.PropertyName">
      <summary>エラーが変更されたプロパティの名前を取得します。エンティティ レベルのエラーの場合は null または <see cref="F:System.String.Empty" />。</summary>
      <returns>影響を受けたプロパティ名。エンティティ レベルのエラーの場合は null または <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
      <summary>プロパティの既定値を指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Boolean" /> 値を使用して、<see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">既定値である <see cref="T:System.Boolean" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
      <summary>8 ビット符号なし整数を使用して、<see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">既定値の 8 ビット符号なし整数。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
      <summary>Unicode 文字を使用して、<see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">既定値の Unicode 文字。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
      <summary>倍精度浮動小数点数を使用して、<see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">既定値の倍精度浮動小数点数。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
      <summary>16 ビット符号付き整数を使用して、<see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">既定値である 16 ビット符号付き整数。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
      <summary>32 ビット符号付き整数を使用して、<see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">既定値である 32 ビット符号付き整数。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
      <summary>64 ビット符号付き整数を使用して、<see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">既定値である 64 ビット符号付き整数。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">既定値を表す <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
      <summary>単精度浮動小数点数を使用して、<see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">既定値の単精度浮動小数点数。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.String" />. を使用して、<see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">既定値である <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
      <summary>指定した値を指定した型に変換し、インバリアント カルチャを変換コンテキストとして使用して、<see cref="T:System.ComponentModel.DefaultValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">値の変換後の型を表す <see cref="T:System.Type" />。</param>
      <param name="value">指定した型の <see cref="T:System.ComponentModel.TypeConverter" /> と英語 (U.S.) カルチャを使用して、その型に変換できる <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.Equals(System.Object)">
      <summary>指定されたオブジェクトの値が現在の <see cref="T:System.ComponentModel.DefaultValueAttribute" /> と等しいかどうかを返します。</summary>
      <returns>指定したオブジェクトの値が現在の値と等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">値が等しいかどうかを確認するオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.GetHashCode"></member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.SetValue(System.Object)">
      <summary>この属性が関連付けられているプロパティの既定値を設定します。</summary>
      <param name="value">既定値。</param>
    </member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
      <summary>この属性が関連付けられているプロパティの既定値を取得します。</summary>
      <returns>この属性が関連付けられているプロバティの既定値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DescriptionAttribute">
      <summary>プロパティまたはイベントの説明を指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor">
      <summary>パラメーターを指定せずに、<see cref="T:System.ComponentModel.DescriptionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)">
      <summary>説明を指定して、<see cref="T:System.ComponentModel.DescriptionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="description">説明テキスト。</param>
    </member>
    <member name="F:System.ComponentModel.DescriptionAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.DescriptionAttribute" /> の既定値である空の文字列 ("") を指定します。この static フィールドは読み取り専用です。</summary>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.Description">
      <summary>この属性に格納されている説明を取得します。</summary>
      <returns>この属性に格納されている説明。</returns>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.DescriptionValue">
      <summary>説明として格納されている文字列を取得または設定します。</summary>
      <returns>説明として格納されている文字列。既定値は空の文字列 ("") です。</returns>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.Equals(System.Object)">
      <summary>指定されたオブジェクトの値が現在の <see cref="T:System.ComponentModel.DescriptionAttribute" /> と等しいかどうかを返します。</summary>
      <returns>指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.DescriptionAttribute" /> と等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">値が等しいかどうかを確認するオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.GetHashCode"></member>
    <member name="T:System.ComponentModel.DoWorkEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.DoWorkEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="argument">非同期操作の引数を指定します。</param>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Argument">
      <summary>非同期操作の引数を表す値を取得します。</summary>
      <returns>非同期操作の引数を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Cancel">
      <summary>非同期操作が取り消されたかどうかを示す値を取得または設定します。</summary>
      <returns>操作が取り消された場合は true。それ以外の場合は false。既定値は false です。</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Result">
      <summary>非同期操作の結果を表す値を取得または設定します。</summary>
      <returns>非同期操作の結果を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventHandler">
      <summary>
        <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> メソッドが呼び出されたときに発生する <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データが含まれている <see cref="T:System.ComponentModel.DoWorkEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
      <summary>プロパティまたはメソッドをエディターから参照できるかどうかを指定します。このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor">
      <summary>
        <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> を既定の状態に設定して、<see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
      <summary>
        <see cref="T:System.ComponentModel.EditorBrowsableState" /> を指定して、<see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="state">
        <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> を設定する <see cref="T:System.ComponentModel.EditorBrowsableState" />。</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
      <summary>指定されたオブジェクトの値が現在の <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> と等しいかどうかを返します。</summary>
      <returns>指定されたオブジェクトの値が現在の値と等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">値が等しいかどうかを確認するオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.GetHashCode"></member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
      <summary>プロパティまたはメソッドが参照可能な状態かどうかを示す値を取得します。</summary>
      <returns>プロパティまたはメソッドが参照可能な状態かどうかを示す <see cref="T:System.ComponentModel.EditorBrowsableState" />。</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
      <summary>プロパティまたはメソッドがエディター内から参照できる状態かどうかを指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
      <summary>このプロパティまたはメソッドは、上級ユーザーだけが参照すべき機能です。これらのプロパティは、エディターで表示することも非表示にすることもできます。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
      <summary>このプロパティまたはメソッドは、エディター内から常に参照できます。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
      <summary>このプロパティまたはメソッドは、エディター内からは参照できません。</summary>
    </member>
    <member name="T:System.ComponentModel.IChangeTracking">
      <summary>オブジェクトが変更されたかどうかの問い合わせと、変更されたステータスのリセットを行うための機構を定義します。</summary>
    </member>
    <member name="M:System.ComponentModel.IChangeTracking.AcceptChanges">
      <summary>変更を受け入れることによって、オブジェクトの状態を、変更されていない状態にリセットします。 </summary>
    </member>
    <member name="P:System.ComponentModel.IChangeTracking.IsChanged">
      <summary>オブジェクトの変更されたステータスを取得します。</summary>
      <returns>
        <see cref="M:System.ComponentModel.IChangeTracking.AcceptChanges" /> の最後の呼び出し以降にオブジェクトの内容が変更されている場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.ComponentModel.IComponent">
      <summary>クラスによる実装時、コンポーネントに関連付けられた <see cref="T:System.ComponentModel.ISite" /> を取得または設定します。</summary>
    </member>
    <member name="E:System.ComponentModel.IComponent.Disposed">
      <summary>コンポーネントの Disposed イベントを待機するイベント ハンドラーを追加します。</summary>
    </member>
    <member name="P:System.ComponentModel.IComponent.Site">
      <summary>クラスによる実装時、コンポーネントに関連付けられた <see cref="T:System.ComponentModel.ISite" /> を取得または設定します。</summary>
      <returns>コンポーネントに関連付けられている <see cref="T:System.ComponentModel.ISite" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IContainer">
      <summary>コンテナーの機能を提供します。コンテナーとは、論理上 0 個以上のコンポーネントを格納しているオブジェクトです。</summary>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent)">
      <summary>コンポーネントをコンテナーに追加します。</summary>
      <param name="component">追加するコンポーネント。</param>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent,System.String)">
      <summary>コンポーネントをコンテナーに追加します。</summary>
      <param name="component">追加するコンポーネント。</param>
      <param name="name">コンポーネントの識別名。</param>
    </member>
    <member name="P:System.ComponentModel.IContainer.Components">
      <summary>
        <see cref="T:System.ComponentModel.IContainer" /> 内のすべてのコンポーネントを取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IContainer" /> 内のコンポーネントのコレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.IContainer.Remove(System.ComponentModel.IComponent)">
      <summary>コンテナーからコンポーネントを削除します。</summary>
      <param name="component">削除するコンポーネント。</param>
    </member>
    <member name="T:System.ComponentModel.IEditableObject">
      <summary>編集モードがあり、変更をコミットまたは元に戻すことができるオブジェクトを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.BeginEdit">
      <summary>オブジェクトを編集モードにします。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.CancelEdit">
      <summary>オブジェクトの編集モードを終了し、編集前の値に戻します。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.EndEdit">
      <summary>オブジェクトの編集モードを終了し、編集後の値をコミットします。</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyDataErrorInfo">
      <summary>カスタムの同期および非同期検証サポートを提供するためにデータ エンティティ クラスに実装できるメンバーを定義します。</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged">
      <summary>1 つのプロパティまたはエンティティ全体の検証エラーが変更されたときに発生します。</summary>
    </member>
    <member name="M:System.ComponentModel.INotifyDataErrorInfo.GetErrors(System.String)">
      <summary>指定されたプロパティまたはエンティティ全体の検証エラーを取得します。</summary>
      <returns>プロパティまたはエンティティの検証エラー。</returns>
      <param name="propertyName">検証エラーを取得する対象のプロパティの名前。エンティティ レベルのエラーを取得する場合は null または <see cref="F:System.String.Empty" />。</param>
    </member>
    <member name="P:System.ComponentModel.INotifyDataErrorInfo.HasErrors">
      <summary>エンティティに検証エラーがあるかどうかを示す値を取得します。</summary>
      <returns>現在、エンティティに検証エラーがある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanged">
      <summary>プロパティ値が変更されたことをクライアントに通知します。</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
      <summary>プロパティ値が変更されたときに発生します。</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanging">
      <summary>プロパティ値が変更されようとしていることをクライアントに通知するイベントを定義します。</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging">
      <summary>プロパティ値が変更されようとしている場合に発生します。</summary>
    </member>
    <member name="T:System.ComponentModel.IRevertibleChangeTracking">
      <summary>変更のロールバックをサポートします。</summary>
    </member>
    <member name="M:System.ComponentModel.IRevertibleChangeTracking.RejectChanges">
      <summary>変更を拒否することによって、オブジェクトの状態を、変更されていない状態にリセットします。 </summary>
    </member>
    <member name="T:System.ComponentModel.ISite">
      <summary>サイトによって要求される機能を提供します。サイトはコンポーネントをコンテナーにバインドし、コンポーネントとコンテナー間の通信を有効にするほか、コンテナーがそのコンポーネントを管理する方法を提供します。</summary>
    </member>
    <member name="P:System.ComponentModel.ISite.Component">
      <summary>クラスによって実装される場合は、<see cref="T:System.ComponentModel.ISite" /> に関連付けられているコンポーネントを取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" /> に関連付けられているコンポーネント。</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Container">
      <summary>クラスによって実装される場合は、<see cref="T:System.ComponentModel.ISite" /> に関連付けられているコンテナーを取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" /> に関連付けられているコンテナー。</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.DesignMode">
      <summary>クラスによって実装される場合は、コンポーネントがデザイン モードかどうかを判断します。</summary>
      <returns>デザイン モードの場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Name">
      <summary>クラスによって実装される場合は、<see cref="T:System.ComponentModel.ISite" /> に関連付けられているコンポーネントの名前を取得または設定します。</summary>
      <returns>コンポーネントの名前。</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>型コンバーターまたは値エディターにコンテキスト情報を提供します。これにより、型コンバーターまたはエディターは変換を実行できます。</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>このフォーマッタのオブジェクトのセットを含むコンテナーを取得します。</summary>
      <returns>このフォーマッタのオブジェクトのセットを含むコンテナー。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>フォーマッタ オブジェクトのメソッドを呼び出しているインスタンスを取得します。</summary>
      <returns>フォーマッタ オブジェクトのメソッドを呼び出しているインスタンス。</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>
        <see cref="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged" /> イベントを発生させます。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>このオブジェクトを変更できるかどうかを示す値を取得します。</summary>
      <returns>このオブジェクトを変更できる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>特定のコンテキスト項目を表している <see cref="T:System.ComponentModel.PropertyDescriptor" /> を取得します。</summary>
      <returns>特定のコンテキスト項目を表している <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>並べ替え操作の方向を指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>昇順の並べ替えを行います。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>降順の並べ替えを行います。</summary>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.ProgressChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="progressPercentage">非同期操作が完了した割合。</param>
      <param name="userState">一意のユーザー状態。</param>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">
      <summary>非同期操作が完了した割合を取得します。</summary>
      <returns>非同期操作の進行状況の割合を示す値。</returns>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.UserState">
      <summary>一意のユーザー状態を取得します。</summary>
      <returns>ユーザー状態を示す一意の <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventHandler">
      <summary>
        <see cref="T:System.ComponentModel.BackgroundWorker" /> によって進行状況が報告されたときに発生する <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データが含まれている <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)">
      <summary>
        <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="propertyName">変更されたプロパティの名前。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName">
      <summary>変更されたプロパティの名前を取得します。</summary>
      <returns>変更されたプロパティの名前。すべてのプロパティが変更された場合は <see cref="F:System.String.Empty" /> または null。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventHandler">
      <summary>
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データが含まれている <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangingEventArgs.#ctor(System.String)">
      <summary>
        <see cref="T:System.ComponentModel.PropertyChangingEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="propertyName">変更中のプロパティの名前。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangingEventArgs.PropertyName">
      <summary>変更中のプロパティの名前を取得します。</summary>
      <returns>変更中のプロパティの名前。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventHandler">
      <summary>
        <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントのデータ。</param>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>プロパティの説明を提供します。</summary>
    </member>
    <member name="T:System.ComponentModel.ReadOnlyAttribute">
      <summary>この属性が適用されているプロパティを読み取り専用にするか、読み書き両用にするかを指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="isReadOnly">この属性が適用されているプロパティが読み取り専用であることを示す場合は true。プロパティが読み書き可能であることを示す場合は false。</param>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)">
      <summary>このインスタンスと指定したオブジェクトが等しいかどうかを返します。</summary>
      <returns>
        <paramref name="obj" /> がこのインスタンスに等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.GetHashCode">
      <summary>対象のインスタンスのハッシュ コードを返します。</summary>
      <returns>現在の <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
      <summary>この属性が適用されているプロパティが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>この属性が適用されているプロパティが読み取り専用の場合は true。プロパティが読み書き可能の場合は false。 </returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="result">非同期操作の結果。</param>
      <param name="error">非同期操作中に発生したエラー。</param>
      <param name="cancelled">非同期操作がキャンセルされたかどうかを示す値。</param>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result">
      <summary>非同期操作の結果を表す値を取得します。</summary>
      <returns>非同期操作の結果を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventHandler">
      <summary>
        <see cref="T:System.ComponentModel.BackgroundWorker" /> によって実行された処理が完了したとき、取り消されたとき、または例外を生成したときに発生する <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データが含まれている <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>値の型を別の型に変換するための統一的な方法を提供します。<see cref="T:System.ComponentModel.TypeConverter" /> では、通常、デザイン環境でのプロパティ エディター用に、または XAML を使用できるようにするために、文字列とオブジェクトとの間の変換をサポートしています。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.TypeConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>型コンバーターでオブジェクトを指定された型からこのコンバーターの型に変換できるかどうかを返します。</summary>
      <returns>このコンバーターで変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供するオブジェクト。</param>
      <param name="sourceType">変換前の型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>型コンバーターでオブジェクトを指定された型からこのコンバーターの型に変換できるかどうかを返します。</summary>
      <returns>このコンバーターで変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="sourceType">変換前の型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>型コンバーターでオブジェクトを指定された型に変換できるかどうかを返します。</summary>
      <returns>このコンバーターで変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="context">書式指定コンテキストを提供するオブジェクト。</param>
      <param name="destinationType">変換後の型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>型コンバーターでオブジェクトを指定された型に変換できるかどうかを返します。</summary>
      <returns>このコンバーターで変換を実行できる場合は true。それ以外の場合は false。</returns>
      <param name="destinationType">変換後の型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定した値から、コンバーターの目的の変換型に変換します。</summary>
      <returns>変換された値。</returns>
      <param name="context">書式指定コンテキストを提供するオブジェクト。</param>
      <param name="culture">現在のカルチャとして使用されている <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">このコンバーターの型に変換する値。</param>
      <exception cref="T:System.NotImplementedException">基本の <see cref="T:System.ComponentModel.TypeConverter" /> で実装されていない <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>指定した値をこのコンバーターの型に変換します。</summary>
      <returns>変換された値。</returns>
      <param name="value">このコンバーターの型に変換する値。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>指定したテキストをオブジェクトに変換します。</summary>
      <returns>変換後のテキスト文字列を表すオブジェクト。</returns>
      <param name="text">変換対象のオブジェクトのテキスト形式。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定した値オブジェクトを指定した型に変換します。</summary>
      <returns>変換後のオブジェクト。</returns>
      <param name="context">書式指定コンテキストを提供するオブジェクト。</param>
      <param name="culture">現在のカルチャとして使用されている <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換するオブジェクト。</param>
      <param name="destinationType">オブジェクトの変換後の型。</param>
      <exception cref="T:System.NotImplementedException">基本の <see cref="T:System.ComponentModel.TypeConverter" /> で実装されていない <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>指定した値オブジェクトを指定した型に変換します。</summary>
      <returns>変換後のオブジェクト。</returns>
      <param name="value">変換対象のオブジェクト。</param>
      <param name="destinationType">オブジェクトの変換後の型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>指定したオブジェクトを文字列形式に変換します。</summary>
      <returns>変換後の値を表すオブジェクト。</returns>
      <param name="value">変換対象のオブジェクト。</param>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>この属性が関連付けられている型またはプロパティの型コンバーターとして使用するクラスを指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.TypeConverterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>この属性が関連付けられているオブジェクトのデータ コンバーターとして指定した型名を使用して、<see cref="T:System.ComponentModel.TypeConverterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName">この属性が関連付けられているオブジェクトのデータ変換で使用するクラスの完全修飾名。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>この属性が関連付けられているオブジェクトのデータ コンバーターとして指定した型を使用して、<see cref="T:System.ComponentModel.TypeConverterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">この属性が関連付けられているオブジェクトのデータ変換で使用するコンバーター クラスの型。</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>この属性が関連付けられているオブジェクトのコンバーターとして使用する型の完全修飾型名を取得します。</summary>
      <returns>この属性が関連付けられているオブジェクトのコンバーターとして使用する型の完全修飾型名。コンバーターとして使用する型がない場合は空の文字列 ("")。既定値は空の文字列 ("") です。</returns>
    </member>
    <member name="T:System.Diagnostics.Debug">
      <summary>コードのデバッグに使用するメソッドとプロパティのセットを提供します。このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean)">
      <summary>条件をチェックし、その条件が falseの場合は、コール スタックを出力します。</summary>
      <param name="condition">評価する条件式。条件が trueの場合、コール スタックは表示されません。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)">
      <summary>条件をチェックし、その条件が false の場合は、指定したメッセージを表示します。</summary>
      <param name="condition">評価する条件式。条件が true の場合、指定したメッセージは表示されません。</param>
      <param name="message">表示するメッセージ。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)">
      <summary>条件をチェックし、その条件が false の場合は、指定した 2 つのメッセージを表示します。</summary>
      <param name="condition">評価する条件式。条件が true の場合、指定したメッセージは表示されません。</param>
      <param name="message">表示するメッセージ。</param>
      <param name="detailMessage">表示する詳細メッセージ。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])">
      <summary>条件をチェックし、その条件が false の場合は、メッセージとコール スタックを出力します。</summary>
      <param name="condition">評価する条件式。条件が true の場合、指定したメッセージとコール スタックは表示されません。</param>
      <param name="message">表示するメッセージ。</param>
      <param name="detailMessageFormat">0 個以上の書式項目と混合されたテキストを格納している複合書式指定文字列。<paramref name="args" /> 配列内のオブジェクトに対応します。</param>
      <param name="args">0 個以上の書式設定対象オブジェクトを含んだオブジェクト配列。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.Object)">
      <summary>OutputDebugString 関数を使用して、指定されたオブジェクトの <see cref="M:System.Object.ToString" /> メソッドの値をデバッガーに書き込みます。</summary>
      <param name="value">OutputDebugString 関数を使用して名前がデバッガーに送信されるオブジェクト。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String)">
      <summary>OutputDebugString 関数を使用して、デバッガーに指定されたメッセージを書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="message">デバッガーに書き込むメッセージ。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])">
      <summary>OutputDebugString 関数を使用して、デバッガーに書式指定文字列を書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="format">0 個以上の書式項目と混合されたテキストを格納している複合書式指定文字列。<paramref name="args" /> 配列内のオブジェクトに対応します。</param>
      <param name="args">0 個以上の書式設定対象オブジェクトを格納するオブジェクト配列。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)">
      <summary>条件が true の場合、OutputDebugString 関数を使用して、デバッガーに指定されたメッセージを書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="condition">評価する条件式。条件が true の場合、指定されたメッセージがデバッガーに書き込まれます。</param>
      <param name="message">デバッガーに書き込むメッセージ。 </param>
    </member>
    <member name="T:System.Diagnostics.Stopwatch">
      <summary>経過時間を正確に測定するために使用できるメソッドとプロパティのセットを提供します。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.Stopwatch" /> クラスの新しいインスタンスを作成します。</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.Elapsed">
      <summary>現在のインスタンスで測定した経過時間の合計を取得します。</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> を返します。</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
      <summary>現在のインスタンスで測定した経過時間の合計 (ミリ秒) を取得します。</summary>
      <returns>
        <see cref="T:System.Int64" /> を返します。</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
      <summary>現在のインスタンスで計測された経過時間の合計を取得します (タイマー刻み)。</summary>
      <returns>
        <see cref="T:System.Int64" /> を返します。</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.Frequency">
      <summary>1 秒あたりのタイマー刻みの数として、タイマーの頻度を取得します。このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetElapsedDateTimeTicks">
      <summary>このインスタンスの日時を表すティック数を取得します。</summary>
      <returns>
        <see cref="T:System.Int64" /> を返します。</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetRawElapsedTicks">
      <summary>現在のインスタンスで計測された経過時間の合計を取得します (タイマー刻み)。</summary>
      <returns>
        <see cref="T:System.Int64" /> を返します。</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetTimestamp">
      <summary>タイマー メカニズムの現在の刻み数を取得します。</summary>
      <returns>
        <see cref="T:System.Int64" /> を返します。</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.IsHighResolution">
      <summary>タイマーが高解像力のパフォーマンス カウンターに基づいているかどうかを示します。このフィールドは読み取り専用です。</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.IsRunning">
      <summary>Stopwatch タイマーが実行中かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Boolean" /> を返します。Stopwatch インスタンスが現在実行中で、間隔の経過時間を計測中の場合は true。それ以外の場合は false。 </returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Reset">
      <summary>時間間隔の測定を停止し、経過時間をリセットして 0 にします。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Restart">
      <summary>時間間隔の計測を停止し、経過時間をゼロにリセットして、経過時間の計測を開始します。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Start">
      <summary>間隔の経過時間の測定を開始または再開します。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.StartNew">
      <summary>新しい Stopwatch インスタンスを初期化して、経過時間のプロパティをゼロに設定し、経過時間の計測を開始します。</summary>
      <returns>
        <see cref="T:System.Diagnostics.Stopwatch" /> を返します。</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Stop">
      <summary>間隔の経過時間の測定を停止します。</summary>
    </member>
    <member name="T:System.IO.InvalidDataException">
      <summary>データ ストリームが無効な形式である場合にスローされる例外。</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor">
      <summary>
        <see cref="T:System.IO.InvalidDataException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.IO.InvalidDataException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>この例外の原因である内部例外への参照を指定して、<see cref="T:System.IO.InvalidDataException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。<paramref name="innerException" /> パラメーターが null でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Net.WebUtility">
      <summary>Web 要求の処理時に URL をエンコードおよびデコードするためのメソッドを提供します。</summary>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String)">
      <summary>HTTP 転送用に HTML エンコードされている文字列を、デコードされた文字列に変換します。</summary>
      <returns>デコードされた文字列。</returns>
      <param name="value">デコードする文字列。</param>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String)">
      <summary>文字列を、HTML エンコードされた文字列に変換します。</summary>
      <returns>エンコード文字列。</returns>
      <param name="value">エンコードする文字列。</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecode(System.String)">
      <summary>URL 伝送用にエンコードされた文字列を、デコードされた文字列に変換します。</summary>
      <returns>デコードされた文字列。</returns>
      <param name="encodedValue">デコードする文字列。</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>指定したエンコード オブジェクトを使用して、URL エンコードされたバイト配列をデコードされた文字列に変換します。この変換は、配列内の指定した位置から開始し、指定したバイト数に対して処理が継続されます。</summary>
      <returns>デコードされた文字列。</returns>
      <param name="encodedValue">デコードするバイト配列。</param>
      <param name="offset">バイト内のデコード開始位置。</param>
      <param name="count">デコードするバイト数。</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncode(System.String)">
      <summary>URL 文字列をエンコードします。</summary>
      <returns>エンコード文字列。</returns>
      <param name="value">エンコードするテキスト。</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>バイト配列を URL エンコードされた文字列に変換します。変換処理は、配列の指定した位置を開始点として、指定したバイト数の範囲に対して行われます。</summary>
      <returns>エンコード文字列。</returns>
      <param name="value">エンコードするバイト配列。</param>
      <param name="offset">バイト配列内のエンコード開始位置。</param>
      <param name="count">エンコードするバイト数。</param>
    </member>
    <member name="T:System.Text.RegularExpressions.Capture">
      <summary>単一の部分式キャプチャの結果を表します。</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
      <summary>キャプチャした部分文字列の最初の文字が見つかった元の文字列内の位置。</summary>
      <returns>キャプチャした部分文字列が見つかった元の文字列内の開始位置を示す 0 から始まる数値。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
      <summary>キャプチャされた部分文字列の長さ。</summary>
      <returns>キャプチャされた部分文字列の長さ。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
      <summary>入力文字列からキャプチャされた部分文字列を取得します。</summary>
      <returns>一致によってキャプチャされた実際の部分文字列。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
      <summary>入力文字列からキャプチャされた部分文字列を取得します。</summary>
      <returns>一致によってキャプチャされた実際の部分文字列。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
      <summary>1 つのキャプチャ グループによって作成されたキャプチャのセットを表します。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
      <summary>指定したインデックスを開始位置として、指定した配列にコレクションのすべての要素をコピーします。</summary>
      <param name="array">コレクションのコピー先の配列。</param>
      <param name="arrayIndex">コピー先配列内のコピー開始位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が <paramref name="array" /> の境界の外側にあります。または<paramref name="arrayIndex" /> に <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" /> を加えた値が <paramref name="array" /> の境界の外側にあります。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
      <summary>グループによってキャプチャされた部分文字列の数を取得します。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.CaptureCollection" /> 内の項目数。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
      <summary>コレクションを反復処理する列挙子を提供します。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.CaptureCollection" /> 内にあるすべての <see cref="T:System.Text.RegularExpressions.Capture" /> オブジェクトを保持するオブジェクト。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
      <summary>コレクションが読み取り専用であるかどうかを示す値を取得します。</summary>
      <returns>すべての場合に true。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
      <summary>コレクションへのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>すべての場合に false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
      <summary>コレクションの個別のメンバーを取得します。</summary>
      <returns>コレクション内の <paramref name="i" /> の位置にあるキャプチャされた部分文字列。</returns>
      <param name="i">キャプチャ コレクション内のインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> が 0 未満か、または <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" /> を超えています。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
      <summary>コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>コレクションへのアクセスの同期に使用できるオブジェクト。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
      <summary>単一のキャプチャ グループからの結果を表します。</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
      <summary>最も内側と左端が先の順序で、キャプチャ グループに一致したすべてのキャプチャ結果のコレクションを取得します。または、正規表現が <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> オプションを使用して変更されている場合は、最も内側と右端が先の順序で取得します。このコレクションには 0 個以上の項目が格納されています。</summary>
      <returns>グループに一致した部分文字列のコレクション。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
      <summary>一致した対象が見つかったかどうかを示す値を取得します。</summary>
      <returns>一致した対象が見つかった場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
      <summary>単一の一致に含まれるキャプチャ グループのコレクションを表します。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
      <summary>指定したインデックスを開始位置として、指定した配列にコレクションのすべての要素をコピーします。</summary>
      <param name="array">コレクションのコピー先の配列。</param>
      <param name="arrayIndex">コピー先配列内のコピー開始位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> が <paramref name="array" /> の境界の外側にあります。または<paramref name="arrayIndex" /> と <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> が <paramref name="array" /> の境界の外側にあります。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
      <summary>コレクション内のグループの数を返します。</summary>
      <returns>コレクション内のグループの数。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
      <summary>コレクションを反復処理できる列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 内にあるすべての <see cref="T:System.Text.RegularExpressions.Group" /> オブジェクトを格納しているオブジェクト。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
      <summary>コレクションが読み取り専用であるかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Text.RegularExpressions.GroupCollection" /> が読み取り専用の場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
      <summary>
        <see cref="T:System.Text.RegularExpressions.GroupCollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>すべての場合に false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
      <summary>整数インデックスによってコレクションのメンバーにアクセスできるようにします。</summary>
      <returns>
        <paramref name="groupnum" /> で指定されたコレクションのメンバー。</returns>
      <param name="groupnum">取得するコレクション メンバーの 0 から始まるインデックス。</param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
      <summary>文字列インデックスによってコレクションのメンバーにアクセスできるようにします。</summary>
      <returns>
        <paramref name="groupname" /> で指定されたコレクションのメンバー。</returns>
      <param name="groupname">キャプチャ グループの名前。</param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
      <summary>
        <see cref="T:System.Text.RegularExpressions.GroupCollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>同期する <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコピー。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
      <summary>1 回の正規表現検索に一致した結果を表します。</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
      <summary>空のグループを取得します。検索で一致が見つからなかった場合は、この空一致が返されます。</summary>
      <returns>空の <see cref="T:System.Text.RegularExpressions.Match" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
      <summary>正規表現に一致したグループのコレクションを取得します。</summary>
      <returns>パターンに一致した文字グループ。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
      <summary>一致する対象が最後に見つかった位置 (最後に一致した文字の後ろの文字) から開始して、次に一致する対象を検索した結果の新しい <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトを返します。</summary>
      <returns>次の正規表現一致。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
      <summary>指定された置換パターンを展開して返します。</summary>
      <returns>
        <paramref name="replacement" /> パラメーターの展開形式。</returns>
      <param name="replacement">使用する置換パターン。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> が null です。</exception>
      <exception cref="T:System.NotSupportedException">このパターンは展開できません。</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
      <summary>正規表現パターンを入力文字列に繰り返し適用して見つかった、一連の一致結果を表します。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
      <summary>指定したインデックスを開始位置として、指定した配列にコレクションのすべての要素をコピーします。</summary>
      <param name="array">コレクションのコピー先の配列。</param>
      <param name="arrayIndex">コピーの開始位置を示す、配列内の位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />  は、多次元配列です。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> が <paramref name="array" /> の境界の外側にあります。または<paramref name="arrayIndex" /> と <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> が <paramref name="array" /> の境界の外側にあります。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
      <summary>一致の数を取得します。</summary>
      <returns>一致の数。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
      <summary>
        <see cref="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)" /> と同じ順序の列挙子を提供します。</summary>
      <returns>MatchCollection 内にあるすべての Match オブジェクトを保持する <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
      <summary>コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>このプロパティの値は常に true です。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
      <summary>コレクションへのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>このプロパティの値は常に false です。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
      <summary>コレクションの個別のメンバーを取得します。</summary>
      <returns>コレクション内の <paramref name="i" /> の位置にあるキャプチャされた部分文字列。</returns>
      <param name="i">Match コレクション内のインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> が 0 未満、または <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" /> 以上です。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
      <summary>コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>コレクションへのアクセスの同期に使用できるオブジェクト。このプロパティは常にオブジェクト自体を返します。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> メソッドの操作中に、正規表現との一致が見つかるたびに呼び出されるメソッドを表します。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートが表すメソッドによって返された文字列。</returns>
      <param name="match">
        <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> メソッドの操作中に、1 つの正規表現で見つかった一致を表す <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクト。</param>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
      <summary>変更不可の正規表現を表します。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
      <summary>指定した正規表現の <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化およびコンパイルします。</summary>
      <param name="pattern">照合する正規表現パターン。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> が null です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>パターンを変更するオプションを使用して、指定した正規表現の <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化およびコンパイルします。</summary>
      <param name="pattern">照合する正規表現パターン。</param>
      <param name="options">列挙値のビットの組み合わせ。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" />  に無効なフラグが含まれています。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>指定した正規表現に対する <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを、パターンおよびパターン一致メソッドのタイムアウト時間の値を変更するオプションを使用して初期化します。</summary>
      <param name="pattern">照合する正規表現パターン。</param>
      <param name="options">正規表現を変更する列挙値のビットごとの組み合わせ。</param>
      <param name="matchTimeout">タイムアウト間隔、またはメソッドがタイムアウトしないことを示す場合は <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> が有効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。または<paramref name="matchTimeout" />  が負の値であるか、または約 24 日以上です。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CacheSize">
      <summary>コンパイルされた正規表現の現在の静的キャッシュ内の最大エントリ数を取得または設定します。</summary>
      <returns>静的キャッシュの最大エントリ数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">set 操作内の値が 0 未満です。</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capsize">
      <summary>正規表現エンジンによって内部で使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capslist">
      <summary>正規表現エンジンによって内部で使用されます。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
      <summary>最小限の文字 (\、*、+、?、|、{、[、(、)、^、$、.、#、および空白) をエスケープ コードに置き換えてエスケープします。これらの文字は、メタ文字ではなくリテラル文字として正規表現エンジンに解釈されるようになります。</summary>
      <returns>エスケープされた形に変換されたメタ文字を含んでいる文字列。</returns>
      <param name="str">変換するテキストが含まれている入力文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> が null です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
      <summary>正規表現で使用されるキャプチャ グループ名の配列を返します。</summary>
      <returns>グループ名の文字列配列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
      <summary>配列内のグループ名に対応したキャプチャ グループ番号の配列を返します。</summary>
      <returns>グループ番号の整数配列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
      <summary>指定したグループ番号に対応するグループ名を取得します。</summary>
      <returns>指定したグループ番号に関連付けられたグループ名を含んでいる文字列。<paramref name="i" /> に対応するグループ名が存在しない場合は、<see cref="F:System.String.Empty" /> が返されます。</returns>
      <param name="i">対応するグループ名に変換するグループ番号。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
      <summary>指定したグループ名に対応するグループ番号を返します。</summary>
      <returns>指定したグループ名に対応するグループ番号。または、<paramref name="name" /> が有効なグループ名ではない場合は -1。</returns>
      <param name="name">対応するグループ番号に変換するグループ名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が null です。</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout">
      <summary>パターン一致操作がタイムアウトしてはならないことを指定します。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現と一致する対象が入力文字列内で見つかったかどうかを示します。</summary>
      <returns>正規表現で一致が見つかった場合は true。それ以外の場合は false。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
      <summary>入力文字列内の指定した位置から検索を開始した場合に、<see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現と一致する対象が入力文字列内で見つかったかどうかを示します。</summary>
      <returns>正規表現で一致が見つかった場合は true。それ以外の場合は false。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="startat">検索を開始する文字の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> を 0 未満、または <paramref name="input" /> の長さを超える値にすることはできません。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
      <summary>
        <paramref name="pattern" /> パラメーターで指定された正規表現を使用して、その正規表現と一致する対象が入力文字列内に見つかったかどうかを示します。</summary>
      <returns>正規表現で一致が見つかった場合は true。それ以外の場合は false。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">照合する正規表現パターン。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。または<paramref name="pattern" /> が null です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
        <paramref name="pattern" /> パラメーターで指定された正規表現および <paramref name="options" /> パラメーターで指定された一致オプションを使用して、正規表現と一致する対象が入力文字列内で見つかったかどうかを示します。</summary>
      <returns>正規表現で一致が見つかった場合は true。それ以外の場合は false。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">照合する正規表現パターン。</param>
      <param name="options">列挙値のビットごとの組み合わせ。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。または<paramref name="pattern" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> が有効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>指定した一致オプションおよびタイムアウト間隔を使用して、指定した正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</summary>
      <returns>正規表現で一致が見つかった場合は true。それ以外の場合は false。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">照合する正規表現パターン。</param>
      <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
      <param name="matchTimeout">タイムアウト間隔、またはメソッドがタイムアウトしないことを示す場合は <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="pattern" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> が有効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
      <summary>指定した入力文字列内で、<see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現と最初に一致する対象を検索します。</summary>
      <returns>一致に関する情報が含まれているオブジェクト。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
      <summary>入力文字列内の指定した開始位置から検索を開始し、その入力文字列内で正規表現と最初に一致する対象を検索します。</summary>
      <returns>一致に関する情報が含まれているオブジェクト。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="startat">検索を開始する 0 から始まる文字位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さよりも大きい値です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
      <summary>入力文字列の開始位置および入力文字列長を指定して、その入力文字列内で正規表現と最初に一致する対象を検索します。</summary>
      <returns>一致に関する情報が含まれているオブジェクト。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="beginning">入力文字列において、検索範囲の左端の位置を定義する 0 から始まる文字位置。</param>
      <param name="length">検索に含める部分文字列の文字数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="beginning" /> が 0 未満か、<paramref name="input" /> の長さよりも大きい値です。または<paramref name="length" /> が 0 未満か、<paramref name="input" /> の長さよりも大きい値です。または<paramref name="beginning" />+<paramref name="length" />– 1 は、<paramref name="input" /> の範囲外の位置を識別します。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
      <summary>指定した入力文字列内で、<paramref name="pattern" /> パラメーターで指定された正規表現と最初に一致する対象を検索します。</summary>
      <returns>一致に関する情報が含まれているオブジェクト。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">照合する正規表現パターン。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。または<paramref name="pattern" /> が null です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
        <paramref name="options" /> パラメーターで一致オプションを指定し、<paramref name="pattern" /> パラメーターで指定された正規表現に最初に一致する対象を検索します。</summary>
      <returns>一致に関する情報が含まれているオブジェクト。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">照合する正規表現パターン。</param>
      <param name="options">列挙値のビットの組み合わせ。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。または<paramref name="pattern" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> が、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値の有効なビットごとの組み合わせではありません。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>指定した一致オプションおよびタイムアウト間隔を使用して、入力文字列内で、指定した正規表現に最初に一致する箇所を検索します。</summary>
      <returns>一致に関する情報が含まれているオブジェクト。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">照合する正規表現パターン。</param>
      <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
      <param name="matchTimeout">タイムアウト間隔、またはメソッドがタイムアウトしないことを示す場合は <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="pattern" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> が、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値の有効なビットごとの組み合わせではありません。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。タイムアウトの詳細については、「解説」を参照してください。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
      <summary>指定した入力文字列内で、正規表現に一致する箇所をすべて検索します。</summary>
      <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。一致が見つからなかった場合は、メソッドから空のコレクション オブジェクトが返されます。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
      <summary>指定した入力文字列内の指定した位置から開始して、その入力文字列内で正規表現に一致する箇所をすべて検索します。</summary>
      <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。一致が見つからなかった場合は、メソッドから空のコレクション オブジェクトが返されます。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="startat">入力文字列内の検索を開始する文字位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さよりも大きい値です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
      <summary>指定した入力文字列内で、<paramref name="pattern" /> パラメーターで指定された正規表現に一致する対象をすべて検索します。</summary>
      <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。一致が見つからなかった場合は、メソッドから空のコレクション オブジェクトが返されます。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">照合する正規表現パターン。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。または<paramref name="pattern" /> が null です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
        <paramref name="options" /> パラメーターに一致オプションを指定し、指定した入力文字列内で、<paramref name="pattern" /> パラメーターに指定した正規表現に一致する対象をすべて検索します。</summary>
      <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。一致が見つからなかった場合は、メソッドから空のコレクション オブジェクトが返されます。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">照合する正規表現パターン。</param>
      <param name="options">列挙値のビットの組み合わせ。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。または<paramref name="pattern" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> が、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値の有効なビットごとの組み合わせではありません。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>指定した一致オプションおよびタイムアウト間隔を使用して、指定した入力文字列内で、指定した正規表現に一致する箇所をすべて検索します。</summary>
      <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。一致が見つからなかった場合は、メソッドから空のコレクション オブジェクトが返されます。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">照合する正規表現パターン。</param>
      <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
      <param name="matchTimeout">タイムアウト間隔、またはメソッドがタイムアウトしないことを示す場合は <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.MatchTimeout">
      <summary>現在のインスタンスのタイムアウト間隔を取得します。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> がスローされる前にパターン一致操作が経過できる最大時間間隔。または、タイムアウトが無効の場合は <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターに渡されるオプションを返します。</summary>
      <returns>Regex コンストラクターに渡された <paramref name="options" /> パラメーター。</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.pattern">
      <summary>正規表現エンジンによって内部で使用されます。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
      <summary>指定した入力文字列内で正規表現パターンに一致するすべての文字列を、指定した置換文字列に置換します。</summary>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="replacement">置換文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。または<paramref name="replacement" /> が null です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
      <summary>指定した入力文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、指定した置換文字列に置換します。</summary>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="replacement">置換文字列。</param>
      <param name="count">置換を行う最大回数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。または<paramref name="replacement" /> が null です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>指定した入力部分文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、指定した置換文字列に置換します。</summary>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="replacement">置換文字列。</param>
      <param name="count">置換を行う最大回数。</param>
      <param name="startat">検索が開始される入力文字列内の文字位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。または<paramref name="replacement" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さよりも大きい値です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
      <summary>指定された入力文字列内で、指定された正規表現に一致するすべての文字列を、指定された置換文字列で置き換えます。</summary>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">照合する正規表現パターン。</param>
      <param name="replacement">置換文字列。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。または<paramref name="pattern" /> が null です。または<paramref name="replacement" /> が null です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。指定したオプションで、一致操作を変更します。</summary>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">照合する正規表現パターン。</param>
      <param name="replacement">置換文字列。</param>
      <param name="options">列挙値のビットの組み合わせ。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。または<paramref name="pattern" /> が null です。または<paramref name="replacement" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> が、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値の有効なビットごとの組み合わせではありません。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。追加のパラメーターでは、一致操作と一致するものが見つからなかった場合のタイムアウト間隔を変更するオプションを指定します。</summary>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">照合する正規表現パターン。</param>
      <param name="replacement">置換文字列。</param>
      <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
      <param name="matchTimeout">タイムアウト間隔、またはメソッドがタイムアウトしないことを示す場合は <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" />、または <paramref name="replacement" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> が、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値の有効なビットごとの組み合わせではありません。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。タイムアウトの詳細については、「解説」を参照してください。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>指定された入力文字列内で、指定された正規表現に一致するすべての文字列を、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートから返された文字列で置き換えます。</summary>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">照合する正規表現パターン。</param>
      <param name="evaluator">それぞれの一致を調べて、一致した元の文字列か置換文字列のいずれかを返すカスタム メソッド。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。または<paramref name="pattern" /> が null です。または<paramref name="evaluator" /> が null です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
      <summary>指定された入力文字列内で、指定された正規表現に一致するすべての文字列を、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートから返された文字列で置き換えます。指定したオプションで、一致操作を変更します。</summary>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">照合する正規表現パターン。</param>
      <param name="evaluator">それぞれの一致を調べて、一致した元の文字列か置換文字列のいずれかを返すカスタム メソッド。</param>
      <param name="options">列挙値のビットの組み合わせ。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。または<paramref name="pattern" /> が null です。または<paramref name="evaluator" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> が、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値の有効なビットごとの組み合わせではありません。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>指定された入力文字列内で、指定された正規表現に一致するすべての部分文字列を、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートから戻された文字列で置き換えます。追加のパラメーターでは、一致操作と一致するものが見つからなかった場合のタイムアウト間隔を変更するオプションを指定します。</summary>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">照合する正規表現パターン。</param>
      <param name="evaluator">それぞれの一致を調べて、一致した元の文字列か置換文字列のいずれかを返すカスタム メソッド。</param>
      <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
      <param name="matchTimeout">タイムアウト間隔、またはメソッドがタイムアウトしないことを示す場合は <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" />、または <paramref name="evaluator" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> が、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値の有効なビットごとの組み合わせではありません。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。タイムアウトの詳細については、「解説」を参照してください。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>指定された入力文字列内で、指定された正規表現に一致するすべての文字列を、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートから返された文字列で置き換えます。</summary>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="evaluator">それぞれの一致を調べて、一致した元の文字列か置換文字列のいずれかを返すカスタム メソッド。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。または<paramref name="evaluator" /> が null です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
      <summary>指定した入力文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置換します。</summary>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="evaluator">それぞれの一致を調べて、一致した元の文字列か置換文字列のいずれかを返すカスタム メソッド。</param>
      <param name="count">置換を実行する最大回数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。または<paramref name="evaluator" /> が null です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
      <summary>指定した入力部分文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置換します。</summary>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。</returns>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="evaluator">それぞれの一致を調べて、一致した元の文字列か置換文字列のいずれかを返すカスタム メソッド。</param>
      <param name="count">置換を実行する最大回数。</param>
      <param name="startat">検索が開始される入力文字列内の文字位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。または<paramref name="evaluator" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さよりも大きい値です。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
      <summary>正規表現が右から左の方向に検索するかどうかを示す値を取得します。</summary>
      <returns>正規表現が右から左の方向に検索する場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.roptions">
      <summary>正規表現エンジンによって内部で使用されます。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現パターンに定義されている位置で、指定した入力文字列を分割します。</summary>
      <returns>文字列の配列。</returns>
      <param name="input">分割する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現に定義されている位置で、指定した入力文字列を指定されている最大回数だけ分割します。</summary>
      <returns>文字列の配列。</returns>
      <param name="input">分割される文字列。</param>
      <param name="count">分割を実行できる最大回数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現に定義されている位置で、指定した入力文字列を指定されている最大回数だけ分割します。正規表現パターンの検索は、入力文字列の指定した文字位置から開始します。</summary>
      <returns>文字列の配列。</returns>
      <param name="input">分割される文字列。</param>
      <param name="count">分割を実行できる最大回数。</param>
      <param name="startat">入力文字列中で検索を開始する文字位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さよりも大きい値です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
      <summary>正規表現パターンによって定義される位置で、入力文字列を分割します。</summary>
      <returns>文字列の配列。</returns>
      <param name="input">分割する文字列。</param>
      <param name="pattern">照合する正規表現パターン。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。または<paramref name="pattern" /> が null です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>指定した正規表現パターンによって定義される位置で、入力文字列を分割します。指定したオプションで、一致操作を変更します。</summary>
      <returns>文字列の配列。</returns>
      <param name="input">分割する文字列。</param>
      <param name="pattern">照合する正規表現パターン。</param>
      <param name="options">列挙値のビットの組み合わせ。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。または<paramref name="pattern" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> が、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値の有効なビットごとの組み合わせではありません。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>指定した正規表現パターンによって定義されている位置で、入力文字列を部分文字列の配列に分割します。追加のパラメーターでは、一致操作と一致するものが見つからなかった場合のタイムアウト間隔を変更するオプションを指定します。</summary>
      <returns>文字列配列。</returns>
      <param name="input">分割対象の文字列。</param>
      <param name="pattern">照合する正規表現パターン。</param>
      <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
      <param name="matchTimeout">タイムアウト間隔、またはメソッドがタイムアウトしないことを示す場合は <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="pattern" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> が、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値の有効なビットごとの組み合わせではありません。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。タイムアウトの詳細については、「解説」を参照してください。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
      <summary>Regex コンストラクターに渡された正規表現パターンを返します。</summary>
      <returns>Regex コンストラクターに渡された <paramref name="pattern" /> パラメーター。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
      <summary>入力文字列内にエスケープされた文字がある場合は、そのエスケープを解除します。</summary>
      <returns>エスケープされていた文字がエスケープされない形式に変換された文字列。</returns>
      <param name="str">変換するテキストが含まれている入力文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> が null です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionR">
      <summary>正規表現エンジン内部で使用されます。</summary>
      <returns>
        <see cref="P:System.Text.RegularExpressions.Regex.Options" /> プロパティに <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> オプションが含まれる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
      <summary>正規表現のパターン一致メソッドの実行時間がタイムアウト間隔を超えたときにスローされる例外。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor">
      <summary>システム提供のメッセージを使用して、<see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String)">
      <summary>指定したメッセージ文字列を使用して、<see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明する文字列。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明する文字列。</param>
      <param name="inner">現在の例外の原因である例外。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.String,System.TimeSpan)">
      <summary>正規表現パターン、入力テキスト、およびタイムアウト間隔に関する情報を使用して、<see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="regexInput">タイムアウトが発生したときに正規表現エンジンによって処理されていた入力テキスト。</param>
      <param name="regexPattern">タイムアウトが発生したときに正規表現エンジンによって使用されていたパターン。</param>
      <param name="matchTimeout">タイムアウト間隔。</param>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Input">
      <summary>[セキュリティ クリティカル] タイムアウトが発生したときに正規表現エンジンが処理していた入力テキストを取得します。</summary>
      <returns>正規表現の入力テキスト。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout">
      <summary>[セキュリティ クリティカル] 正規表現一致のタイムアウト間隔を取得します。</summary>
      <returns>タイムアウト間隔。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Pattern">
      <summary>[セキュリティ クリティカル] タイムアウトが発生したときに一致操作で使用されていた正規表現パターンを取得します。</summary>
      <returns>正規表現パターン。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
      <summary>正規表現オプションを設定するために使用する列挙値を提供します。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Compiled">
      <summary>正規表現をコンパイルしてアセンブリを作成することを指定します。これにより実行速度は速くなりますが、起動にかかる時間は長くなります。この値は、<see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> メソッドを呼び出すときには <see cref="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" /> プロパティに割り当てないでください。Windows Phone にのみ存在しますが、サポートされていません。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
      <summary>言語のカルチャの違いが無視されるように指定します。通常、正規表現エンジンは、現在のカルチャの規則に基づいて文字列比較を実行します。<see cref="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant" /> オプションを指定した場合、インバリアント カルチャの規則が使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
      <summary>式の ECMAScript 準拠の動作を有効にします。この値は、必ず <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" /> 値および <see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline" /> 値と組み合わせて使用します。その他の値と組み合わせて使用すると、例外が発生します。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
      <summary>明示的に名前または番号を指定された (?&lt;name&gt;...) の形式のグループだけが有効なキャプチャであることを指定します。これにより、名前のないかっこは表現 (?:...) に構文上の間違いがなくても、非キャプチャ グループとして機能するようになります。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
      <summary>検索時に大文字と小文字を区別しないことを指定します。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
      <summary>パターンからエスケープが解除された空白を削除し、# でマークされたコメントを有効にします。ただし、<see cref="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace" /> 値は文字クラス内の空白には影響しないため、文字クラスから空白が削除されることはありません。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
      <summary>複数行モードを指定します。^ と $ の意味を変更して、文字列全体の先頭と末尾だけでなく、任意の行の先頭と末尾にもそれぞれが一致するようにします。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
      <summary>オプションが何も設定されないことを指定します。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
      <summary>検索が左から右ではなく右から左に行われるように指定します。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
      <summary>単一行モードを指定します。\n 以外の任意の文字ではなく、すべての文字と一致するようにピリオド (.) の意味を変更します。</summary>
    </member>
    <member name="T:System.Threading.Barrier">
      <summary>複数のタスクが、複数のフェーズを通じて 1 つのアルゴリズムで並行して協調的に動作できるようにします。</summary>
    </member>
    <member name="M:System.Threading.Barrier.#ctor(System.Int32)">
      <summary>
        <see cref="T:System.Threading.Barrier" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="participantCount">参加しているスレッドの数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> が 0 未満か、32,767 よりも大きい値です。</exception>
    </member>
    <member name="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
      <summary>
        <see cref="T:System.Threading.Barrier" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="participantCount">参加しているスレッドの数。</param>
      <param name="postPhaseAction">各フェーズ後に実行する <see cref="T:System.Action`1" />。 null (Visual Basic では Nothing) を渡すと、アクションを実行しないことを指定できます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> が 0 未満か、32,767 よりも大きい値です。</exception>
    </member>
    <member name="M:System.Threading.Barrier.AddParticipant">
      <summary>参加要素が 1 つ追加されることを <see cref="T:System.Threading.Barrier" /> に通知します。</summary>
      <returns>新しい参加要素が最初に参加するバリアのフェーズ番号。</returns>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは既に破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">参加要素を追加すると、バリアの参加要素数が 32,767 を超えます。またはメソッドは、フェーズ後アクション内から呼び出されました。</exception>
    </member>
    <member name="M:System.Threading.Barrier.AddParticipants(System.Int32)">
      <summary>複数の参加要素が追加されることを <see cref="T:System.Threading.Barrier" /> に通知します。</summary>
      <returns>新しい参加要素が最初に参加するバリアのフェーズ番号。</returns>
      <param name="participantCount">バリアに追加する追加の参加要素の数。</param>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは既に破棄されています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> が 0 未満です。または<paramref name="participantCount" /> 参加要素を追加すると、バリアの参加要素数が 32,767 を超えます。</exception>
      <exception cref="T:System.InvalidOperationException">メソッドは、フェーズ後アクション内から呼び出されました。</exception>
    </member>
    <member name="P:System.Threading.Barrier.CurrentPhaseNumber">
      <summary>バリアの現在のフェーズの番号を取得します。</summary>
      <returns>バリアの現在のフェーズの番号を返します。</returns>
    </member>
    <member name="M:System.Threading.Barrier.Dispose">
      <summary>
        <see cref="T:System.Threading.Barrier" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
      <exception cref="T:System.InvalidOperationException">メソッドは、フェーズ後アクション内から呼び出されました。</exception>
    </member>
    <member name="M:System.Threading.Barrier.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Threading.Barrier" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="P:System.Threading.Barrier.ParticipantCount">
      <summary>バリア内の参加要素の合計数を取得します。</summary>
      <returns>バリア内の参加要素の合計数を返します。</returns>
    </member>
    <member name="P:System.Threading.Barrier.ParticipantsRemaining">
      <summary>現在のフェーズでまだ通知していないバリア内の参加要素の数を取得します。</summary>
      <returns>現在のフェーズでまだ通知していないバリア内の参加要素の数を返します。</returns>
    </member>
    <member name="M:System.Threading.Barrier.RemoveParticipant">
      <summary>参加要素が 1 つ削除されることを <see cref="T:System.Threading.Barrier" /> に通知します。</summary>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは既に破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">バリアでは、既に 0 個の参加要素があります。またはメソッドは、フェーズ後アクション内から呼び出されました。</exception>
    </member>
    <member name="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
      <summary>複数の参加要素が削除されることを <see cref="T:System.Threading.Barrier" /> に通知します。</summary>
      <param name="participantCount">バリアから削除する追加の参加要素の数。</param>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは既に破棄されています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> が 0 未満です。</exception>
      <exception cref="T:System.InvalidOperationException">バリアでは、既に 0 個の参加要素があります。またはメソッドは、フェーズ後アクション内から呼び出されました。 または現在の参加要素数が、指定された participantCount より小さい値です</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">参加要素の総数が、指定した <paramref name=" participantCount" /> より小さくなっています。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait">
      <summary>参加要素が <see cref="T:System.Threading.Barrier" /> に到達し、他のすべての参加要素もバリアに到達するまで待機することを通知します。</summary>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは既に破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">メソッドがフェーズ後アクション内から呼び出されたか、バリア内に参加要素が含まれていないか、または参加要素として登録されているよりも多くのスレッドによってバリアがシグナル状態です。</exception>
      <exception cref="T:System.BarrierPostPhaseException">すべての参加しているスレッドが SignalAndWait を呼び出した後に、バリアのフェーズ後のアクションから例外がスローされた場合、その例外は BarrierPostPhaseException にラップされ、参加しているすべてのスレッドでスローされます。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
      <summary>32 ビット符号付き整数を使用してタイムアウトを計測し、参加要素が <see cref="T:System.Threading.Barrier" /> に到達し、他のすべての参加要素もバリアに到達するまで待機することを通知します。</summary>
      <returns>指定した時間内にすべての参加要素がバリアに到達した場合は true。それ以外の場合は false。</returns>
      <param name="millisecondsTimeout">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは既に破棄されています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> が -1 以外の負数です。-1 は無制限のタイムアウトを表します。</exception>
      <exception cref="T:System.InvalidOperationException">メソッドがフェーズ後アクション内から呼び出されたか、バリア内に参加要素が含まれていないか、または参加要素として登録されているよりも多くのスレッドによってバリアがシグナル状態です。</exception>
      <exception cref="T:System.BarrierPostPhaseException">すべての参加しているスレッドが SignalAndWait を呼び出した後に、バリアのフェーズ後のアクションから例外がスローされた場合、その例外は BarrierPostPhaseException にラップされ、参加しているすべてのスレッドでスローされます。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Threading.CancellationToken" /> を観察すると同時に、32 ビット符号付き整数を使用してタイムアウトを計測し、参加要素がバリアに到達し、他のすべての参加要素もバリアに到達するまで待機することを通知します。</summary>
      <returns>指定した時間内にすべての参加要素がバリアに到達した場合は true。それ以外の場合は false。</returns>
      <param name="millisecondsTimeout">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="cancellationToken">監視する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> が取り消されました。</exception>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは既に破棄されています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> が -1 以外の負数です。-1 は無制限のタイムアウトを表します。</exception>
      <exception cref="T:System.InvalidOperationException">メソッドがフェーズ後アクション内から呼び出されたか、バリア内に参加要素が含まれていないか、または参加要素として登録されているよりも多くのスレッドによってバリアがシグナル状態です。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Threading.CancellationToken" /> を観察すると同時に、参加要素が <see cref="T:System.Threading.Barrier" /> に到達し、他のすべての参加要素がバリアに到達するまで待機することを通知します。</summary>
      <param name="cancellationToken">監視する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> が取り消されました。</exception>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは既に破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">メソッドがフェーズ後アクション内から呼び出されたか、バリア内に参加要素が含まれていないか、または参加要素として登録されているよりも多くのスレッドによってバリアがシグナル状態です。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
      <summary>
        <see cref="T:System.TimeSpan" /> を使用して時間間隔を計測し、参加要素が <see cref="T:System.Threading.Barrier" /> に到達し、他のすべての参加要素もバリアに到達するまで待機することを通知します。</summary>
      <returns>他のすべての参加要素がバリアに到達した場合は true。それ以外の場合は false。</returns>
      <param name="timeout">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは既に破棄されています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> が -1 ミリ秒以外の負数です。-1 は無制限のタイムアウトを表します。または、タイムアウトが 32,767 を超えています。</exception>
      <exception cref="T:System.InvalidOperationException">メソッドがフェーズ後アクション内から呼び出されたか、バリア内に参加要素が含まれていないか、または参加要素として登録されているよりも多くのスレッドによってバリアがシグナル状態です。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Threading.CancellationToken" /> を観察すると同時に、<see cref="T:System.TimeSpan" /> を使用して時間間隔を計測し、参加要素が <see cref="T:System.Threading.Barrier" /> に到達し、他のすべての参加要素もバリアに到達するまで待機することを通知します。</summary>
      <returns>他のすべての参加要素がバリアに到達した場合は true。それ以外の場合は false。</returns>
      <param name="timeout">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</param>
      <param name="cancellationToken">監視する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> が取り消されました。</exception>
      <exception cref="T:System.ObjectDisposedException">現在のインスタンスは既に破棄されています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> が -1 ミリ秒以外の負数です。-1 は無制限のタイムアウトを表します。</exception>
      <exception cref="T:System.InvalidOperationException">メソッドがフェーズ後アクション内から呼び出されたか、バリア内に参加要素が含まれていないか、または参加要素として登録されているよりも多くのスレッドによってバリアがシグナル状態です。</exception>
    </member>
    <member name="T:System.Threading.BarrierPostPhaseException">
      <summary>
        <see cref="T:System.Threading.Barrier" /> のフェーズ後アクションに失敗したときにスローされる例外。</summary>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor">
      <summary>エラーを説明するシステム提供のメッセージを使用して、<see cref="T:System.Threading.BarrierPostPhaseException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.Exception)">
      <summary>指定した内部例外を使用して、<see cref="T:System.Threading.BarrierPostPhaseException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="innerException">現在の例外の原因である例外。</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String)">
      <summary>エラーを説明する指定したメッセージを使用して、<see cref="T:System.Threading.BarrierPostPhaseException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。このコンストラクターの呼び出し元で、この文字列が現在のシステム カルチャに合わせてローカライズされていることを確認する必要があります。</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.Threading.BarrierPostPhaseException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。このコンストラクターの呼び出し元で、この文字列が現在のシステム カルチャに合わせてローカライズされていることを確認する必要があります。</param>
      <param name="innerException">現在の例外の原因である例外。<paramref name="innerException" /> パラメーターが null でない場合は、内部例外を処理する catch ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Threading.Semaphore">
      <summary>リソースまたはリソースのプールに同時にアクセスできるスレッドの数を制限します。</summary>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)">
      <summary>同時実行エントリの最大数を指定し、オプションでエントリをいくつか予約して、<see cref="T:System.Threading.Semaphore" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="initialCount">同時に許可されるセマフォの要求の初期数。</param>
      <param name="maximumCount">同時に許可されるセマフォの要求の最大数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCount" /> は <paramref name="maximumCount" /> より大きい値です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumCount" /> が 1 未満です。または<paramref name="initialCount" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)">
      <summary>[セキュリティ クリティカル] 同時実行エントリの最大数を指定し、オプションで呼び出し元スレッド用にエントリをいくつか予約し、オプションでシステム セマフォ オブジェクトの名前を指定して、<see cref="T:System.Threading.Semaphore" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="initialCount">同時に許可されるセマフォの要求の初期数。</param>
      <param name="maximumCount">同時に許可されるセマフォの要求の最大数。</param>
      <param name="name">名前付きシステム セマフォ オブジェクトの名前。</param>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)">
      <summary>[セキュリティ クリティカル] 同時実行エントリの最大数を指定し、オプションで呼び出し元スレッド用にエントリをいくつか予約し、オプションでシステム セマフォ オブジェクトの名前を指定し、新しいシステム セマフォが作成されたかどうかを示す値を受け取る変数を指定して、<see cref="T:System.Threading.Semaphore" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="initialCount">同時に満たされるセマフォの要求の初期数。</param>
      <param name="maximumCount">同時に満たされるセマフォの要求の最大数。</param>
      <param name="name">名前付きシステム セマフォ オブジェクトの名前。</param>
      <param name="createdNew">このメソッドから制御が戻るときに、ローカル セマフォが作成された場合 (<paramref name="name" /> が null または空の文字列の場合)、または指定した名前付きシステム セマフォが作成された場合は true が格納されます。指定した名前付きシステム セマフォが既に存在する場合は false が格納されます。このパラメーターは初期化されずに渡されます。</param>
    </member>
    <member name="M:System.Threading.Semaphore.OpenExisting(System.String)">
      <summary>[セキュリティ クリティカル] 指定された名前付きセマフォが既に存在する場合は、そのセマフォを開きます。</summary>
      <returns>名前付きシステム セマフォを表すオブジェクト。</returns>
      <param name="name">開くシステム セマフォの名前。</param>
    </member>
    <member name="M:System.Threading.Semaphore.Release">
      <summary>セマフォから出て、前のカウントを返します。</summary>
      <returns>
        <see cref="Overload:System.Threading.Semaphore.Release" /> メソッドが呼び出される前のセマフォのカウント。</returns>
      <exception cref="T:System.Threading.SemaphoreFullException">セマフォのカウントは既に最大値です。</exception>
      <exception cref="T:System.IO.IOException">名前付きセマフォで Win32 エラーが発生しました。</exception>
      <exception cref="T:System.UnauthorizedAccessException">現在のセマフォは名前付きシステム セマフォを表していますが、ユーザーに <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> がありません。または現在のセマフォは名前付きシステム セマフォを表していますが、<see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> で開かれませんでした。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.Release(System.Int32)">
      <summary>指定した回数だけセマフォから出て、前のカウントを返します。</summary>
      <returns>
        <see cref="Overload:System.Threading.Semaphore.Release" /> メソッドが呼び出される前のセマフォのカウント。</returns>
      <param name="releaseCount">セマフォから出る回数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="releaseCount" /> が 1 未満です。</exception>
      <exception cref="T:System.Threading.SemaphoreFullException">セマフォのカウントは既に最大値です。</exception>
      <exception cref="T:System.IO.IOException">名前付きセマフォで Win32 エラーが発生しました。</exception>
      <exception cref="T:System.UnauthorizedAccessException">現在のセマフォは名前付きシステム セマフォを表していますが、ユーザーに <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 権限がありません。または現在のセマフォは名前付きシステム セマフォを表していますが、<see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 権限で開かれませんでした。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)">
      <summary>[セキュリティ クリティカル] 指定された名前付きセマフォが既に存在する場合はそのセマフォを開き、操作が成功したかどうかを示す値を返します。</summary>
      <returns>名前付きセマフォが正常に開いた場合は true。それ以外の場合は false。</returns>
      <param name="name">開くシステム セマフォの名前。</param>
      <param name="result">このメソッドが返されるときに、呼び出しに成功した場合は名前付きセマフォを表す <see cref="T:System.Threading.Semaphore" /> オブジェクトを格納し、呼び出しに失敗した場合は null を格納します。このパラメーターは初期化されていないものとして扱われます。</param>
    </member>
    <member name="T:System.Windows.Input.ICommand">
      <summary>コマンドのコントラクトを定義します。</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
      <summary>現在の状態でコマンドを実行できるかどうかを判断するメソッドを定義します。</summary>
      <returns>このコマンドを実行できる場合は true。それ以外の場合は false。</returns>
      <param name="parameter">コマンドで使用されたデータ。コマンドにデータを渡す必要がない場合は、このオブジェクトを null に設定できます。</param>
    </member>
    <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
      <summary>コマンドを実行するかどうかに影響する変更が行われたときに発生します。</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
      <summary>コマンドの起動時に呼び出されるメソッドを定義します。</summary>
      <param name="parameter">コマンドで使用されたデータ。コマンドにデータを渡す必要がない場合は、このオブジェクトを null に設定できます。 </param>
    </member>
  </members>
</doc>