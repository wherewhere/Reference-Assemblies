<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xml</name>
  </assembly>
  <members>
    <member name="T:System.Xml.ConformanceLevel">
      <summary>作成された <see cref="T:System.Xml.XmlReader" /> および <see cref="T:System.Xml.XmlWriter" /> オブジェクトが実行する入力または出力のチェックの量を指定します。</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Auto">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> または <see cref="T:System.Xml.XmlWriter" /> オブジェクトは、ドキュメントまたはフラグメントのチェックを実行するかどうかを自動的に検出し、該当するチェックを実行します。別の <see cref="T:System.Xml.XmlReader" /> オブジェクトまたは <see cref="T:System.Xml.XmlWriter" /> オブジェクトをラップしている場合、この外部オブジェクトは追加の準拠のチェックを実行しません。準拠のチェックは、基になるオブジェクトだけで実行されます。</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Document">
      <summary>XML データは、整形式 XML 1.0 ドキュメントの規則に従います。</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Fragment">
      <summary>XML データは、整形式の XML フラグメントです。</summary>
    </member>
    <member name="T:System.Xml.DtdProcessing">
      <summary>DTD を処理するためのオプションを指定します。<see cref="T:System.Xml.DtdProcessing" /> 列挙体は <see cref="T:System.Xml.XmlReaderSettings" /> で使用されます。</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Ignore">
      <summary>DOCTYPE 要素は無視されます。DTD 処理は発生しません。警告: 出力で DTD/DOCTYPE が失われます。</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Parse">
      <summary>DTD の解析に使用されます。</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Prohibit">
      <summary>DTD が見つかった場合に、DTD が禁止されていることを示すメッセージと共に <see cref="T:System.Xml.XmlException" /> をスローするように指定します。これが既定の動作です。</summary>
    </member>
    <member name="T:System.Xml.IXmlLineInfo">
      <summary>行および位置の情報を返すクラスを有効にするインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.Xml.IXmlLineInfo.HasLineInfo">
      <summary>クラスが行情報を返すことができるかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="P:System.Xml.IXmlLineInfo.LineNumber" /> および <see cref="P:System.Xml.IXmlLineInfo.LinePosition" /> を提供できる場合は、true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LineNumber">
      <summary>現在の行番号を取得します。</summary>
      <returns>現在の行番号。または、行情報が利用できない場合 (たとえば、<see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> が false を返した場合) は 0。</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LinePosition">
      <summary>現在の行位置を取得します。</summary>
      <returns>現在の行位置。または、行情報が利用できない場合 (たとえば、<see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> が false を返した場合) は 0。</returns>
    </member>
    <member name="T:System.Xml.IXmlNamespaceResolver">
      <summary>一連のプレフィックスと名前空間のマッピングに対する読み取り専用アクセス権を提供します。</summary>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>現在のスコープ内の、定義されたプレフィックスと名前空間のマッピングのコレクションを取得します。</summary>
      <returns>現在のスコープ内の名前空間が含まれた <see cref="T:System.Collections.IDictionary" /> です。</returns>
      <param name="scope">返される名前空間ノードの型を指定する <see cref="T:System.Xml.XmlNamespaceScope" /> 値。</param>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)">
      <summary>指定されたプレフィックスにマップされる名前空間 URI を取得します。</summary>
      <returns>プレフィックスにマップされた名前空間 URI。プレフィックスが名前空間 URI にマップされていない場合は null 値。</returns>
      <param name="prefix">検索対象の名前空間 URI を持つプレフィックス。</param>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)">
      <summary>指定された名前空間 URI にマップされるプレフィックスを取得します。</summary>
      <returns>名前空間 URI にマップされたプレフィックス。名前空間 URI がプレフィックスにマップされていない場合は null 値。</returns>
      <param name="namespaceName">検索対象のプレフィックスを持つ名前空間 URI。</param>
    </member>
    <member name="T:System.Xml.NamespaceHandling">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> 内の重複した名前空間宣言を削除するかどうかを指定します。</summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.Default">
      <summary>既定の動作では、重複した名前空間宣言は削除されません。</summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.OmitDuplicates">
      <summary>重複する名前空間宣言を削除します。重複した名前空間を削除するには、プレフィックスおよび名前空間が一致している必要があります。</summary>
    </member>
    <member name="T:System.Xml.NameTable">
      <summary>単一スレッドの <see cref="T:System.Xml.XmlNameTable" /> を実装します。</summary>
    </member>
    <member name="M:System.Xml.NameTable.#ctor">
      <summary>NameTable クラスの新規インスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>指定された文字列を最小単位に分割し、NameTable に追加します。</summary>
      <returns>細分化された文字列または既存の文字列 (NameTable 内に既に存在する場合)。<paramref name="len" /> が 0 の場合は、String.Empty が返されます。</returns>
      <param name="key">追加する文字列を格納している文字配列。</param>
      <param name="start">文字列の最初の文字を指定する配列の、0 から始まるインデックス番号。</param>
      <param name="len">文字列の文字数。</param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="start" />または<paramref name="start" /> &gt;= <paramref name="key" />.Length または<paramref name="len" /> &gt;= <paramref name="key" />.Length <paramref name="len" /> =0 の場合は、上記の条件によって例外がスローされることはありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0. </exception>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.String)">
      <summary>指定された文字列を最小単位に分割し、NameTable に追加します。</summary>
      <returns>細分化された文字列または既存の文字列 (NameTable 内に既に存在する場合)。</returns>
      <param name="key">追加する文字列。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="key" /> が null です。</exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>指定した配列内の指定した範囲の文字と同じ文字を含む、最小単位に分割された文字列を取得します。</summary>
      <returns>最小単位に分割された文字列。文字列がまだ最小単位に分割されていない場合は null。<paramref name="len" /> が 0 の場合は、String.Empty が返されます。</returns>
      <param name="key">検索対象の名前を格納している文字配列。</param>
      <param name="start">名前の最初の文字を指定する配列内の 0 で始まるインデックス。</param>
      <param name="len">名前の文字数。</param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="start" />または<paramref name="start" /> &gt;= <paramref name="key" />.Length または<paramref name="len" /> &gt;= <paramref name="key" />.Length <paramref name="len" /> =0 の場合は、上記の条件によって例外がスローされることはありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0. </exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.String)">
      <summary>指定した値を持つ最小単位に分割された文字列を取得します。</summary>
      <returns>最小単位に分割された文字列オブジェクト。または文字列がまだ最小単位に分割されていない場合は null。</returns>
      <param name="value">検索する名前。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> が null です。</exception>
    </member>
    <member name="T:System.Xml.NewLineHandling">
      <summary>改行の処理方法を指定します。</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Entitize">
      <summary>改行文字をエンティティ化します。この設定では、正規化 <see cref="T:System.Xml.XmlReader" /> で出力を読み取るときにすべての文字が保持されます。</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.None">
      <summary>改行文字は変更されません。出力は入力と同じになります。</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Replace">
      <summary>改行文字は、<see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> プロパティに指定された文字に一致するように置換されます。</summary>
    </member>
    <member name="T:System.Xml.ReadState">
      <summary>リーダーの状態を指定します。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Closed">
      <summary>
        <see cref="M:System.Xml.XmlReader.Close" /> メソッドは呼び出されています。</summary>
    </member>
    <member name="F:System.Xml.ReadState.EndOfFile">
      <summary>ファイルの末尾に正常に到達しています。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Error">
      <summary>読み取り操作を継続できないようにするエラーが発生しました。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Initial">
      <summary>Read メソッドが呼び出されていません。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Interactive">
      <summary>Read メソッドが呼び出されました。リーダーで追加のメソッドが呼び出される場合があります。</summary>
    </member>
    <member name="T:System.Xml.WriteState">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> の状態を示します。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Attribute">
      <summary>属性値の書き込み中です。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Closed">
      <summary>
        <see cref="M:System.Xml.XmlWriter.Close" /> メソッドは呼び出されています。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Content">
      <summary>要素コンテンツの書き込み中です。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Element">
      <summary>要素開始タグの書き込み中です。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Error">
      <summary>例外がスローされ、<see cref="T:System.Xml.XmlWriter" /> が無効な状態になっています。<see cref="T:System.Xml.XmlWriter" /> を <see cref="F:System.Xml.WriteState.Closed" /> 状態にするには、<see cref="M:System.Xml.XmlWriter.Close" /> メソッドを呼び出します。その他の <see cref="T:System.Xml.XmlWriter" /> メソッドを呼び出すと、<see cref="T:System.InvalidOperationException" /> が発生します。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Prolog">
      <summary>prolog の書き込み中です。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Start">
      <summary>Write メソッドが呼び出されていません。</summary>
    </member>
    <member name="T:System.Xml.XmlConvert">
      <summary>XML 名をエンコードおよびデコードし、共通言語ランタイム型間の変換メソッドを提供します。データ型を変換する場合、返される値はロケールには依存しません。</summary>
    </member>
    <member name="M:System.Xml.XmlConvert.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlConvert" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlConvert.DecodeName(System.String)">
      <summary>名前をデコードします。このメソッドは、<see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> メソッドおよび <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" /> メソッドの変換を元に戻します。</summary>
      <returns>デコードされた名前。</returns>
      <param name="name">変換する名前。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeLocalName(System.String)">
      <summary>名前を有効な XML ローカル名に変換します。</summary>
      <returns>エンコードされた名前。</returns>
      <param name="name">エンコードする名前。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeName(System.String)">
      <summary>名前を有効な XML 名に変換します。</summary>
      <returns>エスケープ文字列で置換された無効な文字を含む名前を返します。</returns>
      <param name="name">変換する名前。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeNmToken(System.String)">
      <summary>XML 仕様に従って有効な名前であることを検証します。</summary>
      <returns>エンコードされた名前。</returns>
      <param name="name">エンコードする名前。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsNCNameChar(System.Char)">
      <summary>渡された文字が有効な Name Character 型かどうかをチェックします。</summary>
      <returns>文字が有効な Name Character 型である場合は true、それ以外の場合は false。</returns>
      <param name="ch">検証する文字。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsPublicIdChar(System.Char)">
      <summary>渡された文字が有効な PUBLIC ID 文字かどうかをチェックします。</summary>
      <returns>渡された文字が有効な PUBLIC ID 文字である場合は true、それ以外の場合は false。</returns>
      <param name="ch">検証する文字。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsStartNCNameChar(System.Char)">
      <summary>渡された文字が有効な Start Name Character 型かどうかを確認します。</summary>
      <returns>文字が有効な Start Name Character 型である場合は true、それ以外の場合は false。</returns>
      <param name="ch">検証する文字。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsWhitespaceChar(System.Char)">
      <summary>渡された文字が有効な XML 空白文字かどうかをチェックします。</summary>
      <returns>渡された文字が有効な XML 空白文字である場合は true、それ以外の場合は false。</returns>
      <param name="ch">検証する文字。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlChar(System.Char)">
      <summary>渡された文字が有効な XML 文字かどうかをチェックします。</summary>
      <returns>渡された文字が有効な XML 文字である場合は true、それ以外の場合は false。</returns>
      <param name="ch">検証する文字。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlSurrogatePair(System.Char,System.Char)">
      <summary>渡された文字のサロゲート ペアが有効な XML 文字かどうかをチェックします。</summary>
      <returns>渡された文字のサロゲート ペアが有効な XML 文字の場合は true、それ以外の場合は false。</returns>
      <param name="lowChar">検証するサロゲート文字。</param>
      <param name="highChar">検証するサロゲート文字。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToBoolean(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Boolean" /> に変換します。</summary>
      <returns>Boolean 値 (true または false)。</returns>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> は Boolean 値を表しません。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToByte(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Byte" /> に変換します。</summary>
      <returns>文字列に相当する Byte。</returns>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />  の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Byte.MinValue" /> 未満の数値か、<see cref="F:System.Byte.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToChar(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Char" /> に変換します。</summary>
      <returns>単一文字を表す Char。</returns>
      <param name="s">変換する単一文字が含まれた文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> パラメーターの値が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> パラメーターに複数の文字が含まれています。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
      <returns>文字列と等価の DateTime。</returns>
      <param name="s">変換する文字列。</param>
      <param name="format">変換された DateTime に適用する形式構造。有効な形式には、"yyyy-MM-ddTHH:mm:sszzzzzz" およびそのサブセットが含まれます。文字列はこの形式に対して妥当性が検査されます。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> または <paramref name="format" /> が String.Empty です。または<paramref name="s" /> に、<paramref name="format" /> に対応する日付と時刻が格納されていません。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String[])">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
      <returns>文字列と等価の DateTime。</returns>
      <param name="s">変換する文字列。</param>
      <param name="formats">変換された DateTime に適用する形式構造が含まれた配列。有効な形式には、"yyyy-MM-ddTHH:mm:sszzzzzz" およびそのサブセットが含まれます。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />、または <paramref name="formats" /> の要素が String.Empty です。または<paramref name="s" /> に、<paramref name="formats" /> のいずれかの要素に対応する日付と時刻が格納されていません。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)">
      <summary>指定された <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> を使用して、<see cref="T:System.String" /> を <see cref="T:System.DateTime" /> に変換します。</summary>
      <returns>
        <see cref="T:System.String" /> と等価の <see cref="T:System.DateTime" />。</returns>
      <param name="s">変換する <see cref="T:System.String" /> 値。</param>
      <param name="dateTimeOption">日付を現地時刻に変換するのか、協定世界時 (UTC) として保持する (UTC 日付の場合) のかを示す <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> 値の 1 つ。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="dateTimeOption" /> 値が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が空の文字列です。または有効な形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String)">
      <summary>指定された <see cref="T:System.String" /> を等価の <see cref="T:System.DateTimeOffset" /> に変換します。</summary>
      <returns>指定された文字列と等価の <see cref="T:System.DateTimeOffset" />。</returns>
      <param name="s">変換する文字列。メモ   文字列は、W3C 勧告の XML dateTime 型のサブセットに準拠している必要があります。詳細については、『XML Schema Part 2: Datatypes』を参照してください。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">このメソッドに渡した引数が、許容値の範囲外にあります。許容値については、<see cref="T:System.DateTimeOffset" /> を参照してください。</exception>
      <exception cref="T:System.FormatException">このメソッドに渡した引数が、W3C 勧告の XML dateTime 型のサブセットに準拠していません。詳細については、『XML Schema Part 2:Datatypes』を参照してください。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String)">
      <summary>指定された <see cref="T:System.String" /> を等価の <see cref="T:System.DateTimeOffset" /> に変換します。</summary>
      <returns>指定された文字列と等価の <see cref="T:System.DateTimeOffset" />。</returns>
      <param name="s">変換する文字列。</param>
      <param name="format">
        <paramref name="s" /> の変換元の形式。フォーマット パラメーターには、W3C 勧告の XML dateTime 型の任意のサブセットを指定できます。詳細については、『XML Schema Part 2: Datatypes』を参照してください。文字列 <paramref name="s" /> はこの形式に対して妥当性が検査されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> または <paramref name="format" /> が空の文字列です。または指定された形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String[])">
      <summary>指定された <see cref="T:System.String" /> を等価の <see cref="T:System.DateTimeOffset" /> に変換します。</summary>
      <returns>指定された文字列と等価の <see cref="T:System.DateTimeOffset" />。</returns>
      <param name="s">変換する文字列。</param>
      <param name="formats">
        <paramref name="s" /> の変換元として可能な形式の配列。<paramref name="formats" /> の各形式には、W3C 勧告の XML dateTime 型の任意のサブセットを指定できます。詳細については、『XML Schema Part 2: Datatypes』を参照してください。文字列 <paramref name="s" /> は、これらの形式のいずれかに対して妥当性が検査されます。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDecimal(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Decimal" /> に変換します。</summary>
      <returns>文字列に相当する Decimal。</returns>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />  の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Decimal.MinValue" /> 未満の数値か、<see cref="F:System.Decimal.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDouble(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Double" /> に変換します。</summary>
      <returns>文字列に相当する Double。</returns>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />  の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Double.MinValue" /> 未満の数値か、<see cref="F:System.Double.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToGuid(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Guid" /> に変換します。</summary>
      <returns>文字列に相当する Guid。</returns>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />  の形式が正しくありません。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt16(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Int16" /> に変換します。</summary>
      <returns>文字列に相当する Int16。</returns>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />  の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Int16.MinValue" /> 未満の数値か、<see cref="F:System.Int16.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt32(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Int32" /> に変換します。</summary>
      <returns>文字列に相当する Int32。</returns>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />  の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Int32.MinValue" /> 未満の数値か、<see cref="F:System.Int32.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt64(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Int64" /> に変換します。</summary>
      <returns>文字列に相当する Int64。</returns>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />  の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Int64.MinValue" /> 未満の数値か、<see cref="F:System.Int64.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSByte(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.SByte" /> に変換します。</summary>
      <returns>文字列に相当する SByte。</returns>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />  の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.SByte.MinValue" /> 未満の数値か、<see cref="F:System.SByte.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSingle(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Single" /> に変換します。</summary>
      <returns>文字列に相当する Single。</returns>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />  の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Boolean)">
      <summary>
        <see cref="T:System.Boolean" /> を <see cref="T:System.String" /> に変換します。</summary>
      <returns>Boolean 値 (true または false) の文字列表現。</returns>
      <param name="value">変換する値。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Char)">
      <summary>
        <see cref="T:System.Char" /> を <see cref="T:System.String" /> に変換します。</summary>
      <returns>Char の文字列表現。</returns>
      <param name="value">変換する値。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.Xml.XmlDateTimeSerializationMode)">
      <summary>指定された <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> を使用して、<see cref="T:System.DateTime" /> を <see cref="T:System.String" /> に変換します。</summary>
      <returns>
        <see cref="T:System.String" /> と等価の <see cref="T:System.DateTime" />。</returns>
      <param name="value">変換する <see cref="T:System.DateTime" /> 値。</param>
      <param name="dateTimeOption">
        <see cref="T:System.DateTime" /> 値の処理方法を指定する <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> 値の 1 つ。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTimeOption" /> 値が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> または <paramref name="dateTimeOption" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset)">
      <summary>指定された <see cref="T:System.DateTimeOffset" /> を <see cref="T:System.String" /> に変換します。</summary>
      <returns>指定された <see cref="T:System.DateTimeOffset" /> の <see cref="T:System.String" /> 表現。</returns>
      <param name="value">変換する <see cref="T:System.DateTimeOffset" />。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset,System.String)">
      <summary>指定された <see cref="T:System.DateTimeOffset" /> を、指定された形式の <see cref="T:System.String" /> に変換します。</summary>
      <returns>指定した <see cref="T:System.DateTimeOffset" /> の指定した形式での <see cref="T:System.String" /> 表現。</returns>
      <param name="value">変換する <see cref="T:System.DateTimeOffset" />。</param>
      <param name="format">
        <paramref name="s" /> の変換後の形式。フォーマット パラメーターには、W3C 勧告の XML dateTime 型の任意のサブセットを指定できます。詳細については、『XML Schema Part 2: Datatypes』を参照してください。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> を <see cref="T:System.String" /> に変換します。</summary>
      <returns>Decimal の文字列表現。</returns>
      <param name="value">変換する値。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Double)">
      <summary>
        <see cref="T:System.Double" /> を <see cref="T:System.String" /> に変換します。</summary>
      <returns>Double の文字列表現。</returns>
      <param name="value">変換する値。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Guid)">
      <summary>
        <see cref="T:System.Guid" /> を <see cref="T:System.String" /> に変換します。</summary>
      <returns>Guid の文字列表現。</returns>
      <param name="value">変換する値。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int16)">
      <summary>
        <see cref="T:System.Int16" /> を <see cref="T:System.String" /> に変換します。</summary>
      <returns>Int16 の文字列表現。</returns>
      <param name="value">変換する値。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int32)">
      <summary>
        <see cref="T:System.Int32" /> を <see cref="T:System.String" /> に変換します。</summary>
      <returns>Int32 の文字列表現。</returns>
      <param name="value">変換する値。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int64)">
      <summary>
        <see cref="T:System.Int64" /> を <see cref="T:System.String" /> に変換します。</summary>
      <returns>Int64 の文字列表現。</returns>
      <param name="value">変換する値。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.SByte)">
      <summary>
        <see cref="T:System.SByte" /> を <see cref="T:System.String" /> に変換します。</summary>
      <returns>SByte の文字列表現。</returns>
      <param name="value">変換する値。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Single)">
      <summary>
        <see cref="T:System.Single" /> を <see cref="T:System.String" /> に変換します。</summary>
      <returns>Single の文字列表現。</returns>
      <param name="value">変換する値。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.TimeSpan)">
      <summary>
        <see cref="T:System.TimeSpan" /> を <see cref="T:System.String" /> に変換します。</summary>
      <returns>TimeSpan の文字列表現。</returns>
      <param name="value">変換する値。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt32)">
      <summary>
        <see cref="T:System.UInt32" /> を <see cref="T:System.String" /> に変換します。</summary>
      <returns>UInt32 の文字列表現。</returns>
      <param name="value">変換する値。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt64)">
      <summary>
        <see cref="T:System.UInt64" /> を <see cref="T:System.String" /> に変換します。</summary>
      <returns>UInt64 の文字列表現。</returns>
      <param name="value">変換する値。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToTimeSpan(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.TimeSpan" /> に変換します。</summary>
      <returns>文字列に相当する TimeSpan。</returns>
      <param name="s">変換する文字列。文字列の形式は、W3C『XML Schema Part 2: Datatypes』の期間に関する勧告に準拠している必要があります。</param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> は、TimeSpan 値を表す正しい形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt16(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.UInt16" /> に変換します。</summary>
      <returns>文字列に相当する UInt16。</returns>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />  の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.UInt16.MinValue" /> 未満の数値か、<see cref="F:System.UInt16.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt32(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.UInt32" /> に変換します。</summary>
      <returns>文字列に相当する UInt32。</returns>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />  の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.UInt32.MinValue" /> 未満の数値か、<see cref="F:System.UInt32.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt64(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.UInt64" /> に変換します。</summary>
      <returns>文字列に相当する UInt64。</returns>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が null です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />  の形式が正しくありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> が <see cref="F:System.UInt64.MinValue" /> 未満の数値か、<see cref="F:System.UInt64.MaxValue" /> より大きい数値を表しています。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyName(System.String)">
      <summary>W3C 勧告『Extended Markup Language』に従って有効な名前であることを検証します。</summary>
      <returns>有効な XML 名の場合は、その名前。</returns>
      <param name="name">検証する名前。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> が有効な XML 名ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が null または String.Empty です。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNCName(System.String)">
      <summary>W3C 勧告『Extended Markup Language』に従って有効な NCName であることを検証します。</summary>
      <returns>有効な NCName の場合は、その名前。</returns>
      <param name="name">検証する名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が null または String.Empty です。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> は有効な NCName ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNMTOKEN(System.String)">
      <summary>文字列が『W3C XML Schema Part2: Datatypes』の勧告に従った有効な NMTOKEN かを検証します。</summary>
      <returns>有効な NMTOKEN の場合は、名前トークン。</returns>
      <param name="name">検証する文字列。</param>
      <exception cref="T:System.Xml.XmlException">文字列が、有効な名前トークンではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyPublicId(System.String)">
      <summary>文字列引数内のすべての文字が有効な PUBLIC ID 文字かどうかを検証します。</summary>
      <returns>文字列引数内のすべての文字が有効な PUBLIC ID 文字である場合は、渡された文字列インスタンス。</returns>
      <param name="publicId">検証する文字列。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyWhitespace(System.String)">
      <summary>文字列引数のすべての文字が有効な空白文字であるかどうかを検証します。</summary>
      <returns>文字列引数内のすべての文字が有効な空白文字である場合は、渡された文字列インスタンス。</returns>
      <param name="content">検証する文字列。</param>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyXmlChars(System.String)">
      <summary>渡された文字列内のすべての文字およびサロゲート ペアの文字が有効な XML 文字かどうかを検証します。</summary>
      <returns>文字列引数内のすべての文字およびサロゲート ペアの文字が有効な XML 文字である場合は、渡された文字列インスタンス。</returns>
      <param name="content">検証する文字列。</param>
    </member>
    <member name="T:System.Xml.XmlDateTimeSerializationMode">
      <summary>文字列と <see cref="T:System.DateTime" /> との変換時に時間値を処理する方法を指定します。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Local">
      <summary>現地時刻として処理します。<see cref="T:System.DateTime" /> オブジェクトが世界協定時刻 (UTC: Coordinated Universal Time) を表す場合、これを現地時刻に変換します。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.RoundtripKind">
      <summary>変換を行うときに、タイム ゾーン情報が保持されます。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Unspecified">
      <summary>
        <see cref="T:System.DateTime" /> が文字列に変換されている場合は現地時刻として処理します。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Utc">
      <summary>UTC として処理します。<see cref="T:System.DateTime" /> オブジェクトが現地時刻を表す場合は、UTC に変換します。</summary>
    </member>
    <member name="T:System.Xml.XmlException">
      <summary>最後の例外の詳細情報を返します。</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor">
      <summary>XmlException クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String)">
      <summary>指定されたエラー メッセージを使用して、XmlException クラスの新規インスタンスを初期化します。</summary>
      <param name="message">エラーの説明。</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception)">
      <summary>XmlException クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラー条件の説明。</param>
      <param name="innerException">XmlException をスローした <see cref="T:System.Exception" /> (スローした場合)。この値は null にすることができます。</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>指定されたメッセージ、内部例外、行番号、および行位置を使用して、XmlException クラスの新規インスタンスを初期化します。</summary>
      <param name="message">エラーの説明。</param>
      <param name="innerException">現在の例外の原因である例外。この値は null にすることができます。</param>
      <param name="lineNumber">エラーが発生した場所を示す行番号。</param>
      <param name="linePosition">エラーが発生した場所を示す行位置。</param>
    </member>
    <member name="P:System.Xml.XmlException.LineNumber">
      <summary>エラーの発生場所を示す行番号を取得します。</summary>
      <returns>エラーの発生場所を示す行番号。</returns>
    </member>
    <member name="P:System.Xml.XmlException.LinePosition">
      <summary>エラーの発生場所を示す行の位置を取得します。</summary>
      <returns>エラーの発生場所を示す行の位置。</returns>
    </member>
    <member name="P:System.Xml.XmlException.Message">
      <summary>現在の例外を説明するメッセージを取得します。</summary>
      <returns>例外の原因を説明するエラー メッセージ。</returns>
    </member>
    <member name="P:System.Xml.XmlException.SourceUri">
      <summary>XML ファイルの場所を取得します。</summary>
      <returns>XML データのソース URI。ソース URI がない場合は、このプロパティは null 値を返します。</returns>
    </member>
    <member name="T:System.Xml.XmlNamespaceManager">
      <summary>コレクションに対して名前空間を解決、追加、および削除し、これらの名前空間のスコープ管理を提供します。</summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)">
      <summary>指定された <see cref="T:System.Xml.XmlNameTable" /> で <see cref="T:System.Xml.XmlNamespaceManager" /> クラスの新規インスタンスを初期化します。</summary>
      <param name="nameTable">使用する <see cref="T:System.Xml.XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="nameTable" /> が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)">
      <summary>指定した名前空間をコレクションに追加します。</summary>
      <param name="prefix">追加する名前空間に関連付けるプレフィックス。String.Empty を使用して、既定の名前空間を追加します。</param>
      <param name="uri">追加する名前空間。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="prefix" /> の値が "xml" または "xmlns" です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> または <paramref name="uri" /> の値が null です。</exception>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.DefaultNamespace">
      <summary>既定の名前空間の名前空間 URI を取得します。</summary>
      <returns>既定の名前空間の名前空間 URI を返します。既定の名前空間がない場合は String.Empty を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetEnumerator">
      <summary>
        <see cref="T:System.Xml.XmlNamespaceManager" /> 内の名前空間全体を反復するために使用する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNamespaceManager" /> によって格納されているプレフィックスを含む <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>現在スコープ内にある名前空間を列挙するために使用できる、プレフィックスをキーとした、名前空間の名前のコレクションを取得します。</summary>
      <returns>現在スコープ内にある名前空間を列挙するために使用できる、プレフィックスによってキーが付けられた名前空間名のコレクション。</returns>
      <param name="scope">返される名前空間ノードの型を指定する <see cref="T:System.Xml.XmlNamespaceScope" /> 値。</param>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.HasNamespace(System.String)">
      <summary>提供されたプレフィックスに現在のプッシュされたスコープに対して定義された名前空間があるかどうかを示す値を取得します。</summary>
      <returns>定義された名前空間がある場合は true、それ以外の場合は false。</returns>
      <param name="prefix">検索する名前空間のプレフィックス。</param>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)">
      <summary>指定したプレフィックスの名前空間 URI を取得します。</summary>
      <returns>
        <paramref name="prefix" /> の名前空間 URI または null 値 (マップされた名前空間がない場合) を返します。返される文字列は最小単位に分割されます。最小単位に分割された文字列の詳細については、<see cref="T:System.Xml.XmlNameTable" /> を参照してください。</returns>
      <param name="prefix">解決する対象となる名前空間 URI を持つプレフィックス。既定の名前空間に一致するようにするには、String.Empty を渡します。</param>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)">
      <summary>指定した名前空間 URI に対して宣言されたプレフィックスを検索します。</summary>
      <returns>一致するプレフィックス。マップされたプレフィックスがない場合、このメソッドは String.Empty を返します。null 値が提供された場合は、null が返されます。</returns>
      <param name="uri">プレフィックスに対して解決する名前空間。</param>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.NameTable">
      <summary>このオブジェクトに関連した <see cref="T:System.Xml.XmlNameTable" /> を取得します。</summary>
      <returns>このオブジェクトによって使用される <see cref="T:System.Xml.XmlNameTable" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PopScope">
      <summary>名前空間スコープをスタックからポップします。</summary>
      <returns>名前空間スコープがスタックに残っている場合は true、ポップする名前空間がない場合は false。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PushScope">
      <summary>名前空間スコープをスタックにプッシュします。</summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)">
      <summary>指定したプレフィックスの指定した名前空間を削除します。</summary>
      <param name="prefix">名前空間のプレフィックス。</param>
      <param name="uri">指定したプレフィックスに対して削除する名前空間。削除された名前空間は、現在の名前空間スコープに由来しています。現在のスコープ外の名前空間は無視されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> または <paramref name="uri" /> の値が null です。</exception>
    </member>
    <member name="T:System.Xml.XmlNamespaceScope">
      <summary>名前空間スコープを定義します。</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.All">
      <summary>現在のノードのスコープで定義されているすべての名前空間。これには、常に暗黙的に定義される xmlns:xml 名前空間が含まれます。返される名前空間の順序は定義されません。</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.ExcludeXml">
      <summary>常に暗黙的に宣言される xmlns:xml 名前空間を除く、現在のノードのスコープで定義されているすべての名前空間。返される名前空間の順序は定義されません。</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.Local">
      <summary>現在のノードでローカルに定義されているすべての名前空間。</summary>
    </member>
    <member name="T:System.Xml.XmlNameTable">
      <summary>最小単位に分割された文字列オブジェクトのテーブル。</summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>派生クラスでオーバーライドされると、指定された文字列を最小単位に分割し、XmlNameTable に追加します。</summary>
      <returns>新しく最小単位に分割された文字列。既に存在している場合は既存の文字列。長さが 0 の場合は、String.Empty が返されます。</returns>
      <param name="array">追加する名前を格納している文字配列。</param>
      <param name="offset">名前の最初の文字を指定する配列内の 0 から始まるインデックス番号。</param>
      <param name="length">名前の文字数。</param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="offset" />または<paramref name="offset" /> &gt;= <paramref name="array" />.Length または<paramref name="length" /> &gt; <paramref name="array" />.Length <paramref name="length" /> =0 の場合は、上記の条件によって例外がスローされることはありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> &lt; 0. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.String)">
      <summary>派生クラスでオーバーライドされると、指定された文字列を最小単位に分割し、XmlNameTable に追加します。</summary>
      <returns>新しく最小単位に分割された文字列。既に存在している場合は既存の文字列。</returns>
      <param name="array">追加する名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>派生クラスでオーバーライドされると、指定した配列内の指定した範囲の文字と同じ文字を含む、最小単位に分割された文字列を取得します。</summary>
      <returns>最小単位に分割された文字列。文字列がまだ最小単位に分割されていない場合は null。<paramref name="length" /> が 0 の場合は、String.Empty が返されます。</returns>
      <param name="array">検索対象の名前を格納している文字配列。</param>
      <param name="offset">名前の最初の文字を指定する配列内の 0 で始まるインデックス。</param>
      <param name="length">名前の文字数。</param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="offset" />または<paramref name="offset" /> &gt;= <paramref name="array" />.Length または<paramref name="length" /> &gt; <paramref name="array" />.Length <paramref name="length" /> =0 の場合は、上記の条件によって例外がスローされることはありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.String)">
      <summary>派生クラスでオーバーライドされると、指定した文字列と同じ値を含む最小単位に分割された文字列を取得します。</summary>
      <returns>最小単位に分割された文字列。文字列がまだ最小単位に分割されていない場合は null。</returns>
      <param name="array">検索する名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
    </member>
    <member name="T:System.Xml.XmlNodeType">
      <summary>ノードの型を指定します。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Attribute">
      <summary>属性 (例: id='123')。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.CDATA">
      <summary>CDATA セクション (例: &lt;![CDATA[my escaped text]]&gt;)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Comment">
      <summary>コメント (例: &lt;!-- my comment --&gt;)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Document">
      <summary>ドキュメント ツリーのルートとして、XML ドキュメント全体にアクセスできるようにするドキュメント オブジェクト。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentFragment">
      <summary>ドキュメント フラグメント。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentType">
      <summary>次のようなタグで示されるドキュメント型宣言 (例:, &lt;!DOCTYPE...&gt;)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Element">
      <summary>要素 (例: &lt;item&gt;)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndElement">
      <summary>終了要素タグ (例: &lt;/item&gt;)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndEntity">
      <summary>
        <see cref="M:System.Xml.XmlReader.ResolveEntity" /> を呼び出した結果、XmlReader がエンティティ置換の末尾に到達したときに返されます。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Entity">
      <summary>エンティティ宣言 (例: &lt;!ENTITY...&gt;)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EntityReference">
      <summary>エンティティへの参照 (例: &amp;num;)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.None">
      <summary>Read メソッドが呼び出されなかった場合に、<see cref="T:System.Xml.XmlReader" /> によって返されます。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Notation">
      <summary>ドキュメント型宣言内の表記 (例: &lt;!NOTATION...&gt;)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.ProcessingInstruction">
      <summary>処理命令 (例: &lt;?pi test?&gt;)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.SignificantWhitespace">
      <summary>混合コンテンツ モデル内のマークアップ間にある空白、または xml:space="preserve" スコープ内の空白。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Text">
      <summary>ノードのテキストの内容。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Whitespace">
      <summary>マークアップ間の空白。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.XmlDeclaration">
      <summary>XML 宣言 (例: &lt;?xml version='1.0'?&gt;)。</summary>
    </member>
    <member name="T:System.Xml.XmlParserContext">
      <summary>XML フラグメントを解析するために <see cref="T:System.Xml.XmlReader" /> によって必要とされるすべてのコンテキスト情報を提供します。</summary>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace)">
      <summary>指定された <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、ベース URI、xml:lang、xml:space、およびドキュメント型の値を使用して、XmlParserContext クラスの新規インスタンスを初期化します。</summary>
      <param name="nt">文字列を最小単位に分割するために使用する <see cref="T:System.Xml.XmlNameTable" />。このパラメーターが null の場合は、<paramref name="nsMgr" /> を構築するために使用される名前テーブルが代わりに使用されます。最小単位に分割された文字列の詳細については、<see cref="T:System.Xml.XmlNameTable" /> を参照してください。</param>
      <param name="nsMgr">名前空間情報を検索するために使用する <see cref="T:System.Xml.XmlNamespaceManager" />、または null。</param>
      <param name="docTypeName">ドキュメント型宣言の名前。</param>
      <param name="pubId">パブリック識別子。</param>
      <param name="sysId">システム識別子。</param>
      <param name="internalSubset">内部 DTD サブセット。</param>
      <param name="baseURI">XML フラグメントのベース URI (フラグメントの読み込み元の場所)。</param>
      <param name="xmlLang">xml:lang スコープ。</param>
      <param name="xmlSpace">xml:space スコープを示す <see cref="T:System.Xml.XmlSpace" /> の値。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> は <paramref name="nsMgr" /> の構築に使用された XmlNameTable とは異なります。</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>指定された <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、ベース URI、xml:lang、xml:space、エンコーディング、およびドキュメント型の値を使用して、XmlParserContext クラスの新規インスタンスを初期化します。</summary>
      <param name="nt">文字列を最小単位に分割するために使用する <see cref="T:System.Xml.XmlNameTable" />。このパラメーターが null の場合は、<paramref name="nsMgr" /> を構築するために使用される名前テーブルが代わりに使用されます。最小単位に分割された文字列の詳細については、<see cref="T:System.Xml.XmlNameTable" /> を参照してください。</param>
      <param name="nsMgr">名前空間情報を検索するために使用する <see cref="T:System.Xml.XmlNamespaceManager" />、または null。</param>
      <param name="docTypeName">ドキュメント型宣言の名前。</param>
      <param name="pubId">パブリック識別子。</param>
      <param name="sysId">システム識別子。</param>
      <param name="internalSubset">内部 DTD サブセット。</param>
      <param name="baseURI">XML フラグメントのベース URI (フラグメントの読み込み元の場所)。</param>
      <param name="xmlLang">xml:lang スコープ。</param>
      <param name="xmlSpace">xml:space スコープを示す <see cref="T:System.Xml.XmlSpace" /> の値。</param>
      <param name="enc">エンコード設定を示す <see cref="T:System.Text.Encoding" /> オブジェクト。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> は <paramref name="nsMgr" /> の構築に使用された XmlNameTable とは異なります。</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace)">
      <summary>指定された <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、xml:lang、および xml:space の値を使用して、XmlParserContext クラスの新規インスタンスを初期化します。</summary>
      <param name="nt">文字列を最小単位に分割するために使用する <see cref="T:System.Xml.XmlNameTable" />。このパラメーターが null の場合は、<paramref name="nsMgr" /> を構築するために使用される名前テーブルが代わりに使用されます。最小単位に分割された文字列の詳細については、<see cref="T:System.Xml.XmlNameTable" /> を参照してください。</param>
      <param name="nsMgr">名前空間情報を検索するために使用する <see cref="T:System.Xml.XmlNamespaceManager" />、または null。</param>
      <param name="xmlLang">xml:lang スコープ。</param>
      <param name="xmlSpace">xml:space スコープを示す <see cref="T:System.Xml.XmlSpace" /> の値。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> は <paramref name="nsMgr" /> の構築に使用された XmlNameTable とは異なります。</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>指定された <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、xml:lang、xml:space、およびエンコーディングを使用して、XmlParserContext クラスの新規インスタンスを初期化します。</summary>
      <param name="nt">文字列を最小単位に分割するために使用する <see cref="T:System.Xml.XmlNameTable" />。このパラメーターが null の場合は、<paramref name="nsMgr" /> を構築するために使用される名前テーブルが代わりに使用されます。最小単位に分割された文字列の詳細については、<see cref="T:System.Xml.XmlNameTable" /> を参照してください。</param>
      <param name="nsMgr">名前空間情報を検索するために使用する <see cref="T:System.Xml.XmlNamespaceManager" />、または null。</param>
      <param name="xmlLang">xml:lang スコープ。</param>
      <param name="xmlSpace">xml:space スコープを示す <see cref="T:System.Xml.XmlSpace" /> の値。</param>
      <param name="enc">エンコード設定を示す <see cref="T:System.Text.Encoding" /> オブジェクト。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> は <paramref name="nsMgr" /> の構築に使用された XmlNameTable とは異なります。</exception>
    </member>
    <member name="P:System.Xml.XmlParserContext.BaseURI">
      <summary>ベース URI を取得または設定します。</summary>
      <returns>DTD ファイルを解決するために使用するベース URI。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.DocTypeName">
      <summary>ドキュメント型宣言の名前を取得または設定します。</summary>
      <returns>ドキュメント型宣言の名前。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.Encoding">
      <summary>エンコーディングの種類を取得または設定します。</summary>
      <returns>エンコーディングの種類を示す <see cref="T:System.Text.Encoding" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.InternalSubset">
      <summary>内部 DTD サブセットを取得または設定します。</summary>
      <returns>内部 DTD サブセット。たとえば、このプロパティは、&lt;!DOCTYPE doc [...]&gt; の角かっこの中のすべての内容を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NamespaceManager">
      <summary>
        <see cref="T:System.Xml.XmlNamespaceManager" /> を取得または設定します。</summary>
      <returns>XmlNamespaceManager。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NameTable">
      <summary>文字列を細分化するために使用する <see cref="T:System.Xml.XmlNameTable" /> を取得します。最小単位に分割された文字列の詳細については、<see cref="T:System.Xml.XmlNameTable" /> を参照してください。</summary>
      <returns>XmlNameTable。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.PublicId">
      <summary>パブリック識別子を取得または設定します。</summary>
      <returns>パブリック識別子。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.SystemId">
      <summary>システム識別子を取得または設定します。</summary>
      <returns>システム識別子。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlLang">
      <summary>現在の xml:lang スコープを取得または設定します。</summary>
      <returns>現在の xml:lang スコープ。スコープ内に xml:lang がない場合は、String.Empty が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlSpace">
      <summary>現在の xml:space スコープを取得または設定します。</summary>
      <returns>xml:space スコープを示す <see cref="T:System.Xml.XmlSpace" /> の値。</returns>
    </member>
    <member name="T:System.Xml.XmlQualifiedName">
      <summary>XML 修飾名を表します</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String)">
      <summary>指定された名前を使用して、<see cref="T:System.Xml.XmlQualifiedName" /> クラスの新規インスタンスを初期化します。</summary>
      <param name="name">
        <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトの名前として使用するローカル名。</param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String,System.String)">
      <summary>指定された名前および名前空間を使用して、<see cref="T:System.Xml.XmlQualifiedName" /> クラスの新規インスタンスを初期化します。</summary>
      <param name="name">
        <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトの名前として使用するローカル名。</param>
      <param name="ns">
        <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトの名前空間。</param>
    </member>
    <member name="F:System.Xml.XmlQualifiedName.Empty">
      <summary>空の <see cref="T:System.Xml.XmlQualifiedName" /> を提供します。</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.Equals(System.Object)">
      <summary>指定された <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトが現在の <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトと同じかどうかを判別します。</summary>
      <returns>両方が同じインスタンス オブジェクトである場合は true、それ以外の場合は false。</returns>
      <param name="other">比較する <see cref="T:System.Xml.XmlQualifiedName" />。</param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.GetHashCode">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" /> のハッシュ コードを返します。</summary>
      <returns>このオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.IsEmpty">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" /> が空かどうかを示す値を取得します。</summary>
      <returns>名前および名前空間が空文字列の場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Name">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" /> の修飾名の文字列表現を取得します。</summary>
      <returns>修飾名の文字列表現または String.Empty (オブジェクトに対して名前が定義されていない場合)。</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Namespace">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" /> の名前空間の文字列表現を取得します。</summary>
      <returns>名前空間の文字列表現または String.Empty (オブジェクトに対して名前空間が定義されていない場合)。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>2 つの <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトを比較します。</summary>
      <returns>2 つのオブジェクトの名前および名前空間の値が同じである場合は true、それ以外の場合は false。</returns>
      <param name="a">比較する <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <param name="b">比較する <see cref="T:System.Xml.XmlQualifiedName" />。</param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>2 つの <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトを比較します。</summary>
      <returns>2 つのオブジェクトの名前および名前空間の値が異なる場合は true、それ以外の場合は false。</returns>
      <param name="a">比較する <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <param name="b">比較する <see cref="T:System.Xml.XmlQualifiedName" />。</param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" /> の文字列値を返します。</summary>
      <returns>namespace:localname の形式の <see cref="T:System.Xml.XmlQualifiedName" /> の文字列値。オブジェクトに名前空間が定義されていない場合、このメソッドはローカル名だけを返します。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString(System.String,System.String)">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" /> の文字列値を返します。</summary>
      <returns>namespace:localname の形式の <see cref="T:System.Xml.XmlQualifiedName" /> の文字列値。オブジェクトに名前空間が定義されていない場合、このメソッドはローカル名だけを返します。</returns>
      <param name="name">オブジェクトの名前。</param>
      <param name="ns">オブジェクトの名前空間。</param>
    </member>
    <member name="T:System.Xml.XmlReader">
      <summary>XML データへの高速で、キャッシュされていない前方向にのアクセスを提供するリーダーを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlReader.#ctor">
      <summary>XmlReader クラスの新規インスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.XmlReader.AttributeCount">
      <summary>派生クラスでオーバーライドされると、現在のノードの属性数を取得します。</summary>
      <returns>現在のノードにある属性の数。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.BaseURI">
      <summary>派生クラスでオーバーライドされると、現在のノードのベース URI を取得します。</summary>
      <returns>現在のノードのベース URI。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadBinaryContent">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> がバイナリ コンテンツ読み取りメソッドを実装するかどうかを示す値を取得します。</summary>
      <returns>バイナリ コンテンツ読み取りメソッドが実装される場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadValueChunk">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> が <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> メソッドを実装するかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlReader" /> が <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> メソッドを実装する場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanResolveEntity">
      <summary>このリーダーがエンティティを解析および解決できるかどうかを示す値を取得します。</summary>
      <returns>リーダーがエンティティを解析および解決できる場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Close">
      <summary>派生クラスでオーバーライドされると、<see cref="P:System.Xml.XmlReader.ReadState" /> を Closed に変更します。</summary>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream)">
      <summary>指定されたストリームを使用して、新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <returns>ストリームに格納されているデータを読み取るために使用する <see cref="T:System.Xml.XmlReader" /> オブジェクト。</returns>
      <param name="input">XML データが含まれているストリーム。<see cref="T:System.Xml.XmlReader" /> は、バイト順マークや、エンコードに関するその他の記号を探すため、ストリームの先頭バイトをスキャンします。エンコーディングが確認された場合、そのエンコーディングを使用してストリームの読み取りを続行し、入力を (Unicode) 文字のストリームとして解析する処理を継続します。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="input" /> 値が null です。</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Xml.XmlReader" /> には、XML データの場所へのアクセスに必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)">
      <summary>指定されたストリームおよび <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトを使用して、新規 <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <returns>XML データを読み取る <see cref="T:System.Xml.XmlReader" /> オブジェクト。</returns>
      <param name="input">XML データが含まれているストリーム。<see cref="T:System.Xml.XmlReader" /> は、バイト順マークや、エンコードに関するその他の記号を探すため、ストリームの先頭バイトをスキャンします。エンコーディングが確認された場合、そのエンコーディングを使用してストリームの読み取りを続行し、入力を (Unicode) 文字のストリームとして解析する処理を継続します。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト。この値は null にすることができます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.String)">
      <summary>指定されたストリーム、基本 URI、および <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトを使用して、新規 <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <returns>XML データを読み取る <see cref="T:System.Xml.XmlReader" /> オブジェクト。</returns>
      <param name="input">XML データが含まれているストリーム。<see cref="T:System.Xml.XmlReader" /> は、バイト順マークや、エンコードに関するその他の記号を探すため、ストリームの先頭バイトをスキャンします。エンコーディングが確認された場合、そのエンコーディングを使用してストリームの読み取りを続行し、入力を (Unicode) 文字のストリームとして解析する処理を継続します。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト。この値は null にすることができます。</param>
      <param name="baseUri">読み取るエンティティまたはドキュメントのベース URI。この値は null にすることができます。セキュリティに関するメモ   ベース URI は、XML ドキュメントの相対 URI を解決するために使用されます。信頼関係のないソースからベース URI を使用することは避けてください。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="input" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>指定されたストリーム、<see cref="T:System.Xml.XmlReaderSettings" />、および <see cref="T:System.Xml.XmlParserContext" /> オブジェクトを使用して、新規 <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <returns>XML データを読み取る <see cref="T:System.Xml.XmlReader" /> オブジェクト。</returns>
      <param name="input">XML データが含まれているストリーム。<see cref="T:System.Xml.XmlReader" /> は、バイト順マークや、エンコードに関するその他の記号を探すため、ストリームの先頭バイトをスキャンします。エンコーディングが確認された場合、そのエンコーディングを使用してストリームの読み取りを続行し、入力を (Unicode) 文字のストリームとして解析する処理を継続します。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト。この値は null にすることができます。</param>
      <param name="inputContext">XML フラグメントの解析に必要なコンテキスト情報を提供する <see cref="T:System.Xml.XmlParserContext" /> オブジェクト。コンテキスト情報には、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコード、名前空間スコープ、現在の xml:lang スコープと xml:space スコープ、ベース URI、およびドキュメント型定義を格納できます。この値は null にすることができます。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="input" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader)">
      <summary>指定された <see cref="T:System.IO.TextReader" /> を使用して、新規 <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <returns>XML データを読み取る <see cref="T:System.Xml.XmlReader" /> オブジェクト。</returns>
      <param name="input">XML データの読み取り元の <see cref="T:System.IO.TextReader" />。<see cref="T:System.IO.TextReader" /> は Unicode 文字のストリームを返すため、<see cref="T:System.Xml.XmlReader" /> はデータ ストリームのデコードに XML 宣言に指定されたエンコーディングを使用しません。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="input" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)">
      <summary>指定された <see cref="T:System.Xml.XmlReader" /> オブジェクトと <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトを使用して、新しい <see cref="T:System.IO.TextReader" /> インスタンスを作成します。</summary>
      <returns>XML データを読み取る <see cref="T:System.Xml.XmlReader" /> オブジェクト。</returns>
      <param name="input">XML データの読み取り元の <see cref="T:System.IO.TextReader" />。<see cref="T:System.IO.TextReader" /> は Unicode 文字のストリームを返すため、<see cref="T:System.Xml.XmlReader" /> はデータ ストリームのデコードに XML 宣言に指定されたエンコーディングを使用しません。</param>
      <param name="settings">新規 <see cref="T:System.Xml.XmlReader" /> の構成に使用された <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト。この値は null にすることができます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.String)">
      <summary>指定された <see cref="T:System.IO.TextReader" />、<see cref="T:System.Xml.XmlReaderSettings" />、およびベース URI を使用して、新規 <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <returns>XML データを読み取る <see cref="T:System.Xml.XmlReader" /> オブジェクト。</returns>
      <param name="input">XML データの読み取り元の <see cref="T:System.IO.TextReader" />。<see cref="T:System.IO.TextReader" /> は Unicode 文字のストリームを返すため、<see cref="T:System.Xml.XmlReader" /> はデータ ストリームのデコードに XML 宣言に指定されたエンコーディングを使用しません。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト。この値は null にすることができます。</param>
      <param name="baseUri">読み取るエンティティまたはドキュメントのベース URI。この値は null にすることができます。セキュリティに関するメモ   ベース URI は、XML ドキュメントの相対 URI を解決するために使用されます。信頼関係のないソースからベース URI を使用することは避けてください。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="input" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>指定された <see cref="T:System.IO.TextReader" />、<see cref="T:System.Xml.XmlReaderSettings" />、および <see cref="T:System.Xml.XmlParserContext" /> オブジェクトを使用して、新規 <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <returns>XML データを読み取る <see cref="T:System.Xml.XmlReader" /> オブジェクト。</returns>
      <param name="input">XML データの読み取り元の <see cref="T:System.IO.TextReader" />。<see cref="T:System.IO.TextReader" /> は Unicode 文字のストリームを返すため、<see cref="T:System.Xml.XmlReader" /> はデータ ストリームのデコードに XML 宣言に指定されたエンコーディングを使用しません。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト。この値は null にすることができます。</param>
      <param name="inputContext">XML フラグメントの解析に必要なコンテキスト情報を提供する <see cref="T:System.Xml.XmlParserContext" /> オブジェクト。コンテキスト情報には、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコード、名前空間スコープ、現在の xml:lang スコープと xml:space スコープ、ベース URI、およびドキュメント型定義を格納できます。この値は null にすることができます。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="input" /> 値が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> プロパティと <see cref="P:System.Xml.XmlParserContext.NameTable" /> プロパティの両方に値が設定されています。(これらの NameTable プロパティの 1 つのみを設定または使用できます)。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String)">
      <summary>指定された URI を使用して、新規 <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <returns>XML データを読み取る <see cref="T:System.Xml.XmlReader" /> オブジェクト。</returns>
      <param name="inputUri">XML データを格納しているファイルの URI。<see cref="T:System.Xml.XmlXapResolver" /> クラスは、パスを正規データ形式に変換するときに使用されます。詳細については、以下の「解説」を参照してください。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="inputUri" /> 値が null です。</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Xml.XmlReader" /> には、XML データの場所へのアクセスに必要なアクセス許可がありません。</exception>
      <exception cref="T:System.IO.FileNotFoundException">URI で指定されたファイルが存在しません。</exception>
      <exception cref="T:System.UriFormatException">URI 形式が正しくありません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)">
      <summary>指定された URI および <see cref="T:System.Xml.XmlReaderSettings" /> を使用して、新規インスタンスを作成します。</summary>
      <returns>XML データを読み取る <see cref="T:System.Xml.XmlReader" /> オブジェクト。</returns>
      <param name="inputUri">XML データを格納しているファイルの URI。<see cref="T:System.Xml.XmlResolver" /> オブジェクトの <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトは、パスを正規データ表現に変換するときに使用されます。<see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> が null である場合は、新しい <see cref="T:System.Xml.XmlXapResolver" /> オブジェクトが使用されます。詳細については、以下の「解説」を参照してください。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト。この値は null にすることができます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 値が null です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">URI で指定されたファイルが見つかりません。</exception>
      <exception cref="T:System.UriFormatException">URI 形式が正しくありません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>指定された URI、<see cref="T:System.Xml.XmlReaderSettings" />、および <see cref="T:System.Xml.XmlParserContext" /> オブジェクトを使用して、新規 <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <returns>XML データを読み取る <see cref="T:System.Xml.XmlReader" /> オブジェクト。</returns>
      <param name="inputUri">XML データを格納しているファイルの URI。<see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトの <see cref="T:System.Xml.XmlResolver" /> オブジェクトは、パスを正規データ表現に変換するときに使用されます。<see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> が null である場合は、新しい <see cref="T:System.Xml.XmlXapResolver" /> オブジェクトが使用されます。詳細については、以下の「解説」を参照してください。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト。この値は null にすることができます。</param>
      <param name="inputContext">XML フラグメントの解析に必要なコンテキスト情報を提供する <see cref="T:System.Xml.XmlParserContext" /> オブジェクト。コンテキスト情報には、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコード、名前空間スコープ、現在の xml:lang スコープと xml:space スコープ、ベース URI、およびドキュメント型定義を格納できます。この値は null にすることができます。</param>
      <exception cref="T:System.NullReferenceException">inputUri 値が null です。</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Xml.XmlReader" /> には、XML データの場所へのアクセスに必要なアクセス許可がありません。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> プロパティと <see cref="P:System.Xml.XmlParserContext.NameTable" /> プロパティの両方に値が設定されています。(これらの NameTable プロパティの 1 つのみを設定または使用できます)。</exception>
      <exception cref="T:System.IO.FileNotFoundException">URI で指定されたファイルが見つかりません。</exception>
      <exception cref="T:System.UriFormatException">URI 形式が正しくありません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)">
      <summary>指定された <see cref="T:System.Xml.XmlReader" /> および <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトを使用して、新規 <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <returns>指定された <see cref="T:System.Xml.XmlReader" /> オブジェクトをラップする <see cref="T:System.Xml.XmlReader" /> オブジェクト。</returns>
      <param name="reader">基になるリーダーとして使用する <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト。<see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトの準拠レベルは、基になるリーダーの準拠レベルと一致す<see cref="F:System.Xml.ConformanceLevel.Auto" /> に設定する必要があります。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="reader" /> 値が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトが、基になるリーダーの準拠レベルと一致しない準拠レベルを指定しています。または基になる <see cref="T:System.Xml.XmlReader" /> が <see cref="F:System.Xml.ReadState.Error" /> の状態または <see cref="F:System.Xml.ReadState.Closed" /> の状態にあります。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Depth">
      <summary>派生クラスでオーバーライドされると、XML ドキュメント内の現在のノードの深さを取得します。</summary>
      <returns>XML ドキュメント内の現在のノードの深さ。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="P:System.Xml.XmlReader.EOF">
      <summary>派生クラスでオーバーライドされると、リーダーがストリームの末尾に配置されているかどうかを示す値を取得します。</summary>
      <returns>リーダーがストリームの最後に位置している場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.Int32)">
      <summary>派生クラスでオーバーライドされると、指定されたインデックスの属性の値を取得します。</summary>
      <returns>指定された属性の値。このメソッドは、リーダーを移動しません。</returns>
      <param name="i">属性のインデックス。インデックスの値は、0 から始まります。最初の属性のインデックスは 0 です。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> が範囲外です。負であってはならず、属性コレクションのサイズ未満であってもなりません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String)">
      <summary>派生クラスでオーバーライドされると、指定された <see cref="P:System.Xml.XmlReader.Name" /> を持つ属性の値を取得します。</summary>
      <returns>指定された属性の値。属性が見つからないか、値が String.Empty である場合は、null が返されます。</returns>
      <param name="name">属性の修飾名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定された <see cref="P:System.Xml.XmlReader.LocalName" /> と <see cref="P:System.Xml.XmlReader.NamespaceURI" /> を持つ属性の値を取得します。</summary>
      <returns>指定された属性の値。属性が見つからないか、値が String.Empty である場合は、null が返されます。このメソッドは、リーダーを移動しません。</returns>
      <param name="name">属性のローカル名。</param>
      <param name="namespaceURI">属性の名前空間 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetValueAsync">
      <summary>現在のノードの値を非同期で取得します。</summary>
      <returns>現在のノードの値。</returns>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlReaderSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.HasAttributes">
      <summary>現在のノードが属性を持っているかどうかを示す値を取得します。</summary>
      <returns>現在のノードに属性がある場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.HasValue">
      <summary>派生クラスでオーバーライドされると、現在のノードに <see cref="P:System.Xml.XmlReader.Value" /> があるかどうかを示す値を取得します。</summary>
      <returns>リーダーが現在位置しているノードに Value がある場合は true、それ以外の場合は false。false の場合は、ノードの値は String.Empty です。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.IsDefault">
      <summary>派生クラスでオーバーライドされると、現在のノードが、DTD で定義された既定値から生成された属性かどうかを示す値を取得します。</summary>
      <returns>現在のノードが、DTD で定義された既定値から生成された値を持つ属性である場合は true。属性値が明示的に設定された場合は false。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.IsEmptyElement">
      <summary>派生クラスでオーバーライドされると、現在のノードが空の要素 (&lt;MyElement/&gt; など) かどうかを示す値を取得します。</summary>
      <returns>現在のノードが /&gt; で終わる要素である (<see cref="P:System.Xml.XmlReader.NodeType" /> が XmlNodeType.Element に等しい) 場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsName(System.String)">
      <summary>文字列引数が有効な XML 名かどうかを示す値を取得します。</summary>
      <returns>名前が有効な場合は true、それ以外の場合は false。</returns>
      <param name="str">検証する名前。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="str" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsNameToken(System.String)">
      <summary>文字列引数が有効な XML 名トークンかどうかを示す値を取得します。</summary>
      <returns>有効な名前トークンである場合は true、それ以外の場合は false。</returns>
      <param name="str">検証する名前トークン。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="str" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement">
      <summary>
        <see cref="M:System.Xml.XmlReader.MoveToContent" /> を呼び出し、現在のコンテンツ ノードが開始タグまたは空の要素タグかどうかをテストします。</summary>
      <returns>
        <see cref="M:System.Xml.XmlReader.MoveToContent" /> が開始タグまたは空の要素タグを検出した場合は true、XmlNodeType.Element 以外のノードの型が見つかった場合は false。</returns>
      <exception cref="T:System.Xml.XmlException">入力ストリームで、正しくない XML が検出されました。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String)">
      <summary>
        <see cref="M:System.Xml.XmlReader.MoveToContent" /> を呼び出し、現在のコンテンツ ノードが開始タグまたは空要素タグかどうか、および見つかった要素の <see cref="P:System.Xml.XmlReader.Name" /> プロパティが指定引数に一致するかどうかをテストします。</summary>
      <returns>結果のノードが要素であり、Name プロパティが指定文字列に一致する場合は true、XmlNodeType.Element 以外のノードの型が見つかった場合、または要素の Name プロパティが指定文字列に一致しない場合は false。</returns>
      <param name="name">見つかった要素の Name プロパティに対して一致させる文字列。</param>
      <exception cref="T:System.Xml.XmlException">入力ストリームで、正しくない XML が検出されました。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String,System.String)">
      <summary>
        <see cref="M:System.Xml.XmlReader.MoveToContent" /> を呼び出し、現在のコンテンツ ノードが開始タグまたは空の要素タグかどうか、および見つかった要素の <see cref="P:System.Xml.XmlReader.LocalName" /> プロパティと <see cref="P:System.Xml.XmlReader.NamespaceURI" /> プロパティが指定文字列に一致するかどうかをテストします。</summary>
      <returns>見つかったノードが要素の場合は true。XmlNodeType.Element 以外のノードの型が見つかった場合、または要素の LocalName と NamespaceURI プロパティが指定文字列に一致しない場合は false。</returns>
      <param name="localname">見つかった要素の LocalName プロパティに対して一致させる文字列。</param>
      <param name="ns">見つかった要素の NamespaceURI プロパティに対して一致させる文字列。</param>
      <exception cref="T:System.Xml.XmlException">入力ストリームで、正しくない XML が検出されました。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.Int32)">
      <summary>派生クラスでオーバーライドされると、指定されたインデックスの属性の値を取得します。</summary>
      <returns>指定された属性の値。</returns>
      <param name="i">属性のインデックス。</param>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String)">
      <summary>派生クラスでオーバーライドされると、指定された <see cref="P:System.Xml.XmlReader.Name" /> を持つ属性の値を取得します。</summary>
      <returns>指定された属性の値。属性が見つからない場合は、null が返されます。</returns>
      <param name="name">属性の修飾名。</param>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定された <see cref="P:System.Xml.XmlReader.LocalName" /> と <see cref="P:System.Xml.XmlReader.NamespaceURI" /> を持つ属性の値を取得します。</summary>
      <returns>指定された属性の値。属性が見つからない場合は、null が返されます。</returns>
      <param name="name">属性のローカル名。</param>
      <param name="namespaceURI">属性の名前空間 URI。</param>
    </member>
    <member name="P:System.Xml.XmlReader.LocalName">
      <summary>派生クラスでオーバーライドされると、現在のノードのローカル名を取得します。</summary>
      <returns>プレフィックスを削除した現在のノードの名前。たとえば、要素 &lt;bk:book&gt; の LocalName は book です。名前を持たないノード型 (Text、Comment、など) の場合、このプロパティは String.Empty を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.LookupNamespace(System.String)">
      <summary>派生クラスでオーバーライドされると、現在の要素のスコープの名前空間プレフィックスを解決します。</summary>
      <returns>プレフィックスがマップされる名前空間 URI、または null 値 (一致するプレフィックスが見つからなかった場合)。</returns>
      <param name="prefix">解決する対象となる名前空間 URI を持つプレフィックス。既定の名前空間と一致させるには、空の文字列を渡します。</param>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)">
      <summary>派生クラスでオーバーライドされると、指定されたインデックスの属性に移動します。</summary>
      <param name="i">属性のインデックス。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="i" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String)">
      <summary>派生クラスでオーバーライドされると、指定された <see cref="P:System.Xml.XmlReader.Name" /> の属性に移動します。</summary>
      <returns>属性が見つかった場合は true。それ以外の場合は false。false の場合、リーダーの位置は変更されません。</returns>
      <param name="name">属性の修飾名。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="name" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定された <see cref="P:System.Xml.XmlReader.LocalName" /> および <see cref="P:System.Xml.XmlReader.NamespaceURI" /> の属性に移動します。</summary>
      <returns>属性が見つかった場合は true。それ以外の場合は false。false の場合、リーダーの位置は変更されません。</returns>
      <param name="name">属性のローカル名。</param>
      <param name="ns">属性の名前空間 URI。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="name" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContent">
      <summary>現在のノードがコンテンツ (非空白テキスト、CDATA、Element、EndElement、EntityReference、または EndEntity) ノードかどうかをチェックします。ノードがコンテンツ ノードでない場合、リーダーは次のコンテンツ ノードまたはファイルの末尾までスキップします。次の型のノードをスキップします。ProcessingInstruction、DocumentType、Comment、Whitespace、または SignificantWhitespace。</summary>
      <returns>メソッドが見つけた現在のノードの <see cref="P:System.Xml.XmlReader.NodeType" />。リーダーが入力ストリームの末尾に到達した場合は XmlNodeType.None。</returns>
      <exception cref="T:System.Xml.XmlException">入力ストリームで検出された正しくない XML。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContentAsync">
      <summary>現在のノードがコンテンツ ノードであるかどうかを非同期で確認します。ノードがコンテンツ ノードでない場合、リーダーは次のコンテンツ ノードまたはファイルの末尾までスキップします。</summary>
      <returns>メソッドが見つけた現在のノードの <see cref="P:System.Xml.XmlReader.NodeType" />。リーダーが入力ストリームの末尾に到達した場合は XmlNodeType.None。</returns>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlReaderSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToElement">
      <summary>派生クラスでオーバーライドされると、現在の属性ノードを含む要素に移動します。</summary>
      <returns>リーダーが属性の位置に配置されている場合は true で、属性を所有している要素の位置にリーダーが移動します。リーダーが属性の位置に配置されていない場合は false で、リーダーの位置が変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToFirstAttribute">
      <summary>派生クラスでオーバーライドされると、最初の属性に移動します。</summary>
      <returns>属性が存在する場合は true で、リーダーが最初の属性へ移動します。それ以外の場合は false で、リーダーの位置が変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToNextAttribute">
      <summary>派生クラスでオーバーライドされると、次の属性に移動します。</summary>
      <returns>次の属性がある場合は true、属性がこれ以上ない場合は false。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Name">
      <summary>派生クラスでオーバーライドされると、現在のノードの修飾名を取得します。</summary>
      <returns>現在のノードの修飾名。たとえば、要素 &lt;bk:book&gt; の Name は bk:book です。返される名前は、ノードの <see cref="P:System.Xml.XmlReader.NodeType" /> によって異なります。リストされた値を返すノード型を次に示します。その他のすべてのノード型は、空の文字列を返します。ノード型名前属性属性の名前。DocumentTypeドキュメントの種類の名前。要素タグ名。EntityReference参照されたエンティティの名前。ProcessingInstruction処理命令の対象。XmlDeclarationリテラル文字列 xml。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.NamespaceURI">
      <summary>派生クラスでオーバーライドされると、リーダーが配置されているノードの名前空間 URI (W3C の名前空間の仕様における定義に準拠) を取得します。</summary>
      <returns>現在のノードの名前空間 URI。それ以外の場合は空の文字列。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.NameTable">
      <summary>派生クラスでオーバーライドされると、この実装に関連付けられた <see cref="T:System.Xml.XmlNameTable" /> を取得します。</summary>
      <returns>XmlNameTable により、ノード内の文字列の細分化されたバージョンの文字列を取得できます。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.NodeType">
      <summary>派生クラスでオーバーライドされると、現在のノードの型を取得します。</summary>
      <returns>現在のノードの型を表す <see cref="T:System.Xml.XmlNodeType" /> 値の 1 つ。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Prefix">
      <summary>派生クラスでオーバーライドされると、現在のノードに関連付けられている名前空間プレフィックスを取得します。</summary>
      <returns>現在のノードに関連付けられた名前空間プレフィックス。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Read">
      <summary>派生クラスでオーバーライドされると、ストリームから次のノードを読み取ります。</summary>
      <returns>次のノードが正常に読み取られた場合は true。読み取るノードがこれ以上ない場合は false。</returns>
      <exception cref="T:System.Xml.XmlException">XML の解析中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAsync">
      <summary>ストリームから次のノードを非同期で読み取ります。</summary>
      <returns>次のノードが正常に読み取られた場合は true。読み取るノードがこれ以上ない場合は false。</returns>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlReaderSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAttributeValue">
      <summary>派生クラスでオーバーライドされると、属性値を 1 つ以上の Text、EntityReference、または EndEntity のノードに解析します。</summary>
      <returns>返すノードがある場合は true。初めて呼び出すときにリーダーの位置が属性ノード上にない場合、またはすべての属性値が読み込まれている場合は、false。misc="" などの空の属性は、値 String.Empty を持つ単一のノードと一緒に true を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>指定された型のオブジェクトとしてコンテンツを読み取ります。</summary>
      <returns>連結されたテキストの内容または要求された型に変換された属性値。</returns>
      <param name="returnType">返される値の型。メモ   .NET Framework 3.5 のリリースでは、<paramref name="returnType" /> パラメーターの値に <see cref="T:System.DateTimeOffset" /> 型を指定できるようになりました。</param>
      <param name="namespaceResolver">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。たとえば、<see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトを xs:string に変換するときにこれを使用できます。この値は null にすることができます。</param>
      <exception cref="T:System.FormatException">内容が、指定した型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" /> 値が null です。</exception>
      <exception cref="T:System.InvalidOperationException">現在のノードは、サポートされているノード型ではありません。詳細については、次の表を参照してください。</exception>
      <exception cref="T:System.OverflowException">読み取られた Decimal.MaxValue。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>指定された型のオブジェクトとして内容を非同期で読み取ります。</summary>
      <returns>要求された型に変換された、連結されたテキストのコンテンツまたは属性値。</returns>
      <param name="returnType">返される値の型。</param>
      <param name="namespaceResolver">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlReaderSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>内容を読み取り、Base64 でデコードされたバイナリ バイトを返します。</summary>
      <returns>バッファーに書き込まれたバイト数。</returns>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。この値を null にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />   は、現在のノードではサポートされていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 実装が、このメソッドをサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary>内容を非同期で読み取り、Base64 デコード バイナリ バイトを戻します。</summary>
      <returns>バッファーに書き込まれたバイト数。</returns>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。この値を null にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlReaderSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>内容を読み取り、BinHex でデコードされたバイナリ バイトを返します。</summary>
      <returns>バッファーに書き込まれたバイト数。</returns>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。この値を null にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />  は、現在のノードではサポートされていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 実装が、このメソッドをサポートしていません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>内容を非同期で読み取り、BinHex デコード バイナリ バイトを戻します。</summary>
      <returns>バッファーに書き込まれたバイト数。</returns>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。この値を null にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlReaderSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBoolean">
      <summary>現在の位置にあるテキスト コンテンツを Boolean オブジェクトとして読み取ります。</summary>
      <returns>
        <see cref="T:System.Boolean" /> オブジェクトとしてのテキストの内容。</returns>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException">文字列書式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTime">
      <summary>現在の位置にあるテキストの内容を <see cref="T:System.DateTime" /> オブジェクトとして読み取ります。</summary>
      <returns>
        <see cref="T:System.DateTime" /> オブジェクトとしてのテキストの内容。</returns>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException">文字列書式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTimeOffset">
      <summary>現在の位置にあるテキストの内容を <see cref="T:System.DateTimeOffset" /> オブジェクトとして読み取ります。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> オブジェクトとしてのテキストの内容。</returns>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDecimal">
      <summary>現在の位置にあるテキストの内容を <see cref="T:System.Decimal" /> オブジェクトとして読み取ります。</summary>
      <returns>現在の位置における <see cref="T:System.Decimal" /> オブジェクトとしてのテキスト コンテンツ。</returns>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException">文字列書式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDouble">
      <summary>現在の位置のテキスト コンテンツを、倍精度浮動小数点数として読み取ります。</summary>
      <returns>倍精度浮動小数点数としてのテキスト コンテンツ。</returns>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException">文字列書式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsFloat">
      <summary>現在の位置のテキスト コンテンツを、単精度浮動小数点数として読み取ります。</summary>
      <returns>現在の位置における単精度浮動小数点数としてのテキスト コンテンツ。</returns>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException">文字列書式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsInt">
      <summary>現在の位置にあるテキストの内容を 32 ビット符号付き整数として読み取ります。</summary>
      <returns>32 ビット符号付き整数としてのテキストの内容。</returns>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException">文字列書式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsLong">
      <summary>現在の位置にあるテキストの内容を 64 ビット符号付き整数として読み取ります。</summary>
      <returns>64 ビット符号付き整数としてのテキストの内容。</returns>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException">文字列書式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObject">
      <summary>現在位置のテキスト コンテンツを <see cref="T:System.Object" /> として読み取ります。</summary>
      <returns>最も適切な共通言語ランタイム (CLR) オブジェクトとしてのテキストの内容。</returns>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException">文字列書式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObjectAsync">
      <summary>現在位置のテキスト コンテンツを <see cref="T:System.Object" /> として非同期で読み取ります。</summary>
      <returns>最も適切な共通言語ランタイム (CLR) オブジェクトとしてのテキストの内容。</returns>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlReaderSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsString">
      <summary>現在の位置にあるテキストの内容を <see cref="T:System.String" /> オブジェクトとして読み取ります。</summary>
      <returns>
        <see cref="T:System.String" /> オブジェクトとしてのテキストの内容。</returns>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException">文字列書式が無効です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsStringAsync">
      <summary>現在の位置にあるテキスト コンテンツを <see cref="T:System.String" /> オブジェクトとして非同期で読み取ります。</summary>
      <returns>
        <see cref="T:System.String" /> オブジェクトとしてのテキストの内容。</returns>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlReaderSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>要素のコンテンツを要求された型として返します。</summary>
      <returns>要求された型指定オブジェクトに変換された要素の内容。</returns>
      <param name="returnType">返される値の型。メモ   .NET Framework 3.5 のリリースでは、<paramref name="returnType" /> パラメーターの値に <see cref="T:System.DateTimeOffset" /> 型を指定できるようになりました。</param>
      <param name="namespaceResolver">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
      <exception cref="T:System.OverflowException">読み取られた Decimal.MaxValue。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
      <summary>指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、要素の内容を要求された型として読み込みます。</summary>
      <returns>要求された型指定オブジェクトに変換された要素の内容。</returns>
      <param name="returnType">返される値の型。メモ   .NET Framework 3.5 のリリースでは、<paramref name="returnType" /> パラメーターの値に <see cref="T:System.DateTimeOffset" /> 型を指定できるようになりました。</param>
      <param name="namespaceResolver">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
      <exception cref="T:System.OverflowException">読み取られた Decimal.MaxValue。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>要求された型として要素コンテンツを非同期で読み取ります。</summary>
      <returns>要求された型指定オブジェクトに変換された要素の内容。</returns>
      <param name="returnType">返される値の型。</param>
      <param name="namespaceResolver">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlReaderSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>要素を読み取り、Base64 のコンテンツをデコードします。</summary>
      <returns>バッファーに書き込まれたバイト数。</returns>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。この値を null にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値が null です。</exception>
      <exception cref="T:System.InvalidOperationException">現在のノードは要素ノードではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException">要素には混合コンテンツが含まれます。</exception>
      <exception cref="T:System.FormatException">コンテンツを要求された型に変換できません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary>要素を読み取り、Base64 のコンテンツを非同期でデコードします。</summary>
      <returns>バッファーに書き込まれたバイト数。</returns>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。この値を null にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlReaderSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>要素を読み取り、BinHex のコンテンツをデコードします。</summary>
      <returns>バッファーに書き込まれたバイト数。</returns>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。この値を null にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値が null です。</exception>
      <exception cref="T:System.InvalidOperationException">現在のノードは要素ノードではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException">要素には混合コンテンツが含まれます。</exception>
      <exception cref="T:System.FormatException">コンテンツを要求された型に変換できません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>要素を読み取り、BinHex のコンテンツを非同期でデコードします。</summary>
      <returns>バッファーに書き込まれたバイト数。</returns>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。この値を null にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlReaderSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean">
      <summary>現在の要素を読み取り、内容を <see cref="T:System.Boolean" /> オブジェクトとして返します。</summary>
      <returns>
        <see cref="T:System.Boolean" /> オブジェクトとしての要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を <see cref="T:System.Boolean" /> オブジェクトに変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)">
      <summary>指定されたローカル名および名前空間 URI が、現在の要素のローカル名および名前空間 URI と一致しているか確認した後、現在の要素を読み取り、内容を <see cref="T:System.Boolean" /> オブジェクトとして返します。</summary>
      <returns>
        <see cref="T:System.Boolean" /> オブジェクトとしての要素の内容。</returns>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime">
      <summary>現在の要素を読み取り、内容を <see cref="T:System.DateTime" /> オブジェクトとして返します。</summary>
      <returns>
        <see cref="T:System.DateTime" /> オブジェクトとしての要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を <see cref="T:System.DateTime" /> オブジェクトに変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime(System.String,System.String)">
      <summary>指定されたローカル名および名前空間 URI が、現在の要素のローカル名および名前空間 URI と一致しているか確認した後、現在の要素を読み取り、内容を <see cref="T:System.DateTime" /> オブジェクトとして返します。</summary>
      <returns>
        <see cref="T:System.DateTime" /> オブジェクトとしての要素の内容。</returns>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal">
      <summary>現在の要素を読み取り、内容を <see cref="T:System.Decimal" /> オブジェクトとして返します。</summary>
      <returns>
        <see cref="T:System.Decimal" /> オブジェクトとしての要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を <see cref="T:System.Decimal" /> に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)">
      <summary>指定されたローカル名および名前空間 URI が、現在の要素のローカル名および名前空間 URI と一致しているか確認した後、現在の要素を読み取り、内容を <see cref="T:System.Decimal" /> オブジェクトとして返します。</summary>
      <returns>
        <see cref="T:System.Decimal" /> オブジェクトとしての要素の内容。</returns>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を <see cref="T:System.Decimal" /> に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble">
      <summary>現在の要素を読み取り、内容を倍精度浮動小数点数として返します。</summary>
      <returns>倍精度浮動小数点数としての要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を倍精度浮動小数点数に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)">
      <summary>指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み込んで内容を倍精度浮動小数点数として返します。</summary>
      <returns>倍精度浮動小数点数としての要素の内容。</returns>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat">
      <summary>現在の要素を読み込み、その内容を単精度浮動小数点数として返します。</summary>
      <returns>単精度浮動小数点数としての要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を単精度浮動小数点数に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)">
      <summary>指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み込んで内容を単精度浮動小数点数として返します。</summary>
      <returns>単精度浮動小数点数としての要素の内容。</returns>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を単精度浮動小数点数に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt">
      <summary>現在の要素を読み取り、内容を 32 ビット符号付き整数として返します。</summary>
      <returns>32 ビット符号付き整数としての要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を 32 ビット符号付き整数に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)">
      <summary>指定されたローカル名および名前空間 URI が、現在の要素のローカル名および名前空間 URI と一致しているか確認した後、現在の要素を読み取り、内容を 32 ビット符号付き整数として返します。</summary>
      <returns>32 ビット符号付き整数としての要素の内容。</returns>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を 32 ビット符号付き整数に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong">
      <summary>現在の要素を読み取り、内容を 64 ビット符号付き整数として返します。</summary>
      <returns>64 ビット符号付き整数としての要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を 64 ビット符号付き整数に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)">
      <summary>指定されたローカル名および名前空間 URI が、現在の要素のローカル名および名前空間 URI と一致しているか確認した後、現在の要素を読み取り、内容を 64 ビット符号付き整数として返します。</summary>
      <returns>64 ビット符号付き整数としての要素の内容。</returns>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を 64 ビット符号付き整数に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject">
      <summary>現在の要素を読み取り、内容を <see cref="T:System.Object" /> として返します。</summary>
      <returns>最も適切な型のボックス化された共通言語ランタイム (CLR) オブジェクト。<see cref="P:System.Xml.XmlReader.ValueType" /> プロパティは、適切な CLR 型を判断します。内容がリスト型として型指定されている場合、このメソッドは適切な型のボックス化されたオブジェクトの配列を返します。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)">
      <summary>指定されたローカル名および名前空間 URI が現在の要素のものと一致しているかをチェックしてから、現在の要素を読み取り、そのコンテンツを <see cref="T:System.Object" /> として返します。</summary>
      <returns>最も適切な型のボックス化された共通言語ランタイム (CLR) オブジェクト。<see cref="P:System.Xml.XmlReader.ValueType" /> プロパティは、適切な CLR 型を判断します。内容がリスト型として型指定されている場合、このメソッドは適切な型のボックス化されたオブジェクトの配列を返します。</returns>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObjectAsync">
      <summary>現在の要素を非同期で読み取り、そのコンテンツを <see cref="T:System.Object" /> として返します。</summary>
      <returns>最も適切な型のボックス化された共通言語ランタイム (CLR) オブジェクト。<see cref="P:System.Xml.XmlReader.ValueType" /> プロパティは、適切な CLR 型を判断します。内容がリスト型として型指定されている場合、このメソッドは適切な型のボックス化されたオブジェクトの配列を返します。</returns>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlReaderSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString">
      <summary>現在の要素を読み取り、内容を <see cref="T:System.String" /> オブジェクトとして返します。</summary>
      <returns>
        <see cref="T:System.String" /> オブジェクトとしての要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を <see cref="T:System.String" /> オブジェクトに変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)">
      <summary>指定されたローカル名および名前空間 URI が、現在の要素のローカル名および名前空間 URI と一致しているか確認した後、現在の要素を読み取り、内容を <see cref="T:System.String" /> オブジェクトとして返します。</summary>
      <returns>
        <see cref="T:System.String" /> オブジェクトとしての要素の内容。</returns>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。または要素の内容を <see cref="T:System.String" /> オブジェクトに変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">null 引数を使用してメソッドが呼び出されています。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsStringAsync">
      <summary>現在の要素を非同期で読み取り、内容を <see cref="T:System.String" /> オブジェクトとして戻します。</summary>
      <returns>
        <see cref="T:System.String" /> オブジェクトとしての要素の内容。</returns>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlReaderSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadEndElement">
      <summary>現在のコンテンツ ノードが終了タグで、リーダーを次のノードに進めることを確認します。</summary>
      <exception cref="T:System.Xml.XmlException">現在のノードが終了タグでないか、入力ストリームで正しくない XML が検出されました。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXml">
      <summary>派生クラスでオーバーライドされると、マークアップを含むすべてのコンテンツを文字列として読み取ります。</summary>
      <returns>現在のノード内の、マークアップを含むすべての XML の内容。現在のノードが子を持っていない場合は、空の文字列が返されます。現在のノードが要素でも属性でもない場合は、空の文字列が返されます。</returns>
      <exception cref="T:System.Xml.XmlException">XML が整形式ではありませんでした。または、XML の解析中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXmlAsync">
      <summary>マークアップを含むすべての内容を文字列として非同期で読み取ります。</summary>
      <returns>現在のノード内の、マークアップを含むすべての XML の内容。現在のノードが子を持っていない場合は、空の文字列が返されます。</returns>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlReaderSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXml">
      <summary>派生クラスでオーバーライドされると、このノードとそのすべての子を表すコンテンツ (マークアップを含む) を読み取ります。</summary>
      <returns>リーダーが要素ノードまたは属性ノードに配置されている場合、このメソッドは、現在のノードおよびそのすべての子の、マークアップを含む、XML の内容をすべて返します。それ以外の場合は、空の文字列を返します。</returns>
      <exception cref="T:System.Xml.XmlException">XML が整形式ではありませんでした。または、XML の解析中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXmlAsync">
      <summary>このノードおよびそのすべての子を表すコンテンツ (マークアップを含む) を非同期で読み取ります。</summary>
      <returns>リーダーが要素ノードまたは属性ノードに配置されている場合、このメソッドは、現在のノードおよびそのすべての子の、マークアップを含む、XML の内容をすべて返します。それ以外の場合は、空の文字列を返します。</returns>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlReaderSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement">
      <summary>現在のノードが要素であることを確認し、リーダーを次のノードに進めます。</summary>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlReader.IsStartElement" /> が false を返します。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String)">
      <summary>現在のコンテンツ ノードが、指定された <see cref="P:System.Xml.XmlReader.Name" /> を持つ要素かをチェックし、リーダーを次のノードに進めます。</summary>
      <param name="name">要素の修飾名。</param>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlReader.IsStartElement" /> が false を返すか、要素の <see cref="P:System.Xml.XmlReader.Name" /> が、指定された <paramref name="name" /> に一致しません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)">
      <summary>現在のコンテンツ ノードが、指定された <see cref="P:System.Xml.XmlReader.LocalName" /> および <see cref="P:System.Xml.XmlReader.NamespaceURI" /> を持つ要素かをチェックし、リーダーを次のノードに進めます。</summary>
      <param name="localname">要素のローカル名。</param>
      <param name="ns">要素の名前空間 URI。</param>
      <exception cref="T:System.Xml.XmlException">
        <see cref="M:System.Xml.XmlReader.IsStartElement" /> が false を返すか、見つかった要素の <see cref="P:System.Xml.XmlReader.LocalName" /> プロパティと <see cref="P:System.Xml.XmlReader.NamespaceURI" /> プロパティが、指定された引数と一致しません。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.ReadState">
      <summary>派生クラスでオーバーライドされると、リーダーの状態を取得します。</summary>
      <returns>
        <see cref="T:System.Xml.ReadState" /> 値の 1 つ。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadSubtree">
      <summary>現在のノードおよびそのすべての子孫を読み取るために使用できる新規 XmlReader インスタンスを返します。</summary>
      <returns>ReadState.Initial に設定された新規 XmlReader インスタンス。<see cref="M:System.Xml.XmlReader.Read" /> メソッドを呼び出すと、ReadSubtree メソッドを呼び出す前に処理対象だったノードに新しい XmlReader が配置されます。</returns>
      <exception cref="T:System.InvalidOperationException">このメソッドの呼び出し時に、XmlReader は要素に位置していません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String)">
      <summary>指定された修飾名を持つ次の子孫要素に <see cref="T:System.Xml.XmlReader" /> を進めます。</summary>
      <returns>一致する子孫要素が見つかった場合は true。それ以外の場合は false。一致する子要素が見つからない場合は、<see cref="T:System.Xml.XmlReader" /> が要素の終了タグ (<see cref="P:System.Xml.XmlReader.NodeType" /> は XmlNodeType.EndElement) に配置されます。<see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" /> が呼び出されたときに <see cref="T:System.Xml.XmlReader" /> が要素に配置されていない場合、このメソッドは false を返し、<see cref="T:System.Xml.XmlReader" /> の位置を変更しません。</returns>
      <param name="name">移動先となる要素の修飾名。</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)">
      <summary>指定されたローカル名および名前空間 URI を持つ次の子孫要素に <see cref="T:System.Xml.XmlReader" /> を進めます。</summary>
      <returns>一致する子孫要素が見つかった場合は true。それ以外の場合は false。一致する子要素が見つからない場合は、<see cref="T:System.Xml.XmlReader" /> が要素の終了タグ (<see cref="P:System.Xml.XmlReader.NodeType" /> は XmlNodeType.EndElement) に配置されます。<see cref="T:System.Xml.XmlReader" /> が呼び出されたときに <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" /> が要素に配置されていない場合、このメソッドは false を返し、<see cref="T:System.Xml.XmlReader" /> の位置を変更しません。</returns>
      <param name="localName">移動先となる要素のローカル名。</param>
      <param name="namespaceURI">移動先となる要素の名前空間 URI。</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String)">
      <summary>指定された修飾名の要素が見つかるまで読み込みます。</summary>
      <returns>一致する要素が見つかった場合は true。それ以外の場合は false になり、<see cref="T:System.Xml.XmlReader" /> がファイルの末尾の状態になります。</returns>
      <param name="name">要素の修飾名。</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String,System.String)">
      <summary>指定されたローカル名と名前空間 URI が見つかるまで要素を読み込みます。</summary>
      <returns>一致する要素が見つかった場合は true。それ以外の場合は false になり、<see cref="T:System.Xml.XmlReader" /> がファイルの末尾の状態になります。</returns>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String)">
      <summary>指定された修飾名を持つ次の兄弟要素に XmlReader を進めます。</summary>
      <returns>一致する兄弟要素が見つかった場合は true。それ以外の場合は false。一致する兄弟要素が見つからない場合は、XmlReader が親要素の終了タグ (<see cref="P:System.Xml.XmlReader.NodeType" /> は XmlNodeType.EndElement) に配置されます。</returns>
      <param name="name">移動先となる兄弟要素の修飾名。</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)">
      <summary>指定されたローカル名および名前空間 URI を持つ次の兄弟要素に XmlReader を進めます。</summary>
      <returns>一致する兄弟要素が見つかった場合は true。それ以外の場合は false。一致する兄弟要素が見つからない場合は、XmlReader が親要素の終了タグ (<see cref="P:System.Xml.XmlReader.NodeType" /> は XmlNodeType.EndElement) に配置されます。</returns>
      <param name="localName">移動先となる兄弟要素のローカル名。</param>
      <param name="namespaceURI">移動先となる兄弟要素の名前空間 URI。</param>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
      <summary>XML ドキュメントに埋め込まれたテキストの大量のストリームを読み込みます。</summary>
      <returns>バッファー内へ読み取られた文字数。それ以上テキストの内容がない場合は、値として 0 が返されます。</returns>
      <param name="buffer">テキストの内容が書き込まれるバッファーとして機能する文字の配列。この値を null にすることはできません。</param>
      <param name="index">
        <see cref="T:System.Xml.XmlReader" /> が結果のコピーを開始できる、バッファー内のオフセット。</param>
      <param name="count">バッファーにコピーする最大文字数。コピーされた実際の文字数は、このメソッドから返されます。</param>
      <exception cref="T:System.InvalidOperationException">現在のノードには値がありません (<see cref="P:System.Xml.XmlReader.HasValue" /> が false)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException">XML データは、整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)">
      <summary>XML ドキュメントに埋め込まれたテキストの大量のストリームを非同期で読み込みます。</summary>
      <returns>バッファー内へ読み取られた文字数。それ以上テキストの内容がない場合は、値として 0 が返されます。</returns>
      <param name="buffer">テキストの内容が書き込まれるバッファーとして機能する文字の配列。この値を null にすることはできません。</param>
      <param name="index">
        <see cref="T:System.Xml.XmlReader" /> が結果のコピーを開始できる、バッファー内のオフセット。</param>
      <param name="count">バッファーにコピーする最大文字数。コピーされた実際の文字数は、このメソッドから返されます。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlReaderSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ResolveEntity">
      <summary>派生クラスでオーバーライドされると、EntityReference ノードのエンティティ参照を解決します。</summary>
      <exception cref="T:System.InvalidOperationException">リーダーが EntityReference ノードに配置されていません。つまり、このリーダーの実装ではエンティティを解決できません。<see cref="P:System.Xml.XmlReader.CanResolveEntity" /> は false を返します。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Settings">
      <summary>この <see cref="T:System.Xml.XmlReader" /> インスタンスの作成に使用された <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトを取得します。</summary>
      <returns>このリーダーのインスタンスを作成するために使用した <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト。このリーダーが <see cref="Overload:System.Xml.XmlReader.Create" /> メソッドを使用して作成されなかった場合、このプロパティは null を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Skip">
      <summary>現在のノードの子をスキップします。</summary>
    </member>
    <member name="M:System.Xml.XmlReader.SkipAsync">
      <summary>現在のノードの子を非同期でスキップします。</summary>
      <returns>現在のノード。</returns>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlReaderSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Value">
      <summary>派生クラスでオーバーライドされると、現在のノードのテキスト値を取得します。</summary>
      <returns>返される値は、ノードの <see cref="P:System.Xml.XmlReader.NodeType" /> によって異なります。返す値を持つノード型の一覧を次の表に示します。その他のすべてのノード型は、String.Empty を返します。ノード型値属性属性の値。CDATACDATA セクションの内容。コメントコメントの内容。DocumentType内部サブセット。ProcessingInstructionターゲットを含まない、全体の内容。SignificantWhitespace混合コンテンツ モデル内のマークアップ間の空白。テキストテキスト ノードの内容。Whitespaceマークアップ間の空白。XmlDeclaration宣言の内容。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.ValueType">
      <summary>現在のノードの共通言語ランタイム (CLR) の型を取得します。</summary>
      <returns>ノードの型指定された値に対応する CLR 型。既定は System.String です。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.XmlLang">
      <summary>派生クラスでオーバーライドされると、現在の xml:lang スコープを取得します。</summary>
      <returns>現在の xml:lang スコープ。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.XmlSpace">
      <summary>派生クラスでオーバーライドされると、現在の xml:space スコープを取得します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 値の 1 つ。xml:space スコープが存在しない場合は、このプロパティは既定で XmlSpace.None になります。</returns>
    </member>
    <member name="T:System.Xml.XmlReaderSettings">
      <summary>
        <see cref="Overload:System.Xml.XmlReader.Create" /> メソッドで作成された <see cref="T:System.Xml.XmlReader" /> オブジェクトでサポートされる機能セットを指定します。</summary>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlReaderSettings" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.#ctor(System.Xml.XmlResolver)">
      <summary>
        <see cref="T:System.Xml.XmlResolver" /> オブジェクトを使用して、<see cref="T:System.Xml.XmlReaderSettings" /> クラスの新規インスタンスを初期化します。</summary>
      <param name="resolver">外部ドキュメントを解決するために使用する <see cref="T:System.Xml.XmlResolver" /> オブジェクト。</param>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.Async">
      <summary>非同期の <see cref="T:System.Xml.XmlReader" /> メソッドを特定の <see cref="T:System.Xml.XmlReader" /> インスタンスで使用できるかどうかを取得または設定します。</summary>
      <returns>非同期メソッドを使用できる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CheckCharacters">
      <summary>文字のチェックを行うかどうかを示す値を取得または設定します。</summary>
      <returns>文字をチェックする場合は true。それ以外の場合は false。既定値は true です。Note:<see cref="T:System.Xml.XmlReader" /> がテキスト データの処理を行う場合は、プロパティの設定に関係なく、XML 名とテキストの内容が有効であることを常にチェックします。<see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" /> を false に設定すると、文字エンティティ参照の文字チェックがオフになります。</returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Clone">
      <summary>
        <see cref="T:System.Xml.XmlReaderSettings" /> インスタンスのコピーを作成します。</summary>
      <returns>複製された <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CloseInput">
      <summary>リーダーを閉じるときに、基になるストリームまたは <see cref="T:System.IO.TextReader" /> を閉じるかどうかを示す値を取得または設定します。</summary>
      <returns>リーダーを閉じるときに、基になるストリームまたは <see cref="T:System.IO.TextReader" /> を閉じる場合は true、それ以外の場合は false。既定値は false です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ConformanceLevel">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> が従う準拠のレベルを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.ConformanceLevel" /> 値の 1 つ。既定値は ConformanceLevel.Document です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.DtdProcessing">
      <summary>
        <see cref="T:System.Xml.DtdProcessing" /> 列挙体を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.DtdProcessing" /> 列挙体。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreComments">
      <summary>コメントを無視するかどうかを示す値を取得または設定します。</summary>
      <returns>コメントを無視する場合は true、それ以外の場合は false。既定値は false です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions">
      <summary>処理命令を無視するかどうかを示す値を取得または設定します。</summary>
      <returns>処理命令を無視する場合は true、それ以外の場合は false。既定値は false です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreWhitespace">
      <summary>意味のない空白を無視するかどうかを示す値を取得または設定します。</summary>
      <returns>空白を無視する場合は true、それ以外の場合は false。既定値は false です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LineNumberOffset">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> オブジェクトの行番号オフセットを取得または設定します。</summary>
      <returns>行番号オフセット。既定値は 0 です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LinePositionOffset">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> オブジェクトの行位置オフセットを取得または設定します。</summary>
      <returns>行番号オフセット。既定値は 0 です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities">
      <summary>エンティティの展開時に許容されるドキュメント内の最大文字数を示す値を取得または設定します。</summary>
      <returns>エンティティの展開時に許容される最大文字数。既定値は 0 です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument">
      <summary>XML ドキュメントの最大文字数を示す値を取得または設定します。ゼロ (0) の値は、XML ドキュメントのサイズに制限がないことを示します。0 以外の値は、最大サイズを文字数で示します。</summary>
      <returns>XML ドキュメント内の最大文字数。既定値は 0 です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.NameTable">
      <summary>細分化された文字列の比較に使用する <see cref="T:System.Xml.XmlNameTable" /> を取得または設定します。</summary>
      <returns>この <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトを使用して作成されたすべての <see cref="T:System.Xml.XmlReader" /> インスタンスで使用する、最小単位に分割されたすべての文字列を格納する <see cref="T:System.Xml.XmlNameTable" />。既定値は null です。この値が null 値の場合は、作成された <see cref="T:System.Xml.XmlReader" /> インスタンスは、新規の空の <see cref="T:System.Xml.NameTable" /> を使用します。</returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Reset">
      <summary>設定クラスのメンバーを既定値にリセットします。</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.XmlResolver">
      <summary>外部ドキュメントにアクセスするために使用する <see cref="T:System.Xml.XmlResolver" /> を設定します。</summary>
      <returns>外部ドキュメントへのアクセスに使用する <see cref="T:System.Xml.XmlResolver" />。null に設定されている場合、<see cref="T:System.Xml.XmlReader" /> が外部リソースにアクセスしようとすると、<see cref="T:System.Xml.XmlException" /> がスローされます。</returns>
    </member>
    <member name="T:System.Xml.XmlResolver">
      <summary>Uniform Resource Identifier (URI) によって指定された外部 XML リソースを解決します。</summary>
    </member>
    <member name="M:System.Xml.XmlResolver.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlResolver" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>派生クラスでオーバーライドされると、実際のリソースが含まれたオブジェクトに URI をマップします。</summary>
      <returns>
        <see cref="T:System.IO.Stream" /> オブジェクト、または null 値 (ストリーム以外の型が指定された場合)。</returns>
      <param name="absoluteUri">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
      <param name="role">現在のバージョンでは、URI を解決するときにこのパラメーターを使用しません。これは将来拡張できるように提供されています。たとえば、このパラメーターを xlink:role に割り当てて、他のシナリオで実装固有の引数として使用できます。</param>
      <param name="ofObjectToReturn">返すオブジェクトの型。現在のバージョンだけが、<see cref="T:System.IO.Stream" /> オブジェクトを返します。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> は Stream 型ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> が null です。</exception>
      <exception cref="T:System.Exception">ランタイム エラー (サーバー接続の中断など) があります。</exception>
    </member>
    <member name="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)">
      <summary>派生クラスでオーバーライドされると、ベース URI および相対 URI から絶対 URI を解決します。</summary>
      <returns>絶対 URI を表す <see cref="T:System.Uri" />、または null 値 (相対 URI を解決できない場合)。</returns>
      <param name="baseUri">相対 URI を解決するために使用するベース URI。</param>
      <param name="relativeUri">解決対象の URI。URI は絶対 URI でも相対 URI でもかまいません。絶対 URI の場合、この値が <paramref name="baseUri" /> 値を効率的に置き換えます。相対 URI の場合、この値は <paramref name="baseUri" /> と結合して絶対 URI を作成します。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativeUri" /> が null 値です。</exception>
    </member>
    <member name="M:System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)">
      <summary>このメソッドは、リゾルバーが <see cref="T:System.IO.Stream" /> 以外の型を返す機能を追加します。</summary>
      <returns>型パラメーターが <see cref="T:System.IO.Stream" /> の場合は true、それ以外の場合は false。</returns>
      <param name="absoluteUri">URI。</param>
      <param name="type">返す型。</param>
    </member>
    <member name="T:System.Xml.XmlSpace">
      <summary>現在の xml:space スコープを示します。</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Default">
      <summary>xml:space スコープは default と同じです。</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.None">
      <summary>xml:space スコープはありません。</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Preserve">
      <summary>xml:space スコープは preserve と同じです。</summary>
    </member>
    <member name="T:System.Xml.XmlTokenizedType">
      <summary>文字列の XML 型を表します。これにより、文字列を CDATA セクション型などの特定の XML 型として読み取ることができます。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.CDATA">
      <summary>CDATA 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITIES">
      <summary>ENTITIES 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITY">
      <summary>ENTITY 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENUMERATION">
      <summary>ENUMERATION 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ID">
      <summary>ID 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREF">
      <summary>IDREF 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREFS">
      <summary>IDREFS 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NCName">
      <summary>NCName 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKEN">
      <summary>NMTOKEN 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKENS">
      <summary>NMTOKENS 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.None">
      <summary>型なし。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NOTATION">
      <summary>NOTATION 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.QName">
      <summary>QName 型。</summary>
    </member>
    <member name="T:System.Xml.XmlWriter">
      <summary>XML データが格納されたストリームまたはファイルを高速で、キャッシュされておらず前方向に生成する方法を提供するライターを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.Close">
      <summary>派生クラスでオーバーライドされると、このストリームと基になるストリームを閉じます。</summary>
      <exception cref="T:System.InvalidOperationException">Close が呼び出された後に、追加出力を書き込む呼び出しが行われたか、この呼び出しの結果が無効な XML ドキュメントです。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream)">
      <summary>指定されたストリームを使用して、新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <param name="output">書き込み先のストリーム。<see cref="T:System.Xml.XmlWriter" /> は、XML 1.0 テキスト構文を書き込み、指定されたストリームにそれを付加します。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)">
      <summary>ストリームおよび <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して、新規 <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <param name="output">書き込み先のストリーム。<see cref="T:System.Xml.XmlWriter" /> は、XML 1.0 テキスト構文を書き込み、指定されたストリームにそれを付加します。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。これが null である場合は、既定の設定で <see cref="T:System.Xml.XmlWriterSettings" /> が使用されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter)">
      <summary>指定された <see cref="T:System.Xml.XmlWriter" /> を使用して、新しい <see cref="T:System.IO.TextWriter" /> インスタンスを作成します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <param name="output">書き込み先の <see cref="T:System.IO.TextWriter" />。<see cref="T:System.Xml.XmlWriter" /> は、XML 1.0 テキスト構文を書き込み、指定された <see cref="T:System.IO.TextWriter" /> にそれを付加します。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> オブジェクトと <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して、新しい <see cref="T:System.IO.TextWriter" /> インスタンスを作成します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <param name="output">書き込み先の <see cref="T:System.IO.TextWriter" />。<see cref="T:System.Xml.XmlWriter" /> は、XML 1.0 テキスト構文を書き込み、指定された <see cref="T:System.IO.TextWriter" /> にそれを付加します。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。これが null である場合は、既定の設定で <see cref="T:System.Xml.XmlWriterSettings" /> が使用されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)">
      <summary>指定された <see cref="T:System.Text.StringBuilder" /> を使用して、新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <param name="output">書き込み先の <see cref="T:System.Text.StringBuilder" />。<see cref="T:System.Xml.XmlWriter" /> で書き込まれた内容が <see cref="T:System.Text.StringBuilder" /> に付加されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)">
      <summary>
        <see cref="T:System.Text.StringBuilder" /> オブジェクトと <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して、新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <param name="output">書き込み先の <see cref="T:System.Text.StringBuilder" />。<see cref="T:System.Xml.XmlWriter" /> で書き込まれた内容が <see cref="T:System.Text.StringBuilder" /> に付加されます。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。これが null である場合は、既定の設定で <see cref="T:System.Xml.XmlWriterSettings" /> が使用されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)">
      <summary>指定された <see cref="T:System.Xml.XmlWriter" /> オブジェクトを使用して、新規 <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <returns>指定された <see cref="T:System.Xml.XmlWriter" /> オブジェクトをラップする <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <param name="output">基になるライターとして使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)">
      <summary>指定された <see cref="T:System.Xml.XmlWriter" /> オブジェクトと <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して、新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <returns>指定された <see cref="T:System.Xml.XmlWriter" /> オブジェクトをラップする <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
      <param name="output">基になるライターとして使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。これが null である場合は、既定の設定で <see cref="T:System.Xml.XmlWriterSettings" /> が使用されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 値が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="M:System.Xml.XmlWriter.Flush">
      <summary>派生クラスでオーバーライドされると、バッファー内のデータをすべて基になるストリームにフラッシュし、基になるストリームもフラッシュします。</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.FlushAsync">
      <summary>バッファー内のデータをすべて基になるストリームに非同期でフラッシュし、基になるストリームもフラッシュします。</summary>
      <returns>非同期の Flush 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.LookupPrefix(System.String)">
      <summary>派生クラスでオーバーライドされると、名前空間 URI の現在の名前空間スコープで定義された最も近いプレフィックスを返します。</summary>
      <returns>一致するプレフィックス、または null 値 (一致する名前空間 URI が現在のスコープ内で見つからない場合)。</returns>
      <param name="ns">プレフィックスを検索する名前空間 URI。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns" /> が null または String.Empty です。</exception>
    </member>
    <member name="P:System.Xml.XmlWriter.Settings">
      <summary>この <see cref="T:System.Xml.XmlWriter" /> インスタンスの作成に使用された <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを取得します。</summary>
      <returns>このライターのインスタンスを作成するために使用した <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。このライターが <see cref="Overload:System.Xml.XmlWriter.Create" /> メソッドを使用して作成されなかった場合、このプロパティは null を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Xml.XmlReader" /> 内の現在の位置で見つかったすべての属性を書き込みます。</summary>
      <param name="reader">属性のコピー元の XmlReader。</param>
      <param name="defattr">XmlReader から既定の属性をコピーする場合は true。それ以外の場合は false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> が null です。</exception>
      <exception cref="T:System.Xml.XmlException">リーダーは element、attribute、XmlDeclaration ノードのいずれにも位置していません。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> の現在の位置で見つかったすべての属性を非同期で書き込みます。</summary>
      <returns>非同期の WriteAttributes 操作を表すタスク。</returns>
      <param name="reader">属性のコピー元の XmlReader。</param>
      <param name="defattr">XmlReader から既定の属性をコピーする場合は true。それ以外場合は false。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定したローカル名と値の属性を書き込みます。</summary>
      <param name="localName">属性のローカル名。</param>
      <param name="value">属性の値。</param>
      <exception cref="T:System.InvalidOperationException">ライターの状態が WriteState.Element でないか、またはライターが閉じています。</exception>
      <exception cref="T:System.ArgumentException">xml:space または xml:lang 属性値が無効です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定したローカル名、名前空間 URI、および値の属性を書き込みます。</summary>
      <param name="localName">属性のローカル名。</param>
      <param name="ns">属性に関連付ける名前空間 URI。</param>
      <param name="value">属性の値。</param>
      <exception cref="T:System.InvalidOperationException">ライターの状態が WriteState.Element でないか、またはライターが閉じています。</exception>
      <exception cref="T:System.ArgumentException">xml:space または xml:lang 属性値が無効です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定したプレフィックス、ローカル名、名前空間 URI、および値の属性を書き込みます。</summary>
      <param name="prefix">属性の名前空間プレフィックス。</param>
      <param name="localName">属性のローカル名。</param>
      <param name="ns">属性の名前空間 URI。</param>
      <param name="value">属性の値。</param>
      <exception cref="T:System.InvalidOperationException">ライターの状態が WriteState.Element でないか、またはライターが閉じています。</exception>
      <exception cref="T:System.ArgumentException">xml:space または xml:lang 属性値が無効です。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="localName" /> または <paramref name="ns" /> が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)">
      <summary>指定されたプレフィックス、ローカル名、名前空間 URI、および値を持つ属性を非同期で書き込みます。</summary>
      <returns>非同期の WriteAttributeString 操作を表すタスク。</returns>
      <param name="prefix">属性の名前空間プレフィックス。</param>
      <param name="localName">属性のローカル名。</param>
      <param name="ns">属性の名前空間 URI。</param>
      <param name="value">属性の値。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>派生クラスでオーバーライドされると、指定したバイナリ バイトを Base64 としてエンコードし、その結果生成されるテキストを書き込みます。</summary>
      <param name="buffer">エンコードするバイト配列。</param>
      <param name="index">書き込むバイトの開始を示すバッファー内の位置。</param>
      <param name="count">書き込むバイト数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。またはバッファー長から <paramref name="index" /> を差し引いた値が <paramref name="count" /> より小さい値です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary>指定したバイナリ バイトを Base64 としてエンコードし、その結果生成されるテキストを非同期で書き込みます。</summary>
      <returns>非同期の WriteBase64 操作を表すタスク。</returns>
      <param name="buffer">エンコードするバイト配列。</param>
      <param name="index">書き込むバイトの開始を示すバッファー内の位置。</param>
      <param name="count">書き込むバイト数。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>派生クラスでオーバーライドされると、指定されたバイナリ バイトを BinHex としてエンコードして、結果のテキストを書き込みます。</summary>
      <param name="buffer">エンコードするバイト配列。</param>
      <param name="index">書き込むバイトの開始を示すバッファー内の位置。</param>
      <param name="count">書き込むバイト数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">ライターが閉じているか、エラー状態です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。またはバッファー長から <paramref name="index" /> を差し引いた値が <paramref name="count" /> より小さい値です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>指定したバイナリ バイトを BinHex としてエンコードし、その結果生成されるテキストを非同期で書き込みます。</summary>
      <returns>非同期の WriteBinHex 操作を表すタスク。</returns>
      <param name="buffer">エンコードするバイト配列。</param>
      <param name="index">書き込むバイトの開始を示すバッファー内の位置。</param>
      <param name="count">書き込むバイト数。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCData(System.String)">
      <summary>派生クラスでオーバーライドされると、指定したテキストを含む &lt;![CDATA[...]]&gt; ブロックを書き込みます。</summary>
      <param name="text">CDATA ブロック内に配置するテキスト。</param>
      <exception cref="T:System.ArgumentException">テキストは、非整形式の XML ドキュメントになります。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCDataAsync(System.String)">
      <summary>指定したテキストを格納する &lt;![CDATA[...]]&gt; ブロックを非同期で書き込みます。</summary>
      <returns>非同期の WriteCData 操作を表すタスク。</returns>
      <param name="text">CDATA ブロック内に配置するテキスト。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)">
      <summary>派生クラスでオーバーライドされると、指定した Unicode 文字値の文字エンティティを強制的に生成します。</summary>
      <param name="ch">文字エンティティを生成する Unicode 文字。</param>
      <exception cref="T:System.ArgumentException">文字が、サロゲート ペアの文字範囲 (0xd800 から 0xdfff) 内にあります。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)">
      <summary>指定した Unicode 文字値の文字エンティティを非同期で強制的に生成します。</summary>
      <returns>非同期の WriteCharEntity 操作を表すタスク。</returns>
      <param name="ch">文字エンティティを生成する Unicode 文字。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>派生クラスでオーバーライドされると、一度に 1 つのバッファーにテキストを書き込みます。</summary>
      <param name="buffer">書き込むテキストが含まれている文字配列。</param>
      <param name="index">書き込むテキストの開始を示すバッファー内の位置。</param>
      <param name="count">書き込む文字数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。またはバッファー長から <paramref name="index" /> を差し引いた値が <paramref name="count" /> 未満です。この呼び出しにより、サロゲート ペア文字が分割されるか、無効なサロゲート ペアが書き込まれます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> パラメーターの値が有効ではありません。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> が、<paramref name="buffer" /> の範囲外です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)">
      <summary>一度に 1 つのバッファーにテキストを非同期で書き込みます。</summary>
      <returns>非同期の WriteChars 操作を表すタスク。</returns>
      <param name="buffer">書き込むテキストを格納している文字配列。</param>
      <param name="index">書き込むテキストの開始を示すバッファー内の位置。</param>
      <param name="count">書き込む文字数。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteComment(System.String)">
      <summary>派生クラスでオーバーライドされると、指定したテキストを格納している &lt;!--...--&gt; コメントを書き込みます。</summary>
      <param name="text">コメント内に配置するテキスト。</param>
      <exception cref="T:System.ArgumentException">テキストは、非整形式の XML ドキュメントになります。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCommentAsync(System.String)">
      <summary>指定したテキストを格納するコメント &lt;!--...--&gt; を非同期で書き込みます。</summary>
      <returns>非同期の WriteComment 操作を表すタスク。</returns>
      <param name="text">コメント内に配置するテキスト。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定した名前とオプションの属性を含む DOCTYPE 宣言を書き込みます。</summary>
      <param name="name">DOCTYPE の名前。これを空にすることはできません。</param>
      <param name="pubid">非 null 値の場合、PUBLIC "pubid" "sysid" も書き込みます (ここで、<paramref name="pubid" /> および <paramref name="sysid" /> は、指定引数の値で置換されます)。</param>
      <param name="sysid">
        <paramref name="pubid" /> が null 値で <paramref name="sysid" /> が非 null 値の場合は、SYSTEM "sysid" を書き込みます (ここで、<paramref name="sysid" /> はこの引数の値で置換されます)。</param>
      <param name="subset">非 null 値の場合は、[subset] を書き込みます (ここで、subset はこの引数の値で置換されます)。</param>
      <exception cref="T:System.InvalidOperationException">このメソッドが、プロローグの外 (ルート要素の後) で呼び出されました。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> の値が、無効な XML になることがあります。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> が無効です。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name=" name" />、<paramref name=" pubid" />、<paramref name=" sysid" />、または <paramref name="subset" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)">
      <summary>名前とオプション属性を指定して、DOCTYPE 宣言を非同期で書き込みます。</summary>
      <returns>非同期の WriteDocType 操作を表すタスク。</returns>
      <param name="name">DOCTYPE の名前。これを空にすることはできません。</param>
      <param name="pubid">null でない場合は、PUBLIC "pubid" "sysid" も書き込みます。<paramref name="pubid" /> と <paramref name="sysid" /> は、指定した引数の値に置き換えられます。</param>
      <param name="sysid">
        <paramref name="pubid" /> が null で <paramref name="sysid" /> が null でない場合は、SYSTEM "sysid" を書き込みます。<paramref name="sysid" /> は、この引数の値に置き換えられます。</param>
      <param name="subset">null でない場合は、[subset] を書き込みます。subset は、この引数の値に置き換えられます。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定されたローカル名および値を持つ要素を書き込みます。</summary>
      <param name="localName">要素のローカル名。</param>
      <param name="value">要素の値。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 値が null または空の文字列です。またはパラメーターの値が有効ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定されたローカル名、名前空間 URI、および値を持つ要素を書き込みます。</summary>
      <param name="localName">要素のローカル名。</param>
      <param name="ns">要素に関連付ける名前空間 URI。</param>
      <param name="value">要素の値。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 値が null または空の文字列です。またはパラメーターの値が有効ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)">
      <summary>指定されたローカル名、名前空間 URI、および値を使用して要素を書き込みます。</summary>
      <param name="prefix">要素のプレフィックス。</param>
      <param name="localName">要素のローカル名。</param>
      <param name="ns">要素の名前空間 URI。</param>
      <param name="value">要素の値。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 値が null または空の文字列です。またはパラメーターの値が有効ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)">
      <summary>指定されたローカル名、名前空間 URI、および値を持つ要素を非同期で書き込みます。</summary>
      <returns>非同期の WriteElementString 操作を表すタスク。</returns>
      <param name="prefix">要素のプレフィックス。</param>
      <param name="localName">要素のローカル名。</param>
      <param name="ns">要素の名前空間 URI。</param>
      <param name="value">要素の値。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttribute">
      <summary>派生クラスでオーバーライドされると、前の <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 呼び出しを閉じます。</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttributeAsync">
      <summary>前の <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 呼び出しを非同期で閉じます。</summary>
      <returns>非同期の WriteEndAttribute 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocument">
      <summary>派生クラスでオーバーライドされると、開いている任意の要素または属性を閉じ、ライターを Start 状態に戻します。</summary>
      <exception cref="T:System.ArgumentException">XML ドキュメントが無効です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocumentAsync">
      <summary>開いている要素または属性を非同期で閉じ、ライターを Start 状態に戻します。</summary>
      <returns>非同期の WriteEndDocument 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElement">
      <summary>派生クラスでオーバーライドされると、1 つの要素を閉じ、対応する名前空間スコープをポップします。</summary>
      <exception cref="T:System.InvalidOperationException">これは無効な XML ドキュメントになります。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElementAsync">
      <summary>非同期的に 1 つの要素を閉じ、対応する名前空間スコープをポップします。</summary>
      <returns>非同期の WriteEndElement 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRef(System.String)">
      <summary>派生クラスでオーバーライドされると、エンティティ参照を &amp;name; として書き込みます。</summary>
      <param name="name">エンティティ参照の名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> が null であるか、または String.Empty です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRefAsync(System.String)">
      <summary>エンティティ参照を &amp;name; として非同期で書き込みます。</summary>
      <returns>非同期の WriteEntityRef 操作を表すタスク。</returns>
      <param name="name">エンティティ参照の名前。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElement">
      <summary>派生クラスでオーバーライドされると、1 つの要素を閉じ、対応する名前空間スコープをポップします。</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElementAsync">
      <summary>非同期的に 1 つの要素を閉じ、対応する名前空間スコープをポップします。</summary>
      <returns>非同期の WriteFullEndElement 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteName(System.String)">
      <summary>派生クラスでオーバーライドされると、指定した名前を書き込み、その名前が W3C 勧告『XML 1.0』 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) に準拠した有効な名前であるようにします。</summary>
      <param name="name">書き込む名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> が無効な XML 名であるか、<paramref name="name" /> が null 値または String.Empty です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNameAsync(System.String)">
      <summary>指定した名前が W3C 勧告『XML 1.0』 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) に準拠した有効な名前であることを確認して、それを非同期で書き込みます。</summary>
      <returns>非同期の WriteName 操作を表すタスク。</returns>
      <param name="name">書き込む名前。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmToken(System.String)">
      <summary>派生クラスでオーバーライドされると、指定した名前を書き込み、その名前が W3C 勧告『XML 1.0』 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) に準拠した有効な NmToken であるようにします。</summary>
      <param name="name">書き込む名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> が無効な NmTokenであるか、<paramref name="name" /> が null 値または String.Empty です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmTokenAsync(System.String)">
      <summary>指定した名前が W3C 勧告『XML 1.0』 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) に準拠した有効な NmToken であることを確認して、それを非同期で書き込みます。</summary>
      <returns>非同期の WriteNmToken 操作を表すタスク。</returns>
      <param name="name">書き込む名前。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
      <summary>派生クラスでオーバーライドされると、リーダーのデータをすべてライターにコピーし、リーダーを次の兄弟の開始位置に移動します。</summary>
      <param name="reader">読み取り元の <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="defattr">XmlReader から既定の属性をコピーする場合は true。それ以外の場合は false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> に無効な文字が含まれています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)">
      <summary>リーダーのデータをすべてライターに非同期でコピーし、リーダーを次の兄弟の開始位置に移動します。</summary>
      <returns>非同期の WriteNode 操作を表すタスク。</returns>
      <param name="reader">読み取り元の <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="defattr">XmlReader から既定の属性をコピーする場合は true。それ以外場合は false。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、次のように名前とテキストの間に空白を含んだ処理命令を書き込みます。&lt;?name text?&gt; のように、name と text の間に空白を入れた処理命令を書き込みます。</summary>
      <param name="name">処理命令の名前。</param>
      <param name="text">処理命令に含めるテキスト。</param>
      <exception cref="T:System.ArgumentException">テキストは、非整形式の XML ドキュメントになります。<paramref name="name" /> が null または String.Empty です。このメソッドは、<see cref="M:System.Xml.XmlWriter.WriteStartDocument" /> が呼び出された後に XML 宣言を作成するために使用されています。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)">
      <summary>非同期で、次のように名前とテキストの間に空白を含んだ処理命令を書き込みます。&lt;?name text?&gt;。</summary>
      <returns>非同期の WriteProcessingInstruction 操作を表すタスク。</returns>
      <param name="name">処理命令の名前。</param>
      <param name="text">処理命令に含めるテキスト。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、名前空間の修飾名を書き込みます。このメソッドは、指定した名前空間のスコープ内にあるプレフィックスを検索します。</summary>
      <param name="localName">書き込むローカル名。</param>
      <param name="ns">名前の名前空間 URI。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> が String.Empty か無効な名前です。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="localName" /> または <paramref name="ns" /> が null です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)">
      <summary>名前空間の修飾名を非同期で書き込みます。このメソッドは、指定した名前空間のスコープ内にあるプレフィックスを検索します。</summary>
      <returns>非同期の WriteQualifiedName 操作を表すタスク。</returns>
      <param name="localName">書き込むローカル名。</param>
      <param name="ns">名前の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>派生クラスでオーバーライドされると、手動で文字バッファーから生のマークアップを書き込みます。</summary>
      <param name="buffer">書き込むテキストが含まれている文字配列。</param>
      <param name="index">書き込むテキストの開始を示すバッファー内の位置。</param>
      <param name="count">書き込む文字数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。またはバッファー長から <paramref name="index" /> を差し引いた値が <paramref name="count" /> より小さい値です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.String)">
      <summary>派生クラスでオーバーライドされると、手動で文字列から生のマークアップを書き込みます。</summary>
      <param name="data">書き込むテキストを格納している文字列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="data" /> が null または String.Empty です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)">
      <summary>文字バッファーから手動で生のマークアップを非同期で書き込みます。</summary>
      <returns>非同期 WriteRaw 操作を表すタスク。</returns>
      <param name="buffer">書き込むテキストを格納している文字配列。</param>
      <param name="index">書き込むテキストの開始を示すバッファー内の位置。</param>
      <param name="count">書き込む文字数。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRawAsync(System.String)">
      <summary>文字列から手動で生のマークアップを非同期で書き込みます。</summary>
      <returns>非同期 WriteRaw 操作を表すタスク。</returns>
      <param name="data">書き込むテキストを格納している文字列。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String)">
      <summary>指定されたローカル名を使用して属性の開始を書き込みます。</summary>
      <param name="localName">属性のローカル名。</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)">
      <summary>指定されたローカル名および名前空間 URI を使用して、属性の開始を書き込みます。</summary>
      <param name="localName">属性のローカル名。</param>
      <param name="ns">属性の名前空間 URI。</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定されたプレフィックス、ローカル名、および名前空間 URI を持つ属性の開始を書き込みます。</summary>
      <param name="prefix">属性の名前空間プレフィックス。</param>
      <param name="localName">属性のローカル名。</param>
      <param name="ns">属性の名前空間 URI。</param>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)">
      <summary>指定されたプレフィックス、ローカル名、名前空間 URI で属性の開始要素を非同期で書き込みます。</summary>
      <returns>非同期の WriteStartAttribute 操作を表すタスク。</returns>
      <param name="prefix">属性の名前空間プレフィックス。</param>
      <param name="localName">属性のローカル名。</param>
      <param name="ns">属性の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument">
      <summary>派生クラスでオーバーライドされると、バージョン "1.0" の XML 宣言を書き込みます。</summary>
      <exception cref="T:System.InvalidOperationException">これは、コンストラクターの後に呼び出された最初の書き込みメソッドではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)">
      <summary>派生クラスでオーバーライドされると、バージョン "1.0" の XML 宣言とスタンドアロン属性を書き込みます。</summary>
      <param name="standalone">true の場合は "standalone=yes" を書き込み、false の場合は "standalone=no" を書き込みます。</param>
      <exception cref="T:System.InvalidOperationException">これは、コンストラクターの後に呼び出された最初の書き込みメソッドではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocumentAsync">
      <summary>バージョン "1.0" で XML 宣言を非同期で書き込みます。</summary>
      <returns>非同期 WriteStartDocument 操作を表すタスク。</returns>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)">
      <summary>バージョン "1.0" とスタントアロン属性を使用して XML 宣言を非同期で書き込みます。</summary>
      <returns>非同期 WriteStartDocument 操作を表すタスク。</returns>
      <param name="standalone">true の場合は "standalone=yes" を書き込み、false の場合は "standalone=no" を書き込みます。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String)">
      <summary>派生クラスでオーバーライドされると、指定したローカル名の開始タグを書き込みます。</summary>
      <param name="localName">要素のローカル名。</param>
      <exception cref="T:System.InvalidOperationException">ライターが閉じられました。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定した開始タグを書き込み、指定した名前空間に関連付けます。</summary>
      <param name="localName">要素のローカル名。</param>
      <param name="ns">要素に関連付ける名前空間 URI。この名前空間が既にスコープ内にあり、関連付けられたプレフィックスを持つ場合、ライターは、そのプレフィックスも自動的に書き込みます。</param>
      <exception cref="T:System.InvalidOperationException">ライターが閉じられました。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定した開始タグを書き込み、指定した名前空間とプレフィックスに関連付けます。</summary>
      <param name="prefix">要素の名前空間プレフィックス。</param>
      <param name="localName">要素のローカル名。</param>
      <param name="ns">要素に関連付ける名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">ライターが閉じられました。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)">
      <summary>指定した開始タグを非同期で書き込み、指定した名前空間とプレフィックスに関連付けます。</summary>
      <returns>非同期の WriteStartElement 操作を表すタスク。</returns>
      <param name="prefix">要素の名前空間プレフィックス。</param>
      <param name="localName">要素のローカル名。</param>
      <param name="ns">要素に関連付ける名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlWriter.WriteState">
      <summary>派生クラスでオーバーライドされると、ライターの状態を取得します。</summary>
      <returns>
        <see cref="T:System.Xml.WriteState" /> 値の 1 つ。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteString(System.String)">
      <summary>派生クラスでオーバーライドされると、指定したテキスト内容を書き込みます。</summary>
      <param name="text">書き込むテキスト。</param>
      <exception cref="T:System.ArgumentException">テキスト文字列に、無効なサロゲート ペアが含まれています。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStringAsync(System.String)">
      <summary>指定したテキストの内容を非同期で書き込みます。</summary>
      <returns>非同期の WriteString 操作を表すタスク。</returns>
      <param name="text">書き込むテキスト。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>派生クラスでオーバーライドされると、サロゲート文字ペアのサロゲート文字エンティティを生成し、書き込みます。</summary>
      <param name="lowChar">下位サロゲート。この値は、0xDC00 から 0xDFFF の範囲内にある必要があります。</param>
      <param name="highChar">上位サロゲート。この値は、0xD800 から 0xDBFF の範囲内にある必要があります。</param>
      <exception cref="T:System.ArgumentException">無効なサロゲート文字ペアが渡されました。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)">
      <summary>サロゲート文字ペアのサロゲート文字エンティティを非同期で生成し、書き込みます。</summary>
      <returns>非同期の WriteSurrogateCharEntity 操作を表すタスク。</returns>
      <param name="lowChar">下位サロゲート。この値は、0xDC00 から 0xDFFF の範囲内にある必要があります。</param>
      <param name="highChar">上位サロゲート。この値は、0xD800 から 0xDBFF の範囲内にある必要があります。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Boolean)">
      <summary>
        <see cref="T:System.Boolean" /> 値を書き込みます。</summary>
      <param name="value">書き込む <see cref="T:System.Boolean" /> 値。</param>
      <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> 値を書き込みます。</summary>
      <param name="value">書き込む <see cref="T:System.DateTime" /> 値。</param>
      <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)">
      <summary>
        <see cref="T:System.DateTimeOffset" /> 値を書き込みます。</summary>
      <param name="value">書き込む <see cref="T:System.DateTimeOffset" /> 値。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> 値を書き込みます。</summary>
      <param name="value">書き込む <see cref="T:System.Decimal" /> 値。</param>
      <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Double)">
      <summary>
        <see cref="T:System.Double" /> 値を書き込みます。</summary>
      <param name="value">書き込む <see cref="T:System.Double" /> 値。</param>
      <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int32)">
      <summary>
        <see cref="T:System.Int32" /> 値を書き込みます。</summary>
      <param name="value">書き込む <see cref="T:System.Int32" /> 値。</param>
      <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int64)">
      <summary>
        <see cref="T:System.Int64" /> 値を書き込みます。</summary>
      <param name="value">書き込む <see cref="T:System.Int64" /> 値。</param>
      <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Object)">
      <summary>オブジェクト値を書き込みます。</summary>
      <param name="value">書き込むオブジェクト値。メモ   .NET Framework 3.5 のリリースでは、このメソッドは <see cref="T:System.DateTimeOffset" /> をパラメーターとして受け入れます。</param>
      <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">ライターが閉じているか、エラー状態です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Single)">
      <summary>単精度浮動小数点数を書き込みます。</summary>
      <param name="value">書き込む単精度浮動小数点数。</param>
      <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.String)">
      <summary>
        <see cref="T:System.String" /> 値を書き込みます。</summary>
      <param name="value">書き込む <see cref="T:System.String" /> 値。</param>
      <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespace(System.String)">
      <summary>派生クラスでオーバーライドされると、指定した空白を書き込みます。</summary>
      <param name="ws">空白文字の文字列。</param>
      <exception cref="T:System.ArgumentException">文字列に、空白以外の文字が含まれています。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)">
      <summary>指定した空白を非同期で書き込みます。</summary>
      <returns>非同期の WriteWhitespace 操作を表すタスク。</returns>
      <param name="ws">空白文字の文字列。</param>
      <exception cref="T:System.InvalidOperationException">前の非同期操作が終了する前に <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。この場合、"非同期操作が既に実行中です" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを true に設定せずに <see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。この場合、"非同期メソッドを使用する場合は、XmlWriterSettings.Async を true に設定してください" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlLang">
      <summary>派生クラスでオーバーライドされると、現在の xml:lang スコープを取得します。</summary>
      <returns>現在の xml:lang スコープ。</returns>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlSpace">
      <summary>派生クラスでオーバーライドされると、現在の xml:space スコープを表す <see cref="T:System.Xml.XmlSpace" /> を取得します。</summary>
      <returns>現在の xml:space スコープを表す XmlSpace。値説明Nonexml:space スコープが存在しない場合は、これが既定値になります。Default現在のスコープは、xml:space="default" です。Preserve現在のスコープは、xml:space="preserve" です。</returns>
    </member>
    <member name="T:System.Xml.XmlWriterSettings">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> メソッドで作成された <see cref="Overload:System.Xml.XmlWriter.Create" /> オブジェクトでサポートされる機能セットを指定します。</summary>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlWriterSettings" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Async">
      <summary>非同期の <see cref="T:System.Xml.XmlWriter" /> メソッドを特定の <see cref="T:System.Xml.XmlWriter" /> インスタンスで使用できるかどうかを示す値を取得または設定します。</summary>
      <returns>非同期メソッドを使用できる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CheckCharacters">
      <summary>文字のチェックを行うかどうかを示す値を取得または設定します。</summary>
      <returns>文字をチェックする場合は true。それ以外の場合は false。既定値は true です。</returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Clone">
      <summary>
        <see cref="T:System.Xml.XmlWriterSettings" /> インスタンスのコピーを作成します。</summary>
      <returns>複製された <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CloseOutput">
      <summary>
        <see cref="M:System.Xml.XmlWriter.Close" /> メソッドの呼び出し時に <see cref="T:System.Xml.XmlWriter" /> が基になるストリームまたは <see cref="T:System.IO.TextWriter" /> も閉じるのかどうかを示す値を取得または設定します。</summary>
      <returns>基になるストリームまたは <see cref="T:System.IO.TextWriter" /> も閉じる場合は true、それ以外の場合は false。既定値は false です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.ConformanceLevel">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> が従う準拠のレベルを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.ConformanceLevel" /> 値の 1 つ。既定値は ConformanceLevel.Document です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Encoding">
      <summary>使用するテキスト エンコードを取得または設定します。</summary>
      <returns>使用するテキスト エンコーディング。既定値は Encoding.UTF8 です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Indent">
      <summary>要素にインデントを設定するかどうかを示す値を取得または設定します。</summary>
      <returns>改行してインデント付きで個別要素を書き込む場合は true、それ以外の場合は false。既定値は false です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.IndentChars">
      <summary>インデント処理を行うときに使用する文字列を取得または設定します。この設定は、<see cref="P:System.Xml.XmlWriterSettings.Indent" /> プロパティが true に設定されている場合に使用されます。</summary>
      <returns>インデント処理を行うときに使用する文字列。これには任意の文字列値を設定できます。ただし、有効な XML にするには、空白、タブ、復帰、行送りなどの有効な空白文字だけを指定する必要があります。既定値は 2 個の空白です。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> に割り当てられた値は null です。</exception>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NamespaceHandling">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> 内の重複した名前空間宣言を削除するかどうかを指定するために使用される <see cref="T:System.Xml.NamespaceHandling" /> 列挙を取得または設定します。重複した名前空間を削除するには、プレフィックスおよび名前空間が一致している必要があります。</summary>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> で重複する名前空間宣言を削除するかどうかを指定するための <see cref="T:System.Xml.NamespaceHandling" /> 列挙体。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineChars">
      <summary>改行に使用する文字列を取得または設定します。</summary>
      <returns>改行に使用する文字列。これには任意の文字列値を設定できます。ただし、有効な XML にするには、空白、タブ、復帰、行送りなどの有効な空白文字だけを指定する必要があります。既定値は、\r\n (復帰、改行) です。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> に割り当てられた値は null です。</exception>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineHandling">
      <summary>出力内の改行を正規化するかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.NewLineHandling" /> 値の 1 つ。既定値は <see cref="F:System.Xml.NewLineHandling.Replace" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineOnAttributes">
      <summary>新しい行に属性を書き込むかどうかを示す値を取得または設定します。</summary>
      <returns>個別行に属性を書き込む場合は true、それ以外の場合は false。既定値は false です。Note:<see cref="P:System.Xml.XmlWriterSettings.Indent" /> プロパティ値が false の場合、この設定は無効です。<see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> を true に設定すると、各属性は、新しい行にインデントを 1 レベル増やして記述されます。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration">
      <summary>XML 宣言を書き込むかどうかを示す値を取得または設定します。</summary>
      <returns>XML 宣言を省略する場合は true、それ以外の場合は false。既定値は false であり、XML 宣言は書き込まれます。</returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Reset">
      <summary>設定クラスのメンバーを既定値にリセットします。</summary>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose">
      <summary>
        <see cref="M:System.Xml.XmlWriter.Close" /> メソッドが呼び出されると、<see cref="T:System.Xml.XmlWriter" /> ですべての終了されていない要素タグに終了タグを追加するかどうかを示す値を取得または設定します。</summary>
      <returns>すべての終了されていない要素タグを終了する場合は true、それ以外の場合は false。既定値は true です。</returns>
    </member>
    <member name="T:System.Xml.XmlXapResolver">
      <summary>
        <see cref="T:System.Xml.XmlXapResolver" /> 型は、Windows Phone アプリケーションの XAP パッケージのリソースを解決するために使用されます。</summary>
    </member>
    <member name="M:System.Xml.XmlXapResolver.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlXapResolver" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlXapResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>実際のリソースを格納しているオブジェクトに URI をマップします。</summary>
      <returns>System.IO.Stream オブジェクト。ストリームが見つからない場合は、例外がスローされます。</returns>
      <param name="absoluteUri">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
      <param name="role">.NET Framework for Windows Phone の現在のバージョンでは、URI を解決するときにこのパラメーターは使用しません。これは将来拡張できるように提供されています。たとえば、このパラメーターを xlink:role に割り当てて、他のシナリオで実装固有の引数として使用できます。</param>
      <param name="ofObjectToReturn">返すオブジェクトの型。現在のバージョンでは、System.IO.Stream オブジェクトだけを返します。</param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchema">
      <summary>このクラスは、インターフェイスの互換性のために用意されています。これは、Windows Phone コードから使用するためのものではありません。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaForm">
      <summary>属性または要素を、名前空間プレフィックスで修飾する必要があるかどうかを示します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.None">
      <summary>スキーマには、要素および属性の形式が指定されません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Qualified">
      <summary>要素および属性は、名前空間プレフィックスで修飾する必要があります。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Unqualified">
      <summary>要素および属性は、名前空間プレフィックスで修飾する必要はありません。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObject">
      <summary>このクラスは、インターフェイスの互換性のために用意されています。これは、Windows Phone コードから使用するためのものではありません。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObject.#ctor">
      <summary>このクラスは、インターフェイスの互換性のために用意されています。これは、Windows Phone コードから使用するためのものではありません。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSet">
      <summary>このクラスは、インターフェイスの互換性のために用意されています。これは、Windows Phone コードから使用するためのものではありません。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSeverityType">
      <summary>検証イベントの重大度レベルを表します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Error">
      <summary>インスタンス ドキュメントの検証時に検証エラーが発生したことを示します。これは、文書型定義 (DTD: Document Type Definition) スキーマおよび XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマに適用されます。W3C (World Wide Web Consortium) 検証制約は、エラーと見なされます。検証イベント ハンドラーが作成されていない場合、エラーは例外をスローします。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Warning">
      <summary>エラー以外の検証イベントが発生したことを示します。警告は通常、特定の要素または属性を検証するための DTD および XML スキーマがない場合に発行されます。エラーとは異なり、検証イベント ハンドラーがない場合、警告は例外をスローしません。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlTypeCode">
      <summary>W3C XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマ型を表します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyAtomicType">
      <summary>共用体を構成する任意の原子値です。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyUri">
      <summary>W3C XML スキーマ xs:anyURI 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Attribute">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Base64Binary">
      <summary>W3C XML スキーマ xs:base64Binary 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Boolean">
      <summary>W3C XML スキーマ xs:boolean 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Byte">
      <summary>W3C XML スキーマ xs:byte 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Comment">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Date">
      <summary>W3C XML スキーマ xs:date 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DateTime">
      <summary>W3C XML スキーマ xs:dateTime 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DayTimeDuration">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Decimal">
      <summary>W3C XML スキーマ xs:decimal 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Document">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Double">
      <summary>W3C XML スキーマ xs:double 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Duration">
      <summary>W3C XML スキーマ xs:Duration 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Element">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Entity">
      <summary>W3C XML スキーマ xs:ENTITY 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Float">
      <summary>W3C XML スキーマ xs:float 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GDay">
      <summary>W3C XML スキーマ xs:gDay 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonth">
      <summary>W3C XML スキーマ xs:gMonth 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonthDay">
      <summary>W3C XML スキーマ xs:gMonthDay 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYear">
      <summary>W3C XML スキーマ xs:gYear 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYearMonth">
      <summary>W3C XML スキーマ xs:gYearMonth 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.HexBinary">
      <summary>W3C XML スキーマ xs:hexBinary 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Id">
      <summary>W3C XML スキーマ xs:ID 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Idref">
      <summary>W3C XML スキーマ xs:IDREF 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Int">
      <summary>W3C XML スキーマ xs:int 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Integer">
      <summary>W3C XML スキーマ xs:integer 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Item">
      <summary>ノードや原子値などの項目。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Language">
      <summary>W3C XML スキーマ xs:language 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Long">
      <summary>W3C XML スキーマ xs:long 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Name">
      <summary>W3C XML スキーマ xs:Name 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Namespace">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NCName">
      <summary>W3C XML スキーマ xs:NCName 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NegativeInteger">
      <summary>W3C XML スキーマ xs:negativeInteger 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NmToken">
      <summary>W3C XML スキーマ xs:NMTOKEN 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Node">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.None">
      <summary>型情報なし。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonNegativeInteger">
      <summary>W3C XML スキーマ xs:nonNegativeInteger 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonPositiveInteger">
      <summary>W3C XML スキーマ xs:nonPositiveInteger 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NormalizedString">
      <summary>W3C XML スキーマ xs:normalizedString 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Notation">
      <summary>W3C XML スキーマ xs:NOTATION 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.PositiveInteger">
      <summary>W3C XML スキーマ xs:positiveInteger 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.ProcessingInstruction">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.QName">
      <summary>W3C XML スキーマ xs:QName 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Short">
      <summary>W3C XML スキーマ xs:short 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.String">
      <summary>W3C XML スキーマ xs:string 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Text">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Time">
      <summary>W3C XML スキーマ xs:time 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Token">
      <summary>W3C XML スキーマ xs:token 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedByte">
      <summary>W3C XML スキーマ xs:unsignedByte 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedInt">
      <summary>W3C XML スキーマ xs:unsignedInt 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedLong">
      <summary>W3C XML スキーマ xs:unsignedLong 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedShort">
      <summary>W3C XML スキーマ xs:unsignedShort 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UntypedAtomic">
      <summary>型指定されていない原子値。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.YearMonthDuration">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="T:System.Xml.Serialization.IXmlSerializable">
      <summary>
        <see cref="T:System.Xml.XmlSerializer" /> によるオブジェクトのシリアル化または逆シリアル化の方法を制御するための、XML シリアル化および逆シリアル化のカスタム形式を提供します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
      <summary>このメソッドは予約されているため、使用できません。<see cref="T:System.Xml.Serialization.IXmlSerializable" /> インターフェイスの実装時に、このメソッドから null 参照 (Visual Basic では Nothing) を返す必要があります。</summary>
      <returns>
        <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml" /> メソッドによって生成され <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml" /> メソッドによって処理されるオブジェクトの XML 表現を記述する <see cref="T:System.Xml.Schema.XmlSchema" />。</returns>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
      <summary>オブジェクトの XML 表現からオブジェクトを生成します。</summary>
      <param name="reader">オブジェクトの逆シリアル元の <see cref="T:System.Xml.XmlReader" /> ストリーム。</param>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
      <summary>オブジェクトを XML 表現に変換します。</summary>
      <param name="writer">オブジェクトのシリアル化後の <see cref="T:System.Xml.XmlWriter" /> ストリーム。</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttribute">
      <summary>メンバー (<see cref="T:System.Xml.Linq.XElement" /> または <see cref="T:System.Xml.Linq.XNode" /> オブジェクトの配列を返すフィールド) に、シリアル化対象または逆シリアル化対象のオブジェクト内に対応するメンバーがない XML 要素を表すオブジェクトが含まれることを指定します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> クラスの新規インスタンスを初期化し、XML ドキュメントで生成される XML 要素名を指定します。</summary>
      <param name="name">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> によって生成される XML 要素の名前。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> クラスの新規インスタンスを初期化し、XML ドキュメントで生成される XML 要素名およびその XML 名前空間を指定します。</summary>
      <param name="name">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> によって生成される XML 要素の名前。</param>
      <param name="ns">XML 要素の XML 名前空間。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Name">
      <summary>XML 要素名を取得または設定します。</summary>
      <returns>XML 要素の名前。</returns>
      <exception cref="T:System.InvalidOperationException">配列メンバーの要素名が、<see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> プロパティに指定されている要素名と一致しません。</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace">
      <summary>XML ドキュメントに生成される XML 名前空間を取得または設定します。</summary>
      <returns>XML 名前空間。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Order">
      <summary>要素のシリアル化または逆シリアル化を行う明示的な順序を取得または設定します。</summary>
      <returns>コード生成の順序。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> セットが負です。</exception>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayAttribute">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が、XML 要素の配列として特定のクラス メンバーをシリアル化する必要があることを指定します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> クラスの新規インスタンスを初期化し、XML ドキュメント インスタンスで生成される XML 要素名を指定します。</summary>
      <param name="elementName">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> によって生成される XML 要素の名前。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.ElementName">
      <summary>シリアル化された配列に与えられた、XML 要素の名前を取得または設定します。</summary>
      <returns>シリアル化された配列の XML 要素名。既定値は、<see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> が代入されたメンバーの名前です。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Form">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> で生成される XML 要素名が修飾されるか非修飾かを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 値の 1 つ。既定値は XmlSchemaForm.None です。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.IsNullable">
      <summary>xsi:nil 属性が true に設定された空 XML 要素としてメンバーを <see cref="T:System.Xml.Serialization.XmlSerializer" /> がシリアル化する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> によって xsi:nil 属性が生成される場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Namespace">
      <summary>XML 要素の名前空間を取得または設定します。</summary>
      <returns>XML 要素の名前空間。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayAttribute.Order">
      <summary>要素のシリアル化または逆シリアル化を行う明示的な順序を取得または設定します。</summary>
      <returns>コード生成の順序。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> セットが負です。</exception>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayItemAttribute">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> がシリアル化配列に配置できる派生型を指定します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> クラスの新規インスタンスを初期化し、XML ドキュメントで生成される XML 要素の名前を指定します。</summary>
      <param name="elementName">XML 要素の名前。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String,System.Type)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> クラスの新規インスタンスを初期化し、XML ドキュメントで生成される XML 要素の名前、および生成される XML ドキュメントに挿入可能な <see cref="T:System.Type" /> を指定します。</summary>
      <param name="elementName">XML 要素の名前。</param>
      <param name="type">シリアル化するオブジェクトの <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> クラスの新規インスタンスを初期化し、シリアル化配列に挿入可能な <see cref="T:System.Type" /> を指定します。</summary>
      <param name="type">シリアル化するオブジェクトの <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.DataType">
      <summary>生成された XML 要素の XML データ型を取得または設定します。</summary>
      <returns>XML スキーマ定義 (XSD) データ型 (World Wide Web コンソーシアム (www.w3.org) のドキュメント『XML Schema Part 2: Datatypes』で定義)。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.ElementName">
      <summary>生成された XML 要素の名前を取得または設定します。</summary>
      <returns>生成された XML 要素の名前。既定値はメンバー識別子です。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Form">
      <summary>生成された XML 要素名が修飾されているかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 値の 1 つ。既定値は XmlSchemaForm.None です。</returns>
      <exception cref="T:System.Exception">
        <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Form" /> プロパティが XmlSchemaForm.Unqualified に設定され、<see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace" /> 値が指定されています。</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable">
      <summary>xsi:nil 属性が true に設定された空 XML タグとしてメンバーを <see cref="T:System.Xml.Serialization.XmlSerializer" /> がシリアル化する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が xsi:nil 属性を生成する場合は true。それ以外の場合は false (インスタンスは生成されません)。既定値は true です。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace">
      <summary>生成された XML 要素の名前空間を取得または設定します。</summary>
      <returns>生成された XML 要素の名前空間。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> が影響する XML 要素の階層内のレベルを取得または設定します。</summary>
      <returns>複数の配列内の 1 つの配列内のインデックスのセットの 0 から始まるインデックス番号。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttribute.Type">
      <summary>配列内で使用できる型を取得または設定します。</summary>
      <returns>配列で許可される <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeAttribute">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が XML 属性としてクラス メンバーをシリアル化する必要があることを指定します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> クラスの新規インスタンスを初期化し、生成される XML 属性の名前を指定します。</summary>
      <param name="attributeName">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が生成する XML 属性の名前。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String,System.Type)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="attributeName">生成される XML 属性の名前。</param>
      <param name="type">属性の格納に使用される <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">属性の格納に使用される <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName">
      <summary>XML 属性の名前を取得または設定します。</summary>
      <returns>XML 属性の名前。既定値は、メンバー名です。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.DataType">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> によって生成される XML 属性の XSD データ型を取得または設定します。</summary>
      <returns>XSD (XML スキーマ ドキュメント) データ型 (W3C (World Wide Web Consortium) (www.w3.org) のドキュメント『XML Schema Part 2: Datatypes』で定義)。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Form">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> で生成される XML 属性名が修飾されるかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 値の 1 つ。既定値は XmlForm.None です。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Namespace">
      <summary>XML 属性の XML 名前空間を取得または設定します。</summary>
      <returns>XML 属性の XML 名前空間。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Type">
      <summary>XML 属性の複合型を取得または設定します。</summary>
      <returns>XML 属性の型。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute">
      <summary>列挙体を使用して、メンバーを明確に検出できるようにすることを指定します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor(System.String)">
      <summary>選択項目を検出するために使用する列挙を返すメンバーの名前を指定する <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /> クラスの新規インスタンスを初期化します。</summary>
      <param name="name">選択項目を検出するために使用する列挙を返すメンバー名。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName">
      <summary>型を検出するときに使用される列挙体を返すフィールドの名前を取得または設定します。</summary>
      <returns>列挙体を返すフィールドの名前。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttribute">
      <summary>パブリック フィールドまたはプロパティが、含まれたオブジェクトを <see cref="T:System.Xml.Serialization.XmlSerializer" /> がシリアル化または逆シリアル化する際に XML 要素を表すことを示します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> クラスの新規インスタンスを初期化し、XML 要素の名前を指定します。</summary>
      <param name="elementName">シリアル化されたメンバーの XML 要素名。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> の新規インスタンスを初期化し、XML 要素の名前、および <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> が適用されるメンバーの派生型を指定します。このメンバー型が使用されるのは、その型を含むオブジェクトを <see cref="T:System.Xml.Serialization.XmlSerializer" /> がシリアル化する場合です。</summary>
      <param name="elementName">シリアル化されたメンバーの XML 要素名。</param>
      <param name="type">メンバーの型から派生したオブジェクトの <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> クラスの新規インスタンスを初期化し、<see cref="T:System.Xml.Serialization.XmlElementAttribute" /> が適用されるメンバーの型を指定します。この型が使用されるのは、その型を含むオブジェクトを <see cref="T:System.Xml.Serialization.XmlSerializer" /> がシリアル化または逆シリアル化する場合です。</summary>
      <param name="type">メンバーの型から派生したオブジェクトの <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.DataType">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> によって生成される XML 要素の XML スキーマ定義 (XSD) データ型を取得または設定します。</summary>
      <returns>XML スキーマ データ型 (World Wide Web コンソーシアム (www.w3.org) のドキュメント『XML Schema Part 2: Datatypes』で定義)。</returns>
      <exception cref="T:System.Exception">指定した XML スキーマ データ型を .NET データ型に割り当てることはできません。</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.ElementName">
      <summary>生成された XML 要素の名前を取得または設定します。</summary>
      <returns>生成された XML 要素の名前。既定値はメンバー識別子です。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Form">
      <summary>要素が修飾されているかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 値の 1 つ。既定値は <see cref="F:System.Xml.Schema.XmlSchemaForm.None" /> です。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.IsNullable">
      <summary>xsi:nil 属性が true に設定された空タグとして null 値に設定されたメンバーを <see cref="T:System.Xml.Serialization.XmlSerializer" /> がシリアル化する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> によって xsi:nil 属性が生成される場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Namespace">
      <summary>クラスがシリアル化されたときに、結果として XML 要素に割り当てられた名前空間を取得または設定します。</summary>
      <returns>XML 要素の名前空間。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Order">
      <summary>要素のシリアル化または逆シリアル化を行う明示的な順序を取得または設定します。</summary>
      <returns>コード生成の順序。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> セットが負です。</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Type">
      <summary>XML 要素を表すために使用されるオブジェクト型を取得または設定します。</summary>
      <returns>メンバーの <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlEnumAttribute">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が列挙メンバーをシリアル化する方法を制御します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> クラスの新規インスタンスを初期化し、(列挙をそれぞれシリアル化または逆シリアル化する際に) <see cref="T:System.Xml.Serialization.XmlSerializer" /> が生成または認識する XML 値を指定します。</summary>
      <param name="name">列挙メンバーのオーバーライド名。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlEnumAttribute.Name">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が列挙をシリアライズする際に XML ドキュメント インスタンスで生成される値、または列挙メンバーを逆シリアル化する際に認識される値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が列挙をシリアライズする際に XML ドキュメント インスタンスで生成される値、または列挙メンバーを逆シリアル化する際に認識される値。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlIgnoreAttribute">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> クラスの <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> メソッドに、パブリック フィールドまたはパブリック読み取り/書き込みプロパティの値をシリアル化しないように指示します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIgnoreAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlIncludeAttribute">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が、オブジェクトをシリアル化または逆シリアル化する際に型を認識できるようにします。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIncludeAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlIncludeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">含めるオブジェクトの <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlIncludeAttribute.Type">
      <summary>含めるオブジェクトの型を取得または設定します。</summary>
      <returns>含めるオブジェクトの <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute">
      <summary>対象となるプロパティ、パラメーター、戻り値、またはクラス メンバーに、XML ドキュメント内で使用する、名前空間に関連付けられたプレフィックスを含めることを指定します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlRootAttribute">
      <summary>属性ターゲットを XML ルート要素として XML シリアル化する方法を制御します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> クラスの新規インスタンスを初期化し、XML ルート要素の名前を指定します。</summary>
      <param name="elementName">XML ルート要素の名前。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.DataType">
      <summary>XML ルート要素の XSD データ型を取得または設定します。</summary>
      <returns>XSD (XML スキーマ ドキュメント) データ型 (W3C (World Wide Web Consortium) (www.w3.org) のドキュメント『XML Schema Part 2: Datatypes』で定義)。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.ElementName">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> クラスの <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> メソッドおよび <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" /> メソッドによってそれぞれ生成および認識される XML 要素の名前を取得または設定します。</summary>
      <returns>XML ドキュメント インスタンスで生成および認識された XML ルート要素名。既定値は、シリアル化されたクラスの名前です。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.IsNullable">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が null 値に設定されたメンバーを true に設定された xsi:nil 属性にシリアル化する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> によって xsi:nil 属性が生成される場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.Namespace">
      <summary>XML ルート要素の名前空間を取得または設定します。</summary>
      <returns>XML 要素の名前空間。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaProviderAttribute">
      <summary>
        <see cref="T:System.Xml.Serialization.IXmlSerializable" /> インターフェイスを実装する型に適用された場合は、XML スキーマ、および型のシリアル化を制御する <see cref="T:System.Xml.XmlQualifiedName" /> (または匿名型の <see cref="T:System.Xml.Schema.XmlSchemaType" />) を返す型の静的メソッドの名前を保管します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaProviderAttribute.#ctor(System.String)">
      <summary>ターゲット型の指定静的メソッドの <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> クラスの新規インスタンスを初期化します。</summary>
      <param name="methodName">実装する必要がある静的メソッドの名前。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.IsAny">
      <summary>ターゲット クラスがワイルドカードであるかどうか、またはクラスのスキーマに xs:any 要素のみが含まれているかどうかを判別する値を取得または設定します。</summary>
      <returns>クラスがワイルドカードであるか、スキーマに xs:any 要素のみが含まれている場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.MethodName">
      <summary>型の XML スキーマおよびその XML スキーマ データ型の名前を提供する静的メソッドの名前を取得します。</summary>
      <returns>XML スキーマを返すために XML インフラストラクチャによって呼び出される静的メソッドの名前。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTextAttribute">
      <summary>メンバーを含むクラスがシリアル化または逆シリアル化される場合に、そのメンバーを XML テキストとして処理する必要があることを <see cref="T:System.Xml.Serialization.XmlSerializer" /> に指示します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">シリアル化されるメンバーの <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.DataType">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> によって生成されるテキストの XML スキーマ定義 (XSD) 言語データ型を取得または設定します。</summary>
      <returns>XML スキーマ (XSD) データ型 (World Wide Web コンソーシアム (www.w3.org) のドキュメント『XML Schema Part 2: Datatypes』で定義)。</returns>
      <exception cref="T:System.Exception">指定した XML スキーマ データ型を .NET データ型に割り当てることはできません。</exception>
      <exception cref="T:System.InvalidOperationException">指定した XML スキーマ データ型はプロパティとしては無効なので、そのメンバー型に変換できません。</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.Type">
      <summary>メンバーの型を取得または設定します。</summary>
      <returns>メンバーの <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTypeAttribute">
      <summary>属性ターゲットが <see cref="T:System.Xml.Serialization.XmlSerializer" /> によってシリアル化される際に生成される XML スキーマを制御します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTypeAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTypeAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> クラスの新規インスタンスを初期化し、XML 型の名前を指定します。</summary>
      <param name="typeName">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> がクラス インスタンスをシリアル化する際に生成する (およびクラス インスタンスを逆シリアル化する際に認識する) XML 型の名前。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.AnonymousType">
      <summary>結果のスキーマ型が XSD 匿名型であるかどうかを決定する値を取得または設定します。</summary>
      <returns>結果のスキーマ型が XSD 匿名型の場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.IncludeInSchema">
      <summary>XML スキーマ ドキュメントに型を含めるかどうかを示す値を取得または設定します。</summary>
      <returns>XML スキーマ ドキュメントに型を含める場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.Namespace">
      <summary>XML 型の名前空間を取得または設定します。</summary>
      <returns>XML 型の名前空間。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeAttribute.TypeName">
      <summary>XML 型の名前を取得または設定します。</summary>
      <returns>XML 型の名前。</returns>
    </member>
  </members>
</doc>