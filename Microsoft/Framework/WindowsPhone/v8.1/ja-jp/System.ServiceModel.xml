<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceModel</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Generic.KeyedByTypeCollection`1">
      <summary>キーとして機能する型の項目が入ったコレクションを提供します。</summary>
      <typeparam name="TItem">コレクションに含まれ、コレクションのキーとしても機能する項目の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.#ctor">
      <summary>
        <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.Find``1">
      <summary>コレクションに格納されている、指定された型の最初の項目を返します。</summary>
      <returns>型が参照型の場合は型 <paramref name="T" /> のオブジェクト、型が値型の場合は型 <paramref name="T" /> の値。型 <paramref name="T" /> のオブジェクトがコレクションに格納されていない場合は、その型の既定値が返されます。参照型の場合は null、値型の場合は 0 になります。</returns>
      <typeparam name="T">検索するコレクション内の項目の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.FindAll``1">
      <summary>
        <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> に格納されている型 <paramref name="T" /> のオブジェクトのコレクションを返します。</summary>
      <returns>元のコレクションから取得した型 <paramref name="T" /> のオブジェクトが格納されている型 <paramref name="T" /> の <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
      <typeparam name="T">検索するコレクション内の項目の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.GetKeyForItem(`0)">
      <summary>コレクションに格納されている項目の型を取得します。</summary>
      <returns>コレクション内の指定された <paramref name="item" /> の型。</returns>
      <param name="item">型を取得するコレクション内の項目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.InsertItem(System.Int32,`0)">
      <summary>コレクション内の指定された位置に要素を挿入します。</summary>
      <param name="index">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス番号。</param>
      <param name="item">コレクションに挿入するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> が null です。</exception>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.Remove``1">
      <summary>指定された型のオブジェクトをコレクションから削除します。</summary>
      <returns>コレクションから削除されたオブジェクト。</returns>
      <typeparam name="T">削除するコレクション内の項目の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.RemoveAll``1">
      <summary>指定された型のすべての要素をコレクションから削除します。</summary>
      <returns>元のコレクションから取得した型 <paramref name="T" /> のオブジェクトが格納されている <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
      <typeparam name="T">削除するコレクション内の項目の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyedByTypeCollection`1.SetItem(System.Int32,`0)">
      <summary>指定されたインデックスの位置にある項目を新しいオブジェクトで置き換えます。</summary>
      <param name="index">置き換えられる <paramref name="item" /> の 0 から始まるインデックス。</param>
      <param name="item">コレクションに追加するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> が null です。</exception>
    </member>
    <member name="T:System.Collections.Generic.SynchronizedReadOnlyCollection`1">
      <summary>ジェネリック パラメーターで要素として指定された型を持つオブジェクトが格納されている、スレッド セーフで読み取り専用のコレクションを提供します。</summary>
      <typeparam name="T">スレッド セーフで読み取り専用のコレクションに項目として格納されているオブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.#ctor(System.Object,System.Collections.Generic.IEnumerable{`0})">
      <summary>スレッド セーフで読み取り専用のコレクションへのアクセスの同期に使用されるオブジェクトを使用して、指定された要素列挙リストから、<see cref="T:System.Collections.Generic.SynchronizedReadOnlyCollection`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="syncRoot">スレッド セーフで読み取り専用のコレクションへのアクセスの同期に使用されるオブジェクト。</param>
      <param name="list">スレッド セーフで読み取り専用のコレクションの初期化に使用される、要素の <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクション。</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Contains(`0)">
      <summary>指定した値を持つ要素がコレクションに含まれているかどうかを判断します。</summary>
      <returns>要素 <paramref name="value" /> がコレクション内に見つかった場合は true。それ以外の場合は false。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> は、コレクションに含まれている種類のオブジェクトではありません。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
      <summary>コレクションの特定のインデックス位置以降の要素を、指定された配列へコピーします。</summary>
      <param name="array">コレクションから要素がコピーされる先の <see cref="T:System.Array" />。</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Count">
      <summary>スレッド セーフで読み取り専用のコレクションに格納されている要素の数を取得します。</summary>
      <returns>スレッド セーフで読み取り専用のコレクションに格納されている要素の数。</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.GetEnumerator">
      <summary>同期された読み取り専用コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションに格納されている型のオブジェクトの <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.IndexOf(`0)">
      <summary>コレクション内で最初に見つかった値のインデックスを返します。</summary>
      <returns>コレクション内で最初に見つかった <paramref name="value" /> の 0 から始まるインデックス。</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Item(System.Int32)">
      <summary>スレッド セーフで読み取り専用のコレクションから、指定されたインデックスを持つ要素を取得します。</summary>
      <returns>読み取り専用のコレクションから取得した、指定されたインデックスを持つ要素。</returns>
      <param name="index">コレクションから取得する要素の 0 から始まるインデックス。</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.Items">
      <summary>スレッド セーフで読み取り専用のコレクションに格納されている要素のリストを取得します。</summary>
      <returns>スレッド セーフで読み取り専用のコレクションに格納されている要素の <see cref="T:System.Collections.Generic.IList`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>呼び出されると <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="value">コレクションに追加する要素。</param>
      <exception cref="T:System.NotSupportedException">読み取り専用コレクションに項目を追加することはできません。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>呼び出されると <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <exception cref="T:System.NotSupportedException">読み取り専用コレクションから項目を消去することはできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>true を返します。</summary>
      <returns>true。</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>指定したオブジェクトが <see cref="T:System.Collections.Generic.ICollection`1" /> 内にあるときに、最初に出現したものを削除します。</summary>
      <returns>メソッドは、読み取り専用コレクションから項目が削除されなかったことを示す false を返します。</returns>
      <param name="value">コレクションから削除される値。</param>
      <exception cref="T:System.NotSupportedException">読み取り専用コレクションから項目を削除することはできません。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>呼び出されると <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="index">
        <paramref name="value" /> を挿入する位置の 0 から始まるインデックス。</param>
      <param name="value">コレクションに挿入するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">読み取り専用コレクションに項目を挿入することはできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>指定したインデックスの位置にある要素を取得します。</summary>
      <returns>指定されたインデックス位置にある型 <paramref name="T" /> の要素。</returns>
      <param name="index">コレクションから取得する要素の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException">読み取り専用コレクション内にアイテムを設定することはできません。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>呼び出されると <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="index">コレクションから取得する要素の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException">読み取り専用コレクションから項目を削除することはできません。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>コレクションの指定されたインデックス位置以降の要素を、指定された配列へコピーします。</summary>
      <param name="array">コレクションから要素がコピーされる先の <see cref="T:System.Array" />。</param>
      <param name="index">コピーの開始位置となる配列の 0 から始まるインデックス。</param>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>コレクションへのアクセスが同期されているかどうかを示す値を取得します。</summary>
      <returns>true。</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>コレクションへのアクセスの同期に使用できるオブジェクトを取得します。</summary>
      <returns>コレクションへのアクセスの同期に使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>同期された読み取り専用コレクションを反復処理する列挙子を返します。</summary>
      <returns>同期された読み取り専用コレクション全体を反復処理する <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>
        <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <returns>
        <see cref="T:System.NotSupportedException" />。</returns>
      <param name="value">コレクションに追加する要素。</param>
      <exception cref="T:System.NotSupportedException">読み取り専用コレクションに項目を追加することはできません。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Clear">
      <summary>
        <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <exception cref="T:System.NotSupportedException">読み取り専用コレクションから項目を消去することはできません。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>指定した値を持つ要素がコレクションに含まれているかどうかを判断します。</summary>
      <returns>要素 <paramref name="value" /> がコレクション内に見つかった場合は true を返します。それ以外の場合は false。</returns>
      <param name="value">コレクション内で検索するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> は、コレクションに含まれている種類のオブジェクトではありません。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>コレクション内での指定した項目のインデックスを調べます。</summary>
      <returns>リスト内で <paramref name="value" /> が見つかった場合は、そのインデックス。それ以外の場合は -1。</returns>
      <param name="value">インデックスを取得する要素。</param>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>呼び出されると <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="index">
        <paramref name="value" /> を挿入する位置の 0 から始まるインデックス。</param>
      <param name="value">コレクションに挿入するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">読み取り専用コレクションに項目を挿入することはできません。</exception>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
      <summary>コレクションが固定サイズかどうかを示す値を取得します。</summary>
      <returns>true</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
      <summary>コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>true</returns>
    </member>
    <member name="P:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>指定されたインデックス位置にある要素を取得し、要素が設定されている場合は例外をスローします。</summary>
      <returns>コレクション内の指定された位置にあるオブジェクト。</returns>
      <param name="index">コレクション内の要素の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException">読み取り専用コレクション内にアイテムを設定することはできません。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>指定したオブジェクトが <see cref="T:System.Collections.IList" /> 内にあるときに、最初に出現したものを削除します。</summary>
      <param name="value">コレクションから取得する要素の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException">読み取り専用コレクションから項目を削除することはできません。</exception>
    </member>
    <member name="M:System.Collections.Generic.SynchronizedReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>呼び出されると <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="index">コレクションから取得する要素の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException">読み取り専用コレクションから項目を削除することはできません。</exception>
    </member>
    <member name="T:System.ServiceModel.ActionNotSupportedException">
      <summary>この例外は、呼び出された操作に関連するアクションがサービス内で使用できるどの操作のアクションとも一致しなかった場合に、クライアントに対してスローされます。</summary>
    </member>
    <member name="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.ServiceModel.ActionNotSupportedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.ActionNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、例外の原因である内部例外への参照を使用して、<see cref="T:System.ServiceModel.ActionNotSupportedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外がスローされる原因となった <see cref="T:System.Exception" />。 </param>
    </member>
    <member name="T:System.ServiceModel.BasicHttpBinding">
      <summary>Windows Phone クライアントが、ASMX ベースの Web サービスや WS-I Basic Profile 1.1 に準拠したその他のサービスと通信できるエンドポイントを構成するために使用できるバインドを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.BasicHttpBinding" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)">
      <summary>バインドに使用される指定された種類のセキュリティで <see cref="T:System.ServiceModel.BasicHttpBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="securityMode">SOAP メッセージと一緒に使用されたり、クライアントのために使用されたりするセキュリティの種類を指定する <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> の値。</param>
    </member>
    <member name="M:System.ServiceModel.BasicHttpBinding.CreateBindingElements">
      <summary>現在のバインドに格納されているバインド要素の順序付けされたコレクションを返します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.BasicHttpBinding" /> で表されるバインド要素の順序付けされたスタックが格納された <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.EnableHttpCookieContainer">
      <summary>
        <see cref="T:P:System.ServiceModel.BasicHttpBinding" /> に <see cref="T:System.ServiceModel.Channels.HttpCookieContainerBindingElement" /> が含まれるかどうかを示す値を取得または設定します。</summary>
      <returns>バインドに <see cref="T:System.ServiceModel.Channels.HttpCookieContainerBindingElement" /> が含まれる場合は true、含まれない場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.EnvelopeVersion">
      <summary>このバインドで処理するメッセージに使用される SOAP のバージョンを取得します。</summary>
      <returns>このバインドで使用される <see cref="T:System.ServiceModel.EnvelopeVersion" /> のバージョン。この値は、常に SOAP 1.1 です。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.MaxBufferSize">
      <summary>チャネルからメッセージを受け取るバッファーの最大サイズを取得または設定します。</summary>
      <returns>メッセージがこのバインドを使用して構成されたエンドポイント用に処理されている間、メッセージを格納しておくバッファーのバイト単位での最大サイズ。既定値は 65,536 バイトです。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize">
      <summary>このバインドを使用して構成されたチャネル上で受信できるメッセージの最大サイズを取得または設定します。</summary>
      <returns>バインドによって処理されるメッセージのバイト単位での最大サイズ。既定値は 65,536 バイトです。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">値が 0 未満です。</exception>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.Scheme">
      <summary>このバインドを使用して構成されたチャネルとリスナーの URI トランスポート スキームを取得します。</summary>
      <returns>トランスポート バインド要素のセキュリティ モードが <see cref="F:System.ServiceModel.BasicHttpSecurityMode.Transport" /> または <see cref="F:System.ServiceModel.BasicHttpSecurityMode.TransportWithMessageCredentials" /> に設定されている場合は "https"、それ以外の場合は "http"。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.Security">
      <summary>このバインドで使用されているセキュリティの種類を取得します。</summary>
      <returns>このバインドで使用されている <see cref="T:System.ServiceModel.BasicHttpSecurity" />。既定値は <see cref="F:System.ServiceModel.BasicHttpSecurityMode.None" /> です。</returns>
    </member>
    <member name="P:System.ServiceModel.BasicHttpBinding.TextEncoding">
      <summary>メッセージ本文に使用される文字エンコードを取得または設定します。</summary>
      <returns>使用される文字エンコードを示す <see cref="T:System.Text.Encoding" />。既定値は、<see cref="T:System.Text.UTF8Encoding" /> です。</returns>
    </member>
    <member name="T:System.ServiceModel.BasicHttpMessageCredentialType">
      <summary>BasicHttpBinding バインドでセキュリティが有効になっている場合にクライアントが認証に使用できる資格情報の種類を列挙します。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpMessageCredentialType.UserName">
      <summary>クライアントがユーザー名資格情報を使用して認証されることを示します。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpMessageCredentialType.Certificate">
      <summary>Windows Phone 内にのみ存在しますが、サポートされていません。</summary>
    </member>
    <member name="T:System.ServiceModel.BasicHttpSecurity">
      <summary>
        <see cref="T:System.ServiceModel.BasicHttpBinding" /> を使用して構成された Windows Phone クライアントに使用されるセキュリティを指定します。</summary>
    </member>
    <member name="P:System.ServiceModel.BasicHttpSecurity.Mode">
      <summary>
        <see cref="T:System.ServiceModel.BasicHttpBinding" /> を使用して構成されたクライアントのためのセキュリティのモードを取得または設定します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> 列挙値。このプロパティの既定値は <see cref="F:System.ServiceModel.BasicHttpSecurityMode.None" /> です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">値が <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> に有効な値ではありません。</exception>
    </member>
    <member name="T:System.ServiceModel.BasicHttpSecurityMode">
      <summary>システムにより提供された <see cref="T:System.ServiceModel.BasicHttpBinding" /> バインドと一緒に使用できるセキュリティの種類を指定します。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.None">
      <summary>SOAP メッセージは、転送中にセキュリティ保護されません。これが既定の動作です。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.Transport">
      <summary>セキュリティは HTTPS を使用して提供されます。サービスが SSL 証明書を使用して構成されている必要があります。SOAP メッセージは、HTTPS を使用してまとめて保護されます。サービスは、そのサービスの SSL 証明書を使用して、クライアントにより認証されます。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.TransportWithMessageCredential">
      <summary>このモードは、HTTPS を使用して、整合性、機密性、およびサーバー認証を提供します。サービスが証明書を使用して構成されている必要があります。クライアント認証は、SOAP メッセージ セキュリティにより提供されます。</summary>
    </member>
    <member name="F:System.ServiceModel.BasicHttpSecurityMode.TransportCredentialOnly">
      <summary>このモードは、HTTP ベースのクライアント認証のみを提供します。メッセージの整合性や機密性は提供しません。</summary>
    </member>
    <member name="T:System.ServiceModel.ChannelFactory">
      <summary>クライアントがサービス エンドポイントへのメッセージの送信に使用するチャネルを作成し、管理します。</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.ChannelFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.ApplyConfiguration(System.String)">
      <summary>指定した構成ファイルで提供されるビヘイビアー、およびチャネル ファクトリのサービス エンドポイント内にあるビヘイビアーでチャネル ファクトリを初期化します。</summary>
      <param name="configurationName">構成ファイルの名前。</param>
      <exception cref="T:System.InvalidOperationException">チャネル ファクトリのサービス エンドポイントが null です。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.CreateDescription">
      <summary>派生クラス内で実装された場合に、チャネル ファクトリに関連付けられているサービス エンドポイントの記述を作成します。</summary>
      <returns>チャネル ファクトリに関連付けられている <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.CreateFactory">
      <summary>ファクトリの現在のエンドポイントのためのチャネル ファクトリを構築します。</summary>
      <returns>現在のファクトリのエンドポイントの <see cref="T:System.ServiceModel.Channels.IChannelFactory" />。</returns>
      <exception cref="T:System.InvalidOperationException">ファクトリ チャネルの接続先となるサービスのエンドポイントが null であるか、エンドポイントのバインドが null であるか、または指定された構成名を持つ要素が見つかりません。</exception>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.Credentials">
      <summary>ファクトリにより生成されたチャネルを介してサービス エンドポイントと通信するためにクライアントが使用する資格情報を取得します。</summary>
      <returns>クライアントがファクトリ用に構成されている場合、あるいはエンドポイントが null 参照ではなく、その通信状態が <see cref="F:System.ServiceModel.CommunicationState.Created" /> または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> のいずれかになっている場合は <see cref="T:System.ServiceModel.Description.ClientCredentials" />、それ以外の場合は null。</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.DefaultCloseTimeout">
      <summary>閉じる操作完了までの既定の制限時間を取得します。</summary>
      <returns>閉じる操作完了までの制限時間を指定する既定の <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.DefaultOpenTimeout">
      <summary>開く操作完了までの既定の制限時間を取得します。</summary>
      <returns>開く操作完了までの制限時間を指定する既定の <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</returns>
    </member>
    <member name="P:System.ServiceModel.ChannelFactory.Endpoint">
      <summary>ファクトリによって生成されたチャネルの接続先になるサービス エンドポイントを取得します。</summary>
      <returns>ファクトリによって生成されたチャネルの接続先になる <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.EnsureOpened">
      <summary>現在のチャネル ファクトリがまだ開かれていない場合に、それを開きます。</summary>
      <exception cref="T:System.ObjectDisposedException">現在のファクトリが閉じる処理中であるか、既に閉じているため、開くことができません。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.GetProperty``1">
      <summary>チャネル スタック内の該当するレイヤーに要求された型指定されたオブジェクトが存在する場合はそれを返し、ない場合は null を返します。</summary>
      <returns>要求された型指定されたオブジェクトが存在する場合はその <paramref name="T" />、存在しない場合は null。</returns>
      <typeparam name="T">メソッドによって照会されている型が指定されたオブジェクト。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>指定されたバインドとアドレスで、チャネル ファクトリのサービス エンドポイントを初期化します。</summary>
      <param name="binding">チャネル ファクトリのエンドポイントの初期化に使用される <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="address">チャネル ファクトリのエンドポイントの初期化に使用される <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.InitializeEndpoint(System.String,System.ServiceModel.EndpointAddress)">
      <summary>指定されたアドレスと構成で、チャネル ファクトリのサービス エンドポイントを初期化します。</summary>
      <param name="configurationName">チャネル ファクトリの初期化に使用する構成ファイルの名前。</param>
      <param name="address">チャネル ファクトリのエンドポイントの初期化に使用する <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnAbort">
      <summary>現在のチャネル ファクトリの内部チャネル ファクトリを終了します。</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>現在のチャネル ファクトリの、状態オブジェクトが関連付けられている内部チャネル ファクトリの非同期の閉じる操作を開始します。</summary>
      <returns>非同期操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <param name="callback">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>現在のチャネル ファクトリの、状態オブジェクトが関連付けられている内部チャネル ファクトリの非同期の開く操作を開始します。</summary>
      <returns>非同期操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <param name="callback">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnClose(System.TimeSpan)">
      <summary>操作を完了するために、指定したタイムアウトで、内部チャネル ファクトリに対して close を呼び出します。</summary>
      <param name="timeout">操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnEndClose(System.IAsyncResult)">
      <summary>現在のチャネル ファクトリの内部チャネル ファクトリに対する非同期の閉じる処理を完了します。</summary>
      <param name="result">
        <see cref="M:System.ServiceModel.ChannelFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnEndOpen(System.IAsyncResult)">
      <summary>現在のチャネル ファクトリの内部チャネル ファクトリに対する非同期の開く処理を完了します。</summary>
      <param name="result">
        <see cref="M:System.ServiceModel.ChannelFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpen(System.TimeSpan)">
      <summary>操作を完了するために、指定したタイムアウトで、現在のチャネル ファクトリの内部チャネル ファクトリに対して open を呼び出します。</summary>
      <param name="timeout">開く操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <exception cref="T:System.InvalidOperationException">現在のチャネルの内部チャネルが null です。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpened">
      <summary>チャネル ファクトリの <see cref="T:System.ServiceModel.Description.ClientCredentials" /> オブジェクトの読み取り専用コピーを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.OnOpening">
      <summary>現在のチャネルの内部チャネル ファクトリを構築します。</summary>
      <exception cref="T:System.InvalidOperationException">現在のチャネル ファクトリの内部チャネル ファクトリが null です。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory.System#IDisposable#Dispose">
      <summary>現在のチャネル ファクトリを閉じます。</summary>
    </member>
    <member name="T:System.ServiceModel.ChannelFactory`1">
      <summary>さまざまに構成されたサービス エンドポイントにメッセージを送信するためにクライアントが使用するさまざまな種類のチャネルを作成するファクトリ。</summary>
      <typeparam name="TChannel">チャネル ファクトリによって作成されるチャネルの型。この型は、<see cref="T:System.ServiceModel.Channels.IOutputChannel" /> か <see cref="T:System.ServiceModel.Channels.IRequestChannel" /> のいずれかである必要があります。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>指定されたエンドポイント アドレスとバインド構成で、<see cref="T:System.ServiceModel.ChannelFactory`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="binding">ファクトリによって作成されたチャネルの構成に使用する <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="remoteAddress">ファクトリで作成されたチャネルの接続先 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.String)">
      <summary>
        <see cref="T:System.ServiceModel.ChannelFactory`1" /> クラスの新しいインスタンスを初期化し、エンドポイントを構成します。</summary>
      <param name="endpointConfigurationName">ファクトリで作成されたチャネルのサービス エンドポイント構成が含まれたファイルの名前。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <summary>指定されたエンドポイント アドレスとエンドポイント構成で、<see cref="T:System.ServiceModel.ChannelFactory`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="endpointConfigurationName">ファクトリで作成されたチャネルのサービス エンドポイント構成が含まれたファイルの名前。</param>
      <param name="remoteAddress">ファクトリで作成されたチャネルの接続先 <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>指定されたエンドポイント アドレスでサービスにメッセージを送信するのに使用するチャネルを作成します。</summary>
      <returns>ファクトリで作成された <see cref="T:System.ServiceModel.Channels.IChannel" /> 型の<paramref name="TChannel" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>指定されたトランスポート アドレスを通じて指定されたエンドポイント アドレスでサービスにメッセージを送信するのに使用するチャネルを作成します。</summary>
      <returns>ファクトリで作成された <see cref="T:System.ServiceModel.Channels.IChannel" /> 型の<paramref name="TChannel" />。</returns>
      <param name="via">チャネルからのメッセージの送信先となるトランスポート アドレスを含む <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ServiceModel.ChannelFactory" /> に、サポートしていないデュプレックス操作があります。</exception>
    </member>
    <member name="M:System.ServiceModel.ChannelFactory`1.CreateDescription">
      <summary>サービス エンドポイントの記述を作成します。</summary>
      <returns>サービスの <see cref="T:System.ServiceModel.Description.ServiceEndpoint" />。</returns>
      <exception cref="T:System.InvalidOperationException">コールバック コントラクトが null ですが、サービス エンドポイントには null (Nothing) ではないコールバック コントラクトが必要です。</exception>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1">
      <summary>サービスを呼び出すことができる Windows Phone クライアント オブジェクト (プロキシ) の作成に使用する基本実装を提供します。</summary>
      <typeparam name="TChannel">このプロキシによってカプセル化されたサービス コントラクトの種類を識別するサービスへの接続に使用するチャネル。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor">
      <summary>アプリケーション構成ファイルから得た既定のターゲット エンドポイントを使用して、<see cref="T:System.ServiceModel.ClientBase`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <exception cref="T:System.InvalidOperationException">構成ファイル内に既定のエンドポイント情報がないか、ファイル内に複数のエンドポイントがあるか、または構成ファイルがありません。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>指定されたバインドとターゲット アドレスを使用して <see cref="T:System.ServiceModel.ClientBase`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="binding">サービスの呼び出し方法の構成に使用されるバインド。</param>
      <param name="remoteAddress">サービス エンドポイントのアドレス。</param>
      <exception cref="T:System.ArgumentNullException">バインドが null です。</exception>
      <exception cref="T:System.ArgumentNullException">リモート アドレスが null です。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String)">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> によるアプリケーション構成ファイルで指定されている構成情報を使用して、<paramref name="endpointConfigurationName" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="endpointConfigurationName">アプリケーション構成ファイル内のエンドポイントの名前。</param>
      <exception cref="T:System.ArgumentNullException">指定されたエンドポイント情報が null です。</exception>
      <exception cref="T:System.InvalidOperationException">エンドポイントが見つからないか、またはエンドポイントのコンストラクトが無効です。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <summary>指定されたターゲット アドレスとエンドポイント情報を使用して、<see cref="T:System.ServiceModel.ClientBase`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="endpointConfigurationName">アプリケーション構成ファイル内のエンドポイントの名前。</param>
      <param name="remoteAddress">サービスのアドレス。</param>
      <exception cref="T:System.ArgumentNullException">エンドポイントが null です。</exception>
      <exception cref="T:System.ArgumentNullException">リモート アドレスが null です。</exception>
      <exception cref="T:System.InvalidOperationException">エンドポイントが見つからないか、またはエンドポイントのコンストラクトが無効です。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="endpointConfigurationName">アプリケーション構成ファイル内のエンドポイントの名前。</param>
      <param name="remoteAddress">サービスのアドレス。</param>
      <exception cref="T:System.ArgumentNullException">エンドポイントが null です。</exception>
      <exception cref="T:System.ArgumentNullException">リモート アドレスが null です。</exception>
      <exception cref="T:System.InvalidOperationException">エンドポイントが見つからないか、またはエンドポイントのコンストラクトが無効です。</exception>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.Abort">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトを現在の状態から閉じた状態へすぐに推移させます。</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.Channel">
      <summary>サービスと通信するために使用される内部チャネルを取得します。</summary>
      <returns>コンストラクターに型パラメーターとして渡されるターゲット サービス コントラクト インターフェイスの実装。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelFactory">
      <summary>基になる <see cref="T:System.ServiceModel.ChannelFactory`1" /> オブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.ChannelFactory`1" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ClientCredentials">
      <summary>操作の呼び出しに使用されるクライアント資格情報を取得します。</summary>
      <returns>クライアントによって提示される身元証明を表す <see cref="T:System.ServiceModel.Description.ClientCredentials" /> オブジェクト。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.CreateChannel">
      <summary>クライアントからサービスへの新しいチャネルを返します。</summary>
      <returns>このクライアント オブジェクト (プロキシ) によってカプセル化されるサービス コントラクトの型を識別する型 <paramref name="TChannel" /> のチャネル。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.Endpoint">
      <summary>Windows Phone クライアントが接続できるサービスのターゲット エンドポイントを取得します。</summary>
      <returns>ターゲット <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> オブジェクト。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.GetDefaultValueForInitialization``1">
      <summary>C# の既定のキーワードの動作をレプリケートします。</summary>
      <returns>T が参照型の場合は null を返し、T が数値型の場合は 0 を返します。</returns>
      <typeparam name="T">C# の型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.InnerChannel">
      <summary>基になる <see cref="T:System.ServiceModel.IClientChannel" /> 実装を取得します。</summary>
      <returns>Windows Phone クライアント オブジェクトのクライアント チャネル。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase{`0}.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase{`0}.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)">
      <summary>イベント ベースの非同期パターンを実装するためのサポートを提供します。このパターンの
詳細情報 
  、「イベントベースの非同期パターンの概要」を参照してください。</summary>
      <param name="beginOperationDelegate">非同期操作の呼び出しに使用されるデリゲート。</param>
      <param name="inValues">非同期呼び出しに対する入力値。</param>
      <param name="endOperationDelegate">非同期呼び出しが完了した後に、それを終了させるために使用されるデリゲート。</param>
      <param name="operationCompletedCallback">非同期メソッドが完了したときに呼び出される、クライアントによって提供されたコールバック。<see cref="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" /> に渡されるコールバック。</param>
      <param name="userState">非同期呼び出しに関連付けられている <paramref name="userState" /> オブジェクト。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.State">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトの現在の状態を取得します。</summary>
      <returns>オブジェクトの <see cref="T:System.ServiceModel.CommunicationState" /> の値。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> を閉じるための非同期操作を開始します。</summary>
      <returns>非同期の閉じる操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">完了時にコールバックを受け取るメソッド。</param>
      <param name="state">状態データ。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>指定されたタイムアウトで <see cref="T:System.ServiceModel.ClientBase`1" /> を閉じるための非同期操作を開始します。</summary>
      <returns>非同期の開始クローズ操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">呼び出し完了までの期限。</param>
      <param name="callback">操作が完了したときに呼び出されるコールバック オブジェクト。</param>
      <param name="state">状態データ。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトを開くための非同期操作を開始します。</summary>
      <returns>非同期の開く操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">完了時にコールバックを受け取るメソッド。</param>
      <param name="state">状態データ。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>指定された期間内に <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトを開くための非同期操作を開始します。</summary>
      <returns>非同期の開く操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">呼び出し完了までの制限時間。</param>
      <param name="callback">完了時にコールバックを受け取るメソッド。</param>
      <param name="state">状態データ。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Close">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトを現在の状態から閉じた状態に切り替えます。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトを現在の状態から閉じた状態に切り替えます。</summary>
      <param name="timeout">呼び出し完了までの制限時間。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closed">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトが現在の状態から閉じた状態へ推移したときに呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Closing">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトが現在の状態から閉じた状態へ切り替わるときに呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトを閉じるための非同期操作を完了します。</summary>
      <param name="result">非同期の閉じる操作を完了させるために使用される <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトを開くための非同期操作を完了します。</summary>
      <param name="result">非同期の開く操作を完了させるために使用される <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Faulted">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトに対する操作を実行中にフォールトが発生した場合に呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Open">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトを作成された状態から開かれた状態に切り替えます。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)">
      <summary>指定された時間内に、<see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトを作成済みの状態から開いた状態へ推移させます。</summary>
      <param name="timeout">呼び出し完了までの期限。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opened">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトが作成済みの状態から開いた状態へ推移したときに呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.System#ServiceModel#ICommunicationObject#Opening">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1" /> オブジェクトが作成済みの状態から開いた状態へ切り替わるときに呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate">
      <summary>クライアントに対する非同期操作の呼び出しのために <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" /> によって使用されるデリゲート。</summary>
      <returns>非同期呼び出しの結果。</returns>
      <param name="inValues">非同期呼び出しに対する入力値。</param>
      <param name="asyncCallback">対応する非同期操作が完了したときに呼び出されるメソッドへの参照。</param>
      <param name="state">クライアントに異なる非同期呼び出しを区別させるための <see cref="T:System.Object" />。これは、イベントの完了コールバックの <paramref name="arguments" /> パラメーターでクライアントに使用可能になります。</param>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.ChannelBase`1">
      <summary>このクラスは、自動生成されたクライアント プロキシによってサービスの呼び出しに使用されます。それ以外には使用しないでください。 
</summary>
      <typeparam name="T">ジェネリック クラス。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.#ctor(System.ServiceModel.ClientBase{`1})">
      <summary>クラスの新しいインスタンスを <see cref="T:System.ServiceModel.ClientBase`1" /> クラスの既存のインスタンスから初期化します。</summary>
      <param name="client">クラスの新しいインスタンスの初期化に使用される <see cref="T:System.ServiceModel.ClientBase`1.ChannelBase`1" /> オブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)">
      <summary>名前で指定されたメソッドの非同期呼び出しを開始します。</summary>
      <returns>呼び出された非同期メソッドを参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="methodName">非同期的に呼び出されるメソッドの名前。</param>
      <param name="args">呼び出されるメソッドの引数の配列。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">
        <see cref="T:System.AsyncCallback" /> デリゲート。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.EndInvoke(System.String,System.Object[],System.IAsyncResult)">
      <summary>名前で指定されたメソッドの非同期呼び出しを完了させます。</summary>
      <returns>
呼び出されたメソッドによる <see cref="T:System.Object" /> 出力。
</returns>
      <param name="methodName">非同期的に呼び出されたメソッドの名前。</param>
      <param name="args">呼び出されるメソッドの引数の配列。</param>
      <param name="result">
        <see cref="M:System.ServiceModel.ClientBase`1.ChannelBase`1.BeginInvoke(System.String,System.Object[],System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#IDisposable#Dispose">
      <summary>アプリケーションで定義された、チャネルに関連付けられているアンマネージ リソースの解放、リリース、およびリセットに関連付けられているタスクを実行します。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IChannel#GetProperty``1">
      <summary>チャネル スタック内の適切なレイヤーから要求された型指定オブジェクトがある場合は、それを返します。</summary>
      <returns>要求された型指定オブジェクト <paramref name="T" /> がある場合はそのオブジェクト、オブジェクトが存在しない場合は null。</returns>
      <typeparam name="TProperty">メソッドによって照会されている型が指定されたオブジェクト。</typeparam>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>メッセージを出力チャネルの接続先に送信する非同期操作を開始します。</summary>
      <returns>非同期メッセージ送信操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">出力チャネル上で送信される <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期送信操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>指定された時間内に出力チャネルの接続先へメッセージを送信するための非同期操作を開始します。</summary>
      <returns>非同期送信操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">出力チャネル上で送信される <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">送信操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <param name="callback">非同期操作の送信完了の通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期送信操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#EndSend(System.IAsyncResult)">
      <summary>出力チャネルの接続先へメッセージを送信するための非同期操作を完了します。</summary>
      <param name="result">
        <see cref="M:System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#RemoteAddress">
      <summary>出力チャネル上で送信されるメッセージの行き先となるサービスの送信先を取得します。</summary>
      <returns>出力チャネルによりメッセージが送信される先のサービスの <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message)">
      <summary>出力チャネルの接続先へメッセージを送信します。</summary>
      <param name="message">出力チャネル上で送信される <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Send(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>指定された時間内に現在の出力チャネル上でメッセージを送信します。</summary>
      <param name="message">出力チャネル上で送信される <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">送信操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IOutputChannel#Via">
      <summary>出力チャネル上で送信されるメッセージの行き先となるトランスポート アドレスが含まれた URI を取得します。</summary>
      <returns>出力チャネル上でメッセージを送信する先のトランスポート アドレスが含まれた <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>要求応答メッセージ交換の応答側に要求メッセージを送信するための非同期操作を開始します。</summary>
      <returns>非同期メッセージ送信操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">送信する要求の <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">要求メッセージを送信する非同期操作の完了の通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">要求メッセージを送信する非同期操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>指定された時間内に要求メッセージを要求返信メッセージ交換の返信側へ送信するための非同期操作を開始します。</summary>
      <returns>非同期メッセージ送信操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">送信する要求の <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">応答を受信するまでの制限時間を指定する <see cref="T:System.TimeSpan" />。(既定値については、「注釈」を参照してください。)</param>
      <param name="callback">要求メッセージを送信する非同期操作の完了の通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">要求メッセージを送信する非同期操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#EndRequest(System.IAsyncResult)">
      <summary>送信された要求へメッセージ ベースの応答を返すための非同期操作を完了します。</summary>
      <returns>要求に対する応答で受け取った <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="result">
        <see cref="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#RemoteAddress">
      <summary>要求チャネルからメッセージを送信する先のリモート アドレスを取得します。</summary>
      <returns>要求チャネルからメッセージを送信する先の <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message)">
      <summary>メッセージ ベースの要求を送信し、相互関係のあるメッセージ ベースの応答を返します。</summary>
      <returns>要求に対する応答で受け取った <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">送信する要求の <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Request(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>指定された時間内に、メッセージ ベースの要求を送信し、相互関係のあるメッセージ ベースの応答を返します。</summary>
      <returns>要求に対する応答で受け取った <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">送信する要求の <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">応答を受信するまでの制限時間を指定する <see cref="T:System.TimeSpan" />。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#Channels#IRequestChannel#Via">
      <summary>要求の送信先となるトランスポート アドレスを取得します。</summary>
      <returns>メッセージを送信する先のトランスポート アドレスが含まれた <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#AllowInitializationUI">
      <summary>
        <see cref="T:System.ServiceModel.EndpointAddress" /> は、<see cref="P:System.ServiceModel.Channels.IOutputChannel.Via" /> が指定されていない場合に、最終的な送信先と物理アドレスの両方として機能します。<see cref="P:System.ServiceModel.Channels.IOutputChannel.Via" /> が指定されている場合は、それがメッセージ送信先の実際の物理アドレスになり、メッセージを最終目的地に到達させるにはそれを介して送信されなければなりません。</summary>
      <returns>
        <see cref="T:System.Boolean" /> を返します。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#BeginDisplayInitializationUI(System.AsyncCallback,System.Object)">
      <summary>ユーザー インターフェイスで資格情報の取得を開始するための非同期呼び出し。</summary>
      <returns>処理が完了したときにコールバックするために使用される <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">このメソッドが完了したときに呼び出されるメソッド。</param>
      <param name="state">チャネルの状態に関する情報。</param>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DidInteractiveInitialization">
      <summary>資格情報を取得するためにユーザー インターフェイスが呼び出されたかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> メソッド (または <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> メソッドと <see cref="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)" /> メソッド) が呼び出された場合は true、呼び出されなかった場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#DisplayInitializationUI">
      <summary>資格情報を取得するためのユーザー インターフェイスの呼び出し。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#EndDisplayInitializationUI(System.IAsyncResult)">
      <summary>
        <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> の呼び出しが完了したときに呼び出されます。</summary>
      <param name="result">
        <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#UnknownMessageReceived">
      <summary>これは予約されたイベントです。</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IClientChannel#Via">
      <summary>クライアント チャネル上で送信されるメッセージの行き先となるトランスポート アドレスが含まれた URI を取得します。</summary>
      <returns>チャネル上で送信されるメッセージの行き先となるトランスポート アドレスが含まれた <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Abort">
      <summary>通信オブジェクトを現在の状態から閉じた状態へすぐに推移させます。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.AsyncCallback,System.Object)">
      <summary>通信オブジェクトを閉じるための非同期操作を開始します。</summary>
      <returns>非同期の閉じる操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">非同期の閉じる操作の完了通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期の閉じる操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>通信オブジェクトを閉じる非同期操作を指定されたタイムアウトで開始します。</summary>
      <returns>非同期の閉じる操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">送信操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <param name="callback">非同期の閉じる操作の完了通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期の閉じる操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.AsyncCallback,System.Object)">
      <summary>通信オブジェクトを開くための非同期操作を開始します。</summary>
      <returns>非同期の開く操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">非同期の開く操作の完了通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期の開く操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>通信オブジェクトを開く非同期操作を指定された時間制限で開始します。</summary>
      <returns>非同期の開く操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">送信操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <param name="callback">非同期の開く操作の完了通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期の開く操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close">
      <summary>通信オブジェクトを現在の状態から閉じた状態へ推移させます。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Close(System.TimeSpan)">
      <summary>通信オブジェクトを現在の状態から閉じた状態へ推移させます。</summary>
      <param name="timeout">送信操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closed">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1.ChannelBase`1" /> オブジェクトが現在の状態から閉じた状態へ推移したときに呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Closing">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1.ChannelBase`1" /> オブジェクトが現在の状態から閉じた状態へ切り替わるときに呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndClose(System.IAsyncResult)">
      <summary>通信オブジェクトを閉じるための非同期操作を完了します。</summary>
      <param name="result">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)" /> メソッドの呼び出しから返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#EndOpen(System.IAsyncResult)">
      <summary>通信オブジェクトを開くための非同期操作を完了します。</summary>
      <param name="result">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)" /> メソッドの呼び出しから返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Faulted">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1.ChannelBase`1" /> オブジェクトに対する操作を実行中にフォールトが発生した場合に呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open">
      <summary>通信オブジェクトを作成済みの状態から開いた状態へ推移させます。</summary>
    </member>
    <member name="M:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Open(System.TimeSpan)">
      <summary>指定された時間内に、通信オブジェクトを作成済みの状態から開いた状態へ推移させます。</summary>
      <param name="timeout">送信操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opened">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1.ChannelBase`1" /> オブジェクトが作成済みの状態から開いた状態へ推移したときに呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="E:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#Opening">
      <summary>
        <see cref="T:System.ServiceModel.ClientBase`1.ChannelBase`1" /> オブジェクトが作成済みの状態から開いた状態へ切り替わるときに呼び出されるイベント ハンドラー。</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#ICommunicationObject#State">
      <summary>通信指向オブジェクトの現在の状態を取得します。</summary>
      <returns>オブジェクトの <see cref="T:System.ServiceModel.CommunicationState" /> の値。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#AllowOutputBatching">
      <summary>トランスポートにメッセージを渡す前にメッセージ セットを保存するように Windows Phone に対して指示する値を取得または設定します。</summary>
      <returns>送信メッセージのバッチ処理が可能な場合は true、バッチ処理が不可能な場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#InputSession">
      <summary>チャネルの入力セッションを取得します。</summary>
      <returns>チャネルの <see cref="T:System.ServiceModel.Channels.IInputSession" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#LocalAddress">
      <summary>チャネルのローカル エンドポイントを取得します。</summary>
      <returns>チャネルのローカル <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OperationTimeout">
      <summary>操作完了までの制限時間あるいは例外がスローされる時間を取得または設定します。</summary>
      <returns>操作完了までの制限時間を指定する <see cref="T:System.TimeSpan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#OutputSession">
      <summary>チャネルに関連付けられている出力セッションがある場合、そのセッションを取得します。</summary>
      <returns>入力セッションが存在する場合は <see cref="T:System.ServiceModel.Channels.IOutputSession" /> 実装、それ以外の場合は null。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#RemoteAddress">
      <summary>チャネルに関連付けられているリモート アドレスを取得します。</summary>
      <returns>チャネルのリモート <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IContextChannel#SessionId">
      <summary>現在のセッションの識別子がある場合、その識別子を返します。</summary>
      <returns>現在のセッションの識別子がある場合は、その識別子。</returns>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.ChannelBase`1.System#ServiceModel#IExtensibleObject{T}#Extensions">
      <summary>この拡張可能オブジェクト用に拡張オブジェクトのコレクションを取得します。</summary>
      <returns>拡張オブジェクトの <see cref="T:System.ServiceModel.IExtensionCollection`1" />。</returns>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.EndOperationDelegate">
      <summary>
        <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase{`0}.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase{`0}.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" /> によって <see cref="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" /> に対して行われた呼び出しが正常に完了したときに <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase{`0}.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase{`0}.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" /> によって呼び出されるデリゲート。</summary>
      <returns>非同期メソッドへの呼び出しの結果が格納されている <see cref="T:System.Object" /> の配列。この操作は複数の戻り値を持つ場合があり、それらはすべてこのオブジェクト配列に入れて返されます。</returns>
      <param name="result">
        <see cref="M:System.ServiceModel.ClientBase`1.InvokeAsync(System.ServiceModel.ClientBase{`0}.BeginOperationDelegate,System.Object[],System.ServiceModel.ClientBase{`0}.EndOperationDelegate,System.Threading.SendOrPostCallback,System.Object)" /> によって <see cref="T:System.ServiceModel.ClientBase`1.BeginOperationDelegate" /> へと行われた呼び出しによって返された結果。</param>
    </member>
    <member name="T:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs">
      <summary>クライアントによって行われた非同期呼び出しからの結果が格納されます。</summary>
    </member>
    <member name="P:System.ServiceModel.ClientBase`1.InvokeAsyncCompletedEventArgs.Results">
      <summary>クライアントによって行われた非同期呼び出しからの結果を取得します。</summary>
      <returns>クライアントによって行われた非同期呼び出しからの結果が格納された、型 <see cref="T:System.Object" /> の配列。</returns>
    </member>
    <member name="T:System.ServiceModel.CommunicationException">
      <summary>サービスまたはクライアント アプリケーションのいずれかでの通信エラーを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.CommunicationException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.ServiceModel.CommunicationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラー条件の説明。</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)">
      <summary>指定されたメッセージと内部例外を使用して、<see cref="T:System.ServiceModel.CommunicationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラー条件の説明。</param>
      <param name="innerException">使用される内部例外。</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationObjectAbortedException">
      <summary>呼び出しが、既に中止されている <see cref="T:System.ServiceModel.ICommunicationObject" /> オブジェクトに対するものだった場合にスローされる例外。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外に含まれていたメッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectAbortedException.#ctor(System.String,System.Exception)">
      <summary>指定したメッセージと内部例外を使用して、<see cref="T:System.ServiceModel.CommunicationObjectAbortedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationObjectFaultedException">
      <summary>呼び出しがエラーの発生した通信オブジェクトに対して行われた場合にスローされる例外。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.CommunicationObjectFaultedException.#ctor(System.String,System.Exception)">
      <summary>指定したメッセージと内部例外を使用して、<see cref="T:System.ServiceModel.CommunicationObjectFaultedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="T:System.ServiceModel.CommunicationState">
      <summary>
        <see cref="T:System.ServiceModel.ICommunicationObject" /> が存在することのできる状態を定義します。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Created">
      <summary>通信オブジェクトが、インスタンス化されていて構成可能であるけれども、まだ開かれてもいなければ使用する準備が整ってもいないことを示します。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Opening">
      <summary>通信オブジェクトが <see cref="F:System.ServiceModel.CommunicationState.Created" /> 状態から <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態への切り替わり中であることを示します。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Opened">
      <summary>通信オブジェクトが既に開かれており、使用する準備が整っていることを示します。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Closing">
      <summary>通信オブジェクトが <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態への切り替わり中であることを示します。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Closed">
      <summary>通信オブジェクトが閉じられており、もう使用できないことを示します。</summary>
    </member>
    <member name="F:System.ServiceModel.CommunicationState.Faulted">
      <summary>通信オブジェクトにエラーまたは障害が発生して、通信オブジェクトがそこから回復できず、そのため使用できなくなっていることを示します。 </summary>
    </member>
    <member name="T:System.ServiceModel.DataContractFormatAttribute">
      <summary>Windows Phone インフラストラクチャに <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.を使用するように指示します。</summary>
    </member>
    <member name="M:System.ServiceModel.DataContractFormatAttribute.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.DataContractFormatAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.DataContractFormatAttribute.Style">
      <summary>シリアル化されたデータの SOAP スタイルを取得または設定します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.OperationFormatStyle" /> 値のいずれか。既定値は、<see cref="F:System.ServiceModel.OperationFormatStyle.Document" /> です。</returns>
    </member>
    <member name="T:System.ServiceModel.EndpointAddress">
      <summary>クライアントがサービス エンドポイントとの通信に使用する一意のネットワーク アドレスを提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.#ctor(System.String)">
      <summary>指定された URI 文字列で <see cref="T:System.ServiceModel.EndpointAddress" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="uri">エンドポイントを識別する URI。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.#ctor(System.Uri,System.ServiceModel.Channels.AddressHeader[])">
      <summary>指定された URI とヘッダーで <see cref="T:System.ServiceModel.EndpointAddress" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="uri">エンドポイントの場所を識別する <see cref="T:System.Uri" />。</param>
      <param name="addressHeaders">エンドポイントとの対話に使用するアドレス情報が格納された、<see cref="T:System.ServiceModel.Channels.AddressHeader" /> 型の <see cref="T:System.Array" />。</param>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.AnonymousUri">
      <summary>バージョンに依存しない形式の匿名 URI を取得します。</summary>
      <returns>http://schemas.microsoft.com/2005/12/ServiceModel/Addressing/Anonymous を値として持つ <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ApplyTo(System.ServiceModel.Channels.Message)">
      <summary>エンドポイント アドレスの URI とプロパティを指定されたメッセージのヘッダーの値に割り当てます。</summary>
      <param name="message">割り当て先となるヘッダー値を持つ <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.Equals(System.Object)">
      <summary>指定されたオブジェクトが現在のエンドポイント アドレスと等しいかどうかを示す値を返します。</summary>
      <returns>指定された値が現在のアドレスと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のエンドポイント アドレスと比較する <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.GetHashCode">
      <summary>現在のエンドポイント アドレスの一意のハッシュ コードを提供します。</summary>
      <returns>現在のエンドポイント アドレスの一意のハッシュ コード。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.Headers">
      <summary>ビルダーで作成できるエンドポイントのアドレス ヘッダーのコレクションを取得します。</summary>
      <returns>エンドポイントのアドレス情報が格納された <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.IsAnonymous">
      <summary>エンドポイントが匿名かどうかを示す値を取得します。</summary>
      <returns>エンドポイントが <see cref="P:System.ServiceModel.EndpointAddress.AnonymousUri" /> の場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.IsNone">
      <summary>エンドポイントの URI が <see cref="P:System.ServiceModel.EndpointAddress.NoneUri" /> かどうかを示す値を取得します。</summary>
      <returns>エンドポイントの URI が <see cref="P:System.ServiceModel.EndpointAddress.NoneUri" /> の場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.NoneUri">
      <summary>メッセージの送信が禁止されているエンドポイントのアドレスで使用される、バージョンに依存しない URI を取得します。</summary>
      <returns>http://schemas.microsoft.com/2005/12/ServiceModel/Addressing/None を値として持つ <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.op_Equality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)">
      <summary>指定されたエンドポイント アドレスが同値でないかどうかを示す値を戻します。</summary>
      <returns>エンドポイント アドレスが等しい場合は true、それ以外の場合は false。</returns>
      <param name="address1">比較される <see cref="T:System.ServiceModel.EndpointAddress" /> オブジェクトの 1 つ。</param>
      <param name="address2">比較される <see cref="T:System.ServiceModel.EndpointAddress" /> オブジェクトの 1 つ。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.op_Inequality(System.ServiceModel.EndpointAddress,System.ServiceModel.EndpointAddress)">
      <summary>指定されたエンドポイント アドレスが同値でないかどうかを示す値を戻します。</summary>
      <returns>エンドポイント アドレスが等しくない場合は true、それ以外の場合は false。</returns>
      <param name="address1">比較される <see cref="T:System.ServiceModel.EndpointAddress" /> オブジェクトの 1 つ。</param>
      <param name="address2">比較される <see cref="T:System.ServiceModel.EndpointAddress" /> オブジェクトの 1 つ。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ReadFrom(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryReader)">
      <summary>指定されたアドレス バージョンのエンドポイント アドレスを、指定された XML ディクショナリ リーダーから読み取ります。</summary>
      <returns>XML リーダーから読み取った、指定されたバージョンの <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
      <param name="addressingVersion">現在のエンドポイント オブジェクトの <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
      <param name="reader">エンドポイント アドレスの取得元になる <see cref="T:System.Xml.XmlDictionaryReader" />。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.ToString">
      <summary>エンドポイント アドレスに含まれている URI を表す正規文字列を返します。</summary>
      <returns>エンドポイントを識別する URI。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddress.Uri">
      <summary>エンドポイントの URI を取得します。</summary>
      <returns>エンドポイントの <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddress.WriteContentsTo(System.ServiceModel.Channels.AddressingVersion,System.Xml.XmlDictionaryWriter)">
      <summary>ノードのすべての子ノードを、指定された XML ディクショナリ ライターに保存します。</summary>
      <param name="addressingVersion">現在のエンドポイント オブジェクトの <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
      <param name="writer">エンドポイント アドレスの保存先にする <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> または <paramref name="addressingVersion" /> が null です。</exception>
    </member>
    <member name="T:System.ServiceModel.EndpointAddressBuilder">
      <summary>指定されたプロパティ値を持つ新しい (不変の) エンドポイント アドレスを生成するためのファクトリ。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.EndpointAddressBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.#ctor(System.ServiceModel.EndpointAddress)">
      <summary>
        <see cref="T:System.ServiceModel.EndpointAddressBuilder" /> クラスの新しいインスタンスをクラスの既存のエンドポイント アドレスの値で初期化します。</summary>
      <param name="address">このインスタンスのプロパティ値の初期化に使用するプロパティ値を持つ <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> が null です。</exception>
    </member>
    <member name="P:System.ServiceModel.EndpointAddressBuilder.Headers">
      <summary>ビルダーで作成できるエンドポイントのアドレス ヘッダーのコレクションを取得します。</summary>
      <returns>ビルダーが作成できるエンドポイントのアドレス ヘッダーが格納された、型 <see cref="T:System.ServiceModel.Channels.AddressHeader" /> の <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="M:System.ServiceModel.EndpointAddressBuilder.ToEndpointAddress">
      <summary>新しいエンドポイント アドレスを作成し、現在のエンドポイント アドレス ビルダーのプロパティ値で初期化します。</summary>
      <returns>現在のエンドポイント アドレス ビルダーの値で初期化されたプロパティを持つ <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.EndpointAddressBuilder.Uri">
      <summary>ビルダーが作成できるエンドポイントの URI を取得または設定します。</summary>
      <returns>エンドポイント アドレスを指定する <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.ServiceModel.EndpointNotFoundException">
      <summary>リモート エンドポイントが見つからなかった場合、およびリモート エンドポイントに到達できなかった場合にスローされる例外。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointNotFoundException.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.EndpointNotFoundException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.ServiceModel.EndpointNotFoundException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.EndpointNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.ServiceModel.EndpointNotFoundException" /> クラスの新しいインスタンスを、指定されたエラー メッセージと現在の例外を発生させた内部例外で初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外がスローされる原因となった <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.EnvelopeVersion">
      <summary>メッセージとその交換に関連付けられている SOAP のバージョンに関連する情報が含まれています。</summary>
    </member>
    <member name="M:System.ServiceModel.EnvelopeVersion.GetUltimateDestinationActorValues">
      <summary>最終的な宛先の現在のメッセージ バージョンに関連付けられている SOAP ロールの URI 名が格納されている文字列を取得します。</summary>
      <returns>SOAP 1.1 が使用されている場合は空の文字列、SOAP 1.2 が使用されている場合は http://www.w3.org/2003/05/soap-envelope/role/ultimateReceiver の格納された文字列。</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.NextDestinationActorValue">
      <summary>次の宛先の現在のメッセージ バージョンに関連付けられている SOAP ロールの URI 名が格納されている文字列を取得します。</summary>
      <returns>
        <see cref="P:System.ServiceModel.EnvelopeVersion.Soap11" /> が使用されている場合は http://schemas.xmlsoap.org/soap/actor/next の格納された文字列、<see cref="P:System.ServiceModel.EnvelopeVersion.Soap12" /> が使用されている場合は http://www.w3.org/2003/05/soap-envelope/role/next の格納された文字列、<see cref="T:System.ServiceModel.EnvelopeVersion" /> が <see cref="P:System.ServiceModel.EnvelopeVersion.None" /> の場合は空の文字列。</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.None">
      <summary>どのバージョンの SOAP も使用しないバージョンのエンベロープを取得します。</summary>
      <returns>SOAP 形式を使用しないエンベロープ バージョン。</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.Soap11">
      <summary>SOAP 1.1 エンベロープ バージョンを取得します。</summary>
      <returns>SOAP 1.1 <see cref="T:System.ServiceModel.EnvelopeVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.EnvelopeVersion.Soap12">
      <summary>SOAP 1.2 エンベロープ バージョンを取得します。</summary>
      <returns>SOAP 1.2 <see cref="T:System.ServiceModel.EnvelopeVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.EnvelopeVersion.ToString">
      <summary>現在のエンベロープ バージョンを表す文字列を取得します。</summary>
      <returns>現在のエンベロープ バージョン。</returns>
    </member>
    <member name="T:System.ServiceModel.ExceptionDetail">
      <summary>エラーの詳細情報を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.ExceptionDetail.#ctor(System.Exception)">
      <summary>
        <see cref="T:System.ServiceModel.ExceptionDetail" /> クラスの新しいインスタンスを例外で初期化します。</summary>
      <param name="exception">
        <see cref="T:System.ServiceModel.ExceptionDetail" /> オブジェクトとしてシリアル化された例外。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> パラメーターが null です。</exception>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.InnerException">
      <summary>内部例外を表す <see cref="T:System.ServiceModel.ExceptionDetail" /> オブジェクトを取得または設定します。</summary>
      <returns>内部例外情報。</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.Message">
      <summary>コンストラクターに渡される例外のメッセージを取得または設定します。</summary>
      <returns>例外メッセージ。</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.StackTrace">
      <summary>コンストラクターに渡される例外のスタック トレース情報を取得または設定します。</summary>
      <returns>例外のスタック トレース。</returns>
    </member>
    <member name="M:System.ServiceModel.ExceptionDetail.ToString">
      <summary>コンストラクターに渡される例外の例外詳細情報を返します。</summary>
      <returns>例外のメッセージとスタック トレース。</returns>
    </member>
    <member name="P:System.ServiceModel.ExceptionDetail.Type">
      <summary>コンストラクターに渡される例外の型文字列を取得または設定します。</summary>
      <returns>コンストラクターに渡される例外の型文字列。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultCode">
      <summary>SOAP エラー コードを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String)">
      <summary>
        <see cref="T:System.ServiceModel.FaultCode" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">フォールト コードの名前。</param>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String,System.ServiceModel.FaultCode)">
      <summary>
        <see cref="T:System.ServiceModel.FaultCode" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">フォールト コードの名前。</param>
      <param name="subCode">エラー サブコード。</param>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String,System.String)">
      <summary>指定した名前と名前空間を使用して、<see cref="T:System.ServiceModel.FaultCode" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">フォールト コードのローカル名。</param>
      <param name="ns">フォールト コードの名前空間の名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> または <paramref name="ns" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> が空の文字列です。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultCode.#ctor(System.String,System.String,System.ServiceModel.FaultCode)">
      <summary>指定された名前、名前空間、およびエラー サブコードで <see cref="T:System.ServiceModel.FaultCode" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">フォールト コードのローカル名。</param>
      <param name="ns">エラー コードの名前空間の名前。</param>
      <param name="subCode">フォールト サブコードを表す <see cref="T:System.ServiceModel.FaultCode" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> または <paramref name="ns" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> が空の文字列です。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultCode.CreateSenderFaultCode(System.ServiceModel.FaultCode)">
      <summary>指定されたサブコードで送信側エラー コードを作成します。</summary>
      <returns>
        <see cref="P:System.ServiceModel.FaultCode.SubCode" /> プロパティで作成された SOAP エラー サブコードを持つ <see cref="T:System.ServiceModel.FaultCode" /> オブジェクト。</returns>
      <param name="subCode">フォールト サブコードを表す <see cref="T:System.ServiceModel.FaultCode" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="subCode" /> が null です。</exception>
    </member>
    <member name="P:System.ServiceModel.FaultCode.IsPredefinedFault">
      <summary>エラーが SOAP 1.1 または SOAP 1.2 のエラーかどうかを示す値を取得します。</summary>
      <returns>エラーが SOAP 1.1 または SOAP 1.2 のエラーの場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.IsReceiverFault">
      <summary>エラーが SOAP 1.1 サーバー エラーまたは SOAP 1.2 レシーバー エラーかどうかを示す値を取得します。</summary>
      <returns>エラーが SOAP 1.1 サーバー エラーまたは SOAP 1.2 のレシーバー エラーの場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.IsSenderFault">
      <summary>エラーが SOAP 1.1 クライアント エラーまたは SOAP 1.2 送信側エラーかどうかを示す値を取得します。</summary>
      <returns>エラーが SOAP 1.1 クライアント エラーまたは SOAP 1.2 送信側エラーの場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.Name">
      <summary>エラー コードのローカル名を取得します。</summary>
      <returns>フォールト コードのローカル名。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.Namespace">
      <summary>エラー コードの名前空間を取得します。</summary>
      <returns>名前空間の Uniform Resource Identifier (URI)。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultCode.SubCode">
      <summary>エラー サブコードを取得します。</summary>
      <returns>フォールト サブコードを表す <see cref="T:System.ServiceModel.FaultCode" /> オブジェクト。 </returns>
    </member>
    <member name="T:System.ServiceModel.FaultContractAttribute">
      <summary>サービス操作で処理エラーが発生した場合に返される 1 つまたは複数の SOAP エラーを指定します。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.ServiceModel.FaultContractAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="detailType">呼び出し側のエラー情報が格納された、シリアル化可能な型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="detailType" /> 引数が null です。</exception>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.Action">
      <summary>操作コントラクトの一部として指定された SOAP エラー メッセージのアクションを取得または設定します。</summary>
      <returns>SOAP エラー メッセージのアクションの値。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.DetailType">
      <summary>エラー情報が格納された、シリアル化可能なオブジェクトの型を取得します。</summary>
      <returns>シリアル化可能なエラー クラスを表す型。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.Name">
      <summary>Web サービス記述言語 (WSDL) で記述されたエラー メッセージの名前を取得または設定します。</summary>
      <returns>エラー メッセージ名。既定の名前は、エラーの詳細として使用される型の名前です。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultContractAttribute.Namespace">
      <summary>SOAP フォールトの名前空間を取得または設定します。</summary>
      <returns>SOAP フォールトの名前空間。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultException">
      <summary>SOAP フォールトを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.FaultException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.Channels.MessageFault,System.String)">
      <summary>指定されたメッセージ エラー値と提供されたアクション文字列を使用して、<see cref="T:System.ServiceModel.FaultException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fault">使用する既定の SOAP エラー値が格納されたメッセージ エラー。</param>
      <param name="action">SOAP フォールトのアクション。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.#ctor(System.ServiceModel.FaultReason,System.ServiceModel.FaultCode,System.String)">
      <summary>指定された理由、エラー コード、およびアクション値を使用して、<see cref="T:System.ServiceModel.FaultException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="reason">SOAP フォールトの理由。</param>
      <param name="code">SOAP フォールトのフォールト コード。</param>
      <param name="action">SOAP エラーのアクション値。</param>
    </member>
    <member name="P:System.ServiceModel.FaultException.Action">
      <summary>エラー メッセージの SOAP アクションの値を取得します。</summary>
      <returns>エラー メッセージの SOAP アクションの値。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultException.Code">
      <summary>SOAP エラーのエラー コードを取得します。</summary>
      <returns>SOAP フォールトのフォールト コード。</returns>
    </member>
    <member name="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.String,System.Type[])">
      <summary>指定されたメッセージのエラー、アクション、および詳細な型の配列による <see cref="T:System.ServiceModel.FaultException" /> オブジェクトを返します。</summary>
      <returns>SOAP フォールト メッセージを受け取ったことを示すためにスローできる <see cref="T:System.ServiceModel.FaultException" /> オブジェクト。</returns>
      <param name="messageFault">既定の SOAP フォールト情報が含まれたメッセージ フォールト。</param>
      <param name="action">エラー アクション値。</param>
      <param name="faultDetailTypes">フォールトの詳細が含まれた型の配列。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.CreateFault(System.ServiceModel.Channels.MessageFault,System.Type[])">
      <summary>指定されたメッセージのエラーおよび詳細な型の配列による <see cref="T:System.ServiceModel.FaultException" /> オブジェクトを返します。</summary>
      <returns>SOAP フォールト メッセージを受け取ったことを示すためにスローできる <see cref="T:System.ServiceModel.FaultException" /> オブジェクト。</returns>
      <param name="messageFault">既定の SOAP フォールト情報が含まれたメッセージ フォールト。</param>
      <param name="faultDetailTypes">フォールトの詳細が含まれた型の配列。</param>
    </member>
    <member name="M:System.ServiceModel.FaultException.CreateMessageFault">
      <summary>メモリ内の <see cref="T:System.ServiceModel.Channels.MessageFault" /> オブジェクトを返します。</summary>
      <returns>エラーが格納されたメッセージを作成するために <see cref="Overload:System.ServiceModel.Channels.Message.CreateMessage" /> に渡される <see cref="T:System.ServiceModel.Channels.MessageFault" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultException.Message">
      <summary>例外のメッセージを取得します。</summary>
      <returns>例外メッセージ。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultException.Reason">
      <summary>SOAP エラーの <see cref="T:System.ServiceModel.FaultReason" /> を取得します。</summary>
      <returns>SOAP フォールトの理由。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultException`1">
      <summary>クライアント アプリケーション内で、契約により指定された SOAP エラーをキャッチするために使用されます。</summary>
      <typeparam name="TDetail">シリアル化可能なエラー詳細の型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.#ctor(`0,System.ServiceModel.FaultReason,System.ServiceModel.FaultCode,System.String)">
      <summary>指定された詳細オブジェクトと SOAP エラーの理由、コード、およびアクション値で <see cref="T:System.ServiceModel.FaultException`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="detail">SOAP エラー詳細として使用されるオブジェクト。</param>
      <param name="reason">SOAP フォールトの理由。</param>
      <param name="code">SOAP フォールトのフォールト コード。</param>
      <param name="action">SOAP フォールトのアクション。</param>
    </member>
    <member name="P:System.ServiceModel.FaultException`1.Detail">
      <summary>エラーの状態に関する詳細情報が格納されたオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.FaultException`1" /> オブジェクトの型パラメーターである詳細オブジェクト。</returns>
    </member>
    <member name="M:System.ServiceModel.FaultException`1.ToString">
      <summary>
        <see cref="T:System.ServiceModel.FaultException`1" /> オブジェクトの文字列を返します。</summary>
      <returns>SOAP エラーの文字列。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultReason">
      <summary>SOAP エラーのテキストでの説明を提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultReason.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.FaultReasonText})">
      <summary>指定されたエラー翻訳のリストを使用して、<see cref="T:System.ServiceModel.FaultReason" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="translations">
        <see cref="T:System.ServiceModel.FaultReasonText" /> オブジェクトのリスト。各オブジェクトが、指定された言語でのエラーを表します。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="translations" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="translations" /> が空であるか、または 1 つ以上のアイテムが null です。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultReason.#ctor(System.ServiceModel.FaultReasonText)">
      <summary>特定の言語でのエラーを表す、指定されたテキスト要素を使用して、<see cref="T:System.ServiceModel.FaultReason" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="translation">各言語でのエラーの説明に対応する <see cref="T:System.ServiceModel.FaultReasonText" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="translation" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultReason.#ctor(System.String)">
      <summary>テキストを指定して、<see cref="T:System.ServiceModel.FaultReason" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">エラーが発生した理由の説明。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultReason.GetMatchingTranslation">
      <summary>現在のスレッドで使用されている言語でのエラーの説明を取得します。</summary>
      <returns>指定された言語でのエラー テキスト。</returns>
    </member>
    <member name="M:System.ServiceModel.FaultReason.GetMatchingTranslation(System.Globalization.CultureInfo)">
      <summary>指定された言語でのエラーの説明を取得します。</summary>
      <returns>翻訳されたエラーの説明が格納された <see cref="T:System.ServiceModel.FaultReasonText" /> オブジェクト。</returns>
      <param name="cultureInfo">エラーの説明の言語を指定する <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.FaultReason.ToString">
      <summary>エラーの理由を文字列として返します。</summary>
      <returns>エラーの理由。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultReason.Translations">
      <summary>各言語でのエラーの説明のコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.FaultReasonText" /> オブジェクトの <see cref="T:System.Collections.Generic.SynchronizedReadOnlyCollection`1" />。各オブジェクトが異なる言語でのエラーを表します。</returns>
    </member>
    <member name="T:System.ServiceModel.FaultReasonText">
      <summary>SOAP エラーの理由のテキストを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.FaultReasonText.#ctor(System.String)">
      <summary>指定された既定テキストで <see cref="T:System.ServiceModel.FaultReasonText" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">SOAP フォールトの理由を表すテキスト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="text" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.FaultReasonText.#ctor(System.String,System.String)">
      <summary>指定された既定テキストで <see cref="T:System.ServiceModel.FaultReasonText" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">SOAP フォールトの理由を表すテキスト。</param>
      <param name="xmlLang">エラーの言語。</param>
    </member>
    <member name="M:System.ServiceModel.FaultReasonText.Matches(System.Globalization.CultureInfo)">
      <summary>提供された <see cref="T:System.Globalization.CultureInfo" /> オブジェクトと説明の言語が一致するかどうかを示す値を返します。</summary>
      <returns>指定された <see cref="T:System.Globalization.CultureInfo" /> が一致する場合は true、それ以外の場合は false。</returns>
      <param name="cultureInfo">説明の言語と比較する <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。</param>
    </member>
    <member name="P:System.ServiceModel.FaultReasonText.Text">
      <summary>SOAP エラーの理由のテキストを取得します。</summary>
      <returns>SOAP エラーの理由のテキスト。</returns>
    </member>
    <member name="P:System.ServiceModel.FaultReasonText.XmlLang">
      <summary>SOAP エラーの理由の言語を取得します。</summary>
      <returns>SOAP エラーの理由の言語。</returns>
    </member>
    <member name="T:System.ServiceModel.IClientChannel">
      <summary>クライアント アプリケーションによって使用される送信用要求の動作と要求/応答チャネルを定義します。</summary>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.AllowInitializationUI">
      <summary>コレクションが空でない場合に、<see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> が <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers" /> プロパティ内の <see cref="T:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer" /> オブジェクトを呼び出そうとするのか、それとも例外をスローするのかを示す値を取得または設定します。</summary>
      <returns>Windows Communication Foundation (WCF) で対話型チャネル初期化子の呼び出しが許可される場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)">
      <summary>ユーザー インターフェイスで資格情報の取得を開始するための非同期呼び出し。</summary>
      <returns>処理が完了したときにコールバックするために使用される <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">このメソッドが完了したときに呼び出されるメソッド。</param>
      <param name="state">チャネルの状態に関する情報。</param>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.DidInteractiveInitialization">
      <summary>資格情報を取得するためにユーザー インターフェイスが呼び出されたかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> メソッド (または <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> メソッドと <see cref="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)" /> メソッド) が呼び出された場合は true、呼び出されなかった場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.DisplayInitializationUI">
      <summary>資格情報を取得するためのユーザー インターフェイスの呼び出し。</summary>
    </member>
    <member name="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)">
      <summary>
        <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> の呼び出しが完了したときに呼び出されます。</summary>
      <param name="result">
        <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="E:System.ServiceModel.IClientChannel.UnknownMessageReceived">
      <summary>これは予約されたイベントです。</summary>
    </member>
    <member name="P:System.ServiceModel.IClientChannel.Via">
      <summary>クライアント チャネル上で送信されるメッセージの行き先となるトランスポート アドレスが含まれた URI を取得します。</summary>
      <returns>チャネル上で送信されるメッセージの行き先となるトランスポート アドレスが含まれた <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.ServiceModel.ICommunicationObject">
      <summary>システム内のすべての通信志向オブジェクトの基本状態マシンのコントラクトを定義します。チャネル、チャネル マネージャー、ファクトリ、リスナー、ディスパッチャー、およびサービス ホストが含まれます。</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Abort">
      <summary>通信オブジェクトを現在の状態から閉じた状態へすぐに推移させます。</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
      <summary>通信オブジェクトを閉じるための非同期操作を開始します。</summary>
      <returns>非同期の閉じる操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">非同期の閉じる操作の完了通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期の閉じる操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> が <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態のオブジェクトで呼び出されました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> を正常に閉じる前に既定のタイムアウトが経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>通信オブジェクトを閉じる非同期操作を指定されたタイムアウトで開始します。</summary>
      <returns>非同期の閉じる操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">送信操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <param name="callback">非同期の閉じる操作の完了通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期の閉じる操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> が <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態のオブジェクトで呼び出されました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> を正常に閉じる前に指定されたタイムアウトが経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
      <summary>通信オブジェクトを開くための非同期操作を開始します。</summary>
      <returns>非同期の開く操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">非同期の開く操作の完了通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期の開く操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> は開いた状態になることができず、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態になりました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> が <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態になる前に既定のオープン タイムアウトが経過したため、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態になりました。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>通信オブジェクトを開く非同期操作を指定された時間制限で開始します。</summary>
      <returns>非同期の開く操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">送信操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <param name="callback">非同期の開く操作の完了通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期の開く操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> は開いた状態になることができず、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態になりました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> が <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態になる前に、指定されたタイムアウトが経過したため、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態になりました。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Close">
      <summary>通信オブジェクトを現在の状態から閉じた状態へ推移させます。</summary>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.Close" /> が <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態のオブジェクトで呼び出されました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> を正常に閉じる前に既定のクローズ タイムアウトが経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)">
      <summary>通信オブジェクトを現在の状態から閉じた状態へ推移させます。</summary>
      <param name="timeout">送信操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.Close" /> が <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態のオブジェクトで呼び出されました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> が正常に閉じた状態になる前に、タイムアウトが経過しました。</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Closed">
      <summary>通信オブジェクトの閉じる処理中の状態から閉じた状態への変遷が完了したときに発生します。</summary>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Closing">
      <summary>通信オブジェクトが初めて閉じる処理中の状態に入ったときに発生します。</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)">
      <summary>通信オブジェクトを閉じるための非同期操作を完了します。</summary>
      <param name="result">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> メソッドの呼び出しから返された <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginClose" /> が <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態のオブジェクトで呼び出されました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> が正常に閉じた状態になる前に、タイムアウトが経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)">
      <summary>通信オブジェクトを開くための非同期操作を完了します。</summary>
      <param name="result">
        <see cref="M:System.ServiceModel.ICommunicationObject.BeginOpen" /> メソッドの呼び出しから返された <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> は開いた状態になることができず、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態になりました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> が <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態に入り、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態に入るより前にタイムアウトが経過しました。</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Faulted">
      <summary>通信オブジェクトが初めてエラー発生状態に入ったときに発生します。</summary>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Open">
      <summary>通信オブジェクトを作成済みの状態から開いた状態へ推移させます。</summary>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> は開いた状態になることができず、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態になりました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> が <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態になる前に既定のオープン タイムアウトが経過したため、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態になりました。</exception>
    </member>
    <member name="M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)">
      <summary>指定された時間内に、通信オブジェクトを作成済みの状態から開いた状態へ推移させます。</summary>
      <param name="timeout">送信操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <exception cref="T:System.ServiceModel.CommunicationException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> は開いた状態になることができず、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態になりました。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="T:System.ServiceModel.ICommunicationObject" /> が <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態になる前に、指定されたタイムアウトが経過したため、<see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態になりました。</exception>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Opened">
      <summary>通信オブジェクトの開く処理中の状態から開いた状態への変遷が完了したときに発生します。</summary>
    </member>
    <member name="E:System.ServiceModel.ICommunicationObject.Opening">
      <summary>通信オブジェクトが初めて開く処理中の状態に入ったときに発生します。</summary>
    </member>
    <member name="P:System.ServiceModel.ICommunicationObject.State">
      <summary>通信指向オブジェクトの現在の状態を取得します。</summary>
      <returns>オブジェクトの <see cref="T:System.ServiceModel.CommunicationState" /> の値。</returns>
    </member>
    <member name="T:System.ServiceModel.IContextChannel">
      <summary>チャネルのコンテキスト制御のためのインターフェイスを定義します。</summary>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.AllowOutputBatching">
      <summary>トランスポートにメッセージを渡す前にメッセージ セットを保存するように Windows Phone に対して指示する値を取得または設定します。</summary>
      <returns>送信メッセージのバッチ処理が可能な場合は true、バッチ処理が不可能な場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.InputSession">
      <summary>チャネルの入力セッションを取得します。</summary>
      <returns>チャネルの <see cref="T:System.ServiceModel.Channels.IInputSession" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.LocalAddress">
      <summary>チャネルのローカル エンドポイントを取得します。</summary>
      <returns>チャネルのローカル <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.OperationTimeout">
      <summary>操作完了までの制限時間あるいは例外がスローされる時間を取得または設定します。</summary>
      <returns>操作完了までの制限時間を指定する <see cref="T:System.TimeSpan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.OutputSession">
      <summary>チャネルに関連付けられている出力セッションがある場合、そのセッションを取得します。</summary>
      <returns>入力セッションが存在する場合は <see cref="T:System.ServiceModel.Channels.IOutputSession" /> 実装、それ以外の場合は null。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.RemoteAddress">
      <summary>チャネルに関連付けられているリモート アドレスを取得します。</summary>
      <returns>チャネルのリモート <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IContextChannel.SessionId">
      <summary>現在のセッションの識別子がある場合、その識別子を返します。</summary>
      <returns>現在のセッションの識別子がある場合は、その識別子。</returns>
    </member>
    <member name="T:System.ServiceModel.IDefaultCommunicationTimeouts">
      <summary>チャネルとチャネル マネージャー (チャネル ファクトリなど) によって使用される通信タイムアウトを指定するためのインターフェイスを定義します。</summary>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.CloseTimeout">
      <summary>通信オブジェクトによって呼び出されるクローズ メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>クローズ メソッドがタイムアウトするまで待機する時間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.OpenTimeout">
      <summary>通信オブジェクトによって呼び出されるオープン メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>オープン メソッドがタイムアウトするまで待機する時間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.ReceiveTimeout">
      <summary>通信オブジェクトによって呼び出される受信メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>受信メソッドがタイムアウトするまで待機する時間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.IDefaultCommunicationTimeouts.SendTimeout">
      <summary>通信オブジェクトによって呼び出される送信メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>送信メソッドがタイムアウトするまで待機する時間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="T:System.ServiceModel.IExtensibleObject`1">
      <summary>オブジェクトがイベントの登録、状態遷移の監視などのカスタム動作に参加できるようにします。</summary>
      <typeparam name="T">拡張クラスの型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.IExtensibleObject`1.Extensions">
      <summary>この拡張可能オブジェクト用に拡張オブジェクトのコレクションを取得します。</summary>
      <returns>拡張オブジェクトの <see cref="T:System.ServiceModel.IExtensionCollection`1" />。</returns>
    </member>
    <member name="T:System.ServiceModel.IExtension`1">
      <summary>オブジェクトが集約を通じて他のオブジェクトに拡張できるようにします。</summary>
      <typeparam name="T">カスタム動作に参加するオブジェクト。</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtension`1.Attach(`0)">
      <summary>集約されているときに拡張オブジェクトがそれを認識できるようにします。拡張が <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" /> プロパティに追加されたときに呼び出されます。</summary>
      <param name="owner">この拡張を集約する拡張可能オブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.IExtension`1.Detach(`0)">
      <summary>もう集約されていないことをオブジェクトが認識できるようにします。拡張が <see cref="P:System.ServiceModel.IExtensibleObject`1.Extensions" /> プロパティから削除されたときに呼び出されます。</summary>
      <param name="owner">この拡張を集約する拡張可能オブジェクト。</param>
    </member>
    <member name="T:System.ServiceModel.IExtensionCollection`1">
      <summary>
        <see cref="T:System.ServiceModel.IExtension`1" /> オブジェクトの型による取得を可能にする <see cref="T:System.ServiceModel.IExtension`1" /> オブジェクトのコレクション。</summary>
      <typeparam name="T">拡張オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtensionCollection`1.Find``1">
      <summary>コレクション内で指定された拡張オブジェクトを検索します。</summary>
      <returns>見つかった拡張オブジェクト。</returns>
      <typeparam name="E">拡張オブジェクトの種類。</typeparam>
    </member>
    <member name="M:System.ServiceModel.IExtensionCollection`1.FindAll``1">
      <summary>コレクション内で <paramref name="E" /> により指定されたすべての拡張オブジェクトを検索します。</summary>
      <returns>コレクション内の指定された型を実装するすべての拡張オブジェクトのコレクション。</returns>
      <typeparam name="E">拡張オブジェクトの種類。</typeparam>
    </member>
    <member name="T:System.ServiceModel.InvalidMessageContractException">
      <summary>有効ではないメッセージ コントラクトを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.InvalidMessageContractException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.ServiceModel.InvalidMessageContractException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外のメッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.InvalidMessageContractException.#ctor(System.String,System.Exception)">
      <summary>指定されたメッセージと内部例外を使用して、<see cref="T:System.ServiceModel.InvalidMessageContractException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="T:System.ServiceModel.MessageBodyMemberAttribute">
      <summary>メンバーが SOAP 本文内の要素としてシリアル化されるように指定します。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageBodyMemberAttribute.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageBodyMemberAttribute.Order">
      <summary>SOAP 本文内のメンバーがシリアル化される位置を示す値を取得または設定します。</summary>
      <returns>SOAP 本文内での要素の位置。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">プロパティ設定側に渡された値が、負の整数です。</exception>
    </member>
    <member name="T:System.ServiceModel.MessageContractAttribute">
      <summary>SOAP メッセージに対応する、厳密に型指定されたクラスを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageContractAttribute.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.MessageContractAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.IsWrapped">
      <summary>メッセージ本文がラッパー要素を持つかどうかを指定する値を取得または設定します。</summary>
      <returns>メッセージ本文がラッパー要素を持つ場合は true、それ以外の場合は false。既定値は true です。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.WrapperName">
      <summary>メッセージ本文のラッパー要素を取得または設定します。</summary>
      <returns>メッセージ本文内のラッパー要素の名前。</returns>
      <exception cref="T:System.ArgumentNullException">値が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">値が空の文字列です。</exception>
    </member>
    <member name="P:System.ServiceModel.MessageContractAttribute.WrapperNamespace">
      <summary>メッセージ本文のラッパー要素の名前空間を取得または設定します。</summary>
      <returns>ラッパー要素の名前空間。</returns>
    </member>
    <member name="T:System.ServiceModel.MessageContractMemberAttribute">
      <summary>
        <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> の基本メンバーを宣言します。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageContractMemberAttribute.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.MessageContractMemberAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageContractMemberAttribute.Name">
      <summary>このメンバーに対応する要素の名前を指定します。</summary>
      <returns>このメンバーに対応する要素の名前。この文字列は、有効な XML 要素名でなければなりません。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageContractMemberAttribute.Namespace">
      <summary>このメンバーに対応する要素の名前空間を指定します。</summary>
      <returns>このメンバーに対応する要素の名前空間 URI。 </returns>
    </member>
    <member name="T:System.ServiceModel.MessageHeaderException">
      <summary>メッセージが処理された際に、SOAP メッセージのヘッダーに関して期待される内容が満たされなかった場合にスローされる例外。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.MessageHeaderException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.ServiceModel.MessageHeaderException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外に含まれていたメッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Boolean)">
      <summary>指定されたメッセージと、メッセージ ヘッダーが重複しているのかそれとも見つからないのかを示す値を使用して、<see cref="T:System.ServiceModel.MessageHeaderException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="isDuplicate">複数のメッセージ ヘッダーが重複する場合は true、メッセージ ヘッダーがない場合は false。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.Exception)">
      <summary>指定されたメッセージと例外を発生させた内部例外を使用して、<see cref="T:System.ServiceModel.MessageHeaderException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="innerException">例外の原因となった内部例外を含む <see cref="T:System.Exception" />。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String)">
      <summary>指定されたメッセージ、ヘッダー名、および名前空間を使用して、<see cref="T:System.ServiceModel.MessageHeaderException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="headerName">メッセージ ヘッダーの名前。</param>
      <param name="ns">メッセージ ヘッダーの名前空間。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean)">
      <summary>指定されたメッセージ、ヘッダー名、名前空間、およびメッセージ ヘッダーが重複しているのかそれとも見つからないのかを示す値を使用して、<see cref="T:System.ServiceModel.MessageHeaderException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="headerName">メッセージ ヘッダーの名前。</param>
      <param name="ns">メッセージ ヘッダーの名前空間。</param>
      <param name="isDuplicate">複数のメッセージ ヘッダーが重複する場合は true、メッセージ ヘッダーがない場合は false。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Boolean,System.Exception)">
      <summary>指定されたメッセージ、ヘッダー名、名前空間、メッセージ ヘッダーが重複しているのかそれとも見つからないのかを示す値、および例外を発生させた内部例外を使用して、<see cref="T:System.ServiceModel.MessageHeaderException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="headerName">メッセージ ヘッダーの名前。</param>
      <param name="ns">メッセージ ヘッダーの名前空間。</param>
      <param name="isDuplicate">複数のメッセージ ヘッダーが重複する場合は true、メッセージ ヘッダーがない場合は false。</param>
      <param name="innerException">例外の原因となった内部例外を含む <see cref="T:System.Exception" />。</param>
    </member>
    <member name="M:System.ServiceModel.MessageHeaderException.#ctor(System.String,System.String,System.String,System.Exception)">
      <summary>指定されたメッセージ、ヘッダー名、名前空間、および例外を発生させた内部例外を使用して、<see cref="T:System.ServiceModel.MessageHeaderException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="headerName">メッセージ ヘッダーの名前。</param>
      <param name="ns">メッセージ ヘッダーの名前空間。</param>
      <param name="innerException">例外の原因となった内部例外を含む <see cref="T:System.Exception" />。</param>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.HeaderName">
      <summary>例外を発生させた SOAP ヘッダーの名前を取得します。</summary>
      <returns>SOAP ヘッダーの名前。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.HeaderNamespace">
      <summary>例外を発生させた SOAP ヘッダーの名前空間を取得します。</summary>
      <returns>SOAP ヘッダーの名前空間。</returns>
    </member>
    <member name="P:System.ServiceModel.MessageHeaderException.IsDuplicate">
      <summary>複数のメッセージ ヘッダーがあるのか、それともメッセージ ヘッダーはないのかを示す値を取得します。</summary>
      <returns>複数のメッセージ ヘッダーが重複する場合は true、メッセージ ヘッダーがない場合は false。</returns>
    </member>
    <member name="T:System.ServiceModel.MessageParameterAttribute">
      <summary>要求の名前および応答パラメーターの名前を制御します。<see cref="T:System.ServiceModel.Channels.Message" /> またはメッセージ コントラクトと一緒に使用することはできません。</summary>
    </member>
    <member name="M:System.ServiceModel.MessageParameterAttribute.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.MessageParameterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.MessageParameterAttribute.Name">
      <summary>XML スキーマ (XSD) 内のパラメーターの名前属性を取得または設定します。</summary>
      <returns>XSD 内のパラメーターの名前属性。</returns>
      <exception cref="T:System.ArgumentNullException">値が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">値が空の文字列です。</exception>
    </member>
    <member name="T:System.ServiceModel.OperationContext">
      <summary>サービス メソッドの実行コンテキストへのアクセスを提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.OperationContext.#ctor(System.ServiceModel.IContextChannel)">
      <summary>クライアント アプリケーション内で指定された <see cref="T:System.ServiceModel.IContextChannel" /> を使用して、<see cref="T:System.ServiceModel.OperationContext" /> クラスの新しいインスタンスを初期します。</summary>
      <param name="channel">新しいクライアント <see cref="T:System.ServiceModel.OperationContext" /> を作成するために使用される <see cref="T:System.ServiceModel.IContextChannel" />。</param>
      <exception cref="T:System.ArgumentNullException">チャネルが null です。</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContext.Current">
      <summary>現在のスレッドの実行コンテキストを取得または設定します。</summary>
      <returns>現在のメソッドのメッセージングおよび実行コンテキストを表す <see cref="T:System.ServiceModel.OperationContext" />。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageHeaders">
      <summary>
        <see cref="T:System.ServiceModel.OperationContext" /> の着信メッセージ ヘッダーを取得します。</summary>
      <returns>着信メッセージ ヘッダーが格納された <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageProperties">
      <summary>
        <see cref="T:System.ServiceModel.OperationContext" /> 内の着信メッセージのメッセージ プロパティを取得します。</summary>
      <returns>着信メッセージのメッセージ プロパティが格納された <see cref="T:System.ServiceModel.Channels.MessageProperties" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IncomingMessageVersion">
      <summary>
        <see cref="T:System.ServiceModel.OperationContext" /> の着信 SOAP メッセージ バージョンを取得します。</summary>
      <returns>着信メッセージの SOAP バージョン。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.IsUserContext">
      <summary>このプロパティは、システムが使用するためのもので、ユーザーが呼び出すことは想定されていません。</summary>
      <returns>true。</returns>
    </member>
    <member name="E:System.ServiceModel.OperationContext.OperationCompleted">
      <summary>操作の完了時に発生します。</summary>
    </member>
    <member name="P:System.ServiceModel.OperationContext.OutgoingMessageHeaders">
      <summary>アクティブな <see cref="T:System.ServiceModel.OperationContext" /> の発信メッセージ ヘッダーを取得します。</summary>
      <returns>アクティブな <see cref="T:System.ServiceModel.OperationContext" /> の発信メッセージ ヘッダーが格納された <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.OutgoingMessageProperties">
      <summary>アクティブな <see cref="T:System.ServiceModel.OperationContext" /> 内の発信メッセージのメッセージ プロパティを取得します。</summary>
      <returns>発信メッセージのメッセージ プロパティが格納された <see cref="T:System.ServiceModel.Channels.MessageProperties" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContext.RequestContext">
      <summary>このメソッドの要求コンテキスト実装を取得または設定します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.RequestContext" /> 実装、または要求コンテキストがない場合は null。</returns>
    </member>
    <member name="T:System.ServiceModel.OperationContextScope">
      <summary>スコープに <see cref="T:System.ServiceModel.OperationContext" /> オブジェクトが含まれるブロックを作成します。</summary>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)">
      <summary>指定した <see cref="T:System.ServiceModel.IContextChannel" /> を使用して新しい <see cref="T:System.ServiceModel.OperationContext" /> のスコープを作成する <see cref="T:System.ServiceModel.OperationContextScope" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="channel">新しい <see cref="T:System.ServiceModel.OperationContext" /> のスコープを作成する際に使用するチャネル。</param>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)">
      <summary>指定した <see cref="T:System.ServiceModel.OperationContext" /> オブジェクトのスコープを作成する <see cref="T:System.ServiceModel.OperationContextScope" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="context">作成されたスコープ内でアクティブな <see cref="T:System.ServiceModel.OperationContext" />。</param>
    </member>
    <member name="M:System.ServiceModel.OperationContextScope.Dispose">
      <summary>元の <see cref="T:System.ServiceModel.OperationContext" /> をアクティブなコンテキストに戻し、<see cref="T:System.ServiceModel.OperationContextScope" /> オブジェクトを再利用します。</summary>
    </member>
    <member name="T:System.ServiceModel.OperationContractAttribute">
      <summary>メソッドが、Windows Phone アプリケーションのサービス コントラクトの一部である操作を定義することを示します。</summary>
    </member>
    <member name="M:System.ServiceModel.OperationContractAttribute.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.OperationContractAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.Action">
      <summary>要求メッセージの WS-Addressing アクションを取得または設定します。</summary>
      <returns>WS-Addressing の Action ヘッダーを生成するために使用するアクション。</returns>
      <exception cref="T:System.ArgumentNullException">値が null です。</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.AsyncPattern">
      <summary>サービス コントラクト内で Begin&lt;methodName&gt; および End&lt;methodName&gt; メソッド ペアを使用して、操作が非同期的に実装されていることを示します。</summary>
      <returns>Begin&lt;methodName&gt;メソッドが End&lt;methodName&gt; メソッドと一致し、サービス インターフェイス上で非同期のメソッド ペアとして実装される操作としてインフラストラクチャで処理可能である場合は true、それ以外の場合は false。既定値は false です。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.IsOneWay">
      <summary>操作が返信メッセージを返すかどうかを示す値を取得または設定します。</summary>
      <returns>操作が返信メッセージを返さない場合は true、返す場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.Name">
      <summary>操作の名前を取得または設定します。</summary>
      <returns>操作の名前。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.ServiceModel.OperationContractAttribute.Name" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">値が空の文字列です。</exception>
    </member>
    <member name="P:System.ServiceModel.OperationContractAttribute.ReplyAction">
      <summary>操作の返信メッセージの SOAP アクションの値を取得または設定します。</summary>
      <returns>返信メッセージの SOAP アクションの値。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.ServiceModel.OperationContractAttribute.ReplyAction" /> が null です。</exception>
    </member>
    <member name="T:System.ServiceModel.OperationFormatStyle">
      <summary>サービスの WSDL メタデータがどのような形式になるかを決定する SOAP スタイルを表します。</summary>
    </member>
    <member name="F:System.ServiceModel.OperationFormatStyle.Document">
      <summary>WSDL 表現に、操作で交換されるドキュメントを表す単一の要素が含まれるようにします。</summary>
    </member>
    <member name="F:System.ServiceModel.OperationFormatStyle.Rpc">
      <summary>メッセージの WSDL 表現を操作で交換されるようにし、リモート プロシージャ コールであるかのようにパラメーターが含まれるようにします。</summary>
    </member>
    <member name="T:System.ServiceModel.ProtocolException">
      <summary>データ転送プロトコルの不一致が原因でリモート側と通信できない場合にスローされ、クライアントに示される例外。</summary>
    </member>
    <member name="M:System.ServiceModel.ProtocolException.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.ProtocolException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.ProtocolException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.ServiceModel.ProtocolException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.ProtocolException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、例外の原因である内部例外への参照を使用して、<see cref="T:System.ServiceModel.ProtocolException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外がスローされる原因となった <see cref="T:System.Exception" />。 </param>
    </member>
    <member name="T:System.ServiceModel.QuotaExceededException">
      <summary>メッセージ クォータが超過した場合にスローされる例外。</summary>
    </member>
    <member name="M:System.ServiceModel.QuotaExceededException.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.QuotaExceededException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.QuotaExceededException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.ServiceModel.QuotaExceededException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.QuotaExceededException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、例外の原因である内部例外への参照を使用して、<see cref="T:System.ServiceModel.QuotaExceededException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外がスローされる原因となった <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.ServerTooBusyException">
      <summary>サーバーがビジー状態のためメッセージを受け入れられない場合にスローされる例外。</summary>
    </member>
    <member name="M:System.ServiceModel.ServerTooBusyException.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.ServerTooBusyException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.ServiceModel.ServerTooBusyException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.ServerTooBusyException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、例外の原因である内部例外への参照を使用して、<see cref="T:System.ServiceModel.ServerTooBusyException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外がスローされる原因となった <see cref="T:System.Exception" />。</param>
    </member>
    <member name="T:System.ServiceModel.ServiceActivationException">
      <summary>サービスがアクティブ化に失敗した場合にスローされる例外。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceActivationException.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.ServiceActivationException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceActivationException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.ServiceModel.ServiceActivationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceActivationException.#ctor(System.String,System.Exception)">
      <summary>指定されたエラー メッセージと提供された内部例外を使用して、<see cref="T:System.ServiceModel.ServiceActivationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外がスローされる原因となった <see cref="T:System.Exception" />。 </param>
    </member>
    <member name="T:System.ServiceModel.ServiceContractAttribute">
      <summary>インターフェイスまたはクラスが Windows Phone クライアント アプリケーション内でサービス コントラクトを定義することを示します。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceContractAttribute.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.ServiceContractAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.CallbackContract">
      <summary>コントラクトが二重のコントラクトの場合のコールバック コントラクトの種類を取得または設定します。</summary>
      <returns>コールバック コントラクトを示す <see cref="T:System.Type" />。既定値は null です。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.ConfigurationName">
      <summary>アプリケーション構成ファイル内でサービスの場所を指定するために使用される名前を取得または設定します。</summary>
      <returns>アプリケーション構成ファイル内でサービス要素の場所を指定するために使用される名前。既定では、サービス実装クラスの名前になります。</returns>
      <exception cref="T:System.ArgumentNullException">値が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">値が空の文字列です。</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.Name">
      <summary>Web サービス記述言語 (WSDL) で記述された &lt;portType&gt; 要素の名前を取得または設定します。</summary>
      <returns>既定値は、<see cref="T:System.ServiceModel.ServiceContractAttribute" /> の適用先となるクラスまたはインターフェイスの名前です。</returns>
      <exception cref="T:System.ArgumentNullException">値が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">値が空の文字列です。</exception>
    </member>
    <member name="P:System.ServiceModel.ServiceContractAttribute.Namespace">
      <summary>Web サービス記述言語 (WSDL) で記述された &lt;portType&gt; 要素の名前空間を取得または設定します。</summary>
      <returns>&lt;portType&gt; 要素の WSDL 名前空間。既定値は、"http://tempuri.org" です。</returns>
    </member>
    <member name="T:System.ServiceModel.ServiceKnownTypeAttribute">
      <summary>シリアル化または逆シリアル化を行う際にサービスが使用する既知の型を指定します。</summary>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> クラスの新しいインスタンスを初期化し、既知の型を返すメソッドの名前を指定します。</summary>
      <param name="methodName">既知の種類を返すメソッドの名前。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.String,System.Type)">
      <summary>
        <see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> クラスの新しいインスタンスを、既知の型を返すメソッドの名前と既知の型を返すメソッド (複数可) が格納された型で初期化します。</summary>
      <param name="methodName">既知の種類を返すメソッドの名前。</param>
      <param name="declaringType">そのオブジェクト グラフ内で既知の型を使用できる型。</param>
    </member>
    <member name="M:System.ServiceModel.ServiceKnownTypeAttribute.#ctor(System.Type)">
      <summary>既知の型を指定して、<see cref="T:System.ServiceModel.ServiceKnownTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">パラメーター内で使用できる既知の型を指定するか、またはサービスにより定義された値を返します。</param>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.DeclaringType">
      <summary>既知の型を返すメソッドが含まれた型を取得します。</summary>
      <returns>既知の型を返すメソッド。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.MethodName">
      <summary>既知の型のコレクションを返すメソッドの名前を取得します。</summary>
      <returns>既知の型を返すメソッドの名前。</returns>
    </member>
    <member name="P:System.ServiceModel.ServiceKnownTypeAttribute.Type">
      <summary>オブジェクト グラフに含めることができる既知の型。</summary>
      <returns>既知の型の <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ServiceModel.UnknownMessageReceivedEventArgs">
      <summary>チャネルで受信されたメッセージが格納されます。どの保留要求とも関連付けることはできません。</summary>
    </member>
    <member name="P:System.ServiceModel.UnknownMessageReceivedEventArgs.Message">
      <summary>イベントを発生させた不明メッセージを取得します。</summary>
      <returns>イベントを発生させた <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressHeader">
      <summary>エンドポイントの識別またはエンドポイントとの対話に使用されるアドレス情報アイテムをカプセル化するヘッダーを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.AddressHeader" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.CreateAddressHeader(System.String,System.String,System.Object)">
      <summary>指定された値、名前、および名前空間で <see cref="T:System.ServiceModel.Channels.AddressHeader" /> クラスの新しいインスタンスを初期化します。</summary>
      <returns>指定した <paramref name="name" />、および <paramref name="value" /> によって指定した情報項目が含まれている <paramref name="ns" /> が記載された <see cref="T:System.ServiceModel.Channels.AddressHeader" />。</returns>
      <param name="name">アドレス ヘッダーの名前。</param>
      <param name="ns">アドレス ヘッダーの名前空間。</param>
      <param name="value">アドレス ヘッダーの情報項目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が null または <paramref name="name" />.Length == 0 です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.CreateAddressHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>指定された名前と、指定されたオブジェクトからの情報アイテムのシリアル化に指定されたフォーマッタを使用する名前空間で、<see cref="T:System.ServiceModel.Channels.AddressHeader" /> クラスの新しいインスタンスを作成します。</summary>
      <returns>指定した <paramref name="name" />、および <paramref name="value" /> によって指定した情報項目が含まれている <paramref name="ns" /> が記載された <see cref="T:System.ServiceModel.Channels.AddressHeader" />。</returns>
      <param name="name">アドレス ヘッダーの名前。</param>
      <param name="ns">アドレス ヘッダーの名前空間。</param>
      <param name="value">アドレス ヘッダーの情報項目。</param>
      <param name="serializer">
        <paramref name="value" /> パラメーターで指定されたオブジェクトのシリアル化に使用される <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> または <paramref name="serializer" /> が null であるか、<paramref name="name" />.Length == 0 です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.Equals(System.Object)">
      <summary>指定されたオブジェクト内の情報アイテムが現在のアドレス ヘッダーに格納されているオブジェクトと等しいかどうかを調べます。</summary>
      <returns>指定された <paramref name="obj" /> 内の情報アイテムが現在のアドレス ヘッダーに格納されている情報アイテムと等しい場合は true、それ以外の場合は false。特に、<paramref name="obj" /> が null の場合は false を返します。</returns>
      <param name="obj">現在のアドレス ヘッダーに格納されているオブジェクトと比較する <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetAddressHeaderReader">
      <summary>現在のアドレス ヘッダー オブジェクトをシリアル化できる XML リーダーを返します。</summary>
      <returns>現在のアドレス ヘッダー オブジェクトをシリアル化できる <see cref="T:System.Xml.XmlDictionaryReader" /> のインスタンス。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetHashCode">
      <summary>アドレス ヘッダーの一意のハッシュ コードを提供します。</summary>
      <returns>現在のアドレス ヘッダーの一意のハッシュ コードを提供します。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetValue``1">
      <summary>現在のアドレス ヘッダーから得た情報アイテムを指定された型のオブジェクトへと逆シリアル化します。</summary>
      <returns>フィールドとプロパティが現在のアドレス ヘッダー オブジェクトで指定された値に設定されている <paramref name="T" /> 型のクラスのインスタンス。</returns>
      <typeparam name="T">フィールドとプロパティが現在のアドレス ヘッダー オブジェクトで指定された値に設定されている <paramref name="T" /> 型のクラス。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.GetValue``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>現在のアドレス ヘッダーから得た情報アイテムを、この情報のシリアル化に指定されたフォーマッタを使用する指定されたタイプのオブジェクトへと逆シリアル化します。</summary>
      <returns>フィールドとプロパティが現在のアドレス ヘッダー オブジェクトで指定された値に設定されている <paramref name="T" /> 型のクラスのインスタンス。</returns>
      <param name="serializer">現在のアドレス ヘッダー オブジェクトから得た情報アイテムの逆シリアル化に使用された <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <typeparam name="T">フィールドとプロパティが現在のアドレス ヘッダー オブジェクトで指定された値に設定されている <paramref name="T" /> 型のクラス。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializer" /> が null です。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressHeader.Name">
      <summary>実装されると、アドレス ヘッダーの名前を取得します。</summary>
      <returns>アドレス ヘッダーの名前。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressHeader.Namespace">
      <summary>実装されると、アドレス ヘッダーの名前空間を取得します。</summary>
      <returns>アドレス ヘッダーの名前空間。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.OnWriteAddressHeaderContents(System.Xml.XmlDictionaryWriter)">
      <summary>派生クラス内でオーバーライドされると、アドレス ヘッダーの内容がストリームまたはファイルに書き込まれたときに呼び出されます。</summary>
      <param name="writer">アドレス ヘッダーの内容をストリームまたはファイルへ書き込むために使用する <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.OnWriteStartAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>派生クラス内でオーバーライドされると、アドレス ヘッダーの内容のストリームまたはファイルへの書き込みが開始したときに呼び出されます。</summary>
      <param name="writer">アドレス ヘッダーをストリームまたはファイルへ書き込むために使用する <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.ToMessageHeader">
      <summary>アドレス ヘッダーをメッセージ ヘッダーとしてラップします。</summary>
      <returns>現在のアドレス ヘッダーをラップする <see cref="T:System.ServiceModel.Channels.MessageHeader" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>指定された <see cref="T:System.Xml.XmlDictionaryWriter" /> を使用してアドレス ヘッダーをストリームまたはファイルへ書き込みます。</summary>
      <param name="writer">アドレス ヘッダーをストリームまたはファイルへ書き込むために使用する <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeader(System.Xml.XmlWriter)">
      <summary>指定された <see cref="T:System.Xml.XmlWriter" /> を使用してアドレス ヘッダーをストリームまたはファイルへ書き込みます。</summary>
      <param name="writer">アドレス ヘッダーをストリームまたはファイルへ書き込むために使用する <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteAddressHeaderContents(System.Xml.XmlDictionaryWriter)">
      <summary>アドレス ヘッダーの内容をストリームまたはファイルに書き込みます。</summary>
      <param name="writer">アドレス ヘッダーの内容をストリームまたはファイルへ書き込むために使用する <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeader.WriteStartAddressHeader(System.Xml.XmlDictionaryWriter)">
      <summary>アドレス ヘッダーの内容をストリームまたはファイルに書き込み始めます。</summary>
      <param name="writer">アドレス ヘッダーをストリームまたはファイルへ書き込むために使用する <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> が null です。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressHeaderCollection">
      <summary>アドレス ヘッダーのスレッド セーフな読み取り専用コレクションを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.AddressHeader})">
      <summary>アドレス ヘッダーの列挙可能なセットを使用して <see cref="T:System.ServiceModel.Channels.AddressHeaderCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="addressHeaders">コレクションの初期化に使用される、<see cref="T:System.ServiceModel.Channels.AddressHeader" /> オブジェクトの <see cref="T:System.Collections.Generic.IEnumerable`1" /> のセット。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="addressHeaders" /> パラメーター内のアドレス ヘッダーの 1 つは null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.AddHeadersTo(System.ServiceModel.Channels.Message)">
      <summary>指定されたメッセージのヘッダーにコレクション内のヘッダーを追加します。</summary>
      <param name="message">ヘッダーの追加先とする <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.FindAll(System.String,System.String)">
      <summary>コレクション内で、指定された名前と名前空間を持つすべてのアドレス ヘッダーを検索します。</summary>
      <returns>コレクション内の、指定された名前と名前空間を持つすべてのヘッダーが格納された、型 <see cref="T:System.ServiceModel.Channels.AddressHeader" /> の <see cref="T:System.Array" />。</returns>
      <param name="name">検索するアドレス ヘッダーの名前。</param>
      <param name="ns">検索するアドレス ヘッダーの名前空間。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> または <paramref name="ns" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressHeaderCollection.FindHeader(System.String,System.String)">
      <summary>コレクション内で、指定された名前と名前空間を持つ最初のアドレス ヘッダーを検索します。</summary>
      <returns>コレクション内の、指定された名前と名前空間を持つ <see cref="T:System.ServiceModel.Channels.AddressHeader" />。</returns>
      <param name="name">検索するアドレス ヘッダーの名前。</param>
      <param name="ns">検索するアドレス ヘッダーの名前空間。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> または <paramref name="ns" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">指定した <paramref name="name" /> および <paramref name="ns" /> を持つヘッダーが複数あります。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.AddressingVersion">
      <summary>SOAP メッセージに関連付けられているか、またはエンドポイントによって理解される WS-Addressing のバージョン。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressingVersion.None">
      <summary>WS-Addressing のどのバージョンも使用されていないことを示すアドレス バージョンを取得します。</summary>
      <returns>WS-Addressing のバージョンを使用しない <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.AddressingVersion.ToString">
      <summary>現在のアドレス バージョンを表す文字列。</summary>
      <returns>現在のアドレス バージョン。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.AddressingVersion.WSAddressing10">
      <summary>WS-Addressing 1.0 に関連付けられているアドレス バージョンの識別子を取得します。</summary>
      <returns>WS-Addressing 1.0 に関連付けられている <see cref="T:System.ServiceModel.Channels.AddressingVersion" /> を識別するシングルトン インスタンス。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement">
      <summary>メッセージのエンコードに使用される .NET Binary Format for XML を指定するバインド要素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>指定されたコンテキストおよび種類のチャネルを作成するクライアント上にチャネル ファクトリ スタックをビルドします。</summary>
      <returns>指定したコンテキストの <paramref name="TChannel" /> 型の <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <param name="context">チャネルの <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">チャネル ファクトリによって作成されるチャネルの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.Clone">
      <summary>現在のオブジェクトから初期化された新規 <see cref="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement" /> オブジェクトを作成します。</summary>
      <returns>現在の要素のプロパティ値と同じプロパティ値を持つ <see cref="T:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>SOAP および WS-Addressing のバージョンおよび現在のエンコード バインド要素で指定されている文字エンコードを採用したバイナリ メッセージ エンコーダーのためのファクトリを作成します。</summary>
      <returns>このバインド要素が作成する <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.BinaryMessageEncodingBindingElement.MessageVersion">
      <summary>使用されている、または使用されることになる SOAP メッセージおよび WS-Addressing のバージョンを取得または設定します。</summary>
      <returns>使用されている、または使用されることになる <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
      <exception cref="T:System.ArgumentNullException">設定された値は null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">値セットが、サポートされていないエンベロープ バージョンです。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.Binding">
      <summary>クライアントとサーバーの間の通信に使用されるプロトコル、トランスポート、およびメッセージ エンコーダーを指定するバインド要素が格納されます。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.#ctor">
      <summary>既定の名前と名前空間で <see cref="T:System.ServiceModel.Channels.Binding" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.ServiceModel.Channels.Binding" /> クラスの新しいインスタンスをサービスの指定されたバインドで初期化します。</summary>
      <param name="name">バインドの <see cref="P:System.ServiceModel.Channels.Binding.Name" />。</param>
      <param name="ns">バインドの <see cref="P:System.ServiceModel.Channels.Binding.Namespace" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> が null または空の文字列です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ns" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.Object[])">
      <summary>オブジェクト配列により指定された機能を満たしており、指定されたタイプのチャネルを作成するチャネル ファクトリ スタックをクライアント上に構築します。</summary>
      <returns>コレクションで指定された機能に対応できる <paramref name="TChannel" /> 型の <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <param name="parameters">ビルドされるチャネル ファクトリの要件を指定するオブジェクト配列。</param>
      <typeparam name="TChannel">チャネル ファクトリによって生成されるチャネルの種類。</typeparam>
      <exception cref="T:System.InvalidOperationException">トランスポート要素が見つからないか、または壊れています。あるいは、スキーマが無効であるか、またはメッセージのバージョンが指定されていません。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.BuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>バインド パラメーターのコレクションにより指定された機能を満たしており、指定されたタイプのチャネルを作成するチャネル ファクトリ スタックをクライアント上に構築します。</summary>
      <returns>コレクションで指定された機能に対応できる <paramref name="TChannel" /> 型の <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <param name="parameters">チャネル ファクトリ構築の要件を指定する <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <typeparam name="TChannel">チャネル ファクトリによって生成されるチャネルの種類。</typeparam>
      <exception cref="T:System.InvalidOperationException">トランスポート要素が見つからないか、または壊れています。あるいは、スキーマが無効であるか、またはメッセージのバージョンが指定されていません。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.Object[])">
      <summary>現在のバインドが、オブジェクト配列により指定された要件を満たすチャネル ファクトリ スタックをクライアント上に構築できるかどうかを示す値を返します。</summary>
      <returns>指定したチャネル ファクトリ スタックをクライアントでビルドできる場合は true。ビルドできない場合は false。</returns>
      <param name="parameters">ビルドされるチャネル ファクトリの要件を指定するオブジェクト配列。</param>
      <typeparam name="TChannel">ファクトリをテストするチャネルの種類。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>現在のバインドが、指定されたバインド パラメーターのコレクションを満たすチャネル ファクトリ スタックをクライアント上に構築できるかどうかを示す値を返します。</summary>
      <returns>指定したチャネル ファクトリ スタックをクライアントでビルドできる場合は true。ビルドできない場合は false。</returns>
      <param name="parameters">構築するチャネル ファクトリの要件を指定する <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <typeparam name="TChannel">ファクトリをテストするチャネルの種類。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.CloseTimeout">
      <summary>トランスポートが例外を発生させる前に接続を閉じるために許される時間を取得または設定します。</summary>
      <returns>閉じる操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。既定値は 1 分です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">値が 0 未満であるか、または大きすぎます。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.CreateBindingElements">
      <summary>派生クラス内でオーバーライドされた場合に、現在のバインドの一部であるバインド要素が格納されたコレクションを作成します。</summary>
      <returns>現在のバインド オブジェクトから取得したバインド要素が正しい順序で格納されている、型 <see cref="T:System.ServiceModel.Channels.BindingElement" /> の <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクト。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Binding.GetProperty``1(System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>バインド スタック内の適切なレイヤーから要求された型指定オブジェクトがある場合は、それを戻します。</summary>
      <returns>要求された型指定オブジェクト <paramref name="T" /> がある場合はそのオブジェクト、オブジェクトが存在しない場合は null。</returns>
      <param name="parameters">構築するチャネルの要件を指定する <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <typeparam name="T">メソッドによって照会されている型が指定されたオブジェクト。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.MessageVersion">
      <summary>そのバインドで構成されたクライアントとサービスにより使用されるメッセージのバージョンを取得します。</summary>
      <returns>そのバインドで構成されたクライアントとサービスにより使用される <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Name">
      <summary>バインドの名前を取得または設定します。</summary>
      <returns>バインディングの名前。既定の名前は null です。</returns>
      <exception cref="T:System.ArgumentException">値セットを null や空の文字列にすることはできません。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Namespace">
      <summary>バインドの XML 名前空間を取得または設定します。</summary>
      <returns>バインドの XML 名前空間。既定値は、"http://tempuri.org/" です。</returns>
      <exception cref="T:System.ArgumentNullException">値セットを null にすることはできません。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.OpenTimeout">
      <summary>トランスポートが例外を発生させる前に接続を開くために許される時間を取得または設定します。</summary>
      <returns>開く操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。既定値は 1 分です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">値が 0 未満であるか、または大きすぎます。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.ReceiveTimeout">
      <summary>接続を非アクティブなまま保つことができる時間を取得または設定します。アプリケーション メッセージを受信しないままこの時間が経過すると、接続は切断されます。</summary>
      <returns>アプリケーションがメッセージを受信しなければならない制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。既定値は 10 分です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">値が 0 未満であるか、または大きすぎます。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.Scheme">
      <summary>派生クラス内で実装された場合に、バインドにより構築されたチャネル ファクトリによって使用されるトランスポートを指定する URI スキームを設定します。</summary>
      <returns>現在のバインドにより構築されたファクトリにより作成されるチャネルにより使用される URI スキーム。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Binding.SendTimeout">
      <summary>トランスポートが例外を発生させる前に書き込み操作を完了するために許される時間を取得または設定します。</summary>
      <returns>書き込み操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。既定値は 1 分です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">値が 0 未満であるか、または大きすぎます。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingContext">
      <summary>Windows Phone クライアント上でチャネル ファクトリを構築するために必要なアドレス、バインド、バインド要素、およびバインド パラメーターに関する情報を提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.#ctor(System.ServiceModel.Channels.CustomBinding,System.ServiceModel.Channels.BindingParameterCollection)">
      <summary>指定されたバインドおよびバインド パラメーターのコレクション用に <see cref="T:System.ServiceModel.Channels.BindingContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="binding">チャネルの <see cref="T:System.ServiceModel.Channels.CustomBinding" />。</param>
      <param name="parameters">チャネルの <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> が null です。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.Binding">
      <summary>現在のコンテキスト内で構築されるチャネルのためのバインドを取得します。</summary>
      <returns>現在のコンテキストにビルドされたチャネルの <see cref="T:System.ServiceModel.Channels.CustomBinding" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.BindingParameters">
      <summary>現在のコンテキスト内で構築されるチャネルのためのバインド パラメーターのコレクションを取得します。</summary>
      <returns>現在のコンテキストにビルドされたチャネルの <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.BuildInnerChannelFactory``1">
      <summary>現在のチャネル ファクトリの下で、指定された型のチャネルの内部チャネル ファクトリを構築します。</summary>
      <returns>現在のチャネル ファクトリの内部チャネル ファクトリを表す型 <see cref="T:System.ServiceModel.Channels.IChannel" /> の <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <typeparam name="TChannel">内部チャネル ファクトリによって生成される <see cref="T:System.ServiceModel.Channels.IChannel" /> オブジェクトの種類。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.CanBuildInnerChannelFactory``1">
      <summary>内部チャネル ファクトリが指定された型のチャネルを生成できるかどうかを示す値を返します。</summary>
      <returns>内部チャネル ファクトリが指定された <paramref name="TChannel" /> を生成できる場合は true、それ以外の場合は false。</returns>
      <typeparam name="TChannel">内部チャネル ファクトリによって生成される <see cref="T:System.ServiceModel.Channels.IChannel" /> オブジェクトの種類。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.Clone">
      <summary>現在のチャネル構築コンテキストのコピーを返します。</summary>
      <returns>現在のチャネル構築コンテキストのコピーである <see cref="T:System.ServiceModel.Channels.BindingContext" /> オブジェクト。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingContext.GetInnerProperty``1">
      <summary>バインド スタック内の適切なレイヤーから要求された型指定オブジェクトがある場合は、それを戻します。</summary>
      <returns>要求された型指定オブジェクト <paramref name="T " /> がある場合はそのオブジェクト、オブジェクトが存在しない場合は null。</returns>
      <typeparam name="T">メソッドによって照会されている型が指定されたオブジェクト。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.BindingContext.RemainingBindingElements">
      <summary>チャネル スタックを作成するために他のバインド要素によって使用されるバインド要素を取得します。</summary>
      <returns>チャネル スタックを作成するために他のバインド要素によって使用されるバインド要素が格納された <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingElement">
      <summary>Windows Phone クライアント上での発信メッセージの処理に使用されるさまざまな型のチャネルのためのチャネル ファクトリを構築するバインドの要素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.BindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.#ctor(System.ServiceModel.Channels.BindingElement)">
      <summary>指定されたバインド要素から <see cref="T:System.ServiceModel.Channels.BindingElement" /> クラスの新規インスタンスを初期化します。</summary>
      <param name="elementToBeCloned">複製する <see cref="T:System.ServiceModel.Channels.BindingElement" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>バインド コンテキストから指定された種類のチャネルを生成するために、チャネル ファクトリを初期化します。</summary>
      <returns>
        <paramref name="context" /> から初期化された <paramref name="TChannel" /> 型の <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <param name="context">バインド要素のコンテキストを提供する <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">ファクトリが構築するチャネルの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>バインド要素が特定の型のチャネルのためのチャネル ファクトリを構築できるかどうかを示す値を返します。</summary>
      <returns>型 <paramref name="TChannel" /> の <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" /> がバインド要素によって構築できる場合は true、それ以外の場合は false。</returns>
      <param name="context">バインド要素のコンテキストを提供する <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">チャネル ファクトリによって生成されるチャネルの種類。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.Clone">
      <summary>発生クラス内でオーバーライドされた場合に、バインド要素オブジェクトのコピーを返します。</summary>
      <returns>オリジナルのディープ クローンである <see cref="T:System.ServiceModel.Channels.BindingElement" /> オブジェクト。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>派生クラス内でオーバーライドされた場合、バインド スタック内の適切なレイヤー内に、要求された型指定されたオブジェクトが存在すれば、それを返します。</summary>
      <returns>要求された型指定されたオブジェクト <paramref name="T" /> が存在する場合はそのオブジェクト、存在しない場合は null。</returns>
      <param name="context">バインド要素の <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">メソッドによって照会されている型が指定されたオブジェクト。</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingElementCollection">
      <summary>バインド内で使用されるバインド要素のコレクションを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.BindingElement})">
      <summary>
        <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> クラスの新しいインスタンスをバインド要素の列挙可能なセットを使用して初期化します。</summary>
      <param name="elements">コレクションの初期化に使用される、ジェネリック型 <see cref="T:System.ServiceModel.Channels.BindingElement" /> の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.#ctor(System.ServiceModel.Channels.BindingElement[])">
      <summary>バインド要素の配列から <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> クラスの新規インスタンスを初期化します。</summary>
      <param name="elements">コレクションの初期化に使用される、型 <see cref="T:System.ServiceModel.Channels.BindingElement" /> の <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.AddRange(System.ServiceModel.Channels.BindingElement[])">
      <summary>配列から取得したバインド要素をバインド要素のコレクションに追加します。</summary>
      <param name="elements">コレクションに追加される型 <see cref="T:System.ServiceModel.Channels.BindingElement" /> の <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Clone">
      <summary>バインド要素コレクションのコピーを作成します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> のコピー。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Contains(System.Type)">
      <summary>指定された型のバインド要素がバインド要素のコレクションに属しているかどうかを示す値を返します。</summary>
      <returns>指定された型のバインド要素がコレクションに含まれていた場合は true、それ以外の場合は false。</returns>
      <param name="bindingElementType">コレクションに含まれているかどうかを調べるバインド要素の型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementType" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Find``1">
      <summary>バインド要素のコレクションから、指定された型を持つ最初のアイテムを返します。</summary>
      <returns>型 <see cref="T:System.Type" /> のアイテムが見つかった場合はそのアイテム、見つからなかった場合、<paramref name="T" /> が値型の場合は 0、<paramref name="T" /> が参照型の場合は null。</returns>
      <typeparam name="T">検索する項目の <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.FindAll``1">
      <summary>バインド要素のコレクションから、指定された型を持つすべてのアイテムを返します。</summary>
      <returns>型 <see cref="T:System.Type" /> のアイテムが見つかった場合は、見つかったアイテムすべての <see cref="T:System.Collections.ObjectModel.Collection`1" />、見つからなかった場合、<paramref name="T" /> が値型の場合は 0、<paramref name="T" /> が参照型の場合は null。</returns>
      <typeparam name="T">検索する項目の <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.InsertItem(System.Int32,System.ServiceModel.Channels.BindingElement)">
      <summary>バインド要素のコレクション内の指定された位置にバインド要素を挿入します。</summary>
      <param name="index">コレクション内のバインド要素を挿入する位置。</param>
      <param name="item">挿入する <see cref="T:System.ServiceModel.Channels.BindingElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.Remove``1">
      <summary>バインド要素のコレクションから指定された型のバインド要素を削除します。</summary>
      <returns>型 <see cref="T:System.Type" /> の削除されたアイテム。</returns>
      <typeparam name="T">検索する項目の <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.RemoveAll``1">
      <summary>バインド要素のコレクションから指定された型のすべてのバインド要素を削除します。</summary>
      <returns>型 <see cref="T:System.Type" /> の見つかったすべてのアイテムの <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
      <typeparam name="T">検索する項目の <see cref="T:System.Type" />。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingElementCollection.SetItem(System.Int32,System.ServiceModel.Channels.BindingElement)">
      <summary>バインド要素のコレクション内の指定されたインデックス位置にあるバインド要素を置き換えます。</summary>
      <param name="index">置き換える要素の 0 から始まるインデックス番号。</param>
      <param name="item">指定した <paramref name="index" /> 位置に存在する <see cref="T:System.ServiceModel.Channels.BindingElement" /> 項目の新しい値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> が null です。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BindingParameterCollection">
      <summary>ファクトリを構築するためにバインド要素によって使用される情報が格納されたバインド パラメーターのコレクションを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BindingParameterCollection.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.BindingParameterCollection" /> クラスの新しいインスタンスを初期化します。 </summary>
    </member>
    <member name="T:System.ServiceModel.Channels.BodyWriter">
      <summary>メッセージ本文のライターを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.#ctor(System.Boolean)">
      <summary>バッファリングするかどうかを明示的に示す <see cref="T:System.ServiceModel.Channels.BodyWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="isBuffered">本文ライターを複数回呼び出すことができる場合は true。それ以外の場合は false。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.BodyWriter.IsBuffered">
      <summary>書き込みメソッドを複数回呼び出すことができるかどうかを示す値を取得します。</summary>
      <returns>本文ライターを複数回呼び出すことができる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.OnWriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>実装された場合、本文コンテンツが書き込まれるときの機能拡張ポイントを提供します。</summary>
      <param name="writer">メッセージ本文を記述するために使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.BodyWriter.WriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>メッセージ本文のコンテンツを書き出します。</summary>
      <param name="writer">メッセージ本文を記述するために使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> が null です。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.BufferManager">
      <summary>派生クラス内で実装された場合、<see cref="T:System.ServiceModel.Channels.BufferManager" /> クラスを使用してバッファー プールを管理できます。プールとそのバッファーは、このクラスをインスタンス化したときに作成され、バッファー プールがガベージ コレクションによって再生されたときに破棄されます。バッファーを使用する必要が生じるたびに、プールから 1 つを取得し、それを使用し、使用し終えたときにそれをプールに返します。このプロセスは、バッファーが必要になるたびにバッファーを作成して破棄するよりははるかに高速で処理され、使用されるリソースも低減します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.BufferManager" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.Clear">
      <summary>現在マネージャー内にキャッシュされているバッファーを解放します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.CreateBufferManager(System.Int64,System.Int32)">
      <summary>指定された最大バッファー プール サイズと、プール内での個々のバッファーそれぞれの最大サイズを使用して、新しい BufferManager を作成します。</summary>
      <returns>指定されたパラメーターを持つ <see cref="T:System.ServiceModel.Channels.BufferManager" /> オブジェクトを返します。</returns>
      <param name="maxBufferPoolSize">プールの最大サイズ。</param>
      <param name="maxBufferSize">個々のバッファーの最大サイズ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxBufferPoolSize" /> または <paramref name="maxBufferSize" /> が 0 より小さい値になっています。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.ReturnBuffer(System.Byte[])">
      <summary>プールにバッファーを返します。</summary>
      <param name="buffer">返されるバッファーへの参照。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参照を null にすることはできません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> の長さが、プールのバッファーの長さプロパティと一致しません。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.BufferManager.TakeBuffer(System.Int32)">
      <summary>指定されたサイズ以上のサイズのバッファーをプールから取得します。</summary>
      <returns>要求されたバッファーのサイズを表すバイト配列。</returns>
      <param name="bufferSize">要求されたバッファーのバイト単位でのサイズ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> は 0 未満には設定できません。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelBase">
      <summary>カスタム チャネルの基本実装を提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelBase.#ctor(System.ServiceModel.Channels.ChannelManagerBase)">
      <summary>
        <see cref="T:System.ServiceModel.Channels.ChannelBase" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="channelManager">チャネル操作 (送信、受信、開く、および閉じる) のための既定のタイムアウトを提供する <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="channelManager" /> が null です。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultCloseTimeout">
      <summary>閉じる操作完了までの既定の制限時間を取得します。</summary>
      <returns>閉じる操作完了までの制限時間を指定する既定の <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultOpenTimeout">
      <summary>開く操作完了までの既定の制限時間を取得します。</summary>
      <returns>開く操作完了までの制限時間を指定する既定の <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultReceiveTimeout">
      <summary>受信操作完了までの既定の制限時間を取得します。</summary>
      <returns>受信操作完了までの制限時間を指定する既定の <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.DefaultSendTimeout">
      <summary>送信操作完了までの既定の制限時間を取得します。</summary>
      <returns>送信操作完了までの制限時間を指定する既定の <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelBase.GetProperty``1">
      <summary>チャネル スタック内の適切なレイヤーから要求された型指定オブジェクトがある場合は、それを返します。</summary>
      <returns>型が指定されており、要求されたオブジェクト <paramref name="T" /> が存在する場合はそのオブジェクト、存在しない場合は null。</returns>
      <typeparam name="T">メソッドによって照会されている型が指定されたオブジェクト。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.Manager">
      <summary>現在のチャネルに関連付けられているチャネル マネージャーを取得します。</summary>
      <returns>現在のチャネルに関連付けられている <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelBase.OnClosed">
      <summary>通信オブジェクトが閉じた状態へ推移しているときに呼び出されました。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#CloseTimeout">
      <summary>通信オブジェクトによって呼び出されるクローズ メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>クローズ メソッドがタイムアウトするまで待機する時間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#OpenTimeout">
      <summary>通信オブジェクトによって呼び出されるオープン メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>オープン メソッドがタイムアウトするまで待機する時間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#ReceiveTimeout">
      <summary>通信オブジェクトによって呼び出される受信メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>受信メソッドがタイムアウトするまで待機する時間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelBase.System#ServiceModel#IDefaultCommunicationTimeouts#SendTimeout">
      <summary>通信オブジェクトによって呼び出される送信メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>送信メソッドがタイムアウトするまで待機する時間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelFactoryBase">
      <summary>すべてのカスタム チャネル ファクトリに共通の基本実装を提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.#ctor(System.ServiceModel.IDefaultCommunicationTimeouts)">
      <summary>指定された既定通信タイムアウトで <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="timeouts">メッセージ交換時の開く操作、送信操作、受信操作、および閉じる操作のための既定のタイムアウトを指定する <see cref="T:System.ServiceModel.IDefaultCommunicationTimeouts" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultCloseTimeout">
      <summary>閉じる操作完了までの既定の制限時間を取得します。</summary>
      <returns>閉じる操作完了までの制限時間を指定する既定の <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultOpenTimeout">
      <summary>開く操作完了までの既定の制限時間を取得します。</summary>
      <returns>開く操作完了までの制限時間を指定する既定の <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultReceiveTimeout">
      <summary>受信操作完了までの既定の制限時間を取得します。</summary>
      <returns>受信操作完了までの制限時間を指定する既定の <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelFactoryBase.DefaultSendTimeout">
      <summary>送信操作完了までの既定の制限時間を取得します。</summary>
      <returns>送信操作完了までの制限時間を指定する既定の <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.GetProperty``1">
      <summary>チャネル スタック内の適切なレイヤーから要求された型指定オブジェクトがある場合は、それを返します。</summary>
      <returns>要求された型指定オブジェクト <paramref name="T" /> がある場合はそのオブジェクト、オブジェクトが存在しない場合は null。</returns>
      <typeparam name="T">メソッドによって照会されている型が指定されたオブジェクト。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnAbort">
      <summary>同期的な中止操作の呼び出しによって通信オブジェクトが閉じる状態へ切り替えられた後に通信オブジェクトへの処理を挿入します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>そのファクトリにより作成された各チャネルを閉じる非同期操作を開始します。</summary>
      <returns>非同期の閉じる操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">閉じる操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <param name="callback">閉じる操作が完了したときに非同期操作の通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期の閉じる操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnClose(System.TimeSpan)">
      <summary>通信オブジェクトが開く状態に切り替えられた後に通信オブジェクトへの処理を挿入します。これは、指定された時間内に完了しなければなりません。</summary>
      <param name="timeout">閉じる操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase.OnEndClose(System.IAsyncResult)">
      <summary>ファクトリによって開かれたチャネルを閉じる非同期操作を完了します。</summary>
      <param name="result">
        <see cref="M:System.ServiceModel.Channels.ChannelFactoryBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelFactoryBase`1">
      <summary>指定されたアドレスに接続される指定された型のチャンネルを作成するために、クライアントのチャネル ファクトリのための共通の基本実装を提供します。</summary>
      <typeparam name="TChannel">ファクトリが生成するチャネルの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.#ctor(System.ServiceModel.IDefaultCommunicationTimeouts)">
      <summary>指定された既定通信タイムアウトを使用して <see cref="T:System.ServiceModel.Channels.ChannelFactoryBase`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="timeouts">メッセージ交換時の開く操作、送信操作、受信操作、および閉じる操作のための既定のタイムアウトを指定する <see cref="T:System.ServiceModel.IDefaultCommunicationTimeouts" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>指定されたエンドポイント アドレスを持つ特定の型のチャネルを作成します。</summary>
      <returns>指定された <paramref name="address" /> を持つ型 <paramref name="TChannel" /> のチャネル。</returns>
      <param name="address">チャネルからメッセージを送信する先のリモート エンドポイントの <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>指定されたトランスポートと指定されたエンドポイント アドレスを持つ特定の型のチャネルを作成します。</summary>
      <returns>指定されたリモートおよびトランスポート アドレスを持つ型 <paramref name="TChannel" /> のチャネル。</returns>
      <param name="address">チャネルからメッセージを送信する先のリモート エンドポイントの <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="via">出力チャネル上でメッセージを送信する先のトランスポート アドレスが含まれた <see cref="T:System.Uri" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> または <paramref name="via" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnAbort">
      <summary>チャネル ファクトリによって管理されている各チャネルを中止します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>チャネル ファクトリに関連付けられているすべてのチャネルを指定された時間内に閉じる非同期操作を開始します。</summary>
      <returns>非同期の終了時操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">閉じる操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <param name="callback">終了時操作が非同期的に完了したときに通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期の終了時操作に関連付けられた状態情報が格納されている、アプリケーションによって指定されたオブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnClose(System.TimeSpan)">
      <summary>チャネル ファクトリに関連付けられているすべてのチャネルを指定された時間内に閉じます。</summary>
      <param name="timeout">閉じる操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnCreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>派生クラスで実装された場合に、チャネルを作成するときの機能拡張ポイントを提供します。</summary>
      <returns>指定されたアドレスを持つ型 <paramref name="TChannel" /> のチャネル。</returns>
      <param name="address">チャネルからメッセージを送信する先のリモート エンドポイントの <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="via">出力チャネル上でメッセージを送信する先のトランスポート アドレスが含まれた <see cref="T:System.Uri" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnEndClose(System.IAsyncResult)">
      <summary>チャネル ファクトリに関連付けられているすべてのチャネルを指定された時間内に閉じる非同期操作を完了します。</summary>
      <param name="result">
        <see cref="M:System.ServiceModel.Channels.ChannelFactoryBase`1.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelFactoryBase`1.ValidateCreateChannel">
      <summary>チャネル ファクトリが開いており、チャネルを作成する準備ができていることを確認します。</summary>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態です。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態です。</exception>
      <exception cref="T:System.InvalidOperationException">現在のチャネル ファクトリが、<see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態にありません。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelManagerBase">
      <summary>チャネルおよびリスナー ファクトリに関連付けられる既定のタイムアウトを管理するための基本実装を提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelManagerBase.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.ChannelManagerBase" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.DefaultReceiveTimeout">
      <summary>派生クラス内でオーバーライドされた場合に、チャネルがメッセージの受信を完了するまでに許される既定の間隔を取得します。</summary>
      <returns>チャネルがメッセージの受信を完了するまでに許される時間を指定する既定の <see cref="T:System.Timespan" />。受信メソッドが呼び出されてからこの時間が経過すると、タイムアウトが発生します。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.DefaultSendTimeout">
      <summary>派生クラス内でオーバーライドされた場合に、チャネルがメッセージの送信を完了するまでに許される既定の間隔を取得します。</summary>
      <returns>チャネルがメッセージの送信を完了するまでに許される時間を指定する既定の <see cref="T:System.Timespan" />。送信メソッドが呼び出されてからこの時間が経過すると、タイムアウトが発生します。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#CloseTimeout">
      <summary>通信オブジェクトによって呼び出されるクローズ メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>クローズ メソッドがタイムアウトするまで待機する時間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#OpenTimeout">
      <summary>通信オブジェクトによって呼び出されるオープン メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>オープン メソッドがタイムアウトするまで待機する時間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#ReceiveTimeout">
      <summary>通信オブジェクトによって呼び出される受信メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>受信メソッドがタイムアウトするまで待機する時間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelManagerBase.System#ServiceModel#IDefaultCommunicationTimeouts#SendTimeout">
      <summary>通信オブジェクトによって呼び出される送信メソッドがタイムアウトするまでの時間を取得します。</summary>
      <returns>送信メソッドがタイムアウトするまで待機する時間を指定する <see cref="T:System.Timespan" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ChannelParameterCollection">
      <summary>チャネル パラメーターのコレクションを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.#ctor(System.ServiceModel.Channels.IChannel)">
      <summary>
        <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="channel">このコレクションにパラメーターが格納されているチャネル。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.ChannelParameterCollection.Channel">
      <summary>このコレクションにパラメーターが格納されているチャネルを取得します。</summary>
      <returns>このコレクションにパラメーターが格納されている <see cref="T:System.ServiceModel.Channels.IChannel" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.ClearItems">
      <summary>パラメーターのコレクションをクリアします。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.InsertItem(System.Int32,System.Object)">
      <summary>指定されたアイテムを指定されたインデックスでコレクションに挿入します。</summary>
      <param name="index">コレクション内でのアイテムのインデックス。</param>
      <param name="item">コレクションに追加する項目。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.PropagateChannelParameters(System.ServiceModel.Channels.IChannel)">
      <summary>現在のコレクション内のパラメーターを指定されたチャネルの <see cref="T:System.ServiceModel.Channels.ChannelParameterCollection" /> に追加します。</summary>
      <param name="innerChannel">現在のコレクションのパラメーターを受信するチャネル。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.RemoveItem(System.Int32)">
      <summary>コレクションからパラメーターを削除します。</summary>
      <param name="index">削除するパラメーターのインデックス。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.ChannelParameterCollection.SetItem(System.Int32,System.Object)">
      <summary>コレクション内の指定されたインデックス位置のアイテムを置き換えます。</summary>
      <param name="index">置き換えるアイテムのインデックス。</param>
      <param name="item">置き換えに使用するアイテムの値。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.CommunicationObject">
      <summary>システム内のすべての通信指向オブジェクト (チャネルおよびチャネル ファクトリを含む) に共通の基本状態マシンのための共通の基本実装を提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.CommunicationObject" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.#ctor(System.Object)">
      <summary>指定された状態の切り替えを保護するための相互排他ロックで <see cref="T:System.ServiceModel.Channels.CommunicationObject" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mutex">状態の推移中にクラス インスタンスを保護する相互に排他的なロック。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Abort">
      <summary>通信オブジェクトをその現在の状態からクローズ状態に直ちに切り替えます。</summary>
      <exception cref="T:System.InvalidOperationException">基本クラスの <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnClosing" /> メソッドも基本クラスの <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnClosed" /> メソッドも呼び出されません。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.AsyncCallback,System.Object)">
      <summary>通信オブジェクトを閉じるための非同期操作を開始します。</summary>
      <returns>非同期の閉じる操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">非同期の閉じる操作の完了通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期の閉じる操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> が <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態のオブジェクトで呼び出されました。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられた既定の時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>通信オブジェクトを閉じる非同期操作を指定されたタイムアウトで開始します。</summary>
      <returns>非同期の閉じる操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">閉じる操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <param name="callback">非同期の閉じる操作の完了通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期の閉じる操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> が <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態のオブジェクトで呼び出されました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> が 0 未満です。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられた <paramref name="timeout" /> に指定されている時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.AsyncCallback,System.Object)">
      <summary>通信オブジェクトを閉じるための非同期操作を開始します。</summary>
      <returns>非同期の開く操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">非同期の開く操作の完了通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期の開く操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態ではなく、変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられた既定の時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>通信オブジェクトを閉じる非同期操作を指定された期限で開始します。</summary>
      <returns>非同期の開く操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">送信操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <param name="callback">非同期の開く操作の完了通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期の開く操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> が 0 未満です。</exception>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態ではなく、変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられた <paramref name="timeout" /> に指定されている時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Close">
      <summary>通信オブジェクトを現在の状態から閉じた状態へ推移させます。</summary>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.Close" /> が <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態のオブジェクトで呼び出されました。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられた既定の時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Close(System.TimeSpan)">
      <summary>通信オブジェクトを指定された時間内に現在の状態から閉じられた状態に切り替えます。</summary>
      <param name="timeout">閉じる操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.Close" /> が <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態のオブジェクトで呼び出されました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> が 0 未満です。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられた <paramref name="timeout" /> に指定されている時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Closed">
      <summary>通信オブジェクトが閉じる状態に切り替わったときに発生します。</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Closing">
      <summary>通信オブジェクトが閉じる処理中の状態に切り替わったときに発生します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.DefaultCloseTimeout">
      <summary>派生クラス内でオーバーライドされた場合に、閉じる操作を完了するために許可された既定の制限時間を取得します。</summary>
      <returns>閉じる操作完了までの制限時間を指定する既定の <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.DefaultOpenTimeout">
      <summary>派生クラス内でオーバーライドされた場合に、開く操作を完了するために許可された既定の制限時間を取得します。</summary>
      <returns>開く操作完了までの制限時間を指定する既定の <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.EndClose(System.IAsyncResult)">
      <summary>通信オブジェクトを閉じるための非同期操作を完了します。</summary>
      <param name="result">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> メソッドの呼び出しから返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.EndOpen(System.IAsyncResult)">
      <summary>通信オブジェクトを開くための非同期操作を完了します。</summary>
      <param name="result">
        <see cref="Overload:System.ServiceModel.Channels.CommunicationObject.BeginClose" /> メソッドの呼び出しから返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Fault">
      <summary>通信オブジェクトをその現在の状態からエラー状態に切り替えます。</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Faulted">
      <summary>通信オブジェクトがエラー状態に切り替わったときに発生します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.GetCommunicationObjectType">
      <summary>通信オブジェクトの型を取得します。</summary>
      <returns>通信オブジェクトの型。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.IsDisposed">
      <summary>通信オブジェクトが破棄されているかどうかを示す値を取得します。</summary>
      <returns>通信オブジェクトが閉じた状態になっている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnAbort">
      <summary>派生クラス内で実装された場合に、同期的な中止操作の呼び出しによって通信オブジェクトが閉じる状態へ切り替えられた後に通信オブジェクトへの処理を挿入します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>派生クラス内で実装された場合に、非同期の終了操作の呼び出しによって通信オブジェクトが閉じる状態へ切り替えられた後に処理を挿入します。</summary>
      <returns>非同期の閉じる操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">閉じる操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <param name="callback">非同期の終了時操作が非同期的に完了したときに通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期の閉じる操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>派生クラス内で実装された場合に、非同期の破棄操作の呼び出しによって通信オブジェクトが開く状態へ切り替えられた後に通信オブジェクトへの処理を挿入します。</summary>
      <returns>非同期の開始時操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">開く操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <param name="callback">開始時操作が非同期的に完了したときに通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期の開始時操作に関連付けられた状態情報が格納されている、アプリケーションによって指定されたオブジェクト。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClose(System.TimeSpan)">
      <summary>派生クラス内で実装された場合に、同期的な閉じる操作の呼び出しによって通信オブジェクトが閉じる状態へ切り替えられた後に通信オブジェクトへの処理を挿入します。</summary>
      <param name="timeout">閉じる操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClosed">
      <summary>通信オブジェクトが閉じた状態へ推移しているときに呼び出されました。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnClosing">
      <summary>通信オブジェクトが閉じた状態へ推移しているときに呼び出されました。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnEndClose(System.IAsyncResult)">
      <summary>派生クラス内で実装された場合に、通信オブジェクトのクローズの非同期操作を完了させます。</summary>
      <param name="result">
        <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnEndClose(System.IAsyncResult)" /> メソッドの呼び出しから戻された <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.TimeoutException">操作に割り当てられた <paramref name="timeout" /> に指定されている時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnEndOpen(System.IAsyncResult)">
      <summary>派生クラス内で実装された場合に、通信オブジェクトのオープンの非同期操作を完了させます。</summary>
      <param name="result">
        <see cref="M:System.ServiceModel.Channels.CommunicationObject.OnEndOpen(System.IAsyncResult)" /> メソッドの呼び出しから戻された <see cref="T:System.IAsyncResult" />。</param>
      <exception cref="T:System.TimeoutException">操作に割り当てられた <paramref name="timeout" /> に指定されている時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnFaulted">
      <summary>同期的なエラー操作の呼び出しによって通信オブジェクトがエラー状態へ切り替えられた後に通信オブジェクトへの処理を挿入します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpen(System.TimeSpan)">
      <summary>派生クラス内で実装された場合に、通信オブジェクトが開く状態に切り替えられた後に通信オブジェクトへの処理を挿入します。これは、指定された時間内に完了しなければなりません。</summary>
      <param name="timeout">開く操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> が 0 未満です。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられた <paramref name="timeout" /> に指定されている時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpened">
      <summary>通信オブジェクトが開かれた状態に切り替わる間に呼び出されます。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.OnOpening">
      <summary>通信オブジェクトが開く処理中の状態に切り替わる間に呼び出されます。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Open">
      <summary>通信オブジェクトを作成済みの状態から開いた状態へ推移させます。</summary>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態ではなく、変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられた既定の時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.Open(System.TimeSpan)">
      <summary>指定された時間内に、通信オブジェクトを作成済みの状態から開いた状態へ推移させます。</summary>
      <param name="timeout">開く操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> が 0 未満です。</exception>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態ではなく、変更できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.TimeoutException">操作に割り当てられた <paramref name="timeout" /> に指定されている時間が、操作が完了する前に経過しました。</exception>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Opened">
      <summary>通信オブジェクトが開かれた状態に切り替わったときに発生します。</summary>
    </member>
    <member name="E:System.ServiceModel.Channels.CommunicationObject.Opening">
      <summary>通信オブジェクトが開く処理中の状態に切り替わったときに発生します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.State">
      <summary>通信オブジェクトの現在の状態を示す値を取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.CommunicationState" /> 列挙から取得した、オブジェクトの現在の状態を示す値。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CommunicationObject.ThisLock">
      <summary>状態の切り替え中にクラス インスタンスを保護する、相互排他ロックを取得します。</summary>
      <returns>状態の推移中にクラス インスタンスを保護する相互に排他的なロック。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposed">
      <summary>通信オブジェクトが破棄された場合に例外をスローします。</summary>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態です。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrImmutable">
      <summary>通信オブジェクトの <see cref="P:System.ServiceModel.Channels.CommunicationObject.State" /> プロパティが <see cref="F:System.ServiceModel.CommunicationState.Created" /> 状態に設定されていなかった場合に例外をスローします。</summary>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態です。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態です。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CommunicationObject.ThrowIfDisposedOrNotOpen">
      <summary>通信オブジェクトが <see cref="F:System.ServiceModel.CommunicationState.Opened" /> 状態になっていない場合に例外をスローします。</summary>
      <exception cref="T:System.InvalidOperationException">通信オブジェクトが <see cref="F:System.ServiceModel.CommunicationState.Created" /> 状態でも <see cref="F:System.ServiceModel.CommunicationState.Opening" /> 状態でもなく、使用できません。</exception>
      <exception cref="T:System.ObjectDisposedException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Closing" /> 状態または <see cref="F:System.ServiceModel.CommunicationState.Closed" /> 状態であり、変更できません。</exception>
      <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException">通信オブジェクトは <see cref="F:System.ServiceModel.CommunicationState.Faulted" /> 状態であり、変更できません。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.CustomBinding">
      <summary>バインド要素のリストからのバインドを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.CustomBinding" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Channels.BindingElement})">
      <summary>
        <see cref="T:System.ServiceModel.Channels.CustomBinding" /> クラスの新しいインスタンスを完全なチャネル スタックから得たバインド要素で初期化します。</summary>
      <param name="bindingElementsInTopDownChannelStackOrder">チャネル スタックのバインド要素がトップダウンの順番で格納されている、型 <see cref="T:System.ServiceModel.Channels.BindingElement" /> の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.ServiceModel.Channels.Binding)">
      <summary>指定されたバインドの値から <see cref="T:System.ServiceModel.Channels.CustomBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="binding">カスタム バインドの初期化に使用される <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.ServiceModel.Channels.BindingElement[])">
      <summary>バインド要素の配列から <see cref="T:System.ServiceModel.Channels.CustomBinding" /> クラスの新規インスタンスを初期化します。</summary>
      <param name="bindingElementsInTopDownChannelStackOrder">カスタム バインドを初期化するために使用された <see cref="T:System.ServiceModel.Channels.BindingElement" /> 型の <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.#ctor(System.String,System.String,System.ServiceModel.Channels.BindingElement[])">
      <summary>指定された名前と名前空間を持つバインド要素の配列を使用して <see cref="T:System.ServiceModel.Channels.CustomBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">バインディングの名前。</param>
      <param name="ns">バインドの名前空間。</param>
      <param name="bindingElementsInTopDownChannelStackOrder">カスタム バインドを初期化するために使用された <see cref="T:System.ServiceModel.Channels.BindingElement" /> 型の <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bindingElementsInTopDownChannelStackOrder" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.CustomBinding.CreateBindingElements">
      <summary>カスタム バインドのバインド要素のジェネリック コレクションを返します。</summary>
      <returns>カスタム バインドのバインド要素が格納された型 <see cref="T:System.ServiceModel.Channels.BindingElement" /> の <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CustomBinding.Elements">
      <summary>カスタム バインドからバインド要素を取得します。</summary>
      <returns>カスタム バインドのバインド要素が格納された <see cref="T:System.ServiceModel.Channels.BindingElementCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.CustomBinding.Scheme">
      <summary>カスタム バインドによって使用されるトランスポートの URI スキームを取得します。</summary>
      <returns>カスタム バインドによって使用されるトランスポートの URI スキーム。または、トランスポートがない場合 (<see cref="T:System.ServiceModel.Channels.TransportBindingElement" /> が null の場合) は空の文字列。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.FaultConverter">
      <summary>チャネルによってスローされた例外を、チャネルのプロトコルに準拠した SOAP エラー メッセージに変換します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.FaultConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.GetDefaultFaultConverter(System.ServiceModel.Channels.MessageVersion)">
      <summary>既定のエラー コンバーターを取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.FaultConverter" /> のインスタンス。</returns>
      <param name="version">
        <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)">
      <summary>派生クラス内で実装された場合に、例外を作成しようとします。</summary>
      <returns>フォールトが正常に変換された場合は true。それ以外の場合は false。既定値は false です。</returns>
      <param name="message">違反 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="fault">フォールト。</param>
      <param name="exception">変換に成功した場合、SOAP <see cref="T:System.Exception" /> が out パラメーターとして返されます。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateFaultMessage(System.Exception,System.ServiceModel.Channels.Message@)">
      <summary>派生クラス内で実装された場合に、エラーが SOAP 例外に変換された後に、エラー メッセージを作成しようとします。</summary>
      <returns>メッセージが正常に作成された場合は true、それ以外の場合は false。既定値は false です。</returns>
      <param name="exception">SOAP 例外。</param>
      <param name="message">out パラメーターとして返されるエラー メッセージ。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)" /> は true を返しましたが、<paramref name="message" /> は null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.FaultConverter.TryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)">
      <summary>
        <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)" /> をエラー チェックでラップします。</summary>
      <returns>フォールトが正常に変換された場合は true。それ以外の場合は false。既定値は false です。</returns>
      <param name="message">エラー メッセージ。</param>
      <param name="fault">フォールト。</param>
      <param name="exception">変換に成功した場合、SOAP 例外が out パラメーターとして返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> または <paramref name="fault" /> が null です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)" /> は true を返しましたが、<paramref name="exception" /> は null です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="M:System.ServiceModel.Channels.FaultConverter.OnTryCreateException(System.ServiceModel.Channels.Message,System.ServiceModel.Channels.MessageFault,System.Exception@)" /> は false を返しましたが、<paramref name="exception" /> は null ではありません。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpCookieContainerBindingElement">
      <summary>HTTP 要求と HTTP 応答での HTTP クッキーの処理方法の管理を可能にします。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.HttpCookieContainerBindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.#ctor(System.ServiceModel.Channels.HttpCookieContainerBindingElement)">
      <summary>指定されたバインド要素から <see cref="T:System.ServiceModel.Channels.HttpCookieContainerBindingElement" /> クラスの新規インスタンスを初期化します。</summary>
      <param name="elementToBeCloned">複製する <see cref="T:System.ServiceModel.Channels.BindingElement" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>バインド コンテキストから指定された種類のチャネルを生成するために、チャネル ファクトリを初期化します。</summary>
      <returns>
        <paramref name="context" /> から初期化された <paramref name="TChannel" /> 型の <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <param name="context">バインド要素のコンテキストを提供する <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">ファクトリが構築するチャネルの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.Clone">
      <summary>現在のバインド要素オブジェクトのコピーを返します。</summary>
      <returns>オリジナルのディープ クローンである <see cref="T:System.ServiceModel.Channels.BindingElement" /> オブジェクト。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpCookieContainerBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>バインド スタック内の適切なレイヤーから要求された型指定オブジェクトがある場合は、それを戻します。</summary>
      <returns>型が指定されており、要求されたオブジェクト <paramref name="T" /> が存在する場合はそのオブジェクト、存在しない場合は null。</returns>
      <param name="context">バインド要素の <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">メソッドによって照会されている型が指定されたオブジェクト。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> が null です。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpRequestMessageProperty">
      <summary>HTTP プロトコルを介して取得可能になる要求の追加情報にアクセスして応答するための HTTP 要求へのアクセスを提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpRequestMessageProperty.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.HttpRequestMessageProperty" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.Headers">
      <summary>HTTP 要求から HTTP ヘッダーを取得します。</summary>
      <returns>HTTP 要求の HTTP ヘッダーが格納されている <see cref="T:System.Net.WebHeaderCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.Method">
      <summary>HTTP 要求の HTTP 動詞を取得または設定します。</summary>
      <returns>HTTP 要求の HTTP 動詞。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> セットが null です。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.Name">
      <summary>
        <see cref="T:System.ServiceModel.Channels.HttpRequestMessageProperty" /> クラスに関連付けられているメッセージ プロパティの名前を取得します。</summary>
      <returns>値 "httpRequest"。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.QueryString">
      <summary>HTTP 要求のクエリ文字列を取得または設定します。</summary>
      <returns>HTTP 要求のクエリ文字列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> セットが null です。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpRequestMessageProperty.SuppressEntityBody">
      <summary>メッセージの本文は無視されてヘッダーだけが送信されるのかどうかを示す値を取得または設定します。</summary>
      <returns>メッセージ本文が送信されない場合は true、それ以外の場合は false。既定値は false です。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpResponseMessageProperty">
      <summary>HTTP プロトコルを介して取得可能になる要求の追加情報にアクセスして応答するための HTTP 応答へのアクセスを提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpResponseMessageProperty.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.HttpResponseMessageProperty" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.Headers">
      <summary>HTTP 応答から HTTP ヘッダーを取得します。</summary>
      <returns>HTTP 応答の HTTP ヘッダーが格納されている <see cref="T:System.Net.WebHeaderCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.Name">
      <summary>
        <see cref="T:System.ServiceModel.Channels.HttpResponseMessageProperty" /> クラスに関連付けられているメッセージ プロパティの名前を取得します。</summary>
      <returns>"httpResponse" を返します。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.StatusCode">
      <summary>このプロパティが添付されている現在の HTTP 応答のステータス コードを取得または設定します。</summary>
      <returns>HTTP 応答で送信する <see cref="T:System.Net.HttpStatusCode" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">値が 100 未満または 599 より大きい値に設定されています。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpResponseMessageProperty.StatusDescription">
      <summary>このプロパティが添付されている現在の HTTP 応答のステータス コードの記述を取得または設定します。</summary>
      <returns>HTTP 応答に送信するステータス記述。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpsTransportBindingElement">
      <summary>メッセージの送信用の HTTPS トランスポートを指定するために使用されるバインド要素を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.HttpsTransportBindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.#ctor(System.ServiceModel.Channels.HttpsTransportBindingElement)">
      <summary>
        <see cref="T:System.ServiceModel.Channels.HttpsTransportBindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="elementToBeCloned">
        <see cref="T:System.ServiceModel.Channels.HttpsTransportBindingElement" /> クラスのインスタンス。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>チャネルの作成に使用できる、指定された型のチャネル ファクトリを作成します。</summary>
      <returns>トランスポート バインド要素で設定されている値に基づいて構成された、指定された型のチャネル ファクトリ。</returns>
      <param name="context">チャネル ファクトリを作成するために必要なバインド、動作、コントラクト、およびその他の情報を記述する <see cref="T:System.ServiceModel.Channels.BindingContext" /> メンバー。</param>
      <typeparam name="TChannel">チャネルの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> に null は指定できません。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.Clone">
      <summary>現在のバインド要素のコピーを作成します。</summary>
      <returns>現在のバインド要素のコピー。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpsTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>指定したオブジェクトを <see cref="T:System.ServiceModel.Channels.BindingContext" /> から取得します。このメソッドは、基本クラスから、またはクラスの先祖のいずれかから指定されたオブジェクトを取得します。</summary>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpsTransportBindingElement.Scheme">
      <summary>トランスポートの URI スキームを返します。</summary>
      <returns>トランスポートの URI スキーム。これは、"HTTPS" です。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.HttpTransportBindingElement">
      <summary>メッセージの送信用の HTTP トランスポートを指定するために使用されるバインド要素を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.#ctor(System.ServiceModel.Channels.HttpTransportBindingElement)">
      <summary>
        <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="elementToBeCloned">
        <see cref="T:System.ServiceModel.Channels.HttpTransportBindingElement" /> クラスのインスタンス。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>チャネルの作成に使用できるチャネル ファクトリを作成します。</summary>
      <returns>指定された型のチャネル ファクトリ。</returns>
      <param name="context">チャネル ファクトリを作成するために必要なバインド、動作、コントラクト、およびその他の情報を記述する <see cref="T:System.ServiceModel.Channels.BindingContext" /> メンバー。</param>
      <typeparam name="TChannel">チャネル ファクトリの種類。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> に null は指定できません。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>指定された型のチャネル ファクトリを構築できるかどうかを決定します。</summary>
      <returns>チャネル ファクトリが構築できる場合は true、それ以外の場合は false。</returns>
      <param name="context">構築されるチャネルの <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">チェックするチャネルの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.Clone">
      <summary>現在のバインド要素のコピーを作成します。</summary>
      <returns>現在のバインド要素のコピー。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.HttpTransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>指定した <see cref="T:System.ServiceModel.Channels.BindingContext" /> からプロパティを取得します。</summary>
      <returns>指定した <see cref="T:System.ServiceModel.Channels.BindingContext" /> から取得されたプロパティ。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">取得するプロパティ。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.MaxBufferSize">
      <summary>使用するバッファーの最大サイズを取得または設定します。バッファリングされるメッセージの場合は、この値は <see cref="P:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize" /> と同じです。ストリーミングされるメッセージの場合は、この値は SOAP ヘッダーの最大サイズです。これは、バッファリング モードで読み取られなければなりません。</summary>
      <returns>バッファーのバイト単位での最大サイズ。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.HttpTransportBindingElement.Scheme">
      <summary>トランスポートの URI スキーマを取得します。</summary>
      <returns>
        <see cref="F:System.Uri.UriSchemeHttp" /> を返します。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannel">
      <summary>すべてのチャネル オブジェクトで実装しなければならない基本インターフェイスを定義します。これらがすべての通信オブジェクトで共有されるステート マシン インターフェイスを実装し、チャネル スタックからオブジェクトを取得するためのメソッドを実装する必要があります。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannel.GetProperty``1">
      <summary>チャネル スタック内の適切なレイヤーから要求された型指定オブジェクトがある場合は、それを返します。</summary>
      <returns>要求された型指定オブジェクト <paramref name="T" /> がある場合はそのオブジェクト、オブジェクトが存在しない場合は null。</returns>
      <typeparam name="T">メソッドによって照会されている型が指定されたオブジェクト。</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannelFactory">
      <summary>チャネル ファクトリによってチャネルを生成するために実装されなければならないインターフェイスを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory.GetProperty``1">
      <summary>チャネル スタック内の適切なレイヤーから要求された型指定オブジェクトがある場合は、それを返します。</summary>
      <returns>要求された型指定された <paramref name="T" /> オブジェクトが存在する場合はそのオブジェクト、存在しない場合は null。</returns>
      <typeparam name="T">メソッドによって照会されている型が指定されたオブジェクト。</typeparam>
    </member>
    <member name="T:System.ServiceModel.Channels.IChannelFactory`1">
      <summary>型固有のチャネルを作成するチャネル ファクトリによって実装されなければならないインターフェイスを定義します。</summary>
      <typeparam name="TChannel">チャネル ファクトリが作成するチャネルの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)">
      <summary>指定されたエンドポイント アドレスへの指定された型のチャネルを作成します。</summary>
      <returns>指定されたエンドポイント アドレスへの型 <paramref name="TChannel" /> のチャネル。</returns>
      <param name="to">サービスの位置を指定する <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)">
      <summary>メッセージの送信先となる指定されたエンドポイント アドレスとトランスポート アドレスへの指定された型のチャネルを作成します。</summary>
      <returns>指定されたエンドポイント アドレスとトランスポート アドレスへの型 <paramref name="TChannel" /> のチャネル。</returns>
      <param name="to">サービスの位置を指定する <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
      <param name="via">メッセージを送信する先のトランスポート アドレスが含まれた <see cref="T:System.Uri" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexChannel">
      <summary>チャネルがメッセージの送信と受信両方のために実装しなければならないインターフェイスを定義します。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexSession">
      <summary>メッセージングのエンドポイント間の双方向通信の各側で実装されるセッションのためのインターフェイスを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession(System.AsyncCallback,System.Object)">
      <summary>送信セッションを終了するための非同期操作を開始します。</summary>
      <returns>非同期の発信セッション終了を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">この要求の状態情報を含むオブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>指定されたタイムアウトの時間内で操作を完了させるように、送信セッションを終了する非同期操作を開始します。</summary>
      <returns>非同期の発信セッション終了を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">操作完了までの制限時間を指定する <see cref="T:System.TimeSpan" />。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">この要求の状態情報を含むオブジェクト。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.CloseOutputSession">
      <summary>送信セッションを終了して、セッションに関連付けられているチャネル上のこのエンドポイントからはこれ以上メッセージが送信されないことを示します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.CloseOutputSession(System.TimeSpan)">
      <summary>指定された時間内に、送信セッションを終了し、セッションに関連付けられているチャネル上のこのエンドポイントからはこれ以上メッセージが送信されないことを示します。</summary>
      <param name="timeout">操作完了までの制限時間を指定する <see cref="T:System.TimeSpan" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IDuplexSession.EndCloseOutputSession(System.IAsyncResult)">
      <summary>送信セッションを終了して、セッションに関連付けられているチャネル上のこのエンドポイントからはこれ以上メッセージが送信されないことを示す非同期操作を完了させます。</summary>
      <param name="result">
        <see cref="Overload:System.ServiceModel.Channels.IDuplexSession.BeginCloseOutputSession" /> メソッドの 1 つの呼び出しから戻された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.IDuplexSessionChannel">
      <summary>二重チャネルをセッションに関連付けるインターフェイスを定義します。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IHttpCookieContainerManager">
      <summary>クッキーのコレクションの管理に使用できる <see cref="T:System.Net.CookieContainer" /> のオプション インスタンスへのアクセスを提供するために使用されるインターフェイスを定義します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.IHttpCookieContainerManager.CookieContainer">
      <summary>
        <see cref="T:System.Net.CookieContainer" /> オブジェクトが使用される場合に、その使用されるオブジェクトを取得または設定します。</summary>
      <returns>コンテナーが使用される場合は使用される <see cref="T:System.Net.CookieContainer" />、コンテナーが使用されない場合は null。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputChannel">
      <summary>メッセージを受信するためにチャネルが実装しなければならないインターフェイスを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)">
      <summary>関連付けられた状態オブジェクトを持つメッセージを受信するための非同期操作を開始します。</summary>
      <returns>非同期のメッセージ受信を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="callback">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>指定されたタイムアウトと状態のオブジェクトが関連付けられているメッセージを受信するための非同期操作を開始します。</summary>
      <returns>非同期受信操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">メッセージが使用可能になるまで待機する時間を指定する <see cref="T:System.Timespan" />。</param>
      <param name="callback">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
      <exception cref="T:System.TimeoutException">操作が完了する前に、指定された <paramref name="timeout" /> が経過しました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定されたタイムアウトは 0 未満です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>指定されたタイムアウトと状態のオブジェクトが関連付けられているメッセージを受信するための非同期操作を開始します。</summary>
      <returns>非同期受信操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">メッセージが使用可能になるまで待機する時間を指定する <see cref="T:System.Timespan" />。</param>
      <param name="callback">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
      <exception cref="T:System.TimeoutException">操作が完了する前に、指定された <paramref name="timeout" /> が経過しました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定されたタイムアウトは 0 未満です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>指定されたタイムアウトと状態オブジェクトが関連付けられた、メッセージの到着を待つ非同期操作を開始します。</summary>
      <returns>メッセージの到着を待つ非同期操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="timeout">メッセージが使用可能になるまで待機する時間を指定する <see cref="T:System.Timespan" />。</param>
      <param name="callback">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
      <exception cref="T:System.TimeoutException">操作が完了する前に、指定された <paramref name="timeout" /> が経過しました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定されたタイムアウトは 0 未満です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)">
      <summary>メッセージを受信する非同期操作を完了します。</summary>
      <returns>受信した <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="result">
        <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> メソッドの 1 つの呼び出しによって返される <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)">
      <summary>メッセージを受信する、指定された非同期操作を完了します。</summary>
      <returns>指定された時間が経過するより前にメッセージが受信された場合は true、それ以外の場合は false。</returns>
      <param name="result">
        <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
      <param name="message">受信した <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)">
      <summary>メッセージを待って待機する、指定された非同期操作を完了します。</summary>
      <returns>
        <paramref name="timeout" />が経過する前にメッセージを受信した場合は true、受信しなかった場合は false。</returns>
      <param name="result">完了する <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> 操作を識別する <see cref="T:System.IAsyncResult" />。ここから終了結果が取得されます。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IInputChannel.LocalAddress">
      <summary>入力チャネルがメッセージの受信に使用するアドレスを取得します。</summary>
      <returns>入力チャネルがメッセージの受信に使用する <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.Receive">
      <summary>受信したメッセージが使用可能な場合は、それを返します。メッセージが取得できない場合に、既定の制限時間をブロックします。</summary>
      <returns>受信した <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)">
      <summary>受信したメッセージが使用可能な場合は、それを返します。メッセージが取得できない場合に、指定された制限時間をブロックします。</summary>
      <returns>受信した <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="timeout">受信操作を完了させなければならない制限時間を指定する <see cref="T:System.Timespan" />。この時間を過ぎると、タイムアウトが発生し、<see cref="T:System.TimeoutException" /> がスローされます。</param>
      <exception cref="T:System.TimeoutException">操作が完了する前に、指定された <paramref name="timeout" /> が経過しました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定されたタイムアウトは 0 未満です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)">
      <summary>メッセージを指定された制限時間内に受信しようとします。</summary>
      <returns>
        <paramref name="timeout" /> が経過するより前にメッセージが受信された場合は true、それ以外の場合は false。</returns>
      <param name="timeout">
        <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> メソッドの 1 つの呼び出しによって返される <see cref="T:System.IAsyncResult" />。</param>
      <param name="message">受信した <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <exception cref="T:System.TimeoutException">操作が完了する前に、指定された <paramref name="timeout" /> が経過しました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定されたタイムアウトは 0 未満です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)">
      <summary>メッセージが指定された制限時間内に到着したかどうかを示す値を返します。</summary>
      <returns>
        <paramref name="timeout" />が経過する前にメッセージを受信した場合は true、受信しなかった場合は false。</returns>
      <param name="timeout">
        <see cref="T:System.Timespan" /> には、タイムアウトを発生させずにメッセージの到着を待って待機する最大制限時間を指定します。</param>
      <exception cref="T:System.TimeoutException">操作が完了する前に、指定された <paramref name="timeout" /> が経過しました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定されたタイムアウトは 0 未満です。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputSession">
      <summary>メッセージングのエンドポイント間の一方向通信の受信側で実装されるセッションのためのインターフェイスを定義します。 </summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IInputSessionChannel">
      <summary>入力チャネルをセッションに関連付けるインターフェイスを定義します。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IMessageProperty">
      <summary>メッセージの一連のプロパティを表すために実装できるインターフェイスを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IMessageProperty.CreateCopy">
      <summary>現在のインスタンスのコピーを作成します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.IMessageProperty" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputChannel">
      <summary>メッセージを送信するためにチャネルが実装しなければならないインターフェイスを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>メッセージを出力チャネルの接続先に送信する非同期操作を開始します。</summary>
      <returns>非同期メッセージ送信操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">出力チャネル上で送信される <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期送信操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.BeginSend(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>指定された時間内に出力チャネルの接続先へメッセージを送信するための非同期操作を開始します。</summary>
      <returns>非同期送信操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">出力チャネル上で送信される <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">送信操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
      <param name="callback">非同期操作の送信完了の通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期送信操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.EndSend(System.IAsyncResult)">
      <summary>出力チャネルの接続先へメッセージを送信するための非同期操作を完了します。</summary>
      <param name="result">
        <see cref="Overload:System.ServiceModel.Channels.IOutputChannel.BeginSend" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IOutputChannel.RemoteAddress">
      <summary>出力チャネル上で送信されるメッセージの行き先となるサービスの送信先を取得します。</summary>
      <returns>出力チャネルによりメッセージが送信される先のサービスの <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message)">
      <summary>出力チャネルの接続先へメッセージを送信します。</summary>
      <param name="message">出力チャネル上で送信される <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IOutputChannel.Send(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>指定された時間内に現在の出力チャネル上でメッセージを送信します。</summary>
      <param name="message">出力チャネル上で送信される <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">送信操作完了までの制限時間を指定する <see cref="T:System.Timespan" />。これを過ぎるとタイムアウトが発生します。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IOutputChannel.Via">
      <summary>出力チャネル上で送信されるメッセージの行き先となるトランスポート アドレスが含まれた URI を取得します。</summary>
      <returns>出力チャネル上でメッセージを送信する先のトランスポート アドレスが含まれた <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputSession">
      <summary>メッセージングのエンドポイント間の一方向通信の送信側で実装されるセッションのためのインターフェイスを定義します。 </summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IOutputSessionChannel">
      <summary>出力チャネルをセッションに関連付けるインターフェイスを定義します。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.IRequestChannel">
      <summary>メッセージングのエンドポイント間の要求応答通信の要求側で実装されなければならないチャネルのコントラクトを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>要求応答メッセージ交換の応答側に要求メッセージを送信するための非同期操作を開始します。</summary>
      <returns>非同期メッセージ送信操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">送信する要求の <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">要求メッセージを送信する非同期操作の完了の通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">要求メッセージを送信する非同期操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.BeginRequest(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>指定された時間内に要求メッセージを要求返信メッセージ交換の返信側へ送信するための非同期操作を開始します。</summary>
      <returns>非同期メッセージ送信操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">送信する要求の <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">応答を受信するまでの制限時間を指定する <see cref="T:System.TimeSpan" />。(既定値については、「注釈」を参照してください。)</param>
      <param name="callback">要求メッセージを送信する非同期操作の完了の通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">要求メッセージを送信する非同期操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.EndRequest(System.IAsyncResult)">
      <summary>送信された要求へメッセージ ベースの応答を返すための非同期操作を完了します。</summary>
      <returns>要求に対する応答で受け取った <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="result">
        <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> メソッドへの呼び出しで返された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IRequestChannel.RemoteAddress">
      <summary>要求チャネルからメッセージを送信する先のリモート アドレスを取得します。</summary>
      <returns>要求チャネルからメッセージを送信する先の <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message)">
      <summary>メッセージ ベースの要求を送信し、相互関係のあるメッセージ ベースの応答を返します。</summary>
      <returns>要求に対する応答で受け取った <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">送信する要求の <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.IRequestChannel.Request(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>指定された時間内に、メッセージ ベースの要求を送信し、相互関係のあるメッセージ ベースの応答を返します。</summary>
      <returns>要求に対する応答で受け取った <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="message">送信する要求の <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">応答を受信するまでの制限時間を指定する <see cref="T:System.TimeSpan" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.IRequestChannel.Via">
      <summary>要求の送信先となるトランスポート アドレスを取得します。</summary>
      <returns>メッセージを送信する先のトランスポート アドレスが含まれた <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.IRequestSessionChannel">
      <summary>要求チャネルをセッションに関連付けるインターフェイスを定義します。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.ISession">
      <summary>通信セッションの ID を提供することにより、メッセージを交換するパーティ間での共有コンテキストを確立するインターフェイスを定義します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.ISession.Id">
      <summary>セッションを一意に識別する ID を取得します。</summary>
      <returns>セッションを一意に識別する ID。 </returns>
    </member>
    <member name="T:System.ServiceModel.Channels.ISessionChannel`1">
      <summary>チャネルを特定の型のセッションに関連付けるインターフェイスを定義します。</summary>
      <typeparam name="TSession">チャネルに関連付けられる <see cref="T:System.ServiceModel.Channels.ISession" /> の型。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.ISessionChannel`1.Session">
      <summary>チャネルに関連付けられているセッションの型を取得します。</summary>
      <returns>チャネルに関連付けられているセッションを定義するジェネリック パラメーター <paramref name="TSession" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.LocalClientSecuritySettings">
      <summary>ローカル クライアントのセキュリティ設定を指定します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.LocalClientSecuritySettings.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.LocalClientSecuritySettings" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.LocalClientSecuritySettings.Clone">
      <summary>現在のインスタンスのコピーである、このクラスの新しいインスタンスを作成します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.LocalClientSecuritySettings" /> の複製された新しいインスタンス。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.MaxClockSkew">
      <summary>通信を行っている 2 つのパーティのシステム クロック間に許容される最大の時間差を取得または設定します。</summary>
      <returns>通信を行っている 2 つのパーティのシステム クロック間に許容される最大の時間差を表す <see cref="T:System.TimeSpan" />。既定値は 5 分です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">プロパティ値が 0 未満です。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.ReplayWindow">
      <summary>メッセージの nonce が有効な最大時間を取得または設定します。</summary>
      <returns>メッセージの nonce が有効な最大時間を表す <see cref="T:System.TimeSpan" />。既定値は 5 分です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">プロパティ値が 0 未満です。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.LocalClientSecuritySettings.TimestampValidityDuration">
      <summary>クライアントにより送信された場合にメッセージが有効である最大期間を取得または設定します。この期間が経過した後にサービスによってメッセージが受信された場合、そのメッセージは破棄する必要があります。</summary>
      <returns>クライアントにより送信された場合にメッセージが有効である最大期間を表す <see cref="T:System.TimeSpan" />。既定値は 5 分です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">プロパティ値が 0 未満です。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.Message">
      <summary>分散環境でのエンドポイント間の通信の単位を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.Message" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.Close">
      <summary>
        <see cref="T:System.ServiceModel.Channels.Message" /> を閉じて、リソースをすべて解放します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String)">
      <summary>バージョンとアクションが格納されたメッセージを作成します。</summary>
      <returns>作成されたメッセージの <see cref="T:System.ServiceModel.Channels.Message" /> オブジェクト。</returns>
      <param name="version">メッセージに使用する SOAP バージョンを指定する <see cref="T:System.ServiceModel.Channels.MessageVersion" /> オブジェクト。</param>
      <param name="action">メッセージの処理方法の記述。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> または <paramref name="action" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Object)">
      <summary>指定されたバージョン、アクション、および本文を使用してメッセージを作成します。</summary>
      <returns>作成されたメッセージの <see cref="T:System.ServiceModel.Channels.Message" /> オブジェクト。</returns>
      <param name="version">メッセージに使用する SOAP バージョンを指定する <see cref="T:System.ServiceModel.Channels.MessageVersion" /> オブジェクト。</param>
      <param name="action">メッセージの処理方法の記述。</param>
      <param name="body">メッセージの本文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />、<paramref name="action" />、または <paramref name="body" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>指定されたバージョン、アクション、メッセージ本文、およびシリアライザーを使用してメッセージを作成します。</summary>
      <returns>作成されたメッセージの <see cref="T:System.ServiceModel.Channels.Message" /> オブジェクト。</returns>
      <param name="version">メッセージに使用する SOAP バージョンを指定する <see cref="T:System.ServiceModel.Channels.MessageVersion" /> オブジェクト。</param>
      <param name="action">メッセージの処理方法の記述。</param>
      <param name="body">メッセージの本文。</param>
      <param name="serializer">
        <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />、<paramref name="fault" />、または <paramref name="action" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.ServiceModel.Channels.BodyWriter)">
      <summary>バイトの配列で構成される本文を持つメッセージを作成します。</summary>
      <returns>作成されたメッセージの <see cref="T:System.ServiceModel.Channels.Message" /> オブジェクト。</returns>
      <param name="version">メッセージに使用する SOAP バージョンを指定する <see cref="T:System.ServiceModel.Channels.MessageVersion" /> オブジェクト。</param>
      <param name="action">メッセージの処理方法の記述。</param>
      <param name="body">型がバイトの <see cref="T:System.ServiceModel.Channels.BodyWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />、<paramref name="action" />、または <paramref name="body" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Xml.XmlDictionaryReader)">
      <summary>指定されたバージョン、アクション、および本文を使用してメッセージを作成します。</summary>
      <returns>作成されたメッセージの <see cref="T:System.ServiceModel.Channels.Message" /> オブジェクト。</returns>
      <param name="version">メッセージに使用する SOAP バージョンを指定する <see cref="T:System.ServiceModel.Channels.MessageVersion" /> オブジェクト。</param>
      <param name="action">メッセージの処理方法の記述。</param>
      <param name="body">メッセージの本文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />、<paramref name="action" />、または <paramref name="body" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.CreateMessage(System.ServiceModel.Channels.MessageVersion,System.String,System.Xml.XmlReader)">
      <summary>指定されたリーダー、アクション、およびバージョンを使用してメッセージを作成します。</summary>
      <returns>作成されたメッセージの <see cref="T:System.ServiceModel.Channels.Message" /> オブジェクト。</returns>
      <param name="version">メッセージに使用する SOAP バージョンを指定する <see cref="T:System.ServiceModel.Channels.MessageVersion" /> オブジェクト。</param>
      <param name="action">メッセージの処理方法の記述。</param>
      <param name="body">SOAP メッセージの読み取りに使用される <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" />、<paramref name="action" />、または <paramref name="body" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBody``1">
      <summary>この <see cref="T:System.ServiceModel.Channels.Message" /> インスタンスの本文を取得します。</summary>
      <returns>このメッセージの本文が含まれている <paramref name="T" /> 型のオブジェクト。</returns>
      <typeparam name="T">メッセージの本文。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBody``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>指定されたシリアライザーを使用して、この <see cref="T:System.ServiceModel.Channels.Message" /> の本文を取得します。</summary>
      <returns>このメッセージの本文が含まれている <paramref name="T" /> 型のオブジェクト。</returns>
      <param name="serializer">
        <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <typeparam name="T">メッセージの本文。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializer" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetBodyAttribute(System.String,System.String)">
      <summary>メッセージ本文の属性を取得します。</summary>
      <returns>メッセージ本文の属性。</returns>
      <param name="localName">XML ノードのローカル名。このメンバーに対応する要素の名前。この文字列は、有効な XML 要素名でなければなりません。</param>
      <param name="ns">この XML 要素が属する名前空間。このメンバーに対応する要素の名前空間 URI。システムでは、トランスポート アドレス以外の URI は検証されません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localName" /> または <paramref name="ns" /> が null です。</exception>
      <exception cref="T:System.ObjectDisposedException">メッセージは閉じています。</exception>
      <exception cref="T:System.InvalidOperationException">メッセージのコピー、読み取り、または書き込みが行われました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.GetReaderAtBodyContents">
      <summary>このメッセージの本文のコンテンツにアクセスする XML ディクショナリ リーダーを取得します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
      <exception cref="T:System.ObjectDisposedException">メッセージは閉じています。</exception>
      <exception cref="T:System.InvalidOperationException">メッセージが空であるか、またはコピー、読み取り、または書き込みされています。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Headers">
      <summary>派生クラス内でオーバーライドされた場合に、メッセージのヘッダーを取得します。</summary>
      <returns>メッセージのヘッダーを表す <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> オブジェクト。</returns>
      <exception cref="T:System.ObjectDisposedException">メッセージが破棄されました。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsDisposed">
      <summary>
        <see cref="T:System.ServiceModel.Channels.Message" /> が破棄されるかどうかを示す値を返します。</summary>
      <returns>メッセージが破棄される場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsEmpty">
      <summary>
        <see cref="T:System.ServiceModel.Channels.Message" /> が空かどうかを示す値を返します。</summary>
      <returns>メッセージが空の場合は true、それ以外の場合は false。</returns>
      <exception cref="T:System.ObjectDisposedException">メッセージが破棄されました。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.IsFault">
      <summary>このメッセージが何らかの SOAP エラーを生成するかどうかを示す値を取得します。</summary>
      <returns>このメッセージが何らかの SOAP エラーを生成する場合は true、それ以外の場合は false。</returns>
      <exception cref="T:System.ObjectDisposedException">メッセージが破棄されました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnBodyToString(System.Xml.XmlDictionaryWriter)">
      <summary>メッセージ本文が文字列に変換される場合に呼び出されます。</summary>
      <param name="writer">メッセージ本文の文字列への変換に使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnClose">
      <summary>メッセージが閉じられるときに呼び出されます。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnGetBodyAttribute(System.String,System.String)">
      <summary>メッセージ本文の属性が取得されるときに呼び出されます。</summary>
      <returns>メッセージ本文の属性。</returns>
      <param name="localName">XML ノードのローカル名。このメンバーに対応する要素の名前。この文字列は、有効な XML 要素名でなければなりません。</param>
      <param name="ns">この XML 要素が属する名前空間。このメンバーに対応する要素の名前空間 URI。システムでは、トランスポート アドレス以外の URI は検証されません。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnGetReaderAtBodyContents">
      <summary>このメッセージの本文のコンテンツにアクセスできる XML ディクショナリ リーダーが取得できる場合に呼び出されます。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>メッセージ本文が XML ファイルに書き込まれるときに呼び出されます。</summary>
      <param name="writer">このメッセージの本文の XML ファイルへの書き込みに使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteMessage(System.Xml.XmlDictionaryWriter)">
      <summary>メッセージ全体が XML ファイルに書き込まれるときに呼び出されます。</summary>
      <param name="writer">このメッセージの XML ファイルへの書き込みに使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartBody(System.Xml.XmlDictionaryWriter)">
      <summary>開始本文が XML ファイルに書き込まれるときに呼び出されます。</summary>
      <param name="writer">開始本文の XML ファイルへの書き込みに使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartEnvelope(System.Xml.XmlDictionaryWriter)">
      <summary>開始エンベロープが XML ファイルに書き込まれるときに呼び出されます。</summary>
      <param name="writer">開始エンベロープの XML ファイルへの書き込みに使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.OnWriteStartHeaders(System.Xml.XmlDictionaryWriter)">
      <summary>開始ヘッダーが XML ファイルに書き込まれるときに呼び出されます。</summary>
      <param name="writer">開始ヘッダーの XML ファイルへの書き込みに使用される <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Properties">
      <summary>派生クラス内でオーバーライドされた場合に、メッセージへの処理レベルの一連の注釈を取得します。</summary>
      <returns>メッセージへの処理レベルの一連の注釈が格納された <see cref="T:System.ServiceModel.Channels.MessageProperties" />。</returns>
      <exception cref="T:System.ObjectDisposedException">メッセージが破棄されました。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.State">
      <summary>この <see cref="T:System.ServiceModel.Channels.Message" /> の現在の状態を取得します。</summary>
      <returns>この <see cref="T:System.ServiceModel.Channels.Message" /> の現在の状態が格納されている <see cref="T:System.ServiceModel.Channels.MessageState" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.System#IDisposable#Dispose">
      <summary>このメッセージによって使用されているすべてのリソースを閉じます。このメソッドは継承できません。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.ToString">
      <summary>現在の <see cref="T:System.ServiceModel.Channels.Message" /> を表す文字列を返します。</summary>
      <returns>現在の <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <exception cref="T:System.ObjectDisposedException">メッセージが破棄されました。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.Message.Version">
      <summary>派生クラス内でオーバーライドされた場合に、メッセージの SOAP と WS-Addressing のバージョンを取得します。</summary>
      <returns>メッセージにより使用される SOAP と WS-Addressing のバージョンを表す <see cref="T:System.ServiceModel.Channels.MessageVersion" /> オブジェクト。</returns>
      <exception cref="T:System.ObjectDisposedException">メッセージが破棄されました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBody(System.Xml.XmlDictionaryWriter)">
      <summary>指定された <see cref="T:System.Xml.XmlDictionaryWriter" /> を使用して本文要素を書き込みます。</summary>
      <param name="writer">本文要素を書き込むために使用する <see cref="T:System.Xml.XmlDictionaryWriter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBody(System.Xml.XmlWriter)">
      <summary>指定された <see cref="T:System.Xml.XmlWriter" /> を使用してメッセージ本文をシリアル化します。</summary>
      <param name="writer">メッセージの本文を書き込むために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> が null です。</exception>
      <exception cref="T:System.ObjectDisposedException">メッセージが破棄されます。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteBodyContents(System.Xml.XmlDictionaryWriter)">
      <summary>指定された <see cref="T:System.Xml.XmlDictionaryWriter" /> を使用して本文のコンテンツをシリアル化します。</summary>
      <param name="writer">本文要素を書き込むために使用する <see cref="T:System.Xml.XmlDictionaryWriter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer " /> が null です。</exception>
      <exception cref="T:System.ObjectDisposedException">メッセージは閉じています。</exception>
      <exception cref="T:System.InvalidOperationException">メッセージのコピー、読み取り、または書き込みが行われました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteMessage(System.Xml.XmlDictionaryWriter)">
      <summary>指定された <see cref="T:System.Xml.XmlDictionaryWriter" /> を使用してメッセージ全体をシリアル化します。</summary>
      <param name="writer">メッセージの書き込みに使用される <see cref="T:System.Xml.XmlDictionaryWriter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> が null です。</exception>
      <exception cref="T:System.ObjectDisposedException">メッセージは閉じています。</exception>
      <exception cref="T:System.InvalidOperationException">メッセージのコピー、読み取り、または書き込みが行われました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteMessage(System.Xml.XmlWriter)">
      <summary>指定された <see cref="T:System.Xml.XmlWriter" /> を使用してメッセージ全体をシリアル化します。</summary>
      <param name="writer">メッセージの本文を書き込むために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> が null です。</exception>
      <exception cref="T:System.ObjectDisposedException">メッセージは閉じています。</exception>
      <exception cref="T:System.InvalidOperationException">メッセージのコピー、読み取り、または書き込みが行われました。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartBody(System.Xml.XmlDictionaryWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlDictionaryWriter" /> を使用して開始本文をシリアル化します。</summary>
      <param name="writer">開始本文の書き込みに使用される <see cref="T:System.Xml.XmlDictionaryWriter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartBody(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlDictionaryWriter" /> を使用して開始本文をシリアル化します。</summary>
      <param name="writer">メッセージの開始本文の書き込みに使用される <see cref="T:System.Xml.XmlDictionaryWriter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.Message.WriteStartEnvelope(System.Xml.XmlDictionaryWriter)">
      <summary>指定された <see cref="T:System.Xml.XmlDictionaryWriter" /> を使用して開始エンベロープをシリアル化します。</summary>
      <param name="writer">開始エンベロープの書き込みに使用される <see cref="T:System.Xml.XmlDictionaryWriter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer " /> が null です。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageBuffer">
      <summary>将来消費するためにメッセージ全体を格納するメモリ バッファーを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageBuffer.BufferSize">
      <summary>この <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> によりアクセスされるおおよそのバイト数を取得します。</summary>
      <returns>この <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> によりアクセスされるおおよそのバイト数。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.Close">
      <summary>バッファーでの作業を終了します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.CreateMessage">
      <summary>元のメッセージのコピーを返します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageBuffer.MessageContentType">
      <summary>このバッファーに格納されているメッセージ コンテンツの型を取得します。</summary>
      <returns>このバッファーに格納されているメッセージ コンテンツの型。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.System#IDisposable#Dispose">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。このメソッドは継承できません。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageBuffer.WriteMessage(System.IO.Stream)">
      <summary>このバッファーのコンテンツ全体を指定された I/O ストリームに書き込みます。</summary>
      <param name="stream">このバッファーのコンテンツ全体の書き込み先になる I/O ストリーム。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncoder">
      <summary>エンコーダーは、メッセージのストリームへの書き込みおよびストリームからのメッセージの読み取りに使用されるコンポーネントです。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageEncoder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.ContentType">
      <summary>派生クラス内でオーバーライドされた場合に、エンコーダーによって使用される MIME コンテンツ タイプを取得します。</summary>
      <returns>メッセージ エンコーダーによりサポートされているコンテンツ タイプ。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.GetProperty``1">
      <summary>チャネル スタック内の適切なレイヤーから要求された型指定オブジェクトがある場合は、それを返します。</summary>
      <returns>要求された型指定オブジェクト <paramref name="T " /> がある場合はそのオブジェクト、オブジェクトが存在しない場合は null。</returns>
      <typeparam name="T">メソッドによって照会されている型が指定されたオブジェクト。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.IsContentTypeSupported(System.String)">
      <summary>指定されたメッセージ レベル コンテンツ タイプ値がメッセージ エンコーダーによってサポートされているかどうかを示す値を返します。</summary>
      <returns>指定されたメッセージ レベル コンテンツ タイプがサポートされている場合は true、それ以外の場合は false。</returns>
      <param name="contentType">テストされるメッセージ レベル コンテンツ タイプ。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.MediaType">
      <summary>派生クラス内でオーバーライドされた場合に、エンコーダーによって使用されるメディア タイプ値を取得します。</summary>
      <returns>メッセージ エンコーダーによりサポートされているメディア タイプ。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoder.MessageVersion">
      <summary>派生クラス内でオーバーライドされた場合に、エンコーダーによって使用されるメッセージ バージョン値を取得します。</summary>
      <returns>エンコーダーにより使用されている <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager)">
      <summary>派生クラス内でオーバーライドされた場合に、指定されたバッファーからメッセージを読み取ります。</summary>
      <returns>指定されたバッファーから読み取られる <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="buffer">メッセージをシリアル化解除するバッファーを提供する <see cref="T:System.Byte" /> 型の <see cref="T:System.ArraySegment`1" />。</param>
      <param name="bufferManager">メッセージをシリアル化解除するバッファーを管理する <see cref="T:System.ServiceModel.Channels.BufferManager" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String)">
      <summary>派生クラスで上書きされるとき、指定されたストリームからメッセージを読み取ります。</summary>
      <returns>指定されたストリームから読み取られる <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="buffer">メッセージをシリアル化解除するバッファーを提供する <see cref="T:System.Byte" /> 型の <see cref="T:System.ArraySegment`1" />。</param>
      <param name="bufferManager">メッセージをシリアル化解除するバッファーを管理する <see cref="T:System.ServiceModel.Channels.BufferManager" />。</param>
      <param name="contentType">Multipurpose Internet Mail Extensions (MIME) メッセージ レベル コンテンツ タイプ。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32)">
      <summary>派生クラスで上書きされるとき、指定されたストリームからメッセージを読み取ります。</summary>
      <returns>指定されたストリームから読み取られる <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="stream">メッセージを読み取る元の <see cref="T:System.IO.Stream" /> オブジェクト。</param>
      <param name="maxSizeOfHeaders">メッセージから読み取ることができるヘッダーの最大サイズ。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ReadMessage(System.IO.Stream,System.Int32,System.String)">
      <summary>派生クラスで上書きされるとき、指定されたストリームからメッセージを読み取ります。</summary>
      <returns>指定されたストリームから読み取られる <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="stream">メッセージを読み取る元の <see cref="T:System.IO.Stream" /> オブジェクト。</param>
      <param name="maxSizeOfHeaders">メッセージから読み取ることができるヘッダーの最大サイズ。</param>
      <param name="contentType">Multipurpose Internet Mail Extensions (MIME) メッセージ レベル コンテンツ タイプ。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.ToString">
      <summary>メッセージ エンコーダーにより使用されるコンテンツ タイプを返します。</summary>
      <returns>メッセージ エンコーダーにより使用されるコンテンツ タイプ。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager)">
      <summary>指定されたサイズより小さいメッセージをバイト配列バッファーに書き込みます。</summary>
      <returns>メッセージをシリアル化解除するバッファーを提供する byte 型の <see cref="T:System.ArraySegment`1" />。</returns>
      <param name="message">メッセージ バッファーに書き込む <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="maxMessageSize">書き込み可能なメッセージの最大サイズ。</param>
      <param name="bufferManager">メッセージを書き込むバッファーを管理する <see cref="T:System.ServiceModel.Channels.BufferManager" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
      <summary>派生クラス内でオーバーライドされた場合に、指定されたサイズより小さいメッセージをバイト配列バッファーの指定されたオフセット位置に書き込みます。</summary>
      <returns>メッセージをシリアル化解除するバッファーを提供する byte 型の <see cref="T:System.ArraySegment`1" />。</returns>
      <param name="message">メッセージ バッファーに書き込む <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="maxMessageSize">書き込み可能なメッセージの最大サイズ。</param>
      <param name="bufferManager">メッセージを書き込むバッファーを管理する <see cref="T:System.ServiceModel.Channels.BufferManager" />。</param>
      <param name="messageOffset">バッファーを提供するバイト配列の先頭からのセグメントの開始オフセット。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.IO.Stream)">
      <summary>派生クラス内でオーバーライドされた場合に、メッセージを指定されたストリームに書き込みます。</summary>
      <param name="message">
        <paramref name="stream" /> に書き込む <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="stream">
        <paramref name="message" /> の書き込み先になる <see cref="T:System.IO.Stream" /> オブジェクト。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncoderFactory">
      <summary>さまざまな種類のメッセージ エンコーディングでストリームからのメッセージの読み取りとストリームへのメッセージの書き込みを行えるメッセージ エンコーダーを作成するためのファクトリを表す抽象基本クラス。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoderFactory.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncoderFactory.CreateSessionEncoder">
      <summary>セッション ベースの交換でのメッセージの関連付けに使用できるメッセージ エンコーダーを返します。</summary>
      <returns>セッション ベースのメッセージ交換に使用される <see cref="T:System.ServiceModel.Channels.MessageEncoder" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoderFactory.Encoder">
      <summary>派生クラス内でオーバーライドされた場合に、ファクトリによって生成されるメッセージ エンコーダーを取得します。</summary>
      <returns>ファクトリで使用される <see cref="T:System.ServiceModel.Channels.MessageEncoder" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncoderFactory.MessageVersion">
      <summary>派生クラス内でオーバーライドされた場合に、メッセージをエンコードするためにファクトリによって生成されたエンコーダーにより使用されるメッセージ バージョンを取得します。</summary>
      <returns>ファクトリで使用される <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageEncodingBindingElement">
      <summary>メッセージのエンコードに使用されるメッセージ バージョンを指定するバインド要素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.#ctor(System.ServiceModel.Channels.MessageEncodingBindingElement)">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" /> クラスの新しいインスタンスを既存要素で初期化します。</summary>
      <param name="elementToBeCloned">複製する <see cref="T:System.ServiceModel.Channels.MessageEncodingBindingElement" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>派生クラス内でオーバーライドされた場合に、メッセージ エンコーダーを生成するためのファクトリを作成します。</summary>
      <returns>メッセージ エンコーダーの生成に使用される <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>チャネル スタック内の適切なレイヤーから要求された型指定オブジェクトがある場合は、それを返します。</summary>
      <returns>要求された型指定オブジェクト <paramref name="T" /> がある場合はそのオブジェクト、オブジェクトが存在しない場合は null。</returns>
      <param name="context">現在のバインド要素の <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">メソッドによって照会されている型が指定されたオブジェクト。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> が null です。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageEncodingBindingElement.MessageVersion">
      <summary>派生クラス内でオーバーライドされた場合に、メッセージ エンコーダー ファクトリによって生成されたメッセージ エンコーダーによって処理できるメッセージ バージョンを取得または設定します。</summary>
      <returns>メッセージ エンコーダー ファクトリによって生成されるエンコーダーにより使用される <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageFault">
      <summary>エラーを含むメッセージを作成するために <see cref="Overload:System.ServiceModel.Channels.Message.CreateMessage" /> に渡すことができる SOAP エラーのメモリ内表現を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.#ctor">
      <summary>派生クラスで呼び出されると、<see cref="T:System.ServiceModel.Channels.MessageFault" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Actor">
      <summary>アクターの値を取得または設定します。</summary>
      <returns>アクターの値。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Code">
      <summary>SOAP エラー コードを取得します。</summary>
      <returns>SOAP エラー コードが格納された <see cref="T:System.ServiceModel.FaultCode" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.CreateFault(System.ServiceModel.Channels.Message,System.Int32)">
      <summary>指定された <see cref="T:System.ServiceModel.Channels.Message" /> を使用し、指定された最大バッファー サイズをメッセージ バッファーに使用する新しい <see cref="T:System.ServiceModel.Channels.MessageFault" /> オブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageFault" /> オブジェクト。</returns>
      <param name="message">
        <see cref="T:System.ServiceModel.Channels.MessageFault" /> オブジェクトの作成に使用される、指定された <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="maxBufferSize">メッセージ バッファーの指定された最大バッファー サイズ。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.GetDetail``1">
      <summary>メッセージ エラーの詳細オブジェクトを返します。</summary>
      <returns>メッセージ エラーの詳細オブジェクト。</returns>
      <typeparam name="T">詳細オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.GetDetail``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>指定された <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> を使用する詳細オブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageFault" /> に格納されている詳細オブジェクト。</returns>
      <param name="serializer">詳細オブジェクトを逆シリアル化するときに使用する <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <typeparam name="T">詳細オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.GetReaderAtDetailContents">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageFault" /> の詳細オブジェクトに配置されている <see cref="T:System.Xml.XmlDictionaryReader" /> オブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageFault" /> の詳細オブジェクトに配置されている <see cref="T:System.Xml.XmlDictionaryReader" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.HasDetail">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageFault" /> が詳細オブジェクトを持つかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageFault" /> が詳細オブジェクトを持つ場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Node">
      <summary>SOAP ノードを取得します。</summary>
      <returns>メッセージ パス上のどの SOAP ノードがエラーを発生させたかに関する情報が格納されている SOAP ノード。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnGetReaderAtDetailContents">
      <summary>派生クラス内で呼び出された場合に、<see cref="T:System.ServiceModel.Channels.MessageFault" /> の詳細オブジェクト上に置かれている <see cref="T:System.Xml.XmlDictionaryReader" /> オブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageFault" /> の詳細オブジェクトに配置されている <see cref="T:System.Xml.XmlDictionaryReader" /> オブジェクト。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnWriteDetail(System.Xml.XmlDictionaryWriter,System.ServiceModel.EnvelopeVersion)">
      <summary>詳細コンテンツの書き込みに先立って呼び出されます。</summary>
      <param name="writer">詳細要素を書き込むために使用する <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="version">書き込む SOAP エンベロープのバージョン。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnWriteDetailContents(System.Xml.XmlDictionaryWriter)">
      <summary>非抽象派生クラス内でオーバーライドされた場合に、詳細要素のコンテンツを書き込みます。</summary>
      <param name="writer">詳細要素を書き込むために使用する <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageFault.OnWriteStartDetail(System.Xml.XmlDictionaryWriter,System.ServiceModel.EnvelopeVersion)">
      <summary>指定された <see cref="T:System.Xml.XmlDictionaryWriter" /> と SOAP エンベロープ バージョンを使用して開始要素を書き込みます。</summary>
      <param name="writer">詳細要素を書き込むために使用する <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="version">書き込む SOAP エンベロープのバージョン。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageFault.Reason">
      <summary>SOAP エラーのテキストでの説明を取得します。</summary>
      <returns>SOAP エラーのテキスト説明が格納された <see cref="T:System.ServiceModel.FaultReason" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeader">
      <summary>SOAP ヘッダーのコンテンツを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageHeader" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.Actor">
      <summary>メッセージ ヘッダーのターゲット受信者を取得または設定します。</summary>
      <returns>メッセージ ヘッダーの宛先の受信者。既定値は空の文字列 ("") です。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object)">
      <summary>指定されたデータを使用して、新規メッセージ ヘッダーを作成します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageHeader" />。</returns>
      <param name="name">ヘッダー XML 要素のローカル名。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="value">作成するヘッダーの内容。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean)">
      <summary>指定されたデータを使用して、新規メッセージ ヘッダーを作成します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageHeader" />。</returns>
      <param name="name">ヘッダー XML 要素のローカル名。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="value">作成するヘッダーの内容。</param>
      <param name="mustUnderstand">ヘッダーを理解する必要があるかどうかを示す値。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean,System.String)">
      <summary>指定されたデータを使用して、新規メッセージ ヘッダーを作成します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageHeader" />。</returns>
      <param name="name">ヘッダー XML 要素のローカル名。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="value">作成するヘッダーの内容。</param>
      <param name="mustUnderstand">ヘッダーを理解する必要があるかどうかを示す値。</param>
      <param name="actor">メッセージ ヘッダーの宛先の受信者。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Boolean,System.String,System.Boolean)">
      <summary>指定されたデータを使用して、新規メッセージ ヘッダーを作成します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageHeader" />。</returns>
      <param name="name">ヘッダー XML 要素のローカル名。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="value">作成するヘッダーの内容。</param>
      <param name="mustUnderstand">ヘッダーを理解する必要があるかどうかを示す値。</param>
      <param name="actor">メッセージ ヘッダーの宛先の受信者。</param>
      <param name="relay">ヘッダーを中継する必要があるかどうかを示す値。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>XmlFormatter を使用してシリアル化されるオブジェクトからヘッダーを作成します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageHeader" />。</returns>
      <param name="name">ヘッダー XML 要素のローカル名。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="value">作成するヘッダーの内容。</param>
      <param name="serializer">
        <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean)">
      <summary>指定されたデータを使用して、新規メッセージ ヘッダーを作成します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageHeader" />。</returns>
      <param name="name">ヘッダー XML 要素のローカル名。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="value">作成するヘッダーの内容。</param>
      <param name="serializer">
        <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <param name="mustUnderstand">ヘッダーを理解する必要があるかどうかを示す値。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean,System.String)">
      <summary>指定されたデータを使用して、新規メッセージ ヘッダーを作成します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageHeader" />。</returns>
      <param name="name">ヘッダー XML 要素のローカル名。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="value">作成するヘッダーの内容。</param>
      <param name="serializer">
        <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <param name="mustUnderstand">ヘッダーを理解する必要があるかどうかを示す値。</param>
      <param name="actor">メッセージ ヘッダーの宛先の受信者。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.CreateHeader(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer,System.Boolean,System.String,System.Boolean)">
      <summary>指定されたデータを使用して、新規メッセージ ヘッダーを作成します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageHeader" />。</returns>
      <param name="name">ヘッダー XML 要素のローカル名。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="value">作成するヘッダーの内容。</param>
      <param name="serializer">
        <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <param name="mustUnderstand">ヘッダーを理解する必要があるかどうかを示す値。</param>
      <param name="actor">メッセージ ヘッダーの宛先の受信者。</param>
      <param name="relay">ヘッダーを中継する必要があるかどうかを示す値。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.IsMessageVersionSupported(System.ServiceModel.Channels.MessageVersion)">
      <summary>指定されたメッセージ バージョンがサポートされているかどうかを確認します。</summary>
      <returns>指定されたメッセージ バージョンがサポートされている場合は true、それ以外の場合は false。</returns>
      <param name="messageVersion">メッセージとその交換に関連付けられている SOAP のバージョンに関連する情報が含まれています。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.IsReferenceParameter">
      <summary>このメッセージ ヘッダーにエンドポイント参照の参照パラメーターが格納されているかどうかを示す値を取得します。</summary>
      <returns>このメッセージ ヘッダーにエンドポイント参照の参照パラメーターが格納されている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.MustUnderstand">
      <summary>ヘッダーが SOAP 1.1 または 1.2 仕様に従って解釈されなければならないかどうかを示す値を取得または設定します。</summary>
      <returns>ヘッダーが解釈されなければならない場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.OnWriteHeaderContents(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>ヘッダー コンテンツが、指定された XML ライターを使用してシリアル化されるときに呼び出されます。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="messageVersion">メッセージとその交換に関連付けられている SOAP のバージョンに関連する情報が含まれています。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.OnWriteStartHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>開始ヘッダーが、指定された XML ライターを使用してシリアル化されるときに呼び出されます。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="messageVersion">メッセージとその交換に関連付けられている SOAP のバージョンに関連する情報が含まれています。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeader.Relay">
      <summary>ヘッダーが中継されなければならないかどうかを示す値を取得します。</summary>
      <returns>ヘッダーが中継されなければならない場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.ToString">
      <summary>このメッセージ ヘッダーを文字列に変換します。</summary>
      <returns>メッセージ ヘッダー。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>指定された XML ライターを使用してヘッダーをシリアル化します。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="messageVersion">メッセージとその交換に関連付けられている SOAP のバージョンに関連する情報が含まれています。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeader(System.Xml.XmlWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>指定された XML ライターを使用してヘッダーをシリアル化します。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="messageVersion">メッセージとその交換に関連付けられている SOAP のバージョンに関連する情報が含まれています。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeaderAttributes(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>指定された XML ライターを使用してヘッダーの内容をシリアル化します。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="messageVersion">メッセージとその交換に関連付けられている SOAP のバージョンに関連する情報が含まれています。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteHeaderContents(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>指定された XML ライターを使用してヘッダーの内容をシリアル化します。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="messageVersion">メッセージとその交換に関連付けられている SOAP のバージョンに関連する情報が含まれています。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeader.WriteStartHeader(System.Xml.XmlDictionaryWriter,System.ServiceModel.Channels.MessageVersion)">
      <summary>指定した XML ライターを使用して開始ヘッダーをシリアル化します。</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
      <param name="messageVersion">メッセージとその交換に関連付けられている SOAP のバージョンに関連する情報が含まれています。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeaderInfo">
      <summary>SOAP メッセージ ヘッダーに関連するシステム情報を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaderInfo.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageHeaderInfo" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Actor">
      <summary>メッセージ ヘッダーの意図された受信者を取得または設定します。</summary>
      <returns>メッセージ ヘッダーの意図された受信者を示す URI。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.IsReferenceParameter">
      <summary>メッセージ ヘッダーがエンドポイント参照の参照パラメーターを表すかどうかを示す値を取得します。</summary>
      <returns>メッセージ ヘッダーがエンドポイント参照の参照パラメーターを表す場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.MustUnderstand">
      <summary>メッセージ ヘッダーの処理が必須か省略可能かを示す値を取得または設定します。</summary>
      <returns>メッセージ ヘッダーの処理が必須の場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Name">
      <summary>メッセージ ヘッダーの名前を取得します。</summary>
      <returns>メッセージ ヘッダーの名前。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Namespace">
      <summary>メッセージ ヘッダーの名前空間を取得します。</summary>
      <returns>メッセージ ヘッダーの名前空間。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaderInfo.Relay">
      <summary>ヘッダーが中継できるかどうかを示す値を取得または設定します。</summary>
      <returns>ヘッダーが中継できる場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageHeaders">
      <summary>メッセージのメッセージ ヘッダーのコレクションを表します。このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageHeaders)">
      <summary>指定されたメッセージ ヘッダーのコレクションで <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection">メッセージ ヘッダーのコレクション。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageVersion)">
      <summary>指定したメッセージ バージョンを使用して、<see cref="T:System.ServiceModel.Channels.MessageHeaders" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="version">メッセージの SOAP バージョン。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.#ctor(System.ServiceModel.Channels.MessageVersion,System.Int32)">
      <summary>指定されたメッセージ バージョンとメッセージ サイズで <see cref="T:System.ServiceModel.Channels.MessageHeaders" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="version">メッセージの SOAP バージョン。</param>
      <param name="initialSize">ヘッダーのサイズ。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Action">
      <summary>メッセージをどのように処理しなければならないかの説明を取得または設定します。</summary>
      <returns>メッセージの処理方法の記述。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Add(System.ServiceModel.Channels.MessageHeader)">
      <summary>指定されたメッセージ ヘッダーをコレクションに追加します。</summary>
      <param name="header">追加するメッセージ ヘッダー。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Clear">
      <summary>すべてのヘッダーをコレクションから削除します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeaderFrom(System.ServiceModel.Channels.Message,System.Int32)">
      <summary>指定されたメッセージの指定されたインデックス位置にあるヘッダー コンテンツをこのインスタンスにコピーします。</summary>
      <param name="message">メッセージ。</param>
      <param name="headerIndex">内容をコピーする元のメッセージ ヘッダーの位置。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeaderFrom(System.ServiceModel.Channels.MessageHeaders,System.Int32)">
      <summary>指定されたメッセージ ヘッダー コレクションの指定されたインデックス位置にあるヘッダー コンテンツをこのインスタンスにコピーします。</summary>
      <param name="collection">
        <see cref="T:System.ServiceModel.Channels.MessageHeaders" />。</param>
      <param name="headerIndex">内容をコピーする元のメッセージ ヘッダーの位置。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeadersFrom(System.ServiceModel.Channels.Message)">
      <summary>指定されたメッセージのすべてのヘッダーのコンテンツをこのインスタンスにコピーします。</summary>
      <param name="message">メッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyHeadersFrom(System.ServiceModel.Channels.MessageHeaders)">
      <summary>指定されたヘッダー コレクションのコンテンツをこのインスタンスにコピーします。</summary>
      <param name="collection">
        <see cref="T:System.ServiceModel.Channels.MessageHeaders" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.CopyTo(System.ServiceModel.Channels.MessageHeaderInfo[],System.Int32)">
      <summary>このコレクションに格納されているヘッダーを、配列の特定のインデックス位置以降の部分にコピーします。</summary>
      <param name="array">このインスタンスからコピーされるメッセージ ヘッダー オブジェクトのコピー先となる一次元配列。配列のインデックスは 0 から始まっている必要があります。</param>
      <param name="index">コピーの開始位置となる配列の 0 から始まるインデックス。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Count">
      <summary>このコレクション内のメッセージ ヘッダーの数を取得します。</summary>
      <returns>このコレクション内のメッセージ ヘッダーの数。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.FaultTo">
      <summary>エラーの送信先とするノードのアドレスを取得または設定します。</summary>
      <returns>エラーの送信先とするノードの <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.FindHeader(System.String,System.String)">
      <summary>指定されたヘッダー要素の LocalName および名前空間 URI を使用して、このコレクションからメッセージ ヘッダーを検索します。</summary>
      <returns>このコレクション内のメッセージ ヘッダーのインデックス。</returns>
      <param name="name">ヘッダー XML 要素の LocalName。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.FindHeader(System.String,System.String,System.String[])">
      <summary>ヘッダー要素の指定された LocalName、名前空間 URI、およびアクターで、このコレクション内のメッセージ ヘッダーを検索します。</summary>
      <returns>このコレクション内のメッセージ ヘッダーのインデックス。</returns>
      <param name="name">ヘッダー XML 要素の LocalName。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="actors">メッセージ ヘッダーの宛先の受信者。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.From">
      <summary>メッセージが送信されるノードのアドレスを取得または設定します。</summary>
      <returns>メッセージが送信されるノードの <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetEnumerator">
      <summary>コレクションを反復処理できる列挙子を返します。このメソッドは継承できません。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.Int32)">
      <summary>このコレクション内の特定の位置にあるメッセージ ヘッダーを取得します。</summary>
      <returns>メッセージ ヘッダー。</returns>
      <param name="index">取得するヘッダーの 0 から始まるインデックス。</param>
      <typeparam name="T">メッセージ ヘッダー。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.Int32,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>このコレクション内の特定の位置にあるメッセージ ヘッダーを取得します。</summary>
      <returns>メッセージ ヘッダー。</returns>
      <param name="index">取得するヘッダーの 0 から始まるインデックス。</param>
      <param name="serializer">
        <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <typeparam name="T">メッセージ ヘッダー。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String)">
      <summary>指定されたヘッダー要素の LocalName および名前空間 URI を使用して、このコレクションからメッセージ ヘッダーを検索します。</summary>
      <returns>メッセージ ヘッダー。</returns>
      <param name="name">ヘッダー XML 要素の LocalName。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <typeparam name="T">メッセージ ヘッダー。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>このコレクションから、指定された LocalName、名前空間 URI、およびシリアライザーでメッセージ ヘッダーを取得します。</summary>
      <returns>メッセージ ヘッダー。</returns>
      <param name="name">ヘッダー XML 要素の LocalName。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="serializer">
        <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />。</param>
      <typeparam name="T">メッセージ ヘッダー。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetHeader``1(System.String,System.String,System.String[])">
      <summary>ヘッダー要素の指定された LocalName、名前空間 URI、およびアクターで、このコレクション内のメッセージ ヘッダーを取得します。</summary>
      <returns>メッセージ ヘッダー。</returns>
      <param name="name">ヘッダー XML 要素の LocalName。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
      <param name="actors">メッセージ ヘッダーの宛先の受信者。</param>
      <typeparam name="T">メッセージ ヘッダー。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.GetReaderAtHeader(System.Int32)">
      <summary>コレクションの指定された位置にあるメッセージ ヘッダーにアクセスする XML ディレクトリ リーダーを取得します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" />。</returns>
      <param name="headerIndex">取得するヘッダーの 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.HaveMandatoryHeadersBeenUnderstood">
      <summary>MustUnderstand でマークされているすべてのメッセージ ヘッダーが正しく解釈され処理されているかどうかを確認します。</summary>
      <returns>
        <paramref name="actors" /> によって指定された受信者が、MustUnderstand でマークされたすべてのメッセージ ヘッダーを適切に解釈し、処理した場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.HaveMandatoryHeadersBeenUnderstood(System.String[])">
      <summary>指定された受信者が MustUnderstand でマークされているすべてのメッセージ ヘッダーを正しく解釈して処理したかどうかを確認します。</summary>
      <returns>
        <paramref name="actors" /> によって指定された受信者が、MustUnderstand でマークされたすべてのメッセージ ヘッダーを適切に解釈し、処理した場合は true。それ以外の場合は false。</returns>
      <param name="actors">メッセージ ヘッダーの宛先の受信者。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.Insert(System.Int32,System.ServiceModel.Channels.MessageHeader)">
      <summary>コレクションの指定されたインデックス位置にメッセージ ヘッダーを挿入します。</summary>
      <param name="headerIndex">
        <paramref name="header" /> の挿入位置を 0 から始まるインデックスで指定します。</param>
      <param name="header">挿入するメッセージ ヘッダー。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.Item(System.Int32)">
      <summary>指定されたインデックス位置のヘッダーを取得します。</summary>
      <returns>コレクション内の <see cref="T:System.ServiceModel.Channels.MessageHeaderInfo" />。<paramref name="index" /> がリスト内のヘッダーの数と等しいかそれより大きい場合は、null を返します。</returns>
      <param name="index">ヘッダーのリストの 0 で始まるインデックス。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.MessageId">
      <summary>メッセージの一意の ID を取得または設定します。</summary>
      <returns>メッセージの一意の ID。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.MessageVersion">
      <summary>メッセージの SOAP バージョンを取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.RelatesTo">
      <summary>このメッセージと関連のあるメッセージの ID を取得します。</summary>
      <returns>このメッセージと関連のあるメッセージの ID。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.RemoveAll(System.String,System.String)">
      <summary>指定された名前と名前空間を持つすべてのヘッダーをコレクションから削除します。</summary>
      <param name="name">ヘッダー XML 要素の LocalName。</param>
      <param name="ns">ヘッダー XML 要素の名前空間 URI。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.RemoveAt(System.Int32)">
      <summary>指定されたインデックス位置にあるメッセージ ヘッダーをコレクションから削除します。</summary>
      <param name="headerIndex">削除するヘッダーを指定する 0 から始まるインデックス。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.ReplyTo">
      <summary>要求への応答の送信先となるノードのアドレスを取得または設定します。</summary>
      <returns>要求への応答の送信先となるノードの <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.SetAction(System.Xml.XmlDictionaryString)">
      <summary>ヘッダーのアクション要素を設定します。</summary>
      <param name="action">メッセージの処理方法の記述。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理できる列挙子を返します。このメソッドは継承できません。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageHeaders.To">
      <summary>メッセージの送信先エンドポイントを取得または設定します。</summary>
      <returns>メッセージの送信先エンドポイントが格納された URI。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeader(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>指定した XML ライターを使用して、指定した位置からヘッダーをシリアル化します。</summary>
      <param name="headerIndex">シリアル化するヘッダーの 0 から始まるインデックス。</param>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeader(System.Int32,System.Xml.XmlWriter)">
      <summary>指定した XML ライターを使用して、指定した位置からヘッダーをシリアル化します。</summary>
      <param name="headerIndex">シリアル化するヘッダーの 0 から始まるインデックス。</param>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeaderContents(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>指定した XML ライターを使用して、指定したヘッダーの内容をシリアル化します。</summary>
      <param name="headerIndex">シリアル化するヘッダーの 0 から始まるインデックス。</param>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteHeaderContents(System.Int32,System.Xml.XmlWriter)">
      <summary>指定した XML ライターを使用して、指定したヘッダーの内容をシリアル化します。</summary>
      <param name="headerIndex">シリアル化するヘッダーの 0 から始まるインデックス。</param>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteStartHeader(System.Int32,System.Xml.XmlDictionaryWriter)">
      <summary>指定した XML ライターを使用して開始ヘッダーをシリアル化します。</summary>
      <param name="headerIndex">シリアル化するヘッダーの 0 から始まるインデックス。</param>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageHeaders.WriteStartHeader(System.Int32,System.Xml.XmlWriter)">
      <summary>指定した XML ライターを使用して開始ヘッダーをシリアル化します。</summary>
      <param name="headerIndex">シリアル化するヘッダーの 0 から始まるインデックス。</param>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageProperties">
      <summary>メッセージの一連のプロパティを表します。このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.#ctor(System.ServiceModel.Channels.MessageProperties)">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> クラスの新しいインスタンスを事前設定された既定のプロパティを使用して初期化します。</summary>
      <param name="properties">
        <see cref="T:System.ServiceModel.Channels.MessageProperties" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Add(System.String,System.Object)">
      <summary>指定された名前とプロパティを持つ要素を <see cref="T:System.ServiceModel.Channels.MessageProperties" /> に追加します。このメソッドは継承できません。</summary>
      <param name="name">追加する要素の名前。</param>
      <param name="property">追加する要素の値。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.AllowOutputBatching">
      <summary>このメッセージにトランスポートを与えるより前にこのメッセージを保存するかどうかを指定する値を取得または設定します。</summary>
      <returns>送信メッセージのバッチ処理が可能な場合は true、バッチ処理が不可能な場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Clear">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> からすべての要素を削除します。このメソッドは継承できません。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.ContainsKey(System.String)">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> が特定の名前を含んでいるかどうかを調べます。このメソッドは継承できません。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> に、指定された <paramref name="name" /> の要素が含まれている場合は true、含まれていない場合は false。</returns>
      <param name="name">
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 内で探す名前。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.CopyProperties(System.ServiceModel.Channels.MessageProperties)">
      <summary>指定された <see cref="T:System.ServiceModel.Channels.MessageProperties" /> のコンテンツをこのインスタンスにコピーします。</summary>
      <param name="properties">
        <see cref="T:System.ServiceModel.Channels.MessageProperties" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Count">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 内のプロパティの合計数を取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 内のプロパティの総数。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Dispose">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Encoder">
      <summary>メッセージのストリームへの書き込みおよびストリームからのメッセージの読み取りに使用されるエンコーダーを取得します。</summary>
      <returns>メッセージのストリームへの書き込みおよびストリームからのメッセージの読み取りに使用される <see cref="T:System.ServiceModel.Channels.MessageEncoder" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.IsFixedSize">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.ServiceModel.Channels.MessageProperties" /> が固定サイズの場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.IsReadOnly">
      <summary>このプロパティ セットが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>このプロパティ セットが読み取り専用の場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Item(System.String)">
      <summary>指定されたインデックス位置のプロパティを取得します。</summary>
      <returns>指定された <paramref name="name" /> を持つプロパティ、またはそのプロパティが存在しない場合は null。</returns>
      <param name="name">コレクションから取得するプロパティの名前。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Keys">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 内のキーを格納している <see cref="T:System.Collections.ICollection" /> を取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 内のキーを格納している <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.Remove(System.String)">
      <summary>指定された名前を持つ要素を <see cref="T:System.ServiceModel.Channels.MessageProperties" /> から削除します。このメソッドは継承できません。</summary>
      <returns>指定された <paramref name="name" /> を持っており削除できる要素が <see cref="T:System.ServiceModel.Channels.MessageProperties" /> に含まれていた場合は true、それ以外の場合は false。</returns>
      <param name="name">削除する要素の名前。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>指定された名前とプロパティを持つ要素を <see cref="T:System.ServiceModel.Channels.MessageProperties" /> に追加します。このメソッドは継承できません。</summary>
      <param name="pair">追加する要素の名前と値を格納するキーと値のペア。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> が特定の名前を含んでいるかどうかを調べます。このメソッドは継承できません。</summary>
      <returns>指定された <paramref name="pair" /> に名前と値を持つ要素が <see cref="T:System.ServiceModel.Channels.MessageProperties" /> に格納されている場合は true。それ以外の場合は false。</returns>
      <param name="pair">
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> で検索する要素の名前と値が格納されているキーと値のペア。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>指定したインデックスを開始位置として、指定した <see cref="T:System.ServiceModel.Channels.MessageProperties" /> の内容を配列にコピーします。このメソッドは継承できません。</summary>
      <param name="array">コレクションのコピー先の <see cref="T:System.Array" />。</param>
      <param name="index">コピーの開始位置を示すインデックス。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>指定された名前を持つ要素を <see cref="T:System.ServiceModel.Channels.MessageProperties" /> から削除します。このメソッドは継承できません。</summary>
      <returns>
        <paramref name="pair" /> パラメーターに指定された名前と値を持つ要素が <see cref="T:System.ServiceModel.Channels.MessageProperties" /> に格納されている場合は true。それ以外の場合は false。</returns>
      <param name="pair">削除する要素の名前と値を格納するキーと値のペア。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>コレクションを反復処理できる列挙子を返します。このメソッドは継承できません。</summary>
      <returns>コレクションの反復処理に使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理できる列挙子を返します。このメソッドは継承できません。</summary>
      <returns>コレクションの反復処理に使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageProperties.TryGetValue(System.String,System.Object@)">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> が特定の名前を含んでいるかどうかを調べ、その値を取得します。このメソッドは継承できません。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> に、指定された <paramref name="name" /> の要素が含まれている場合は true、含まれていない場合は false。</returns>
      <param name="name">探す要素の名前。</param>
      <param name="value">見つかった要素の値。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Values">
      <summary>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> の値を取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.MessageProperties" /> 内の値を格納している <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageProperties.Via">
      <summary>メッセージの送信に使用されるトランスポート アドレスを取得または設定します。</summary>
      <returns>メッセージの送信に使用されるトランスポート アドレスが入っている URI。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageState">
      <summary>メッセージのステータスを指定します。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Created">
      <summary>メッセージが作成されました。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Read">
      <summary>メッセージが読み取られています。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Written">
      <summary>メッセージが書き込まれました。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Copied">
      <summary>メッセージがコピーされました。</summary>
    </member>
    <member name="F:System.ServiceModel.Channels.MessageState.Closed">
      <summary>メッセージが閉じられ、もうアクセスできない状態になりました。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.MessageVersion">
      <summary>メッセージとその交換に関連付けられている SOAP および WS-Addressing のバージョンを指定します。</summary>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Addressing">
      <summary>現在のメッセージ バージョンに関連付けられている WS-Addressing のバージョンを取得します。</summary>
      <returns>現在のメッセージ バージョンに関連付けられている <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion)">
      <summary>WS-Addressing 1.0 を使用し、指定された SOAP バージョンで、メッセージ バージョン オブジェクトを作成します。</summary>
      <returns>指定されたエンベロープ バージョンを持つ <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
      <param name="envelopeVersion">SOAP バージョンを示す <see cref="T:System.ServiceModel.EnvelopeVersion" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion,System.ServiceModel.Channels.AddressingVersion)">
      <summary>指定された WS-Addressing および SOAP のバージョンでメッセージ バージョン オブジェクトを作成します。</summary>
      <returns>指定された WS-Addressing および SOAP のバージョンを使用する <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
      <param name="envelopeVersion">SOAP バージョンを示す <see cref="T:System.ServiceModel.EnvelopeVersion" />。</param>
      <param name="addressingVersion">WS-Addressing バージョンを示す <see cref="T:System.ServiceModel.Channels.AddressingVersion" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Default">
      <summary>Windows Phone によって使用される既定のメッセージ バージョンを取得します。</summary>
      <returns>SOAP 1.2 および WS-Addressing バージョン 1.0 を使用する <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Envelope">
      <summary>現在のメッセージ バージョンに関連付けられている SOAP バージョンを取得します。</summary>
      <returns>メッセージ バージョン オブジェクトに関連付けられている <see cref="T:System.ServiceModel.EnvelopeVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.Equals(System.Object)">
      <summary>現在のメッセージ バージョンが指定されたオブジェクトと等しいかどうかを示す値を返します。</summary>
      <returns>指定したオブジェクトが現在の <see cref="T:System.ServiceModel.Channels.MessageVersion" /> オブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のメッセージ バージョンと比較する <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.GetHashCode">
      <summary>現在のメッセージ バージョンのハッシュ コードを取得します。</summary>
      <returns>現在の <see cref="T:System.ServiceModel.Channels.MessageVersion" /> の一意のハッシュ コード。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.None">
      <summary>SOAP も WS-Addressing も使用しないメッセージ バージョンを取得します。</summary>
      <returns>SOAP も WS-Addressing も使用しない <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Soap11">
      <summary>SOAP 1.1 を使用するメッセージ バージョンを取得します。</summary>
      <returns>SOAP 1.1 を使用して、WS-Addressing のバージョンは一切使用しない <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.MessageVersion.Soap12WSAddressing10">
      <summary>WS-Addressing 1.0 および SOAP 1.2 を使用するメッセージ バージョンを取得します。</summary>
      <returns>WS-Addressing 1.0 および SOAP 1.2 のバージョンを使用する <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.MessageVersion.ToString">
      <summary>現在のメッセージ バージョン。</summary>
      <returns>現在の <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.RequestContext">
      <summary>着信要求に関連のある返信を提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.RequestContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Abort">
      <summary>派生クラス内でオーバーライドされた場合に、コンテキストに関連付けられている要求の処理を破棄します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.BeginReply(System.ServiceModel.Channels.Message,System.AsyncCallback,System.Object)">
      <summary>派生クラス内でオーバーライドされた場合に、現在のコンテキストに関連付けられている要求に応答する非同期操作を開始します。</summary>
      <returns>非同期の返信操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">要求が含まれている着信 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="callback">非同期の応答操作の完了通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期の返信操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.BeginReply(System.ServiceModel.Channels.Message,System.TimeSpan,System.AsyncCallback,System.Object)">
      <summary>派生クラス内でオーバーライドされた場合に、指定された制限時間内に現在のコンテキストに関連付けられている要求に応答する非同期操作を開始します。</summary>
      <returns>非同期の返信操作を参照する <see cref="T:System.IAsyncResult" />。</returns>
      <param name="message">要求が含まれている着信 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">取得可能な要求を待って待機する時間を指定する <see cref="T:System.Timespan" />。</param>
      <param name="callback">非同期の応答操作の完了通知を受け取る <see cref="T:System.AsyncCallback" /> デリゲート。</param>
      <param name="state">非同期の返信操作に関連付けられている状態情報を含むオブジェクト (アプリケーション指定)。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Close">
      <summary>派生クラス内でオーバーライドされた場合に、現在のコンテキストに関連付けられている要求コンテキストに返信する操作を閉じます。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Close(System.TimeSpan)">
      <summary>派生クラス内でオーバーライドされた場合に、指定された制限時間内に現在のコンテキストに関連付けられている要求コンテキストに返信する操作を閉じます。</summary>
      <param name="timeout">現在のコンテキストに関連付けられている返信操作を閉じるまでの制限時間を指定する <see cref="T:System.Timespan" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Dispose(System.Boolean)">
      <summary>コンテキストと関連付けられたリソースを解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.EndReply(System.IAsyncResult)">
      <summary>派生クラス内でオーバーライドされた場合に、要求メッセージに返信する非同期操作を完了させます。</summary>
      <param name="result">
        <see cref="Overload:System.ServiceModel.Channels.RequestContext.BeginReply" /> メソッドの 1 つの呼び出しから戻された <see cref="T:System.IAsyncResult" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Reply(System.ServiceModel.Channels.Message)">
      <summary>派生クラス内でオーバーライドされた場合に、要求メッセージに返信します。</summary>
      <param name="message">要求が含まれている着信 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.Reply(System.ServiceModel.Channels.Message,System.TimeSpan)">
      <summary>派生クラス内でオーバーライドされた場合に、指定された制限時間内に要求メッセージに返信します。</summary>
      <param name="message">要求が含まれている着信 <see cref="T:System.ServiceModel.Channels.Message" />。</param>
      <param name="timeout">要求への返信を待って待機する時間を指定する <see cref="T:System.Timespan" />。</param>
    </member>
    <member name="P:System.ServiceModel.Channels.RequestContext.RequestMessage">
      <summary>派生クラス内でオーバーライドされた場合に、要求が格納されたメッセージを取得します。</summary>
      <returns>要求が格納された <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.RequestContext.System#IDisposable#Dispose">
      <summary>コンテキストに関連付けられているマネージ リソースとアンマネージ リソースの両方を解放します。</summary>
    </member>
    <member name="T:System.ServiceModel.Channels.SecurityBindingElement">
      <summary>実装された場合に、チャネル SOAP メッセージのセキュリティをサポートするバインド要素を表す抽象クラス。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>渡された <see cref="T:System.ServiceModel.Channels.SecurityBindingElement" /> の設定値およびバインド コンテキストに基づいてチャネル ファクトリを作成します。作成されたチャネル ファクトリは、バインド コンテキストに対応するチャネル ファクトリへの参照を内部的に持つ SOAP メッセージ セキュリティ チャネル ファクトリです (トランスポート チャネル ファクトリも含みます)。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.IChannelFactory" />。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">チャネル ファクトリの種類。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TChannel" /> 型のチャネルはサポートされていません。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.BuildChannelFactoryCore``1(System.ServiceModel.Channels.BindingContext)">
      <summary>派生クラス内で実装された場合に、指定された型のチャネル ファクトリを作成します。</summary>
      <returns>型 <paramref name="TChannel" /> のチャネルを作成する <see cref="T:System.ServiceModel.Channels.IChannelFactory" />。</returns>
      <param name="context">チャネル ファクトリの <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">チャネル ファクトリの種類。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TChannel" /> 型のチャネルはサポートされていません。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>指定された型のチャネル ファクトリを構築できるかどうかを示す値を取得します。</summary>
      <returns>型 <paramref name="TChannel" /> のチャネル ファクトリが構築できる場合は true、それ以外の場合は false。</returns>
      <param name="context">チャネル ファクトリの <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">チャネル ファクトリの型。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.CreateUserNameOverTransportBindingElement">
      <summary>SOAP メッセージの一部として送信されたユーザー名とパスワードに基づくクライアント認証用に構成されたセキュリティ バンド要素を作成します。バインド要素は、サーバー認証とメッセージ保護を提供するためにトランスポートを必要とします (たとえば、HTTPS)。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.TransportSecurityBindingElement" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.SecurityBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>指定した <see cref="T:System.ServiceModel.Channels.BindingContext" /> を使用して、指定したオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> から取得した、指定されたオブジェクト、またはオブジェクトが見つからなかった場合は null。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">取得するプロパティ。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> が null です。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.IncludeTimestamp">
      <summary>各メッセージにタイム スタンプが含まれているかどうかを示す値を取得または設定します。</summary>
      <returns>各メッセージにタイム スタンプが含まれている場合は true、それ以外の場合は false。既定値は true です。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.SecurityBindingElement.LocalClientSettings">
      <summary>クライアントによって使用されるローカル セキュリティ設定に特有のバインド プロパティを取得します。</summary>
      <returns>ローカル クライアント セキュリティの設定が格納されている <see cref="T:System.ServiceModel.Channels.LocalClientSecuritySettings" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement">
      <summary>テキスト ベースの SOAP メッセージに使用される文字エンコードとメッセージ バージョン管理を指定するバインド要素。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.#ctor(System.ServiceModel.Channels.MessageVersion,System.Text.Encoding)">
      <summary>指定されたメッセージ バージョンとエンコーディングで <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="messageVersion">メッセージ バージョンに使用される <see cref="T:System.ServiceModel.Channels.MessageVersion" />。</param>
      <param name="writeEncoding">メッセージの文字の書式化に使用される <see cref="T:System.Text.Encoding" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="messageVersion" /> または <paramref name="writeEncoding" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="writeEncoding" /> の値が無効です。</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>指定されたコンテキストおよび種類のチャネルを作成するクライアント上にチャネル ファクトリ スタックをビルドします。</summary>
      <returns>指定したコンテキストの <paramref name="TChannel" /> 型の <see cref="T:System.ServiceModel.Channels.IChannelFactory`1" />。</returns>
      <param name="context">チャネルの <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="TChannel">チャネル ファクトリによって生成されるチャネルの種類。</typeparam>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.Clone">
      <summary>現在のオブジェクトから初期化された新規 <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" /> オブジェクトを作成します。</summary>
      <returns>現在の要素のプロパティ値と同じプロパティ値を持つ <see cref="T:System.ServiceModel.Channels.TextMessageEncodingBindingElement" />。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.CreateMessageEncoderFactory">
      <summary>現在のエンコード バインド要素で指定されているメッセージ バージョンと文字エンコードを採用したテキスト メッセージ エンコーダーのためのファクトリを作成します。</summary>
      <returns>このファクトリが作成する <see cref="T:System.ServiceModel.Channels.MessageEncoderFactory" /> クラス。</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.TextMessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>存在する場合は、バインド要素スタック内の適切なレイヤーから、型が指定されている、要求されたオブジェクトを返します。</summary>
      <returns>型が指定されている、要求されたオブジェクト T が存在する場合はそのオブジェクト、存在しない場合は null 参照 (Visual Basic では Nothing)。</returns>
      <param name="context">バインド要素の <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">メソッドによって照会されている型が指定されたオブジェクト。</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.TextMessageEncodingBindingElement.MessageVersion">
      <summary>テキスト メッセージの書式化に使用される SOAP および WS-Addressing のバージョンを取得または設定します。</summary>
      <returns>メッセージの書式化に使用される <see cref="T:System.ServiceModel.Channels.MessageVersion" />。既定値は <see cref="P:System.ServiceModel.Channels.MessageVersion.Soap12WSAddressing10" /> です。</returns>
      <exception cref="T:System.ArgumentNullException">値が null です。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TextMessageEncodingBindingElement.WriteEncoding">
      <summary>テキスト メッセージに含まれる文字の書式化に使用されるエンコードを取得または設定します。</summary>
      <returns>テキスト メッセージに含まれる文字の書式化に使用される <see cref="T:System.Text.Encoding" />。既定のテキスト エンコードは UTF-8 形式です。</returns>
      <exception cref="T:System.ArgumentNullException">値が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="writeEncoding" /> の値が無効です。</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.TransportBindingElement">
      <summary>トランスポート バインド要素を表す abstract 基本クラス。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.#ctor">
      <summary>このクラスの新しいインスタンスを作成します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.#ctor(System.ServiceModel.Channels.TransportBindingElement)">
      <summary>このクラスの新しいインスタンスを既存インスタンスから作成します。</summary>
      <param name="elementToBeCloned">複製する <see cref="T:System.ServiceModel.Channels.TransportBindingElement" />。</param>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>指定した <see cref="T:System.ServiceModel.Channels.BindingContext" /> からプロパティを取得します。</summary>
      <returns>指定した <see cref="T:System.ServiceModel.Channels.BindingContext" /> から取得されたプロパティ。</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" />。</param>
      <typeparam name="T">取得するプロパティ。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> に null は指定できません。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.ManualAddressing">
      <summary>手動によるメッセージのアドレス指定が必要かどうかを示す値を取得または設定します。</summary>
      <returns>手動によるメッセージのアドレス指定が必要な場合は true、それ以外の場合は false。既定値は false です。</returns>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize">
      <summary>受信が許可される最大許容メッセージ サイズを取得または設定します。</summary>
      <returns>受信できる最大許容メッセージ サイズ。既定値は 65,536 バイトです。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> に負の値を設定することはできません。</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.TransportBindingElement.Scheme">
      <summary>トランスポートの URI スキーマを取得します。</summary>
      <returns>トランスポートの URI スキーマを返します。これは、このメソッドを実装した派生クラスに応じて変わります。</returns>
    </member>
    <member name="T:System.ServiceModel.Channels.TransportSecurityBindingElement">
      <summary>混合モードのセキュリティ (セキュリティ保護されたトランスポートでの最適化されたメッセージ セキュリティなど) をサポートするカスタム バインド要素を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportSecurityBindingElement.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Channels.TransportSecurityBindingElement" /> クラスのインスタンスを作成します。</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.TransportSecurityBindingElement.Clone">
      <summary>現在のクラスで初期化された新しい <see cref="T:System.ServiceModel.Channels.BindingElement" /> オブジェクトを作成します。</summary>
      <returns>現在のインスタンスのプロパティ値と等しいプロパティ値を持つ <see cref="T:System.ServiceModel.Channels.BindingElement" /> オブジェクト。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.ClientCredentials">
      <summary>クライアントのサービスに対する認証に使用されるクライアントの資格情報をユーザーが構成できるようにします。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Description.ClientCredentials" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.#ctor(System.ServiceModel.Description.ClientCredentials)">
      <summary>既存の <see cref="T:System.ServiceModel.Description.ClientCredentials" /> のコピーを作成します。</summary>
      <param name="other">コピーされる <see cref="T:System.ServiceModel.Description.ClientCredentials" /> インスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.Clone">
      <summary>この <see cref="T:System.ServiceModel.Description.ClientCredentials" /> インスタンスの新規コピーを作成します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.ClientCredentials" /> のインスタンス。</returns>
      <exception cref="T:System.NotImplementedException">現在の資格情報は null であるか、または正しく型が指定されていません。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ClientCredentials.CloneCore">
      <summary>この <see cref="T:System.ServiceModel.Description.ClientCredentials" /> インスタンスの新規コピーを作成します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.ClientCredentials" /> のインスタンス。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ClientCredentials.UserName">
      <summary>クライアントが自分のサービスでの認証に使用するユーザー名とパスワードの設定に使用できる資格情報オブジェクトを取得します。</summary>
      <returns>クライアントの資格情報の現在のユーザー名とパスワードを表す <see cref="T:System.ServiceModel.Security.UserNamePasswordClientCredential" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.ContractDescription">
      <summary>エンドポイントが外部の世界と何を通信するかを指定するコントラクトを記述します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ContractDescription.#ctor(System.String)">
      <summary>指定した名前を使用して、<see cref="T:System.ServiceModel.Description.ContractDescription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">コントラクトの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> が空です。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.ContractDescription.#ctor(System.String,System.String)">
      <summary>指定された名前空間修飾名で <see cref="T:System.ServiceModel.Description.ContractDescription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">コントラクトの名前。</param>
      <param name="ns">コントラクトの名前を含む名前空間。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> が空です。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.CallbackContractType">
      <summary>コントラクトの説明で指定されるコールバック コントラクトの型を取得または設定します。</summary>
      <returns>コントラクトの説明で指定されるコールバック コントラクトの <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.ConfigurationName">
      <summary>コントラクトの説明の構成名を取得または設定します。</summary>
      <returns>コントラクトの構成名。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.ContractType">
      <summary>コントラクトの説明で指定されるコントラクトの型を取得または設定します。</summary>
      <returns>コントラクトの説明で指定されるコントラクトの <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Name">
      <summary>コントラクトの名前を取得または設定します。</summary>
      <returns>コントラクトの説明の名前。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Namespace">
      <summary>コントラクトの名前空間を取得または設定します。</summary>
      <returns>コントラクトの名前空間。</returns>
      <exception cref="T:System.ArgumentNullException">設定された値は null です。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.ContractDescription.Operations">
      <summary>コントラクトと関連付けられている操作説明のコレクションを取得します。</summary>
      <returns>コントラクトの説明と関連付けられている操作説明が格納された <see cref="T:System.ServiceModel.Description.OperationDescriptionCollection" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.FaultDescription">
      <summary>SOAP フォールトを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.FaultDescription.#ctor(System.String)">
      <summary>アクション値を指定して、<see cref="T:System.ServiceModel.Description.FaultDescription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">SOAP エラー メッセージのアクション。</param>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.Action">
      <summary>SOAP エラー メッセージのアクションの値を取得します。</summary>
      <returns>SOAP フォールトのアクション。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.DetailType">
      <summary>SOAP エラーの詳細の型を取得または設定します。</summary>
      <returns>シリアル化された詳細オブジェクトの型。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.Name">
      <summary>SOAP エラーの名前を取得または設定します。</summary>
      <returns>SOAP エラーの名前。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.FaultDescription.Namespace">
      <summary>SOAP フォールトの名前空間を取得または設定します。</summary>
      <returns>SOAP フォールトの名前空間。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.FaultDescriptionCollection">
      <summary>コントラクト内での SOAP エラーに関する情報の取得に使用できる <see cref="T:System.ServiceModel.Description.FaultDescription" /> オブジェクトのコレクション。</summary>
    </member>
    <member name="T:System.ServiceModel.Description.MessageBodyDescription">
      <summary>SOAP メッセージの本文を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageBodyDescription.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Description.MessageBodyDescription" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.Parts">
      <summary>SOAP メッセージの本文の部分を取得します。</summary>
      <returns>SOAP メッセージの本文の検査または修正できる部分が格納された <see cref="T:System.ServiceModel.Description.MessagePartDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.ReturnValue">
      <summary>SOAP メッセージの戻り値を含んでいる部分を取得または設定します。</summary>
      <returns>戻り値がある場合はその値。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.WrapperName">
      <summary>SOAP 本文要素内にラッパー要素がある場合に、その名前を取得または設定します。</summary>
      <returns>ラッパー要素がある場合はその名前。それ以外の場合は null。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageBodyDescription.WrapperNamespace">
      <summary>SOAP 本文要素内にラッパー要素がある場合に、その名前空間を取得または設定します。</summary>
      <returns>ラッパー要素がある場合はその名前空間。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDescription">
      <summary>メッセージの説明を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescription.#ctor(System.String,System.ServiceModel.Description.MessageDirection)">
      <summary>指定されたアクションと方向で <see cref="T:System.ServiceModel.Description.MessageDescription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">メッセージの目的を識別するパラメーターである SOAP メッセージのアクション パラメーター。</param>
      <param name="direction">メッセージが受信の場合は <see cref="F:System.ServiceModel.Description.MessageDirection.Input" />、メッセージが送信の場合は <see cref="F:System.ServiceModel.Description.MessageDirection.Output" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> が <see cref="F:System.ServiceModel.Description.MessageDirection.Input" /> でも <see cref="F:System.ServiceModel.Description.MessageDirection.Output" /> でもありません。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Action">
      <summary>メッセージの目的を識別するパラメーターである SOAP メッセージのアクション パラメーターを取得します。</summary>
      <returns>アクション URI。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Body">
      <summary>SOAP メッセージの本文を取得します。</summary>
      <returns>メッセージの本文が格納された <see cref="T:System.ServiceModel.Description.MessagePartDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.Direction">
      <summary>メッセージが受信なのか送信なのかを示すメッセージの方向を取得します。</summary>
      <returns>メッセージがサービスに受信されるのかサービスから送信されるのかを示す <see cref="T:System.ServiceModel.Description.MessageDirection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessageDescription.MessageType">
      <summary>メッセージ コントラクトの種類を識別する型を取得または設定します。</summary>
      <returns>メッセージ コントラクトの型。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDescriptionCollection">
      <summary>コントラクトに属する操作を構成するメッセージの説明の保存に使用されるコレクションを提供します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescriptionCollection.Find(System.String)">
      <summary>メッセージのコレクション内の、指定されたアクションを持つ最初のメッセージの説明を検索して返します。</summary>
      <returns>コレクション内でメッセージが指定された <paramref name="action" /> を持つ最初の <see cref="T:System.ServiceModel.Description.MessageDescription" />。一致する <paramref name="action" /> が見つからない場合は null。</returns>
      <param name="action">検索するメッセージのアクション。</param>
    </member>
    <member name="M:System.ServiceModel.Description.MessageDescriptionCollection.FindAll(System.String)">
      <summary>コレクション内の、指定されたアクションを持つすべてのメッセージの説明を検索して返します。</summary>
      <returns>現在のコレクション内で指定された <paramref name="action" /> を持つメッセージのコレクション メッセージ説明が格納された <see cref="T:System.ServiceModel.Description.MessageDescriptionCollection" />。一致する <see cref="T:System.ServiceModel.Description.MessageDescription" /> オブジェクトが見つからない場合は、空のコレクションが返されます。</returns>
      <param name="action">検索するメッセージのアクション。</param>
    </member>
    <member name="T:System.ServiceModel.Description.MessageDirection">
      <summary>メッセージの方向を指定します。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.MessageDirection.Input">
      <summary>メッセージは受信です。</summary>
    </member>
    <member name="F:System.ServiceModel.Description.MessageDirection.Output">
      <summary>メッセージは送信です。</summary>
    </member>
    <member name="T:System.ServiceModel.Description.MessagePartDescription">
      <summary>SOAP メッセージ部分の説明を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessagePartDescription.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">メッセージ部分の XML 名。</param>
      <param name="ns">メッセージ部分の XML 名前空間。</param>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Index">
      <summary>メッセージ部分のインデックスを取得または設定します。</summary>
      <returns>メッセージ部分のインデックス。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.MemberInfo">
      <summary>メッセージ部分のメンバー情報を取得または設定します。</summary>
      <returns>このメッセージ部分のメンバー情報。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Name">
      <summary>メッセージ部分の名前を取得します。</summary>
      <returns>メッセージ部分の名前。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Namespace">
      <summary>メッセージ部分の名前空間を取得します。</summary>
      <returns>メッセージ部分の名前空間。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.MessagePartDescription.Type">
      <summary>メッセージ部分の型を取得または設定します。</summary>
      <returns>メッセージ部分の型。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.MessagePartDescriptionCollection">
      <summary>
        <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.MessagePartDescriptionCollection.GetKeyForItem(System.ServiceModel.Description.MessagePartDescription)">
      <summary>派生クラスにより呼び出された場合に、<see cref="T:System.ServiceModel.Description.MessagePartDescription" /> の <see cref="T:System.Xml.XmlQualifiedName" /> を返します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Description.MessagePartDescription" /> の <see cref="T:System.Xml.XmlQualifiedName" />。</returns>
      <param name="item">検索する <see cref="T:System.ServiceModel.Description.MessagePartDescription" />。</param>
    </member>
    <member name="T:System.ServiceModel.Description.OperationDescription">
      <summary>コントラクトが交換するメッセージについて、操作を特徴付けるコントラクト。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescription.#ctor(System.String,System.ServiceModel.Description.ContractDescription)">
      <summary>指定された名前とコントラクトの説明で <see cref="T:System.ServiceModel.Description.OperationDescription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">操作記述の名前。</param>
      <param name="declaringContract">操作の説明を初期化するために使用される <see cref="T:System.ServiceModel.Description.ContractDescription" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> または <paramref name="declaringContract" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="name" /> が空です。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.BeginMethod">
      <summary>操作の開始メソッドを取得または設定します。</summary>
      <returns>メソッドの属性とメタデータへのアクセスを提供する <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.DeclaringContract">
      <summary>操作が属するコントラクトを取得または設定します。</summary>
      <returns>操作の <see cref="T:System.ServiceModel.Description.ContractDescription" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> セットが null です。</exception>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.EndMethod">
      <summary>操作の終了メソッドを取得または設定します。</summary>
      <returns>メソッドの属性とメタデータへのアクセスを提供する <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Faults">
      <summary>操作の説明に関連したエラーの説明のコレクションを取得します。</summary>
      <returns>操作の説明に関連付けられているエラーに関する詳細が格納された <see cref="T:System.ServiceModel.Description.FaultDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.IsOneWay">
      <summary>操作が返信メッセージを返すかどうかを示す値を取得します。</summary>
      <returns>このメソッドが要求メッセージを受信し、応答メッセージは返さない場合は true、それ以外の場合は false。既定値は false です。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.KnownTypes">
      <summary>操作の説明に関連付けられている既知の型を取得します。</summary>
      <returns>操作の説明に関連付けられている既知の型のコレクション。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Messages">
      <summary>操作を構成するメッセージの説明を取得または設定します。</summary>
      <returns>操作を構成するメッセージの説明が格納された <see cref="T:System.ServiceModel.Description.MessageDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.Name">
      <summary>操作の説明の名前を取得または設定します。</summary>
      <returns>操作記述の名前。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.OperationDescription.SyncMethod">
      <summary>操作の説明のサービス同期メソッドを取得または設定します。</summary>
      <returns>メソッドの属性とメタデータへのアクセスを提供する <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Description.OperationDescriptionCollection">
      <summary>操作の説明が格納されたコレクションを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.Find(System.String)">
      <summary>操作の説明のコレクション内で指定された名前を持つ最初に見つかった操作の説明を返します。</summary>
      <returns>指定された名前を持つ最初に見つかった <see cref="T:System.ServiceModel.Description.OperationDescription" />、または指定された名前を持つ操作がなかった場合は null。</returns>
      <param name="name">操作の名前。</param>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.FindAll(System.String)">
      <summary>コレクション内にあった指定された名前を持つすべての操作の説明のコレクションを返します。</summary>
      <returns>指定された名前を持つ操作の説明がすべて格納された、型 <see cref="T:System.ServiceModel.Description.OperationDescription" /> の <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
      <param name="name">操作の名前。</param>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.InsertItem(System.Int32,System.ServiceModel.Description.OperationDescription)">
      <summary>要素を操作の説明コレクションの指定されたインデックス位置に挿入します。</summary>
      <param name="index">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス番号。</param>
      <param name="item">挿入する <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> が null です。</exception>
    </member>
    <member name="M:System.ServiceModel.Description.OperationDescriptionCollection.SetItem(System.Int32,System.ServiceModel.Description.OperationDescription)">
      <summary>コレクション内の指定されたインデックス位置にある操作の説明要素を置き換えます。</summary>
      <param name="index">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス番号。</param>
      <param name="item">挿入する <see cref="T:System.ServiceModel.Description.OperationDescription" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> が null です。</exception>
    </member>
    <member name="T:System.ServiceModel.Description.ServiceEndpoint">
      <summary>サービスのクライアントが見つけてサービスとの通信に使用することができるサービスのエンドポイントを表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpoint.#ctor(System.ServiceModel.Description.ContractDescription)">
      <summary>指定したコントラクトの <see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="contract">サービス エンドポイントの <see cref="T:System.ServiceModel.Description.ContractDescription" />。</param>
    </member>
    <member name="M:System.ServiceModel.Description.ServiceEndpoint.#ctor(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>指定されたコントラクト、バインド、およびアドレスで、<see cref="T:System.ServiceModel.Description.ServiceEndpoint" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="contract">サービス エンドポイントの <see cref="T:System.ServiceModel.Description.ContractDescription" />。</param>
      <param name="binding">サービスのエンドポイントが通信を行う方法を指定する <see cref="T:System.ServiceModel.Channels.Binding" />。</param>
      <param name="address">サービス エンドポイントの <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Address">
      <summary>サービス エンドポイントのエンドポイント アドレスを取得または設定します。</summary>
      <returns>サービス エンドポイントの場所を指定する <see cref="T:System.ServiceModel.EndpointAddress" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Binding">
      <summary>サービス エンドポイントのバインドを取得または設定します。</summary>
      <returns>サービス エンドポイントの <see cref="T:System.ServiceModel.Channels.Binding" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Contract">
      <summary>サービス エンドポイントのコントラクトを取得します。</summary>
      <returns>サービス エンドポイントのコントラクトを指定する <see cref="T:System.ServiceModel.Description.ContractDescription" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Description.ServiceEndpoint.Name">
      <summary>サービス エンドポイントの名前を取得または設定します。</summary>
      <returns>サービス エンドポイントの名前。既定値は、バインド名とコントラクトの説明の名前を連結したものです。例: <see cref="P:System.ServiceModel.Channels.Binding.Name" /> + '_' + <see cref="P:System.ServiceModel.Description.ContractDescription.Name" /></returns>
    </member>
    <member name="T:System.ServiceModel.Description.XmlSerializerOperationBehavior">
      <summary>操作に関連付けられている <see cref="T:System.Xml.Serialization.XmlSerializer" /> のランタイム動作を制御します。</summary>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ClientOperation">
      <summary>クライアント オブジェクトまたはクライアント チャネル オブジェクトの特定のコントラクト操作の実行動作を修正または拡張するのに使用されます。このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String)">
      <summary>指定された <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" />、名前、およびアクション値を使用して、<see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parent">コンテナーとなっている <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> オブジェクト。</param>
      <param name="name">操作の名前。</param>
      <param name="action">操作のアクション。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String,System.String)">
      <summary>指定された <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" />、名前、アクション、および返信アクション値を使用して、<see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parent">コンテナーとなっている <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> オブジェクト。</param>
      <param name="name">操作の名前。</param>
      <param name="action">操作のアクション。</param>
      <param name="replyAction">返信メッセージのアクション。</param>
      <exception cref="T:::System.ArgumentNullException">
        <paramref name="Parent" /> または <paramref name="name" /> が null です。</exception>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Action">
      <summary>操作のアクションを取得します。</summary>
      <returns>操作のアクション。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.BeginMethod">
      <summary>非同期操作に関連付けられているメソッドを取得または設定します。</summary>
      <returns>非同期メソッド ペアの開始部分を処理するメソッドを表す <see cref="T:System.Reflection.MethodInfo" /> オブジェクト、またはその操作が非同期メソッド ペアの一部分でない場合は null。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.DeserializeReply">
      <summary>
        <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> プロパティの値が返信メッセージの逆シリアル化に使用されるかどうかを示す値を取得または設定します。</summary>
      <returns>戻り値の型が <see cref="T:System.ServiceModel.Channels.Message" /> でない場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.EndMethod">
      <summary>操作の非同期終了メソッドを実装するメソッドを取得または設定します。</summary>
      <returns>操作の終了メソッドを表す <see cref="T:System.Reflection.MethodInfo" />、または操作が非同期でない場合は null。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter">
      <summary>オブジェクトのメッセージへのシリアル化およびメッセージのオブジェクトへの逆シリアル化を行うフォーマッタを取得または設定します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.IClientMessageFormatter" /> 実装。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.IsInitiating">
      <summary>この操作へのメッセージによりセッションを開始できるかどうかを示す値を取得または設定します。</summary>
      <returns>この操作へのメッセージでセッションを開始できる場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.IsOneWay">
      <summary>操作が一方向操作かどうかを示す値を取得または設定します。</summary>
      <returns>WCF クライアントが返信を期待すべきでない場合は true、それ以外の場合は false。既定値は false です。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.IsTerminating">
      <summary>この操作がセッション内での最後の操作かどうかを示す値を取得または設定します。</summary>
      <returns>この操作が呼び出された後に関連付けられているセッションが閉じられる場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Name">
      <summary>操作の名前を取得します。</summary>
      <returns>操作の名前。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.Parent">
      <summary>格納している <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> オブジェクトを取得します。</summary>
      <returns>コンテナーとなっている <see cref="T:System.ServiceModel.Dispatcher.ClientRuntime" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.ReplyAction">
      <summary>この操作の返信メッセージのアクションを取得します。</summary>
      <returns>返信のアクション。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.SerializeRequest">
      <summary>
        <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> オブジェクトが送信メッセージをシリアル化するかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.Formatter" /> プロパティによって戻り値がシリアル化されて返信メッセージが生成される場合は true、それ以外の場合は false。既定値は true です。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientOperation.SyncMethod">
      <summary>この操作に関連付けられているメソッドを取得または設定します。</summary>
      <returns>操作を実装するメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。操作が非同期の場合、この値は null になり、実装メソッドは <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.BeginMethod" /> プロパティと <see cref="P:System.ServiceModel.Dispatcher.ClientOperation.EndMethod" /> プロパティに格納されます。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.ClientRuntime">
      <summary>クライアント アプリケーションにより処理されるすべてのメッセージの Windows Phone クライアント オブジェクトの機能を拡張するクラスの挿入ポイント。</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractClientType">
      <summary>クライアントに関連付けられているコントラクトの型を取得します。</summary>
      <returns>このクライアントに関連付けられているコントラクトを表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractName">
      <summary>クライアントに関連付けられているコントラクトの名前を取得します。</summary>
      <returns>このクライアントに使用されるコントラクトの名前。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ContractNamespace">
      <summary>クライアントに関連付けられているコントラクトの名前空間を取得します。</summary>
      <returns>このクライアントに関連付けられているコントラクトの名前空間。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.ManualAddressing">
      <summary>クライアントが要求応答メッセージにアドレス指定ヘッダーを追加するかどうかを示す値を取得または設定します。</summary>
      <returns>クライアントがアドレス指定ヘッダーを一切追加しない場合は true、それ以外の場合は false。既定値は false です。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.MaxFaultSize">
      <summary>最大エラー メッセージ サイズを取得または設定します。</summary>
      <returns>最大エラー サイズ。既定値は、64 KB です。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.OperationSelector">
      <summary>
        <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> の選択に使用できる <see cref="T:System.ServiceModel.Dispatcher.IClientOperationSelector" /> 実装を取得または設定します。</summary>
      <returns>
        <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> を選択する <see cref="T:System.ServiceModel.Dispatcher.IClientOperationSelector" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.UnhandledClientOperation">
      <summary>
        <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.Operations" /> コレクション内に対応する <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" /> を持たないメソッドのためのクライアント操作を取得します。</summary>
      <returns>操作セレクターがメッセージと一致する操作を見つけられなかった場合に、現在のメッセージ コンテンツのルーティング先となるメソッドを表す <see cref="T:System.ServiceModel.Dispatcher.ClientOperation" />。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.ClientRuntime.Via">
      <summary>クライアントを介したメッセージの送信に使用されるトランスポート アドレスを取得または設定します。</summary>
      <returns>トランスポートの送信先アドレスとなる <see cref="T:System.Uri" />。既定値は、クライアントの <see cref="P:System.ServiceModel.EndpointAddress.Uri" /> 値です。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.EndpointDispatcher">
      <summary>このクラスは、Windows Phone の現在のリリースではサポートされていません。互換性のために存在しています。</summary>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.FaultContractInfo">
      <summary>
        <see cref="T:System.ServiceModel.FaultContractAttribute" /> 属性内で指定されている SOAP エラーに関する情報を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.FaultContractInfo.#ctor(System.String,System.Type)">
      <summary>指定されたアクションと詳細型を使用する <see cref="T:System.ServiceModel.Dispatcher.FaultContractInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">SOAP フォールトのアクション。</param>
      <param name="detail">SOAP エラー詳細としてシリアル化される詳細型。</param>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.FaultContractInfo.Action">
      <summary>SOAP エラー アクション値を取得します。</summary>
      <returns>SOAP エラー アクション値。</returns>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.FaultContractInfo.Detail">
      <summary>SOAP エラー詳細としてシリアル化されるオブジェクトの型。</summary>
      <returns>シリアル化される SOAP エラー詳細を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IClientMessageFormatter">
      <summary>クライアント アプリケーションのためのメッセージのオブジェクトへの変換およびオブジェクトのメッセージへの変換の制御に使用されるメソッドを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageFormatter.DeserializeReply(System.ServiceModel.Channels.Message,System.Object[])">
      <summary>メッセージを戻り値と呼び出し側の操作に返す <paramref name="out" /> パラメーターに変換します。</summary>
      <returns>操作の戻り値。</returns>
      <param name="message">受信メッセージ。</param>
      <param name="parameters">任意の <paramref name="out" /> の値を指定します。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientMessageFormatter.SerializeRequest(System.ServiceModel.Channels.MessageVersion,System.Object[])">
      <summary>
        <see cref="T:System.Object" /> 配列を送信 <see cref="T:System.ServiceModel.Channels.Message" /> に変換します。</summary>
      <returns>サービス操作に送信される SOAP メッセージ。</returns>
      <param name="messageVersion">使用する SOAP メッセージのバージョン。</param>
      <param name="parameters">XAML クライアント操作に渡されるパラメーター。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IClientOperationSelector">
      <summary>操作セレクターのコントラクトを定義します。</summary>
    </member>
    <member name="P:System.ServiceModel.Dispatcher.IClientOperationSelector.AreParametersRequiredForSelection">
      <summary>選択を決定するためにパラメーターが必要かどうかを示す値を取得します。</summary>
      <returns>パラメーターが必要な場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IClientOperationSelector.SelectOperation(System.Reflection.MethodBase,System.Object[])">
      <summary>選択された操作を返します。</summary>
      <returns>カスタム操作セレクターによって選択された操作。</returns>
      <param name="method">呼び出されるメソッド。</param>
      <param name="parameters">メソッドに渡されるパラメーター。</param>
    </member>
    <member name="T:System.ServiceModel.Dispatcher.IDispatchMessageFormatter">
      <summary>アプリケーション内で要求メッセージを逆シリアル化し、応答メッセージをシリアル化するメソッドを定義します。</summary>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IDispatchMessageFormatter.DeserializeRequest(System.ServiceModel.Channels.Message,System.Object[])">
      <summary>メッセージをパラメーターの配列に逆シリアル化します。</summary>
      <param name="message">受信メッセージ。</param>
      <param name="parameters">操作にパラメーターとして渡されるオブジェクトの配列。</param>
    </member>
    <member name="M:System.ServiceModel.Dispatcher.IDispatchMessageFormatter.SerializeReply(System.ServiceModel.Channels.MessageVersion,System.Object[],System.Object)">
      <summary>指定されたメッセージ バージョン、パラメーターの配列、および戻り値から返信メッセージをシリアル化します。</summary>
      <returns>シリアル化された返信 <see cref="T:System.ServiceModel.Channels.Message" />。</returns>
      <param name="messageVersion">SOAP メッセージのバージョン。</param>
      <param name="parameters">out パラメーターの配列。</param>
      <param name="result">戻り値。</param>
    </member>
    <member name="T:System.ServiceModel.Security.MessageSecurityException">
      <summary>メッセージに適用されたセキュリティで何か不具合があった場合に発生する例外を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor">
      <summary>
        <see cref="T:System.ServiceModel.Security.MessageSecurityException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.ServiceModel.Security.MessageSecurityException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラー メッセージ。</param>
    </member>
    <member name="M:System.ServiceModel.Security.MessageSecurityException.#ctor(System.String,System.Exception)">
      <summary>この例外を発生させた内部例外のエラー メッセージと参照で、<see cref="T:System.ServiceModel.Security.MessageSecurityException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラー メッセージ。</param>
      <param name="innerException">内部例外参照。</param>
    </member>
    <member name="T:System.ServiceModel.Security.SecurityAccessDeniedException">
      <summary>セキュリティ認証要求が失敗した場合にスローされるセキュリティ例外を表します。</summary>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAccessDeniedException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.ServiceModel.Security.SecurityAccessDeniedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラー状態の説明。</param>
    </member>
    <member name="M:System.ServiceModel.Security.SecurityAccessDeniedException.#ctor(System.String,System.Exception)">
      <summary>指定されたメッセージと内部例外を使用して <see cref="T:System.ServiceModel.Security.SecurityAccessDeniedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラー状態の説明。</param>
      <param name="innerException">使用される内部例外。</param>
    </member>
    <member name="T:System.ServiceModel.Security.UserNamePasswordClientCredential">
      <summary>ユーザー名とパスワードに基づいたクライアント資格情報を表します。</summary>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordClientCredential.Password">
      <summary>パスワードを取得または設定します。</summary>
      <returns>パスワード。</returns>
    </member>
    <member name="P:System.ServiceModel.Security.UserNamePasswordClientCredential.UserName">
      <summary>ユーザー名を取得または設定します。</summary>
      <returns>ユーザー名。</returns>
    </member>
  </members>
</doc>