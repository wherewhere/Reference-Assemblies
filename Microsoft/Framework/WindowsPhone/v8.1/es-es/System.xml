<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System</name>
  </assembly>
  <members>
    <member name="T:System.FileStyleUriParser">
      <summary>Analizador personalizable basado en el esquema File.</summary>
    </member>
    <member name="M:System.FileStyleUriParser.#ctor">
      <summary>Crea un analizador personalizable basado en el esquema File.</summary>
    </member>
    <member name="T:System.FtpStyleUriParser">
      <summary>Analizador personalizable basado en el esquema de Protocolo de transferencia de archivos (FTP).</summary>
    </member>
    <member name="M:System.FtpStyleUriParser.#ctor">
      <summary>Crea un analizador personalizable basado en el esquema de Protocolo de transferencia de archivos (FTP).</summary>
    </member>
    <member name="T:System.GenericUriParser">
      <summary>Analizador personalizable para un URI jerárquico.</summary>
    </member>
    <member name="M:System.GenericUriParser.#ctor(System.GenericUriParserOptions)">
      <summary>Crea un analizador personalizable para un URI jerárquico.</summary>
      <param name="options">Especifica las opciones de <see cref="T:System.GenericUriParser" />.</param>
    </member>
    <member name="T:System.GenericUriParserOptions">
      <summary>Especifica las opciones de <see cref="T:System.UriParser" />.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.AllowEmptyAuthority">
      <summary>El analizador permite un identificador URI sin autoridad.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Default">
      <summary>Analizador:</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontCompressPath">
      <summary>El analizador no canoniza el identificador URI.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontConvertPathBackslashes">
      <summary>El analizador no convierte las barras diagonales invertidas en barras diagonales.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontUnescapePathDotsAndSlashes">
      <summary>El analizador no quita los caracteres de escape de los puntos de ruta de acceso, barras diagonales o barras diagonales invertidas.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.GenericAuthority">
      <summary>El analizador permite una autoridad basada en el Registro.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Idn">
      <summary>El analizador admite el análisis IDN (Nombres de dominio internacionalizados) de los nombres de host.El uso de IDN viene determinado por los valores de configuración.Vea la sección Comentarios para obtener más información.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.IriParsing">
      <summary>El analizador admite las reglas de análisis especificadas en RFC 3987 para los identificadores de recursos internacionales (IRI).El uso de IRI viene determinado por los valores de configuración.Vea la sección Comentarios para obtener más información.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoFragment">
      <summary>El esquema no define un fragmento.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoPort">
      <summary>El esquema no define un puerto.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoQuery">
      <summary>El esquema no define una parte de consulta.</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoUserInfo">
      <summary>El esquema no define una parte de información de usuario.</summary>
    </member>
    <member name="T:System.HttpStyleUriParser">
      <summary>Analizador personalizable basado en el esquema HTTP.</summary>
    </member>
    <member name="M:System.HttpStyleUriParser.#ctor">
      <summary>Analizador personalizable basado en el esquema HTTP.</summary>
    </member>
    <member name="T:System.Uri">
      <summary>Proporciona una representación de objeto de un identificador de recursos uniforme (URI) y un acceso sencillo a las partes del identificador URI.</summary>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Uri" /> con el identificador URI especificado.</summary>
      <param name="uriString">Identificador URI. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="uriString" /> es null. </exception>
      <exception cref="T:System.UriFormatException">El parámetro <paramref name="uriString" /> está vacío.-O bien- El esquema especificado en <paramref name="uriString" /> no tiene el formato correcto. Vea <see cref="M:System.Uri.CheckSchemeName(System.String)" />.-O bien- <paramref name="uriString" /> contiene demasiadas barras diagonales.-O bien- La contraseña especificada en <paramref name="uriString" /> no es válida.-O bien- El nombre de host especificado en <paramref name="uriString" /> no es válido.-O bien- El nombre de archivo especificado en <paramref name="uriString" /> no es válido. -O bien- El nombre de usuario especificado en <paramref name="uriString" /> no es válido.-O bien- El nombre de host o de autoridad especificado en <paramref name="uriString" /> no puede terminar en barras diagonales inversas.-O bien- El número de puerto especificado en <paramref name="uriString" /> no es válido o no se puede analizar.-O bien- La longitud de <paramref name="uriString" /> es superior a 65519 caracteres.-O bien- La longitud del esquema especificado en <paramref name="uriString" /> es superior a 1024 caracteres.-O bien- Hay una secuencia de caracteres no válida en <paramref name="uriString" />.-O bien- La ruta de acceso MS-DOS especificada en <paramref name="uriString" /> debe comenzar por c:\\.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Uri" /> con el identificador URI especificado. Este constructor permite especificar si la cadena URI corresponde a un identificador URI relativo, a un identificador URI absoluto, o si está sin determinar.</summary>
      <param name="uriString">Cadena que identifica el recurso que se va a representar con la instancia de <see cref="T:System.Uri" />.</param>
      <param name="uriKind">Especifica si la cadena URI es un identificador URI relativo, un identificador URI absoluto, o si está sin determinar.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="uriKind" /> es no válido (los valores posibles son <see cref="F:System.UriKind.Absolute" />, <see cref="F:System.UriKind.Relative" /> o <see cref="F:System.UriKind.RelativeOrAbsolute" />).</exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="uriString" /> es null. </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uriString" /> contiene un URI relativo y <paramref name="uriKind" /> es <see cref="F:System.UriKind.Absolute" />.-O bien-<paramref name="uriString" /> contiene un URI absoluto y <paramref name="uriKind" /> es <see cref="F:System.UriKind.Relative" />.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Uri" /> según la cadena de URI base y URI relativo especificada.</summary>
      <param name="baseUri">Identificador URI base. </param>
      <param name="relativeUri">Identificador URI relativo que se va a agregar al identificador URI base. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="baseUri" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> no es una instancia de <see cref="T:System.Uri" /> absoluta.</exception>
      <exception cref="T:System.UriFormatException">El identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> está vacío o sólo contiene espacios.-O bien- El esquema especificado en el identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido.-O bien- El identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> contiene demasiadas barras diagonales.-O bien- La contraseña especificada en el identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válida.-O bien- El nombre de host especificado en el identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido.-O bien- El nombre de archivo especificado en el identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido. -O bien- El nombre de usuario especificado en el identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido.-O bien- El nombre de host o de autoridad especificado en el identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> no puede terminar en barras diagonales inversas.-O bien- El número de puerto especificado en el identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido o no se puede analizar.-O bien- La longitud del identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> es superior a 65519 caracteres.-O bien- La longitud del esquema especificado en el identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> es superior a 1024 caracteres.-O bien- Hay una secuencia de caracteres no válida en el identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" />.-O bien- La ruta de acceso MS-DOS especificada en <paramref name="uriString" /> debe comenzar por c:\\.</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.Uri)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Uri" /> a partir de la combinación de una instancia de <see cref="T:System.Uri" /> base especificada y una instancia de <see cref="T:System.Uri" /> relativa.</summary>
      <param name="baseUri">
        <see cref="T:System.Uri" /> absoluto que es la base de la nueva instancia de <see cref="T:System.Uri" />. </param>
      <param name="relativeUri">Instancia de <see cref="T:System.Uri" /> relativa que se combina con <paramref name="baseUri" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="baseUri" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> no es una instancia de <see cref="T:System.Uri" /> absoluta.</exception>
      <exception cref="T:System.UriFormatException">El identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> está vacío o sólo contiene espacios.-O bien- El esquema especificado en el identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido.-O bien- El identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> contiene demasiadas barras diagonales.-O bien- La contraseña especificada en el identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válida.-O bien- El nombre de host especificado en el identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido.-O bien- El nombre de archivo especificado en el identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido. -O bien- El nombre de usuario especificado en el identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido.-O bien- El nombre de host o de autoridad especificado en el identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> no puede terminar en barras diagonales inversas.-O bien- El número de puerto especificado en el identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> no es válido o no se puede analizar.-O bien- La longitud del identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> es superior a 65519 caracteres.-O bien- La longitud del esquema especificado en el identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" /> es superior a 1024 caracteres.-O bien- Hay una secuencia de caracteres no válida en el identificador URI formado mediante la combinación de <paramref name="baseUri" /> y <paramref name="relativeUri" />.-O bien- La ruta de acceso MS-DOS especificada en <paramref name="uriString" /> debe comenzar por c:\\.</exception>
    </member>
    <member name="P:System.Uri.AbsolutePath">
      <summary>Obtiene la ruta de acceso absoluta del identificador URI.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene la ruta de acceso absoluta al recurso.</returns>
      <exception cref="T:System.InvalidOperationException">Esta propiedad es válida únicamente para una instancia de <see cref="T:System.Uri" /> absoluto. </exception>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
      <summary>Obtiene el identificador URI absoluto.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene el identificador URI completo.</returns>
      <exception cref="T:System.InvalidOperationException">Esta propiedad es válida únicamente para una instancia de <see cref="T:System.Uri" /> absoluto. </exception>
    </member>
    <member name="P:System.Uri.Authority">
      <summary>Obtiene el nombre de host DNS (Sistema de nombres de dominio) o la dirección IP y el número de puerto de un servidor.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene el componente de autoridad del identificador URI representado por esta instancia.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
    </member>
    <member name="M:System.Uri.CheckHostName(System.String)">
      <summary>Determina si el nombre de host especificado es un nombre DNS válido.</summary>
      <returns>
        <see cref="T:System.UriHostNameType" /> que indica el tipo del nombre de host. Si no se puede determinar el tipo del nombre de host o si el nombre de host es null o una cadena de longitud cero, este método devuelve <see cref="F:System.UriHostNameType.Unknown" />.</returns>
      <param name="name">Nombre de host que se va a validar. Puede ser una dirección IPv4 o IPv6, o un nombre de host de Internet. </param>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
      <summary>Determina si el nombre de esquema especificado es válido.</summary>
      <returns>Valor de tipo <see cref="T:System.Boolean" /> que es true si el nombre de esquema es válido; de lo contrario, es false.</returns>
      <param name="schemeName">Nombre de esquema que se va a validar. </param>
    </member>
    <member name="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)">
      <summary>Compara las partes especificadas de dos identificadores URI utilizando las reglas de comparación especificadas.</summary>
      <returns>Valor <see cref="T:System.Int32" /> que indica la relación léxica entre los componentes de <see cref="T:System.Uri" /> comparados.ValorSignificadoMenor que cero<paramref name="uri1" /> es menor que <paramref name="uri2" />.Zero<paramref name="uri1" /> es igual a <paramref name="uri2" />.Mayor que cero<paramref name="uri1" /> es mayor que <paramref name="uri2" />.</returns>
      <param name="uri1">Primer objeto <see cref="T:System.Uri" />.</param>
      <param name="uri2">Segundo objeto <see cref="T:System.Uri" />.</param>
      <param name="partsToCompare">Combinación bit a bit de los valores <see cref="T:System.UriComponents" /> que especifica las partes de <paramref name="uri1" /> y <paramref name="uri2" /> que se van a comparar.</param>
      <param name="compareFormat">Uno de los valores <see cref="T:System.UriFormat" /> que especifica las secuencias de escape utilizadas al comparar los componentes del URI.</param>
      <param name="comparisonType">Uno de los valores de <see cref="T:System.StringComparison" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> no es un valor <see cref="T:System.StringComparison" /> válido.</exception>
    </member>
    <member name="P:System.Uri.DnsSafeHost">
      <summary>Obtiene un nombre de host sin secuencias de escape que es seguro para la resolución DNS.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene la parte del identificador URI que corresponde al nombre del host, sin secuencias de escape, que es adecuada para la resolución DNS; o la cadena de host original, sin secuencias de escape, si ya se puede utilizar para la resolución.</returns>
      <exception cref="T:System.InvalidOperationException">Esta propiedad es válida únicamente para una instancia de <see cref="T:System.Uri" /> absoluto. </exception>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
      <summary>Compara dos instancias de <see cref="T:System.Uri" /> para determinar si son iguales.</summary>
      <returns>Valor de tipo <see cref="T:System.Boolean" /> que es true si las dos instancias representan el mismo URI; de lo contrario, es false.</returns>
      <param name="comparand">Instancia de <see cref="T:System.Uri" /> o identificador URI que se va a comparar con la instancia actual. </param>
    </member>
    <member name="M:System.Uri.EscapeDataString(System.String)">
      <summary>Convierte una cadena en su representación de escape.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene la representación de escape de <paramref name="stringToEscape" />.</returns>
      <param name="stringToEscape">Cadena a la que se van a aplicar secuencias de escape.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="stringToEscape" /> es null. </exception>
      <exception cref="T:System.UriFormatException">La longitud de <paramref name="stringToEscape" /> es superior a 32766 caracteres.</exception>
    </member>
    <member name="M:System.Uri.EscapeUriString(System.String)">
      <summary>Convierte una cadena URI en su representación con secuencias de escape.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene la representación de escape de <paramref name="stringToEscape" />.</returns>
      <param name="stringToEscape">Cadena a la que se van a aplicar secuencias de escape.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="stringToEscape" /> es null. </exception>
      <exception cref="T:System.UriFormatException">La longitud de <paramref name="stringToEscape" /> es superior a 32766 caracteres.</exception>
    </member>
    <member name="P:System.Uri.Fragment">
      <summary>Obtiene el fragmento de URI de escape.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene información sobre el fragmento de URI.</returns>
      <exception cref="T:System.InvalidOperationException">Esta propiedad es válida únicamente para una instancia de <see cref="T:System.Uri" /> absoluto. </exception>
    </member>
    <member name="M:System.Uri.FromHex(System.Char)">
      <summary>Obtiene el valor decimal de un dígito hexadecimal.</summary>
      <returns>Valor <see cref="T:System.Int32" /> que contiene un número del 0 al 15 correspondiente al dígito hexadecimal especificado.</returns>
      <param name="digit">Dígito hexadecimal (0 a 9, "a" a "f", "A" a "F") que se va a convertir. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="digit" /> no es un dígito hexadecimal válido (0 a 9, "a" a "f", "A" a "F"). </exception>
    </member>
    <member name="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)">
      <summary>Obtiene los componentes especificados de la instancia actual utilizando las secuencias de escape especificadas para los caracteres especiales.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene los componentes.</returns>
      <param name="components">Combinación bit a bit de los valores <see cref="T:System.UriComponents" /> que especifica qué partes de la instancia actual se van a devolver al llamador.</param>
      <param name="format">Uno de los valores de <see cref="T:System.UriFormat" /> que controla cómo se aplican las secuencias de escape a los caracteres especiales. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="uriComponents" /> no es una combinación de valores de <see cref="T:System.UriComponents" /> válidos.</exception>
      <exception cref="T:System.InvalidOperationException">Este método solo es válido para una instancia de <see cref="T:System.Uri" /> absoluto.</exception>
    </member>
    <member name="M:System.Uri.GetHashCode">
      <summary>Obtiene el código hash del identificador URI.</summary>
      <returns>
        <see cref="T:System.Int32" /> que contiene el valor hash generado para este identificador URI.</returns>
    </member>
    <member name="P:System.Uri.Host">
      <summary>Obtiene el componente de host de esta instancia.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene el nombre de host. Suele ser el nombre del host DNS o la dirección IP del servidor.</returns>
      <exception cref="T:System.InvalidOperationException">Esta propiedad es válida únicamente para una instancia de <see cref="T:System.Uri" /> absoluto. </exception>
    </member>
    <member name="P:System.Uri.HostNameType">
      <summary>Obtiene el tipo del nombre de host especificado en el identificador URI.</summary>
      <returns>Miembro de la enumeración <see cref="T:System.UriHostNameType" />.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
    </member>
    <member name="P:System.Uri.IsAbsoluteUri">
      <summary>Obtiene un valor que indica si la instancia de <see cref="T:System.Uri" /> es absoluta.</summary>
      <returns>Valor de tipo <see cref="T:System.Boolean" /> que es true si la instancia de <see cref="T:System.Uri" /> es absoluta; de lo contrario, es false.</returns>
    </member>
    <member name="M:System.Uri.IsBaseOf(System.Uri)">
      <summary>Determina si la instancia de <see cref="T:System.Uri" /> actual es la base de la instancia de <see cref="T:System.Uri" /> especificada.</summary>
      <returns>Es true si la instancia de <see cref="T:System.Uri" /> actual es una base de <paramref name="uri" />; en caso contrario, es false.</returns>
      <param name="uri">Instancia de <see cref="T:System.Uri" /> especificada que se va a comprobar. </param>
    </member>
    <member name="P:System.Uri.IsDefaultPort">
      <summary>Obtiene un valor que indica si el valor de puerto del identificador URI es el valor predeterminado para este esquema.</summary>
      <returns>Valor de tipo <see cref="T:System.Boolean" /> que es true si el valor de la propiedad <see cref="P:System.Uri.Port" /> es el puerto predeterminado para este esquema; de lo contrario, es false.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
    </member>
    <member name="P:System.Uri.IsFile">
      <summary>Obtiene un valor que indica si <see cref="T:System.Uri" /> es un identificador URI de archivo.</summary>
      <returns>Valor de tipo <see cref="T:System.Boolean" /> que es true si <see cref="T:System.Uri" /> es un URI de archivo; de lo contrario, es false.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
    </member>
    <member name="M:System.Uri.IsHexDigit(System.Char)">
      <summary>Determina si un carácter especificado es un dígito hexadecimal válido.</summary>
      <returns>Valor de tipo <see cref="T:System.Boolean" /> que es true si el carácter es un dígito hexadecimal válido; de lo contrario, es false.</returns>
      <param name="character">Carácter que se va a validar. </param>
    </member>
    <member name="P:System.Uri.IsLoopback">
      <summary>Obtiene un valor que indica si el <see cref="T:System.Uri" /> especificado hace referencia al host local.</summary>
      <returns>Valor de tipo <see cref="T:System.Boolean" /> que es true si este <see cref="T:System.Uri" /> hace referencia al host local; de lo contrario, es false.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
    </member>
    <member name="P:System.Uri.IsUnc">
      <summary>Obtiene un valor que indica si el <see cref="T:System.Uri" /> especificado es una ruta de acceso UNC (Convención de nomenclatura universal).</summary>
      <returns>Valor de tipo <see cref="T:System.Boolean" /> que es true si <see cref="T:System.Uri" /> es una ruta de UNC; de lo contrario, es false.</returns>
      <exception cref="T:System.InvalidOperationException">Esta propiedad es válida únicamente para una instancia de <see cref="T:System.Uri" /> absoluto. </exception>
    </member>
    <member name="M:System.Uri.IsWellFormedOriginalString">
      <summary>Indica si la cadena utilizada para construir este <see cref="T:System.Uri" /> tenía el formato correcto y no es necesario utilizar después secuencias de escape.</summary>
      <returns>Valor de tipo <see cref="T:System.Boolean" /> que es true si la cadena estaba bien formada; de lo contrario, es false.</returns>
    </member>
    <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
      <summary>Indica si la cadena tiene el formato correcto al intentar construir un <see cref="T:System.Uri" /> con ella y garantiza que la cadena no requiere más secuencias de escape.</summary>
      <returns>Valor de tipo <see cref="T:System.Boolean" /> que es true si la cadena tiene el formato correcto de acuerdo con RFC 3986; de lo contrario, es false.</returns>
      <param name="uriString">Un <see cref="T:System.Uri" /> representado como una cadena.</param>
      <param name="uriKind">Tipo del URI del parámetro <paramref name="uriString" />.</param>
    </member>
    <member name="P:System.Uri.LocalPath">
      <summary>Obtiene una representación del sistema operativo local de un nombre de archivo.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene la representación del sistema operativo local de un nombre de archivo.</returns>
      <exception cref="T:System.InvalidOperationException">Esta propiedad es válida únicamente para una instancia de <see cref="T:System.Uri" /> absoluto. </exception>
    </member>
    <member name="M:System.Uri.MakeRelativeUri(System.Uri)">
      <summary>Determina la diferencia que existe entre dos instancias de <see cref="T:System.Uri" />.</summary>
      <returns>Si el nombre de host y el esquema de esta instancia de URI y <paramref name="toUri" /> son iguales, este método devuelve un <see cref="T:System.Uri" /> relativo que, cuando se anexa a la instancia de URI actual, proporciona <paramref name="toUri" />.Si el nombre de host o el esquema es diferente, este método devuelve un valor de tipo <see cref="T:System.Uri" /> que representa el parámetro <paramref name="toUri" />.</returns>
      <param name="uri">Identificador URI que se va a comparar con el identificador URI actual.</param>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
    </member>
    <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
      <summary>Determina si dos instancias de <see cref="T:System.Uri" /> tienen el mismo valor.</summary>
      <returns>Valor de tipo <see cref="T:System.Boolean" /> que es true si las instancias de <see cref="T:System.Uri" /> son equivalentes; de lo contrario, es false.</returns>
      <param name="uri1">Instancia de <see cref="T:System.Uri" /> que se va a comparar con <paramref name="uri2" />. </param>
      <param name="uri2">Instancia de <see cref="T:System.Uri" /> que se va a comparar con <paramref name="uri1" />. </param>
    </member>
    <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
      <summary>Determina si dos instancias de <see cref="T:System.Uri" /> no tienen el mismo valor.</summary>
      <returns>Valor de tipo <see cref="T:System.Boolean" /> que es true si las dos instancias de <see cref="T:System.Uri" /> no son iguales; de lo contrario, es false. Si alguno de los parámetros es null, este método devuelve true.</returns>
      <param name="uri1">Instancia de <see cref="T:System.Uri" /> que se va a comparar con <paramref name="uri2" />. </param>
      <param name="uri2">Instancia de <see cref="T:System.Uri" /> que se va a comparar con <paramref name="uri1" />. </param>
    </member>
    <member name="P:System.Uri.OriginalString">
      <summary>Obtiene la cadena URI original pasada al constructor <see cref="T:System.Uri" />.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene el identificador URI exacto que se especificó cuando se creó esta instancia; de lo contrario, <see cref="F:System.String.Empty" />.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
    </member>
    <member name="P:System.Uri.PathAndQuery">
      <summary>Obtiene las propiedades <see cref="P:System.Uri.AbsolutePath" /> y <see cref="P:System.Uri.Query" /> separadas por un signo de interrogación de cierre (?).</summary>
      <returns>
        <see cref="T:System.String" /> que contiene las propiedades <see cref="P:System.Uri.AbsolutePath" /> y <see cref="P:System.Uri.Query" /> separadas por un signo de interrogación de cierre (?).</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
    </member>
    <member name="P:System.Uri.Port">
      <summary>Obtiene el número de puerto de este URI.</summary>
      <returns>Valor <see cref="T:System.Int32" /> que contiene el número de puerto de este identificador URI.</returns>
      <exception cref="T:System.InvalidOperationException">Esta propiedad es válida únicamente para una instancia de <see cref="T:System.Uri" /> absoluto. </exception>
    </member>
    <member name="P:System.Uri.Query">
      <summary>Obtiene la información de consulta incluida en el identificador URI especificado.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene la información de consulta incluida en el identificador URI especificado.</returns>
      <exception cref="T:System.InvalidOperationException">Esta propiedad es válida únicamente para una instancia de <see cref="T:System.Uri" /> absoluto. </exception>
    </member>
    <member name="P:System.Uri.Scheme">
      <summary>Obtiene el nombre de esquema de este URI.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene el esquema de este identificador URI, convertido a minúsculas.</returns>
      <exception cref="T:System.InvalidOperationException">Esta propiedad es válida únicamente para una instancia de <see cref="T:System.Uri" /> absoluto. </exception>
    </member>
    <member name="F:System.Uri.SchemeDelimiter">
      <summary>Especifica los caracteres que separan el servicio de protocolo de comunicaciones de la parte correspondiente a la dirección del identificador URI. Este campo es de solo lectura.</summary>
    </member>
    <member name="P:System.Uri.Segments">
      <summary>Obtiene una matriz que contiene los segmentos de ruta de acceso que componen el identificador URI especificado.</summary>
      <returns>Matriz de tipo <see cref="T:System.String" /> que contiene los segmentos de ruta de acceso que componen el identificador URI especificado.</returns>
      <exception cref="T:System.InvalidOperationException">Esta instancia representa un identificador URI relativo, y esta propiedad sólo es válida para identificadores URI absolutos. </exception>
    </member>
    <member name="M:System.Uri.ToString">
      <summary>Obtiene una representación de cadena canónica para la instancia especificada de <see cref="T:System.Uri" />.</summary>
      <returns>Instancia de <see cref="T:System.String" /> que contiene la representación canónica sin secuencias de escape de la instancia de <see cref="T:System.Uri" />. Todos son caracteres sin escape, excepto #, ? y %.</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)">
      <summary>Crea un nuevo <see cref="T:System.Uri" /> utilizando la instancia de <see cref="T:System.String" /> especificada y un <see cref="T:System.UriKind" />.</summary>
      <returns>Un valor de tipo <see cref="T:System.Boolean" /> que es true si el <see cref="T:System.Uri" /> se creó correctamente; de lo contrario, es false.</returns>
      <param name="uriString">
        <see cref="T:System.String" /> que representa el <see cref="T:System.Uri" />.</param>
      <param name="uriKind">Tipo de URI.</param>
      <param name="result">Cuando este método regresa, contiene el <see cref="T:System.Uri" /> creado.</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)">
      <summary>Crea un nuevo objeto <see cref="T:System.Uri" /> a partir de las instancias base y relativa de <see cref="T:System.String" /> especificadas.</summary>
      <returns>Un valor de tipo <see cref="T:System.Boolean" /> que es true si el <see cref="T:System.Uri" /> se creó correctamente; de lo contrario, es false.</returns>
      <param name="baseUri">
        <see cref="T:System.Uri" /> base.</param>
      <param name="relativeUri">
        <see cref="T:System.Uri" /> relativo, representado como <see cref="T:System.String" />, que se va a agregar al <see cref="T:System.Uri" /> base.</param>
      <param name="result">Cuando este método finaliza, contiene un <see cref="T:System.Uri" /> creado a partir de <paramref name="baseUri" /> y <paramref name="relativeUri" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)">
      <summary>Crea un nuevo objeto <see cref="T:System.Uri" /> a partir de las instancias base y relativa de <see cref="T:System.Uri" /> especificadas.</summary>
      <returns>Un valor de tipo <see cref="T:System.Boolean" /> que es true si el <see cref="T:System.Uri" /> se creó correctamente; de lo contrario, es false.</returns>
      <param name="baseUri">
        <see cref="T:System.Uri" /> base. </param>
      <param name="relativeUri">
        <see cref="T:System.Uri" /> relativo que se va a agregar al <see cref="T:System.Uri" /> base. </param>
      <param name="result">Cuando este método finaliza, contiene un <see cref="T:System.Uri" /> creado a partir de <paramref name="baseUri" /> y <paramref name="relativeUri" />. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Uri.UnescapeDataString(System.String)">
      <summary>Convierte una cadena en su representación sin secuencias de escape.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene la representación sin escape de <paramref name="stringToUnescape" />. </returns>
      <param name="stringToUnescape">Cadena a la que se van a quitar las secuencias de escape.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="stringToUnescape" /> es null. </exception>
    </member>
    <member name="F:System.Uri.UriSchemeFile">
      <summary>Especifica que el identificador URI es un puntero a un archivo. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeFtp">
      <summary>Especifica que se puede tener acceso al identificador URI mediante FTP (Protocolo de transferencia de archivos). Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeGopher">
      <summary>Especifica que se puede tener acceso al identificador URI mediante el protocolo Gopher. Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttp">
      <summary>Especifica que se puede obtener acceso al identificador URI mediante HTTP (Protocolo de transferencia de hipertexto). Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttps">
      <summary>Especifica que se puede obtener acceso al identificador URI mediante HTTPS (Protocolo de transferencia segura de hipertexto). Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeMailto">
      <summary>Especifica que el identificador URI es una dirección de correo electrónico accesible a través de SMTP (Protocolo simple de transferencia de correo). Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetPipe">
      <summary>Especifica que el acceso al identificador uniforme de recursos URI se obtiene a través del esquema de NetPipe del sistema "Indigo". Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetTcp">
      <summary>Especifica que el acceso al identificador uniforme de recursos URI se obtiene a través del esquema de NetTcp del sistema "Indigo". Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNews">
      <summary>Especifica que el identificador URI es un grupo de noticias de Internet accesible a través de NNTP (Protocolo de transferencia de noticias en red). Este campo es de solo lectura.</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNntp">
      <summary>Especifica que el identificador URI es un grupo de noticias de Internet accesible a través de NNTP (Protocolo de transferencia de noticias en red). Este campo es de solo lectura.</summary>
    </member>
    <member name="P:System.Uri.UserEscaped">
      <summary>Indica que se aplicaron secuencias de escape a toda la cadena URI antes de que crear la instancia de <see cref="T:System.Uri" />.</summary>
      <returns>Valor de tipo <see cref="T:System.Boolean" /> que es true si el parámetro <paramref name="dontEscape" /> se estableció en true cuando se creó la instancia de <see cref="T:System.Uri" />; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Uri.UserInfo">
      <summary>Obtiene el nombre de usuario, la contraseña u otra información específica del usuario asociada al identificador URI especificado.</summary>
      <returns>
        <see cref="T:System.String" /> que contiene la información de usuario asociada al identificador URI. El valor devuelto no incluye el carácter reservado "@" para delimitar la parte de información de usuario del identificador URI.</returns>
      <exception cref="T:System.InvalidOperationException">Esta propiedad es válida únicamente para una instancia de <see cref="T:System.Uri" /> absoluto. </exception>
    </member>
    <member name="T:System.UriBuilder">
      <summary>Proporciona un constructor personalizado para los identificadores uniformes de recursos (URI) y modifica los URI para la clase <see cref="T:System.Uri" />.</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>Inicializa una instancia nueva de la clase <see cref="T:System.UriBuilder" />.</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UriBuilder" /> con el identificador URI especificado.</summary>
      <param name="uri">Cadena URI. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="uri" /> es null. </exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uri" /> es una cadena de longitud cero o sólo contiene espacios.-O bien- La rutina de análisis detectó un servicio en un formato no válido.-O bien- El analizador detectó más de dos barras diagonales consecutivas en un identificador URI que no utiliza el servicio "file".-O bien- <paramref name="uri" /> no es una dirección URI válida. </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UriBuilder" /> con el servicio y host que se hayan especificado.</summary>
      <param name="schemeName">Protocolo de acceso a Internet. </param>
      <param name="hostName">Nombre de dominio de estilo DNS o dirección IP. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="schemeName" /> no es un nombre de esquema legal.</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UriBuilder" /> con el servicio, el host y el puerto que se hayan especificado.</summary>
      <param name="scheme">Protocolo de acceso a Internet. </param>
      <param name="host">Nombre de dominio de estilo DNS o dirección IP. </param>
      <param name="portNumber">Número de puerto IP para el servicio. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="scheme" /> no es un nombre de esquema legal. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="portNumber" /> es menor que 0 o mayor que 65.535. </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UriBuilder" /> con el servicio, el host, el número de puerto y la ruta de acceso que se hayan especificado.</summary>
      <param name="scheme">Protocolo de acceso a Internet. </param>
      <param name="host">Nombre de dominio de estilo DNS o dirección IP. </param>
      <param name="port">Número de puerto IP para el servicio. </param>
      <param name="pathValue">Ruta de acceso al recurso de Internet. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="scheme" /> no es un nombre de esquema legal. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> es menor que 0 o mayor que 65.535. </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UriBuilder" /> con el servicio, el host, el número de puerto, la ruta de acceso y la cadena de consulta o el identificador de campo que se hayan especificado.</summary>
      <param name="scheme">Protocolo de acceso a Internet. </param>
      <param name="host">Nombre de dominio de estilo DNS o dirección IP. </param>
      <param name="port">Número de puerto IP para el servicio. </param>
      <param name="path">Ruta de acceso al recurso de Internet. </param>
      <param name="extraValue">Cadena de consulta o identificador de campo. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="extraValue" /> no es null ni <see cref="F:System.String.Empty" />, ni hay un identificador de fragmento válido que comience por un signo de número (#), ni hay ninguna cadena de consulta válida que comience por un signo de interrogación de cierre (?).-O bien- <paramref name="scheme" /> no es un nombre de esquema válido. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> es menor que 0 o mayor que 65.535. </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UriBuilder" /> con la instancia de <see cref="T:System.Uri" /> especificada.</summary>
      <param name="uri">Instancia de la clase <see cref="T:System.Uri" />. </param>
      <exception cref="T:System.NullReferenceException">El valor de <paramref name="uri" /> es null. </exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>Compara una instancia existente de <see cref="T:System.Uri" /> con el contenido de <see cref="T:System.UriBuilder" /> para comprobar la igualdad.</summary>
      <returns>Es true si <paramref name="rparam" /> representa el mismo <see cref="T:System.Uri" /> que el <see cref="T:System.Uri" /> construido por esta instancia de <see cref="T:System.UriBuilder" />; en caso contrario, es false.</returns>
      <param name="rparam">Objeto que va a compararse con la instancia actual. </param>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>Obtiene o establece la parte correspondiente al campo de la dirección URI.</summary>
      <returns>Parte correspondiente al campo de la dirección URI. El identificador de campo ("#") se agrega al principio del campo.</returns>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>Devuelve el código hash de la dirección URI.</summary>
      <returns>Código hash generado para la dirección URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>Obtiene o establece el nombre de host DNS (Sistema de nombres de dominio) o la dirección IP de un servidor.</summary>
      <returns>Nombre de host DNS (Sistema de nombres de dominio) o dirección IP del servidor.</returns>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>Obtiene o establece la contraseña asociada al usuario que obtiene acceso al identificador URI.</summary>
      <returns>Contraseña del usuario que obtiene acceso al identificador URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>Obtiene o establece la ruta de acceso al recurso al que hace referencia la dirección URI.</summary>
      <returns>Ruta de acceso al recurso al que hace referencia la dirección URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>Obtiene o establece el número de puerto de la dirección URI.</summary>
      <returns>Número de puerto de la dirección URI.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El número de puerto no puede ser menor que 0 o mayor que 65,535. </exception>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>Obtiene o establece la información de consulta incluida en la dirección URI.</summary>
      <returns>Información de consulta incluida en la dirección URI.</returns>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>Obtiene o establece el nombre de servicio de la dirección URI.</summary>
      <returns>Servicio de la dirección URI.</returns>
      <exception cref="T:System.ArgumentException">El nombre de esquema solo puede establecerse en un nombre de esquema legal. </exception>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>Devuelve la cadena de presentación de la instancia de <see cref="T:System.UriBuilder" /> especificada.</summary>
      <returns>Cadena que contiene la cadena de presentación de <see cref="T:System.UriBuilder" />, sin caracteres de escape.</returns>
      <exception cref="T:System.UriFormatException">El URI construido con las propiedades <see cref="T:System.UriBuilder" /> tiene un nombre de usuario incorrecto y una contraseña (la propiedad <see cref="P:System.UriBuilder.UserName" /> es nula o una cadena vacía, pero la propiedad <see cref="P:System.UriBuilder.Password" /> no está vacía). </exception>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>Obtiene la instancia de <see cref="T:System.Uri" /> creada mediante la instancia de <see cref="T:System.UriBuilder" /> especificada.</summary>
      <returns>
        <see cref="T:System.Uri" /> que contiene el identificador URI creado por <see cref="T:System.UriBuilder" />.</returns>
      <exception cref="T:System.UriFormatException">La dirección URI creada mediante las propiedades de la clase <see cref="T:System.UriBuilder" /> no es válida. </exception>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>Nombre de usuario asociado al usuario que obtiene acceso al identificador URI.</summary>
      <returns>Nombre de usuario del usuario que obtiene acceso al identificador URI.</returns>
    </member>
    <member name="T:System.UriComponents">
      <summary>Especifica las partes de <see cref="T:System.Uri" />.</summary>
    </member>
    <member name="F:System.UriComponents.AbsoluteUri">
      <summary>Datos de <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.UserInfo" />, <see cref="P:System.Uri.Host" />, <see cref="P:System.Uri.Port" />, <see cref="P:System.Uri.LocalPath" />, <see cref="P:System.Uri.Query" /> y <see cref="P:System.Uri.Fragment" />.</summary>
    </member>
    <member name="F:System.UriComponents.Fragment">
      <summary>Datos de <see cref="P:System.Uri.Fragment" />.</summary>
    </member>
    <member name="F:System.UriComponents.Host">
      <summary>Datos de <see cref="P:System.Uri.Host" />.</summary>
    </member>
    <member name="F:System.UriComponents.HostAndPort">
      <summary>Datos de <see cref="P:System.Uri.Host" /> y <see cref="P:System.Uri.Port" />. Si el identificador URI no tiene datos del puerto y se ha asignado un puerto predeterminado a <see cref="P:System.Uri.Scheme" />, se devuelve el puerto predeterminado. Si no hay ningún puerto predeterminado, se devuelve -1.</summary>
    </member>
    <member name="F:System.UriComponents.HttpRequestUrl">
      <summary>Datos de <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.Host" />, <see cref="P:System.Uri.Port" />, <see cref="P:System.Uri.LocalPath" /> y <see cref="P:System.Uri.Query" />.</summary>
    </member>
    <member name="F:System.UriComponents.KeepDelimiter">
      <summary>Especifica que se debe incluir el delimitador.</summary>
    </member>
    <member name="F:System.UriComponents.NormalizedHost">
      <summary>La forma normalizada del <see cref="P:System.Uri.Host" />.</summary>
    </member>
    <member name="F:System.UriComponents.Path">
      <summary>Datos de <see cref="P:System.Uri.LocalPath" />.</summary>
    </member>
    <member name="F:System.UriComponents.PathAndQuery">
      <summary>Datos de <see cref="P:System.Uri.LocalPath" /> y <see cref="P:System.Uri.Query" />. </summary>
    </member>
    <member name="F:System.UriComponents.Port">
      <summary>Datos de <see cref="P:System.Uri.Port" />.</summary>
    </member>
    <member name="F:System.UriComponents.Query">
      <summary>Datos de <see cref="P:System.Uri.Query" />.</summary>
    </member>
    <member name="F:System.UriComponents.Scheme">
      <summary>Datos de <see cref="P:System.Uri.Scheme" />.</summary>
    </member>
    <member name="F:System.UriComponents.SchemeAndServer">
      <summary>Datos de <see cref="P:System.Uri.Scheme" />, <see cref="P:System.Uri.Host" /> y <see cref="P:System.Uri.Port" />.</summary>
    </member>
    <member name="F:System.UriComponents.SerializationInfoString">
      <summary>Contexto completo de <see cref="T:System.Uri" /> necesario para los serializadores de identificadores uniformes de recursos URI. El contexto incluye el ámbito de IPv6.</summary>
    </member>
    <member name="F:System.UriComponents.StrongAuthority">
      <summary>Datos de <see cref="P:System.Uri.UserInfo" />, <see cref="P:System.Uri.Host" /> y <see cref="P:System.Uri.Port" />. Si <see cref="T:System.Uri" /> no tiene datos del puerto y se ha asignado un puerto predeterminado a <see cref="P:System.Uri.Scheme" />, se devuelve el puerto predeterminado. Si no hay ningún puerto predeterminado, se devuelve -1.</summary>
    </member>
    <member name="F:System.UriComponents.StrongPort">
      <summary>Datos de <see cref="P:System.Uri.Port" />. Si <see cref="T:System.Uri" /> no tiene datos del puerto y se ha asignado un puerto predeterminado a <see cref="P:System.Uri.Scheme" />, se devuelve el puerto predeterminado. Si no hay ningún puerto predeterminado, se devuelve -1.</summary>
    </member>
    <member name="F:System.UriComponents.UserInfo">
      <summary>Datos de <see cref="P:System.Uri.UserInfo" />.</summary>
    </member>
    <member name="T:System.UriFormat">
      <summary>Controla cómo se utilizan los caracteres de escape en la información del identificador uniforme de recursos.</summary>
    </member>
    <member name="F:System.UriFormat.SafeUnescaped">
      <summary>Los caracteres que tienen un significado reservado en los componentes URI solicitados mantienen los caracteres de escape. Para todos los demás no se utilizan caracteres de escape. Vea Comentarios.</summary>
    </member>
    <member name="F:System.UriFormat.Unescaped">
      <summary>No se utilizan caracteres de escape.</summary>
    </member>
    <member name="F:System.UriFormat.UriEscaped">
      <summary>Los caracteres de escape se utilizan de acuerdo con las reglas de RFC 3986.</summary>
    </member>
    <member name="T:System.UriFormatException">
      <summary>Excepción que se produce cuando se detecta un identificador de recursos uniformes (URI) no válido.</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor">
      <summary>Inicializa una instancia nueva de la clase <see cref="T:System.UriFormatException" />.</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UriFormatException" /> con el mensaje especificado.</summary>
      <param name="textString">Cadena con el mensaje de error. </param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.UriFormatException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="textString">Cadena con el mensaje de error.</param>
      <param name="e">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="e" /> no es una referencia null (Nothing en Visual Basic), la excepción actual se genera en un bloque catch que controla la excepción interna. </param>
    </member>
    <member name="T:System.UriHostNameType">
      <summary>Define tipos de nombre de host para el método <see cref="M:System.Uri.CheckHostName(System.String)" />.</summary>
    </member>
    <member name="F:System.UriHostNameType.Basic">
      <summary>Se establece el host, pero no se puede determinar el tipo.</summary>
    </member>
    <member name="F:System.UriHostNameType.Dns">
      <summary>El nombre de host es un nombre de host DNS (Sistema de nombres de dominio).</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv4">
      <summary>El nombre de host es una dirección de host IP (Protocolo de Internet), versión 4.</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv6">
      <summary>El nombre de host es una dirección de host IP (Protocolo de Internet), versión 6.</summary>
    </member>
    <member name="F:System.UriHostNameType.Unknown">
      <summary>No se proporciona el tipo del nombre de host.</summary>
    </member>
    <member name="T:System.UriIdnScope">
      <summary>Proporciona los posibles valores para el análisis de nombres de dominio internacionalizados del valor de configuración.</summary>
    </member>
    <member name="F:System.UriIdnScope.All">
      <summary>Este valor convierte cualquier nombre de dominio Unicode a su equivalente Punycode (nombres IDN).</summary>
    </member>
    <member name="F:System.UriIdnScope.AllExceptIntranet">
      <summary>Este valor convertirá todos los nombres de dominio Unicode externos para que se utilicen sus equivalentes Punycode (nombres IDN). En este caso, para administrar los nombres internacionales en la intranet local, los servidores DNS que se utilizan para la intranet deben admitir los nombres Unicode.</summary>
    </member>
    <member name="F:System.UriIdnScope.None">
      <summary>Este valor no convierte ningún nombre de dominio Unicode para que se use Punycode. Este es el valor predeterminado que es coherente con el comportamiento de .NET Framework 2.0.</summary>
    </member>
    <member name="T:System.UriKind">
      <summary>Define los tipos de <see cref="T:System.Uri" /> para varios métodos <see cref="Overload:System.Uri.#ctor" />.</summary>
    </member>
    <member name="F:System.UriKind.Absolute">
      <summary>El identificador uniforme de recursos es absoluto.</summary>
    </member>
    <member name="F:System.UriKind.Relative">
      <summary>El identificador uniforme de recursos es relativo.</summary>
    </member>
    <member name="F:System.UriKind.RelativeOrAbsolute">
      <summary>El tipo de URI está sin determinar.</summary>
    </member>
    <member name="T:System.UriParser">
      <summary>Analiza un nuevo esquema de URI. Esta es una clase abstract.</summary>
    </member>
    <member name="M:System.UriParser.#ctor">
      <summary>Construye un analizador de identificador URI predeterminado.</summary>
    </member>
    <member name="M:System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)">
      <summary>Obtiene los componentes de un identificador uniforme de recursos URI.</summary>
      <returns>Cadena que contiene los componentes.</returns>
      <param name="uri">
        <see cref="T:System.Uri" /> que se va a analizar.</param>
      <param name="components">
        <see cref="T:System.UriComponents" /> que se va a recuperar de <paramref name="uri" />.</param>
      <param name="format">Uno de los valores de <see cref="T:System.UriFormat" /> que controla cómo se aplican las secuencias de escape a los caracteres especiales.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> no es válido-O bien-<paramref name="components" /> no es una combinación de valores de <see cref="T:System.UriComponents" /> válidos. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="uri" /> requiere un análisis controlado por el usuario-O bien-<paramref name="uri" /> no es un identificador URI absoluto. Los identificadores URI relativos no se pueden utilizar con este método.</exception>
    </member>
    <member name="M:System.UriParser.InitializeAndValidate(System.Uri,System.UriFormatException@)">
      <summary>Inicializa el estado del analizador y valida el URI.</summary>
      <param name="uri">
        <see cref="T:System.Uri" /> que se va a validar.</param>
      <param name="parsingError">Errores de validación, si los hay.</param>
    </member>
    <member name="M:System.UriParser.IsBaseOf(System.Uri,System.Uri)">
      <summary>Determina si <paramref name="baseUri" /> es una dirección URI base para <paramref name="relativeUri" />.</summary>
      <returns>Es true si <paramref name="baseUri" /> es un URI base para <paramref name="relativeUri" />, de lo contrario, false.</returns>
      <param name="baseUri">Identificador URI base.</param>
      <param name="relativeUri">URI que se va a comprobar.</param>
    </member>
    <member name="M:System.UriParser.IsKnownScheme(System.String)">
      <summary>Indica si se ha registrado el analizador para un esquema.</summary>
      <returns>Es true si se ha registrado <paramref name="schemeName" />; de lo contrario, false.</returns>
      <param name="schemeName">Nombre de esquema que se va a comprobar.</param>
      <exception cref="T:System.ArgumentNullException">El valor del parámetro <paramref name="schemeName" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="schemeName" /> no es válido. </exception>
    </member>
    <member name="M:System.UriParser.IsWellFormedOriginalString(System.Uri)">
      <summary>Indica si el formato del URI es correcto.</summary>
      <returns>Es true si <paramref name="uri" /> tiene un formato correcto; de lo contrario, es false.</returns>
      <param name="uri">URI que se va a comprobar.</param>
    </member>
    <member name="M:System.UriParser.OnNewUri">
      <summary>Lo invoca un constructor de <see cref="T:System.Uri" /> para obtener una instancia de <see cref="T:System.UriParser" /></summary>
      <returns>
        <see cref="T:System.UriParser" /> para el <see cref="T:System.Uri" /> construido.</returns>
    </member>
    <member name="M:System.UriParser.OnRegister(System.String,System.Int32)">
      <summary>El marco de trabajo lo llama cuando se registra un método de <see cref="T:System.UriParser" />.</summary>
      <param name="schemeName">Esquema asociado a este <see cref="T:System.UriParser" />.</param>
      <param name="defaultPort">Número de puerto del esquema.</param>
    </member>
    <member name="M:System.UriParser.Register(System.UriParser,System.String,System.Int32)">
      <summary>Asocia un esquema y número de puerto a un <see cref="T:System.UriParser" />.</summary>
      <param name="uriParser">
        <see cref="T:System.UriParser" /> que se va a registrar.</param>
      <param name="schemeName">Nombre del esquema asociado a este analizador.</param>
      <param name="defaultPort">Número de puerto predeterminado para el esquema especificado.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="uriParser" /> es null.-O bien-El parámetro <paramref name="schemeName" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="schemeName" /> no es válido.-O bien-El parámetro <paramref name="defaultPort" /> no es válido. El parámetro <paramref name="defaultPort" /> no debe ser menor que cero ni mayor que 65534.</exception>
    </member>
    <member name="M:System.UriParser.Resolve(System.Uri,System.Uri,System.UriFormatException@)">
      <summary>Los constructores de <see cref="T:System.Uri" /> y <see cref="Overload:System.Uri.TryCreate" /> lo llaman para resolver un identificador URI relativo.</summary>
      <returns>La cadena del <see cref="T:System.Uri" /> relativo resuelto.</returns>
      <param name="baseUri">Identificador URI base.</param>
      <param name="relativeUri">Identificador URI relativo.</param>
      <param name="parsingError">Errores durante el proceso de resolución, si los hay.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="baseUri" /> no es un identificador URI absoluto de la clase <see cref="T:System.Uri" />-O bien-El parámetro <paramref name="baseUri" /> requiere un análisis controlado por el usuario.</exception>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary>Convierte instancias del tipo de <see cref="T:System.String" /> en instancias de <see cref="T:System.Uri" />.</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary>Inicializa una instancia nueva de la clase <see cref="T:System.UriTypeConverter" />.</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Devuelve si este convertidor puede convertir un objeto del tipo de origen especificado en una instancia del tipo de <see cref="T:System.Uri" />. </summary>
      <returns>Valor <see cref="T:System.Boolean" /> que es true si el convertidor puede convertir el tipo especificado en una instancia de <see cref="T:System.Uri" />; en caso contrario, es false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que proporciona un contexto de formato.</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> que representa el tipo a partir del cual se desea realizar la conversión.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceType" /> es null (Nothing en Visual Basic).</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Devuelve si este convertidor puede convertir el objeto al tipo especificado, utilizando el contexto especificado.</summary>
      <returns>Valor <see cref="T:System.Boolean" /> que es true si <paramref name="destinationType" /> es de tipo <see cref="T:System.String" /> o <see cref="T:System.Uri" />; en caso contrario, es false.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que proporciona un contexto de formato.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> que representa el tipo de destino de la conversión.</param>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el objeto dado al tipo de este convertidor, utilizando el contexto especificado y la información de referencia cultural. </summary>
      <returns>Instancia de <see cref="T:System.Uri" /> que representa el parámetro <see cref="T:System.Object" /> convertido. Si el parámetro <paramref name="value" /> es null, se devuelve null.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que proporciona un contexto de formato.</param>
      <param name="culture">Objeto <see cref="T:System.Globalization.CultureInfo" /> que se va a utilizar como referencia cultural actual.</param>
      <param name="value">
        <see cref="T:System.Object" /> que se va a convertir en una instancia de <see cref="T:System.Uri" />.</param>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión. Esta excepción se produce si <paramref name="value" /> es un tipo distinto de <see cref="T:System.String" /> o <see cref="T:System.Uri" />, o el parámetro <paramref name="value" /> no admite los parámetros <paramref name="context" /> o <paramref name="culture" />.</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte un objeto de valor determinado al tipo especificado usando el contexto especificado y la información de referencia cultural.</summary>
      <returns>
        <see cref="T:System.Object" /> que representa el valor convertido.</returns>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que proporciona un contexto de formato.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />. Si se pasa null, se supone que se trata de la actual información de referencia cultural.</param>
      <param name="value">
        <see cref="T:System.Object" /> que se va a convertir.</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> al que se va a convertir el parámetro <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor del parámetro <paramref name="destinationType" /> es null.</exception>
      <exception cref="T:System.NotSupportedException">No se puede realizar la conversión.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratedCodeAttribute">
      <summary>Identifica el código generado por una herramienta.Esta clase no se puede heredar.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.GeneratedCodeAttribute.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.GeneratedCodeAttribute" />. </summary>
      <param name="tool">Nombre de la herramienta que generó el código.</param>
      <param name="version">Versión de la herramienta que generó el código.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Tool">
      <summary>Obtiene el nombre de la herramienta que generó el código.</summary>
      <returns>Nombre de la herramienta que generó el código.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Version">
      <summary>Obtiene el nombre de la versión de la herramienta que generó el código.</summary>
      <returns>Versión de la herramienta que generó el código.</returns>
    </member>
    <member name="T:System.Collections.Generic.ISet`1">
      <summary>Proporciona la interfaz base para la abstracción de conjuntos.</summary>
      <typeparam name="T">Tipo de elementos del conjunto.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
      <summary>Agrega un elemento al conjunto actual y devuelve un valor que indica si el elemento se ha agregado correctamente. </summary>
      <returns>true  si el elemento se agrega al conjunto; false si el elemento ya está presente en el conjunto.</returns>
      <param name="item">Elemento que se va a agregar al conjunto.</param>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita del conjunto actual todos los elementos de la colección especificada.</summary>
      <param name="other">Colección de elementos que se van a quitar del conjunto.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el conjunto actual para que solo contenga elementos que también estén en una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual es un subconjunto de propiedades (estricto) de una colección especificada.</summary>
      <returns>Es true si el conjunto actual es un subconjunto correcto de <paramref name="other" />; de lo contrario, es false.</returns>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual es un supraconjunto correcto de una colección especificada.</summary>
      <returns>Es true si el objeto <see cref="T:System.Collections.Generic.ISet`1" /> es un supraconjunto de <paramref name="other" />; en caso contrario, es false.</returns>
      <param name="other">Colección que se va a comparar con el conjunto actual. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si un conjunto es un subconjunto de una colección especificada.</summary>
      <returns>Es true si el conjunto actual es un subconjunto de <paramref name="other" />; de lo contrario, es false.</returns>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual es un supraconjunto de una colección especificada.</summary>
      <returns>Es true si el conjunto actual es un supraconjunto de <paramref name="other" />; en caso contrario, es false.</returns>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual se superpone a la colección especificada.</summary>
      <returns>Es true si el conjunto actual y <paramref name="other" /> tienen al menos un elemento común; de lo contrario, es false.</returns>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual y la colección especificada contienen los mismos elementos.</summary>
      <returns>true si el conjunto actual es igual a  <paramref name="other" />; de lo contrario, false.</returns>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el conjunto actual para que únicamente contenga elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos. </summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el conjunto actual para que contenga todos los elementos que están presentes en el conjunto actual y en la colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
      <summary>Representa una lista doblemente vinculada.</summary>
      <typeparam name="T">Especifica el tipo de elemento de la lista vinculada.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.LinkedList`1" /> que está vacía.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.LinkedList`1" /> que contiene elementos copiados de la interfaz <see cref="T:System.Collections.IEnumerable" /> especificada y tiene una capacidad suficiente para alojar el número de elementos copiados. </summary>
      <param name="collection">Interfaz <see cref="T:System.Collections.IEnumerable" /> cuyos elementos se copian en la nueva colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="collection" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>Agrega el nuevo nodo especificado después del nodo existente que se haya concretado en la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">Objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> después del cual se va a insertar <paramref name="newNode" />.</param>
      <param name="newNode">Nuevo objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que se va a agregar a la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="node" /> es null.-O bien-El valor de <paramref name="newNode" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> no está en la colección <see cref="T:System.Collections.Generic.LinkedList`1" /> actual.-O bien-<paramref name="newNode" /> pertenece a otra colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>Agrega un nuevo nodo que contiene el valor especificado después del nodo existente que se haya concretado en la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Nuevo objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contiene <paramref name="value" />.</returns>
      <param name="node">Objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> después del que se va a insertar un nuevo <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contiene <paramref name="value" />.</param>
      <param name="value">Valor que se va a agregar a la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="node" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> no está en la colección <see cref="T:System.Collections.Generic.LinkedList`1" /> actual.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>Agrega el nuevo nodo especificado antes del nodo existente que se haya concretado en la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">Objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> antes del cual se va a insertar <paramref name="newNode" />.</param>
      <param name="newNode">Nuevo objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que se va a agregar a la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="node" /> es null.-O bien-El valor de <paramref name="newNode" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> no está en la colección <see cref="T:System.Collections.Generic.LinkedList`1" /> actual.-O bien-<paramref name="newNode" /> pertenece a otra colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>Agrega un nuevo nodo que contiene el valor especificado antes del nodo existente que se haya concretado en la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Nuevo objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contiene <paramref name="value" />.</returns>
      <param name="node">Objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> antes del que se va a insertar un nuevo <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contiene <paramref name="value" />.</param>
      <param name="value">Valor que se va a agregar a la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="node" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> no está en la colección <see cref="T:System.Collections.Generic.LinkedList`1" /> actual.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
      <summary>Agrega el nuevo nodo especificado al principio de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">Nuevo <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que se va a agregar al principio de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="node" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> pertenece a otra colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
      <summary>Agrega un nuevo nodo que contiene el valor especificado al principio de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Nuevo objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contiene <paramref name="value" />.</returns>
      <param name="value">Valor que se va a agregar al principio de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
      <summary>Agrega el nuevo nodo especificado al final de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">Nuevo <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que se va a agregar al final de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="node" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> pertenece a otra colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
      <summary>Agrega un nuevo nodo que contiene el valor especificado al final de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Nuevo objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contiene <paramref name="value" />.</returns>
      <param name="value">Valor que se va a agregar al final de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
      <summary>Quita todos los nodos de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
      <summary>Determina si un valor se encuentra en la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>true si <paramref name="value" /> se encuentra en <see cref="T:System.Collections.Generic.LinkedList`1" />; de lo contrario, false.</returns>
      <param name="value">Valor que se va a buscar en <see cref="T:System.Collections.Generic.LinkedList`1" />. El valor puede ser null para los tipos de referencia.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
      <summary>Copia la totalidad de <see cref="T:System.Collections.Generic.LinkedList`1" /> en un objeto <see cref="T:System.Array" /> unidimensional compatible a partir del índice especificado de la matriz de destino.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.Generic.LinkedList`1" />. <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero de <paramref name="array" /> en el que empieza la operación de copia.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="index" /> es igual o mayor que la longitud de <paramref name="array" />.-O bien-<paramref name="index" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">El número de elementos en la <see cref="T:System.Collections.Generic.LinkedList`1" /> de origen es mayor que el espacio disponible entre el <paramref name="index" /> y el final de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
      <summary>Obtiene el número de nodos que ya están incluidos en la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Número de nodos que ya están incluidos en la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
      <summary>Encuentra el primer nodo que contiene el valor especificado.</summary>
      <returns>El primer <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contiene el valor especificado, si se encuentra; de lo contrario, null.</returns>
      <param name="value">Valor que se va a buscar en <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
      <summary>Encuentra el último nodo que contiene el valor especificado.</summary>
      <returns>El último <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contiene el valor especificado, si se encuentra; de lo contrario, null.</returns>
      <param name="value">Valor que se va a buscar en <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
      <summary>Obtiene el primer nodo de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Primer <see cref="T:System.Collections.Generic.LinkedListNode`1" /> de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
      <summary>Devuelve un enumerador que itera por el objeto <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Interfaz <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /> para la matriz <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
      <summary>Obtiene el último nodo de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Último <see cref="T:System.Collections.Generic.LinkedListNode`1" /> de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
      <summary>Quita el nodo especificado de <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que se va a quitar de <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="node" /> es null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> no está en la colección <see cref="T:System.Collections.Generic.LinkedList`1" /> actual.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
      <summary>Quita la primera aparición del valor especificado de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Es true si el elemento que contiene <paramref name="value" /> se quita correctamente; de lo contrario, es false.  Este método también devuelve false si <paramref name="value" /> no se encuentra en la <see cref="T:System.Collections.Generic.LinkedList`1" /> original.</returns>
      <param name="value">Valor que se va a quitar de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
      <summary>Quita el nodo del principio de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <exception cref="T:System.InvalidOperationException">El control <see cref="T:System.Collections.Generic.LinkedList`1" /> está vacío.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
      <summary>Quita el nodo del final de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <exception cref="T:System.InvalidOperationException">El control <see cref="T:System.Collections.Generic.LinkedList`1" /> está vacío.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Agrega un elemento al final de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="value">Valor que se va a agregar al final de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtiene un valor que indica si la matriz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns>true si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, false.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.LinkedList`1" />, esta propiedad siempre devuelve false.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Una interfaz <see cref="T:System.Collections.Generic.IEnumerator`1" /> que se puede usar para iterar por la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos de <see cref="T:System.Collections.ICollection" /> en una matriz <see cref="T:System.Array" />, a partir de un índice determinado de <see cref="T:System.Array" />.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.ICollection" />. <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero de <paramref name="array" /> en el que empieza la operación de copia.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.-O bien-<paramref name="array" /> no tiene índices de base cero.-O bien-El número de elementos en la <see cref="T:System.Collections.ICollection" /> de origen es mayor que el espacio disponible entre el <paramref name="index" /> y el final de la <paramref name="array" /> de destino.-O bien-El tipo del objeto <see cref="T:System.Collections.ICollection" /> de origen no puede convertirse automáticamente al tipo del parámetro <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para la ejecución de subprocesos).</summary>
      <returns>Es true si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para la ejecución de subprocesos); en caso contrario, es false.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.LinkedList`1" />, esta propiedad siempre devuelve false.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso a la matriz <see cref="T:System.Collections.ICollection" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.LinkedList`1" />, esta propiedad siempre devuelve la instancia actual.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración la lista vinculada como colección.</summary>
      <returns>Interfaz <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer la lista vinculada como colección.</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
      <summary>Enumera los elementos de un objeto <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
      <summary>Obtiene el elemento situado en la posición actual del enumerador.</summary>
      <returns>Elemento de <see cref="T:System.Collections.Generic.LinkedList`1" /> en la posición actual del enumerador.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
      <summary>Libera todos los recursos utilizados por <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
      <summary>Desplaza el enumerador al siguiente elemento de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>true si el enumerador avanzó con éxito hasta el siguiente elemento; false si el enumerador alcanzó el final de la colección.</returns>
      <exception cref="T:System.InvalidOperationException">La colección se modificó después de crear el enumerador. </exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtiene el elemento situado en la posición actual del enumerador.</summary>
      <returns>Elemento de la colección en la posición actual del enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">El enumerador se sitúa antes del primer elemento de la colección o después del último. </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Establece el enumerador en su posición inicial (antes del primer elemento de la colección). Esta clase no se puede heredar.</summary>
      <exception cref="T:System.InvalidOperationException">La colección se modificó después de crear el enumerador. </exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
      <summary>Representa un nodo en una clase <see cref="T:System.Collections.Generic.LinkedList`1" />. Esta clase no se puede heredar.</summary>
      <typeparam name="T">Especifica el tipo de elemento de la lista vinculada.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.LinkedListNode`1" /> que contiene el valor especificado.</summary>
      <param name="value">Valor que va a contener el objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
      <summary>Obtiene la colección <see cref="T:System.Collections.Generic.LinkedList`1" /> a la que pertenece el objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" />.</summary>
      <returns>Una referencia a la colección <see cref="T:System.Collections.Generic.LinkedList`1" /> a la que pertenece el objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" />, o  null si el objeto <see cref="T:System.Collections.Generic.LinkedListNode`1" /> no está vinculado.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
      <summary>Obtiene el siguiente nodo de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Una referencia al nodo siguiente en <see cref="T:System.Collections.Generic.LinkedList`1" />, o null si el nodo actual es el último elemento (<see cref="P:System.Collections.Generic.LinkedList`1.Last" />) de <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
      <summary>Obtiene el anterior nodo de la colección <see cref="T:System.Collections.Generic.LinkedList`1" />.</summary>
      <returns>Una referencia al nodo anterior en <see cref="T:System.Collections.Generic.LinkedList`1" />, o null si el nodo actual es el primer elemento (<see cref="P:System.Collections.Generic.LinkedList`1.First" />) de <see cref="T:System.Collections.Generic.LinkedList`1" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
      <summary>Obtiene el valor que contiene el nodo.</summary>
      <returns>Valor que contiene el nodo.</returns>
    </member>
    <member name="T:System.Collections.Generic.Queue`1">
      <summary>Representa una colección de objetos de tipo primero en entrar, primero en salir.</summary>
      <typeparam name="T">Especifica el tipo de elementos en la cola.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Queue`1" /> que está vacía y tiene la capacidad inicial predeterminada.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Queue`1" /> que contiene elementos copiados de la colección especificada y tiene una capacidad suficiente para alojar el número de elementos copiados.</summary>
      <param name="collection">Colección cuyos elementos se copian en la nueva colección <see cref="T:System.Collections.Generic.Queue`1" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="collection" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Queue`1" /> que está vacía y tiene la capacidad inicial predeterminada.</summary>
      <param name="capacity">Número inicial de elementos que la colección <see cref="T:System.Collections.Generic.Queue`1" /> puede contener.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
      <summary>Quita todos los objetos de la colección <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
      <summary>Determina si un elemento se encuentra en <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns>true si <paramref name="item" /> se encuentra en <see cref="T:System.Collections.Generic.Queue`1" />; de lo contrario, false.</returns>
      <param name="item">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.Queue`1" />. El valor puede ser null para los tipos de referencia.</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
      <summary>Copia los elementos de <see cref="T:System.Collections.Generic.Queue`1" /> en un objeto <see cref="T:System.Array" /> unidimensional existente, a partir del índice especificado de la matriz.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.Generic.Queue`1" />. <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero de <paramref name="array" /> en el que empieza la operación de copia.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">El número de elementos en la <see cref="T:System.Collections.Generic.Queue`1" /> de origen es mayor que el espacio disponible entre el <paramref name="arrayIndex" /> y el final de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
      <summary>Obtiene el número de elementos incluidos en <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns>Número de elementos incluidos en <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
      <summary>Quita y devuelve el objeto situado al principio de <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns>Objeto que se quita del principio de <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
      <exception cref="T:System.InvalidOperationException">El control <see cref="T:System.Collections.Generic.Queue`1" /> está vacío.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
      <summary>Agrega un objeto al final de <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <param name="item">Objeto que se va a agregar a <see cref="T:System.Collections.Generic.Queue`1" />. El valor puede ser null para los tipos de referencia.</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
      <summary>Devuelve un enumerador que itera por el objeto <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns>Interfaz <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> para la matriz <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
      <summary>Devuelve un objeto situado al principio de <see cref="T:System.Collections.Generic.Queue`1" /> sin eliminarlo.</summary>
      <returns>Objeto situado al principio de <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
      <exception cref="T:System.InvalidOperationException">El control <see cref="T:System.Collections.Generic.Queue`1" /> está vacío.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Una interfaz <see cref="T:System.Collections.Generic.IEnumerator`1" /> que se puede usar para iterar por la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos de <see cref="T:System.Collections.ICollection" /> en una matriz <see cref="T:System.Array" />, a partir de un índice determinado de <see cref="T:System.Array" />.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.ICollection" />. <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero de <paramref name="array" /> en el que empieza la operación de copia.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.-O bien-<paramref name="array" /> no tiene índices de base cero.-O bien-El número de elementos en la <see cref="T:System.Collections.ICollection" /> de origen es mayor que el espacio disponible entre el <paramref name="index" /> y el final de la <paramref name="array" /> de destino.-O bien-El tipo del objeto <see cref="T:System.Collections.ICollection" /> de origen no puede convertirse automáticamente al tipo del parámetro <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para la ejecución de subprocesos).</summary>
      <returns>Es true si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para la ejecución de subprocesos); en caso contrario, es false.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.Queue`1" />, esta propiedad siempre devuelve false.</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso a la matriz <see cref="T:System.Collections.ICollection" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.Queue`1" />, esta propiedad siempre devuelve la instancia actual.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Una interfaz <see cref="T:System.Collections.IEnumerator" /> que se puede usar para iterar por la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
      <summary>Copia los elementos de <see cref="T:System.Collections.Generic.Queue`1" /> en una nueva matriz.</summary>
      <returns>Nueva matriz que contiene elementos copiados de <see cref="T:System.Collections.Generic.Queue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
      <summary>Establece la capacidad en el número real de elementos en la colección <see cref="T:System.Collections.Generic.Queue`1" />, si este número supone menos del 90 por ciento de la capacidad actual.</summary>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator">
      <summary>Enumera los elementos de un objeto <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
      <summary>Obtiene el elemento situado en la posición actual del enumerador.</summary>
      <returns>Elemento de <see cref="T:System.Collections.Generic.Queue`1" /> en la posición actual del enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">El enumerador se sitúa antes del primer elemento de la colección o después del último. </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
      <summary>Libera todos los recursos utilizados por <see cref="T:System.Collections.Generic.Queue`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
      <summary>Desplaza el enumerador al siguiente elemento de la colección <see cref="T:System.Collections.Generic.Queue`1" />.</summary>
      <returns>true si el enumerador avanzó con éxito hasta el siguiente elemento; false si el enumerador alcanzó el final de la colección.</returns>
      <exception cref="T:System.InvalidOperationException">La colección se modificó después de crear el enumerador. </exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtiene el elemento situado en la posición actual del enumerador.</summary>
      <returns>Elemento de la colección en la posición actual del enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">El enumerador se sitúa antes del primer elemento de la colección o después del último. </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
      <exception cref="T:System.InvalidOperationException">La colección se modificó después de crear el enumerador. </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2">
      <summary>Representa una colección de pares de clave y valor que se ordenan por claves. </summary>
      <typeparam name="TKey">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue">Tipo de los valores del diccionario.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedDictionary`2" /> que está vacía y utiliza la implementación predeterminada de <see cref="T:System.Collections.Generic.IComparer`1" /> para el tipo de clave.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedDictionary`2" /> que está vacía y utiliza la implementación especificada de <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar las claves.</summary>
      <param name="comparer">Implementación de <see cref="T:System.Collections.Generic.IComparer`1" /> que se va a utilizar para comparar claves o null si se va a utilizar el objeto <see cref="T:System.Collections.Generic.Comparer`1" /> predeterminado para el tipo de la clave.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedDictionary`2" /> que contiene elementos copiados de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" /> especificada y que utiliza la implementación predeterminada de <see cref="T:System.Collections.Generic.IComparer`1" /> para el tipo de clave.</summary>
      <param name="dictionary">Interfaz <see cref="T:System.Collections.Generic.IDictionary`2" /> cuyos elementos se copian en la nueva colección <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="dictionary" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> contiene una o varias claves duplicadas.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedDictionary`2" /> que contiene elementos copiados de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" /> especificada y que utiliza la implementación indicada de <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar las claves.</summary>
      <param name="dictionary">Interfaz <see cref="T:System.Collections.Generic.IDictionary`2" /> cuyos elementos se copian en la nueva colección <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</param>
      <param name="comparer">Implementación de <see cref="T:System.Collections.Generic.IComparer`1" /> que se va a utilizar para comparar claves o null si se va a utilizar el objeto <see cref="T:System.Collections.Generic.Comparer`1" /> predeterminado para el tipo de la clave.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="dictionary" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> contiene una o varias claves duplicadas.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)">
      <summary>Agrega un elemento con la clave y el valor especificados a la clase <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <param name="key">Clave del elemento que se va a agregar.</param>
      <param name="value">Valor del elemento que se va a agregar. El valor puede ser null para los tipos de referencia.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="key" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ya existe un elemento con la misma clave en la interfaz <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Clear">
      <summary>Quita todos los elementos de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Comparer">
      <summary>Obtiene la interfaz <see cref="T:System.Collections.Generic.IComparer`1" /> utilizada para ordenar los elementos de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>Interfaz <see cref="T:System.Collections.Generic.IComparer`1" /> utilizada para ordenar los elementos de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)">
      <summary>Determina si la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contiene un elemento con la clave especificada.</summary>
      <returns>true si <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contiene un elemento con la clave; en caso contrario, false.</returns>
      <param name="key">Clave que se va a buscar en la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="key" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)">
      <summary>Determina si la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contiene un elemento con el valor especificado.</summary>
      <returns>true si <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contiene un elemento con el valor especificado; en caso contrario, false.</returns>
      <param name="value">Valor que se va a buscar en <see cref="T:System.Collections.Generic.SortedDictionary`2" />. El valor puede ser null para los tipos de referencia.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Copia los elementos de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" /> a la matriz especificada de estructuras <see cref="T:System.Collections.Generic.KeyValuePair`2" />, empezando en el índice que se haya indicado.</summary>
      <param name="array">Matriz unidimensional de estructuras <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que es el destino de los elementos copiados de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" /> actual. Los índices de la matriz deben ser de base cero.</param>
      <param name="index">Índice de base cero de <paramref name="array" /> en el que empieza la operación de copia.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException">El número de elementos en la <see cref="T:System.Collections.Generic.SortedDictionary`2" /> de origen es mayor que el espacio disponible entre el <paramref name="index" /> y el final de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Count">
      <summary>Obtiene el número de pares de clave y valor incluidos en <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>Número de pares de clave y valor incluidos en <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.GetEnumerator">
      <summary>Devuelve un enumerador que itera por el objeto <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" /> para <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Item(`0)">
      <summary>Obtiene o establece el valor asociado a la clave especificada.</summary>
      <returns>Valor asociado a la clave especificada. Si no se encuentra la clave especificada, en el caso de una operación Get se producirá una excepción <see cref="T:System.Collections.Generic.KeyNotFoundException" /> y en el caso de una operación de establecimiento se creará un nuevo elemento con la clave especificada.</returns>
      <param name="key">Clave del valor que se va a obtener o establecer.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="key" /> es null.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Se ha recuperado la propiedad y <paramref name="key" /> no existe en la colección.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Keys">
      <summary>Obtiene una colección que contiene las claves de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>Interfaz <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> que contiene las claves de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Remove(`0)">
      <summary>Quita el elemento con la clave especificada de la clase <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>Es true si el elemento se quita correctamente; de lo contrario, es false.  Este método también devuelve false si no se encuentra <paramref name="key" /> en la <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
      <param name="key">Clave del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="key" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Agrega un elemento a <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="keyValuePair">Estructura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que se va a agregar a la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="keyValuePair" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ya existe un elemento con la misma clave en la interfaz <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> contiene una clave y un valor específicos.</summary>
      <returns>true si <paramref name="keyValuePair" /> se encuentra en <see cref="T:System.Collections.Generic.ICollection`1" />; de lo contrario, false.</returns>
      <param name="keyValuePair">Estructura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que se va a buscar en la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtiene un valor que indica si la matriz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns>true si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, false. En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, esta propiedad siempre devuelve false.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Quita la primera aparición del elemento especificado de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>Es true si <paramref name="keyValuePair" /> se quitó correctamente de <see cref="T:System.Collections.Generic.ICollection`1" />; de lo contrario, es false. Este método también devuelve false si no se encuentra <paramref name="keyValuePair" /> en la <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="keyValuePair">Estructura <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que se quita de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves de la colección <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Obtiene un objeto <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores de <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Objeto <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores de la colección <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Una interfaz <see cref="T:System.Collections.IEnumerator" /> que se puede usar para iterar por la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> en una matriz, comenzando en el índice especificado de la matriz.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.Generic.ICollection`1" />. La matriz debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero de <paramref name="array" /> en el que empieza la operación de copia.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.-O bien-<paramref name="array" /> no tiene índices de base cero.-O bien-El número de elementos en la <see cref="T:System.Collections.Generic.ICollection`1" /> de origen es mayor que el espacio disponible entre el <paramref name="index" /> y el final de la <paramref name="array" /> de destino.-O bien-El tipo del objeto <see cref="T:System.Collections.Generic.ICollection`1" /> de origen no puede convertirse automáticamente al tipo del parámetro <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para la ejecución de subprocesos).</summary>
      <returns>Es true si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para la ejecución de subprocesos); en caso contrario, es false.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, esta propiedad siempre devuelve false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso a la matriz <see cref="T:System.Collections.ICollection" />. </returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Agrega un elemento con la clave y el valor proporcionados a la interfaz <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">Objeto que se va a utilizar como clave del elemento que se va a agregar.</param>
      <param name="value">Objeto que se va a utilizar como valor del elemento que se va a agregar.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="key" /> es null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> es de un tipo que no se puede asignar al tipo de clave <paramref name="TKey" /> de la colección <see cref="T:System.Collections.IDictionary" />.-O bien-<paramref name="value" /> es de un tipo que no se puede asignar al tipo de valor <paramref name="TValue" /> de la interfaz <see cref="T:System.Collections.IDictionary" />.-O bien-Ya existe un elemento con la misma clave en la interfaz <see cref="T:System.Collections.IDictionary" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina si la colección <see cref="T:System.Collections.IDictionary" /> contiene un elemento con la clave especificada.</summary>
      <returns>true si <see cref="T:System.Collections.IDictionary" /> contiene un elemento con la clave; en caso contrario, false.</returns>
      <param name="key">Clave que se va a buscar en la colección <see cref="T:System.Collections.IDictionary" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="key" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Devuelve una interfaz <see cref="T:System.Collections.IDictionaryEnumerator" /> para el objeto <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Interfaz <see cref="T:System.Collections.IDictionaryEnumerator" /> para la matriz <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtiene un valor que indica si la matriz <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo.</summary>
      <returns>Es true si la <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo; de lo contrario, es false.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, esta propiedad siempre devuelve false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtiene un valor que indica si la matriz <see cref="T:System.Collections.IDictionary" /> es de solo lectura.</summary>
      <returns>true si <see cref="T:System.Collections.IDictionary" /> es de solo lectura; de lo contrario, false.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2" />, esta propiedad siempre devuelve false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtiene o establece el elemento con la clave especificada.</summary>
      <returns>El elemento con la clave especificada, o null si <paramref name="key" /> no está en el diccionario o si <paramref name="key" /> es de un tipo que no se puede asignar al tipo de clave <paramref name="TKey" /> de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
      <param name="key">Clave del elemento que se va a obtener.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="key" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Se está asignando un valor, pero <paramref name="key" /> es de un tipo no asignable al tipo de clave <paramref name="TKey" /> de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.-O bien-Se está asignando un valor, pero <paramref name="value" /> es de un tipo no asignable al tipo de valor <paramref name="TValue" /> de <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Obtiene una interfaz <see cref="T:System.Collections.ICollection" /> que contiene las claves de la interfaz <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Interfaz <see cref="T:System.Collections.ICollection" /> que contiene las claves de la colección <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Quita el elemento con la clave especificada de la clase <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">Clave del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="key" /> es null.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>Obtiene un objeto <see cref="T:System.Collections.ICollection" /> que contiene los valores de <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Objeto <see cref="T:System.Collections.ICollection" /> que contiene los valores de la colección <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración la colección.</summary>
      <returns>Una interfaz <see cref="T:System.Collections.Generic.IEnumerator`1" /> que se puede usar para iterar por la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>Obtiene el valor asociado a la clave especificada.</summary>
      <returns>true si <see cref="T:System.Collections.Generic.SortedDictionary`2" /> contiene un elemento con la clave; en caso contrario, false.</returns>
      <param name="key">Clave del valor que se va a obtener.</param>
      <param name="value">Valor asociado a la clave especificada cuando el método devuelve, si se encuentra la clave; en caso contrario, valor predeterminado para el tipo del parámetro <paramref name="value" />. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="key" /> es null.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Values">
      <summary>Obtiene una colección que contiene los valores de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>Colección <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> que contiene los valores de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.Enumerator">
      <summary>Enumera los elementos de un objeto <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current">
      <summary>Obtiene el elemento situado en la posición actual del enumerador.</summary>
      <returns>Elemento de <see cref="T:System.Collections.Generic.SortedDictionary`2" /> en la posición actual del enumerador.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose">
      <summary>Libera todos los recursos utilizados por <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext">
      <summary>Desplaza el enumerador al siguiente elemento de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" />.</summary>
      <returns>true si el enumerador avanzó con éxito hasta el siguiente elemento; false si el enumerador alcanzó el final de la colección.</returns>
      <exception cref="T:System.InvalidOperationException">La colección se modificó después de crear el enumerador. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>Obtiene el elemento que está en la posición actual del enumerador como una estructura <see cref="T:System.Collections.DictionaryEntry" />.</summary>
      <returns>Elemento de la colección que está en la posición actual del diccionario, como una estructura <see cref="T:System.Collections.DictionaryEntry" />.</returns>
      <exception cref="T:System.InvalidOperationException">El enumerador se sitúa antes del primer elemento de la colección o después del último. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>Obtiene la clave del elemento situado en la posición actual del enumerador.</summary>
      <returns>Clave del elemento de la colección situado en la posición actual del enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">El enumerador se sitúa antes del primer elemento de la colección o después del último. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>Obtiene el valor del elemento situado en la posición actual del enumerador.</summary>
      <returns>Valor del elemento de la colección situado en la posición actual del enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">El enumerador se sitúa antes del primer elemento de la colección o después del último. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtiene el elemento situado en la posición actual del enumerador.</summary>
      <returns>Elemento de la colección en la posición actual del enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">El enumerador se sitúa antes del primer elemento de la colección o después del último. </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
      <exception cref="T:System.InvalidOperationException">La colección se modificó después de crear el enumerador. </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection">
      <summary>Representa la colección de claves de una colección <see cref="T:System.Collections.Generic.SortedDictionary`2" />. Esta clase no se puede heredar. </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> que refleja las claves de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" /> especificada.</summary>
      <param name="dictionary">Colección <see cref="T:System.Collections.Generic.SortedDictionary`2" /> cuyas claves se reflejan en la nueva colección <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="dictionary" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>Copia los elementos de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> en una matriz unidimensional existente, a partir del índice especificado de la matriz.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />. La matriz debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero de <paramref name="array" /> en el que empieza la operación de copia.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException">El número de elementos en la <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> de origen es mayor que el espacio disponible entre el <paramref name="index" /> y el final de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Count">
      <summary>Obtiene el número de elementos incluidos en <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <returns>Número de elementos incluidos en <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator">
      <summary>Devuelve un enumerador que itera por el objeto <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <returns>Estructura <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> para la colección <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Agrega un elemento a <see cref="T:System.Collections.Generic.ICollection`1" />.  Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">Objeto que se va a agregar a <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Se produce siempre; la colección es de sólo lectura.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Quita todos los elementos de <see cref="T:System.Collections.Generic.ICollection`1" />.  Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Se produce siempre; la colección es de sólo lectura.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>Determina si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> contiene el valor especificado.</summary>
      <returns>true si <paramref name="item" /> se encuentra en <see cref="T:System.Collections.Generic.ICollection`1" />; de lo contrario, false.</returns>
      <param name="item">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtiene un valor que indica si la matriz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns>true si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, false.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />, esta propiedad siempre devuelve false.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />.  Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Es true si <paramref name="item" /> se quitó correctamente de <see cref="T:System.Collections.Generic.ICollection`1" />; de lo contrario, es false. Este método también devuelve false si no se encuentra <paramref name="item" /> en la <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="item">Objeto que se va a quitar de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Se produce siempre; la colección es de sólo lectura.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración la colección.</summary>
      <returns>Una interfaz <see cref="T:System.Collections.Generic.IEnumerator`1" /> que se puede usar para iterar por la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos de <see cref="T:System.Collections.ICollection" /> en una matriz, comenzando en un índice concreto de la matriz.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.ICollection" />. La matriz debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero de <paramref name="array" /> en el que empieza la operación de copia.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.-O bien-<paramref name="array" /> no tiene índices de base cero.-O bien-El número de elementos en la <see cref="T:System.Collections.ICollection" /> de origen es mayor que el espacio disponible entre el <paramref name="index" /> y el final de la <paramref name="array" /> de destino.-O bien-El tipo del objeto <see cref="T:System.Collections.ICollection" /> de origen no puede convertirse automáticamente al tipo del parámetro <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para la ejecución de subprocesos).</summary>
      <returns>Es true si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para la ejecución de subprocesos); en caso contrario, es false.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />, esta propiedad siempre devuelve false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso a la matriz <see cref="T:System.Collections.ICollection" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />, esta propiedad siempre devuelve la instancia actual.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración la colección.</summary>
      <returns>Una interfaz <see cref="T:System.Collections.IEnumerator" /> que se puede usar para iterar por la colección.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator">
      <summary>Enumera los elementos de un objeto <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current">
      <summary>Obtiene el elemento situado en la posición actual del enumerador.</summary>
      <returns>Elemento de <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> en la posición actual del enumerador.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>Libera todos los recursos utilizados por <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>Desplaza el enumerador al siguiente elemento de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />.</summary>
      <returns>true si el enumerador avanzó con éxito hasta el siguiente elemento; false si el enumerador alcanzó el final de la colección.</returns>
      <exception cref="T:System.InvalidOperationException">La colección se modificó después de crear el enumerador. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtiene el elemento situado en la posición actual del enumerador.</summary>
      <returns>Elemento de la colección en la posición actual del enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">El enumerador se sitúa antes del primer elemento de la colección o después del último. </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
      <exception cref="T:System.InvalidOperationException">La colección se modificó después de crear el enumerador. </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection">
      <summary>Representa la colección de valores de una colección <see cref="T:System.Collections.Generic.SortedDictionary`2" />. Esta clase no se puede heredar.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> que refleja los valores de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2" /> especificada.</summary>
      <param name="dictionary">Colección <see cref="T:System.Collections.Generic.SortedDictionary`2" /> cuyos valores se reflejan en la nueva colección <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="dictionary" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>Copia los elementos de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> en una matriz unidimensional existente, a partir del índice especificado de la matriz.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />. La matriz debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero de <paramref name="array" /> en el que empieza la operación de copia.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException">El número de elementos en la <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> de origen es mayor que el espacio disponible entre el <paramref name="index" /> y el final de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Count">
      <summary>Obtiene el número de elementos incluidos en <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <returns>Número de elementos incluidos en <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.GetEnumerator">
      <summary>Devuelve un enumerador que itera por el objeto <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <returns>Estructura <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> para la colección <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Add(`1)">
      <summary>Agrega un elemento a <see cref="T:System.Collections.Generic.ICollection`1" />.  Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">Objeto que se va a agregar a <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Se produce siempre; la colección es de sólo lectura.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Quita todos los elementos de <see cref="T:System.Collections.Generic.ICollection`1" />.  Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Se produce siempre; la colección es de sólo lectura.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Contains(`1)">
      <summary>Determina si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> contiene un valor especificado.</summary>
      <returns>true si <paramref name="item" /> se encuentra en <see cref="T:System.Collections.Generic.ICollection`1" />; de lo contrario, false.</returns>
      <param name="item">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtiene un valor que indica si la matriz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns>true si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, false.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />, esta propiedad siempre devuelve false.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Remove(`1)">
      <summary>Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />.  Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Es true si <paramref name="item" /> se quitó correctamente de <see cref="T:System.Collections.Generic.ICollection`1" />; de lo contrario, es false. Este método también devuelve false si no se encuentra <paramref name="item" /> en la <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="item">Objeto que se va a quitar de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">Se produce siempre; la colección es de sólo lectura.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />.  Esta implementación siempre produce una excepción <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Es true si <paramref name="item" /> se quitó correctamente de <see cref="T:System.Collections.Generic.ICollection`1" />; de lo contrario, es false. Este método también devuelve false si no se encuentra <paramref name="item" /> en la <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <exception cref="T:System.NotSupportedException">Se produce siempre; la colección es de sólo lectura.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos de <see cref="T:System.Collections.ICollection" /> en una matriz, comenzando en un índice concreto de la matriz.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.ICollection" />. La matriz debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero de <paramref name="array" /> en el que empieza la operación de copia.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.-O bien-<paramref name="array" /> no tiene índices de base cero.-O bien-El número de elementos en la <see cref="T:System.Collections.ICollection" /> de origen es mayor que el espacio disponible entre el <paramref name="index" /> y el final de la <paramref name="array" /> de destino.-O bien-El tipo del objeto <see cref="T:System.Collections.ICollection" /> de origen no puede convertirse automáticamente al tipo del parámetro <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para la ejecución de subprocesos).</summary>
      <returns>Es true si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para la ejecución de subprocesos); en caso contrario, es false.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />, esta propiedad siempre devuelve false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso a la matriz <see cref="T:System.Collections.ICollection" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />, esta propiedad siempre devuelve la instancia actual.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración la colección.</summary>
      <returns>Una interfaz <see cref="T:System.Collections.IEnumerator" /> que se puede usar para iterar por la colección.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator">
      <summary>Enumera los elementos de un objeto <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Current">
      <summary>Obtiene el elemento situado en la posición actual del enumerador.</summary>
      <returns>Elemento de <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> en la posición actual del enumerador.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>Libera todos los recursos utilizados por <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>Desplaza el enumerador al siguiente elemento de la colección <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />.</summary>
      <returns>true si el enumerador avanzó con éxito hasta el siguiente elemento; false si el enumerador alcanzó el final de la colección.</returns>
      <exception cref="T:System.InvalidOperationException">La colección se modificó después de crear el enumerador. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtiene el elemento situado en la posición actual del enumerador.</summary>
      <returns>Elemento de la colección en la posición actual del enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">El enumerador se sitúa antes del primer elemento de la colección o después del último. </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
      <exception cref="T:System.InvalidOperationException">La colección se modificó después de crear el enumerador. </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1">
      <summary>Representa una colección de objetos que se mantiene en el criterio de ordenación.</summary>
      <typeparam name="T">Tipo de elementos del conjunto.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor">
      <summary>Inicializa una instancia nueva de la clase <see cref="T:System.Collections.Generic.SortedSet`1" />. </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedSet`1" /> que usa un comparador especificado.</summary>
      <param name="comparer">Comparador predeterminado que se va a usar para comparar los objetos. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="comparer" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedSet`1" /> que contiene los elementos copiados de una colección enumerable especificada.</summary>
      <param name="collection">Colección enumerable que se va a copiar. </param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.SortedSet`1" /> que contiene los elementos copiados de una colección enumerable especificada y que usa un comparador especificado.</summary>
      <param name="collection">Colección enumerable que se va a copiar. </param>
      <param name="comparer">Comparador predeterminado que se va a usar para comparar los objetos. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="collection" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Add(`0)">
      <summary>Agrega un elemento al conjunto y devuelve un valor que indica si se ha agregado correctamente.</summary>
      <returns>true si <paramref name="item" /> se agrega al conjunto; de lo contrario, false. </returns>
      <param name="item">Elemento que se va a agregar al conjunto.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Clear">
      <summary>Quita todos los elementos del conjunto.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Comparer">
      <summary>Obtiene la interfaz <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> que se usa para determinar la igualdad de los valores de la colección <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>Comparador que se usa para determinar la igualdad de los valores de la colección <see cref="T:System.Collections.Generic.SortedSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Contains(`0)">
      <summary>Determina si el conjunto contiene un elemento específico.</summary>
      <returns>Es true si el conjunto contiene <paramref name="item" />; de lo contrario, es false.</returns>
      <param name="item">Elemento que se debe buscar en el conjunto.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[])">
      <summary>Copia toda la colección <see cref="T:System.Collections.Generic.SortedSet`1" /> en una matriz unidimensional compatible, empezando en el principio de la matriz de destino.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde la colección <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentException">El número de elementos de la <see cref="T:System.Collections.Generic.SortedSet`1" /> de origen supera el número de elementos que puede contener la matriz de destino. </exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)">
      <summary>Copia toda la colección <see cref="T:System.Collections.Generic.SortedSet`1" /> a una matriz unidimensional compatible, empezando en el índice especificado de la matriz.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde la colección <see cref="T:System.Collections.Generic.SortedSet`1" />. La matriz debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero de <paramref name="array" /> en el que empieza la operación de copia.</param>
      <exception cref="T:System.ArgumentException">El número de elementos de la matriz de origen es mayor que el espacio disponible desde el <paramref name="index" /> hasta el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>Copia un número especificado de elementos de la colección <see cref="T:System.Collections.Generic.SortedSet`1" /> a una matriz unidimensional compatible, empezando en el índice especificado de la matriz.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde la colección <see cref="T:System.Collections.Generic.SortedSet`1" />. La matriz debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero de <paramref name="array" /> en el que empieza la operación de copia.</param>
      <param name="count">Número de elementos que se van a copiar.</param>
      <exception cref="T:System.ArgumentException">El número de elementos de la matriz de origen es mayor que el espacio disponible desde el <paramref name="index" /> hasta el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.-O bien-<paramref name="count" /> es menor que cero.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Count">
      <summary>Obtiene el número de elementos de la colección <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>Número de elementos incluidos en <see cref="T:System.Collections.Generic.SortedSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita del objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual todos los elementos que están en la colección especificada.</summary>
      <param name="other">Colección de elementos que se van a quitar del objeto <see cref="T:System.Collections.Generic.SortedSet`1" />.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetEnumerator">
      <summary>Devuelve un enumerador que itera por el objeto <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>Un enumerador que recorre en iteración <see cref="T:System.Collections.Generic.SortedSet`1" /> en la dirección de ordenación.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)">
      <summary>Devuelve una vista de un subconjunto en una colección <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>Una vista de subconjunto que contiene solo los valores del intervalo especificado.</returns>
      <param name="lowerValue">Valor más bajo deseado en la vista.</param>
      <param name="upperValue">Valor más alto deseado en la vista. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="lowerValue" /> es mayor que <paramref name="upperValue" /> según el comparador.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Una operación probada en la vista estaba fuera del intervalo especificado por <paramref name="lowerValue" /> y <paramref name="upperValue" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual para que solo contenga elementos que también estén en una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si un objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> es un subconjunto apropiado de la colección especificada.</summary>
      <returns>Es true si el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> es un subconjunto apropiado de <paramref name="other" />; en caso contrario, es false.</returns>
      <param name="other">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si un objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> es un supraconjunto apropiado de la colección especificada.</summary>
      <returns>Es true si el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> es un supraconjunto apropiado de <paramref name="other" />; en caso contrario, es false.</returns>
      <param name="other">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si un objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> es un subconjunto de la colección especificada.</summary>
      <returns>Es true si el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual es un subconjunto de <paramref name="other" />; en caso contrario, es false.</returns>
      <param name="other">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si un objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> es un supraconjunto de la colección especificada.</summary>
      <returns>Es true si el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> es un supraconjunto de <paramref name="other" />; en caso contrario, es false.</returns>
      <param name="other">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual. </param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Max">
      <summary>Obtiene el valor máximo de <see cref="T:System.Collections.Generic.SortedSet`1" />, tal y como define el comparador.</summary>
      <returns>Valor máximo del conjunto.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Min">
      <summary>Obtiene el valor mínimo de <see cref="T:System.Collections.Generic.SortedSet`1" />, tal y como define el comparador.</summary>
      <returns>Valor mínimo del conjunto.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual y una colección especificada comparten elementos comunes.</summary>
      <returns>Es true si el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> y <paramref name="other" /> comparten al menos un elemento común; de lo contrario, es false.</returns>
      <param name="other">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Remove(`0)">
      <summary>Quita un elemento especificado de <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>Es true si el elemento se encuentra y se quita correctamente; de lo contrario, es false. </returns>
      <param name="item">Elemento que se va a quitar.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>Quita de una colección <see cref="T:System.Collections.Generic.SortedSet`1" /> todos los elementos que cumplen las condiciones definidas por el predicado especificado.</summary>
      <returns>Número de elementos que se quitaron de la colección <see cref="T:System.Collections.Generic.SortedSet`1" />. </returns>
      <param name="match">Delegado que define las condiciones de los elementos que se van a quitar.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="match" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Reverse">
      <summary>Devuelve una interfaz <see cref="T:System.Collections.Generic.IEnumerable`1" /> que itera en orden inverso por la colección <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>Un enumerador que itera en orden inverso por la colección <see cref="T:System.Collections.Generic.SortedSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual y la colección especificada contienen los mismos elementos.</summary>
      <returns>Es true si el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual es igual a  <paramref name="other" />; en caso contrario, es false.</returns>
      <param name="other">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual para que únicamente contenga elementos que están presentes en el objeto actual o en la colección especificada, pero no en ambos.</summary>
      <param name="other">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Agrega un elemento a un objeto <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">Objeto que se va a agregar al objeto <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> es de sólo lectura.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtiene un valor que indica si un objeto <see cref="T:System.Collections.ICollection" /> es de sólo lectura.</summary>
      <returns>true si la colección es de sólo lectura; de lo contrario, false.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Enumerador que puede usarse para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia toda la colección <see cref="T:System.Collections.Generic.SortedSet`1" /> a una matriz unidimensional compatible, empezando en el índice especificado de la matriz.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde la colección <see cref="T:System.Collections.Generic.SortedSet`1" />. La matriz debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero de <paramref name="array" /> en el que empieza la operación de copia.</param>
      <exception cref="T:System.ArgumentException">El número de elementos de la matriz de origen es mayor que el espacio disponible desde el <paramref name="index" /> hasta el final de la matriz de destino. </exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns>Es true si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado; en caso contrario, es false.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso a la matriz <see cref="T:System.Collections.ICollection" />. En la implementación predeterminada de <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />, esta propiedad siempre devuelve la instancia actual.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Enumerador que puede usarse para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual para que contenga todos los elementos que están presentes en el objeto actual y en la colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el objeto <see cref="T:System.Collections.Generic.SortedSet`1" /> actual.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="other" /> es null.</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1.Enumerator">
      <summary>Enumera los elementos de un objeto <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.Current">
      <summary>Obtiene el elemento situado en la posición actual del enumerador.</summary>
      <returns>Elemento de la colección en la posición actual del enumerador.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.Dispose">
      <summary>Libera todos los recursos utilizados por <see cref="T:System.Collections.Generic.SortedSet`1.Enumerator" />. </summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.MoveNext">
      <summary>Desplaza el enumerador al siguiente elemento de la colección <see cref="T:System.Collections.Generic.SortedSet`1" />.</summary>
      <returns>true si el enumerador avanzó con éxito hasta el siguiente elemento; false si el enumerador alcanzó el final de la colección.</returns>
      <exception cref="T:System.InvalidOperationException">La colección se modificó después de crear el enumerador. </exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtiene el elemento situado en la posición actual del enumerador.</summary>
      <returns>Elemento de la colección en la posición actual del enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">El enumerador se sitúa antes del primer elemento de la colección o después del último. </exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
      <exception cref="T:System.InvalidOperationException">La colección se modificó después de crear el enumerador. </exception>
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
      <summary>Representa una colección LIFO ("último en entrar, primero en salir") de tamaño variable de instancias del mismo tipo arbitrario.</summary>
      <typeparam name="T">Especifica el tipo de elementos de la pila.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Stack`1" /> que está vacía y tiene la capacidad inicial predeterminada.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Stack`1" /> que contiene elementos copiados de la colección especificada y tiene una capacidad suficiente para alojar el número de elementos copiados.</summary>
      <param name="collection">Colección de la que se van a copiar los elementos.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="collection" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Generic.Stack`1" /> que está vacía y tiene la capacidad inicial especificada o la capacidad inicial predeterminada, la que sea mayor.</summary>
      <param name="capacity">Número inicial de elementos que la colección <see cref="T:System.Collections.Generic.Stack`1" /> puede contener.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> es menor que cero.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
      <summary>Quita todos los objetos de la colección <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
      <summary>Determina si un elemento se encuentra en <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns>true si <paramref name="item" /> se encuentra en <see cref="T:System.Collections.Generic.Stack`1" />; de lo contrario, false.</returns>
      <param name="item">Objeto que se va a buscar en <see cref="T:System.Collections.Generic.Stack`1" />. El valor puede ser null para los tipos de referencia.</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
      <summary>Copia la colección <see cref="T:System.Collections.Generic.Stack`1" /> en un objeto <see cref="T:System.Array" /> unidimensional existente, a partir del índice especificado de la matriz.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.Generic.Stack`1" />. <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero de <paramref name="array" /> en el que empieza la operación de copia.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">El número de elementos en la <see cref="T:System.Collections.Generic.Stack`1" /> de origen es mayor que el espacio disponible entre el <paramref name="arrayIndex" /> y el final de la <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
      <summary>Obtiene el número de elementos incluidos en <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns>Número de elementos incluidos en <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
      <summary>Devuelve un enumerador para la propiedad <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns>Interfaz <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> para la matriz <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
      <summary>Devuelve el objeto situado al principio de <see cref="T:System.Collections.Generic.Stack`1" /> sin eliminarlo.</summary>
      <returns>Objeto situado al principio de la colección <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
      <exception cref="T:System.InvalidOperationException">El control <see cref="T:System.Collections.Generic.Stack`1" /> está vacío.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
      <summary>Quita y devuelve el objeto situado al principio de <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns>Objeto eliminado del principio de la colección <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
      <exception cref="T:System.InvalidOperationException">El control <see cref="T:System.Collections.Generic.Stack`1" /> está vacío.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
      <summary>Inserta un objeto al principio de <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <param name="item">Objeto que se va a insertar en la colección <see cref="T:System.Collections.Generic.Stack`1" />. El valor puede ser null para los tipos de referencia.</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración la colección.</summary>
      <returns>Una interfaz <see cref="T:System.Collections.Generic.IEnumerator`1" /> que se puede usar para iterar por la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos de <see cref="T:System.Collections.ICollection" /> en una matriz <see cref="T:System.Array" />, a partir de un índice determinado de <see cref="T:System.Array" />.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados desde <see cref="T:System.Collections.ICollection" />. <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero de <paramref name="array" /> en el que empieza la operación de copia.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> es menor que cero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.-O bien-<paramref name="array" /> no tiene índices de base cero.-O bien-El número de elementos en la <see cref="T:System.Collections.ICollection" /> de origen es mayor que el espacio disponible entre el <paramref name="arrayIndex" /> y el final de la <paramref name="array" /> de destino.-O bien-El tipo del objeto <see cref="T:System.Collections.ICollection" /> de origen no puede convertirse automáticamente al tipo del parámetro <paramref name="array" /> de destino.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para la ejecución de subprocesos).</summary>
      <returns>Es true si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para la ejecución de subprocesos); en caso contrario, es false.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.Stack`1" />, esta propiedad siempre devuelve false.</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso a la matriz <see cref="T:System.Collections.ICollection" />.  En la implementación predeterminada de <see cref="T:System.Collections.Generic.Stack`1" />, esta propiedad siempre devuelve la instancia actual.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Una interfaz <see cref="T:System.Collections.IEnumerator" /> que se puede usar para iterar por la colección.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
      <summary>Copia <see cref="T:System.Collections.Generic.Stack`1" /> en una nueva matriz.</summary>
      <returns>Nueva matriz que contiene copias de los elementos de <see cref="T:System.Collections.Generic.Stack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
      <summary>Establece la capacidad en el número real de elementos en la colección <see cref="T:System.Collections.Generic.Stack`1" />, si este número supone menos del 90 por ciento de la capacidad actual.</summary>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator">
      <summary>Enumera los elementos de un objeto <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
      <summary>Obtiene el elemento situado en la posición actual del enumerador.</summary>
      <returns>Elemento de <see cref="T:System.Collections.Generic.Stack`1" /> en la posición actual del enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">El enumerador se sitúa antes del primer elemento de la colección o después del último. </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
      <summary>Libera todos los recursos utilizados por <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />. </summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
      <summary>Desplaza el enumerador al siguiente elemento de la colección <see cref="T:System.Collections.Generic.Stack`1" />.</summary>
      <returns>true si el enumerador avanzó con éxito hasta el siguiente elemento; false si el enumerador alcanzó el final de la colección.</returns>
      <exception cref="T:System.InvalidOperationException">La colección se modificó después de crear el enumerador. </exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtiene el elemento situado en la posición actual del enumerador.</summary>
      <returns>Elemento de la colección en la posición actual del enumerador.</returns>
      <exception cref="T:System.InvalidOperationException">El enumerador se sitúa antes del primer elemento de la colección o después del último. </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Establece el enumerador en su posición inicial (antes del primer elemento de la colección). Esta clase no se puede heredar.</summary>
      <exception cref="T:System.InvalidOperationException">La colección se modificó después de crear el enumerador. </exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ObservableCollection`1">
      <summary>Representa una colección de datos dinámicos que proporciona notificaciones cuando se agregan o se quitan elementos o cuando se actualiza toda la lista.</summary>
      <typeparam name="T">Tipo de elementos de la colección.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
      <summary>Inicializa una nueva instancia vacía de la clase <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> y la rellena con elementos copiados de la colección especificada.</summary>
      <param name="collection">Colección de la que se copian los elementos.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="collection" /> es null.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> y la rellena con elementos copiados de la lista especificada.</summary>
      <param name="list">Lista de la que se copian los elementos.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy">
      <summary>No permite intentos reentrantes por cambiar esta colección.</summary>
      <returns>Objeto <see cref="T:System.IDisposable" /> que se puede usar para eliminar el objeto.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy">
      <summary>Comprueba si se producen intentos reentrantes por cambiar esta colección.</summary>
      <exception cref="T:System.InvalidOperationException">Se inicia esta excepción si se ha producido una llamada a <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" /> cuyo valor devuelto <see cref="T:System.IDisposable" /> aún no se ha eliminado. Normalmente, esto significa que se inicia cuando se producen intentos adicionales por cambiar esta colección durante un evento <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" />. Sin embargo, depende de cuándo las clases derivadas decidan llamar a <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
      <summary>Quita todos los elementos de la colección.</summary>
      <exception cref="T:System.InvalidOperationException">El método se invoca en un controlador de eventos <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> o <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" />. </exception>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
      <summary>Se produce cuando cambia un elemento de la colección o cuando cambia la colección completa.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary>Inserta un elemento en el índice especificado de la colección.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="item" />.</param>
      <param name="item">Objeto que se va a insertar.</param>
      <exception cref="T:System.InvalidOperationException">El método se invoca en un controlador de eventos <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> o <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)">
      <summary>Mueve el elemento situado en el índice especificado a una nueva ubicación en la colección.</summary>
      <param name="oldIndex">Índice de base cero que especifica la ubicación del elemento que se va a mover.</param>
      <param name="newIndex">Índice de base cero que especifica la nueva ubicación del elemento.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)">
      <summary>Mueve el elemento situado en el índice especificado a una nueva ubicación en la colección.</summary>
      <param name="oldIndex">Índice de base cero que especifica la ubicación del elemento que se va a mover.</param>
      <param name="newIndex">Índice de base cero que especifica la nueva ubicación del elemento.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Genera el evento <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> con los datos de evento proporcionados.</summary>
      <param name="e">Datos de evento que se van a notificar en el evento.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Genera el evento <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> con los argumentos proporcionados.</summary>
      <param name="e">Datos de evento que se van a notificar en el evento.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
      <summary>Se produce cuando cambia una propiedad de un elemento de la colección.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
      <summary>Quita de la colección un elemento situado en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
      <exception cref="T:System.InvalidOperationException">El método se invoca en un controlador de eventos <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> o <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
      <summary>Reemplaza el elemento que se encuentra en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a reemplazar.</param>
      <param name="item">Nuevo valor para el elemento situado en el índice especificado.</param>
      <exception cref="T:System.InvalidOperationException">El método se invoca en un controlador de eventos <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> o <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" />. </exception>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Se produce cuando cambia el valor de una propiedad.</summary>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1">
      <summary>Representa un objeto <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> de solo lectura.</summary>
      <typeparam name="T">Tipo de los objetos que la colección contiene.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> que actúa de contenedor para el objeto <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> especificado.</summary>
      <param name="list">Colección que se va a encapsular.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged">
      <summary>Se produce cuando se agrega o se quita un elemento.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Genera el evento <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged" />. </summary>
      <param name="args">Datos del evento.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Genera el evento <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged" />. </summary>
      <param name="args">Datos del evento.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged">
      <summary>Se produce cuando cambia el valor de una propiedad.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>Para obtener una descripción de este miembro, vea <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Para obtener una descripción de este miembro, vea <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
    </member>
    <member name="T:System.Collections.Specialized.INotifyCollectionChanged">
      <summary>Notifica a los agentes de escucha los cambios dinámicos que se producen en una colección, como cuando se agregan y se quitan elementos o cuando se restablece el objeto de colección en su totalidad.</summary>
    </member>
    <member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
      <summary>Se produce cuando cambia la lista de elementos de la colección o cuando se restablece la colección.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
      <summary>Describe la acción que generó un evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />. </summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
      <summary>Se agregaron uno o varios elementos a la colección.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move">
      <summary>Se movieron uno o varios elementos dentro de la colección.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
      <summary>Se quitaron uno o varios elementos de la colección.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
      <summary>Se reemplazaron uno o varios elementos de la colección.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
      <summary>El contenido de la colección ha cambiado significativamente.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
      <summary>Proporciona datos de evento para el evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" />, especificando el valor de <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction" />.</summary>
      <param name="action">Valor de acción como un valor de la enumeración. Este valor siempre debe ser <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />; vea la sección Comentarios.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" /> no es <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio de varios elementos.</summary>
      <param name="action">Acción que provocó el evento. Puede establecerse en <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> o <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItems">Elementos a los que afecta el cambio.</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> de varios elementos.</summary>
      <param name="action">Acción que provocó el evento. Sólo puede establecerse en <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItems">Nuevos elementos por los que se reemplazan los elementos originales.</param>
      <param name="oldItems">Elementos originales reemplazados.</param>
      <exception cref="T:System.ArgumentException">Si el valor de <paramref name="action" /> no es Replace.</exception>
      <exception cref="T:System.ArgumentNullException">Si <paramref name="oldItems" /> o <paramref name="newItems" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> de varios elementos.</summary>
      <param name="action">Acción que provocó el evento. Sólo puede establecerse en <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItems">Nuevos elementos por los que se reemplazan los elementos originales.</param>
      <param name="oldItems">Elementos originales reemplazados.</param>
      <param name="startingIndex">Índice del primer elemento de los elementos reemplazados.</param>
      <exception cref="T:System.ArgumentException">Si el valor de <paramref name="action" /> no es Replace.</exception>
      <exception cref="T:System.ArgumentNullException">Si <paramref name="oldItems" /> o <paramref name="newItems" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio de varios elementos o un cambio de <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</summary>
      <param name="action">Acción que provocó el evento. Puede establecerse en <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> o <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItems">Elementos a los que afecta el cambio.</param>
      <param name="startingIndex">Índice donde se produjo el cambio.</param>
      <exception cref="T:System.ArgumentException">Si <paramref name="action" /> no es Reset, Add o Remove, si <paramref name="action" /> es Reset y <paramref name="changedItems" /> no es null o <paramref name="startingIndex" /> no es –1, o si la acción es Add o Remove y <paramref name="startingIndex" /> es menor que -1.</exception>
      <exception cref="T:System.ArgumentNullException">Si <paramref name="action" /> es Add o Remove y <paramref name="changedItems" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> de varios elementos.</summary>
      <param name="action">Acción que provocó el evento. Sólo puede establecerse en <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />.</param>
      <param name="changedItems">Elementos a los que afecta el cambio.</param>
      <param name="index">Nuevo índice de los elementos modificados.</param>
      <param name="oldIndex">Índice anterior de los elementos modificados.</param>
      <exception cref="T:System.ArgumentException">Si <paramref name="action" /> no es Move o <paramref name="index" /> es menor que 0.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio de un elemento.</summary>
      <param name="action">Acción que provocó el evento. Puede establecerse en <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> o <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItem">Elemento al que afecta el cambio.</param>
      <exception cref="T:System.ArgumentException">Si <paramref name="action" /> no es Reset, Add o Remove, o si <paramref name="action" /> es Reset y <paramref name="changedItem" /> no es null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> o <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</summary>
      <param name="action">Valor de acción como un valor de la enumeración. Este valor debe ser <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> o <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />; vea la sección Comentarios.</param>
      <param name="changedItem">Elemento al que afecta el cambio.</param>
      <param name="index">Índice donde se produjo el cambio.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" /> no es <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> ni <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> de un elemento.</summary>
      <param name="action">Acción que provocó el evento. Sólo puede establecerse en <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />.</param>
      <param name="changedItem">Elemento al que afecta el cambio.</param>
      <param name="index">Nuevo índice del elemento modificado.</param>
      <param name="oldIndex">Índice anterior del elemento modificado.</param>
      <exception cref="T:System.ArgumentException">Si <paramref name="action" /> no es Move o <paramref name="index" /> es menor que 0.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> de un elemento.</summary>
      <param name="action">Acción que provocó el evento. Sólo puede establecerse en <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItem">Nuevo elemento por el que se reemplaza el elemento original.</param>
      <param name="oldItem">Elemento original reemplazado.</param>
      <exception cref="T:System.ArgumentException">Si el valor de <paramref name="action" /> no es Replace.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> que describe un cambio <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</summary>
      <param name="action">Valor de acción como un valor de la enumeración. Este valor debe ser <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />; vea la sección Comentarios.</param>
      <param name="newItem">Nuevo elemento por el que se reemplaza el elemento original.</param>
      <param name="oldItem">Elemento original reemplazado.</param>
      <param name="index">Índice del elemento reemplazado.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" /> no es <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</exception>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
      <summary>Obtiene la descripción de la acción que produjo el evento. </summary>
      <returns>Descripción de la acción que produjo el evento, como un valor de la enumeración.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
      <summary>Obtiene los elementos que se han visto afectados por una acción.</summary>
      <returns>Lista de los elementos que se han visto afectados por una acción. El valor predeterminado es null.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
      <summary>Obtiene el índice donde se produjo el cambio.</summary>
      <returns>Índice donde se produjo el cambio.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
      <summary>Obtiene el elemento que se ha visto afectado por una acción <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> o <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</summary>
      <returns>Lista de los elementos que se han visto afectados por una acción <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> o <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
      <summary>Obtiene el índice donde se produjo el cambio como consecuencia de una acción <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> o <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</summary>
      <returns>Índice donde se produjo el cambio como consecuencia de una acción <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> o <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</returns>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
      <summary>Representa el método que controla los eventos que implementan el evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
      <param name="sender">Objeto que provocó el evento.</param>
      <param name="e">Datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventArgs">
      <summary>Proporciona datos para el evento MethodNameCompleted. </summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />.</summary>
      <param name="error">Cualquier error que se haya producido durante la operación asincrónica.</param>
      <param name="cancelled">Valor que indica si se canceló la operación asincrónica.</param>
      <param name="userState">Objeto de estado opcional proporcionado por el usuario que se utiliza para identificar la tarea que generó el evento Completed.</param>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
      <summary>Obtiene un valor que indica si se ha cancelado una operación asincrónica.</summary>
      <returns>Es true si se ha cancelado la operación asíncrona; en caso contrario, es false.El valor predeterminado es false.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
      <summary>Obtiene un valor que indica el error que se produjo durante una operación asincrónica.</summary>
      <returns>Instancia de <see cref="T:System.Exception" />, si se ha producido un error durante una operación asincrónica; de lo contrario, null.</returns>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
      <summary>Genera una excepción proporcionada por el usuario si se ha producido un error en una operación asincrónica.</summary>
      <exception cref="T:System.InvalidOperationException">La propiedad <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> es true.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">La operación asincrónica ha establecido la propiedad <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
      <summary>Obtiene el identificador único de la tarea asincrónica.</summary>
      <returns>Referencia a un objeto que identifica de forma única la tarea asincrónica; de lo contrario, null si no se ha establecido ningún valor.</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventHandler">
      <summary>Representa el método que controlará el evento nombreDeMétodoCompletado de una operación asincrónica. </summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">
        <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> que contiene datos de eventos.</param>
    </member>
    <member name="T:System.ComponentModel.AsyncOperation">
      <summary>Realiza un seguimiento de la duración de una operación asincrónica. </summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.OperationCompleted">
      <summary>Pone fin a la duración de una operación asincrónica.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> se ha llamado previamente para esta tarea.</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Invoca un delegado en el subproceso o contexto adecuado para el modelo de aplicaciones.</summary>
      <param name="d">Objeto <see cref="T:System.Threading.SendOrPostCallback" /> que contiene el delegado al que se va a llamar cuando finalice la operación.</param>
      <param name="arg">Argumento del delegado que va incluido en el parámetro <paramref name="d" />.</param>
      <exception cref="T:System.InvalidOperationException">Se ha llamado anteriormente al método <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> para esta tarea.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> es null.</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
      <summary>Pone fin a la duración de una operación asincrónica.</summary>
      <param name="d">Objeto <see cref="T:System.Threading.SendOrPostCallback" /> que contiene el delegado al que se va a llamar cuando finalice la operación.</param>
      <param name="arg">Argumento del delegado que va incluido en el parámetro <paramref name="d" />.</param>
      <exception cref="T:System.InvalidOperationException">Se ha llamado anteriormente al método <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> para esta tarea.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> es null.</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
      <summary>Obtiene el objeto <see cref="T:System.Threading.SynchronizationContext" /> que se pasó al constructor cuando <see cref="T:System.ComponentModel.AsyncOperationManager" /> lo creó.</summary>
      <returns>Objeto <see cref="T:System.Threading.SynchronizationContext" /> que se ha pasado al constructor.</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
      <summary>Obtiene un objeto que se utiliza para identificar de forma única una operación asincrónica.</summary>
      <returns>Objeto de estado que se ha pasado a la invocación al método asincrónico.</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncOperationManager">
      <summary>Proporciona administración de simultaneidad para las clases que admiten llamadas de métodos asincrónicos.Esta clase no se puede heredar.</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
      <summary>Devuelve un objeto <see cref="T:System.ComponentModel.AsyncOperation" /> para realizar un seguimiento de la duración de una operación asincrónica determinada.</summary>
      <returns>Objeto <see cref="T:System.ComponentModel.AsyncOperation" /> que se puede utilizar para realizar un seguimiento de la duración de una invocación a un método asincrónico.</returns>
      <param name="userSuppliedState">Objeto que se utiliza para asociar un fragmento de estado del cliente, como un identificador de tarea, a una operación asincrónica concreta.</param>
    </member>
    <member name="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
      <summary>Obtiene o establece el valor de <see cref="T:System.Threading.SynchronizationContext" /> de la operación asincrónica.</summary>
      <returns>
        <see cref="T:System.Threading.SynchronizationContext" /> de la operación asincrónica.</returns>
    </member>
    <member name="T:System.ComponentModel.BackgroundWorker">
      <summary>Ejecuta una operación en un subproceso independiente.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.BackgroundWorker" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.CancelAsync">
      <summary>Solicita la cancelación de una operación en segundo plano pendiente.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> es false. </exception>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.CancellationPending">
      <summary>Obtiene un valor que indica si la aplicación ha solicitado la cancelación de una operación en segundo plano.</summary>
      <returns>true si la aplicación ha solicitado la cancelación de una operación en segundo plano; de lo contrario, false.El valor predeterminado es false.</returns>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.DoWork">
      <summary>Se produce cuando se llama a <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />.</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.IsBusy">
      <summary>Obtiene un valor que indica si <see cref="T:System.ComponentModel.BackgroundWorker" /> está ejecutando una operación en segundo plano.</summary>
      <returns>true si <see cref="T:System.ComponentModel.BackgroundWorker" /> está ejecutando una operación en segundo plano; de lo contrario, false.</returns>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
      <summary>Provoca el evento <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</summary>
      <param name="e">
        <see cref="T:System.ComponentModel.DoWorkEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
      <summary>Provoca el evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
      <param name="e">
        <see cref="T:System.ComponentModel.ProgressChangedEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
      <summary>Provoca el evento <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />.</summary>
      <param name="e">
        <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
      <summary>Se produce cuando se llama a <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
      <summary>Provoca el evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
      <param name="percentProgress">Porcentaje, de 0 a 100, de la operación en segundo plano que se completa.</param>
      <exception cref="T:System.InvalidOperationException">El valor de la propiedad <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> se establece en false. </exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
      <summary>Provoca el evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
      <param name="percentProgress">Porcentaje, de 0 a 100, de la operación en segundo plano que se completa.</param>
      <param name="userState">Objeto de estado que se ha pasado a <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />.</param>
      <exception cref="T:System.InvalidOperationException">El valor de la propiedad <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> se establece en false. </exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
      <summary>Inicia la ejecución de una operación en segundo plano.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> es true.</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
      <summary>Inicia la ejecución de una operación en segundo plano e incluye un parámetro para que lo utilice la operación en segundo plano.</summary>
      <param name="argument">Parámetro que utiliza la operación en segundo plano en el controlador de eventos <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> es true.</exception>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
      <summary>Se produce cuando la operación en segundo plano se ha completado, se ha cancelado o ha producido una excepción.</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
      <summary>Obtiene o establece un valor que indica si <see cref="T:System.ComponentModel.BackgroundWorker" /> puede notificar las actualizaciones de progreso.</summary>
      <returns>true si <see cref="T:System.ComponentModel.BackgroundWorker" /> admite las actualizaciones de progreso; de lo contrario, false.El valor predeterminado es false.</returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
      <summary>Obtiene o establece un valor que indica si <see cref="T:System.ComponentModel.BackgroundWorker" /> admite la cancelación asincrónica.</summary>
      <returns>true si <see cref="T:System.ComponentModel.BackgroundWorker" /> admite la cancelación; de lo contrario, false.El valor predeterminado es false.</returns>
    </member>
    <member name="T:System.ComponentModel.BrowsableAttribute">
      <summary>Especifica si una propiedad o evento debe mostrarse en una ventana Propiedades.</summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.BrowsableAttribute" />.</summary>
      <param name="browsable">true si se puede modificar una propiedad o un evento en tiempo de diseño; de lo contrario, false.El valor predeterminado es true.</param>
    </member>
    <member name="P:System.ComponentModel.BrowsableAttribute.Browsable">
      <summary>Obtiene un valor que indica si un objeto se puede examinar.</summary>
      <returns>true si el objeto es examinable; en caso contrario, false.</returns>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Default">
      <summary>Especifica el valor predeterminado de <see cref="T:System.ComponentModel.BrowsableAttribute" />, que es <see cref="F:System.ComponentModel.BrowsableAttribute.Yes" />.Este campo static es de solo lectura.</summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.Equals(System.Object)">
      <summary>Indica si esta instancia y un objeto especificado son iguales.</summary>
      <returns>Es true si <paramref name="obj" /> es igual a esta instancia; de lo contrario, es false.</returns>
      <param name="obj">Otro objeto con el que se va a realizar la comparación. </param>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.No">
      <summary>Especifica que no se puede modificar una propiedad o un evento en tiempo de diseño.Este campo static es de solo lectura.</summary>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Yes">
      <summary>Especifica que se puede modificar una propiedad o un evento en tiempo de diseño.Este campo static es de solo lectura.</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventArgs">
      <summary>Proporciona datos para un evento cancelable.</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.CancelEventArgs" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.CancelEventArgs" /> que tiene la propiedad <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> establecida en el valor dado.</summary>
      <param name="cancel">true para cancelar la operación; de lo contrario, false.</param>
    </member>
    <member name="P:System.ComponentModel.CancelEventArgs.Cancel">
      <summary>Obtiene o establece un valor que indica si se debe cancelar la operación.</summary>
      <returns>Es true si se debe cancelar la operación; en caso contrario, es false.</returns>
    </member>
    <member name="T:System.ComponentModel.CategoryAttribute">
      <summary>Especifica el nombre de la categoría en la que se agrupa la propiedad o el evento cuando se muestra en un control de cuadrícula de propiedades establecido en el modo Por categorías.</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.CategoryAttribute" /> utilizando el nombre de categoría Default.</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.CategoryAttribute" /> utilizando el nombre de categoría especificado.</summary>
      <param name="category">Nombre de la categoría. </param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Action">
      <summary>Obtiene un objeto <see cref="T:System.ComponentModel.CategoryAttribute" /> que representa la categoría Action.</summary>
      <returns>El atributo <see cref="T:System.ComponentModel.CategoryAttribute" /> correspondiente a la categoría de acción.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Appearance">
      <summary>Obtiene un objeto <see cref="T:System.ComponentModel.CategoryAttribute" /> que representa la categoría Appearance.</summary>
      <returns>El atributo <see cref="T:System.ComponentModel.CategoryAttribute" /> correspondiente a la categoría de apariencia.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Asynchronous">
      <summary>Obtiene un objeto <see cref="T:System.ComponentModel.CategoryAttribute" /> que representa la categoría Asynchronous.</summary>
      <returns>El atributo <see cref="T:System.ComponentModel.CategoryAttribute" /> correspondiente a la categoría de asíncrono.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Behavior">
      <summary>Obtiene un objeto <see cref="T:System.ComponentModel.CategoryAttribute" /> que representa la categoría Behavior.</summary>
      <returns>El atributo <see cref="T:System.ComponentModel.CategoryAttribute" /> correspondiente a la categoría de comportamiento.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Category">
      <summary>Obtiene el nombre de la categoría correspondiente a la propiedad o al evento a los que se aplica este atributo.</summary>
      <returns>Nombre de la categoría correspondiente a la propiedad o al evento a los que se aplica este atributo.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Data">
      <summary>Obtiene un objeto <see cref="T:System.ComponentModel.CategoryAttribute" /> que representa la categoría Data.</summary>
      <returns>El atributo <see cref="T:System.ComponentModel.CategoryAttribute" /> correspondiente a la categoría de datos.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Default">
      <summary>Obtiene un objeto <see cref="T:System.ComponentModel.CategoryAttribute" /> que representa la categoría Default.</summary>
      <returns>El atributo <see cref="T:System.ComponentModel.CategoryAttribute" /> correspondiente a la categoría predeterminada.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Design">
      <summary>Obtiene un objeto <see cref="T:System.ComponentModel.CategoryAttribute" /> que representa la categoría Design.</summary>
      <returns>El atributo <see cref="T:System.ComponentModel.CategoryAttribute" /> correspondiente a la categoría de diseño.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.DragDrop">
      <summary>Obtiene un objeto <see cref="T:System.ComponentModel.CategoryAttribute" /> que representa la categoría DragDrop.</summary>
      <returns>El atributo <see cref="T:System.ComponentModel.CategoryAttribute" /> de la categoría de arrastrar y colocar.</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el valor del objeto especificado es igual al atributo <see cref="T:System.ComponentModel.CategoryAttribute" /> actual.</summary>
      <returns>Es true si el valor del objeto especificado es igual al atributo <see cref="T:System.ComponentModel.CategoryAttribute" /> actual; de lo contrario, es false.</returns>
      <param name="obj">Objeto que contiene el valor cuya equivalencia se va a comprobar. </param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Focus">
      <summary>Obtiene un objeto <see cref="T:System.ComponentModel.CategoryAttribute" /> que representa la categoría Focus.</summary>
      <returns>El atributo <see cref="T:System.ComponentModel.CategoryAttribute" /> correspondiente a la categoría de foco.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Format">
      <summary>Obtiene un objeto <see cref="T:System.ComponentModel.CategoryAttribute" /> que representa la categoría Format.</summary>
      <returns>El atributo <see cref="T:System.ComponentModel.CategoryAttribute" /> correspondiente a la categoría de formato.</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetHashCode">
      <summary>Devuelve el código hash de este atributo.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)">
      <summary>Busca el nombre traducido de la categoría especificada.</summary>
      <returns>El nombre traducido de la categoría o null si no existe ninguno.</returns>
      <param name="value">Identificador de la categoría que se busca. </param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Key">
      <summary>Obtiene un objeto <see cref="T:System.ComponentModel.CategoryAttribute" /> que representa la categoría Key.</summary>
      <returns>El atributo <see cref="T:System.ComponentModel.CategoryAttribute" /> correspondiente a la categoría de teclado.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Layout">
      <summary>Obtiene un objeto <see cref="T:System.ComponentModel.CategoryAttribute" /> que representa la categoría Layout.</summary>
      <returns>El atributo <see cref="T:System.ComponentModel.CategoryAttribute" /> correspondiente a la categoría de presentación.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Mouse">
      <summary>Obtiene un objeto <see cref="T:System.ComponentModel.CategoryAttribute" /> que representa la categoría Mouse.</summary>
      <returns>El atributo <see cref="T:System.ComponentModel.CategoryAttribute" /> correspondiente a la categoría de mouse.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.WindowStyle">
      <summary>Obtiene un objeto <see cref="T:System.ComponentModel.CategoryAttribute" /> que representa la categoría WindowStyle.</summary>
      <returns>El atributo <see cref="T:System.ComponentModel.CategoryAttribute" /> correspondiente a la categoría de estilo de ventana.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentCollection">
      <summary>Obtiene un componente específico del contenedor.</summary>
    </member>
    <member name="T:System.ComponentModel.DataErrorsChangedEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DataErrorsChangedEventArgs.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DataErrorsChangedEventArgs" />. </summary>
      <param name="propertyName">Nombre de la propiedad para la que han cambiado los errores, o null o <see cref="F:System.String.Empty" /> para los errores de nivel de entidad.</param>
    </member>
    <member name="P:System.ComponentModel.DataErrorsChangedEventArgs.PropertyName">
      <summary>Obtiene el nombre de la propiedad para la que han cambiado los errores o null o <see cref="F:System.String.Empty" /> para los errores de nivel de entidad.</summary>
      <returns>Nombre de la propiedad afectada o null o <see cref="F:System.String.Empty" /> para los errores de nivel de entidad.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
      <summary>Especifica el valor predeterminado de una propiedad.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" /> mediante un valor <see cref="T:System.Boolean" />.</summary>
      <param name="value">
        <see cref="T:System.Boolean" /> que es el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" /> mediante un entero de 8 bits sin signo.</summary>
      <param name="value">Entero de 8 bits sin signo que es el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" /> mediante un carácter Unicode.</summary>
      <param name="value">Carácter Unicode que es el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" /> mediante un número de punto flotante de precisión doble.</summary>
      <param name="value">Número de punto flotante de precisión doble que es el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" /> mediante un entero de 16 bits con signo.</summary>
      <param name="value">Entero de 16 bits con signo que es el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" /> mediante un entero de 32 bits con signo.</summary>
      <param name="value">Entero de 32 bits con signo que es el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" /> mediante un entero de 64 bits con signo.</summary>
      <param name="value">Entero de 64 bits con signo que es el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" />.</summary>
      <param name="value">
        <see cref="T:System.Object" /> que representa el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" /> mediante un número de punto flotante de precisión sencilla.</summary>
      <param name="value">Número de punto flotante de precisión sencilla que es el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" /> utilizando un objeto <see cref="T:System.String" />.</summary>
      <param name="value">
        <see cref="T:System.String" /> que es el valor predeterminado. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DefaultValueAttribute" />, convirtiendo el valor especificado en el tipo especificado, y utilizando una referencia cultural invariable como contexto de conversión.</summary>
      <param name="type">
        <see cref="T:System.Type" /> que representa el tipo al que se va a convertir el valor. </param>
      <param name="value">Un objeto <see cref="T:System.String" /> que se puede convertir al tipo mediante el objeto <see cref="T:System.ComponentModel.TypeConverter" /> correspondiente al tipo y a la referencia cultural deEE.UU.</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.Equals(System.Object)">
      <summary>Indica si el valor del objeto especificado es igual al <see cref="T:System.ComponentModel.DefaultValueAttribute" /> actual.</summary>
      <returns>Es true si el valor del objeto especificado es igual al del actual; de lo contrario, es false.</returns>
      <param name="obj">Objeto que contiene el valor cuya equivalencia se va a comprobar. </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.GetHashCode"></member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.SetValue(System.Object)">
      <summary>Establece el valor predeterminado de la propiedad a la que está enlazado este atributo.</summary>
      <param name="value">Valor predeterminado.</param>
    </member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
      <summary>Obtiene el valor predeterminado de la propiedad a la que está enlazado este atributo.</summary>
      <returns>
        <see cref="T:System.Object" /> que representa el valor predeterminado de la propiedad a la que está enlazado este atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.DescriptionAttribute">
      <summary>Especifica una descripción para una propiedad o para un evento.</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DescriptionAttribute" /> sin ningún parámetro.</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DescriptionAttribute" /> con una descripción.</summary>
      <param name="description">El texto de la descripción. </param>
    </member>
    <member name="F:System.ComponentModel.DescriptionAttribute.Default">
      <summary>Especifica el valor predeterminado de <see cref="T:System.ComponentModel.DescriptionAttribute" />, que es una cadena vacía ("").Este campo static es de solo lectura.</summary>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.Description">
      <summary>Obtiene la descripción almacenada en este atributo.</summary>
      <returns>La descripción almacenada en este atributo.</returns>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.DescriptionValue">
      <summary>Obtiene o establece la cadena almacenada como descripción.</summary>
      <returns>La cadena almacenada como descripción.El valor predeterminado es una cadena vacía ("").</returns>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el valor del objeto especificado es igual al atributo <see cref="T:System.ComponentModel.DescriptionAttribute" /> actual.</summary>
      <returns>Es true si el valor del objeto especificado es igual al atributo <see cref="T:System.ComponentModel.DescriptionAttribute" /> actual; de lo contrario, es false.</returns>
      <param name="obj">Objeto que contiene el valor cuya equivalencia se va a comprobar. </param>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.GetHashCode"></member>
    <member name="T:System.ComponentModel.DoWorkEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.DoWorkEventArgs" />.</summary>
      <param name="argument">Especifica un argumento para una operación asincrónica.</param>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Argument">
      <summary>Obtiene un valor que representa el argumento de una operación asincrónica.</summary>
      <returns>
        <see cref="T:System.Object" /> que representa el argumento de una operación asincrónica.</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Cancel">
      <summary>Obtiene o establece un valor que indica si se ha cancelado la operación asincrónica.</summary>
      <returns>Es true si se ha cancelado la operación; en caso contrario, es false.El valor predeterminado es false.</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Result">
      <summary>Obtiene o establece un valor que representa el resultado de una operación asincrónica.</summary>
      <returns>
        <see cref="T:System.Object" /> que representa el resultado de una operación asincrónica.</returns>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventHandler">
      <summary>Representa el método que controla el evento <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> que se genera cuando se llama al método <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />.</summary>
      <param name="sender">Origen del evento. </param>
      <param name="e">
        <see cref="T:System.ComponentModel.DoWorkEventArgs" /> que contiene los datos del evento. </param>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
      <summary>Especifica que una propiedad o un método puede verse en un editor.Esta clase no se puede heredar.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.EditorBrowsableAttribute" />, con <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> establecido en el estado predeterminado.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> con <see cref="T:System.ComponentModel.EditorBrowsableState" />.</summary>
      <param name="state">Objeto <see cref="T:System.ComponentModel.EditorBrowsableState" /> que se va a establecer para <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" />. </param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
      <summary>Devuelve un valor que indica si el valor del objeto especificado es igual al atributo <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> actual.</summary>
      <returns>Es true si el valor del objeto especificado es igual al del actual; de lo contrario, es false.</returns>
      <param name="obj">Objeto que contiene el valor cuya equivalencia se va a comprobar. </param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.GetHashCode"></member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
      <summary>Obtiene el estado examinable de la propiedad o del método.</summary>
      <returns>
        <see cref="T:System.ComponentModel.EditorBrowsableState" /> que es el estado examinable de la propiedad o del método.</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
      <summary>Especifica el estado examinable de una propiedad o método desde un editor. </summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
      <summary>La propiedad o el método es una característica que sólo deben ver los usuarios avanzados.Un editor puede mostrar u ocultar dichas propiedades.</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
      <summary>La propiedad o el método siempre puede examinarse desde un editor.</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
      <summary>La propiedad o el método jamás puede examinarse desde un editor.</summary>
    </member>
    <member name="T:System.ComponentModel.IChangeTracking">
      <summary>Define el mecanismo para consultar los cambios realizados en el objeto y para restablecer el estado cambiado. </summary>
    </member>
    <member name="M:System.ComponentModel.IChangeTracking.AcceptChanges">
      <summary>Restablece el estado del objeto a inalterado aceptando las modificaciones. </summary>
    </member>
    <member name="P:System.ComponentModel.IChangeTracking.IsChanged">
      <summary>Obtiene el estado cambiado del objeto.</summary>
      <returns>Es true si el contenido del objeto ha cambiado desde la última llamada al método <see cref="M:System.ComponentModel.IChangeTracking.AcceptChanges" />; de lo contrario, es false. </returns>
    </member>
    <member name="T:System.ComponentModel.IComponent">
      <summary>Cuando la implementa una clase, esta interfaz obtiene o establece la interfaz <see cref="T:System.ComponentModel.ISite" /> asociada al componente.</summary>
    </member>
    <member name="E:System.ComponentModel.IComponent.Disposed">
      <summary>Agrega un controlador de eventos para escuchar el evento Disposed en el componente.</summary>
    </member>
    <member name="P:System.ComponentModel.IComponent.Site">
      <summary>Cuando la implementa una clase, esta interfaz obtiene o establece la interfaz <see cref="T:System.ComponentModel.ISite" /> asociada al componente.</summary>
      <returns>El <see cref="T:System.ComponentModel.ISite" /> asociado con el componente.</returns>
    </member>
    <member name="T:System.ComponentModel.IContainer">
      <summary>Proporciona funcionalidad para contenedores.Los contenedores son objetos que contienen cero o más componentes de forma lógica.</summary>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent)">
      <summary>Agrega un componente al contenedor.</summary>
      <param name="component">Componente que se va a agregar.</param>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent,System.String)">
      <summary>Agrega un componente al contenedor.</summary>
      <param name="component">Componente que se va a agregar.</param>
      <param name="name">Nombre que identifica el componente.</param>
    </member>
    <member name="P:System.ComponentModel.IContainer.Components">
      <summary>Obtiene todos los componentes de <see cref="T:System.ComponentModel.IContainer" />.</summary>
      <returns>Colección de componentes de <see cref="T:System.ComponentModel.IContainer" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IContainer.Remove(System.ComponentModel.IComponent)">
      <summary>Quita un componente del contenedor.</summary>
      <param name="component">Componente que se va a quitar.</param>
    </member>
    <member name="T:System.ComponentModel.IEditableObject">
      <summary>Representa un objeto que tiene un modo de edición y la capacidad para confirmar o revertir los cambios. </summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.BeginEdit">
      <summary>Hace que el objeto entre en modo de edición.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.CancelEdit">
      <summary>Hace que el objeto salga del modo de edición y se revierta al valor anterior no modificado.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.EndEdit">
      <summary>Hace que el objeto salga del modo de edición y confirme el valor modificado.</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyDataErrorInfo">
      <summary>Define los miembros que las clases de entidad de datos pueden implementar para proporcionar compatibilidad con la validación sincrónica y asincrónica personalizada.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged">
      <summary>Se produce cuando cambian los errores de validación de una propiedad o de toda la entidad. </summary>
    </member>
    <member name="M:System.ComponentModel.INotifyDataErrorInfo.GetErrors(System.String)">
      <summary>Obtiene los errores de validación de la propiedad especificada o de toda la entidad.</summary>
      <returns>Errores de validación de la propiedad o de la entidad.</returns>
      <param name="propertyName">Nombre de la propiedad cuyos errores de validación se van a recuperar; o null o <see cref="F:System.String.Empty" /> para recuperar los errores de nivel de entidad.</param>
    </member>
    <member name="P:System.ComponentModel.INotifyDataErrorInfo.HasErrors">
      <summary>Obtiene un valor que indica si la entidad tiene errores de validación. </summary>
      <returns>Es true si la entidad tiene errores de validación; de lo contrario, es false.</returns>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanged">
      <summary>Notifica a los clientes que un valor de propiedad ha cambiado.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
      <summary>Se produce cuando cambia el valor de una propiedad.</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanging">
      <summary>Define un evento para notificar a los clientes que un valor de propiedad está cambiando.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging">
      <summary>Se produce cuando un valor de propiedad está cambiando.</summary>
    </member>
    <member name="T:System.ComponentModel.IRevertibleChangeTracking">
      <summary>Proporciona compatibilidad para deshacer los cambios.</summary>
    </member>
    <member name="M:System.ComponentModel.IRevertibleChangeTracking.RejectChanges">
      <summary>Restablece el estado del objeto a inalterado rechazando las modificaciones. </summary>
    </member>
    <member name="T:System.ComponentModel.ISite">
      <summary>Proporciona la funcionalidad requerida por los sitios.Los sitios enlazan un componente a un contenedor y permiten la comunicación entre ambos, además de proporcionar al contenedor un medio para administrar sus componentes.</summary>
    </member>
    <member name="P:System.ComponentModel.ISite.Component">
      <summary>Cuando la implementa una clase, esta propiedad obtiene el componente asociado a la interfaz <see cref="T:System.ComponentModel.ISite" />.</summary>
      <returns>El componente asociado al <see cref="T:System.ComponentModel.ISite" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Container">
      <summary>Cuando la implementa mediante una clase, esta propiedad obtiene el contenedor asociado a la interfaz <see cref="T:System.ComponentModel.ISite" />.</summary>
      <returns>Contenedor asociado a la interfaz <see cref="T:System.ComponentModel.ISite" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.DesignMode">
      <summary>Cuando la implementa una clase, esta propiedad determina si el componente se encuentra en modo de diseño.</summary>
      <returns>Es true si está en modo de diseño; en caso contrario, es false.</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Name">
      <summary>Cuando la implementa una clase, esta propiedad obtiene o establece el nombre del componente asociado a la interfaz <see cref="T:System.ComponentModel.ISite" />.</summary>
      <returns>Nombre del componente.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>Proporciona información de contexto a un convertidor de tipos o un editor de valores de modo que puedan realizar una conversión.</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>Obtiene el contenedor con el conjunto de objetos para este formateador.</summary>
      <returns>Contenedor con el conjunto de objetos para este formateador.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>Obtiene la instancia que está invocando el método en el objeto de formateador.</summary>
      <returns>Instancia que está invocando el método en el objeto de formateador.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>Provoca el evento <see cref="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>Obtiene un valor que indica si se puede cambiar este objeto.</summary>
      <returns>true si se puede cambiar este objeto; en caso contrario, false.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>Obtiene el objeto <see cref="T:System.ComponentModel.PropertyDescriptor" /> que expone el elemento de contexto especificado.</summary>
      <returns>Objeto <see cref="T:System.ComponentModel.PropertyDescriptor" /> que expone el elemento de contexto especificado.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>Especifica la dirección de una operación de ordenación.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>Ordena de manera ascendente.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>Ordena de manera descendente.</summary>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />.</summary>
      <param name="progressPercentage">Porcentaje de una operación asincrónica que se ha completado.</param>
      <param name="userState">Estado de usuario único.</param>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">
      <summary>Obtiene el porcentaje de una operación asincrónica que se ha completado.</summary>
      <returns>Valor porcentual que indica el progreso de la operación asincrónica.</returns>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.UserState">
      <summary>Obtiene un estado de usuario único.</summary>
      <returns>Objeto <see cref="T:System.Object" /> único que indica el estado del usuario.</returns>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventHandler">
      <summary>Representa el método que controla el evento <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> que se genera cuando <see cref="T:System.ComponentModel.BackgroundWorker" /> notifica el progreso.</summary>
      <param name="sender">Origen del evento. </param>
      <param name="e">
        <see cref="T:System.ComponentModel.ProgressChangedEventArgs" /> que contiene los datos del evento. </param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />.</summary>
      <param name="propertyName">Nombre de la propiedad modificada. </param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName">
      <summary>Obtiene el nombre de la propiedad modificada.</summary>
      <returns>Nombre de la propiedad que ha cambiado; <see cref="F:System.String.Empty" /> o null si han cambiado todas las propiedades.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventHandler">
      <summary>Representa el método que controlará el evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
      <param name="sender">Origen del evento. </param>
      <param name="e">
        <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> que contiene los datos del evento. </param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangingEventArgs.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.PropertyChangingEventArgs" />.</summary>
      <param name="propertyName">Nombre de la propiedad que cambia.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangingEventArgs.PropertyName">
      <summary>Obtiene el nombre de la propiedad que cambia.</summary>
      <returns>Nombre de la propiedad que cambia.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventHandler">
      <summary>Representa un método que controlará el evento <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" />.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Datos del evento.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>Proporciona una descripción de una propiedad.</summary>
    </member>
    <member name="T:System.ComponentModel.ReadOnlyAttribute">
      <summary>Especifica si la propiedad a la que se aplica este atributo es de solo lectura o de lectura y escritura.</summary>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.ReadOnlyAttribute" />.</summary>
      <param name="isReadOnly">true para mostrar que la propiedad a la que se aplica este atributo es de solo lectura; false para mostrar que la propiedad es de lectura y escritura.</param>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)">
      <summary>Devuelve si esta instancia y un objeto especificado son iguales.</summary>
      <returns>Es true si <paramref name="obj" /> es igual a esta instancia; de lo contrario, es false. </returns>
      <param name="obj">Objeto con el que se va a comparar. </param>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.GetHashCode">
      <summary>Devuelve el código hash de esta instancia. </summary>
      <returns>Código hash para el objeto <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> actual.</returns>
    </member>
    <member name="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
      <summary>Obtiene un valor que indica si la propiedad a la que se aplica este atributo es de solo lectura. </summary>
      <returns>true si la propiedad a la que se aplica este atributo es de solo lectura; false si es de lectura y escritura. </returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventArgs">
      <summary>Proporciona datos para el evento <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />.</summary>
    </member>
    <member name="M:System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" />.</summary>
      <param name="result">Resultado de la operación asincrónica.</param>
      <param name="error">Cualquier error que se haya producido durante la operación asincrónica.</param>
      <param name="cancelled">Valor que indica si se canceló la operación asincrónica.</param>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result">
      <summary>Obtiene un valor que representa el resultado de una operación asincrónica.</summary>
      <returns>
        <see cref="T:System.Object" /> que representa el resultado de una operación asincrónica.</returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventHandler">
      <summary>Representa el método que controla el evento <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />, que se genera cuando la operación realizada por <see cref="T:System.ComponentModel.BackgroundWorker" /> se ha completado, se ha cancelado o ha producido una excepción.</summary>
      <param name="sender">Origen del evento. </param>
      <param name="e">
        <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" /> que contiene los datos del evento. </param>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>Proporciona una manera unificada de convertir tipos de valores en otros tipos.<see cref="T:System.ComponentModel.TypeConverter" /> normalmente admite la conversión de una cadena en un objeto, ya sea para los editores de propiedades en entornos de diseño o para habilitar los usos de XAML.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeConverter" />. </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Devuelve un valor que indica si el convertidor de tipos puede convertir un objeto del tipo especificado al tipo de este convertidor.</summary>
      <returns>true si este convertidor puede realizar la conversión; en caso contrario, false.</returns>
      <param name="context">Objeto que proporciona un contexto de formato.</param>
      <param name="sourceType">Tipo desde el que se desea convertir.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>Devuelve un valor que indica si el convertidor de tipos puede convertir un objeto del tipo especificado al tipo de este convertidor.</summary>
      <returns>true si este convertidor puede realizar la conversión; en caso contrario, false.</returns>
      <param name="sourceType">Tipo desde el que se desea convertir.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Devuelve un valor que indica si el convertidor de tipos puede convertir un objeto al tipo especificado. </summary>
      <returns>true si este convertidor puede realizar la conversión; en caso contrario, false.</returns>
      <param name="context">Objeto que proporciona un contexto de formato.</param>
      <param name="destinationType">Tipo al que se desea convertir.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>Devuelve un valor que indica si el convertidor de tipos puede convertir un objeto al tipo especificado. </summary>
      <returns>true si este convertidor puede realizar la conversión; en caso contrario, false.</returns>
      <param name="destinationType">Tipo al que se desea convertir.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Convierte el valor especificado en el tipo de conversión deseado del convertidor.</summary>
      <returns>El valor convertido.</returns>
      <param name="context">Objeto que proporciona un contexto de formato. </param>
      <param name="culture">Objeto <see cref="T:System.Globalization.CultureInfo" /> que se va a usar como referencia cultural actual. </param>
      <param name="value">Valor que se va a convertir al tipo de este convertidor.</param>
      <exception cref="T:System.NotImplementedException">
        <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> no se ha implementado en el <see cref="T:System.ComponentModel.TypeConverter" /> base.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>Convierte el valor especificado al tipo de este convertidor.</summary>
      <returns>El valor convertido.</returns>
      <param name="value">Valor que se va a convertir al tipo de este convertidor.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>Convierte el texto especificado a un objeto.</summary>
      <returns>Objeto que representa la cadena de texto convertido.</returns>
      <param name="text">Representación de texto del objeto que se va a convertir.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Convierte el objeto de valor especificado al tipo especificado.</summary>
      <returns>El objeto convertido.</returns>
      <param name="context">Objeto que proporciona un contexto de formato. </param>
      <param name="culture">Objeto <see cref="T:System.Globalization.CultureInfo" /> que se va a usar como referencia cultural actual. </param>
      <param name="value">Objeto que se va a convertir.</param>
      <param name="destinationType">Tipo en el que se va a convertir el objeto.</param>
      <exception cref="T:System.NotImplementedException">
        <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" /> no se ha implementado en el <see cref="T:System.ComponentModel.TypeConverter" /> base.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>Convierte el objeto de valor especificado al tipo especificado.</summary>
      <returns>El objeto convertido.</returns>
      <param name="value">Objeto que se va a convertir.</param>
      <param name="destinationType">Tipo en el que se va a convertir el objeto.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>Convierte el objeto especificado en una representación de cadena.</summary>
      <returns>Objeto que representa el valor convertido.</returns>
      <param name="value">Objeto que se va a convertir.</param>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>Especifica la clase que se va a utilizar como convertidor de tipos para el tipo o la propiedad a los que está enlazado este atributo.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeConverterAttribute" />. </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeConverterAttribute" /> utilizando el nombre de tipo especificado como convertidor de datos para el objeto al que este atributo está enlazado.</summary>
      <param name="typeName">Nombre completo de la clase que se utiliza para la conversión de datos del objeto al que está enlazado este atributo.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ComponentModel.TypeConverterAttribute" /> utilizando el nombre de tipo especificado como convertidor de datos para el objeto al que este atributo está enlazado.</summary>
      <param name="type">Tipo de la clase de convertidor que se va a utilizar para la conversión de datos del objeto al que está enlazado este atributo.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>Obtiene el nombre completo del tipo que se va a utilizar como convertidor del objeto al que está enlazado este atributo.</summary>
      <returns>Nombre completo del tipo que se va a utilizar como convertidor del objeto al que está enlazado este atributo, o bien una cadena vacía ("") si no existe ninguno.El valor predeterminado es una cadena vacía ("").</returns>
    </member>
    <member name="T:System.Diagnostics.Debug">
      <summary>Proporciona un conjunto de métodos y propiedades que ayudan a depurar el código.Esta clase no se puede heredar.</summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean)">
      <summary>Comprueba una condición y envía la pila de llamadas si esta es false.</summary>
      <param name="condition">Expresión condicional que se va a evaluar.Si la condición es true, no se muestra la pila de llamadas.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)">
      <summary>Comprueba una condición y muestra un mensaje especificado si la condición es false.</summary>
      <param name="condition">Expresión condicional que se va a evaluar.Si la condición es true, no se muestra el mensaje especificado.</param>
      <param name="message">Mensaje que se va a mostrar. </param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)">
      <summary>Comprueba una condición y muestra muestra dos mensajes especificados si la condición es false.</summary>
      <param name="condition">Expresión condicional que se va a evaluar.Si la condición es true, no se se muestran los mensajes especificados.</param>
      <param name="message">Mensaje que se va a mostrar. </param>
      <param name="detailMessage">Mensaje detallado que se va a mostrar. </param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])">
      <summary>Comprueba una condición y envía el mensaje y la pila de llamadas si la condición es false. </summary>
      <param name="condition">Expresión condicional que se va a evaluar.Si la condición es true, no se muestran el mensaje especificado y la pila de llamadas.</param>
      <param name="message">Mensaje que se va a mostrar.</param>
      <param name="detailMessageFormat">Cadena con formato compuesto que contiene texto mezclado con cero o más elementos de formato que corresponden a objetos de la matriz <paramref name="args" />.</param>
      <param name="args">Matriz de objetos que contiene cero o más objetos a los que se va a aplicar formato.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.Object)">
      <summary>Escribe el valor del método <see cref="M:System.Object.ToString" /> de un objeto especificado en el depurador mediante la función OutputDebugString.</summary>
      <param name="value">Objeto cuyo nombre se envía al depurador mediante la función OutputDebugString.</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String)">
      <summary>Escribe un mensaje especificado seguido de un terminador de línea en el depurador mediante la función OutputDebugString.</summary>
      <param name="message">Mensaje que se va a escribir en el depurador. </param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])">
      <summary>Escribe una cadena con formato seguida de un terminador de línea en el depurador mediante la función OutputDebugString.</summary>
      <param name="format">Cadena con formato compuesto que contiene texto mezclado con cero o más elementos de formato que corresponden a objetos de la matriz <paramref name="args" />.</param>
      <param name="args">Matriz de objetos que contiene cero o más objetos a los que se va a aplicar formato. </param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)">
      <summary>Escribe un mensaje especificado seguido de un terminador de línea en el depurador mediante la función OutputDebugString si una condición es true.</summary>
      <param name="condition">Expresión condicional que se va a evaluar.Si la condición es true, el mensaje especificado se escribe en el depurador.</param>
      <param name="message">Mensaje que se va a escribir en el depurador. </param>
    </member>
    <member name="T:System.Diagnostics.Stopwatch">
      <summary>Proporciona un conjunto de métodos y propiedades que se pueden utilizar para medir de forma precisa el tiempo transcurrido.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.#ctor">
      <summary>Crea una nueva instancia de la clase <see cref="T:System.Diagnostics.Stopwatch" />.</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.Elapsed">
      <summary>Obtiene el tiempo total transcurrido medido por la instancia actual.</summary>
      <returns>Devuelve <see cref="T:System.TimeSpan" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
      <summary>Obtiene el tiempo total transcurrido medido por la instancia actual, en milisegundos.</summary>
      <returns>Devuelve <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
      <summary>Obtiene el tiempo total transcurrido medido por la instancia actual, en pasos del temporizador.</summary>
      <returns>Devuelve <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.Frequency">
      <summary>Obtiene la frecuencia del temporizador como el número de pasos por segundo. Este campo es de solo lectura.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetElapsedDateTimeTicks">
      <summary>Obtiene el número de pasos que representan la fecha y hora de esta instancia.</summary>
      <returns>Devuelve <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetRawElapsedTicks">
      <summary>Obtiene el tiempo total transcurrido medido por la instancia actual, en pasos del temporizador.</summary>
      <returns>Devuelve <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetTimestamp">
      <summary>Obtiene el número de pasos actual del mecanismo del temporizador.</summary>
      <returns>Devuelve <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.IsHighResolution">
      <summary>Indica si el temporizador está basado en un contador de rendimiento de alta resolución. Este campo es de solo lectura.</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.IsRunning">
      <summary>Obtiene un valor que indica si el temporizador Stopwatch se está ejecutando.</summary>
      <returns>Devuelve <see cref="T:System.Boolean" />.true si la instancia de Stopwatch se está ejecutando en ese momento y midiendo el tiempo transcurrido para un intervalo; en caso contrario, devuelve false. </returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Reset">
      <summary>Detiene la medición del intervalo de tiempo y restablece el tiempo transcurrido a cero.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Restart">
      <summary>Detiene la medición del intervalo de tiempo, restablece el tiempo transcurrido para llegar a cero y comienza a medir el tiempo transcurrido.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Start">
      <summary>Inicia o reanuda la medición del tiempo transcurrido para un intervalo.</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.StartNew">
      <summary>Inicializa una nueva instancia de Stopwatch, establece la propiedad de tiempo transcurrido en cero e inicia la medición de tiempo transcurrido.</summary>
      <returns>Devuelve <see cref="T:System.Diagnostics.Stopwatch" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Stop">
      <summary>Detiene la medición del tiempo transcurrido para un intervalo.</summary>
    </member>
    <member name="T:System.IO.InvalidDataException">
      <summary>Excepción que se inicia cuando el formato de un flujo de datos no es válido.</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor">
      <summary>Inicializa una instancia nueva de la clase <see cref="T:System.IO.InvalidDataException" />.</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.InvalidDataException" /> con el mensaje de error especificado.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción.</param>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.IO.InvalidDataException" /> con una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica la razón de la excepción.</param>
      <param name="innerException">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="innerException" /> no es null, la excepción actual se producirá en un bloque catch que controla la excepción interna.</param>
    </member>
    <member name="T:System.Net.WebUtility">
      <summary>Proporciona métodos para codificar y descodificar direcciones URL cuando se procesan solicitudes Web. </summary>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String)">
      <summary>Convierte una cadena con código HTML en una cadena descodificada para la transmisión HTTP.</summary>
      <returns>Cadena descodificada.</returns>
      <param name="value">Cadena que se va a descodificar.</param>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String)">
      <summary>Convierte una cadena en una cadena codificada en HTML.</summary>
      <returns>Cadena codificada.</returns>
      <param name="value">Cadena que se va a codificar.</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecode(System.String)">
      <summary>Convierte en cadena descodificada una cadena que se ha codificado para su transmisión en una dirección URL.</summary>
      <returns>Cadena descodificada.</returns>
      <param name="encodedValue">Cadena que se va a descodificar.</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Convierte una matriz de bytes con código URL en una cadena descodificada, utilizando el objeto de codificación especificado; comienza en la posición especificada de la matriz y continúa para el número de bytes especificado.</summary>
      <returns>Cadena descodificada.</returns>
      <param name="encodedValue">Matriz de bytes que se va a descodificar.</param>
      <param name="offset">Posición de byte en la que se va a comenzar la descodificación.</param>
      <param name="count">Número de bytes que se van a descodificar.</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncode(System.String)">
      <summary>Codifica una cadena URL.</summary>
      <returns>Cadena codificada.</returns>
      <param name="value">Texto que se va a codificar.</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Convierte una matriz de bytes en una cadena con código URL. Se comienza en la posición especificada de la matriz y se continúa para el número de bytes especificado.</summary>
      <returns>Cadena codificada.</returns>
      <param name="value">Matriz de bytes que se va a codificar.</param>
      <param name="offset">Posición de la matriz de bytes en la que se va a comenzar la codificación.</param>
      <param name="count">Número de bytes que se van a codificar.</param>
    </member>
    <member name="T:System.Text.RegularExpressions.Capture">
      <summary>Representa los resultados de una sola captura de subexpresión. </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
      <summary>Posición en la cadena original donde se encontró el primer carácter de la subcadena capturada.</summary>
      <returns>Posición inicial basada en cero en la cadena original donde se encontró la subcadena capturada.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
      <summary>Longitud de la subcadena capturada.</summary>
      <returns>Longitud de la subcadena capturada.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
      <summary>Obtiene la subcadena capturada desde la cadena de entrada.</summary>
      <returns>Subcadena real capturada por la coincidencia.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
      <summary>Obtiene la subcadena capturada desde la cadena de entrada.</summary>
      <returns>Subcadena real capturada por la coincidencia.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
      <summary>Representa el conjunto de capturas realizado por un único grupo de capturas. </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copia todos los elementos de la colección en la matriz indicada a partir del índice especificado.</summary>
      <param name="array">Matriz en la que se va a copiar la colección. </param>
      <param name="arrayIndex">Posición de la matriz de destino en que se inicia la copia. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> está fuera de los límites de <paramref name="array" />.-O bien-<paramref name="arrayIndex" /> más <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" /> está fuera de los límites de <paramref name="array" />. </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
      <summary>Obtiene el número de subcadenas capturadas por el grupo.</summary>
      <returns>Número de elementos del objeto <see cref="T:System.Text.RegularExpressions.CaptureCollection" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
      <summary>Ofrece un enumerador que recorre en iteración la colección.</summary>
      <returns>Objeto que contiene todos los objetos <see cref="T:System.Text.RegularExpressions.Capture" /> incluidos en <see cref="T:System.Text.RegularExpressions.CaptureCollection" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
      <summary>Obtiene un valor que indica si la colección es de solo lectura.</summary>
      <returns>true en todos los casos.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la colección está sincronizado (es seguro para la ejecución de subprocesos).</summary>
      <returns>false en todos los casos.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
      <summary>Obtiene un miembro individual de la colección.</summary>
      <returns>Subcadena capturada en la posición <paramref name="i" /> de la colección.</returns>
      <param name="i">Índice en la colección de captura. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> es menor que 0 o mayor que <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" />. </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a la colección.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso a la colección.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
      <summary>Representa los resultados de un solo grupo de captura.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
      <summary>Obtiene una colección de todas las capturas que coinciden con el grupo de captura, en orden empezando por el más interno de la izquierda (o por el más interno de la derecha si se modifica con la opción <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" />).La colección puede tener cero o más elementos.</summary>
      <returns>Colección de subcadenas que coinciden por el grupo.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
      <summary>Obtiene un valor que indica si la coincidencia ha tenido éxito.</summary>
      <returns>true si la coincidencia es correcta; de lo contrario, false.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
      <summary>Representa una colección de grupos capturados en una coincidencia única.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copia todos los elementos de la colección en la matriz indicada a partir del índice especificado.</summary>
      <param name="array">Matriz en la que se va a copiar la colección. </param>
      <param name="arrayIndex">Posición de la matriz de destino en que se inicia la copia. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es null.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> está fuera de los límites de <paramref name="array" />.-O bien-<paramref name="arrayIndex" /> más <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> está fuera de los límites de <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
      <summary>Devuelve el número de grupos de la colección.</summary>
      <returns>Número de grupos de la colección.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
      <summary>Devuelve un enumerador que puede recorrer en iteración la colección.</summary>
      <returns>Objeto que contiene todos los objetos <see cref="T:System.Text.RegularExpressions.Group" /> de <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
      <summary>Obtiene un valor que indica si la colección es de solo lectura.</summary>
      <returns>Es true si <see cref="T:System.Text.RegularExpressions.GroupCollection" /> es de solo lectura; de lo contrario, es false.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso al objeto <see cref="T:System.Text.RegularExpressions.GroupCollection" /> está sincronizado (es seguro para la ejecución de subprocesos).</summary>
      <returns>false en todos los casos.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
      <summary>Habilita el acceso a un miembro de la colección por índice de entero.</summary>
      <returns>Miembro de la colección especificado por <paramref name="groupnum" />.</returns>
      <param name="groupnum">El índice de base cero del miembro de la colección que se va a recuperar. </param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
      <summary>Habilita el acceso a un miembro de la colección por índice de cadena.</summary>
      <returns>Miembro de la colección especificado por <paramref name="groupname" />.</returns>
      <param name="groupname">Nombre de un grupo de captura.</param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</summary>
      <returns>Copia del objeto <see cref="T:System.Text.RegularExpressions.Match" /> que se va a sincronizar.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
      <summary>Representa los resultados de una sola coincidencia de expresión regular.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
      <summary>Obtiene el grupo vacío.Todas las coincidencias erróneas devuelven esta coincidencia vacía.</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.Match" /> vacío.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
      <summary>Obtiene una colección de grupos que coinciden por la expresión regular.</summary>
      <returns>Los grupos de carácter coinciden por el modelo.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
      <summary>Devuelve un nuevo objeto <see cref="T:System.Text.RegularExpressions.Match" /> con los resultados de la siguiente coincidencia, empezando en la posición donde finalizó la última (en el carácter siguiente al último que coincidía).</summary>
      <returns>Siguiente coincidencia de expresión regular.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
      <summary>Devuelve la expansión del modelo de reemplazo especificado. </summary>
      <returns>La versión expandida del parámetro <paramref name="replacement" />.</returns>
      <param name="replacement">El modelo de reemplazo que se va a utilizar. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> es null.</exception>
      <exception cref="T:System.NotSupportedException">No se permite la expansión para este modelo.</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
      <summary>Representa el conjunto de coincidencias con éxito encontradas por la solicitud iterada de un modelo de expresión regular en la cadena de entrada.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copia todos los elementos de la colección en la matriz indicada a partir del índice dado.</summary>
      <param name="array">Matriz en la que se va a copiar la colección. </param>
      <param name="arrayIndex">Posición de la matriz donde se inicia la copia. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es una matriz multidimensional.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> está fuera de los límites de <paramref name="array" />.-O bien-<paramref name="arrayIndex" /> más <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> está fuera de los límites de <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
      <summary>Obtiene el número de coincidencias.</summary>
      <returns>Número de coincidencias.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
      <summary>Proporciona un enumerador en el mismo orden que <see cref="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)" />.</summary>
      <returns>Objeto <see cref="T:System.Collections.IEnumerator" /> que contiene todos los objetos Match incluidos en MatchCollection.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
      <summary>Obtiene un valor que indica si la colección es de solo lectura.</summary>
      <returns>El valor de esta propiedad es siempre true.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la colección está sincronizado (es seguro para la ejecución de subprocesos).</summary>
      <returns>El valor de esta propiedad es siempre false.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
      <summary>Obtiene un miembro individual de la colección.</summary>
      <returns>Subcadena capturada en la posición <paramref name="i" /> de la colección.</returns>
      <param name="i">Índice en la colección Match. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> es menor que 0, o mayor o igual a <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" />. </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a la colección.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso a la colección.Esta propiedad devuelve siempre el propio objeto.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
      <summary>Representa el método al que se llama cada vez que se encuentra una coincidencia de expresión regular durante una operación del método <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" />.</summary>
      <returns>Cadena que devuelve el método representado por el delegado <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</returns>
      <param name="match">Objeto <see cref="T:System.Text.RegularExpressions.Match" /> que representa la coincidencia de la expresión regular única durante una operación del método <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" />. </param>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
      <summary>Representa una expresión regular inmutable.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
      <summary>Inicializa y compila una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.Regex" /> para la expresión regular especificada.</summary>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias. </param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> es null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Inicializa y compila una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.Regex" /> para la expresión regular especificada, con opciones que modifican el modelo.</summary>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias. </param>
      <param name="options">Una combinación bit a bit de los valores de la enumeración.  </param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> contiene un marcador no válido.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.Regex" /> para la expresión regular especificada, con opciones que modifican el modelo y un valor que especifica durante cuánto tiempo un método de coincidencia de patrones deberá intentar una coincidencia antes de que se agote el tiempo de espera.</summary>
      <param name="pattern">Modelo de expresión regular del que van a buscarse coincidencias.</param>
      <param name="options">Combinación bit a bit de los valores de enumeración que modifican la expresión regular.</param>
      <param name="matchTimeout">Intervalo del tiempo de espera, o <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> para indicar que el método no expira.</param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es un valor <see cref="T:System.Text.RegularExpressions.RegexOptions" /> válido.-O bien-<paramref name="matchTimeout" /> es negativo o superior a aproximadamente 24 días.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CacheSize">
      <summary>Obtiene o establece el número máximo de entradas en la actual memoria caché estática de expresiones regulares compiladas.</summary>
      <returns>Número máximo de entradas en la memoria caché estática.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de una operación Set es menor que cero.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capsize">
      <summary>El motor de expresiones regulares lo usa internamente. </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capslist">
      <summary>El motor de expresiones regulares lo usa internamente. </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
      <summary>Convierte en secuencias de escape un juego mínimo de caracteres (\, *, +, ?, |, {, [, (,), ^, $,., # y espacio en blanco) reemplazándolos con sus códigos de escape.Esto indica al motor de expresiones regulares que interprete los caracteres literalmente en lugar de como metacaracteres.</summary>
      <returns>Cadena de caracteres con metacaracteres convertidos a su forma de escape.</returns>
      <param name="str">Cadena de entrada que contiene el texto que se desea convertir. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> es null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
      <summary>Devuelve una matriz de captura de nombres de grupo para la expresión regular.</summary>
      <returns>Matriz de cadenas de nombres de grupo.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
      <summary>Devuelve una matriz de números de grupo de captura que corresponde a los nombres de grupo en una matriz.</summary>
      <returns>Matriz de enteros de números de grupo.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
      <summary>Obtiene el nombre de grupo correspondiente a un número de grupo especificado.</summary>
      <returns>Cadena que contiene el nombre de grupo asociado al número de grupo especificado.Si no hay ningún nombre de grupo correspondiente a <paramref name="i" />, el método devuelve <see cref="F:System.String.Empty" />.</returns>
      <param name="i">Número de grupo para convertir al nombre de grupo correspondiente. </param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
      <summary>Devuelve el número de grupo correspondiente a un nombre de grupo especificado.</summary>
      <returns>Número de grupo correspondiente a un nombre de grupo especificado, o -1 si <paramref name="name" /> no es un nombre de grupo válido.</returns>
      <param name="name">Nombre de grupo para convertir al número de grupo correspondiente. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> es null.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout">
      <summary>Especifica que la operación de coincidencia de patrones no debe tener tiempo de espera.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
      <summary>Indica si la expresión regular especificada en el constructor <see cref="T:System.Text.RegularExpressions.Regex" /> busca una coincidencia en la cadena de entrada.</summary>
      <returns>true si la expresión regular encuentra una coincidencia; de lo contrario, false.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
      <summary>Indica si la expresión regular especificada en el constructor <see cref="T:System.Text.RegularExpressions.Regex" /> busca una coincidencia en la cadena de entrada empezando por la posición de inicio especificada en la cadena.</summary>
      <returns>true si la expresión regular encuentra una coincidencia; de lo contrario, false.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="startat">Posición de carácter en la que se va a iniciar la búsqueda. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> no puede ser menor que cero o mayor que la longitud de <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
      <summary>Indica si la expresión regular busca una coincidencia en la cadena de entrada mediante la expresión regular especificada en el parámetro <paramref name="pattern" />.</summary>
      <returns>true si la expresión regular encuentra una coincidencia; de lo contrario, false.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="pattern">Modelo de expresión regular del que van a buscarse coincidencias. </param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.-O bien-<paramref name="pattern" /> es null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Indica si la expresión regular busca una coincidencia en la cadena de entrada mediante la expresión regular especificada en el parámetro <paramref name="pattern" /> y las opciones suministradas que coinciden en el parámetro <paramref name="options" />.</summary>
      <returns>true si la expresión regular encuentra una coincidencia; de lo contrario, false.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias. </param>
      <param name="options">Una combinación bit a bit de los valores de la enumeración.  </param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.-O bien-<paramref name="pattern" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es un valor <see cref="T:System.Text.RegularExpressions.RegexOptions" /> válido.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Indica si la expresión regular especificada encuentra una coincidencia en la cadena de entrada especificada, utilizando las opciones de coincidencia indicadas e intervalo del tiempo de espera.</summary>
      <returns>true si la expresión regular encuentra una coincidencia; de lo contrario, false.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Modelo de expresión regular del que van a buscarse coincidencias.</param>
      <param name="options">Combinación bit a bit de los valores de enumeración que proporcionan opciones de coincidencia.</param>
      <param name="matchTimeout">Intervalo del tiempo de espera, o <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> para indicar que el método no expira.</param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> o <paramref name="pattern" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es un valor <see cref="T:System.Text.RegularExpressions.RegexOptions" /> válido.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se ha agotado el tiempo de espera.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
      <summary>Busca en la cadena de entrada especificada la primera aparición de la expresión regular indicada en el constructor <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
      <returns>Objeto que contiene información sobre la coincidencia. </returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
      <summary>Busca en la cadena de entrada la primera aparición de una expresión regular con una posición de inicio de cadena de entrada especificada.</summary>
      <returns>Objeto que contiene información sobre la coincidencia.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="startat">Posición de carácter basada en cero en la que se va a iniciar la búsqueda. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> es menor que cero o superior a la longitud de <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
      <summary>Busca en la cadena de entrada la primera aparición de una expresión regular con una posición de inicio de cadena de entrada y una longitud de cadena de entrada especificadas.</summary>
      <returns>Objeto que contiene información sobre la coincidencia.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="beginning">Posición del carácter basada en cero de la cadena de entrada que define el extremo izquierdo en el que se va a realizar la búsqueda. </param>
      <param name="length">Número de caracteres de la subcadena que se van a incluir en la búsqueda. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="beginning" /> es menor que cero o superior a la longitud de <paramref name="input" />.-O bien-<paramref name="length" /> es menor que cero o superior a la longitud de <paramref name="input" />.-O bien-<paramref name="beginning" />+<paramref name="length" />– 1 identifica una posición que está fuera del intervalo de <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
      <summary>Busca en la cadena de entrada especificada la primera aparición de la expresión regular que proporciona el parámetro <paramref name="pattern" />.</summary>
      <returns>Objeto que contiene información sobre la coincidencia.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias. </param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.-O bien-<paramref name="pattern" /> es null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Busca en la cadena de entrada la primera aparición de la expresión regular proporcionada por el parámetro <paramref name="pattern" /> con opciones de coincidencia proporcionadas por un parámetro <paramref name="options" />.</summary>
      <returns>Objeto que contiene información sobre la coincidencia.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias. </param>
      <param name="options">Una combinación bit a bit de los valores de la enumeración.  </param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.-O bien-<paramref name="pattern" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es una combinación bit a bit válida de valores <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Busca en la cadena de entrada la primera aparición de la expresión regular especificada, utilizando las opciones de coincidencia indicadas y el intervalo del tiempo de espera.</summary>
      <returns>Objeto que contiene información sobre la coincidencia.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Modelo de expresión regular del que van a buscarse coincidencias.</param>
      <param name="options">Combinación bit a bit de los valores de enumeración que proporcionan opciones de coincidencia.</param>
      <param name="matchTimeout">Intervalo del tiempo de espera, o <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> para indicar que el método no expira.</param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> o <paramref name="pattern" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es una combinación bit a bit válida de valores <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se ha agotado el tiempo de espera.Para obtener más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
      <summary>Busca la cadena de entrada especificada de todas las apariciones de una expresión regular.</summary>
      <returns>Colección de los objetos <see cref="T:System.Text.RegularExpressions.Match" /> encontrados en la búsqueda.Si no se encuentra ninguna coincidencia, el método devuelve un objeto de colección vacío.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
      <summary>Busca la cadena de entrada especificada para todas las apariciones de una expresión regular, empezando en la posición de inicio especificada de la cadena.</summary>
      <returns>Colección de los objetos <see cref="T:System.Text.RegularExpressions.Match" /> encontrados en la búsqueda.Si no se encuentra ninguna coincidencia, el método devuelve un objeto de colección vacío.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="startat">Posición de carácter de la cadena de entrada en la que se va a iniciar la búsqueda. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> es menor que cero o superior a la longitud de <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
      <summary>Busca la cadena de entrada especificada para todas las apariciones de la expresión regular especificada en el parámetro <paramref name="pattern" />.</summary>
      <returns>Colección de los objetos <see cref="T:System.Text.RegularExpressions.Match" /> encontrados en la búsqueda.Si no se encuentra ninguna coincidencia, el método devuelve un objeto de colección vacío.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias. </param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.-O bien-<paramref name="pattern" /> es null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Busca la cadena de entrada para todas las apariciones de la expresión regular proporcionada por el parámetro <paramref name="pattern" /> con opciones de coincidencia proporcionadas por un parámetro <paramref name="options" />.</summary>
      <returns>Colección de los objetos <see cref="T:System.Text.RegularExpressions.Match" /> encontrados en la búsqueda.Si no se encuentra ninguna coincidencia, el método devuelve un objeto de colección vacío.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias. </param>
      <param name="options">Una combinación bit a bit de los valores de la enumeración.  </param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.-O bien-<paramref name="pattern" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es una combinación bit a bit válida de valores <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Busca en la cadena de entrada especificada todas las apariciones de una expresión regular indicada, utilizando las opciones de coincidencia especificadas y el intervalo del tiempo de espera.</summary>
      <returns>Colección de los objetos <see cref="T:System.Text.RegularExpressions.Match" /> encontrados en la búsqueda.Si no se encuentra ninguna coincidencia, el método devuelve un objeto de colección vacío.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Modelo de expresión regular del que van a buscarse coincidencias.</param>
      <param name="options">Combinación bit a bit de los valores de enumeración que especifican opciones de coincidencia.</param>
      <param name="matchTimeout">Intervalo del tiempo de espera, o <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> para indicar que el método no expira.</param>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.MatchTimeout">
      <summary>Obtiene el objeto de intervalo del tiempo de espera de la instancia actual.</summary>
      <returns>El intervalo del tiempo de espera máximo que puede transcurrir en una operación de coincidencia de patrones antes de que se arroje una <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> o <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> si los tiempos de espera están deshabilitados.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
      <summary>Devuelve las opciones pasadas al constructor <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
      <returns>Parámetro <paramref name="options" /> que se pasó al constructor Regex.</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.pattern">
      <summary>El motor de expresiones regulares lo usa internamente. </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
      <summary>Dentro de una cadena de entrada especificada, reemplaza todas las cadenas que coinciden con un modelo de expresión regular por una cadena de reemplazo especificada. </summary>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que una cadena de reemplazo ocupa el lugar de cada cadena coincidente.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="replacement">Cadena de reemplazo. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.-O bien-<paramref name="replacement" /> es null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
      <summary>Dentro de una cadena de entrada especificada, reemplaza un número máximo especificado de cadenas que coinciden con un modelo de expresión regular por una cadena de reemplazo especificada. </summary>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que una cadena de reemplazo ocupa el lugar de cada cadena coincidente.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="replacement">Cadena de reemplazo. </param>
      <param name="count">Número máximo de veces que puede producirse el reemplazo. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.-O bien-<paramref name="replacement" /> es null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>Dentro de una subcadena de entrada especificada, reemplaza un número máximo especificado de cadenas que coinciden con un modelo de expresión regular por una cadena de reemplazo especificada. </summary>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que una cadena de reemplazo ocupa el lugar de cada cadena coincidente.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="replacement">Cadena de reemplazo. </param>
      <param name="count">Número máximo de veces que puede producirse el reemplazo. </param>
      <param name="startat">Posición de carácter de la cadena de entrada donde comienza la búsqueda. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.-O bien-<paramref name="replacement" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> es menor que cero o superior a la longitud de <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
      <summary>Dentro de una cadena de entrada especificada, reemplaza todas las cadenas que coinciden con una expresión regular especificada por una cadena de reemplazo especificada. </summary>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que una cadena de reemplazo ocupa el lugar de cada cadena coincidente.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias. </param>
      <param name="replacement">Cadena de reemplazo. </param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.-O bien-<paramref name="pattern" /> es null.-O bien-<paramref name="replacement" /> es null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Dentro de una cadena de entrada especificada, reemplaza todas las cadenas que coinciden con una expresión regular especificada por una cadena de reemplazo especificada.Las opciones especificadas modifican la operación de coincidencia.</summary>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que una cadena de reemplazo ocupa el lugar de cada cadena coincidente.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias. </param>
      <param name="replacement">Cadena de reemplazo. </param>
      <param name="options">Una combinación bit a bit de los valores de la enumeración.  </param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.-O bien-<paramref name="pattern" /> es null.-O bien-<paramref name="replacement" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es una combinación bit a bit válida de valores <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>En una cadena de entrada especificada, reemplaza todas las cadenas que coinciden con una expresión regular especificada por una cadena de reemplazo especificada.Otros parámetros especifican opciones que modifican la operación de coincidencia y un intervalo de tiempo de espera si no se encuentra ninguna coincidencia.</summary>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que una cadena de reemplazo ocupa el lugar de cada cadena coincidente.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Modelo de expresión regular del que van a buscarse coincidencias.</param>
      <param name="replacement">Cadena de reemplazo.</param>
      <param name="options">Combinación bit a bit de los valores de enumeración que proporcionan opciones de coincidencia.</param>
      <param name="matchTimeout">Intervalo del tiempo de espera, o <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> para indicar que el método no expira.</param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> o <paramref name="replacement" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es una combinación bit a bit válida de valores <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se ha agotado el tiempo de espera.Para obtener más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>Dentro de una cadena de entrada especificada, reemplaza todas las cadenas que coinciden con una expresión regular especificada por una cadena devuelta por un delegado <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</summary>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que una cadena de reemplazo ocupa el lugar de cada cadena coincidente.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias. </param>
      <param name="evaluator">Método personalizado que examina cada coincidencia y devuelve la cadena coincidente original o una cadena de reemplazo.</param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.-O bien-<paramref name="pattern" /> es null.-O bien-<paramref name="evaluator" /> es null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
      <summary>Dentro de una cadena de entrada especificada, reemplaza todas las cadenas que coinciden con una expresión regular especificada por una cadena devuelta por un delegado <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.Las opciones especificadas modifican la operación de coincidencia.</summary>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que una cadena de reemplazo ocupa el lugar de cada cadena coincidente.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias. </param>
      <param name="evaluator">Método personalizado que examina cada coincidencia y devuelve la cadena coincidente original o una cadena de reemplazo. </param>
      <param name="options">Una combinación bit a bit de los valores de la enumeración.  </param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.-O bien-<paramref name="pattern" /> es null.-O bien-<paramref name="evaluator" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es una combinación bit a bit válida de valores <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>En una cadena de entrada especificada, reemplaza todas las subcadenas que coinciden con una expresión regular especificada por una cadena devuelta por un delegado <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.Otros parámetros especifican opciones que modifican la operación de coincidencia y un intervalo de tiempo de espera si no se encuentra ninguna coincidencia.</summary>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que una cadena de reemplazo ocupa el lugar de cada cadena coincidente.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Modelo de expresión regular del que van a buscarse coincidencias.</param>
      <param name="evaluator">Método personalizado que examina cada coincidencia y devuelve la cadena coincidente original o una cadena de reemplazo.</param>
      <param name="options">Combinación bit a bit de valores de enumeración que proporcionan opciones de coincidencia.</param>
      <param name="matchTimeout">Intervalo del tiempo de espera, o <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> para indicar que el método no expira.</param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> o <paramref name="evaluator" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es una combinación bit a bit válida de valores <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se ha agotado el tiempo de espera.Para obtener más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>Dentro de una cadena de entrada especificada, reemplaza todas las cadenas que coinciden con una expresión regular especificada por una cadena devuelta por un delegado <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</summary>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que una cadena de reemplazo ocupa el lugar de cada cadena coincidente.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="evaluator">Método personalizado que examina cada coincidencia y devuelve la cadena coincidente original o una cadena de reemplazo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.-O bien-<paramref name="evaluator" /> es null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
      <summary>Dentro de una cadena de entrada especificada, reemplaza un número máximo especificado de cadenas que coinciden con un modelo de expresión regular por una cadena devuelta por un delegado <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</summary>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que una cadena de reemplazo ocupa el lugar de cada cadena coincidente.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="evaluator">Método personalizado que examina cada coincidencia y devuelve la cadena coincidente original o una cadena de reemplazo.</param>
      <param name="count">Número máximo de veces que se llevará a cabo el reemplazo. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.-O bien-<paramref name="evaluator" /> es null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
      <summary>Dentro de una subcadena de entrada especificada, reemplaza un número máximo especificado de cadenas que coinciden con un modelo de expresión regular por una cadena devuelta por un delegado <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</summary>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que una cadena de reemplazo ocupa el lugar de cada cadena coincidente.</returns>
      <param name="input">Cadena en la que se va a buscar una coincidencia. </param>
      <param name="evaluator">Método personalizado que examina cada coincidencia y devuelve la cadena coincidente original o una cadena de reemplazo.</param>
      <param name="count">Número máximo de veces que se llevará a cabo el reemplazo. </param>
      <param name="startat">Posición de carácter de la cadena de entrada donde comienza la búsqueda. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.-O bien-<paramref name="evaluator" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> es menor que cero o superior a la longitud de <paramref name="input" />.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
      <summary>Obtiene un valor que indica si la expresión regular busca de derecha a izquierda.</summary>
      <returns>true si la expresión regular busca de derecha a izquierda; de lo contrario, false.</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.roptions">
      <summary>El motor de expresiones regulares lo usa internamente. </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
      <summary>Divide la cadena de entrada especificada en las posiciones definidas por un modelo de expresión regular especificado en el constructor <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
      <returns>Matriz de cadenas.</returns>
      <param name="input">Cadena que se va a dividir. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
      <summary>Divide la cadena de entrada especificada un número máximo especificado de veces en las posiciones definidas por una expresión regular especificada en el constructor <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
      <returns>Matriz de cadenas.</returns>
      <param name="input">Cadena que se va a dividir. </param>
      <param name="count">Número máximo de veces que puede llevarse a cabo la división. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
      <summary>Divide la cadena de entrada especificada un número máximo especificado de veces en las posiciones definidas por una expresión regular especificada en el constructor <see cref="T:System.Text.RegularExpressions.Regex" />.La búsqueda del modelo de expresión regular se inicia en la posición de carácter especificada en la cadena de entrada.</summary>
      <returns>Matriz de cadenas.</returns>
      <param name="input">Cadena que se va a dividir. </param>
      <param name="count">Número máximo de veces que puede llevarse a cabo la división. </param>
      <param name="startat">Posición de carácter de la cadena de entrada donde comenzará la búsqueda. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> es menor que cero o superior a la longitud de <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
      <summary>Divide la cadena de entrada en las posiciones definidas por un modelo de expresión regular.</summary>
      <returns>Matriz de cadenas.</returns>
      <param name="input">Cadena que se va a dividir. </param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias. </param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.-O bien-<paramref name="pattern" /> es null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Divide la cadena de entrada en las posiciones definidas por un modelo de expresión regular especificado.Las opciones especificadas modifican la operación de coincidencia.</summary>
      <returns>Matriz de cadenas.</returns>
      <param name="input">Cadena que se va a dividir. </param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias. </param>
      <param name="options">Una combinación bit a bit de los valores de la enumeración.  </param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es null.-O bien-<paramref name="pattern" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es una combinación bit a bit válida de valores <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Divide una cadena de entrada en una matriz de subcadenas en las posiciones definidas por un modelo de expresión regular especificado.Otros parámetros especifican opciones que modifican la operación de coincidencia y un intervalo de tiempo de espera si no se encuentra ninguna coincidencia.</summary>
      <returns>Matriz de cadenas.</returns>
      <param name="input">Cadena que se va a dividir.</param>
      <param name="pattern">Modelo de expresión regular del que van a buscarse coincidencias.</param>
      <param name="options">Combinación bit a bit de los valores de enumeración que proporcionan opciones de coincidencia.</param>
      <param name="matchTimeout">Intervalo del tiempo de espera, o <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> para indicar que el método no expira.</param>
      <exception cref="T:System.ArgumentException">Se ha producido un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> o <paramref name="pattern" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es una combinación bit a bit válida de valores <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se ha agotado el tiempo de espera.Para obtener más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
      <summary>Devuelve el modelo de expresión regular que se pasó al constructor Regex.</summary>
      <returns>Parámetro <paramref name="pattern" /> que se pasó al constructor Regex.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
      <summary>Convierte cualquier carácter de escape en un carácter sin escape en la cadena de entrada.</summary>
      <returns>Cadena de caracteres con caracteres de escape convertidos a su forma sin escape.</returns>
      <param name="str">Cadena de entrada que contiene el texto que se desea convertir. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> es null.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionR">
      <summary>El motor de expresiones regulares lo usa internamente.</summary>
      <returns>Es true si la propiedad <see cref="P:System.Text.RegularExpressions.Regex.Options" /> contiene la opción <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" />; en caso contrario, es false.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
      <summary>La excepción que se produce cuando el tiempo de ejecución de un método de coincidencia de modelos de expresión regular excede su intervalo de tiempo de espera.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> con un mensaje proporcionado por el sistema.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> con la cadena de mensaje especificada.</summary>
      <param name="message">Cadena que describe la excepción.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> con un mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Cadena que describe la excepción.</param>
      <param name="inner">Excepción que es la causa de la excepción actual.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.String,System.TimeSpan)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> con información sobre el modelo de expresión regular, el texto de entrada y el intervalo de tiempo de espera.</summary>
      <param name="regexInput">El texto de entrada procesado por el motor de expresiones regulares cuando se produjo el tiempo de espera.</param>
      <param name="regexPattern">El modelo usado por el motor de expresiones regulares cuando se produjo el tiempo de espera.</param>
      <param name="matchTimeout">El intervalo de tiempo de espera.</param>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Input">
      <summary>[CRÍTICO PARA LA SEGURIDAD] Obtiene el texto de entrada que el motor de expresiones regulares estaba procesando cuando se produjo el tiempo de espera.</summary>
      <returns>El texto de entrada de la expresión regular.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout">
      <summary>[CRÍTICO PARA LA SEGURIDAD] Obtiene el intervalo de tiempo de espera de una coincidencia de expresión regular.</summary>
      <returns>El intervalo de tiempo de espera.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Pattern">
      <summary>[CRÍTICO PARA LA SEGURIDAD] Obtiene el modelo de expresión regular que se usó en la operación coincidente cuando se produjo el tiempo de espera.</summary>
      <returns>El modelo de expresión regular.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
      <summary>Proporciona valores enumerados que se pueden utilizar para establecer las opciones de expresión regular.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Compiled">
      <summary>Especifica que la expresión regular esté compilada en un ensamblado.Esto proporciona una ejecución más veloz pero incrementa el tiempo de inicio.Este valor no debe asignarse a la propiedad <see cref="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" /> al llamar al método <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />.Solo está presente en Windows Phone, pero no es compatible.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
      <summary>Especifica que se pasan por alto las diferencias culturales de idioma.Normalmente, el motor de expresiones regulares realiza comparaciones de cadenas basadas en las convenciones de la referencia cultural actual.Si se especifica la opción <see cref="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant" />, utiliza las convenciones de la referencia cultural de todos los idiomas.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
      <summary>Habilita el comportamiento conforme a ECMAScript para esta expresión.Este valor solo se puede utilizar junto con los valores <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" /> y <see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline" />.El uso de este valor con otros valores dará como resultado una excepción.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
      <summary>Especifica que solo las capturas válidas son explícitamente grupos con nombre o número con la forma (?&lt;nombre&gt;…).Esto permite que los paréntesis sin nombre actúen como grupos sin capturar sin la torpeza sintáctica de la expresión (?:…).</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
      <summary>Especifica la coincidencia con distinción entre mayúsculas y minúsculas.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
      <summary>Elimina el espacio en blanco no omitido del modelo y habilita los comentarios marcados con #.Sin embargo, el valor <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace" /> no afecta ni elimina el espacio en blanco en las clases de caracteres.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
      <summary>Modo multilínea.Cambia el significado de f ^ y $ de manera que coincidan al principio y al final, respectivamente de cada línea y no justo al principio y al final de toda la cadena.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
      <summary>Especifica que no hay opciones establecidas.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
      <summary>Especifica que la búsqueda será de derecha a izquierda en lugar de izquierda a derecha.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
      <summary>Especifica el modo de una sola línea.Cambia el significado del punto (.) de manera que coincida con todos los caracteres (en lugar de hacerlo con todos los caracteres excepto con \n).</summary>
    </member>
    <member name="T:System.Threading.Barrier">
      <summary>Habilita varias tareas para que cooperen en un algoritmo en paralelo a través de varias fases.</summary>
    </member>
    <member name="M:System.Threading.Barrier.#ctor(System.Int32)">
      <summary>Inicializa una instancia nueva de la clase <see cref="T:System.Threading.Barrier" />.</summary>
      <param name="participantCount">Número de subprocesos que participan.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> es menor que 0 o mayor que 32,767.</exception>
    </member>
    <member name="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
      <summary>Inicializa una instancia nueva de la clase <see cref="T:System.Threading.Barrier" />.</summary>
      <param name="participantCount">Número de subprocesos que participan.</param>
      <param name="postPhaseAction">
        <see cref="T:System.Action`1" /> que se ejecutará después de cada fase. Se puede pasar null (Nothing en Visual Basic) para indicar que se realiza ninguna acción.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> es menor que 0 o mayor que 32,767.</exception>
    </member>
    <member name="M:System.Threading.Barrier.AddParticipant">
      <summary>Notifica a <see cref="T:System.Threading.Barrier" /> que va a haber un participante adicional.</summary>
      <returns>Número de fase de la barrera en la que primero participarán los nuevos participantes.</returns>
      <exception cref="T:System.ObjectDisposedException">La instancia actual ya se ha eliminado.</exception>
      <exception cref="T:System.InvalidOperationException">Agregar un participante haría que el recuento de participantes de la barrera superase los 32.767.-O bien-El método se invocó desde dentro de una acción posterior a la fase.</exception>
    </member>
    <member name="M:System.Threading.Barrier.AddParticipants(System.Int32)">
      <summary>Notifica a <see cref="T:System.Threading.Barrier" /> que va a haber participantes adicionales.</summary>
      <returns>Número de fase de la barrera en la que primero participarán los nuevos participantes.</returns>
      <param name="participantCount">Número de participantes adicionales que se van a agregar a la barrera.</param>
      <exception cref="T:System.ObjectDisposedException">La instancia actual ya se ha eliminado.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> es menor que 0.-O bien-Agregar <paramref name="participantCount" /> haría que el recuento de participantes de la barrera superase los 32.767.</exception>
      <exception cref="T:System.InvalidOperationException">El método se invocó desde dentro de una acción posterior a la fase.</exception>
    </member>
    <member name="P:System.Threading.Barrier.CurrentPhaseNumber">
      <summary>Obtiene el número de la fase actual de la barrera.</summary>
      <returns>Devuelve el número de la fase actual de la barrera.</returns>
    </member>
    <member name="M:System.Threading.Barrier.Dispose">
      <summary>Libera todos los recursos usados por la instancia actual de la clase <see cref="T:System.Threading.Barrier" />.</summary>
      <exception cref="T:System.InvalidOperationException">El método se invocó desde dentro de una acción posterior a la fase.</exception>
    </member>
    <member name="M:System.Threading.Barrier.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados utilizados por el objeto <see cref="T:System.Threading.Barrier" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es true para liberar tanto recursos administrados como no administrados; es false para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="P:System.Threading.Barrier.ParticipantCount">
      <summary>Obtiene el número total de participantes de la barrera.</summary>
      <returns>Devuelve el número total de participantes de la barrera.</returns>
    </member>
    <member name="P:System.Threading.Barrier.ParticipantsRemaining">
      <summary>Obtiene el número de participantes de la barrera que no aún no se han señalado en la fase actual.</summary>
      <returns>Devuelve el número de participantes de la barrera que no aún no se han señalado en la fase actual.</returns>
    </member>
    <member name="M:System.Threading.Barrier.RemoveParticipant">
      <summary>Notifica a <see cref="T:System.Threading.Barrier" /> que va a haber un participante menos.</summary>
      <exception cref="T:System.ObjectDisposedException">La instancia actual ya se ha eliminado.</exception>
      <exception cref="T:System.InvalidOperationException">La barrera ya tiene 0 participantes.-O bien-El método se invocó desde dentro de una acción posterior a la fase.</exception>
    </member>
    <member name="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
      <summary>Notifica a <see cref="T:System.Threading.Barrier" /> que va a haber menos participantes.</summary>
      <param name="participantCount">Número de participantes adicionales que se van a quitar de la barrera.</param>
      <exception cref="T:System.ObjectDisposedException">La instancia actual ya se ha eliminado.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> es menor que 0.</exception>
      <exception cref="T:System.InvalidOperationException">La barrera ya tiene 0 participantes.-O bien-El método se invocó desde dentro de una acción posterior a la fase. -O bien-el recuento del participante actual es menor que el participantCount especificado</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El recuento del participante total es menor que el <paramref name=" participantCount" /> especificado</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait">
      <summary>Señala que un participante ha alcanzado la barrera <see cref="T:System.Threading.Barrier" /> y espera a que todos los demás participantes alcancen también la barrera.</summary>
      <exception cref="T:System.ObjectDisposedException">La instancia actual ya se ha eliminado.</exception>
      <exception cref="T:System.InvalidOperationException">El método se invocó desde dentro de una acción posterior a la fase, la barrera tiene actualmente 0 participantes, o la barrera la señalan más subprocesos de los que están registrados como participantes.</exception>
      <exception cref="T:System.BarrierPostPhaseException">Si una excepción se produce de la acción de fase de envío de una barrera después de todos los subprocesos hayan llamado a SignalAndWait, la excepción se ajustará en una BarrierPostPhaseException y se producirá en todos los subprocesos que participan.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
      <summary>Señala que un participante ha alcanzado la barrera <see cref="T:System.Threading.Barrier" /> y espera a que todos los demás participantes alcancen también la barrera usando un entero de 32 bits con signo para medir el tiempo de espera.</summary>
      <returns>si todos los participantes alcanzaron la barrera dentro del tiempo especificado; de lo contrario, es false.</returns>
      <param name="millisecondsTimeout">Número de milisegundos de espera o <see cref="F:System.Threading.Timeout.Infinite" /> (-1) para esperar indefinidamente.</param>
      <exception cref="T:System.ObjectDisposedException">La instancia actual ya se ha eliminado.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> es un número negativo distinto de -1 que representa un tiempo de espera infinito.</exception>
      <exception cref="T:System.InvalidOperationException">El método se invocó desde dentro de una acción posterior a la fase, la barrera tiene actualmente 0 participantes, o la barrera la señalan más subprocesos de los que están registrados como participantes.</exception>
      <exception cref="T:System.BarrierPostPhaseException">Si una excepción se produce de la acción de fase de envío de una barrera después de todos los subprocesos hayan llamado a SignalAndWait, la excepción se ajustará en una BarrierPostPhaseException y se producirá en todos los subprocesos que participan.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
      <summary>Señala que un participante ha alcanzado la barrera y espera a que todos los demás participantes la alcancen también usando un entero de 32 bits con signo para medir el tiempo de espera mientras se observa un token <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>si todos los participantes alcanzaron la barrera dentro del tiempo especificado; de lo contrario, es false.</returns>
      <param name="millisecondsTimeout">Número de milisegundos de espera o <see cref="F:System.Threading.Timeout.Infinite" /> (-1) para esperar indefinidamente.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar.</param>
      <exception cref="T:System.OperationCanceledException">Se ha cancelado <paramref name="cancellationToken" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La instancia actual ya se ha eliminado.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> es un número negativo distinto de -1 que representa un tiempo de espera infinito.</exception>
      <exception cref="T:System.InvalidOperationException">El método se invocó desde dentro de una acción posterior a la fase, la barrera tiene actualmente 0 participantes, o la barrera la señalan más subprocesos de los que están registrados como participantes.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
      <summary>Señala que un participante ha alcanzado la barrera <see cref="T:System.Threading.Barrier" /> y espera a que todos los demás participantes alcancen la barrera mientras se observa un token <see cref="T:System.Threading.CancellationToken" />.</summary>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar.</param>
      <exception cref="T:System.OperationCanceledException">Se ha cancelado <paramref name="cancellationToken" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La instancia actual ya se ha eliminado.</exception>
      <exception cref="T:System.InvalidOperationException">El método se invocó desde dentro de una acción posterior a la fase, la barrera tiene actualmente 0 participantes, o la barrera la señalan más subprocesos de los que están registrados como participantes.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
      <summary>Señala que un participante ha alcanzado la barrera <see cref="T:System.Threading.Barrier" /> y espera a que todos los demás participantes alcancen también la barrera usando un objeto <see cref="T:System.TimeSpan" /> para medir el intervalo de tiempo.</summary>
      <returns>Es true si todos los demás participantes alcanzaron la barrera; de lo contrario, es false.</returns>
      <param name="timeout">Estructura <see cref="T:System.TimeSpan" /> que representa el número de milisegundos de espera o estructura <see cref="T:System.TimeSpan" /> que representa -1 milisegundos para esperar indefinidamente.</param>
      <exception cref="T:System.ObjectDisposedException">La instancia actual ya se ha eliminado.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> es un número negativo distinto de -1 milisegundo, que representa un tiempo de espera infinito, o es mayor de 32.767.</exception>
      <exception cref="T:System.InvalidOperationException">El método se invocó desde dentro de una acción posterior a la fase, la barrera tiene actualmente 0 participantes, o la barrera la señalan más subprocesos de los que están registrados como participantes.</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Señala que un participante ha alcanzado la barrera <see cref="T:System.Threading.Barrier" /> y espera a que todos los demás participantes alcancen también la barrera usando un objeto <see cref="T:System.TimeSpan" /> para medir el intervalo de tiempo mientras se observa un token <see cref="T:System.Threading.CancellationToken" />.</summary>
      <returns>Es true si todos los demás participantes alcanzaron la barrera; de lo contrario, es false.</returns>
      <param name="timeout">Estructura <see cref="T:System.TimeSpan" /> que representa el número de milisegundos de espera o estructura <see cref="T:System.TimeSpan" /> que representa -1 milisegundos para esperar indefinidamente.</param>
      <param name="cancellationToken">
        <see cref="T:System.Threading.CancellationToken" /> que se va a observar.</param>
      <exception cref="T:System.OperationCanceledException">Se ha cancelado <paramref name="cancellationToken" />.</exception>
      <exception cref="T:System.ObjectDisposedException">La instancia actual ya se ha eliminado.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> es un número negativo distinto de -1 milisegundo que representa un tiempo de espera infinito.</exception>
      <exception cref="T:System.InvalidOperationException">El método se invocó desde dentro de una acción posterior a la fase, la barrera tiene actualmente 0 participantes, o la barrera la señalan más subprocesos de los que están registrados como participantes.</exception>
    </member>
    <member name="T:System.Threading.BarrierPostPhaseException">
      <summary>Excepción que se inicia cuando se produce un error en la acción posterior a la fase de <see cref="T:System.Threading.Barrier" /></summary>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.BarrierPostPhaseException" /> con un mensaje proporcionado por el sistema que describe el error.</summary>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.BarrierPostPhaseException" /> con la excepción interna especificada.</summary>
      <param name="innerException">Excepción que es la causa de la excepción actual.</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.BarrierPostPhaseException" /> con un mensaje especificado que describe el error.</summary>
      <param name="message">Mensaje que describe la excepción. El llamador de este constructor debe asegurarse de que esta cadena se ha traducido para la actual referencia cultural del sistema.</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.BarrierPostPhaseException" /> con un mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje que describe la excepción. El llamador de este constructor debe asegurarse de que esta cadena se ha traducido para la actual referencia cultural del sistema. </param>
      <param name="innerException">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="innerException" /> no es null, la excepción actual se producirá en un bloque catch que controla la excepción interna. </param>
    </member>
    <member name="T:System.Threading.Semaphore">
      <summary>Limita el número de subprocesos que pueden tener acceso a un recurso o grupo de recursos simultáneamente. </summary>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)">
      <summary>Inicializa una instancia nueva de la clase <see cref="T:System.Threading.Semaphore" />, que especifica el número máximo de entradas simultáneas y, de forma opcional, reserva algunas entradas.</summary>
      <param name="initialCount">El número inicial de solicitudes del semáforo que se pueden conceder simultáneamente.</param>
      <param name="maximumCount">El número máximo de solicitudes del semáforo que se pueden conceder simultáneamente.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCount" /> es mayor que <paramref name="maximumCount" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumCount" /> es menor que 1.-O bien-<paramref name="initialCount" /> es menor que 0.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)">
      <summary>[CRÍTICO PARA LA SEGURIDAD] Inicializa una instancia nueva de la clase <see cref="T:System.Threading.Semaphore" />, que especifica el número máximo de entradas simultáneas, reservando opcionalmente algunas entradas para el subproceso que hace la llamada, y especificando de forma opcional el nombre de un objeto semáforo de sistema.</summary>
      <param name="initialCount">El número inicial de solicitudes del semáforo que se pueden conceder simultáneamente. </param>
      <param name="maximumCount">El número máximo de solicitudes del semáforo que se pueden conceder simultáneamente.</param>
      <param name="name">El nombre de un objeto semáforo de sistema con nombre.</param>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)">
      <summary>[CRÍTICO PARA LA SEGURIDAD] Inicializa una instancia nueva de la clase <see cref="T:System.Threading.Semaphore" />, especificando el número máximo de entradas simultáneas, reservando opcionalmente algunas entradas para el subproceso que realiza la llamada, especificando de forma opcional el nombre de un objeto semáforo de sistema y especificando una variable que recibe un valor que indica si se crea un semáforo de sistema nuevo.</summary>
      <param name="initialCount">El número inicial de solicitudes para el semáforo que se puede satisfacer simultáneamente. </param>
      <param name="maximumCount">El número máximo de solicitudes para el semáforo que se puede satisfacer simultáneamente.</param>
      <param name="name">El nombre de un objeto semáforo de sistema con nombre.</param>
      <param name="createdNew">Cuando este método devuelve un resultado, contiene true si se ha creado un semáforo local (es decir, si <paramref name="name" /> es null o una cadena vacía) o si se ha creado el semáforo de sistema con nombre especificado; es false si el semáforo de sistema con nombre especificado ya existía. Este parámetro se pasa sin inicializar.</param>
    </member>
    <member name="M:System.Threading.Semaphore.OpenExisting(System.String)">
      <summary>[CRÍTICO PARA LA SEGURIDAD] Si ya existe, se abre el semáforo con nombre especificado.</summary>
      <returns>Un objeto que representa el semáforo de sistema con nombre.</returns>
      <param name="name">El nombre del semáforo de sistema que se desea abrir.</param>
    </member>
    <member name="M:System.Threading.Semaphore.Release">
      <summary>Sale del semáforo y devuelve el recuento anterior.</summary>
      <returns>El recuento en el semáforo antes de la llamada al método <see cref="Overload:System.Threading.Semaphore.Release" />. </returns>
      <exception cref="T:System.Threading.SemaphoreFullException">El recuento del semáforo ya está en el valor máximo.</exception>
      <exception cref="T:System.IO.IOException">Error de Win32 con un semáforo con nombre.</exception>
      <exception cref="T:System.UnauthorizedAccessException">El semáforo actual representa un semáforo de sistema con nombre, pero el usuario no tiene <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.-O bien-El semáforo actual representa un semáforo de sistema con nombre, pero no se abrió con <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.Release(System.Int32)">
      <summary>Sale del semáforo un número especificado de veces y devuelve el recuento anterior.</summary>
      <returns>El recuento en el semáforo antes de la llamada al método <see cref="Overload:System.Threading.Semaphore.Release" />. </returns>
      <param name="releaseCount">El número de veces que sale del semáforo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="releaseCount" /> es menor que 1.</exception>
      <exception cref="T:System.Threading.SemaphoreFullException">El recuento del semáforo ya está en el valor máximo.</exception>
      <exception cref="T:System.IO.IOException">Error de Win32 con un semáforo con nombre.</exception>
      <exception cref="T:System.UnauthorizedAccessException">El semáforo actual representa un semáforo de sistema con nombre, pero el usuario no tiene derechos <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.-O bien-El semáforo actual representa un semáforo de sistema con nombre, pero no se abrió con derechos <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />.</exception>
    </member>
    <member name="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)">
      <summary>[CRÍTICO PARA LA SEGURIDAD] Abre el semáforo con nombre especificado, si ya existe, y devuelve un valor que indica si la operación se realizó correctamente.</summary>
      <returns>Es true si el semáforo con nombre se abrió correctamente; de lo contrario, false.</returns>
      <param name="name">El nombre del semáforo de sistema que se desea abrir.</param>
      <param name="result">Cuando este método devuelve un valor, contiene un objeto <see cref="T:System.Threading.Semaphore" /> que representa el semáforo con nombre si la llamada se realizó correctamente, o null si la llamada produce error. Este parámetro se trata como no inicializado.</param>
    </member>
    <member name="T:System.Windows.Input.ICommand">
      <summary>Define el contrato para la ejecución de comandos.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
      <summary>Define el método que determina si el comando se puede ejecutar en su estado actual.</summary>
      <returns>Es true si este comando se puede ejecutar; en caso contrario, false.</returns>
      <param name="parameter">Datos que usa el comando. Si el comando no exige pasar los datos, se puede establecer este objeto en null. </param>
    </member>
    <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
      <summary>Se produce cuando hay cambios que influyen en el hecho de que se ejecute el comando.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
      <summary>Define el método al que se va a llamar cuando se invoca el comando.</summary>
      <param name="parameter">Datos que usa el comando. Si el comando no exige pasar los datos, se puede establecer este objeto en null. </param>
    </member>
  </members>
</doc>