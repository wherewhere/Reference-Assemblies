<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System</name>
  </assembly>
  <members>
    <member name="T:System.FileStyleUriParser">
      <summary>根據檔案配置的可自訂剖析器。</summary>
    </member>
    <member name="M:System.FileStyleUriParser.#ctor">
      <summary>根據檔案配置，建立可自訂的剖析器。</summary>
    </member>
    <member name="T:System.FtpStyleUriParser">
      <summary>根據檔案傳輸通訊協定 (File Transfer Protocol，FTP) 配置的可自訂剖析器。</summary>
    </member>
    <member name="M:System.FtpStyleUriParser.#ctor">
      <summary>根據檔案傳輸通訊協定 (FTP) 配置，建立可自訂的剖析器。</summary>
    </member>
    <member name="T:System.GenericUriParser">
      <summary>階層式 URI 的可自訂剖析器。</summary>
    </member>
    <member name="M:System.GenericUriParser.#ctor(System.GenericUriParserOptions)">
      <summary>建立階層式 URI 的可自訂剖析器。</summary>
      <param name="options">指定此 <see cref="T:System.GenericUriParser" /> 的選項。</param>
    </member>
    <member name="T:System.GenericUriParserOptions">
      <summary>指定 <see cref="T:System.UriParser" /> 的選項。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.AllowEmptyAuthority">
      <summary>剖析器允許不含授權的 URI。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Default">
      <summary>剖析器：</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontCompressPath">
      <summary>剖析器不會規範化 URI。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontConvertPathBackslashes">
      <summary>剖析器不會將反斜線轉換成斜線。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontUnescapePathDotsAndSlashes">
      <summary>剖析器不會逸出路徑點、斜線或反斜線。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.GenericAuthority">
      <summary>剖析器允許登錄架構的授權。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Idn">
      <summary>剖析器支援對主機名稱進行國際化網域名稱 (IDN) 剖析 (IDN)。是否使用 IDN 是透過組態值所指定。如需詳細資訊，請參閱「備註」。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.IriParsing">
      <summary>剖析器支援對國際化資源識別項 (IRI) 使用 RFC 3987 中指定的剖析規則。是否使用 IRI 是透過組態值所指定。如需詳細資訊，請參閱「備註」。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoFragment">
      <summary>配置不會定義片段組件。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoPort">
      <summary>配置不會定義連接埠。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoQuery">
      <summary>配置不會定義查詢組件。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoUserInfo">
      <summary>配置不會定義使用者資訊組件。</summary>
    </member>
    <member name="T:System.HttpStyleUriParser">
      <summary>根據 HTTP 配置的可自訂剖析器。</summary>
    </member>
    <member name="M:System.HttpStyleUriParser.#ctor">
      <summary>根據 HTTP 配置，建立可自訂的剖析器。</summary>
    </member>
    <member name="T:System.Uri">
      <summary>提供統一資源識別項 (URI) 的物件表示，以及對 URI 各部分的簡易存取。</summary>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
      <summary>使用指定的 URI 來初始化 <see cref="T:System.Uri" /> 類別的新執行個體。</summary>
      <param name="uriString">一個 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 為 null。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uriString" /> 是空的。-或-<paramref name="uriString" /> 中指定的配置格式不正確。請參閱<see cref="M:System.Uri.CheckSchemeName(System.String)" />。-或-<paramref name="uriString" /> 含有太多斜線。-或-<paramref name="uriString" /> 中指定的密碼無效。-或-<paramref name="uriString" /> 中指定的主機名稱無效。-或-<paramref name="uriString" /> 中指定的檔案名稱無效。-或-<paramref name="uriString" /> 中指定的使用者名稱無效。-或-<paramref name="uriString" /> 中指定的主機或授權名稱不得以反斜線結尾。-或-<paramref name="uriString" /> 中指定的連接埠編號無效或無法剖析。-或-<paramref name="uriString" /> 的長度超過 65519 個字元。-或-<paramref name="uriString" /> 中指定的配置長度超過 1024 個字元。-或-<paramref name="uriString" /> 中的字元序列無效。-或-<paramref name="uriString" /> 中指定的 MS-DOS 路徑必須以 c:\\ 開頭。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
      <summary>使用指定的 URI 來初始化 <see cref="T:System.Uri" /> 類別的新執行個體。此建構函式可讓您指定 URI 字串是否為相對 URI、絕對 URI 或是無法確定。</summary>
      <param name="uriString">字串，指出 <see cref="T:System.Uri" /> 執行個體所表示的資源。</param>
      <param name="uriKind">指定 URI 字串是相對 URI、絕對 URI 或是不定。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="uriKind" /> 無效 (可能的值為 <see cref="F:System.UriKind.Absolute" />、<see cref="F:System.UriKind.Relative" /> 或 <see cref="F:System.UriKind.RelativeOrAbsolute" />)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 為 null。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uriString" /> 包含相對 URI，並且 <paramref name="uriKind" /> 是 <see cref="F:System.UriKind.Absolute" />。或<paramref name="uriString" /> 包含絕對 URI，並且 <paramref name="uriKind" /> 是 <see cref="F:System.UriKind.Relative" />。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
      <summary>依據指定的基底 URI 與相對 URI 字串初始化 <see cref="T:System.Uri" /> 類別的新執行個體。</summary>
      <param name="baseUri">基底 URI。</param>
      <param name="relativeUri">要加入至基底 URI 的相對 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> 不是絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
      <exception cref="T:System.UriFormatException">結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 是空的，或只包含空格。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的配置無效。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 含有太多斜線。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的密碼無效。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的主機名稱無效。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的檔案名稱無效。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的使用者名稱無效。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的主機或授權名稱不得以反斜線結尾。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的連接埠編號無效或無法剖析。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 長度超過 65519 個字元。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的配置長度超過 1024 個字元。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，字元序列無效。-或-<paramref name="uriString" /> 中指定的 MS-DOS 路徑必須以 c:\\ 開頭。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.Uri)">
      <summary>依據指定的基礎 <see cref="T:System.Uri" /> 執行個體與相對 <see cref="T:System.Uri" /> 執行個體的組合來初始化 <see cref="T:System.Uri" /> 類別的新執行個體。</summary>
      <param name="baseUri">屬於全新 <see cref="T:System.Uri" /> 執行個體基礎的絕對 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">與 <paramref name="baseUri" /> 結合的相對 <see cref="T:System.Uri" /> 執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> 不是絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
      <exception cref="T:System.UriFormatException">結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 是空的，或只包含空格。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的配置無效。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 含有太多斜線。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的密碼無效。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的主機名稱無效。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的檔案名稱無效。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的使用者名稱無效。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的主機或授權名稱不得以反斜線結尾。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的連接埠編號無效或無法剖析。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 長度超過 65519 個字元。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，指定的配置長度超過 1024 個字元。-或-結合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 所形成的 URI 中，字元序列無效。-或-<paramref name="uriString" /> 中指定的 MS-DOS 路徑必須以 c:\\ 開頭。</exception>
    </member>
    <member name="P:System.Uri.AbsolutePath">
      <summary>取得 URI. 的絕對路徑。</summary>
      <returns>
        <see cref="T:System.String" />，包含資源的絕對路徑。</returns>
      <exception cref="T:System.InvalidOperationException">這個屬性只適用於絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
      <summary>取得絕對 URI。</summary>
      <returns>
        <see cref="T:System.String" />，包含整個 URI。</returns>
      <exception cref="T:System.InvalidOperationException">這個屬性只適用於絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
    </member>
    <member name="P:System.Uri.Authority">
      <summary>取得伺服器的網域名稱系統 (DNS) 主機名稱或 IP 位址，以及連接埠編號。</summary>
      <returns>
        <see cref="T:System.String" />，包含這個執行個體表示之 URI 的授權元件。</returns>
      <exception cref="T:System.InvalidOperationException">此執行個體表示相對的 URI，而此屬性只適用於絕對 URI。</exception>
    </member>
    <member name="M:System.Uri.CheckHostName(System.String)">
      <summary>判斷指定的主機名稱是否為有效的 DNS 名稱。</summary>
      <returns>指示主機名稱型別的 <see cref="T:System.UriHostNameType" />。如果無法判斷主機名稱型別，或主機名稱為 null 或長度為零的字串時，這個方法會傳回 <see cref="F:System.UriHostNameType.Unknown" />。</returns>
      <param name="name">要驗證的主機名稱。這可以是 IPv4 或 IPv6 位址或網際網路主機名稱。</param>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
      <summary>判斷指定的配置名稱是否有效。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，如果配置名稱有效則為 true，否則為 false。</returns>
      <param name="schemeName">要驗證的配置名稱。</param>
    </member>
    <member name="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)">
      <summary>使用指定的比較規則，比較兩個 URI 的指定部分。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，表示所比較 <see cref="T:System.Uri" /> 元件之間的語彙關聯性 (Relationship)。值意義小於零<paramref name="uri1" /> 小於 <paramref name="uri2" />。零<paramref name="uri1" /> 等於 <paramref name="uri2" />。大於零<paramref name="uri1" /> 大於 <paramref name="uri2" />。</returns>
      <param name="uri1">第 1 個 <see cref="T:System.Uri" />。</param>
      <param name="uri2">第二個 <see cref="T:System.Uri" />。</param>
      <param name="partsToCompare">
        <see cref="T:System.UriComponents" /> 值的位元組合，該組合指定了要比較的 <paramref name="uri1" /> 與 <paramref name="uri2" /> 部分。</param>
      <param name="compareFormat">其中一項 <see cref="T:System.UriFormat" /> 值，指定了比較 URI 元件時所使用的逸出字元。</param>
      <param name="comparisonType">其中一個 <see cref="T:System.StringComparison" /> 值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="P:System.Uri.DnsSafeHost">
      <summary>取得可安全使用於 DNS 解析的未經逸出主機名稱。</summary>
      <returns>
        <see cref="T:System.String" />，包含適用於 DNS 解析的 URI 未經逸出主機部分，或原始的未經逸出主機字串 (如果適合解析的話)。</returns>
      <exception cref="T:System.InvalidOperationException">這個屬性只適用於絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
      <summary>比較兩個 <see cref="T:System.Uri" /> 執行個體是否相等。</summary>
      <returns>如果兩個執行個體表示相同的 URI，則 <see cref="T:System.Boolean" /> 值為 true，否則為 false。</returns>
      <param name="comparand">要與目前執行個體比較的 <see cref="T:System.Uri" /> 執行個體或 URI 識別項。</param>
    </member>
    <member name="M:System.Uri.EscapeDataString(System.String)">
      <summary>將字串轉換為它的逸出表示。</summary>
      <returns>
        <see cref="T:System.String" />，包含 <paramref name="stringToEscape" /> 的逸出表示。</returns>
      <param name="stringToEscape">要逸出的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> 為 null。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stringToEscape" /> 的長度超過 32766 個字元。</exception>
    </member>
    <member name="M:System.Uri.EscapeUriString(System.String)">
      <summary>將 URI 字串轉換成它的逸出表示。</summary>
      <returns>
        <see cref="T:System.String" />，包含 <paramref name="stringToEscape" /> 的逸出表示。</returns>
      <param name="stringToEscape">要逸出的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> 為 null。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stringToEscape" /> 的長度超過 32766 個字元。</exception>
    </member>
    <member name="P:System.Uri.Fragment">
      <summary>取得逸出的 URI 片段。</summary>
      <returns>
        <see cref="T:System.String" />，包含任何 URI 片段資訊。</returns>
      <exception cref="T:System.InvalidOperationException">這個屬性只適用於絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
    </member>
    <member name="M:System.Uri.FromHex(System.Char)">
      <summary>取得十六進位數字的十進位值。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，包含的數字 0 到 15 是對應至指定的十六進位數字。</returns>
      <param name="digit">要轉換的十六進位數字 (0-9、a-f、A-F)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="digit" /> 不是有效的十六進位數字 (0-9、a-f、A-F)。</exception>
    </member>
    <member name="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)">
      <summary>針對特殊字元使用指定的逸出方式，取得目前執行個體的指定元件。</summary>
      <returns>包含元件的 <see cref="T:System.String" />。</returns>
      <param name="components">
        <see cref="T:System.UriComponents" /> 值的位元組合，該組合指定了要傳回呼叫端的目前執行個體部分。</param>
      <param name="format">其中一個 <see cref="T:System.UriFormat" /> 值，控制特殊字元的逸出方式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="uriComponents" /> 不是有效 <see cref="T:System.UriComponents" /> 值的結合。</exception>
      <exception cref="T:System.InvalidOperationException">此方法只適用於絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
    </member>
    <member name="M:System.Uri.GetHashCode">
      <summary>取得 URI 的雜湊程式碼。</summary>
      <returns>
        <see cref="T:System.Int32" />，包含為此 URI 所產生的雜湊值。</returns>
    </member>
    <member name="P:System.Uri.Host">
      <summary>取得此執行個體的主機元件。</summary>
      <returns>
        <see cref="T:System.String" />，包含主機名稱。這通常是伺服器的 DNS 主機名稱或 IP 位址。</returns>
      <exception cref="T:System.InvalidOperationException">這個屬性只適用於絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
    </member>
    <member name="P:System.Uri.HostNameType">
      <summary>取得 URI 中所指定主機名稱的類型。</summary>
      <returns>
        <see cref="T:System.UriHostNameType" /> 列舉的成員。</returns>
      <exception cref="T:System.InvalidOperationException">此執行個體表示相對的 URI，而此屬性只適用於絕對 URI。</exception>
    </member>
    <member name="P:System.Uri.IsAbsoluteUri">
      <summary>取得 <see cref="T:System.Uri" /> 執行個體是否為絕對的資訊。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，如果 <see cref="T:System.Uri" /> 執行個體為絕對的，則該值為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Uri.IsBaseOf(System.Uri)">
      <summary>判斷目前的 <see cref="T:System.Uri" /> 執行個體是否為指定的 <see cref="T:System.Uri" /> 執行個體基礎。</summary>
      <returns>如果目前 <see cref="T:System.Uri" /> 執行個體是 <paramref name="uri" /> 的基底則為 true，否則為 false。</returns>
      <param name="uri">要測試的指定 <see cref="T:System.Uri" /> 執行個體。</param>
    </member>
    <member name="P:System.Uri.IsDefaultPort">
      <summary>取得 URI 的通訊埠值是否為這個配置的預設值。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，如果 <see cref="P:System.Uri.Port" /> 屬性的值是這個配置的預設通訊埠，則該值為 true，否則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">此執行個體表示相對的 URI，而此屬性只適用於絕對 URI。</exception>
    </member>
    <member name="P:System.Uri.IsFile">
      <summary>取得值，指出指定的 <see cref="T:System.Uri" /> 是否為檔案 URI。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，如果 <see cref="T:System.Uri" /> 是檔案 URI，則該值為 true，否則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">此執行個體表示相對的 URI，而此屬性只適用於絕對 URI。</exception>
    </member>
    <member name="M:System.Uri.IsHexDigit(System.Char)">
      <summary>判斷指定的字元是否為有效的十六進位數字。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，如果該字元為有效的十六進位數字，則該值為 true，否則為 false。</returns>
      <param name="character">要驗證的字元。</param>
    </member>
    <member name="P:System.Uri.IsLoopback">
      <summary>取得指定的 <see cref="T:System.Uri" /> 是否參考本端主機。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，如果此 <see cref="T:System.Uri" /> 參考本機主機，則該值為 true，否則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">此執行個體表示相對的 URI，而此屬性只適用於絕對 URI。</exception>
    </member>
    <member name="P:System.Uri.IsUnc">
      <summary>取得指定的 <see cref="T:System.Uri" /> 是否為通用命名慣例 (UNC) 路徑的資訊。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，如果 <see cref="T:System.Uri" /> 是 UNC 路徑，則該值為 true，否則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">這個屬性只適用於絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
    </member>
    <member name="M:System.Uri.IsWellFormedOriginalString">
      <summary>指出用來建構此 <see cref="T:System.Uri" /> 之字串是否語式正確 (Well-Formed)，且不需要進一步逸出。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，如果字串的語式正式則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
      <summary>指出字串是否格式正確，方法是先嘗試使用字串建構出 <see cref="T:System.Uri" />，然後確定該字串不需要進一步逸出處理。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，如果字串的格式正確且依據 RFC 3986 建構時，則該值為 true，否則為 false。</returns>
      <param name="uriString">以字串表示的 <see cref="T:System.Uri" />。</param>
      <param name="uriKind">
        <paramref name="uriString" /> 參數中的 URI 型別。</param>
    </member>
    <member name="P:System.Uri.LocalPath">
      <summary>取得檔案名稱的本機作業系統表示。</summary>
      <returns>
        <see cref="T:System.String" />，包含檔案名稱的本機作業系統表示。</returns>
      <exception cref="T:System.InvalidOperationException">這個屬性只適用於絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
    </member>
    <member name="M:System.Uri.MakeRelativeUri(System.Uri)">
      <summary>判斷兩個 <see cref="T:System.Uri" /> 執行個體之間的差別。</summary>
      <returns>如果這個 URI 執行個體的主機名稱和配置與 <paramref name="toUri" /> 相同，則這個方法會傳回相 <see cref="T:System.Uri" />，而將它附加至目前 URI 執行個體時，會產生 <paramref name="toUri" />。如果主機名稱或配置不同，則這個方法會傳回表示 <paramref name="toUri" /> 參數的 <see cref="T:System.Uri" />。</returns>
      <param name="uri">要與目前的 URI 比較的 URI。</param>
      <exception cref="T:System.InvalidOperationException">此執行個體表示相對的 URI，而此屬性只適用於絕對 URI。</exception>
    </member>
    <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
      <summary>判斷兩個 <see cref="T:System.Uri" /> 執行個體是否具有相同的值。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，如果 <see cref="T:System.Uri" /> 執行個體相等，則該值為 true，否則為 false。</returns>
      <param name="uri1">要與 <paramref name="uri2" /> 比較的 <see cref="T:System.Uri" /> 執行個體。</param>
      <param name="uri2">要與 <paramref name="uri1" /> 比較的 <see cref="T:System.Uri" /> 執行個體。</param>
    </member>
    <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
      <summary>判斷兩個 <see cref="T:System.Uri" /> 執行個體是否沒有相同的值。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，如果兩個 <see cref="T:System.Uri" /> 執行個體不相等，則該值為 true，否則為 false。如果其中一個參數是 null，則此方法會傳回 true。</returns>
      <param name="uri1">要與 <paramref name="uri2" /> 比較的 <see cref="T:System.Uri" /> 執行個體。</param>
      <param name="uri2">要與 <paramref name="uri1" /> 比較的 <see cref="T:System.Uri" /> 執行個體。</param>
    </member>
    <member name="P:System.Uri.OriginalString">
      <summary>取得傳遞給 <see cref="T:System.Uri" /> 建構函式的原始 URI 字串。</summary>
      <returns>
        <see cref="T:System.String" />，包含此執行個體建構時指定的相同 URI，否則為 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.InvalidOperationException">此執行個體表示相對的 URI，而此屬性只適用於絕對 URI。</exception>
    </member>
    <member name="P:System.Uri.PathAndQuery">
      <summary>取得以問號 (?) 分隔的 <see cref="P:System.Uri.AbsolutePath" /> 和 <see cref="P:System.Uri.Query" /> 屬性。</summary>
      <returns>
        <see cref="T:System.String" />，包含以問號 (?) 分隔的 <see cref="P:System.Uri.AbsolutePath" /> 和 <see cref="P:System.Uri.Query" /> 屬性。</returns>
      <exception cref="T:System.InvalidOperationException">此執行個體表示相對的 URI，而此屬性只適用於絕對 URI。</exception>
    </member>
    <member name="P:System.Uri.Port">
      <summary>取得此 URI 的連接埠編號。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，包含此 URI 的通訊埠編號。</returns>
      <exception cref="T:System.InvalidOperationException">這個屬性只適用於絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
    </member>
    <member name="P:System.Uri.Query">
      <summary>取得指定的 URI 所包含的任何查詢資訊。</summary>
      <returns>
        <see cref="T:System.String" />，包含所指定 URI 中包含的任何查詢資訊。</returns>
      <exception cref="T:System.InvalidOperationException">這個屬性只適用於絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
    </member>
    <member name="P:System.Uri.Scheme">
      <summary>取得此 URI 的配置名稱。</summary>
      <returns>
        <see cref="T:System.String" />，包含此 URI 的配置 (轉換成小寫)。</returns>
      <exception cref="T:System.InvalidOperationException">這個屬性只適用於絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
    </member>
    <member name="F:System.Uri.SchemeDelimiter">
      <summary>指定會將通訊協定配置和 URI 的位址部分分隔開來的字元。此欄位為唯讀的。</summary>
    </member>
    <member name="P:System.Uri.Segments">
      <summary>取得陣列，包含構成指定 URI 的路徑區段。</summary>
      <returns>
        <see cref="T:System.String" /> 陣列，包含構成指定之 URI 的路徑片段。</returns>
      <exception cref="T:System.InvalidOperationException">此執行個體表示相對的 URI，而此屬性只適用於絕對 URI。</exception>
    </member>
    <member name="M:System.Uri.ToString">
      <summary>取得指定之 <see cref="T:System.Uri" /> 執行個體的標準字串表示。</summary>
      <returns>
        <see cref="T:System.String" /> 執行個體，含有 <see cref="T:System.Uri" /> 執行個體未逸出的標準表示。除了 #、? 和 % 以外，不逸出所有字元。</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)">
      <summary>使用指定的 <see cref="T:System.String" /> 執行個體和 <see cref="T:System.UriKind" />，建立新的 <see cref="T:System.Uri" />。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，如果成功建立 <see cref="T:System.Uri" /> 則為 true，否則為 false。</returns>
      <param name="uriString">
        <see cref="T:System.String" />，表示 <see cref="T:System.Uri" />。</param>
      <param name="uriKind">URI 的型別。</param>
      <param name="result">當此方法傳回時，會包含建構的 <see cref="T:System.Uri" />。</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)">
      <summary>使用指定的基底和相對 <see cref="T:System.Uri" /> 執行個體，建立新的 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，如果成功建立 <see cref="T:System.Uri" /> 則為 true，否則為 false。</returns>
      <param name="baseUri">基底 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">相對 <see cref="T:System.Uri" />，表示為要加入基底 <see cref="T:System.Uri" /> 的 <see cref="T:System.String" />。</param>
      <param name="result">當這個方法傳回時，含有從 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 建構的 <see cref="T:System.Uri" />。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)">
      <summary>使用指定的基底和相對 <see cref="T:System.Uri" /> 執行個體，建立新的 <see cref="T:System.Uri" />。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，如果成功建立 <see cref="T:System.Uri" /> 則為 true，否則為 false。</returns>
      <param name="baseUri">基底 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">要加入至基底 <see cref="T:System.Uri" /> 的相對 <see cref="T:System.Uri" />。</param>
      <param name="result">當這個方法傳回時，含有從 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 建構的 <see cref="T:System.Uri" />。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Uri.UnescapeDataString(System.String)">
      <summary>將字串轉換為它的未逸出表示。</summary>
      <returns>
        <see cref="T:System.String" />，包含 <paramref name="stringToUnescape" /> 的未逸出表示。</returns>
      <param name="stringToUnescape">不要逸出的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToUnescape" /> 為 null。</exception>
    </member>
    <member name="F:System.Uri.UriSchemeFile">
      <summary>指定 URI 為檔案的指標。此欄位為唯讀的。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeFtp">
      <summary>指定 URI 要透過檔案傳輸通訊協定 (File Transfer Protocol，FTP) 存取。此欄位為唯讀的。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeGopher">
      <summary>指定 URI 要透過 Gopher 通訊協定存取。此欄位為唯讀的。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttp">
      <summary>指定 URI 要透過超文字傳輸協定 (Hypertext Transfer Protocol，HTTP) 存取。此欄位為唯讀的。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttps">
      <summary>指定 URI 要透過安全超文字傳輸協定 (Secure Hypertext Transfer Protocol，HTTPS) 存取。此欄位為唯讀的。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeMailto">
      <summary>指定 URI 為電子郵件地址，並且要透過 Simple Mail Transport Protocol (SMTP) 存取。此欄位為唯讀的。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetPipe">
      <summary>指定 URI 會透過 "Indigo" 系統的 NetPipe 配置來存取。此欄位為唯讀的。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetTcp">
      <summary>指定 URI 會透過 "Indigo" 系統的 NetTcp 配置來存取。此欄位為唯讀的。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNews">
      <summary>指定 URI 為網際網路新聞群組，並且要透過 Network News Transport Protocol (NNTP) 存取。此欄位為唯讀的。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNntp">
      <summary>指定 URI 為網際網路新聞群組，並且要透過 Network News Transport Protocol (NNTP) 存取。此欄位為唯讀的。</summary>
    </member>
    <member name="P:System.Uri.UserEscaped">
      <summary>表示 URI 字串是在 <see cref="T:System.Uri" /> 執行個體建立之前完全逸出。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，如果在建立 <see cref="T:System.Uri" /> 執行個體時 <paramref name="dontEscape" /> 參數設為 true 則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Uri.UserInfo">
      <summary>取得與指定 URI 關聯的使用者名稱、密碼或其他使用者特定的資訊。</summary>
      <returns>
        <see cref="T:System.String" />，包含與 URI 相關聯的使用者資訊。傳回值不包含 '@' 保留字元，它是用來分隔 URI 的使用者資訊部分。</returns>
      <exception cref="T:System.InvalidOperationException">這個屬性只適用於絕對 <see cref="T:System.Uri" /> 執行個體。</exception>
    </member>
    <member name="T:System.UriBuilder">
      <summary>提供統一資源識別項 (URI) 的自訂建構函式，並修改 <see cref="T:System.Uri" /> 類別的 URI。</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>初始化 <see cref="T:System.UriBuilder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>使用指定的 URI 來初始化 <see cref="T:System.UriBuilder" /> 類別的新執行個體。</summary>
      <param name="uri">URI 字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 為 null。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uri" /> 是長度為零的字串或含有空格。-或-在無效表單中剖析常式偵測配置。-或-剖析器在 URI 中偵測到超過兩個連續斜線，而 URI 並不使用「檔案」名稱。-或-<paramref name="uri" /> 不是有效的 URI。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>使用指定的配置和主機來初始化 <see cref="T:System.UriBuilder" /> 類別的新執行個體。</summary>
      <param name="schemeName">網際網路存取通訊協定。</param>
      <param name="hostName">DNS 式網域名稱或 IP 位址。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="schemeName" /> 不是合法的配置名稱。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>使用指定的配置、主機和連接埠來初始化 <see cref="T:System.UriBuilder" /> 類別的新執行個體。</summary>
      <param name="scheme">網際網路存取通訊協定。</param>
      <param name="host">DNS 式網域名稱或 IP 位址。</param>
      <param name="portNumber">服務的 IP 連接埠編號。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="scheme" /> 不是合法的配置名稱。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="portNumber" /> 小於 0 或大於 65,535。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>使用指定的配置、主機、連接埠編號和路徑來初始化 <see cref="T:System.UriBuilder" /> 類別的新執行個體。</summary>
      <param name="scheme">網際網路存取通訊協定。</param>
      <param name="host">DNS 式網域名稱或 IP 位址。</param>
      <param name="port">服務的 IP 連接埠編號。</param>
      <param name="pathValue">網際網路資源的路徑。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="scheme" /> 不是合法的配置名稱。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小於 0 或大於 65,535。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>使用指定的配置、主機、連接埠編號、路徑和查詢字串或片段識別項來初始化 <see cref="T:System.UriBuilder" /> 類別的新執行個體。</summary>
      <param name="scheme">網際網路存取通訊協定。</param>
      <param name="host">DNS 式網域名稱或 IP 位址。</param>
      <param name="port">服務的 IP 連接埠編號。</param>
      <param name="path">網際網路資源的路徑。</param>
      <param name="extraValue">查詢字串或片段識別項。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="extraValue" /> 不是 null 也不是 <see cref="F:System.String.Empty" />，有效片段識別項不是以數字符號 (#) 開頭，有效查詢字串也不是以問號 (?) 開頭。-或-<paramref name="scheme" /> 不是有效的配置名稱。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小於 0 或大於 65,535。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>使用指定的 <see cref="T:System.Uri" /> 執行個體初始化 <see cref="T:System.UriBuilder" /> 類別的新執行個體。</summary>
      <param name="uri">
        <see cref="T:System.Uri" /> 類別的執行個體。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="uri" /> 為 null。</exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>比較現有的 <see cref="T:System.Uri" /> 執行個體和 <see cref="T:System.UriBuilder" /> 的內容，檢查是否相等。</summary>
      <returns>如果 <paramref name="rparam" /> 代表 <see cref="T:System.Uri" /> 與此 <see cref="T:System.UriBuilder" /> 執行個體所建構的 <see cref="T:System.Uri" /> 相同時，則為 true，否則為 false。</returns>
      <param name="rparam">要與目前執行個體比較的物件。</param>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>取得或設定 URI 的片段部分。</summary>
      <returns>URI 的片段部分。片段識別項 ("#") 會加入至片段的開頭。</returns>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>傳回 URI 的雜湊程式碼。</summary>
      <returns>為 URI 所產生的雜湊程式碼。</returns>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>取得或設定伺服器的網域名稱系統 (DNS) 主機名稱或 IP 位址。</summary>
      <returns>伺服器的 DNS 主機名稱或 IP 位址。</returns>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>取得或設定存取 URI 之使用者的相關密碼。</summary>
      <returns>存取 URI 之使用者的密碼。</returns>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>取得或設定 URI 參考的資源路徑。</summary>
      <returns>URI 參考的資源路徑。</returns>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>取得或設定 URI 的連接埠編號。</summary>
      <returns>URI 的連接埠編號。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">連接埠編號不能設為小於 0 或大於 65,535。</exception>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>取得或設定 URI 所包含的任何查詢資訊。</summary>
      <returns>URI 所包含的查詢資訊。</returns>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>取得或設定 URI 的配置名稱。</summary>
      <returns>URI 的配置。</returns>
      <exception cref="T:System.ArgumentException">配置名稱只能設定為合法的配置名稱。</exception>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>傳回指定 <see cref="T:System.UriBuilder" /> 執行個體的顯示字串。</summary>
      <returns>字串，包含 <see cref="T:System.UriBuilder" /> 的未逸出顯示字串。</returns>
      <exception cref="T:System.UriFormatException">由 <see cref="T:System.UriBuilder" /> 屬性所建構的 URI 具有錯誤的使用者名稱和密碼 (<see cref="P:System.UriBuilder.UserName" /> 屬性為 null 或空字串，但是 <see cref="P:System.UriBuilder.Password" /> 屬性不是空的)。</exception>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>取得指定的 <see cref="T:System.UriBuilder" /> 執行個體所建構的 <see cref="T:System.Uri" /> 執行個體。</summary>
      <returns>
        <see cref="T:System.Uri" />，包含由 <see cref="T:System.UriBuilder" /> 建構的 URI。</returns>
      <exception cref="T:System.UriFormatException">由 <see cref="T:System.UriBuilder" /> 屬性所建構的 URI 是無效的。</exception>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>存取 URI 之使用者的相關使用者名稱。</summary>
      <returns>存取 URI 之使用者的使用者名稱。</returns>
    </member>
    <member name="T:System.UriComponents">
      <summary>指定 <see cref="T:System.Uri" /> 的組件。</summary>
    </member>
    <member name="F:System.UriComponents.AbsoluteUri">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.UserInfo" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" />、<see cref="P:System.Uri.Query" /> 和 <see cref="P:System.Uri.Fragment" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.Fragment">
      <summary>
        <see cref="P:System.Uri.Fragment" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.Host">
      <summary>
        <see cref="P:System.Uri.Host" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.HostAndPort">
      <summary>
        <see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 資料。如果 Uri 中沒有連接埠資料，並且已經指派預設連接埠給 <see cref="P:System.Uri.Scheme" />，則會傳回預設連接埠。如果沒有預設連接埠，則會傳回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.HttpRequestUrl">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" /> 和 <see cref="P:System.Uri.Query" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.KeepDelimiter">
      <summary>指定分隔符號應包含在內。</summary>
    </member>
    <member name="F:System.UriComponents.NormalizedHost">
      <summary>
        <see cref="P:System.Uri.Host" /> 的正規化格式。</summary>
    </member>
    <member name="F:System.UriComponents.Path">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.PathAndQuery">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> 和 <see cref="P:System.Uri.Query" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.Port">
      <summary>
        <see cref="P:System.Uri.Port" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.Query">
      <summary>
        <see cref="P:System.Uri.Query" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.Scheme">
      <summary>
        <see cref="P:System.Uri.Scheme" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.SchemeAndServer">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 資料。</summary>
    </member>
    <member name="F:System.UriComponents.SerializationInfoString">
      <summary>URI 序列化程式所需要的完整 <see cref="T:System.Uri" /> 內容。內容中包含了 IPv6 範圍。</summary>
    </member>
    <member name="F:System.UriComponents.StrongAuthority">
      <summary>
        <see cref="P:System.Uri.UserInfo" />、<see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 資料。如果 <see cref="T:System.Uri" /> 中沒有連接埠資料，並且已經指派預設連接埠給 <see cref="P:System.Uri.Scheme" />，則會傳回預設連接埠。如果沒有預設連接埠，則會傳回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.StrongPort">
      <summary>
        <see cref="P:System.Uri.Port" /> 資料。如果 <see cref="T:System.Uri" /> 中沒有連接埠資料，並且已經指派預設連接埠給 <see cref="P:System.Uri.Scheme" />，則會傳回預設連接埠。如果沒有預設連接埠，則會傳回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.UserInfo">
      <summary>
        <see cref="P:System.Uri.UserInfo" /> 資料。</summary>
    </member>
    <member name="T:System.UriFormat">
      <summary>控制 URI 資訊的逸出方式。</summary>
    </member>
    <member name="F:System.UriFormat.SafeUnescaped">
      <summary>在所要求的 URI 元件中，有保留意義的字元仍維持逸出。其他字元則不逸出。請參閱＜備註＞。</summary>
    </member>
    <member name="F:System.UriFormat.Unescaped">
      <summary>不執行逸出。</summary>
    </member>
    <member name="F:System.UriFormat.UriEscaped">
      <summary>依據 RFC 3986 規則執行逸出。</summary>
    </member>
    <member name="T:System.UriFormatException">
      <summary>當偵測到無效的統一資源識別項 (URI) 時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor">
      <summary>初始化 <see cref="T:System.UriFormatException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String)">
      <summary>使用指定的訊息來初始化 <see cref="T:System.UriFormatException" /> 類別的新執行個體。</summary>
      <param name="textString">錯誤訊息字串。</param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.UriFormatException" /> 類別的新執行個體，並含有指定的訊息，以及對於引發此例外之內部例外的參考。</summary>
      <param name="textString">錯誤訊息字串。</param>
      <param name="e">造成目前例外狀況的例外。如果 <paramref name="e" /> 參數不是 null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。 </param>
    </member>
    <member name="T:System.UriHostNameType">
      <summary>定義 <see cref="M:System.Uri.CheckHostName(System.String)" /> 方法的主機名稱類型。</summary>
    </member>
    <member name="F:System.UriHostNameType.Basic">
      <summary>主機已設定，但是無法判斷類型。</summary>
    </member>
    <member name="F:System.UriHostNameType.Dns">
      <summary>主機名稱為網域名稱系統 (DNS) 型別主機名稱。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv4">
      <summary>主機名稱是網際網路通訊協定 (IP) 4 版主機位址。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv6">
      <summary>主機名稱是網際網路通訊協定 (IP) 6 版主機位址。</summary>
    </member>
    <member name="F:System.UriHostNameType.Unknown">
      <summary>無法提供主機名稱類型。</summary>
    </member>
    <member name="T:System.UriIdnScope">
      <summary>提供用於進行 Internationalized Domain Name 剖析組態設定的可能值。</summary>
    </member>
    <member name="F:System.UriIdnScope.All">
      <summary>此值會將任何 Unicode 網域名稱轉換成 Punycode 的對等名稱 (IDN 名稱)。</summary>
    </member>
    <member name="F:System.UriIdnScope.AllExceptIntranet">
      <summary>此值會將所有外部 Unicode 網域名稱轉換成使用 Punycode 的對等名稱 (IDN 名稱)。此例中，若要在近端內部網路上處理國際性名稱，則用於內部網路的 DNS 伺服器應該支援 Unicode 名稱。</summary>
    </member>
    <member name="F:System.UriIdnScope.None">
      <summary>此值不會轉換任何 Unicode 網域名稱即可使用 Punycode。這是預設值，與 .NET Framework 2.0 的行為一致。</summary>
    </member>
    <member name="T:System.UriKind">
      <summary>為數個 <see cref="Overload:System.Uri.#ctor" /> 方法，定義 <see cref="T:System.Uri" /> 的種類。</summary>
    </member>
    <member name="F:System.UriKind.Absolute">
      <summary>Uri 是絕對 Uri。</summary>
    </member>
    <member name="F:System.UriKind.Relative">
      <summary>Uri 是相對 Uri。</summary>
    </member>
    <member name="F:System.UriKind.RelativeOrAbsolute">
      <summary>Uri 類型不定。</summary>
    </member>
    <member name="T:System.UriParser">
      <summary>剖析新的 URI 配置。此類別為 abstract。</summary>
    </member>
    <member name="M:System.UriParser.#ctor">
      <summary>建構預設 URI 剖析器。</summary>
    </member>
    <member name="M:System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)">
      <summary>從 URI 取得元件。</summary>
      <returns>包含元件的字串。</returns>
      <param name="uri">要剖析的 <see cref="T:System.Uri" />。</param>
      <param name="components">要從 <paramref name="uri" /> 擷取的 <see cref="T:System.UriComponents" />。</param>
      <param name="format">其中一個 <see cref="T:System.UriFormat" /> 值，控制特殊字元的逸出方式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> 是無效的。-或-<paramref name="components" /> 不是有效 <see cref="T:System.UriComponents" /> 值的結合。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="uri" /> 需要使用者驅動的剖析。-或-<paramref name="uri" /> 不是絕對 URI。相對 URI 不能用於此方法。</exception>
    </member>
    <member name="M:System.UriParser.InitializeAndValidate(System.Uri,System.UriFormatException@)">
      <summary>初始化剖析器狀態並驗證 URI。</summary>
      <param name="uri">要驗證的 <see cref="T:System.Uri" />。</param>
      <param name="parsingError">驗證錯誤，如果有的話。</param>
    </member>
    <member name="M:System.UriParser.IsBaseOf(System.Uri,System.Uri)">
      <summary>判斷 <paramref name="baseUri" /> 是否為 <paramref name="relativeUri" /> 的基底 URI。</summary>
      <returns>如果 <paramref name="baseUri" /> 是 <paramref name="relativeUri" /> 的基底 URI 則為 true，否則為 false。</returns>
      <param name="baseUri">基底 URI。</param>
      <param name="relativeUri">要測試的 URI。</param>
    </member>
    <member name="M:System.UriParser.IsKnownScheme(System.String)">
      <summary>指出配置的剖析器是否已註冊。</summary>
      <returns>如果 <paramref name="schemeName" /> 已經註冊則為 true，否則為 false。</returns>
      <param name="schemeName">要進行檢查的配置名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemeName" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="schemeName" /> 參數無效。</exception>
    </member>
    <member name="M:System.UriParser.IsWellFormedOriginalString(System.Uri)">
      <summary>指出 URI 是否語式正確。</summary>
      <returns>如果 <paramref name="uri" /> 的語式正確則為 true，否則為 false。</returns>
      <param name="uri">要進行檢查的 URI。</param>
    </member>
    <member name="M:System.UriParser.OnNewUri">
      <summary>由 <see cref="T:System.Uri" /> 建構函式以取得 <see cref="T:System.UriParser" /> 執行個體</summary>
      <returns>建構之 <see cref="T:System.Uri" /> 的 <see cref="T:System.UriParser" />。</returns>
    </member>
    <member name="M:System.UriParser.OnRegister(System.String,System.Int32)">
      <summary>當 <see cref="T:System.UriParser" /> 方法已註冊時，由 Framework 叫用。</summary>
      <param name="schemeName">與此 <see cref="T:System.UriParser" /> 相關聯的配置。</param>
      <param name="defaultPort">配置的連接埠編號。</param>
    </member>
    <member name="M:System.UriParser.Register(System.UriParser,System.String,System.Int32)">
      <summary>使配置和連接埠編號與 <see cref="T:System.UriParser" /> 產生關聯。</summary>
      <param name="uriParser">要登錄的 <see cref="T:System.UriParser" />。</param>
      <param name="schemeName">與此剖析器相關聯的配置名稱。</param>
      <param name="defaultPort">指定配置的預設連接埠編號。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriParser" /> 參數為 null。-或-<paramref name="schemeName" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="schemeName" /> 參數無效。-或-<paramref name="defaultPort" /> 參數無效。<paramref name="defaultPort" /> 參數不能小於零或大於 65534。</exception>
    </member>
    <member name="M:System.UriParser.Resolve(System.Uri,System.Uri,System.UriFormatException@)">
      <summary>由 <see cref="T:System.Uri" /> 建構函式和 <see cref="Overload:System.Uri.TryCreate" /> 呼叫，以解析相對 URI。</summary>
      <returns>已解析相對 <see cref="T:System.Uri" /> 的字串。</returns>
      <param name="baseUri">基底 URI。</param>
      <param name="relativeUri">相對 URI。</param>
      <param name="parsingError">解析處理序期間發生的錯誤，如果有的話。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="baseUri" /> 參數不是絕對 <see cref="T:System.Uri" />-或-<paramref name="baseUri" /> 參數需要使用者驅動的剖析。</exception>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary>將 <see cref="T:System.String" /> 型別的執行個體轉換為 <see cref="T:System.Uri" /> 執行個體。</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary>初始化 <see cref="T:System.UriTypeConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>判斷此轉換子是否可以將指定之來源型別的物件轉換為 <see cref="T:System.Uri" /> 型別的執行個體。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，如果此轉換子可將指定的型別轉換成 <see cref="T:System.Uri" /> 的執行個體，則該值為 true，否則為 false。</returns>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceType" /> 為 null (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>傳回值，指出此轉換子是否可以使用指定的內容，將物件轉換為指定的型別。</summary>
      <returns>
        <see cref="T:System.Boolean" /> 值，如果 <paramref name="destinationType" /> 的型別為 <see cref="T:System.String" /> 或 <see cref="T:System.Uri" />，則該值為 true，否則為 false。</returns>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，表示要轉換的目標型別。</param>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的內容和文化特性資訊，將指定物件轉換為此轉換子的型別。</summary>
      <returns>
        <see cref="T:System.Uri" /> 執行個體，表示轉換後的 <see cref="T:System.Object" />。如果 <paramref name="value" /> 參數為 null，則會傳回 null 。</returns>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">當做目前文化特性 (Culture) 使用的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要轉換成 <see cref="T:System.Uri" /> 執行個體的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。如果 <paramref name="value" /> 並非 <see cref="T:System.String" /> 也不是 <see cref="T:System.Uri" /> 型別，或者 <paramref name="value" /> 參數不支援 <paramref name="context" /> 或 <paramref name="culture" /> 參數，就會發生此例外狀況。</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>會使用指定的內容和文化特性資訊，將指定值物件轉換為指定的型別。</summary>
      <returns>
        <see cref="T:System.Object" />，表示轉換的值。</returns>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。如果傳遞 null，則會採用目前的文化特性。</param>
      <param name="value">要轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要將 <paramref name="value" /> 參數轉換的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 參數為 null。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratedCodeAttribute">
      <summary>識別由工具所產生的程式碼。無法繼承此類別。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.GeneratedCodeAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.GeneratedCodeAttribute" /> 類別的新執行個體。</summary>
      <param name="tool">產生程式碼的工具名稱。</param>
      <param name="version">產生程式碼的工具版本。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Tool">
      <summary>取得產生程式碼的工具名稱。</summary>
      <returns>產生程式碼的工具名稱。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Version">
      <summary>取得產生程式碼的工具版本。</summary>
      <returns>產生程式碼的工具版本。</returns>
    </member>
    <member name="T:System.Collections.Generic.ISet`1">
      <summary>為資料集的抽象提供基底介面。</summary>
      <typeparam name="T">資料集中元素的型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
      <summary>將元素加入至目前資料集，並傳回表示是否成功加入元素的值。</summary>
      <returns>如果項目加入至資料集則為 true，如果項目已經在資料集中，則為 false。</returns>
      <param name="item">要加入至資料集的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>從目前的資料集中，移除指定之集合內的所有元素。</summary>
      <param name="other">要從資料集移除的項目集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其僅包含同時也在指定之集合中出現的元素。</summary>
      <param name="other">要與目前資料集比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否為指定之集合的屬性 (嚴格) 子集。</summary>
      <returns>如果目前資料集是 <paramref name="other" /> 的正確子集則為 true，否則為 false。</returns>
      <param name="other">要與目前資料集比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否為指定之集合的正確超集。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ISet`1" /> 物件是 <paramref name="other" /> 的正確超集則為 true，否則為 false。</returns>
      <param name="other">要與目前資料集比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷資料集是否為指定之集合的子集。</summary>
      <returns>如果目前資料集是 <paramref name="other" /> 的子集則為 true，否則為 false。</returns>
      <param name="other">要與目前資料集比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否為指定之集合的超集。</summary>
      <returns>如果目前資料集是 <paramref name="other" /> 的超集則為 true，否則為 false。</returns>
      <param name="other">要與目前資料集比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集是否與指定的集合重疊。</summary>
      <returns>如果目前的資料集和 <paramref name="other" /> 至少共用一個通用項目則為 true，否則為 false。</returns>
      <param name="other">要與目前資料集比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的資料集和指定的集合是否包含相同元素。</summary>
      <returns>如果目前的資料集等於 <paramref name="other" /> 則為 true，否則為 false。</returns>
      <param name="other">要與目前資料集比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其僅包含目前資料集或指定之集合 (但非兩者) 中出現的元素。</summary>
      <param name="other">要與目前資料集比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的資料集，使其包含目前資料集和指定之集合中同時出現的所有元素。</summary>
      <param name="other">要與目前資料集比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
      <summary>表示雙向連結串列 (Doubly-Linked List)。</summary>
      <typeparam name="T">指定連結串列的元素型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 類別的新執行個體，此執行個體是空白的。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 類別的新執行個體，其包含從指定之 <see cref="T:System.Collections.IEnumerable" /> 複製的元素，且具有容納複製之元素數目的足夠容量。</summary>
      <param name="collection">
        <see cref="T:System.Collections.IEnumerable" />，要將其元素複製到新的 <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中指定的現有節點後加入指定的新節點。</summary>
      <param name="node">要在其後插入 <paramref name="newNode" /> 的 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="newNode">要加入至 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 為 null。-或-<paramref name="newNode" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在目前的 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。-或-<paramref name="newNode" /> 屬於另一個 <see cref="T:System.Collections.Generic.LinkedList`1" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中指定的現有節點後加入包含指定值的新節點。</summary>
      <returns>包含 <paramref name="value" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />，要在其後插入包含 <paramref name="value" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="value">要加入至 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在目前的 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中指定的現有節點前加入指定的新節點。</summary>
      <param name="node">要在其前插入 <paramref name="newNode" /> 的 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="newNode">要加入至 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 為 null。-或-<paramref name="newNode" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在目前的 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。-或-<paramref name="newNode" /> 屬於另一個 <see cref="T:System.Collections.Generic.LinkedList`1" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中指定的現有節點前加入包含指定值的新節點。</summary>
      <returns>包含 <paramref name="value" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />，要在其前插入包含 <paramref name="value" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="value">要加入至 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在目前的 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
      <summary>在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的開頭加入指定的新節點。</summary>
      <param name="node">要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 開頭加入的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 屬於另一個 <see cref="T:System.Collections.Generic.LinkedList`1" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
      <summary>在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的開頭加入包含指定值的新節點。</summary>
      <returns>包含 <paramref name="value" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 開頭加入的值。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
      <summary>在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的結尾加入指定的新節點。</summary>
      <param name="node">要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 結尾加入的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 屬於另一個 <see cref="T:System.Collections.Generic.LinkedList`1" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
      <summary>在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的結尾加入包含指定值的新節點。</summary>
      <returns>包含 <paramref name="value" /> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 結尾加入的值。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
      <summary>移除 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中的所有節點。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
      <summary>判斷值是否在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中找到 <paramref name="value" />，則為 true，否則為 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中尋找的值。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
      <summary>從目標陣列的指定索引開始，複製整個 <see cref="T:System.Collections.Generic.LinkedList`1" /> 至相容的一維 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.LinkedList`1" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 等於或大於 <paramref name="array" /> 的長度。-或-<paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中的項目數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
      <summary>取得在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中實際包含的節點數。</summary>
      <returns>在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中實際包含的節點數。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
      <summary>尋找包含指定值的第 1 個節點。</summary>
      <returns>如果找到，則為包含指定值的第 1 個 <see cref="T:System.Collections.Generic.LinkedListNode`1" />，否則為 null。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中尋找的值。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
      <summary>尋找包含指定值的最後 1 個節點。</summary>
      <returns>如果找到，則為包含指定值的最後 1 個 <see cref="T:System.Collections.Generic.LinkedListNode`1" />，否則為 null。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中尋找的值。</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
      <summary>取得 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的第 1 個節點。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 的第 1 個 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
      <summary>傳回逐一查看 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 的 <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
      <summary>取得 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的最後 1 個節點。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 的最後 1 個 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
      <summary>從 <see cref="T:System.Collections.Generic.LinkedList`1" /> 移除指定的節點。</summary>
      <param name="node">要從 <see cref="T:System.Collections.Generic.LinkedList`1" /> 移除的 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在目前的 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
      <summary>從 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中移除第一次出現的指定值。</summary>
      <returns>如果已成功移除含有 <paramref name="value" /> 的項目則為 true，否則為 false。如果在原始的 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中找不到 <paramref name="value" />，這個方法也會傳回 false。</returns>
      <param name="value">要從 <see cref="T:System.Collections.Generic.LinkedList`1" /> 移除的值。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
      <summary>移除 <see cref="T:System.Collections.Generic.LinkedList`1" /> 開頭的節點。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 是空的。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
      <summary>移除 <see cref="T:System.Collections.Generic.LinkedList`1" /> 結尾的節點。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 是空的。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>將項目加入至 <see cref="T:System.Collections.Generic.ICollection`1" /> 的結尾。</summary>
      <param name="value">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 結尾加入的值。</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的，則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回在集合中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Array" /> 索引開始，將 <see cref="T:System.Collections.ICollection" /> 的項目複製至 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-<paramref name="array" /> 沒有以零起始的索引。-或-來源 <see cref="T:System.Collections.ICollection" /> 中的元素數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。-或-來源 <see cref="T:System.Collections.ICollection" /> 的型別無法自動轉換為目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出對 <see cref="T:System.Collections.ICollection" /> 的存取是否為同步 (安全執行緒)。</summary>
      <returns>如果 <see cref="T:System.Collections.ICollection" /> 的存取已同步處理 (執行緒安全) 則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
      <summary>取得可用來對 <see cref="T:System.Collections.ICollection" /> 進行同步存取的物件。</summary>
      <returns>可用來對 <see cref="T:System.Collections.ICollection" /> 同步存取的物件。在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的預設實作中，這個屬性永遠會傳回目前的執行個體。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回做為集合逐一查看連結串列的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用來做為集合逐一查看連結串列。</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
      <summary>列舉 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉值目前位置的 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中的項目。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
      <summary>釋放 <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
      <summary>將列舉值前移至 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的下一個項目。</summary>
      <returns>如果列舉程式成功地前移至下一個元素則為 true，如果列舉程式已超過集合的結尾，則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉程式目前位置的集合中的元素。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>設定列舉程式至它的初始位置，這是在集合中第 1 個元素之前。無法繼承此類別。</summary>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。</exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
      <summary>表示 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中的節點。無法繼承此類別。</summary>
      <typeparam name="T">指定連結串列的元素型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
      <summary>初始化 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 類別 (含有指定的值) 的新執行個體。</summary>
      <param name="value">要在 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 中包含的值。</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
      <summary>取得 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 所屬的 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 所屬之 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的參考；如果未連結 <see cref="T:System.Collections.Generic.LinkedListNode`1" />，則為 null。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
      <summary>取得 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中的下一個節點。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 中下一個節點的參考，如果目前節點是 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的最後一個項目 (<see cref="P:System.Collections.Generic.LinkedList`1.Last" />)，則為 null。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
      <summary>取得 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中的上一個節點。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 中上一個節點的參考，如果目前節點是 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的第一個項目 (<see cref="P:System.Collections.Generic.LinkedList`1.First" />)，則為 null。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
      <summary>取得包含於節點中的值。</summary>
      <returns>包含於節點中的值。</returns>
    </member>
    <member name="T:System.Collections.Generic.Queue`1">
      <summary>表示物件的先進先出 (FIFO) 集合。</summary>
      <typeparam name="T">指定佇列中元素的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 類別的新執行個體，其為空白執行個體且具有預設的初始容量。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 類別的新執行個體，其包含從指定之集合複製的元素，且具有容納複製之元素數目的足夠容量。</summary>
      <param name="collection">集合，要將其元素複製到新的 <see cref="T:System.Collections.Generic.Queue`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 類別的新執行個體，其為空白執行個體且具有指定的初始容量。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Queue`1" /> 可包含的元素初始數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
      <summary>從 <see cref="T:System.Collections.Generic.Queue`1" /> 移除所有物件。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
      <summary>判斷某元素是否在 <see cref="T:System.Collections.Generic.Queue`1" /> 中。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.Queue`1" /> 中找到 <paramref name="item" />，則為 true，否則為 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.Queue`1" /> 中尋找的物件。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
      <summary>從指定的陣列索引處開始，複製 <see cref="T:System.Collections.Generic.Queue`1" /> 元素至現有一維 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.Queue`1" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.Generic.Queue`1" /> 中的項目數量大於從 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
      <summary>取得 <see cref="T:System.Collections.Generic.Queue`1" /> 中所包含的元素數。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> 中所包含的項目數。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
      <summary>移除並傳回在 <see cref="T:System.Collections.Generic.Queue`1" /> 前端的物件。</summary>
      <returns>從 <see cref="T:System.Collections.Generic.Queue`1" /> 前端移除的物件。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" /> 是空的。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
      <summary>將物件加入至 <see cref="T:System.Collections.Generic.Queue`1" /> 的結尾。</summary>
      <param name="item">要加入至 <see cref="T:System.Collections.Generic.Queue`1" /> 的物件。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
      <summary>傳回逐一查看 <see cref="T:System.Collections.Generic.Queue`1" /> 的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> 的 <see cref="T:System.Collections.Generic.Queue`1.Enumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
      <summary>傳回 <see cref="T:System.Collections.Generic.Queue`1" /> 前端的物件而不需移除它。</summary>
      <returns>在 <see cref="T:System.Collections.Generic.Queue`1" /> 前端的物件。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" /> 是空的。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回在集合中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Array" /> 索引開始，將 <see cref="T:System.Collections.ICollection" /> 的項目複製至 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-<paramref name="array" /> 沒有以零起始的索引。-或-來源 <see cref="T:System.Collections.ICollection" /> 中的元素數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。-或-來源 <see cref="T:System.Collections.ICollection" /> 的型別無法自動轉換為目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出對 <see cref="T:System.Collections.ICollection" /> 的存取是否為同步 (安全執行緒)。</summary>
      <returns>如果 <see cref="T:System.Collections.ICollection" /> 的存取已同步處理 (執行緒安全) 則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.Queue`1" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
      <summary>取得可用來對 <see cref="T:System.Collections.ICollection" /> 進行同步存取的物件。</summary>
      <returns>可用來對 <see cref="T:System.Collections.ICollection" /> 同步存取的物件。在 <see cref="T:System.Collections.Generic.Queue`1" /> 的預設實作中，這個屬性永遠會傳回目前的執行個體。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回在集合中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
      <summary>將 <see cref="T:System.Collections.Generic.Queue`1" /> 元素複製到新的陣列。</summary>
      <returns>新的陣列，包含複製自 <see cref="T:System.Collections.Generic.Queue`1" /> 的元素。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
      <summary>如果該數目小於目前容量的 90%，則將容量設為 <see cref="T:System.Collections.Generic.Queue`1" /> 中元素的實際數目。</summary>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator">
      <summary>列舉 <see cref="T:System.Collections.Generic.Queue`1" /> 的項目。</summary>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉值目前位置的 <see cref="T:System.Collections.Generic.Queue`1" /> 中的項目。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
      <summary>釋放 <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
      <summary>將列舉值前移至 <see cref="T:System.Collections.Generic.Queue`1" /> 的下一個項目。</summary>
      <returns>如果列舉程式成功地前移至下一個元素則為 true，如果列舉程式已超過集合的結尾，則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉程式目前位置的集合中的元素。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。 </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>設定列舉程式至它的初始位置，這是在集合中第 1 個元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2">
      <summary>表示根據索引鍵，所排序的索引鍵/值組集合。</summary>
      <typeparam name="TKey">字典中的索引鍵型別。</typeparam>
      <typeparam name="TValue">字典中的值型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 類別的新執行個體，其為空且為索引鍵型別使用預設的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 類別的新執行個體，其為空且使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作來比較索引鍵。</summary>
      <param name="comparer">在比較索引鍵時所使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作，或是 null 以便對索引鍵的型別使用預設 <see cref="T:System.Collections.Generic.Comparer`1" />。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 類別的新執行個體，其包含從指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 所複製的元素，並為索引鍵型別使用預設的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作。</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，要將其元素複製到新的 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一或多個重複的索引鍵。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 類別的新執行個體，其包含從指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 所複製的元素，並使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作來比較索引鍵。</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，要將其元素複製到新的 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</param>
      <param name="comparer">在比較索引鍵時所使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作，或是 null 以便對索引鍵的型別使用預設 <see cref="T:System.Collections.Generic.Comparer`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一或多個重複的索引鍵。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)">
      <summary>將有指定索引鍵和數值的元素加入 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</summary>
      <param name="key">要加入的元素的索引鍵。</param>
      <param name="value">要加入之元素的值。在參考型別中，此值可以是 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中已存在具有相同索引鍵的項目。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Clear">
      <summary>從 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 移除所有元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Comparer">
      <summary>取得 <see cref="T:System.Collections.Generic.IComparer`1" />，用於排序 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的項目。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IComparer`1" />，用於排序 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的項目</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)">
      <summary>判斷 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 是否包含具有指定之索引鍵的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 包含具有所指定索引鍵的項目則為 true，否則為 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中尋找的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)">
      <summary>判斷 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 是否包含具有指定值的項目。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 包含具有所指定值的項目則為 true，否則為 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中尋找的值。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>從指定索引處開始，複製 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的項目至 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 結構的指定陣列。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 結構的一維陣列，是從目前 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 複製過來之項目的目的端。陣列必須有以零起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的項目數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Count">
      <summary>取得 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中所包含的索引鍵/值組數目。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中所包含的索引鍵/值組數目。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.GetEnumerator">
      <summary>傳回逐一查看 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的 <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Item(`0)">
      <summary>取得或設定與指定的索引鍵相關聯的值。</summary>
      <returns>與指定的索引鍵相關聯的值。如果找不到指定的索引鍵，則取得作業會擲回 <see cref="T:System.Collections.Generic.KeyNotFoundException" />，且設定作業會使用指定的索引鍵建立新元素。</returns>
      <param name="key">要取得或設定之值的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">會擷取屬性，且 <paramref name="key" /> 不存在於集合中。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Keys">
      <summary>取得集合，包含 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />，包含 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Remove(`0)">
      <summary>從 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 移除包含指定索引鍵的元素。</summary>
      <returns>如果已成功移除元素則為 true，否則為 false。如果在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中找不到 <paramref name="key" />，這個方法也會傳回 false。</returns>
      <param name="key">要移除之元素的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>將項目加入至 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <param name="keyValuePair">要加入至 <see cref="T:System.Collections.Generic.ICollection`1" /> 的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 結構。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyValuePair" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中已存在具有相同索引鍵的項目。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>判斷 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定索引鍵和值。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找到 <paramref name="keyValuePair" />，則為 true，否則為 false。</returns>
      <param name="keyValuePair">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中尋找的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 結構。</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的，則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>從 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除第一次出現的指定項目。</summary>
      <returns>如果已從 <see cref="T:System.Collections.Generic.ICollection`1" /> 成功移除 <paramref name="keyValuePair" /> 則為 true，否則為 false。如果在原始的 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找不到 <paramref name="keyValuePair" />，這個方法也會傳回 false。</returns>
      <param name="keyValuePair">要從 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 結構。</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的索引鍵。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>取得包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中值的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回在集合中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從指定的陣列索引處開始，將 <see cref="T:System.Collections.Generic.ICollection`1" /> 的元素複製到陣列。</summary>
      <param name="array">從 <see cref="T:System.Collections.Generic.ICollection`1" /> 複製的項目之目的地一維陣列。陣列必須具有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-<paramref name="array" /> 沒有以零起始的索引。-或-來源 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的項目數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。-或-來源 <see cref="T:System.Collections.Generic.ICollection`1" /> 的型別無法自動轉換為目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出對 <see cref="T:System.Collections.ICollection" /> 的存取是否為同步 (安全執行緒)。</summary>
      <returns>如果 <see cref="T:System.Collections.ICollection" /> 的存取已同步處理 (執行緒安全) 則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>取得可用來對 <see cref="T:System.Collections.ICollection" /> 進行同步存取的物件。</summary>
      <returns>可用來對 <see cref="T:System.Collections.ICollection" /> 同步存取的物件。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>將具有提供索引鍵和值的元素加入至 <see cref="T:System.Collections.IDictionary" />。</summary>
      <param name="key">要做為要加入之元素索引鍵的物件。</param>
      <param name="value">物件，做為要加入之元素的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 的型別無法指派給 <see cref="T:System.Collections.IDictionary" /> 的 <paramref name="TKey" /> 索引鍵類型。-或-<paramref name="value" /> 屬於無法指派給 <see cref="T:System.Collections.IDictionary" /> 的 <paramref name="TValue" /> 實值型別的型別。-或-<see cref="T:System.Collections.IDictionary" /> 中已存在具有相同索引鍵的項目。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IDictionary" /> 是否包含具有指定之索引鍵的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 包含具有此索引鍵的項目則為 true，否則為 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.IDictionary" /> 中尋找的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IDictionary" /> 大小是否固定。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 有固定的大小則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.IDictionary" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 是唯讀的，則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>取得或設定具有指定機碼的元素。</summary>
      <returns>具有指定之索引鍵的項目，如果 <paramref name="key" /> 不在字典中，或 <paramref name="key" /> 的型別無法指派給 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的 <paramref name="TKey" /> 索引鍵型別，則為 null。</returns>
      <param name="key">要取得之元素的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">正在指定值，而且 <paramref name="key" /> 的型別無法指派給 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的 <paramref name="TKey" /> 索引鍵型別。-或-正在指定值，而且 <paramref name="value" /> 的型別無法指派給 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的 <paramref name="TValue" /> 實值型別。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>取得 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 的索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.IDictionary" /> 移除包含指定索引鍵的元素。</summary>
      <param name="key">要移除之元素的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>取得包含 <see cref="T:System.Collections.IDictionary" /> 中值的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>取得與指定索引鍵關聯的值。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 包含具有所指定索引鍵的項目則為 true，否則為 false。</returns>
      <param name="key">要取得值的索引鍵。</param>
      <param name="value">傳回此方法時，如果找到指定的索引鍵，則為與此索引鍵相關聯的值，否則為 <paramref name="value" /> 參數之型別的預設值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Values">
      <summary>取得集合，包含 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的值。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />，包含 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的值。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.Enumerator">
      <summary>列舉 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的項目。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉值目前位置的 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的項目。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose">
      <summary>釋放 <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext">
      <summary>將列舉值前移至 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的下一個項目。</summary>
      <returns>如果列舉程式成功地前移至下一個元素則為 true，如果列舉程式已超過集合的結尾，則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>取得位於列舉值目前位置的項目，做為 <see cref="T:System.Collections.DictionaryEntry" /> 結構。</summary>
      <returns>位於集合中字典目前位置的項目，做為 <see cref="T:System.Collections.DictionaryEntry" /> 結構。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>取得位於列舉程式目前位置之元素的索引鍵。</summary>
      <returns>位於集合中列舉值目前位置之項目的索引鍵。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>取得位於列舉程式目前位置之元素的值。</summary>
      <returns>位於集合中列舉值目前位置之項目的值。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉程式目前位置的集合中的元素。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>設定列舉程式至它的初始位置，這是在集合中第 1 個元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。 </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection">
      <summary>表示 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的索引鍵集合。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 類別的新執行個體，反映指定 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的索引鍵。</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />，其索引鍵反映在新 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>從指定的陣列索引處開始，複製 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 項目至現有一維陣列。</summary>
      <param name="array">從 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 複製的項目之目的地一維陣列。陣列必須具有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中的項目數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Count">
      <summary>取得 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中所包含的元素數。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中所包含的項目數。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator">
      <summary>傳回逐一查看 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> 結構。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>將項目加入至 <see cref="T:System.Collections.Generic.ICollection`1" />。這個實作一定會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要加入至 <see cref="T:System.Collections.Generic.ICollection`1" /> 的物件。</param>
      <exception cref="T:System.NotSupportedException">一定會擲回，此集合是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>移除 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的所有項目。這個實作一定會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">一定會擲回，此集合是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>判斷 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含指定的值。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找到 <paramref name="item" />，則為 true，否則為 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中尋找的物件。</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的，則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>從 <see cref="T:System.Collections.Generic.ICollection`1" /> 移除第一次出現的特定物件。這個實作一定會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>如果已從 <see cref="T:System.Collections.Generic.ICollection`1" /> 成功移除 <paramref name="item" /> 則為 true，否則為 false。如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找不到 <paramref name="item" />，這個方法也會傳回 false。</returns>
      <param name="item">要從 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除的物件。</param>
      <exception cref="T:System.NotSupportedException">一定會擲回，此集合是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的陣列索引處開始，將 <see cref="T:System.Collections.ICollection" /> 的項目複製到陣列中。</summary>
      <param name="array">從 <see cref="T:System.Collections.ICollection" /> 複製的項目之目的地一維陣列。陣列必須具有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-<paramref name="array" /> 沒有以零起始的索引。-或-來源 <see cref="T:System.Collections.ICollection" /> 中的元素數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。-或-來源 <see cref="T:System.Collections.ICollection" /> 的型別無法自動轉換為目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出對 <see cref="T:System.Collections.ICollection" /> 的存取是否為同步 (安全執行緒)。</summary>
      <returns>如果 <see cref="T:System.Collections.ICollection" /> 的存取已同步處理 (執行緒安全) 則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>取得可用來對 <see cref="T:System.Collections.ICollection" /> 進行同步存取的物件。</summary>
      <returns>可用來對 <see cref="T:System.Collections.ICollection" /> 同步存取的物件。在 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的預設實作中，這個屬性永遠會傳回目前的執行個體。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator">
      <summary>列舉 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的項目。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉值目前位置的 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中的項目。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>釋放 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>將列舉值前移至 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的下一個項目。</summary>
      <returns>如果列舉程式成功地前移至下一個項目則為 true，如果列舉程式已超過集合的結尾，則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉程式目前位置的集合中的元素。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>設定列舉程式至它的初始位置，這是在集合中第 1 個元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。 </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection">
      <summary>表示 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的值集合。這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 類別的新執行個體，反映指定 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的值。</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />，其值反映在新 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>從指定的陣列索引處開始，複製 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 項目至現有一維陣列。</summary>
      <param name="array">從 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 複製的項目之目的地一維陣列。陣列必須具有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 中的項目數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Count">
      <summary>取得 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 中所包含的元素數。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 中所包含的項目數。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.GetEnumerator">
      <summary>傳回逐一查看 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> 結構。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Add(`1)">
      <summary>將項目加入至 <see cref="T:System.Collections.Generic.ICollection`1" />。這個實作一定會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要加入至 <see cref="T:System.Collections.Generic.ICollection`1" /> 的物件。</param>
      <exception cref="T:System.NotSupportedException">一定會擲回，此集合是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>移除 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的所有項目。這個實作一定會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">一定會擲回，此集合是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Contains(`1)">
      <summary>判斷 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含指定的值。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找到 <paramref name="item" />，則為 true，否則為 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中尋找的物件。</param>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的，則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Remove(`1)">
      <summary>從 <see cref="T:System.Collections.Generic.ICollection`1" /> 移除第一次出現的特定物件。這個實作一定會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>如果已從 <see cref="T:System.Collections.Generic.ICollection`1" /> 成功移除 <paramref name="item" /> 則為 true，否則為 false。如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找不到 <paramref name="item" />，這個方法也會傳回 false。</returns>
      <param name="item">要從 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除的物件。</param>
      <exception cref="T:System.NotSupportedException">一定會擲回，此集合是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>從 <see cref="T:System.Collections.Generic.ICollection`1" /> 移除第一次出現的特定物件。這個實作一定會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>如果已從 <see cref="T:System.Collections.Generic.ICollection`1" /> 成功移除 <paramref name="item" /> 則為 true，否則為 false。如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找不到 <paramref name="item" />，這個方法也會傳回 false。</returns>
      <exception cref="T:System.NotSupportedException">一定會擲回，此集合是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的陣列索引處開始，將 <see cref="T:System.Collections.ICollection" /> 的項目複製到陣列中。</summary>
      <param name="array">從 <see cref="T:System.Collections.ICollection" /> 複製的項目之目的地一維陣列。陣列必須具有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-<paramref name="array" /> 沒有以零起始的索引。-或-來源 <see cref="T:System.Collections.ICollection" /> 中的元素數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。-或-來源 <see cref="T:System.Collections.ICollection" /> 的型別無法自動轉換為目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出對 <see cref="T:System.Collections.ICollection" /> 的存取是否為同步 (安全執行緒)。</summary>
      <returns>如果 <see cref="T:System.Collections.ICollection" /> 的存取已同步處理 (執行緒安全) 則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>取得可用來對 <see cref="T:System.Collections.ICollection" /> 進行同步存取的物件。</summary>
      <returns>可用來對 <see cref="T:System.Collections.ICollection" /> 同步存取的物件。在 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的預設實作中，這個屬性永遠會傳回目前的執行個體。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator">
      <summary>列舉 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的項目。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉值目前位置的 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 中的項目。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>釋放 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>將列舉值前移至 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的下一個項目。</summary>
      <returns>如果列舉程式成功地前移至下一個元素則為 true，如果列舉程式已超過集合的結尾，則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉程式目前位置的集合中的元素。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>設定列舉程式至它的初始位置，這是在集合中第 1 個元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。 </exception>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1">
      <summary>表示依排序順序維護的物件集合。</summary>
      <typeparam name="T">資料集中元素的型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 類別的新執行個體，這個執行個體使用指定的比較子。</summary>
      <param name="comparer">用來比較物件的預設比較子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 類別的新執行個體，這個執行個體包含從指定的可列舉集合複製的項目。</summary>
      <param name="collection">要複製的可列舉集合。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 類別的新執行個體，這個執行個體包含從指定的可列舉集合複製的項目，而且使用指定的比較子。</summary>
      <param name="collection">要複製的可列舉集合。</param>
      <param name="comparer">用來比較物件的預設比較子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Add(`0)">
      <summary>將項目加入至資料集，並傳回表示是否成功加入的值。</summary>
      <returns>如果 <paramref name="item" /> 已加入至資料集則為 true，否則為 false。</returns>
      <param name="item">要加入至資料集的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Clear">
      <summary>將所有項目從資料集移除。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Comparer">
      <summary>取得 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 物件，這個物件用來判斷 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中的值是否相等。</summary>
      <returns>比較子，用來判斷 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中的值是否相等。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Contains(`0)">
      <summary>判斷資料集是否包含特定項目。</summary>
      <returns>如果集合包含 <paramref name="item" /> 則為 true，否則為 false。</returns>
      <param name="item">要在資料集中尋找的項目。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[])">
      <summary>從目標陣列的開頭開始，將完整的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 複製到相容的一維陣列。</summary>
      <param name="array">一維陣列，是從 <see cref="T:System.Collections.Generic.SortedSet`1" /> 複製項目之目的端。</param>
      <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中的元素數目大於目的陣列可包含的元素數目。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)">
      <summary>從指定的陣列索引處開始，將完整的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 複製到相容的一維陣列中。</summary>
      <param name="array">一維陣列，是從 <see cref="T:System.Collections.Generic.SortedSet`1" /> 複製項目之目的端。陣列必須具有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentException">來源陣列中的元素數目大於從 <paramref name="index" /> 至目的陣列結尾間的可用空間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>從指定的陣列索引處開始，將指定的項目數目從 <see cref="T:System.Collections.Generic.SortedSet`1" /> 複製到相容的一維陣列。</summary>
      <param name="array">一維陣列，是從 <see cref="T:System.Collections.Generic.SortedSet`1" /> 複製項目之目的端。陣列必須具有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <param name="count">要複製的元素數目。</param>
      <exception cref="T:System.ArgumentException">來源陣列中的元素數目大於從 <paramref name="index" /> 至目的陣列結尾間的可用空間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。-或-<paramref name="count" /> 小於零。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Count">
      <summary>取得 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中的元素數目。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 中的元素數。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>從目前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件中，移除指定之集合內的所有項目。</summary>
      <param name="other">要從 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件移除的項目集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetEnumerator">
      <summary>傳回逐一查看 <see cref="T:System.Collections.Generic.SortedSet`1" /> 的列舉程式。</summary>
      <returns>可依排序順序逐一查看 <see cref="T:System.Collections.Generic.SortedSet`1" /> 的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)">
      <summary>傳回 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中資料子集的檢視。</summary>
      <returns>子集檢視，只包含指定之範圍內的值。</returns>
      <param name="lowerValue">檢視中所需的最小值。</param>
      <param name="upperValue">檢視中所需的最大值。</param>
      <exception cref="T:System.ArgumentException">根據比較子，<paramref name="lowerValue" /> 大於 <paramref name="upperValue" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">在檢視上的嘗試作業，超出指定的 <paramref name="lowerValue" /> 和 <paramref name="upperValue" /> 範圍。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件，使其僅包含同時也在指定之集合中出現的項目。</summary>
      <param name="other">要與目前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件是否為指定之集合的真子集。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件是 <paramref name="other" /> 的真子集則為 true，否則為 false。</returns>
      <param name="other">要與目前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件是否為指定之集合的真超集。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件是 <paramref name="other" /> 的真超集則為 true，否則為 false。</returns>
      <param name="other">要與目前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件是否為指定之集合的子集。</summary>
      <returns>如果目前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件是 <paramref name="other" /> 的子集則為 true，否則為 false。</returns>
      <param name="other">要與目前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件是否為指定之集合的超集。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件是 <paramref name="other" /> 的超集則為 true，否則為 false。</returns>
      <param name="other">要與目前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Max">
      <summary>取得 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中的最大值，如比較子所定義。</summary>
      <returns>資料集中的最大值。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Min">
      <summary>取得 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中的最小值，如比較子所定義。</summary>
      <returns>資料集中的最小值。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件與指定的集合是否共用通用的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件和 <paramref name="other" /> 至少共用一個通用項目則為 true，否則為 false。</returns>
      <param name="other">要與目前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Remove(`0)">
      <summary>從 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中移除指定項目。</summary>
      <returns>如果已成功找到並移除項目則為 true，否則為 false。</returns>
      <param name="item">要移除的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>從 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中移除符合指定之述詞 (Predicate) 所定義條件的所有項目。</summary>
      <returns>已從 <see cref="T:System.Collections.Generic.SortedSet`1" /> 集合中移除的項目數目。</returns>
      <param name="match">定義要移除項目之條件的委派。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Reverse">
      <summary>傳回以反向順序逐一查看 <see cref="T:System.Collections.Generic.SortedSet`1" /> 的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
      <returns>以反向順序逐一查看 <see cref="T:System.Collections.Generic.SortedSet`1" /> 的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>判斷目前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件和指定的集合是否包含相同項目。</summary>
      <returns>如果目前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件等於 <paramref name="other" />，則為 true，否則為 false。</returns>
      <param name="other">要與目前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件，使其僅包含目前物件或指定之集合 (但非兩者) 中出現的項目。</summary>
      <param name="other">要與目前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>將項目加入至 <see cref="T:System.Collections.Generic.ICollection`1" /> 物件。</summary>
      <param name="item">要加入至 <see cref="T:System.Collections.Generic.ICollection`1" /> 物件的物件。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.ICollection" /> 是否為唯讀。</summary>
      <returns>如果這個集合是唯讀的，則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回在集合中逐一查看的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從指定的陣列索引處開始，將完整的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 複製到相容的一維陣列中。</summary>
      <param name="array">一維陣列，是從 <see cref="T:System.Collections.Generic.SortedSet`1" /> 複製項目之目的端。陣列必須具有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentException">來源陣列中的元素數目大於從 <paramref name="index" /> 至目的陣列結尾間的可用空間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>如果 <see cref="T:System.Collections.ICollection" /> 的存取已同步處理則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>取得可用來對 <see cref="T:System.Collections.ICollection" /> 進行同步存取的物件。</summary>
      <returns>可用來對 <see cref="T:System.Collections.ICollection" /> 同步存取的物件。在 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 的預設實作中，這個屬性永遠會傳回目前的執行個體。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回在集合中逐一查看的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改目前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件，使其包含目前物件或指定之集合中出現的所有項目。</summary>
      <param name="other">要與目前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件比較的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 為 null。</exception>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1.Enumerator">
      <summary>列舉 <see cref="T:System.Collections.Generic.SortedSet`1" /> 物件的元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉程式目前位置的集合中的元素。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.Dispose">
      <summary>釋放 <see cref="T:System.Collections.Generic.SortedSet`1.Enumerator" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.MoveNext">
      <summary>將列舉程式前移至 <see cref="T:System.Collections.Generic.SortedSet`1" /> 集合的下一個元素。</summary>
      <returns>如果列舉程式成功地前移至下一個元素則為 true，如果列舉程式已超過集合的結尾，則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉程式目前位置的集合中的元素。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>設定列舉程式至它的初始位置，這是在集合中第 1 個元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。 </exception>
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
      <summary>表示相同任意型別之執行個體的各種大小後進先出 (LIFO) 集合。</summary>
      <typeparam name="T">指定堆疊中元素的類型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 類別的新執行個體，其為空白執行個體且具有預設的初始容量。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 類別的新執行個體，其包含從指定之集合複製的元素，且具有容納複製之元素數目的足夠容量。</summary>
      <param name="collection">要複製元素的來源集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 類別的新執行個體，其為空白且具有指定的初始容量或預設的初始容量 (兩者中較大的那一個)。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Stack`1" /> 可包含的元素初始數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
      <summary>從 <see cref="T:System.Collections.Generic.Stack`1" /> 移除所有物件。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
      <summary>判斷某元素是否在 <see cref="T:System.Collections.Generic.Stack`1" /> 中。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.Stack`1" /> 中找到 <paramref name="item" />，則為 true，否則為 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.Stack`1" /> 中尋找的物件。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
      <summary>從指定的陣列索引處開始，將 <see cref="T:System.Collections.Generic.Stack`1" /> 複製到現有一維 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.Stack`1" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.Generic.Stack`1" /> 中的項目數量大於從 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
      <summary>取得 <see cref="T:System.Collections.Generic.Stack`1" /> 中所包含的元素數。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> 中所包含的項目數。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.Generic.Stack`1" /> 的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> 的 <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
      <summary>傳回 <see cref="T:System.Collections.Generic.Stack`1" /> 頂端的物件而不需移除它。</summary>
      <returns>在 <see cref="T:System.Collections.Generic.Stack`1" /> 頂端的物件。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" /> 是空的。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
      <summary>移除並傳回在 <see cref="T:System.Collections.Generic.Stack`1" /> 頂端的物件。</summary>
      <returns>從 <see cref="T:System.Collections.Generic.Stack`1" /> 頂端移除的物件。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" /> 是空的。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
      <summary>將物件插入 <see cref="T:System.Collections.Generic.Stack`1" /> 的頂端。</summary>
      <param name="item">要推入至 <see cref="T:System.Collections.Generic.Stack`1" /> 的物件。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Array" /> 索引開始，將 <see cref="T:System.Collections.ICollection" /> 的項目複製至 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-<paramref name="array" /> 沒有以零起始的索引。-或-來源 <see cref="T:System.Collections.ICollection" /> 中的項目數量大於從 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。-或-來源 <see cref="T:System.Collections.ICollection" /> 的型別無法自動轉換為目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出對 <see cref="T:System.Collections.ICollection" /> 的存取是否為同步 (安全執行緒)。</summary>
      <returns>如果 <see cref="T:System.Collections.ICollection" /> 的存取已同步處理 (執行緒安全) 則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.Stack`1" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
      <summary>取得可用來對 <see cref="T:System.Collections.ICollection" /> 進行同步存取的物件。</summary>
      <returns>可用來對 <see cref="T:System.Collections.ICollection" /> 同步存取的物件。在 <see cref="T:System.Collections.Generic.Stack`1" /> 的預設實作中，這個屬性永遠會傳回目前的執行個體。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回在集合中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
      <summary>將 <see cref="T:System.Collections.Generic.Stack`1" /> 複製到新的陣列。</summary>
      <returns>新陣列，包含 <see cref="T:System.Collections.Generic.Stack`1" /> 之元素的複本。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
      <summary>如果該數目小於目前容量的 90%，則將容量設為 <see cref="T:System.Collections.Generic.Stack`1" /> 中元素的實際數目。</summary>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator">
      <summary>列舉 <see cref="T:System.Collections.Generic.Stack`1" /> 的項目。</summary>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉值目前位置的 <see cref="T:System.Collections.Generic.Stack`1" /> 中的項目。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
      <summary>釋放 <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
      <summary>將列舉值前移至 <see cref="T:System.Collections.Generic.Stack`1" /> 的下一個項目。</summary>
      <returns>如果列舉程式成功地前移至下一個元素則為 true，如果列舉程式已超過集合的結尾，則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉程式目前位置的集合中的元素。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。 </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>設定列舉程式至它的初始位置，這是在集合中第 1 個元素之前。無法繼承此類別。</summary>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ObservableCollection`1">
      <summary>表示動態資料集合，以在新增或移除項目時或是重新整理整個清單時提供通知。</summary>
      <typeparam name="T">集合中項目的型別。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> 類別的空白新執行個體。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> 類別的新執行個體，並將它填入從所指定集合中複製的項目。</summary>
      <param name="collection">從中複製項目的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> 類別的新執行個體，並將它填入從所指定清單中複製的項目。</summary>
      <param name="list">從中複製項目的清單。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy">
      <summary>不允許變更這個集合的可重新進入嘗試。</summary>
      <returns>
        <see cref="T:System.IDisposable" /> 物件，可用來處置物件。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy">
      <summary>檢查是否有變更這個集合的可重新進入嘗試。</summary>
      <exception cref="T:System.InvalidOperationException">如果有 <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" /> 的呼叫，而其 <see cref="T:System.IDisposable" /> 傳回值尚未處置時。通常這表示，在 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> 事件期間有變更這個集合的其他嘗試時。不過，這取決於衍生類別選擇呼叫 <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" /> 的時機。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
      <summary>將所有項目從集合中移除。</summary>
      <exception cref="T:System.InvalidOperationException">正在 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> 或 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> 事件處理常式中呼叫此方法。</exception>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
      <summary>發生在集合中的項目變更或整個集合變更時。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary>將項目插入至集合的指定索引處。</summary>
      <param name="index">應插入 <paramref name="item" /> 以零為起始的索引。</param>
      <param name="item">要插入的物件。</param>
      <exception cref="T:System.InvalidOperationException">正在 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> 或 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> 事件處理常式中呼叫此方法。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)">
      <summary>將集合中之指定索引處的項目移至新位置。</summary>
      <param name="oldIndex">以零起始的索引，指定要移動之項目的位置。</param>
      <param name="newIndex">以零起始的索引，指定項目的新位置。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)">
      <summary>將集合中之指定索引處的項目移至新位置。</summary>
      <param name="oldIndex">以零起始的索引，指定要移動之項目的位置。</param>
      <param name="newIndex">以零起始的索引，指定項目的新位置。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>使用提供的事件資料引發 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> 事件。</summary>
      <param name="e">事件中要匯入的事件資料。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>使用提供的引數引發 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> 事件。</summary>
      <param name="e">事件中要匯入的事件資料。</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
      <summary>發生在集合中個別項目的屬性變更時。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
      <summary>移除集合中所指定索引處的項目。</summary>
      <param name="index">要移除之項目以零為起始的索引。</param>
      <exception cref="T:System.InvalidOperationException">正在 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> 或 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> 事件處理常式中呼叫此方法。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
      <summary>取代所指定索引處的項目。</summary>
      <param name="index">要取代之項目以零為起始的索引。</param>
      <param name="item">所指定索引處之項目的新值。</param>
      <exception cref="T:System.InvalidOperationException">正在 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> 或 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> 事件處理常式中呼叫此方法。</exception>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>發生於屬性值變更時。</summary>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1">
      <summary>表示唯讀 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />。</summary>
      <typeparam name="T">集合所保留的物件型別。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> 類別的新執行個體，而此執行個體做為所指定 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> 的包裝函式。</summary>
      <param name="list">要包裝的集合。</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged">
      <summary>發生在新增或移除項目時。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>引發 <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged" /> 事件。</summary>
      <param name="args">事件資料。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>引發 <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged" /> 事件。</summary>
      <param name="args">事件資料。</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged">
      <summary>發生於屬性值變更時。</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>如需這個成員的說明，請參閱 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />。</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>如需這個成員的說明，請參閱 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />。</summary>
    </member>
    <member name="T:System.Collections.Specialized.INotifyCollectionChanged">
      <summary>通知接聽程式，集合已動態變更 (如加入及移除項目時，或重設整個集合物件時)。</summary>
    </member>
    <member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
      <summary>當集合的項目清單已變更或集合重設時發生。</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
      <summary>描述導致 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件的動作。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
      <summary>一或多個項目已加入至集合。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move">
      <summary>集合中已移動一個或多個項目。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
      <summary>已從集合移除一或多個項目。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
      <summary>已取代集合中的一或多個項目。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
      <summary>集合內容已大幅變更。</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
      <summary>提供 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件的事件資料。</summary>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
      <summary>指定 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction" /> 值來初始化 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 類別的新執行個體。</summary>
      <param name="action">動作值，做為列舉值。這一定要是 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />；請參閱「備註」。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" /> 不是 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 類別的新執行個體，這個執行個體會描述多個項目的變更。</summary>
      <param name="action">造成事件的動作。可以設定為 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />、<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> 或 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />。</param>
      <param name="changedItems">受變更影響的項目。</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 類別的新執行個體，這個執行個體會描述多個項目的 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 變更。</summary>
      <param name="action">造成事件的動作。只能設定為 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />。</param>
      <param name="newItems">將取代原始項目的新項目。</param>
      <param name="oldItems">被取代的原始項目。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="action" /> 不是 Replace。</exception>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="oldItems" /> 或 <paramref name="newItems" /> 是 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 類別的新執行個體，這個執行個體會描述多個項目的 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 變更。</summary>
      <param name="action">造成事件的動作。只能設定為 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />。</param>
      <param name="newItems">將取代原始項目的新項目。</param>
      <param name="oldItems">被取代的原始項目。</param>
      <param name="startingIndex">被取代項目中第一個項目的索引。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="action" /> 不是 Replace。</exception>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="oldItems" /> 或 <paramref name="newItems" /> 是 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 類別的新執行個體，這個執行個體會描述多個項目或 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" /> 變更。</summary>
      <param name="action">造成事件的動作。可以設定為 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />、<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> 或 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />。</param>
      <param name="changedItems">受變更影響的項目。</param>
      <param name="startingIndex">發生變更的索引。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="action" /> 不是 Reset、Add 或 Remove，或者 <paramref name="action" /> 是 Reset，而且 <paramref name="changedItems" /> 不是 null 或 <paramref name="startingIndex" /> 不是 -1，又或者 action 是 Add 或 Remove，而且 <paramref name="startingIndex" /> 小於 -1。</exception>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="action" /> 是 Add 或 Remove，而且 <paramref name="changedItems" /> 是 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 類別的新執行個體，這個執行個體會描述多個項目的 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> 變更。</summary>
      <param name="action">造成事件的動作。只能設定為 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />。</param>
      <param name="changedItems">受變更影響的項目。</param>
      <param name="index">已變更之項目的新索引。</param>
      <param name="oldIndex">已變更之項目的舊索引。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="action" /> 不是 Move 或 <paramref name="index" /> 小於 0。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 類別的新執行個體，這個執行個體會描述一個項目的變更。</summary>
      <param name="action">造成事件的動作。可以設定為 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />、<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> 或 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />。</param>
      <param name="changedItem">受到此變更影響的項目。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="action" /> 不是 Reset、Add 或 Remove，或者 <paramref name="action" /> 是 Reset 而且 <paramref name="changedItem" /> 不是 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 類別的新執行個體，而此執行個體描述 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> 或 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> 變更。</summary>
      <param name="action">動作值，做為列舉值。這應該是 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> 或 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />；請參閱「備註」。</param>
      <param name="changedItem">受到此變更影響的項目。</param>
      <param name="index">發生變更的索引。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" /> 不是 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> 或 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 類別的新執行個體，這個執行個體會描述一個項目的 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> 變更。</summary>
      <param name="action">造成事件的動作。只能設定為 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />。</param>
      <param name="changedItem">受變更影響的項目。</param>
      <param name="index">已變更之項目的新索引。</param>
      <param name="oldIndex">已變更之項目的舊索引。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="action" /> 不是 Move 或 <paramref name="index" /> 小於 0。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 類別的新執行個體，這個執行個體會描述一個項目的 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 變更。</summary>
      <param name="action">造成事件的動作。只能設定為 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />。</param>
      <param name="newItem">要取代原始項目的新項目。</param>
      <param name="oldItem">要取代的原始項目。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="action" /> 不是 Replace。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 類別的新執行個體，而此執行個體描述 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 變更。</summary>
      <param name="action">動作值，做為列舉值。這應該是 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />；請參閱「備註」。</param>
      <param name="newItem">要取代原始項目的新項目。</param>
      <param name="oldItem">要取代的原始項目。</param>
      <param name="index">所要取代之項目的索引。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="action" /> 不是 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />。</exception>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
      <summary>取得導致事件之動作的描述。</summary>
      <returns>導致事件之動作的描述 (以列舉的值表示)。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
      <summary>取得動作所影響的項目。</summary>
      <returns>動作所影響的項目清單。預設值為 null。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
      <summary>取得發生變更的索引。</summary>
      <returns>發生變更的索引。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
      <summary>取得 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 或 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> 動作所影響的項目。</summary>
      <returns>
        <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 或 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> 動作所影響的項目清單。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
      <summary>取得因 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 或 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> 動作而發生變更的索引。</summary>
      <returns>因 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 或 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" /> 動作而發生變更的索引。</returns>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
      <summary>表示處理事件的方法，而事件實作 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件。</summary>
      <param name="sender">引發事件的物件。</param>
      <param name="e">事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventArgs">
      <summary>提供 MethodNameCompleted 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> 類別的新執行個體。</summary>
      <param name="error">非同步作業期間發生的任何錯誤。</param>
      <param name="cancelled">表示非同步作業是否已取消的值。</param>
      <param name="userState">選擇性、使用者提供的狀態物件，用來識別引發 Completed 事件的工作。</param>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
      <summary>取得值，指出非同步作業是否已取消。</summary>
      <returns>如果非同步作業已取消為 true，否則為 false。預設為 false。</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
      <summary>取得值，指出非同步作業期間是否發生錯誤。</summary>
      <returns>如果非同步作業期間發生錯誤，為 <see cref="T:System.Exception" /> 執行個體，否則為 null。</returns>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
      <summary>如果非同步作業失敗，引發使用者提供的例外狀況。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> 屬性為 true。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">非同步作業已設定 <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> 屬性。</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
      <summary>取得非同步工作的唯一識別項。</summary>
      <returns>唯一識別非同步工作的物件參考，如果未設定值，為 null。</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventHandler">
      <summary>表示將處理非同步作業之 MethodNameCompleted 事件的方法。</summary>
      <param name="sender">事件來源。</param>
      <param name="e">包含事件資料的 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.AsyncOperation">
      <summary>追蹤非同步作業 (Asynchronous Operation) 的存留期 (Lifetime)。</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.OperationCompleted">
      <summary>結束非同步作業的存留期。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> 先前已針對此工作呼叫。</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>在適合應用程式模型的執行緒或內容上叫用委派。</summary>
      <param name="d">
        <see cref="T:System.Threading.SendOrPostCallback" /> 物件，包裝作業結束時要呼叫的委派。</param>
      <param name="arg">包含在 <paramref name="d" /> 參數中的委派引數。</param>
      <exception cref="T:System.InvalidOperationException">先前已針對此工作呼叫 <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 為 null。</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
      <summary>結束非同步作業的存留期。</summary>
      <param name="d">
        <see cref="T:System.Threading.SendOrPostCallback" /> 物件，包裝作業結束時要呼叫的委派。</param>
      <param name="arg">包含在 <paramref name="d" /> 參數中的委派引數。</param>
      <exception cref="T:System.InvalidOperationException">先前已針對此工作呼叫 <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> 方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 為 null。</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
      <summary>取得 <see cref="T:System.Threading.SynchronizationContext" /> 物件，這就是 <see cref="T:System.ComponentModel.AsyncOperationManager" /> 建立物件時傳遞至建構函式的物件。</summary>
      <returns>傳遞給建構函式的 <see cref="T:System.Threading.SynchronizationContext" /> 物件。</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
      <summary>取得用來唯一識別非同步作業的物件。</summary>
      <returns>傳遞至非同步方法引動過程的狀態物件。</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncOperationManager">
      <summary>為支援非同步方法呼叫的類別，提供並行管理。無法繼承此類別。</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
      <summary>傳回 <see cref="T:System.ComponentModel.AsyncOperation" />，以追蹤特定非同步作業的持續期間。</summary>
      <returns>
        <see cref="T:System.ComponentModel.AsyncOperation" />，可以用來追蹤非同步方法引動過程的持續期間。</returns>
      <param name="userSuppliedState">物件，用來使一項用戶端狀態 (例如工作 ID) 與特定非同步作業產生關聯。</param>
    </member>
    <member name="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
      <summary>取得或設定非同步作業的 <see cref="T:System.Threading.SynchronizationContext" />。</summary>
      <returns>非同步作業的 <see cref="T:System.Threading.SynchronizationContext" />。</returns>
    </member>
    <member name="T:System.ComponentModel.BackgroundWorker">
      <summary>在個別執行緒上執行作業。</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.BackgroundWorker" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.CancelAsync">
      <summary>要求取消暫止的背景作業。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> 為 false。</exception>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.CancellationPending">
      <summary>取得值，指出應用程式是否已經要求取消背景作業。</summary>
      <returns>如果應用程式已要求取消背景作業為 true，否則為 false。預設為 false。</returns>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.DoWork">
      <summary>當呼叫 <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> 時發生。</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.IsBusy">
      <summary>取得值，指出 <see cref="T:System.ComponentModel.BackgroundWorker" /> 是否正在執行背景作業。</summary>
      <returns>如果 <see cref="T:System.ComponentModel.BackgroundWorker" /> 正在執行背景作業為 true，否則為 false。</returns>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
      <summary>引發 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 事件。</summary>
      <param name="e">包含事件資料的 <see cref="T:System.ComponentModel.DoWorkEventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
      <summary>引發 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件。</summary>
      <param name="e">包含事件資料的 <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
      <summary>引發 <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> 事件。</summary>
      <param name="e">包含事件資料的 <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" />。</param>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
      <summary>當呼叫 <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /> 時發生。</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
      <summary>引發 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件。</summary>
      <param name="percentProgress">背景作業的完成百分比，從 0 到 100。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> 屬性會設為 false。</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
      <summary>引發 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件。</summary>
      <param name="percentProgress">背景作業的完成百分比，從 0 到 100。</param>
      <param name="userState">傳遞至 <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /> 的狀態物件。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> 屬性會設為 false。</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
      <summary>啟動執行背景作業。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> 為 true。</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
      <summary>啟動執行背景作業，並加入背景作業所要使用的參數。</summary>
      <param name="argument">在 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 事件處理常式中，背景作業所使用的參數。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> 為 true。</exception>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
      <summary>當背景作業已完成、取消或引發例外狀況時發生。</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
      <summary>取得或設定值，指出 <see cref="T:System.ComponentModel.BackgroundWorker" /> 是否可以報告進度更新。</summary>
      <returns>如果 <see cref="T:System.ComponentModel.BackgroundWorker" /> 支援進度更新為 true，否則為 false。預設為 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
      <summary>取得或設定值，指出 <see cref="T:System.ComponentModel.BackgroundWorker" /> 是否支援非同步取消。</summary>
      <returns>如果 <see cref="T:System.ComponentModel.BackgroundWorker" /> 支援取消為 true，否則為 false。預設為 false。</returns>
    </member>
    <member name="T:System.ComponentModel.BrowsableAttribute">
      <summary>指定屬性 (Property) 或事件是否應該顯示於 [屬性] 視窗中。</summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.BrowsableAttribute" /> 類別的新執行個體。</summary>
      <param name="browsable">如果可以在設計階段修改屬性或事件為 true，否則 false。預設值是 true。</param>
    </member>
    <member name="P:System.ComponentModel.BrowsableAttribute.Browsable">
      <summary>取得值，指出物件是否為可瀏覽。</summary>
      <returns>如果物件是可瀏覽為 true，否則為 false。</returns>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.BrowsableAttribute" /> 的預設值，就是 <see cref="F:System.ComponentModel.BrowsableAttribute.Yes" />。此 static 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.Equals(System.Object)">
      <summary>指出此執行個體和指定的物件是否相等。</summary>
      <returns>如果 <paramref name="obj" /> 等於這個執行個體則為 true，否則為 false。</returns>
      <param name="obj">要比較的另一個物件。</param>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.GetHashCode">
      <summary>傳回此執行個體的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.No">
      <summary>指定在設計階段不可以修改的屬性或事件。此 static 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Yes">
      <summary>指定在設計階段可以修改的屬性或事件。此 static 欄位是唯讀的。</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventArgs">
      <summary>提供可取消事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CancelEventArgs" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor(System.Boolean)">
      <summary>初始化將 <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> 屬性設定為指定值之 <see cref="T:System.ComponentModel.CancelEventArgs" /> 類別的新執行個體。</summary>
      <param name="cancel">若要取消作業為 true，否則為 false。</param>
    </member>
    <member name="P:System.ComponentModel.CancelEventArgs.Cancel">
      <summary>取得或設定值，指出作業是否應該取消。</summary>
      <returns>如果應該要取消作業為 true，否則為 false。</returns>
    </member>
    <member name="T:System.ComponentModel.CategoryAttribute">
      <summary>指定分類的名稱，該分類會在屬性方格控制項設定為 [分類] 模式時，以群組方式來顯示屬性或事件。</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor">
      <summary>使用分類名稱 Default 初始化 <see cref="T:System.ComponentModel.CategoryAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor(System.String)">
      <summary>使用指定的類別名稱來初始化 <see cref="T:System.ComponentModel.CategoryAttribute" /> 類別的新執行個體。</summary>
      <param name="category">分類的名稱。</param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Action">
      <summary>取得表示 Action 分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>動作分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Appearance">
      <summary>取得表示 Appearance 分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>外觀分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Asynchronous">
      <summary>取得表示 Asynchronous 分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>非同步分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Behavior">
      <summary>取得表示 Behavior 分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>行為分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Category">
      <summary>取得屬性 (Property) 分類的名稱或與此屬性 (Attribute) 所套用的事件。</summary>
      <returns>屬性 (Property) 分類的名稱或與此屬性 (Attribute) 所套用的事件。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Data">
      <summary>取得表示 Data 分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>資料分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Default">
      <summary>取得表示 Default 分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>預設分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Design">
      <summary>取得表示 Design 分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>設計分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.DragDrop">
      <summary>取得表示 DragDrop 分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>拖放分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.Equals(System.Object)">
      <summary>傳回值，指出指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>如果指定的物件值等於目前的 <see cref="T:System.ComponentModel.CategoryAttribute" /> 為 true，否則為 false。</returns>
      <param name="obj">測試其數值相等的物件。</param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Focus">
      <summary>取得表示 Focus 分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>焦點分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Format">
      <summary>取得表示 Format 分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>格式分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetHashCode">
      <summary>傳回此屬性的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)">
      <summary>查閱指定分類的當地語系化名稱。</summary>
      <returns>分類的當地語系化名稱，或者如果沒有當地語系化名稱時則為 null。</returns>
      <param name="value">分類要查閱的識別項。</param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Key">
      <summary>取得表示 Key 分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>索引鍵分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Layout">
      <summary>取得表示 Layout 分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>配置分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Mouse">
      <summary>取得表示 Mouse 分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>滑鼠分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.WindowStyle">
      <summary>取得表示 WindowStyle 分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>視窗樣式分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentCollection">
      <summary>取得容器中的特定元件。</summary>
    </member>
    <member name="T:System.ComponentModel.DataErrorsChangedEventArgs">
      <summary>提供 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.DataErrorsChangedEventArgs.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataErrorsChangedEventArgs" /> 類別的新執行個體。</summary>
      <param name="propertyName">錯誤已變更之屬性的名稱，如果是實體層級錯誤則為 null 或 <see cref="F:System.String.Empty" />。</param>
    </member>
    <member name="P:System.ComponentModel.DataErrorsChangedEventArgs.PropertyName">
      <summary>取得錯誤已變更之屬性的名稱，如果是實體層級錯誤則為 null 或 <see cref="F:System.String.Empty" />。</summary>
      <returns>受影響屬性的名稱，如果是實體層級錯誤則為 null 或 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
      <summary>指定屬性的預設值。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
      <summary>使用 <see cref="T:System.Boolean" /> 值來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的 <see cref="T:System.Boolean" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
      <summary>使用 8 位元不帶正負號的整數來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的 8 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
      <summary>使用 Unicode 字元來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的 Unicode 字元。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
      <summary>使用雙精確度浮點數來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的雙精確度浮點數。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
      <summary>使用 16 位元帶正負號的整數來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的 16 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
      <summary>使用 32 位元帶正負號的整數來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的 32 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
      <summary>使用 64 位元帶正負號的整數來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的 64 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">
        <see cref="T:System.Object" />，表示預設值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
      <summary>使用單精確度浮點數來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的單精確度浮點數。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
      <summary>使用 <see cref="T:System.String" /> 來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="value">做為預設值的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
      <summary>將指定的值轉換為指定型別，並使用不變文化特性 (Invariant Culture) 做為轉譯內容來初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 類別的新執行個體。</summary>
      <param name="type">要數值轉換成的 <see cref="T:System.Type" />。</param>
      <param name="value">
        <see cref="T:System.String" />，可以使用型別的 <see cref="T:System.ComponentModel.TypeConverter" /> 和美式英語文化特性來轉換為該型別。。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.Equals(System.Object)">
      <summary>傳回值，指出指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.DefaultValueAttribute" />。</summary>
      <returns>如果指定的物件值等於目前的值為 true，否則為 false。</returns>
      <param name="obj">測試其數值相等的物件。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.GetHashCode"></member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.SetValue(System.Object)">
      <summary>設定此屬性 (Attribute) 所繫結之屬性 (Property) 的預設值。</summary>
      <param name="value">預設值。</param>
    </member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
      <summary>取得此屬性 (Attribute) 所繫結之屬性 (Property) 的預設值。</summary>
      <returns>
        <see cref="T:System.Object" />，表示這個屬性 (Attribute) 所繫結之屬性 (Property) 的預設值。</returns>
    </member>
    <member name="T:System.ComponentModel.DescriptionAttribute">
      <summary>指定屬性或事件的描述。</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor">
      <summary>不使用參數初始化 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)">
      <summary>使用描述來初始化 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 類別的新執行個體。</summary>
      <param name="description">描述文字。</param>
    </member>
    <member name="F:System.ComponentModel.DescriptionAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 的預設值，也就是空字串 ("")。此 static 欄位是唯讀的。</summary>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.Description">
      <summary>取得儲存在此屬性中的描述。</summary>
      <returns>儲存在此屬性中的描述。</returns>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.DescriptionValue">
      <summary>取得或設定儲存為描述的字串。</summary>
      <returns>儲存為描述的字串。預設為空字串 ("")。</returns>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.Equals(System.Object)">
      <summary>傳回值，指出指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.DescriptionAttribute" />。</summary>
      <returns>如果指定的物件值等於目前的 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 為 true，否則為 false。</returns>
      <param name="obj">測試其數值相等的物件。</param>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.GetHashCode"></member>
    <member name="T:System.ComponentModel.DoWorkEventArgs">
      <summary>提供 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.DoWorkEventArgs" /> 類別的新執行個體。</summary>
      <param name="argument">指定非同步作業的引數。</param>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Argument">
      <summary>取得值，指出非同步作業的引數。</summary>
      <returns>
        <see cref="T:System.Object" />，指出非同步作業的引數。</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Cancel">
      <summary>取得或設定值，此值指出非同步作業是否已取消。</summary>
      <returns>如果已取消該作業為 true，否則為 false。預設為 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Result">
      <summary>取得或設定值，指出非同步作業的結果。</summary>
      <returns>
        <see cref="T:System.Object" />，指出非同步作業的結果。</returns>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventHandler">
      <summary>表示將會處理呼叫 <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> 方法時所引發之 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">包含事件資料的 <see cref="T:System.ComponentModel.DoWorkEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
      <summary>指定屬性或方法可以在編輯器中顯示。無法繼承此類別。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor">
      <summary>使用將 <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> 設定為預設狀態來初始化 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
      <summary>使用 <see cref="T:System.ComponentModel.EditorBrowsableState" /> 初始化 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> 類別的新執行個體。</summary>
      <param name="state">設定 <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> 的 <see cref="T:System.ComponentModel.EditorBrowsableState" />。</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
      <summary>傳回值，指出指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" />。</summary>
      <returns>如果指定的物件值等於目前的值為 true，否則為 false。</returns>
      <param name="obj">測試其數值相等的物件。</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.GetHashCode"></member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
      <summary>取得屬性或方法的可瀏覽狀態。</summary>
      <returns>
        <see cref="T:System.ComponentModel.EditorBrowsableState" />，屬性或方法的可瀏覽狀態。</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
      <summary>從編輯器中指定屬性或方法的可瀏覽狀態。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
      <summary>屬性或方法是只有進階使用者能看到的功能。編輯器可以顯示或是隱藏這樣的屬性。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
      <summary>屬性或方法可以從編輯器中瀏覽。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
      <summary>屬性或方法永遠無法從編輯器中瀏覽。</summary>
    </member>
    <member name="T:System.ComponentModel.IChangeTracking">
      <summary>定義查詢物件變更和重設變更狀態的機制。</summary>
    </member>
    <member name="M:System.ComponentModel.IChangeTracking.AcceptChanges">
      <summary>接受修改，重設物件的狀態為未變更。 </summary>
    </member>
    <member name="P:System.ComponentModel.IChangeTracking.IsChanged">
      <summary>取得物件的變更狀態。</summary>
      <returns>如果自上次呼叫 <see cref="M:System.ComponentModel.IChangeTracking.AcceptChanges" /> 之後物件內容已變更，則為true，否則為 false。</returns>
    </member>
    <member name="T:System.ComponentModel.IComponent">
      <summary>當由類別實作時，取得或設定與元件相關聯的 <see cref="T:System.ComponentModel.ISite" />。</summary>
    </member>
    <member name="E:System.ComponentModel.IComponent.Disposed">
      <summary>加入事件處理常式來接聽 (Listen) 元件上的 Disposed 事件。</summary>
    </member>
    <member name="P:System.ComponentModel.IComponent.Site">
      <summary>當由類別實作時，取得或設定與元件相關聯的 <see cref="T:System.ComponentModel.ISite" />。</summary>
      <returns>與元件相關聯的 <see cref="T:System.ComponentModel.ISite" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IContainer">
      <summary>為容器 (Container) 提供功能。容器是邏輯上包含零或多個元件的物件。</summary>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent)">
      <summary>將元件加入至容器。</summary>
      <param name="component">要加入的元件。</param>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent,System.String)">
      <summary>將元件加入至容器。</summary>
      <param name="component">要加入的元件。</param>
      <param name="name">識別元件的名稱。</param>
    </member>
    <member name="P:System.ComponentModel.IContainer.Components">
      <summary>取得 <see cref="T:System.ComponentModel.IContainer" /> 中的所有元件。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IContainer" /> 中元件的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.IContainer.Remove(System.ComponentModel.IComponent)">
      <summary>從容器移除元件。</summary>
      <param name="component">要移除的元件。</param>
    </member>
    <member name="T:System.ComponentModel.IEditableObject">
      <summary>表示具有編輯模式以及認可或還原變更之能力的物件。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.BeginEdit">
      <summary>讓物件進入編輯模式。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.CancelEdit">
      <summary>讓物件離開編輯模式並還原成先前未編輯的值。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.EndEdit">
      <summary>讓物件離開編輯模式並認可已編輯的值。</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyDataErrorInfo">
      <summary>定義資料實體類別可實作以提供自訂同步及非同步驗證支援的成員。</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged">
      <summary>發生在屬性或整個實體的驗證錯誤已變更時。</summary>
    </member>
    <member name="M:System.ComponentModel.INotifyDataErrorInfo.GetErrors(System.String)">
      <summary>取得所指定屬性或整個實體的驗證錯誤。</summary>
      <returns>屬性或實體的驗證錯誤。</returns>
      <param name="propertyName">擷取其驗證錯誤之屬性的名稱，若要擷取實體層級錯誤則為 null 或 <see cref="F:System.String.Empty" />。</param>
    </member>
    <member name="P:System.ComponentModel.INotifyDataErrorInfo.HasErrors">
      <summary>取得可指出實體是否具有驗證錯誤的值。</summary>
      <returns>如果實體目前具有驗證錯誤為 true，否則為 false。</returns>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanged">
      <summary>告知用戶端，屬性值已變更。</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
      <summary>發生於屬性值變更時。</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanging">
      <summary>定義事件以通知用戶端，屬性值正在變更。</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging">
      <summary>發生於屬性值變更時。</summary>
    </member>
    <member name="T:System.ComponentModel.IRevertibleChangeTracking">
      <summary>提供復原變更的支援。</summary>
    </member>
    <member name="M:System.ComponentModel.IRevertibleChangeTracking.RejectChanges">
      <summary>拒絕修改，重設物件的狀態為未變更。 </summary>
    </member>
    <member name="T:System.ComponentModel.ISite">
      <summary>提供站台需要的功能。站台會將元件繫結到容器，並啟用它們之間的通訊，以及為容器 (Container) 提供管理其元件的方法。</summary>
    </member>
    <member name="P:System.ComponentModel.ISite.Component">
      <summary>當由類別實作時，取得與 <see cref="T:System.ComponentModel.ISite" /> 相關聯的元件。</summary>
      <returns>與 <see cref="T:System.ComponentModel.ISite" /> 相關聯的元件。</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Container">
      <summary>當由類別實作時，取得與 <see cref="T:System.ComponentModel.ISite" /> 相關聯的容器。</summary>
      <returns>與 <see cref="T:System.ComponentModel.ISite" /> 相關聯的容器。</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.DesignMode">
      <summary>當由類別實作時，判斷元件是否處於設計模式。</summary>
      <returns>如果處於設計模式為 true，否則為 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Name">
      <summary>當由類別實作時，取得或設定與 <see cref="T:System.ComponentModel.ISite" /> 相關聯之元件的名稱。</summary>
      <returns>元件的名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>提供內容相關資訊給型別轉換子 (Type Converter) 或值編輯器，讓型別轉換子或編輯器可以執行轉換。</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>取得具有此格式子 (Formatter) 之物件集合的容器。</summary>
      <returns>具有此格式子之物件集合的容器。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>取得正在格式子物件上叫用方法的執行個體。</summary>
      <returns>正在格式子物件上叫用方法的執行個體。</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>引發 <see cref="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>取得值，指出此物件是否可以變更。</summary>
      <returns>如果此物件可以變更為 true，否則為 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>取得正在呈現指定內容項目的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <returns>正在呈現指定內容項目的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>指定排序作業的方向。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>依遞增順序排序。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>依遞減順序排序。</summary>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventArgs">
      <summary>提供 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.ProgressChangedEventArgs" /> 類別的新執行個體。</summary>
      <param name="progressPercentage">非同步作業的完成百分比。</param>
      <param name="userState">唯一的使用者狀態。</param>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">
      <summary>取得非同步作業的完成百分比。</summary>
      <returns>指出非同步作業進度的百分比值。</returns>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.UserState">
      <summary>取得唯一的使用者狀態。</summary>
      <returns>表示使用者狀態的唯一 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventHandler">
      <summary>表示將會處理 <see cref="T:System.ComponentModel.BackgroundWorker" /> 報告進度時所引發之 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">包含事件資料的 <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventArgs">
      <summary>提供 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> 類別的新執行個體。</summary>
      <param name="propertyName">已變更之屬性的名稱。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName">
      <summary>取得已變更之屬性的名稱。</summary>
      <returns>變更之屬性的名稱，如果所有屬性都已變更，為 <see cref="F:System.String.Empty" /> 或 null。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventHandler">
      <summary>表示將處理 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">包含事件資料的 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventArgs">
      <summary>提供 <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangingEventArgs.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.PropertyChangingEventArgs" /> 類別的新執行個體。</summary>
      <param name="propertyName">變更之屬性的名稱。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangingEventArgs.PropertyName">
      <summary>取得變更之屬性的名稱。</summary>
      <returns>變更之屬性的名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventHandler">
      <summary>表示將處理 <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" /> 事件的方法。</summary>
      <param name="sender">事件來源。</param>
      <param name="e">事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>提供屬性的說明。</summary>
    </member>
    <member name="T:System.ComponentModel.ReadOnlyAttribute">
      <summary>指定此屬性 (Attribute) 套用的屬性 (Property) 是唯讀的或是讀取/寫入的。</summary>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> 類別的新執行個體。</summary>
      <param name="isReadOnly">如果這個屬性 (Attribute) 套用的屬性 (Property) 是唯讀的，為 true；如果屬性 (Property) 是可讀取/寫入的，為 false。</param>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)">
      <summary>傳回此執行個體和指定的物件是否相等。</summary>
      <returns>如果 <paramref name="obj" /> 等於這個執行個體則為 true，否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.GetHashCode">
      <summary>傳回此執行個體的雜湊程式碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> 的雜湊程式碼。</returns>
    </member>
    <member name="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
      <summary>取得值，指出此屬性 (Attribute) 套用的內容 (Property) 是否為唯讀。</summary>
      <returns>如果此屬性 (Attribute) 套用的屬性 (Property) 是唯讀的為 true；如果屬性是可讀取/寫入的則為 false。 </returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventArgs">
      <summary>提供 <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" /> 類別的新執行個體。</summary>
      <param name="result">非同步作業的結果。</param>
      <param name="error">非同步作業期間發生的任何錯誤。</param>
      <param name="cancelled">表示非同步作業是否已取消的值。</param>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result">
      <summary>取得值，指出非同步作業的結果。</summary>
      <returns>
        <see cref="T:System.Object" />，指出非同步作業的結果。</returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventHandler">
      <summary>表示將處理下列情況所引發之 <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> 事件的方法：<see cref="T:System.ComponentModel.BackgroundWorker" /> 執行的作業已完成、已取消或已引發例外狀況。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">包含事件資料的 <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>提供轉換值型別為其他型別的統一方式。<see cref="T:System.ComponentModel.TypeConverter" /> 通常支援將字串轉換為物件，可能適用於設計環境中的屬性編輯器，或可用於啟用 XAML。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>傳回型別轉換子是否能將物件從指定的型別轉換成此轉換子的型別。</summary>
      <returns>如果此轉換子可以執行轉換為 true，否則為 false。</returns>
      <param name="context">提供格式內容的物件。</param>
      <param name="sourceType">要轉換的來源型別。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>傳回型別轉換子是否能將物件從指定的型別轉換成此轉換子的型別。</summary>
      <returns>如果此轉換子可以執行轉換為 true，否則為 false。</returns>
      <param name="sourceType">要轉換的來源型別。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>傳回型別轉換子是否能將物件轉換為指定的型別。</summary>
      <returns>如果此轉換子可以執行轉換為 true，否則為 false。</returns>
      <param name="context">提供格式內容的物件。</param>
      <param name="destinationType">要轉換成的型別。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>傳回型別轉換子是否能將物件轉換為指定的型別。</summary>
      <returns>如果此轉換子可以執行轉換為 true，否則為 false。</returns>
      <param name="destinationType">要轉換成的型別。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>從指定的值轉換成此轉換子的預期轉換型別。</summary>
      <returns>轉換的值。</returns>
      <param name="context">提供格式內容的物件。</param>
      <param name="culture">要做為目前文化特性 (Culture) 的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">值，要轉換成此轉換子的型別。</param>
      <exception cref="T:System.NotImplementedException">
        <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> 未在基底 <see cref="T:System.ComponentModel.TypeConverter" /> 中實作。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>從指定的值轉換成此轉換子的型別。</summary>
      <returns>轉換的值。</returns>
      <param name="value">值，要轉換成此轉換子的型別。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>會將指定的文字轉換成物件。</summary>
      <returns>物件，表示轉換後的文字字串。</returns>
      <param name="text">要轉換物件的文字表示。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將指定的值物件轉換為指定的型別。</summary>
      <returns>轉換的物件。</returns>
      <param name="context">提供格式內容的物件。</param>
      <param name="culture">要做為目前文化特性 (Culture) 的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要進行轉換的物件。</param>
      <param name="destinationType">要將物件轉換為的型別。</param>
      <exception cref="T:System.NotImplementedException">
        <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" /> 未在基底 <see cref="T:System.ComponentModel.TypeConverter" /> 中實作。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>將指定的值物件轉換為指定的型別。</summary>
      <returns>轉換的物件。</returns>
      <param name="value">要進行轉換的物件。</param>
      <param name="destinationType">要將物件轉換為的型別。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>將指定的物件轉換為字串表示。</summary>
      <returns>物件，表示轉換的值。</returns>
      <param name="value">要進行轉換的物件。</param>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>指定此屬性 (Attribute) 所繫結的型別或屬性 (Property) 用來做為型別轉換子 (Type Converter) 的類別。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>使用指定型別名稱做為此屬性所繫結之物件的資料轉換子，來初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 類別的新執行個體。</summary>
      <param name="typeName">類別的完整限定名稱，用於此屬性所繫結之物件的資料轉換。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>使用指定型別做為此屬性所繫結之物件的資料轉換子，來初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 類別的新執行個體。</summary>
      <param name="type">轉換子類別的型別，用於此屬性所繫結之物件的資料轉換。</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>取得型別的完整限定型別名稱，此型別做為此屬性所繫結之物件的轉換子。</summary>
      <returns>型別的完整限定型別名稱，此型別做為此屬性所繫結之物件的轉換子，如果型別不存在的話，為空字串 ("")。預設值為空字串 ("")。</returns>
    </member>
    <member name="T:System.Diagnostics.Debug">
      <summary>提供一組幫助您偵錯程式碼的方法和屬性。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean)">
      <summary>檢查條件，並且如果條件為 false，則輸出呼叫堆疊。</summary>
      <param name="condition">要評估的條件運算式。如果條件為 true，則不會顯示呼叫堆疊。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)">
      <summary>檢查條件，並且如果條件為 false，則顯示指定的訊息。</summary>
      <param name="condition">要評估的條件運算式。如果條件為 true，則不會顯示指定的訊息。</param>
      <param name="message">要顯示的訊息。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)">
      <summary>檢查條件，並且如果條件為 false，則顯示指定的訊息。</summary>
      <param name="condition">要評估的條件運算式。如果條件為 true，則不會顯示指定的訊息。</param>
      <param name="message">要顯示的訊息。</param>
      <param name="detailMessage">要顯示的詳細訊息。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])">
      <summary>檢查條件、輸出訊息，並且如果條件為 false，則輸出呼叫堆疊。</summary>
      <param name="condition">要評估的條件運算式。如果條件為 true，則不會顯示指定的訊息和呼叫堆疊。</param>
      <param name="message">要顯示的訊息。</param>
      <param name="detailMessageFormat">複合格式字串，包含混合零或多個格式項目的文字，其與 <paramref name="args" /> 陣列中的物件相對應。</param>
      <param name="args">物件陣列，包含零或多個要格式化的物件。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.Object)">
      <summary>使用由 OutputDebugString 函式，將指定物件的 <see cref="M:System.Object.ToString" /> 方法值寫入偵錯工具。</summary>
      <param name="value">物件，該物件的名稱會利用 OutputDebugString 函式傳送到偵錯工具。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String)">
      <summary>利用 OutputDebugString 函式，將後面接著行結束字元的指定訊息寫入偵錯工具。</summary>
      <param name="message">要寫入偵錯工具的訊息。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])">
      <summary>利用 OutputDebugString 函式，將後面接著行結束字元的格式化字串寫入偵錯工具。</summary>
      <param name="format">複合格式字串，包含混合零或多個格式項目的文字，其與 <paramref name="args" /> 陣列中的物件相對應。</param>
      <param name="args">物件陣列，包含零個或多個要格式化的物件。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)">
      <summary>如果條件為 true，則利用 OutputDebugString 函式，將後面接著行結束字元的指定訊息寫入偵錯工具。</summary>
      <param name="condition">要評估的條件運算式。如果條件為 true，則將指定的訊息寫入偵錯工具。</param>
      <param name="message">要寫入偵錯工具的訊息。 </param>
    </member>
    <member name="T:System.Diagnostics.Stopwatch">
      <summary>提供一組方法和屬性，讓您可用來準確地測量經過的時間。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.#ctor">
      <summary>建立 <see cref="T:System.Diagnostics.Stopwatch" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.Elapsed">
      <summary>取得目前執行個體所測量到的經過時間總數。</summary>
      <returns>傳回 <see cref="T:System.TimeSpan" />。</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
      <summary>取得目前執行個體所測量到的經過時間總數，以毫秒為單位。</summary>
      <returns>傳回 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
      <summary>取得目前執行個體所測量到的經過時間總數，以滴答計時為單位。</summary>
      <returns>傳回 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.Frequency">
      <summary>取得計時器頻率，以做為每秒的滴答數。此欄位為唯讀的。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetElapsedDateTimeTicks">
      <summary>取得表示此執行個體之日期與時間的滴答數。</summary>
      <returns>傳回 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetRawElapsedTicks">
      <summary>取得目前執行個體所測量到的經過時間總數，以滴答計時為單位。</summary>
      <returns>傳回 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetTimestamp">
      <summary>利用計時器機制來取得目前的滴答數。</summary>
      <returns>傳回 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.IsHighResolution">
      <summary>指出計時器是否會以高解析效能計數器為基礎。此欄位為唯讀的。</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.IsRunning">
      <summary>取得值，指出 Stopwatch 計時器是否正在執行。</summary>
      <returns>傳回 <see cref="T:System.Boolean" />。如果 Stopwatch 執行個體目前正在執行且正在測量時間間隔所經過的時間，則為 true；否則為 false。 </returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Reset">
      <summary>停止時間間隔測量，並將經過時間重設為零。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Restart">
      <summary>停止時間間隔測量，並將耗用時間重設為零，然後開始測量耗用時間。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Start">
      <summary>開始或繼續測量時間間隔的經過時間。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.StartNew">
      <summary>初始化新的 Stopwatch 執行個體、將經過時間屬性設定為零，然後開始測量經過時間。</summary>
      <returns>傳回 <see cref="T:System.Diagnostics.Stopwatch" />。</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Stop">
      <summary>停止測量時間間隔的經過時間。</summary>
    </member>
    <member name="T:System.IO.InvalidDataException">
      <summary>資料流在格式無效時擲回的例外狀況。</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor">
      <summary>初始化 <see cref="T:System.IO.InvalidDataException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.IO.InvalidDataException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>使用造成此例外狀況原因的內部例外參考來初始化 <see cref="T:System.IO.InvalidDataException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，即會在處理內部例外狀況的 catch 區塊中發生目前的例外狀況。</param>
    </member>
    <member name="T:System.Net.WebUtility">
      <summary>提供處理 Web 要求時用於編碼和解碼 URL 的方法。</summary>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String)">
      <summary>將已經為 HTTP 傳輸而進行 HTML 編碼的字串轉換為解碼的字串。</summary>
      <returns>解碼的字串。</returns>
      <param name="value">要解碼的字串。</param>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String)">
      <summary>將字串轉換為 HTML 編碼的字串。</summary>
      <returns>編碼字串。</returns>
      <param name="value">要編碼的字串。</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecode(System.String)">
      <summary>將 URL 中已編碼進行傳輸的字串轉換為解碼的字串。</summary>
      <returns>解碼的字串。</returns>
      <param name="encodedValue">要解碼的字串。</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>使用指定的編碼物件，從陣列中的指定位置開始，一直到指定的位元組數為止，將 URL 編碼的位元組陣列轉換為解碼的字串。</summary>
      <returns>解碼的字串。</returns>
      <param name="encodedValue">要解碼的位元組陣列。</param>
      <param name="offset">要在位元組中開始解碼的位置。</param>
      <param name="count">要解碼的位元組數。</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncode(System.String)">
      <summary>對 URL 字串進行編碼。</summary>
      <returns>編碼字串。</returns>
      <param name="value">要編碼的文字。</param>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>從陣列中的指定位置開始，一直到指定的位元組數為止，將位元組陣列轉換為 URL 編碼的字串。</summary>
      <returns>編碼字串。</returns>
      <param name="value">要編碼的位元組陣列。</param>
      <param name="offset">要在位元組陣列中開始編碼的位置。</param>
      <param name="count">要編碼的位元組數。</param>
    </member>
    <member name="T:System.Text.RegularExpressions.Capture">
      <summary>表示單一子運算式擷取的結果。</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
      <summary>在原始字串中找到擷取的子字串的第 1 個字元之位置。</summary>
      <returns>在原始字串中找到擷取的子字串之以零為起始的開始位置。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
      <summary>擷取的子字串的長度。</summary>
      <returns>擷取的子字串的長度。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
      <summary>從輸入字串取得擷取的子字串。</summary>
      <returns>該比對擷取的實際子字串。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
      <summary>從輸入字串取得擷取的子字串。</summary>
      <returns>該比對擷取的實際子字串。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
      <summary>表示單一擷取群組完成的擷取集合。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
      <summary>複製集合的所有元素至指定索引處開始的指定陣列。</summary>
      <param name="array">集合要被複製到的陣列。</param>
      <param name="arrayIndex">在目的陣列中要開始複製的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 在 <paramref name="array" /> 的範圍外。-或-<paramref name="arrayIndex" /> 加上 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" /> 在 <paramref name="array" /> 的範圍外。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
      <summary>取得群組所擷取的子字串數目。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.CaptureCollection" /> 中的項目數。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
      <summary>提供逐一查看集合的列舉程式。</summary>
      <returns>物件，包含 <see cref="T:System.Text.RegularExpressions.CaptureCollection" /> 內的所有 <see cref="T:System.Text.RegularExpressions.Capture" /> 物件。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
      <summary>取得值，該值指出集合是否是唯讀的。</summary>
      <returns>所有情況下都是 true。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
      <summary>取得值，指示對集合的存取是否為同步的 (安全執行緒)。</summary>
      <returns>所有情況下都是 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
      <summary>取得集合的個別成員。</summary>
      <returns>在集合中位置 <paramref name="i" /> 上的擷取的子字串。</returns>
      <param name="i">擷取集合內的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 小於 0 或大於 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" />。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
      <summary>取得物件，這個物件可用來同步化集合的存取。</summary>
      <returns>物件，可用來同步化集合的存取。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
      <summary>表示單一擷取群組的結果。</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
      <summary>依照最內層最左邊為優先的順序，取得符合擷取群組的所有擷取的集合 (如果規則運算式使用 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> 選項修改，則依照最內層最右邊為優先的順序)，集合可能有零個或更多項目。</summary>
      <returns>符合群組的子字串集合。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
      <summary>取得值，指出比對是否成功。</summary>
      <returns>如果比對成功則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
      <summary>表示單一比對中擷取群組的集合。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
      <summary>複製集合的所有元素至指定索引處開始的指定陣列。</summary>
      <param name="array">集合要被複製到的陣列。</param>
      <param name="arrayIndex">在目的陣列中要開始複製的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> 在 <paramref name="array" /> 的範圍外。-或-<paramref name="arrayIndex" /> 加上 <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> 在 <paramref name="array" /> 的範圍外。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
      <summary>傳回集合中的群組數。</summary>
      <returns>集合中的群組數。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
      <summary>傳回可在集合中逐一查看列舉程式。</summary>
      <returns>物件，包含 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 中的所有 <see cref="T:System.Text.RegularExpressions.Group" /> 物件。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
      <summary>取得值，該值指出集合是否是唯讀的。</summary>
      <returns>如果這個 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 是唯讀的則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
      <summary>取得值，指出對 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 的存取是否為同步 (安全執行緒)。</summary>
      <returns>在所有情況下都是 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
      <summary>以整數索引啟用對集合成員的存取。</summary>
      <returns>
        <paramref name="groupnum" /> 所指定之集合的成員。</returns>
      <param name="groupnum">要擷取之集合成員的以零為起始的索引。</param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
      <summary>以字串索引啟用對集合成員的存取。</summary>
      <returns>
        <paramref name="groupname" /> 所指定之集合的成員。</returns>
      <param name="groupname">擷取群組的名稱。</param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
      <summary>取得可用來對 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 同步存取的物件。</summary>
      <returns>要同步化的 <see cref="T:System.Text.RegularExpressions.Match" /> 物件複本。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
      <summary>表示單一規則運算式 (Regular Expression) 比對的結果。</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
      <summary>取得空白群組。所有失敗的比對會傳回此空白比對。</summary>
      <returns>空的 <see cref="T:System.Text.RegularExpressions.Match" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
      <summary>取得符合規則運算式的群組集合。</summary>
      <returns>符合模式的字元群組。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
      <summary>自最後 1 個比對結束的位置 (超過最後符合字元的字元) 開始，傳回具有下一個比對結果的新 <see cref="T:System.Text.RegularExpressions.Match" /> 物件。</summary>
      <returns>下一個規則運算式相符項目。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
      <summary>傳回所指定取代模式的展開 (Expansion)。</summary>
      <returns>
        <paramref name="replacement" /> 參數的展開版本。</returns>
      <param name="replacement">要使用的取代模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">這種模式不允許展開。</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
      <summary>表示藉由重複套用規則運算式 (Regular Expression) 模式至輸入字串，所找到的成功比對的集合。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
      <summary>複製集合的所有元素到指定索引處開始的指定陣列。</summary>
      <param name="array">集合要被複製到的陣列。</param>
      <param name="arrayIndex">在陣列中要開始複製的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多維陣列。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> 在 <paramref name="array" /> 的範圍外。-或-<paramref name="arrayIndex" /> 加上 <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> 在 <paramref name="array" /> 的範圍外。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
      <summary>取得符合項的數目。</summary>
      <returns>符合項的數目。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
      <summary>提供與 <see cref="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)" /> 順序相同的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 物件，包含 MatchCollection 內的所有 Match 物件。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
      <summary>取得值，指出集合是否為唯讀。</summary>
      <returns>此屬性的此值一律是 true。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
      <summary>取得值，指出對集合的存取是否為同步的 (安全執行緒)。</summary>
      <returns>此屬性的值一律是 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
      <summary>取得集合的個別成員。</summary>
      <returns>在集合中位置 <paramref name="i" /> 上的擷取的子字串。</returns>
      <param name="i">Match 集合內的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 小於 0，或大於或等於 <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" />。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
      <summary>取得物件，這個物件可用來同步化集合的存取。</summary>
      <returns>物件，可用來同步化集合的存取。此屬性一律傳回物件本身。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
      <summary>表示每次在 <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> 方法作業期間找到規則運算式 (Regular Expression) 相符項目時都會呼叫的方法。</summary>
      <returns>字串，由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委派 (Delegate) 所表示的方法傳回。</returns>
      <param name="match">
        <see cref="T:System.Text.RegularExpressions.Match" /> 物件，表示 <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> 方法作業期間的單一規則運算式相符項目。</param>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
      <summary>表示不變的規則運算式 (Regular Expression)。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
      <summary>初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
      <summary>初始化並編譯指定規則運算式之 <see cref="T:System.Text.RegularExpressions.Regex" /> 類別的新執行個體。</summary>
      <param name="pattern">要比對的規則運算式模式。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 為 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>使用會修改模式的選項來初始化並編譯指定規則運算式之 <see cref="T:System.Text.RegularExpressions.Regex" /> 類別的新執行個體。</summary>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 包含無效的旗標。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>使用模式修改選項，以及一個指定了模式比對方法應嘗試比對多久才逾時的值，為指定的規則運算式初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 類別的新執行個體。</summary>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合，這些值會修改規則運算式。</param>
      <param name="matchTimeout">逾時間隔，或是 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> 以表示方法不應該逾時。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值。-或-<paramref name="matchTimeout" /> 是負的或大於約 24 天。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CacheSize">
      <summary>取得或設定在已編譯規則運算式目前靜態快取中元素的最大數目。</summary>
      <returns>靜態快取中元素的最大數目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">設定作業中的值小於零。</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capsize">
      <summary>由規則運算式引擎於內部使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capslist">
      <summary>由規則運算式引擎於內部使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
      <summary>以逸出程式碼取代字元 (\、*、+、?、|、{、[、(、)、^、$、.、# 和泛空白字元) 的最小集合使其逸出。這樣做會指示規則運算式引擎直譯這些字元，而不會解譯為中繼字元。</summary>
      <returns>字元字串，包含任一轉換為逸出格式的中繼字元。</returns>
      <param name="str">輸入字串，包含要轉換的文字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
      <summary>傳回規則運算式的擷取群組名稱的陣列。</summary>
      <returns>群組名稱的字串陣列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
      <summary>傳回對應陣列中群組名稱的擷取群組編號的陣列。</summary>
      <returns>群組編號的整數陣列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
      <summary>取得對應指定群組編號的群組名稱。</summary>
      <returns>字串，包含與指定群組編號相關聯的群組名稱。如果沒有群組名稱與 <paramref name="i" /> 對應，方法會傳回 <see cref="F:System.String.Empty" />。</returns>
      <param name="i">群組編號，要轉換為對應群組名稱的。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
      <summary>傳回對應指定群組名稱的群組編號。</summary>
      <returns>與指定之群組編號對應的群組名稱，如果 <paramref name="name" /> 不是有效的群組名稱則為 -1。</returns>
      <param name="name">群組名稱，要轉換為對應群組編號。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout">
      <summary>指定模式比對操作不應該逾時。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
      <summary>指出 <see cref="T:System.Text.RegularExpressions.Regex" /> 建構函式中所指定的規則運算式是否在輸入字串中尋找比對。</summary>
      <returns>如果規則運算式尋找到相符項目則為 true，否則為 false。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
      <summary>指出 <see cref="T:System.Text.RegularExpressions.Regex" /> 建構函式中所指定的規則運算式，是否在從字串的指定起始位置開始的輸入字串中尋找比對。</summary>
      <returns>如果規則運算式尋找到相符項目則為 true，否則為 false。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="startat">要開始搜尋的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 不能小於零或大於 <paramref name="input" /> 的長度。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
      <summary>指出規則運算式是否使用 <paramref name="pattern" /> 參數中指定的規則運算式，在輸入字串中尋找比對。</summary>
      <returns>如果規則運算式尋找到相符項目則為 true，否則為 false。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="pattern" /> 為 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>指出規則運算式是否使用 <paramref name="pattern" /> 參數中指定的規則運算式和 <paramref name="options" /> 參數中提供的比對選項，在輸入字串中尋找比對。</summary>
      <returns>如果規則運算式尋找到相符項目則為 true，否則為false。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="pattern" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>表示指定的規則運算式是否使用指定的比對選項和逾時間隔，在指定的輸入字串中尋找相符項目。</summary>
      <returns>如果規則運算式尋找到相符項目則為 true，否則為 false。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合，提供用於比對的選項。</param>
      <param name="matchTimeout">逾時間隔，或是 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> 以表示方法不應該逾時。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
      <summary>在指定的輸入字串中，搜尋符合 <see cref="T:System.Text.RegularExpressions.Regex" /> 建構函式中所指定規則運算式的第 1 個項目。</summary>
      <returns>物件，包含符合之項目的相關資訊。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
      <summary>以指定之輸入字串的起始位置，在輸入字串中搜尋符合規則運算式的第 1 個項目。</summary>
      <returns>物件，包含符合之項目的相關資訊。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="startat">要開始搜尋之以零為起始的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小於零或大於 <paramref name="input" /> 的長度。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
      <summary>以指定的輸入字串起始位置和輸入字串長度，在輸入字串中搜尋規則運算式的第 1 個項目。</summary>
      <returns>物件，包含符合之項目的相關資訊。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="beginning">在輸入字串中的字元位置 (以零為起始)，定義要搜尋的最左側位置。</param>
      <param name="length">子字串中要包含以搜尋的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="beginning" /> 小於零或大於 <paramref name="input" /> 的長度。-或-<paramref name="length" /> 小於零或大於 <paramref name="input" /> 的長度。-或-<paramref name="beginning" />+<paramref name="length" />– 1 識別在 <paramref name="input" /> 範圍之外的位置。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
      <summary>在指定的輸入字串中，搜尋符合 <paramref name="pattern" /> 參數中所提供規則運算式的第 1 個項目。</summary>
      <returns>物件，包含符合之項目的相關資訊。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="pattern" /> 為 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>以 <paramref name="pattern" /> 參數中提供的比對選項，在輸入字串搜尋符合 <paramref name="options" /> 參數中提供之規則運算式的第 1 個項目。</summary>
      <returns>物件，包含符合之項目的相關資訊。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="pattern" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效位元組合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>使用指定的比對選項和逾時間隔，在輸入字串中搜尋所指定規則運算式的第一個相符項目。</summary>
      <returns>物件，包含符合之項目的相關資訊。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合，提供用於比對的選項。</param>
      <param name="matchTimeout">逾時間隔，或是 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> 以表示方法不應該逾時。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效位元組合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。如需關於逾時的詳細資訊，請參閱「備註」一節。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
      <summary>在指定的輸入字串搜尋規則運算式的所有元素。</summary>
      <returns>搜尋所找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 物件集合。若找不到相符項目，方法會傳回空集合物件。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
      <summary>自字串中指定的起始位置開始，在指定的輸入字串搜尋規則運算式的所有元素。</summary>
      <returns>搜尋所找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 物件集合。若找不到相符項目，方法會傳回空集合物件。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="startat">在輸入字串中開始搜尋的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小於零或大於 <paramref name="input" /> 的長度。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
      <summary>在指定的輸入字串搜尋 <paramref name="pattern" /> 參數所指定規則運算式的所有元素。</summary>
      <returns>搜尋所找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 物件集合。若找不到相符項目，方法會傳回空集合物件。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="pattern" /> 為 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>以 <paramref name="pattern" /> 參數所提供的比對選項，在指定的輸入字串搜尋 <paramref name="options" /> 參數所提供的規則運算式的所有元素。</summary>
      <returns>搜尋所找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 物件集合。若找不到相符項目，方法會傳回空集合物件。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="pattern" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效位元組合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>使用指定的比對選項和逾時間隔，在指定的輸入字串中搜尋所指定規則運算式的所有相符項目。</summary>
      <returns>搜尋所找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 物件集合。若找不到相符項目，方法會傳回空集合物件。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合，這些值會指定用於比對的選項。</param>
      <param name="matchTimeout">逾時間隔，或是 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> 以表示方法不應該逾時。</param>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.MatchTimeout">
      <summary>取得目前執行個體的逾時間隔。</summary>
      <returns>在擲回 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 之前模式比對操作可以經過的最大時間間隔，如果已停用逾時則為 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
      <summary>傳回傳遞至 <see cref="T:System.Text.RegularExpressions.Regex" /> 建構函式 (Constructor) 中的選項。</summary>
      <returns>傳遞至 Regex 建構函式中的 <paramref name="options" /> 參數。</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.pattern">
      <summary>由規則運算式引擎於內部使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
      <summary>在指定的輸入字串內，使用指定的取代字串來取代符合規則運算式模式的所有字串。</summary>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="replacement">取代字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="replacement" /> 為 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
      <summary>在指定的輸入字串內，使用指定的取代字串來取代符合規則運算式模式的指定最大字串數目。</summary>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="replacement">取代字串。</param>
      <param name="count">取代作業可以發生的最大次數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="replacement" /> 為 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>在指定的輸入子字串內，使用指定的取代字串來取代符合規則運算式模式的指定最大字串數目。</summary>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="replacement">取代字串。</param>
      <param name="count">取代可以發生的最大次數。</param>
      <param name="startat">在輸入字串中開始搜尋的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="replacement" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小於零或大於 <paramref name="input" /> 的長度。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
      <summary>在指定的輸入字串內，使用指定的取代字串來取代符合指定之規則運算式的所有字串。</summary>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="replacement">取代字串。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="pattern" /> 為 null。-或-<paramref name="replacement" /> 為 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>在指定的輸入字串內，使用指定的取代字串來取代符合指定之規則運算式的所有字串。指定的選項會修改符合的作業。</summary>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="replacement">取代字串。</param>
      <param name="options">列舉值的位元組合。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="pattern" /> 為 null。-或-<paramref name="replacement" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效位元組合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>在指定的輸入字串中，使用指定的取代字串來取代符合指定之規則運算式的所有字串。其他參數指定當找不到相符項目時，要用來修改比對操作與逾時間隔的選項。</summary>
      <returns>與輸入字串相同的新字串，不同之處是取代字串會取代每一個相符的字串。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="replacement">取代字串。</param>
      <param name="options">列舉值的位元組合，提供用於比對的選項。</param>
      <param name="matchTimeout">逾時間隔，或是 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> 以表示方法不應該逾時。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="replacement" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效位元組合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。如需關於逾時的詳細資訊，請參閱「備註」一節。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>在指定的輸入字串中，請使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委派所傳回的字串來取代所有符合指定之規則運算式的字串。</summary>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="evaluator">一個自訂方法，此方法會檢查每一個相符項目，並傳回原始的相符字串或取代字串。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="pattern" /> 為 null。-或-<paramref name="evaluator" /> 為 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
      <summary>在指定的輸入字串中，請使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委派所傳回的字串來取代所有符合指定之規則運算式的字串。指定的選項會修改符合的作業。</summary>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="evaluator">一個自訂方法，此方法會檢查每一個相符項目，並傳回原始的相符字串或取代字串。</param>
      <param name="options">列舉值的位元組合。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="pattern" /> 為 null。-或-<paramref name="evaluator" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效位元組合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>在指定的輸入字串中，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委派所傳回的字串來取代所有符合指定之規則運算式的子字串。其他參數指定當找不到相符項目時，要用來修改比對操作與逾時間隔的選項。</summary>
      <returns>與輸入字串相同的新字串，不同之處是取代字串會取代每一個相符的字串。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="evaluator">一個自訂方法，此方法會檢查每一個相符項目，並傳回原始的相符字串或取代字串。</param>
      <param name="options">列舉值的位元組合，提供用於比對的選項。</param>
      <param name="matchTimeout">逾時間隔，或是 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> 以表示方法不應該逾時。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="evaluator" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效位元組合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。如需關於逾時的詳細資訊，請參閱「備註」一節。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>在指定的輸入字串中，請使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委派所傳回的字串來取代所有符合指定之規則運算式的字串。</summary>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="evaluator">一個自訂方法，此方法會檢查每一個相符項目，並傳回原始的相符字串或取代字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="evaluator" /> 為 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
      <summary>在指定的輸入字串內，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委派所傳回的字串來取代符合規則運算式模式的指定最大字串數目。</summary>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="evaluator">一個自訂方法，此方法會檢查每一個相符項目，並傳回原始的相符字串或取代字串。</param>
      <param name="count">取代將發生的最大次數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="evaluator" /> 為 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
      <summary>在指定的輸入字串內，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委派所傳回的字串來取代符合規則運算式模式的指定最大子字串數目。</summary>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。</returns>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="evaluator">一個自訂方法，此方法會檢查每一個相符項目，並傳回原始的相符字串或取代字串。</param>
      <param name="count">取代將發生的最大次數。</param>
      <param name="startat">在輸入字串中開始搜尋的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="evaluator" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小於零或大於 <paramref name="input" /> 的長度。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
      <summary>取得值，指出規則運算式是否由右至左搜尋。</summary>
      <returns>如果規則運算式由右至左搜尋則為 true，否則為 false。</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.roptions">
      <summary>由規則運算式引擎於內部使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
      <summary>在 <see cref="T:System.Text.RegularExpressions.Regex" /> 建構函式中指定之規則運算式模式所定義的位置，分隔指定的輸入字串。</summary>
      <returns>字串的陣列。</returns>
      <param name="input">要分隔的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
      <summary>在 <see cref="T:System.Text.RegularExpressions.Regex" /> 建構函式中指定的規則運算式所定義的位置，以指定的最大次數來分隔指定的輸入字串。</summary>
      <returns>字串的陣列。</returns>
      <param name="input">要分隔的字串。</param>
      <param name="count">分隔作業可以發生的最大次數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
      <summary>在 <see cref="T:System.Text.RegularExpressions.Regex" /> 建構函式中指定的規則運算式所定義的位置，以指定的最大次數來分隔指定的輸入字串。規則運算式模式從輸入字串中指定的字元位置開始搜尋。</summary>
      <returns>字串的陣列。</returns>
      <param name="input">要分隔的字串。</param>
      <param name="count">分隔作業可以發生的最大次數。</param>
      <param name="startat">在輸入字串中要開始搜尋的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小於零或大於 <paramref name="input" /> 的長度。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
      <summary>在規則運算式模式所定義的位置分隔輸入字串。</summary>
      <returns>字串的陣列。</returns>
      <param name="input">要分隔的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="pattern" /> 為 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>在指定規則運算式模式所定義的位置分隔輸入字串。指定的選項會修改符合的作業。</summary>
      <returns>字串的陣列。</returns>
      <param name="input">要分隔的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="pattern" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效位元組合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>在指定的規則運算式模式所定義的位置，將輸入字串分割成子字串陣列。其他參數指定當找不到相符項目時，要用來修改比對操作與逾時間隔的選項。</summary>
      <returns>字串陣列。</returns>
      <param name="input">要分隔的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合，提供用於比對的選項。</param>
      <param name="matchTimeout">逾時間隔，或是 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> 以表示方法不應該逾時。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效位元組合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。如需關於逾時的詳細資訊，請參閱「備註」一節。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
      <summary>傳回傳遞至 Regex 建構函式中的規則運算式模式。</summary>
      <returns>傳遞至 Regex 建構函式中的 <paramref name="pattern" /> 參數。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
      <summary>未逸出輸入字串中任何逸出的字元。</summary>
      <returns>字元字串，其中任何逸出字元轉換成其未逸出格式。</returns>
      <param name="str">輸入字串，包含要轉換的文字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionR">
      <summary>由規則運算式引擎於內部使用。</summary>
      <returns>如果 <see cref="P:System.Text.RegularExpressions.Regex.Options" /> 屬性包含 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> 選項則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
      <summary>規則運算式模式比對方法的執行時間超過其逾時間隔時擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor">
      <summary>使用系統提供的訊息來初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String)">
      <summary>使用指定的訊息字串來初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 類別的新執行個體。</summary>
      <param name="message">描述例外狀況的字串。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 類別的新執行個體。</summary>
      <param name="message">描述例外狀況的字串。</param>
      <param name="inner">造成目前例外狀況的例外狀況。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.String,System.TimeSpan)">
      <summary>利用有關規則運算式模式、輸入文字及逾時間隔的資訊，初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 類別的新執行個體。</summary>
      <param name="regexInput">規則運算式引擎在逾時發生時正在處理的輸入文字。</param>
      <param name="regexPattern">規則運算式引擎在逾時發生時所使用的模式。</param>
      <param name="matchTimeout">逾時間隔。</param>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Input">
      <summary>[安全性關鍵] 取得規則運算式引擎在逾時發生時正在處理的輸入文字。</summary>
      <returns>規則運算式輸入文字。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout">
      <summary>[安全性關鍵] 取得規則運算式比對的逾時間隔。</summary>
      <returns>逾時間隔。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Pattern">
      <summary>[安全性關鍵] 取得在逾時發生時比對作業中所使用的規則運算式。</summary>
      <returns>規則運算式模式。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
      <summary>提供用來設定規則運算式 (Regular Expression) 選項的列舉程式值。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Compiled">
      <summary>指定規則運算式要編譯為組件。這將產生較快速的執行，但會增加啟動時間。在呼叫 <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> 方法時，不應將這個值指派至 <see cref="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" /> 屬性。僅在 Windows Phone 中出現，但不受支援。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
      <summary>指定忽略語言中的文化差異。通常，規則運算式引擎會根據目前文化特性的慣例，執行字串比較。如果沒有指定 <see cref="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant" /> 選項，則會使用非變異文化特性的慣例。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
      <summary>啟用運算式的 ECMAScript 相容行為。這個值只能結合 <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" /> 和 <see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline" /> 值使用。將此值與任何其他值一起使用都將導致例外狀況。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
      <summary>指定唯一有效的擷取為明確命名的或編號的，格式為 (?&lt;name&gt;…) 的群組。這允許未命名的括號充當非擷取群組，而避免運算式 (?:…) 的語法不便。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
      <summary>指定區分大小寫的比對。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
      <summary>從模式排除未逸出的泛空白字元 (White Space)，並啟用以 # 標記的註解。不過，<see cref="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace" /> 值不會影響或排除字元類別中的泛空白字元。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
      <summary>多行模式。變更 ^ 和 $ 的意義以致它們分別在任何一行的開頭和結尾做比對，而不只是整個字串的開頭和結尾。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
      <summary>指定無選項設定。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
      <summary>指定搜尋將由右至左，而非由左至右。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
      <summary>指定單行模式。變更點 (.) 的意義，使它符合一切字元 (而不是 \n 之外的一切字元)。</summary>
    </member>
    <member name="T:System.Threading.Barrier">
      <summary>允許多項工作在多個階段中以平行方式來合作處理某個演算法。</summary>
    </member>
    <member name="M:System.Threading.Barrier.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Threading.Barrier" /> 類別的新執行個體。</summary>
      <param name="participantCount">參與執行緒的數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> 小於 0 或大於 32,767。</exception>
    </member>
    <member name="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
      <summary>初始化 <see cref="T:System.Threading.Barrier" /> 類別的新執行個體。</summary>
      <param name="participantCount">參與執行緒的數目。</param>
      <param name="postPhaseAction">要在每個階段之後執行的 <see cref="T:System.Action`1" />。可傳遞 null (Visual Basic 中為 Nothing) 以表示不採取任何動作。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> 小於 0 或大於 32,767。</exception>
    </member>
    <member name="M:System.Threading.Barrier.AddParticipant">
      <summary>通知 <see cref="T:System.Threading.Barrier" />，表示還會有一個其他參與者。</summary>
      <returns>新參與者將第一次參與其中的屏障階段編號。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">加入參與者會造成屏障的參與者計數超過 32,767。-或-此方法是從 post-phase 動作中叫用。</exception>
    </member>
    <member name="M:System.Threading.Barrier.AddParticipants(System.Int32)">
      <summary>通知 <see cref="T:System.Threading.Barrier" />，表示還會有多個其他參與者。</summary>
      <returns>新參與者將第一次參與其中的屏障階段編號。</returns>
      <param name="participantCount">要加入至屏障的其他參與者數目。</param>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> 小於 0。-或-加入 <paramref name="participantCount" /> 參與者會造成屏障的參與者計數超過 32,767。</exception>
      <exception cref="T:System.InvalidOperationException">此方法是從 post-phase 動作中叫用。</exception>
    </member>
    <member name="P:System.Threading.Barrier.CurrentPhaseNumber">
      <summary>取得屏障目前階段的編號。</summary>
      <returns>傳回屏障目前階段的編號。</returns>
    </member>
    <member name="M:System.Threading.Barrier.Dispose">
      <summary>將 <see cref="T:System.Threading.Barrier" /> 類別目前的執行個體所使用的資源全部釋出。</summary>
      <exception cref="T:System.InvalidOperationException">此方法是從 post-phase 動作中叫用。</exception>
    </member>
    <member name="M:System.Threading.Barrier.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Threading.Barrier" /> 使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 以釋放 Managed 和 Unmanaged 資源，false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="P:System.Threading.Barrier.ParticipantCount">
      <summary>取得在屏障中的參與者總數。</summary>
      <returns>傳回在屏障中的參與者總數。</returns>
    </member>
    <member name="P:System.Threading.Barrier.ParticipantsRemaining">
      <summary>取得在目前階段中尚未發出訊號的屏障中參與者數目。</summary>
      <returns>傳回在目前階段中尚未發出訊號的屏障中參與者數目。</returns>
    </member>
    <member name="M:System.Threading.Barrier.RemoveParticipant">
      <summary>通知 <see cref="T:System.Threading.Barrier" />，表示會減少一個參與者。</summary>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">屏障已經有 0 個參與者。-或-此方法是從 post-phase 動作中叫用。</exception>
    </member>
    <member name="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
      <summary>通知 <see cref="T:System.Threading.Barrier" />，表示會減少一些參與者。</summary>
      <param name="participantCount">要從屏障中移除的其他參與者數目。</param>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> 小於 0。</exception>
      <exception cref="T:System.InvalidOperationException">屏障已經有 0 個參與者。-或-此方法是從 post-phase 動作中叫用。 -或-目前的參與者計數少於指定的 participantCount</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">參與者總計數小於指定的 <paramref name=" participantCount" /></exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait">
      <summary>發出訊號，表示參與者已到達 <see cref="T:System.Threading.Barrier" />，並且在等候所有其他參與者到達屏障。</summary>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">此方法是從 post-phase 動作中叫用，屏障目前有 0 個參與者，或者使用該屏障的執行緒數量多於註冊為參與者的數量。</exception>
      <exception cref="T:System.BarrierPostPhaseException">所有參與執行緒皆已呼叫 SignalAndWait 後，如果從 Barrier 的階段後動作擲回例外，會將例外狀況包裝在 BarrierPostPhaseException 中，並擲回所有參與執行緒。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
      <summary>發出訊號，表示參與者已到達 <see cref="T:System.Threading.Barrier" />，並且在等候所有其他參與者到達屏障 (使用 32 位元帶正負號的整數以測量逾時)。</summary>
      <returns>如果所有參與者已在指定時間內達到屏障則為 true，否則為 false。</returns>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
      <exception cref="T:System.InvalidOperationException">此方法是從 post-phase 動作中叫用，屏障目前有 0 個參與者，或者使用該屏障的執行緒數量多於註冊為參與者的數量。</exception>
      <exception cref="T:System.BarrierPostPhaseException">所有參與執行緒皆已呼叫 SignalAndWait 後，如果從 Barrier 的階段後動作擲回例外，會將例外狀況包裝在 BarrierPostPhaseException 中，並擲回所有參與執行緒。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
      <summary>發出訊號，表示參與者已到達屏障，並且在等候所有其他參與者到達 (使用 32 位元帶正負號的整數以測量逾時)，同時觀察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>如果所有參與者已在指定時間內達到屏障則為 true，否則為 false。</returns>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="cancellationToken">要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
      <exception cref="T:System.InvalidOperationException">此方法是從 post-phase 動作中叫用，屏障目前有 0 個參與者，或者使用該屏障的執行緒數量多於註冊為參與者的數量。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
      <summary>發出訊號，表示參與者已到達 <see cref="T:System.Threading.Barrier" />，並且在等候所有其他參與者到達，同時觀察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <param name="cancellationToken">要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">此方法是從 post-phase 動作中叫用，屏障目前有 0 個參與者，或者使用該屏障的執行緒數量多於註冊為參與者的數量。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
      <summary>發出訊號，表示參與者已到達 <see cref="T:System.Threading.Barrier" />，並且在等候所有其他參與者到達屏障 (使用 <see cref="T:System.TimeSpan" /> 以測量時間間隔)。</summary>
      <returns>如果所有其他參與者已達到屏障則為 true，否則為 false。</returns>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示要等候的毫秒數，或是 <see cref="T:System.TimeSpan" />，表示無限期等候的 -1 毫秒。</param>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是除了 -1 毫秒以外的負數，表示無限逾時，或是大於 32,767 的逾時。</exception>
      <exception cref="T:System.InvalidOperationException">此方法是從 post-phase 動作中叫用，屏障目前有 0 個參與者，或者使用該屏障的執行緒數量多於註冊為參與者的數量。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>發出訊號，表示參與者已到達 <see cref="T:System.Threading.Barrier" />，並且在等候所有其他參與者到達屏障 (使用 <see cref="T:System.TimeSpan" /> 以測量時間間隔)，同時觀察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>如果所有其他參與者已達到屏障則為 true，否則為 false。</returns>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示要等候的毫秒數，或是 <see cref="T:System.TimeSpan" />，表示無限期等候的 -1 毫秒。</param>
      <param name="cancellationToken">要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是一個不等於 -1 毫秒的負數，-1 毫秒表示無限期的等候逾時。</exception>
      <exception cref="T:System.InvalidOperationException">此方法是從 post-phase 動作中叫用，屏障目前有 0 個參與者，或者使用該屏障的執行緒數量多於註冊為參與者的數量。</exception>
    </member>
    <member name="T:System.Threading.BarrierPostPhaseException">
      <summary>在 <see cref="T:System.Threading.Barrier" /> 的後續階段動作失敗時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Threading.BarrierPostPhaseException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.Exception)">
      <summary>使用指定的內部例外狀況，初始化 <see cref="T:System.Threading.BarrierPostPhaseException" /> 類別的新執行個體。</summary>
      <param name="innerException">造成目前例外狀況的例外狀況。</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.Threading.BarrierPostPhaseException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.Threading.BarrierPostPhaseException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，則會在處理內部例外狀況的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.Threading.Semaphore">
      <summary>限制可以同時存取資源或資源集區的執行緒數目。</summary>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 類別的新執行個體，以及指定並行項目的最大數目及選擇性地保留某些項目。</summary>
      <param name="initialCount">可同時授與給號誌的初始要求數目。</param>
      <param name="maximumCount">可以同時授與之號誌要求的最大數目。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCount" /> 大於 <paramref name="maximumCount" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumCount" /> 小於 1。-或-<paramref name="initialCount" /> 小於 0。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)">
      <summary>[安全性關鍵] 初始化 <see cref="T:System.Threading.Semaphore" /> 類別的新執行個體、然後指定並行項目的最大數目、選擇性地保留呼叫執行緒的某些項目，以及選擇性地指定系統號誌物件的名稱。</summary>
      <param name="initialCount">可同時授與給號誌的初始要求數目。</param>
      <param name="maximumCount">可以同時授與之號誌要求的最大數目。</param>
      <param name="name">具名系統號誌物件的名稱。</param>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)">
      <summary>[安全性關鍵] 初始化 <see cref="T:System.Threading.Semaphore" /> 類別的新執行個體、然後指定並行項目的最大數目、選擇性地保留呼叫執行緒的某些項目、選擇性地指定系統號誌物件的名稱，以及指定接收值的變數，指出是否已建立新的系統號誌。</summary>
      <param name="initialCount">可以同時滿足之號誌要求的初始數目。</param>
      <param name="maximumCount">可以同時滿足之號誌要求的最大數目。</param>
      <param name="name">具名系統號誌物件的名稱。</param>
      <param name="createdNew">這個方法傳回時，如果已建立本機號誌 (也就是說，如果 <paramref name="name" /> 為 null 或空字串)，或是已建立指定的已命名系統號誌，則會包含 true；如果指定的已命名系統號誌已存在，則為false。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Threading.Semaphore.OpenExisting(System.String)">
      <summary>[安全性關鍵] 如果它已存在，便會開啟指定的具名號誌。</summary>
      <returns>表示具名系統號誌的物件。</returns>
      <param name="name">要開啟之系統號誌的名稱。</param>
    </member>
    <member name="M:System.Threading.Semaphore.Release">
      <summary>結束號誌，並傳回上一個計數。</summary>
      <returns>呼叫 <see cref="Overload:System.Threading.Semaphore.Release" /> 方法之前，號誌上的計數。</returns>
      <exception cref="T:System.Threading.SemaphoreFullException">號誌計數已達到最大值。</exception>
      <exception cref="T:System.IO.IOException">具名號誌中發生 Win32 錯誤。</exception>
      <exception cref="T:System.UnauthorizedAccessException">目前的號誌代表具名系統號誌，但是使用者沒有 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />。-或-目前的號誌代表具名系統號誌，但是並未以 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 開啟。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.Release(System.Int32)">
      <summary>以指定的次數結束號誌，並回到上一個計數。</summary>
      <returns>呼叫 <see cref="Overload:System.Threading.Semaphore.Release" /> 方法之前，號誌上的計數。</returns>
      <param name="releaseCount">結束號誌的次數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="releaseCount" /> 小於 1。</exception>
      <exception cref="T:System.Threading.SemaphoreFullException">號誌計數已達到最大值。</exception>
      <exception cref="T:System.IO.IOException">具名號誌中發生 Win32 錯誤。</exception>
      <exception cref="T:System.UnauthorizedAccessException">目前的號誌代表具名系統號誌，但是使用者沒有 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 權限。-或-目前的號誌代表具名系統號誌，但是並未以 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 權限開啟。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)">
      <summary>[安全性關鍵] 如果它已存在，便會開啟指定的具名號誌，並傳回值，指出作業是否成功。</summary>
      <returns>如果已成功開啟具名號誌，則為 true，否則為 false。</returns>
      <param name="name">要開啟之系統號誌的名稱。</param>
      <param name="result">這個方法傳回時，如果呼叫成功，則會包含 <see cref="T:System.Threading.Semaphore" /> 物件來表示具名號誌，如果呼叫失敗，則為 null。這個參數會被視為未初始化。</param>
    </member>
    <member name="T:System.Windows.Input.ICommand">
      <summary>定義命令的合約。</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
      <summary>定義可判斷命令是否能在其目前狀態中執行的方法。</summary>
      <returns>如果此命令可執行為 true，否則為 false。</returns>
      <param name="parameter">命令使用的資料。如果命令不需要傳遞資料，則此物件可設為 null。</param>
    </member>
    <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
      <summary>在變更的發生影響到命令是否應執行時發生。</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
      <summary>定義在叫用命令時要叫用的方法。</summary>
      <param name="parameter">命令使用的資料。如果命令不需要傳遞資料，則此物件可設為 null。 </param>
    </member>
  </members>
</doc>