<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>mscorlib</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid">
      <summary>[安全性關鍵] 為 Win32 安全控制代碼實作提供基底類別，此實作中，-1 值表示無效的控制代碼。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor(System.Boolean)">
      <summary>[安全性關鍵] 初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid" /> 類別的新執行個體，指定是否要確實地釋放控制代碼。</summary>
      <param name="ownsHandle">true 以最終處理階段期間可靠地釋放控制代碼，false 以可避免可靠釋放 (不建議使用)。</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid">
      <summary>[安全性關鍵] 取得值，這個值表示控制代碼是否無效。</summary>
      <returns>如果控制代碼無效為 true，否則為 false。</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid">
      <summary>[安全性關鍵] 提供基底類別 (Base Class) 給 Win32 安全控制代碼實作，此實作中，0 或 -1 值指出無效的控制代碼。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)">
      <summary>[安全性關鍵] 初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid" /> 類別的新執行個體，指定是否要確實地釋放控制代碼。</summary>
      <param name="ownsHandle">true 以最終處理階段期間可靠地釋放控制代碼，false 以可避免可靠釋放 (不建議使用)。</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid">
      <summary>[安全性關鍵] 取得值，這個值表示控制代碼是否無效。</summary>
      <returns>如果控制代碼無效為 true，否則為 false。</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeWaitHandle">
      <summary>[安全性關鍵] 代表等候控制代碼的包裝函式類別。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeWaitHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>[安全性關鍵] 初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> 類別的新執行個體。</summary>
      <param name="existingHandle">
        <see cref="T:System.IntPtr" /> 物件，表示要使用的既有控制代碼。</param>
      <param name="ownsHandle">true 以最終處理階段期間可靠地釋放控制代碼，false 以可避免可靠釋放 (不建議使用)。</param>
    </member>
    <member name="T:System.AccessViolationException">
      <summary>在嘗試讀取或寫入受保護的記憶體時擲回的例外。</summary>
    </member>
    <member name="M:System.AccessViolationException.#ctor">
      <summary>以系統提供的錯誤說明訊息來初始化 <see cref="T:System.AccessViolationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.AccessViolationException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.AccessViolationException" /> 類別的新執行個體，並含有說明錯誤的指定訊息。</summary>
      <param name="message">說明例外狀況的訊息。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.AccessViolationException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Action">
      <summary>封裝沒有參數並且未傳回值的方法。</summary>
    </member>
    <member name="T:System.Action`1">
      <summary>封裝採用單一參數的方法，並且不會傳回值。</summary>
      <param name="obj">此委派封裝之方法的參數。</param>
      <typeparam name="T">這個委派所封裝之方法的參數型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Action`2">
      <summary>封裝具有 2 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
    </member>
    <member name="T:System.Action`3">
      <summary>封裝採用 3 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
    </member>
    <member name="T:System.Action`4">
      <summary>封裝具有 4 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`5">
      <summary>封裝具有 5 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`6">
      <summary>封裝具有 6 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`7">
      <summary>封裝具有 7 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Action`8">
      <summary>封裝具有 8 個參數的方法，並且不會傳回值。</summary>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <param name="arg8">此委派封裝之方法的第 8 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">此委派封裝之方法之第 8 個參數的型別。</typeparam>
    </member>
    <member name="T:System.Activator">
      <summary>包含可本機建立物件型別的方法。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Activator.CreateInstance``1">
      <summary>使用無參數的建構函式，建立由指定泛型型別參數所指定的類型執行個體。</summary>
      <returns>新建物件的參考。</returns>
      <typeparam name="T">要建立的型別。</typeparam>
      <exception cref="T:System.MissingMethodException">為 <paramref name="T" /> 指定的型別沒有無參數建構函式。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type)">
      <summary>使用類型的預設建構函式，建立指定型別的執行個體。</summary>
      <returns>新建物件的參考。</returns>
      <param name="type">要建立之物件的型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 RuntimeType。-或-<paramref name="type" /> 是開放泛型型別 (也就是說，<see cref="P:System.Type.ContainsGenericParameters" /> 屬性會傳回 true)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 為 <see cref="T:System.Reflection.Emit.TypeBuilder" />。-或-不支援建立 <see cref="T:System.TypedReference" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 型別，或這些型別的陣列。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">呼叫的建構函式會擲回例外。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有使用權限來呼叫這個建構函式。</exception>
      <exception cref="T:System.MemberAccessException">無法建立 abstract 類別的執行個體，或已利用最後繫結機制叫用此成員。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的公用建構函式。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是 COM 物件，但是用來取得型別的類別識別項無效，或者所識別的類別並未註冊。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效的型別。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[])">
      <summary>使用最符合指定參數的建構函式，建立指定型別的執行個體。</summary>
      <returns>新建物件的參考。</returns>
      <param name="type">要建立之物件的型別。</param>
      <param name="args">符合要叫用之建構函式參數之數值、順序及類型的引數陣列。如果 <paramref name="args" /> 為空陣列或 null，即會叫用未使用任何參數的建構函式 (預設建構函式)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 RuntimeType。-或-<paramref name="type" /> 是開放泛型型別 (也就是說，<see cref="P:System.Type.ContainsGenericParameters" /> 屬性會傳回 true)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 為 <see cref="T:System.Reflection.Emit.TypeBuilder" />。-或-不支援建立 <see cref="T:System.TypedReference" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 型別，或這些型別的陣列。-或-最符合 <paramref name="args" /> 的建構函式具有 varargs 引數。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">呼叫的建構函式會擲回例外。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有使用權限來呼叫這個建構函式。</exception>
      <exception cref="T:System.MemberAccessException">無法建立 abstract 類別的執行個體，或已利用最後繫結機制叫用此成員。</exception>
      <exception cref="T:System.MissingMethodException">找不到相符的公用建構函式。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是 COM 物件，但是用來取得型別的類別識別項無效，或者所識別的類別並未註冊。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效的型別。</exception>
    </member>
    <member name="T:System.AggregateException">
      <summary>表示應用程式執行期間所發生的一個或多個錯誤。</summary>
    </member>
    <member name="M:System.AggregateException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.AggregateException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>使用造成這個例外狀況之內部例外狀況的參考，初始化 <see cref="T:System.AggregateException" /> 類別的新執行個體。</summary>
      <param name="innerExceptions">導致目前例外狀況的例外。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerExceptions" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerExceptions" /> 的項目是 null。</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.Exception[])">
      <summary>使用造成這個例外狀況之內部例外狀況的參考，初始化 <see cref="T:System.AggregateException" /> 類別的新執行個體。</summary>
      <param name="innerExceptions">導致目前例外狀況的例外。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerExceptions" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerExceptions" /> 的項目是 null。</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.AggregateException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>使用指定的錯誤訊息和造成這個例外狀況之內部例外狀況的參考，初始化 <see cref="T:System.AggregateException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerExceptions">導致目前例外狀況的例外。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerExceptions" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerExceptions" /> 的項目是 null。</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.AggregateException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
      <param name="innerException">造成目前例外狀況的例外。如果 <paramref name="innerException" /> 參數並非 null，即會在處理內部例外狀況的 catch 區塊中發生目前的例外狀況。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerException" /> 引數為 null。</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Exception[])">
      <summary>使用指定的錯誤訊息和造成這個例外狀況之內部例外狀況的參考，初始化 <see cref="T:System.AggregateException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerExceptions">導致目前例外狀況的例外。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerExceptions" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerExceptions" /> 的項目是 null。</exception>
    </member>
    <member name="M:System.AggregateException.Flatten">
      <summary>將 <see cref="T:System.AggregateException" /> 執行個體簡維成單一新執行個體。</summary>
      <returns>簡維的新 <see cref="T:System.AggregateException" />。</returns>
    </member>
    <member name="M:System.AggregateException.GetBaseException">
      <summary>傳回這個例外狀況之根本原因的 <see cref="T:System.AggregateException" /> 物件。</summary>
      <returns>這個例外狀況之根本原因的 <see cref="T:System.AggregateException" /> 物件。</returns>
    </member>
    <member name="M:System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})">
      <summary>對這個 <see cref="T:System.AggregateException" /> 物件包含的每個 <see cref="T:System.Exception" /> 叫用處理常式。</summary>
      <param name="predicate">要對每個例外狀況執行的述詞。述詞會接受要處理的 <see cref="T:System.Exception" /> 做為引數，並傳回表示是否已處理例外狀況的 <see cref="T:System.Boolean" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 引數為 null。</exception>
      <exception cref="T:System.AggregateException">未處理此 <see cref="T:System.AggregateException" /> 所包含的例外狀況。</exception>
    </member>
    <member name="P:System.AggregateException.InnerExceptions">
      <summary>取得造成目前例外狀況之 <see cref="T:System.Exception" /> 執行個體的唯讀集合。</summary>
      <returns>造成目前例外狀況之 <see cref="T:System.Exception" /> 物件的唯讀集合。</returns>
    </member>
    <member name="M:System.AggregateException.ToString">
      <summary>傳回目前 <see cref="T:System.AggregateException" /> 的字串表示。</summary>
      <returns>目前例外狀況的字串表示。</returns>
    </member>
    <member name="T:System.AppDomain">
      <summary>表示應用程式定義域，此為應用程式執行的隔離環境。無法繼承此類別。</summary>
    </member>
    <member name="P:System.AppDomain.CurrentDomain">
      <summary>取得目前 <see cref="T:System.Threading.Thread" /> 的目前應用程式定義域。</summary>
      <returns>目前的應用程式定義域。</returns>
    </member>
    <member name="P:System.AppDomain.DomainManager">
      <summary>[安全性關鍵] 取得在已經初始化應用程式定義域時，由主應用程式提供的定義域管理員。</summary>
      <returns>
        <see cref="T:System.AppDomainManager" /> 物件，表示在初始化應用程式定義域時，由主機提供的定義域管理員，如果未提供任何定義域管理員，則為 null。</returns>
    </member>
    <member name="P:System.AppDomain.FriendlyName">
      <summary>取得此應用程式定義域的易記名稱。</summary>
      <returns>此應用程式定義域的易記名稱。</returns>
      <exception cref="T:System.AppDomainUnloadedException">嘗試在卸載的應用程式定義域中執行作業。</exception>
    </member>
    <member name="M:System.AppDomain.GetAssemblies">
      <summary>取得已載入此應用程式定義域之執行內容中的組件。</summary>
      <returns>此應用程式定義域中的組件陣列。</returns>
      <exception cref="T:System.AppDomainUnloadedException">嘗試在卸載的應用程式定義域中執行作業。</exception>
    </member>
    <member name="M:System.AppDomain.GetType">
      <summary>取得目前執行個體的類型。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示 <see cref="T:System.AppDomain" />。</returns>
    </member>
    <member name="M:System.AppDomain.ToString">
      <summary>取得包含應用程式定義域之易記名稱和任何內容原則的字串表示。</summary>
      <returns>將常值字串 "Name:"、應用程式定義域的易記名稱、內容原則的字串表示或字串 "There are no context policies" 串連起來所構成的字串。</returns>
      <exception cref="T:System.AppDomainUnloadedException">已經卸載目前的 <see cref="T:System.AppDomain" /> 所表示的應用程式定義域。</exception>
    </member>
    <member name="E:System.AppDomain.UnhandledException">
      <summary>發生於未攔截到例外狀況時。</summary>
    </member>
    <member name="T:System.AppDomainManager">
      <summary>[安全性關鍵] 提供 Unmanaged 主機的 Managed 相同對應項。</summary>
    </member>
    <member name="M:System.AppDomainManager.#ctor">
      <summary>[安全性關鍵] 初始化 <see cref="T:System.AppDomainManager" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)">
      <summary>[安全性關鍵] 傳回 <see cref="T:System.Boolean" />，指出應用程式定義域中是否允許指定的作業。</summary>
      <returns>如果主機允許在應用程式定義域中執行 <paramref name="state" /> 所指定的作業，則為 true，否則為 false。</returns>
      <param name="state">
        <see cref="T:System.Security.SecurityState" /> 的子類別，識別已要求安全性狀態的作業。</param>
    </member>
    <member name="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
      <summary>[安全性關鍵] 初始化新應用程式定義域。</summary>
      <param name="appDomainInfo">包含應用程式定義域初始化資訊的 <see cref="T:System.AppDomainSetup" /> 物件。</param>
    </member>
    <member name="T:System.AppDomainSetup">
      <summary>表示可加入至 <see cref="T:System.AppDomain" /> 執行個體的組件繫結資訊。</summary>
    </member>
    <member name="M:System.AppDomainSetup.#ctor">
      <summary>初始化 <see cref="T:System.AppDomainSetup" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.AppDomainSetup.ApplicationName">
      <summary>取得或設定應用程式的名稱。</summary>
      <returns>表示應用程式名稱的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.AppDomainSetup.LoaderOptimization">
      <summary>取得用來載入執行檔的最佳化原則。</summary>
      <returns>應用程式定義域的最佳化原則。</returns>
    </member>
    <member name="T:System.AppDomainUnloadedException">
      <summary>在嘗試存取卸載之應用程式定義域時擲回的例外。</summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor">
      <summary>初始化 <see cref="T:System.AppDomainUnloadedException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.AppDomainUnloadedException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.AppDomainUnloadedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.AppDomainUnloadedException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null 參考，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.ApplicationException">
      <summary>發生非嚴重應用程式錯誤時擲回的例外狀況。</summary>
    </member>
    <member name="M:System.ApplicationException.#ctor">
      <summary>初始化 <see cref="T:System.ApplicationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ApplicationException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.ApplicationException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.ApplicationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.ApplicationException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外。如果 <paramref name="innerException" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外的 catch 區塊中引發。 </param>
    </member>
    <member name="T:System.ArgumentException">
      <summary>為方法提供的其中一個引數無效時擲回的例外。</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor">
      <summary>初始化 <see cref="T:System.ArgumentException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.ArgumentException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.ArgumentException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null 參考，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
      <summary>使用指定的錯誤訊息和造成此例外狀況的參數名稱來初始化 <see cref="T:System.ArgumentException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="paramName">造成目前例外狀況的參數名稱。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的錯誤訊息、參數名稱和造成這個例外狀況原因的內部例外參考，初始化 <see cref="T:System.ArgumentException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="paramName">造成目前例外狀況的參數名稱。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null 參考，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="P:System.ArgumentException.Message">
      <summary>取得錯誤訊息和參數名稱，若未設定任何參數，則只會取得錯誤參數。</summary>
      <returns>描述例外狀況詳細資料的文字字串。這個屬性值是下列兩種形式中的一種：條件值<paramref name="paramName" /> 是 null 參考 (在 Visual Basic 中為 Nothing) 或長度為零。傳遞給建構函式的 <paramref name="message" /> 字串。<paramref name="paramName" /> 不是 null 參考 (在 Visual Basic 中為 Nothing) 且長度大於零。附加無效參數名稱的 <paramref name="message" /> 字串。</returns>
    </member>
    <member name="P:System.ArgumentException.ParamName">
      <summary>取得造成這個例外狀況的參數名稱。</summary>
      <returns>參數名稱。</returns>
    </member>
    <member name="T:System.ArgumentNullException">
      <summary>在將 null 參考 (在 Visual Basic 中為 Nothing) 傳送至不接受其成為有效引數的方法時擲回的例外狀況。</summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor">
      <summary>初始化 <see cref="T:System.ArgumentNullException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String)">
      <summary>使用造成此例外狀況的參數名稱來初始化 <see cref="T:System.ArgumentNullException" /> 類別的新執行個體。</summary>
      <param name="paramName">造成例外狀況的參數名稱。</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成此例外狀況的例外狀況來初始化 <see cref="T:System.ArgumentNullException" /> 類別的新執行個體。</summary>
      <param name="message">解釋此例外狀況原因的錯誤訊息。</param>
      <param name="innerException">目前例外狀況原因的例外狀況，如果沒有指定內部例外狀況，則為 null 參考 (Visual Basic 中的 Nothing)。 </param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
      <summary>使用指定的錯誤訊息和造成此例外狀況的參數名稱來初始化 <see cref="T:System.ArgumentNullException" /> 類別的執行個體。</summary>
      <param name="paramName">造成例外狀況的參數名稱。</param>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="T:System.ArgumentOutOfRangeException">
      <summary>當引數值不在叫用之方法所定義的允許值範圍內時擲回的例外狀況。</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor">
      <summary>初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
      <summary>使用造成此例外狀況的參數名稱來初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
      <param name="paramName">造成此例外狀況的參數名稱。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成此例外狀況的例外狀況來初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
      <param name="message">解釋此例外狀況原因的錯誤訊息。</param>
      <param name="innerException">目前例外狀況原因的例外狀況，如果沒有指定內部例外狀況，則為 null 參考 (Visual Basic 中的 Nothing)。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
      <summary>使用參數名稱、引數值和指定的錯誤訊息來初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
      <param name="paramName">造成例外狀況的參數名稱。</param>
      <param name="actualValue">造成例外狀況的引數名稱。</param>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
      <summary>使用指定的錯誤訊息和造成此例外狀況的參數名稱來初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 類別的新執行個體。</summary>
      <param name="paramName">造成例外狀況的參數名稱。</param>
      <param name="message">描述錯誤的訊息。 </param>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.ActualValue">
      <summary>取得造成這個例外狀況的引數值。</summary>
      <returns>Object，包含造成目前 <see cref="T:System.Exception" /> 的參數值。</returns>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.Message">
      <summary>取得錯誤訊息和表示無效引數值的字串，若引數值為 null，則只會取得錯誤訊息。</summary>
      <returns>此例外狀況的文字訊息。這個屬性值是下列兩種形式中的一種：條件值<paramref name="actualValue" /> 為 null。傳遞給建構函式的 <paramref name="message" /> 字串。<paramref name="actualValue" /> 不為 null。附加表示無效引數值之字串的 <paramref name="message" /> 字串。</returns>
    </member>
    <member name="T:System.ArithmeticException">
      <summary>在執行運算、轉型或轉換作業中發生錯誤時擲回的例外狀況。</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor">
      <summary>初始化 <see cref="T:System.ArithmeticException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.ArithmeticException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.ArithmeticException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null 參考，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Array">
      <summary>提供用來建立、操作、搜尋及排序陣列的方法，因此可在 Common Language Runtime 中用來做為所有陣列的基底類別。</summary>
    </member>
    <member name="M:System.Array.AsReadOnly``1(``0[])">
      <summary>傳回指定陣列的唯讀包裝函式。</summary>
      <returns>指定之陣列的唯讀 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 包裝函式。</returns>
      <param name="array">要在唯讀 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 包裝函式中包裝之以零為起始的一維陣列。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
      <summary>使用由 <see cref="T:System.Array" /> 的每個元素和指定的值所實作的 <see cref="T:System.IComparable" /> 介面，在已排序的一維 <see cref="T:System.Array" /> 中的某個元素範圍內搜尋值。</summary>
      <returns>如果找到 <paramref name="value" />，則為指定 <paramref name="array" /> 中指定 <paramref name="value" /> 的索引。如果沒有找到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 中的一個或多個元素，則為負數，也就是大於 <paramref name="value" /> 的第一個元素之索引的位元補數。如果找不到 <paramref name="value" />，且 <paramref name="value" /> 大於 <paramref name="array" /> 中的任何元素，則為負數，也就是 (最後一個元素的索引加 1) 的位元補數。</returns>
      <param name="array">要搜尋的已排序之一維 <see cref="T:System.Array" />。</param>
      <param name="index">要搜尋範圍的起始索引。</param>
      <param name="length">搜尋範圍的長度。</param>
      <param name="value">要搜尋的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 為多維。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="array" /> 中的有效範圍。-或-<paramref name="value" /> 是與 <paramref name="array" /> 的項目不相容的型別。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IComparable" /> 介面，而且搜尋作業遇到了不會實作 <see cref="T:System.IComparable" /> 介面的項目。</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" /> 介面，在已排序的一維 <see cref="T:System.Array" /> 中的某個元素範圍內搜尋一個值。</summary>
      <returns>如果找到 <paramref name="value" />，則為指定 <paramref name="array" /> 中指定 <paramref name="value" /> 的索引。如果沒有找到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 中的一個或多個元素，則為負數，也就是大於 <paramref name="value" /> 的第一個元素之索引的位元補數。如果找不到 <paramref name="value" />，且 <paramref name="value" /> 大於 <paramref name="array" /> 中的任何元素，則為負數，也就是 (最後一個元素的索引加 1) 的位元補數。</returns>
      <param name="array">要搜尋的已排序之一維 <see cref="T:System.Array" />。</param>
      <param name="index">要搜尋範圍的起始索引。</param>
      <param name="length">搜尋範圍的長度。</param>
      <param name="value">要搜尋的物件。</param>
      <param name="comparer">比較元素時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。-或-null 表示使用每個元素的 <see cref="T:System.IComparable" /> 實作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 為多維。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="array" /> 中的有效範圍。-或-<paramref name="comparer" /> 為 null，且<paramref name="value" /> 是與 <paramref name="array" /> 的項目不相容的型別。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，<paramref name="value" /> 不會實作 <see cref="T:System.IComparable" /> 介面，而且搜尋作業遇到了不會實作 <see cref="T:System.IComparable" /> 介面的項目。</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object)">
      <summary>使用由 <see cref="T:System.Array" /> 的每個元素和指定物件所實作的 <see cref="T:System.IComparable" /> 介面，針對指定的元素搜尋已排序的一維 <see cref="T:System.Array" />。</summary>
      <returns>如果找到 <paramref name="value" />，則為指定 <paramref name="array" /> 中指定 <paramref name="value" /> 的索引。如果沒有找到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 中的一個或多個元素，則為負數，也就是大於 <paramref name="value" /> 的第一個元素之索引的位元補數。如果找不到 <paramref name="value" />，且 <paramref name="value" /> 大於 <paramref name="array" /> 中的任何元素，則為負數，也就是 (最後一個元素的索引加 1) 的位元補數。</returns>
      <param name="array">要搜尋的已排序之一維 <see cref="T:System.Array" />。</param>
      <param name="value">要搜尋的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 為多維。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 是與 <paramref name="array" /> 的項目不相容的型別。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IComparable" /> 介面，而且搜尋作業遇到了不會實作 <see cref="T:System.IComparable" /> 介面的項目。</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
      <summary>使用由指定的 <see cref="T:System.Collections.IComparer" /> 介面，在整個一維排序的 <see cref="T:System.Array" /> 中搜尋值。</summary>
      <returns>如果找到 <paramref name="value" />，則為指定 <paramref name="array" /> 中指定 <paramref name="value" /> 的索引。如果沒有找到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 中的一個或多個元素，則為負數，也就是大於 <paramref name="value" /> 的第一個元素之索引的位元補數。如果找不到 <paramref name="value" />，且 <paramref name="value" /> 大於 <paramref name="array" /> 中的任何元素，則為負數，也就是 (最後一個元素的索引加 1) 的位元補數。</returns>
      <param name="array">要搜尋的已排序之一維 <see cref="T:System.Array" />。</param>
      <param name="value">要搜尋的物件。</param>
      <param name="comparer">比較元素時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。-或-null 表示使用每個元素的 <see cref="T:System.IComparable" /> 實作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 為多維。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 為 null，且<paramref name="value" /> 是與 <paramref name="array" /> 的項目不相容的型別。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，<paramref name="value" /> 不會實作 <see cref="T:System.IComparable" /> 介面，而且搜尋作業遇到了不會實作 <see cref="T:System.IComparable" /> 介面的項目。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)">
      <summary>使用由 <see cref="T:System.Array" /> 的每個元素和指定的值所實作的 <see cref="T:System.IComparable`1" /> 泛型介面，在已排序的一維 <see cref="T:System.Array" /> 中的某個元素範圍內搜尋一個值。</summary>
      <returns>如果找到 <paramref name="value" />，則為指定 <paramref name="array" /> 中指定 <paramref name="value" /> 的索引。如果沒有找到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 中的一個或多個元素，則為負數，也就是大於 <paramref name="value" /> 的第一個元素之索引的位元補數。如果找不到 <paramref name="value" />，且 <paramref name="value" /> 大於 <paramref name="array" /> 中的任何元素，則為負數，也就是 (最後一個元素的索引加 1) 的位元補數。</returns>
      <param name="array">要搜尋的已排序、以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要搜尋範圍的起始索引。</param>
      <param name="length">搜尋範圍的長度。</param>
      <param name="value">要搜尋的物件。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="array" /> 中的有效範圍。-或-<paramref name="value" /> 是與 <paramref name="array" /> 的項目不相容的型別。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IComparable`1" /> 泛型介面，而且搜尋作業遇到了不會實作 <see cref="T:System.IComparable`1" /> 泛型介面的項目。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面，在已排序的一維 <see cref="T:System.Array" /> 中的某個元素範圍內搜尋一個值。</summary>
      <returns>如果找到 <paramref name="value" />，則為指定 <paramref name="array" /> 中指定 <paramref name="value" /> 的索引。如果沒有找到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 中的一個或多個元素，則為負數，也就是大於 <paramref name="value" /> 的第一個元素之索引的位元補數。如果找不到 <paramref name="value" />，且 <paramref name="value" /> 大於 <paramref name="array" /> 中的任何元素，則為負數，也就是 (最後一個元素的索引加 1) 的位元補數。</returns>
      <param name="array">要搜尋的已排序、以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要搜尋範圍的起始索引。</param>
      <param name="length">搜尋範圍的長度。</param>
      <param name="value">要搜尋的物件。</param>
      <param name="comparer">比較元素時所要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作。-或-null 表示使用每個元素的 <see cref="T:System.IComparable`1" /> 實作。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="array" /> 中的有效範圍。-或-<paramref name="comparer" /> 為 null，且<paramref name="value" /> 是與 <paramref name="array" /> 的項目不相容的型別。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，<paramref name="value" /> 不會實作 <see cref="T:System.IComparable`1" /> 泛型介面，而且搜尋作業遇到了不會實作 <see cref="T:System.IComparable`1" /> 泛型介面的項目。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0)">
      <summary>使用由 <see cref="T:System.Array" /> 的每個元素和指定物件所實作的 <see cref="T:System.IComparable`1" /> 泛型介面，針對指定的元素搜尋整個已排序的一維 <see cref="T:System.Array" />。</summary>
      <returns>如果找到 <paramref name="value" />，則為指定 <paramref name="array" /> 中指定 <paramref name="value" /> 的索引。如果沒有找到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 中的一個或多個元素，則為負數，也就是大於 <paramref name="value" /> 的第一個元素之索引的位元補數。如果找不到 <paramref name="value" />，且 <paramref name="value" /> 大於 <paramref name="array" /> 中的任何元素，則為負數，也就是 (最後一個元素的索引加 1) 的位元補數。</returns>
      <param name="array">要搜尋的已排序、以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要搜尋的物件。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IComparable`1" /> 泛型介面，而且搜尋作業遇到了不會實作 <see cref="T:System.IComparable`1" /> 泛型介面的項目。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面，在整個已排序的一維 <see cref="T:System.Array" /> 中搜尋一個值。</summary>
      <returns>如果找到 <paramref name="value" />，則為指定 <paramref name="array" /> 中指定 <paramref name="value" /> 的索引。如果沒有找到 <paramref name="value" /> 且 <paramref name="value" /> 小於 <paramref name="array" /> 中的一個或多個元素，則為負數，也就是大於 <paramref name="value" /> 的第一個元素之索引的位元補數。如果找不到 <paramref name="value" />，且 <paramref name="value" /> 大於 <paramref name="array" /> 中的任何元素，則為負數，也就是 (最後一個元素的索引加 1) 的位元補數。</returns>
      <param name="array">要搜尋的已排序、以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要搜尋的物件。</param>
      <param name="comparer">比較元素時所要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作。-或-null 表示使用每個元素的 <see cref="T:System.IComparable`1" /> 實作。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 為 null，且<paramref name="value" /> 是與 <paramref name="array" /> 的項目不相容的型別。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，<paramref name="value" /> 不會實作 <see cref="T:System.IComparable`1" /> 泛型介面，而且搜尋作業遇到了不會實作 <see cref="T:System.IComparable`1" /> 泛型介面的項目。</exception>
    </member>
    <member name="M:System.Array.Clear(System.Array,System.Int32,System.Int32)">
      <summary>根據元素類型而定，將 <see cref="T:System.Array" /> 中的某個元素範圍設定為零、false 或 null。</summary>
      <param name="array">需要清除元素的 <see cref="T:System.Array" />。</param>
      <param name="index">要清除之元素範圍的起始索引。</param>
      <param name="length">要清除的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。-或-<paramref name="index" /> 和 <paramref name="length" /> 的總和大於 <see cref="T:System.Array" /> 的大小。</exception>
    </member>
    <member name="M:System.Array.Clone">
      <summary>建立 <see cref="T:System.Array" /> 的淺層複製。</summary>
      <returns>
        <see cref="T:System.Array" /> 的淺層複本。</returns>
    </member>
    <member name="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>從 <see cref="T:System.Array" /> 中指定的來源索引開始複製某範圍的元素，然後在另一個 <see cref="T:System.Array" /> 中從指定的目的索引開始貼上。如果複製未完全成功，則保證會復原所有的變更。</summary>
      <param name="sourceArray">包含要複製資料的 <see cref="T:System.Array" />。</param>
      <param name="sourceIndex">32 位元的整數，表示 <paramref name="sourceArray" /> 中的索引，由此開始複製。</param>
      <param name="destinationArray">接收資料的 <see cref="T:System.Array" />。</param>
      <param name="destinationIndex">32 位元的整數，表示 <paramref name="destinationArray" /> 中的索引，由此開始儲存。</param>
      <param name="length">32 位元整數，表示要複製的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 為 null。-或-<paramref name="destinationArray" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 具有不同的陣序規範。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 型別既沒有與 <paramref name="destinationArray" /> 型別相同，也不是繼承自此型別。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 中至少一個項目無法轉型為<paramref name="destinationArray" /> 的型別。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> 小於 <paramref name="sourceArray" /> 第一個維度的下限。-或-<paramref name="destinationIndex" /> 小於 <paramref name="destinationArray" /> 第一個維度的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大於從 <paramref name="sourceIndex" /> 到 <paramref name="sourceArray" /> 結尾的項目數目。-或-<paramref name="length" /> 大於從 <paramref name="destinationIndex" /> 到 <paramref name="destinationArray" /> 結尾的項目數目。</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
      <summary>從 <see cref="T:System.Array" /> 中的第 1 個元素開始複製某個範圍的元素，然後在另一個 <see cref="T:System.Array" /> 中從第 1 個元素開始貼上。長度以 32 位元的整數指定。</summary>
      <param name="sourceArray">包含要複製資料的 <see cref="T:System.Array" />。</param>
      <param name="destinationArray">接收資料的 <see cref="T:System.Array" />。</param>
      <param name="length">32 位元整數，表示要複製的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 為 null。-或-<paramref name="destinationArray" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 具有不同的陣序規範。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 的型別不相容。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 中至少一個項目無法轉型為 <paramref name="destinationArray" /> 的型別。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大於 <paramref name="sourceArray" /> 的項目數目。-或-<paramref name="length" /> 大於 <paramref name="destinationArray" /> 的項目數目。</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>從 <see cref="T:System.Array" /> 中指定的來源索引開始複製某範圍的元素，然後在另一個 <see cref="T:System.Array" /> 中從指定的目的索引開始貼上。長度和索引以 32 位元的整數指定。</summary>
      <param name="sourceArray">包含要複製資料的 <see cref="T:System.Array" />。</param>
      <param name="sourceIndex">32 位元的整數，表示 <paramref name="sourceArray" /> 中的索引，由此開始複製。</param>
      <param name="destinationArray">接收資料的 <see cref="T:System.Array" />。</param>
      <param name="destinationIndex">32 位元的整數，表示 <paramref name="destinationArray" /> 中的索引，由此開始儲存。</param>
      <param name="length">32 位元整數，表示要複製的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 為 null。-或-<paramref name="destinationArray" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 具有不同的陣序規範。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 的型別不相容。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 中至少一個項目無法轉型為 <paramref name="destinationArray" /> 的型別。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> 小於 <paramref name="sourceArray" /> 第一個維度的下限。-或-<paramref name="destinationIndex" /> 小於 <paramref name="destinationArray" /> 第一個維度的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大於從 <paramref name="sourceIndex" /> 到 <paramref name="sourceArray" /> 結尾的項目數目。-或-<paramref name="length" /> 大於從 <paramref name="destinationIndex" /> 到 <paramref name="destinationArray" /> 結尾的項目數目。</exception>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
      <summary>將目前一維 <see cref="T:System.Array" /> 的所有元素，複製到指定的一維 <see cref="T:System.Array" />，並從指定的目的 <see cref="T:System.Array" /> 索引開始貼上。索引以 32 位元的整數指定。</summary>
      <param name="array">一維的 <see cref="T:System.Array" />，此為從目前 <see cref="T:System.Array" /> 複製的元素目的地。</param>
      <param name="index">32 位元的整數，表示要開始複製之 <paramref name="array" /> 中的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-來源 <see cref="T:System.Array" /> 項目的數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">無法將來源 <see cref="T:System.Array" /> 的型別自動轉換成目的 <paramref name="array" /> 的型別。</exception>
      <exception cref="T:System.RankException">來源 <see cref="T:System.Array" /> 為多維。</exception>
      <exception cref="T:System.InvalidCastException">來源 <see cref="T:System.Array" /> 中至少有一個項目無法轉換為目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32)">
      <summary>使用以零為起始的索引，來建立指定 <see cref="T:System.Type" /> 和長度的一維 <see cref="T:System.Array" />。</summary>
      <returns>新的一維 <see cref="T:System.Array" />，具有指定的長度和指定的 <see cref="T:System.Type" />，並使用以零為起始的索引。</returns>
      <param name="elementType">要建立之 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="length">要建立的 <see cref="T:System.Array" /> 大小。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> 不受支援。例如，不支援 <see cref="T:System.Void" />。-或-<paramref name="elementType" /> 為開放式泛型型別。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小於零。</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[])">
      <summary>使用以零為起始的索引，建立指定 <see cref="T:System.Type" /> 和維度長度的多維 <see cref="T:System.Array" />。維度長度在 32 位元的整數陣列中指定。</summary>
      <returns>新的多維 <see cref="T:System.Array" />，具有指定的 <see cref="T:System.Type" /> 且每個維度具有指定的長度，並使用以零為起始的索引。</returns>
      <param name="elementType">要建立之 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="lengths">32 位元整數的陣列，表示要建立之 <see cref="T:System.Array" /> 的每個維度大小。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 為 null。-或-<paramref name="lengths" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。-或-<paramref name="lengths" /> 陣列並未包含任一項目。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> 不受支援。例如，不支援 <see cref="T:System.Void" />。-或-<paramref name="elementType" /> 為開放式泛型型別。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lengths" /> 中任一數值小於零。</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])">
      <summary>使用指定的下限，建立指定 <see cref="T:System.Type" /> 和維度長度的多維 <see cref="T:System.Array" />。</summary>
      <returns>新的多維 <see cref="T:System.Array" />，具有指定的 <see cref="T:System.Type" /> 且每個維度具有指定的長度和下限。</returns>
      <param name="elementType">要建立之 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="lengths">一維陣列，包含要建立的 <see cref="T:System.Array" /> 的每個維度大小。</param>
      <param name="lowerBounds">一維陣列，包含要建立的 <see cref="T:System.Array" /> 的每個維度下限 (起始索引)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 為 null。-或-<paramref name="lengths" /> 為 null。-或-<paramref name="lowerBounds" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。-或-<paramref name="lengths" /> 陣列並未包含任一項目。-或-<paramref name="lengths" /> 和 <paramref name="lowerBounds" /> 陣列項目數目不相同。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="elementType" /> 不受支援。例如，不支援 <see cref="T:System.Void" />。-或-<paramref name="elementType" /> 為開放式泛型型別。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lengths" /> 中任一數值小於零。-或-<paramref name="lowerBounds" /> 中的任何值都非常大，以至於維度的下限和長度的總和都大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Array.Exists``1(``0[],System.Predicate{``0})">
      <summary>判斷指定的陣列是否包含符合指定之述詞 (Predicate) 所定義的條件之元素。</summary>
      <returns>如果 <paramref name="array" /> 包含的一個或多個元素符合指定之述詞所定義的條件，則為 true，否則為 false。</returns>
      <param name="array">要搜尋的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定義要搜尋之元素的條件。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Array.Find``1(``0[],System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回整個 <see cref="T:System.Array" /> 內第一個相符的元素。</summary>
      <returns>第一個符合指定之述詞所定義的條件之元素 (如果找到的話)，否則為型別 <paramref name="T" /> 的預設值。</returns>
      <param name="array">要搜尋的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定義要搜尋之元素的條件。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Array.FindAll``1(``0[],System.Predicate{``0})">
      <summary>擷取符合指定之述詞所定義的條件之所有元素。</summary>
      <returns>
        <see cref="T:System.Array" />，其中包含符合指定之述詞所定義的條件之所有元素 (如果有找到的話)，否則為空的 <see cref="T:System.Array" />。</returns>
      <param name="array">要搜尋的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定義要搜尋之元素的條件。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回 <see cref="T:System.Array" /> 中從指定之索引開始且包含指定之元素數目的元素範圍內，第一個相符元素之以零為起始的索引。</summary>
      <returns>第一個符合 <paramref name="match" /> 所定義之條件的元素 (如果找到的話) 的以零為起始的索引，否則為 -1。</returns>
      <param name="array">要搜尋的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <param name="count">要在區段中搜尋的元素數目。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定義要搜尋之元素的條件。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="array" /> 中的有效區段。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回 <see cref="T:System.Array" /> 中從指定之索引延伸到最後一個元素的元素範圍內，第一個相符元素之以零為起始的索引。</summary>
      <returns>第一個符合 <paramref name="match" /> 所定義之條件的元素 (如果找到的話) 的以零為起始的索引，否則為 -1。</returns>
      <param name="array">要搜尋的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定義要搜尋之元素的條件。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回整個 <see cref="T:System.Array" /> 內第一個相符元素之以零為起始的索引。</summary>
      <returns>第一個符合 <paramref name="match" /> 所定義之條件的元素 (如果找到的話) 的以零為起始的索引，否則為 -1。</returns>
      <param name="array">要搜尋的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定義要搜尋之元素的條件。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Array.FindLast``1(``0[],System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回整個 <see cref="T:System.Array" /> 內最後一個相符的元素。</summary>
      <returns>最後一個符合指定之述詞所定義的條件之元素 (如果找到的話)，否則為型別 <paramref name="T" /> 的預設值。</returns>
      <param name="array">要搜尋的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定義要搜尋之元素的條件。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回 <see cref="T:System.Array" /> 中包含指定之元素數目且以指定之索引結尾的元素範圍內，最後一個相符元素之以零為起始的索引。</summary>
      <returns>最後一個符合 <paramref name="match" /> 所定義之條件的元素 (如果找到的話) 的以零為起始的索引，否則為 -1。</returns>
      <param name="array">要搜尋的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="startIndex">回溯搜尋以零為起始的起始索引。</param>
      <param name="count">要在區段中搜尋的元素數目。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定義要搜尋之元素的條件。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="array" /> 中的有效區段。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回 <see cref="T:System.Array" /> 中從第一個元素延伸到指定索引的元素範圍內，最後一個相符元素之以零為起始的索引。</summary>
      <returns>最後一個符合 <paramref name="match" /> 所定義之條件的元素 (如果找到的話) 的以零為起始的索引，否則為 -1。</returns>
      <param name="array">要搜尋的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="startIndex">回溯搜尋以零為起始的起始索引。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定義要搜尋之元素的條件。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回整個 <see cref="T:System.Array" /> 內最後一個相符元素之以零為起始的索引。</summary>
      <returns>最後一個符合 <paramref name="match" /> 所定義之條件的元素 (如果找到的話) 的以零為起始的索引，否則為 -1。</returns>
      <param name="array">要搜尋的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定義要搜尋之元素的條件。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Array.ForEach``1(``0[],System.Action{``0})">
      <summary>在指定陣列的每個元素上執行指定的動作。</summary>
      <param name="array">以零為起始的一維 <see cref="T:System.Array" />，動作會在其元素上執行。</param>
      <param name="action">要在 <paramref name="array" /> 的每個元素上執行的 <see cref="T:System.Action`1" />。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="action" /> 為 null。</exception>
    </member>
    <member name="M:System.Array.GetEnumerator">
      <summary>傳回 <see cref="T:System.Array" /> 的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>
        <see cref="T:System.Array" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Array.GetLength(System.Int32)">
      <summary>取得 32 位元的整數，表示 <see cref="T:System.Array" /> 之指定維度中的元素數目。</summary>
      <returns>表示指定維度中之元素數目的 32 位元整數。</returns>
      <param name="dimension">需要決定長度之以零為起始的 <see cref="T:System.Array" /> 維度。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小於零。-或-<paramref name="dimension" /> 等於或大於 <see cref="P:System.Array.Rank" />。</exception>
    </member>
    <member name="M:System.Array.GetLowerBound(System.Int32)">
      <summary>取得 <see cref="T:System.Array" /> 中指定維度的下限。</summary>
      <returns>
        <see cref="T:System.Array" /> 中指定維度的下限。</returns>
      <param name="dimension">需要決定下限之以零為起始的 <see cref="T:System.Array" /> 維度。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小於零。-或-<paramref name="dimension" /> 等於或大於 <see cref="P:System.Array.Rank" />。</exception>
    </member>
    <member name="M:System.Array.GetUpperBound(System.Int32)">
      <summary>取得 <see cref="T:System.Array" /> 中指定維度的上限。</summary>
      <returns>
        <see cref="T:System.Array" /> 中指定維度的上限。</returns>
      <param name="dimension">需要決定上限之以零為起始的 <see cref="T:System.Array" /> 維度。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小於零。-或-<paramref name="dimension" /> 等於或大於 <see cref="P:System.Array.Rank" />。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32)">
      <summary>在一維的 <see cref="T:System.Array" /> 中，取得指定位置上的值。索引以 32 位元的整數指定。</summary>
      <returns>一維 <see cref="T:System.Array" /> 中位於指定位置的值。</returns>
      <param name="index">32 位元的整數，表示要取得之 <see cref="T:System.Array" /> 元素的位置。</param>
      <exception cref="T:System.ArgumentException">目前的 <see cref="T:System.Array" /> 不是剛好一維維度。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 在目前 <see cref="T:System.Array" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32[])">
      <summary>在多維度的 <see cref="T:System.Array" /> 中，取得指定位置上的值。索引以 32 位元的整數陣列指定。</summary>
      <returns>多維 <see cref="T:System.Array" /> 中位於指定位置的值。</returns>
      <param name="indices">32 位元整數的一維陣列，表示指定要取得之 <see cref="T:System.Array" /> 元素位置的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">目前 <see cref="T:System.Array" /> 中的維度數目不等於 <paramref name="indices" /> 中的項目數目。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="indices" /> 中的任一項目超過目前 <see cref="T:System.Array" /> 中對應維度的有效索引範圍。</exception>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object)">
      <summary>搜尋指定的物件，並傳回整個一維 <see cref="T:System.Array" /> 中第一個相符項目的索引。</summary>
      <returns>在 整個 <paramref name="array" /> 中 <paramref name="value" /> 的第一個相符項目的索引 (如果找到的話)，否則為陣列的下限減 1。</returns>
      <param name="array">要搜尋的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 尋找的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 為多維。</exception>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32)">
      <summary>搜尋指定的物件，並傳回一維 <see cref="T:System.Array" /> 中從指定的索引延伸至最後一個元素的元素範圍內，第一個相符項目的索引。</summary>
      <returns>在 <paramref name="array" /> 中從 <paramref name="startIndex" /> 延伸至最後一個元素的元素範圍內，<paramref name="value" /> 的第一個相符項目的索引 (如果找到的話)，否則為陣列的下限減 1。</returns>
      <param name="array">要搜尋的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 尋找的物件。</param>
      <param name="startIndex">搜尋的起始索引。0 (零) 在空白陣列中有效。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 為多維。</exception>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>搜尋指定的物件，並在一維 <see cref="T:System.Array" /> 中的元素範圍內傳回第 1 個事件的索引，該範圍會從指定的索引開始，並包含指定的元素數目。</summary>
      <returns>在 <paramref name="array" /> 中從 <paramref name="startIndex" /> 開始且包含 <paramref name="count" /> 所指定之元素數目的元素範圍內，<paramref name="value" /> 的第一個相符項目的索引 (如果找到的話)，否則為陣列的下限減 1。</returns>
      <param name="array">要搜尋的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 尋找的物件。</param>
      <param name="startIndex">搜尋的起始索引。</param>
      <param name="count">要在區段中搜尋的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="array" /> 中的有效區段。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 為多維。</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0)">
      <summary>搜尋指定的物件，並傳回整個 <see cref="T:System.Array" /> 內第 1 個事件的索引。</summary>
      <returns>在 整個 <paramref name="array" /> 中 <paramref name="value" /> 的第一個相符項目之以零為起始的索引 (如果找到的話)，否則為 –1。</returns>
      <param name="array">要搜尋的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 尋找的物件。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32)">
      <summary>搜尋指定的物件，並傳回 <see cref="T:System.Array" /> 中元素範圍內第 1 個事件的索引，該範圍是從指定的索引延伸至最後 1 個元素。</summary>
      <returns>在 <paramref name="array" /> 中從 <paramref name="startIndex" /> 延伸到最後一個元素的元素範圍內，<paramref name="value" /> 的第一個相符項目之以零為起始的索引 (如果找到的話)，否則為 -1。</returns>
      <param name="array">要搜尋的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 尋找的物件。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>搜尋指定的物件，並傳回 <see cref="T:System.Array" /> 中元素範圍內第 1 個事件的索引，該範圍是從指定的索引開始，並包含指定的元素數目。</summary>
      <returns>在 <paramref name="array" /> 中從 <paramref name="startIndex" /> 開始且包含 <paramref name="count" /> 所指定之元素數目的元素範圍內，<paramref name="value" /> 的第一個相符項目之以零為起始的索引 (如果找到的話)，否則為 -1。</returns>
      <param name="array">要搜尋的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 尋找的物件。</param>
      <param name="startIndex">搜尋之以零為起始的起始索引。</param>
      <param name="count">要在區段中搜尋的元素數目。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="array" /> 中的有效區段。</exception>
    </member>
    <member name="M:System.Array.Initialize">
      <summary>透過呼叫值類型的預設建構函式，來初始化值類型 <see cref="T:System.Array" /> 的每個元素。</summary>
    </member>
    <member name="P:System.Array.IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Array" /> 大小是否固定。</summary>
      <returns>所有陣列的此屬性一律為 true。</returns>
    </member>
    <member name="P:System.Array.IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Array" /> 是否為唯讀。</summary>
      <returns>所有陣列的此屬性一律為 false。</returns>
    </member>
    <member name="P:System.Array.IsSynchronized">
      <summary>取得值，指出對 <see cref="T:System.Array" /> 的存取是否為同步 (安全執行緒)。</summary>
      <returns>所有陣列的此屬性一律為 false。</returns>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object)">
      <summary>搜尋指定的物件，並傳回整個一維 <see cref="T:System.Array" /> 中最後一個相符項目的索引。</summary>
      <returns>在 整個 <paramref name="array" /> 中 <paramref name="value" /> 的最後一個相符項目的索引 (如果找到的話)，否則為陣列的下限減 1。</returns>
      <param name="array">要搜尋的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 尋找的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 為多維。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)">
      <summary>搜尋指定的物件，並傳回一維 <see cref="T:System.Array" /> 中從第一個項目延伸至指定元素的元素範圍內，最後一個相符項目的索引。</summary>
      <returns>在 <paramref name="array" /> 中從第一個元素延伸至 <paramref name="startIndex" /> 的元素範圍內，<paramref name="value" /> 的第一個相符項目的索引 (如果找到的話)，否則為陣列的下限減 1。</returns>
      <param name="array">要搜尋的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 尋找的物件。</param>
      <param name="startIndex">回溯搜尋的起始索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 為多維。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>搜尋指定的物件，並傳回在一維 <see cref="T:System.Array" /> 中元素範圍內最後 1 個事件的索引，該範圍包含指定的元素數目，並在指定的索引結束。</summary>
      <returns>在 <paramref name="array" /> 中包含 <paramref name="count" /> 指定的元素數目且以 <paramref name="startIndex" /> 結尾的元素範圍內，<paramref name="value" /> 的最後一個相符項目的索引 (如果找到的話)，否則為陣列的下限減 1。</returns>
      <param name="array">要搜尋的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 尋找的物件。</param>
      <param name="startIndex">回溯搜尋的起始索引。</param>
      <param name="count">要在區段中搜尋的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="array" /> 中的有效區段。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 為多維。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0)">
      <summary>搜尋指定的物件，並傳回整個 <see cref="T:System.Array" /> 內最後 1 個事件的索引。</summary>
      <returns>在 整個 <paramref name="array" /> 中 <paramref name="value" /> 的最後一個相符項目之以零為起始的索引 (如果找到的話)，否則為 –1。</returns>
      <param name="array">要搜尋的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 尋找的物件。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)">
      <summary>搜尋指定的物件，並傳回 <see cref="T:System.Array" /> 中元素範圍內最後 1 個事件的索引，該範圍是從第 1 個元素延伸至指定的索引。</summary>
      <returns>在 <paramref name="array" /> 中從第一個元素延伸到 <paramref name="startIndex" /> 的元素範圍內，<paramref name="value" /> 的最後一個相符項目之以零為起始的索引 (如果找到的話)，否則為 -1。</returns>
      <param name="array">要搜尋的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 尋找的物件。</param>
      <param name="startIndex">回溯搜尋以零為起始的索引。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>搜尋指定的物件，並傳回在 <see cref="T:System.Array" /> 中元素範圍內最後 1 個事件的索引，該範圍包含指定的元素數目，並在指定的索引結束。</summary>
      <returns>在 <paramref name="array" /> 中包含 <paramref name="count" /> 所指定之元素數目且以 <paramref name="startIndex" /> 結尾的元素範圍內，<paramref name="value" /> 的最後一個相符項目之以零為起始的索引 (如果找到的話)，否則為 -1。</returns>
      <param name="array">要搜尋的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 尋找的物件。</param>
      <param name="startIndex">回溯搜尋以零為起始的索引。</param>
      <param name="count">要在區段中搜尋的元素數目。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <paramref name="array" /> 的有效索引範圍之外。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <paramref name="array" /> 中的有效區段。</exception>
    </member>
    <member name="P:System.Array.Length">
      <summary>取得 32 位元的整數，表示 <see cref="T:System.Array" /> 之所有維度中的元素總數；若陣列中沒有任何元素即為零。</summary>
      <returns>32 位元的整數，表示 <see cref="T:System.Array" /> 之所有維度中的元素總數。</returns>
    </member>
    <member name="P:System.Array.Rank">
      <summary>取得 <see cref="T:System.Array" /> 之以零為起始的陣序規範 (維度數)。</summary>
      <returns>
        <see cref="T:System.Array" /> 之以零為起始的陣序 (維度數目)。</returns>
    </member>
    <member name="M:System.Array.Resize``1(``0[]@,System.Int32)">
      <summary>將陣列的元素數目變更為指定的新大小。</summary>
      <param name="array">要重新調整之以零為起始的一維陣列，或是 null 以使用指定大小來建立新陣列。</param>
      <param name="newSize">新陣列的大小。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newSize" /> 小於零。</exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array)">
      <summary>倒轉整個一維 <see cref="T:System.Array" /> 中的元素順序。</summary>
      <param name="array">要倒轉的一維 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 為多維。</exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)">
      <summary>倒轉一維 <see cref="T:System.Array" /> 內某個元素範圍中的元素順序。</summary>
      <param name="array">要倒轉的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要反轉之區段的起始索引。</param>
      <param name="length">要反轉之區段的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 為多維。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="array" /> 中的有效範圍。</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32)">
      <summary>設定一維 <see cref="T:System.Array" /> 中指定位置之元素的值。索引以 32 位元的整數指定。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="index">32 位元的整數，表示要設定之 <see cref="T:System.Array" /> 元素的位置。</param>
      <exception cref="T:System.ArgumentException">目前的 <see cref="T:System.Array" /> 不是剛好一維維度。</exception>
      <exception cref="T:System.InvalidCastException">無法將 <paramref name="value" /> 轉換成目前 <see cref="T:System.Array" /> 的項目型別。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 在目前 <see cref="T:System.Array" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32[])">
      <summary>設定多維 <see cref="T:System.Array" /> 中指定位置之元素的值。索引以 32 位元的整數陣列指定。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="indices">32 位元整數的一維陣列，表示指定要設定之元素位置的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">目前 <see cref="T:System.Array" /> 中的維度數目不等於 <paramref name="indices" /> 中的項目數目。</exception>
      <exception cref="T:System.InvalidCastException">無法將 <paramref name="value" /> 轉換成目前 <see cref="T:System.Array" /> 的項目型別。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="indices" /> 中的任一項目超過目前 <see cref="T:System.Array" /> 中對應維度的有效索引範圍。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array)">
      <summary>使用 <see cref="T:System.Array" /> 的每個元素的 <see cref="T:System.IComparable" /> 實作，排序整個一維 <see cref="T:System.Array" /> 中的元素。</summary>
      <param name="array">要排序的一維 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 為多維。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" />，根據第 1 個 <see cref="T:System.Array" /> 中的索引鍵，排序一對一維的<see cref="T:System.Array" /> 物件 (一個物件包含索引鍵，另一個物件包含對應的項目)。</summary>
      <param name="keys">一維 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維 <see cref="T:System.Array" />，包含對應至 <paramref name="keys" /><see cref="T:System.Array" /> 中每個索引鍵的項目。-或-null 表示只排序 <paramref name="keys" /><see cref="T:System.Array" />。</param>
      <param name="comparer">比較元素時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。-或-null 表示使用每個元素的 <see cref="T:System.IComparable" /> 實作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 為多維。-或-<paramref name="items" /><see cref="T:System.Array" /> 為多維。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的下限和 <paramref name="items" /> 的下限不相符。-或-<paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。-或-<paramref name="comparer" /> 的實作會在排序過程中造成錯誤。例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，而且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" />，根據第 1 個 <see cref="T:System.Array" /> 中的索引鍵，在一維 <see cref="T:System.Array" /> 物件對組 (一個包含索引鍵，另一個則包含對應的項目) 中排序某個範圍的元素。</summary>
      <param name="keys">一維 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維 <see cref="T:System.Array" />，包含對應至 <paramref name="keys" /><see cref="T:System.Array" /> 中每個索引鍵的項目。-或-null 表示只排序 <paramref name="keys" /><see cref="T:System.Array" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的元素數目。</param>
      <param name="comparer">比較元素時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。-或-null 表示使用每個元素的 <see cref="T:System.IComparable" /> 實作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 為多維。-或-<paramref name="items" /><see cref="T:System.Array" /> 為多維。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="keys" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的下限和 <paramref name="items" /> 的下限不相符。-或-<paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。-或-<paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="keys" /><see cref="T:System.Array" /> 中的有效範圍。-或-<paramref name="items" /> 不是 null，而且 <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="items" /><see cref="T:System.Array" /> 中的有效範圍。-或-<paramref name="comparer" /> 的實作會在排序過程中造成錯誤。例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，而且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" />，來排序一維 <see cref="T:System.Array" /> 中的元素。</summary>
      <param name="array">要排序的一維 <see cref="T:System.Array" />。</param>
      <param name="comparer">比較元素時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。-或-null 表示使用每個元素的 <see cref="T:System.IComparable" /> 實作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 為多維。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，而且 <paramref name="array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable" /> 介面。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 的實作會在排序過程中造成錯誤。例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32)">
      <summary>使用 <see cref="T:System.Array" /> 的每個元素的 <see cref="T:System.IComparable" /> 實作，排序一維 <see cref="T:System.Array" /> 中某個元素範圍內的元素。</summary>
      <param name="array">要排序的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 為多維。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="array" /> 中的有效範圍。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" />，來排序一維 <see cref="T:System.Array" /> 內某個元素範圍中的元素。</summary>
      <param name="array">要排序的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的元素數目。</param>
      <param name="comparer">比較元素時所要使用的 <see cref="T:System.Collections.IComparer" /> 實作。-或-null 表示使用每個元素的 <see cref="T:System.IComparable" /> 實作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 為多維。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="array" /> 中的有效範圍。-或-<paramref name="comparer" /> 的實作會在排序過程中造成錯誤。例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，而且 <paramref name="array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[])">
      <summary>使用 <see cref="T:System.Array" /> 之每個元素的 <see cref="T:System.IComparable`1" /> 泛型介面實作，來排序整個 <see cref="T:System.Array" /> 中的元素。</summary>
      <param name="array">要排序的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面，來排序 <see cref="T:System.Array" /> 中的元素。</summary>
      <param name="array">要排序的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="comparer">在比較元素時所使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面實作，或是 null 以使用每個元素的 <see cref="T:System.IComparable`1" /> 泛型介面實作。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，而且 <paramref name="array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 的實作會在排序過程中造成錯誤。例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Comparison{``0})">
      <summary>使用指定的 <see cref="T:System.Comparison`1" />，來排序 <see cref="T:System.Array" /> 中的元素。</summary>
      <param name="array">要排序的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="comparison">比較元素時所要使用的 <see cref="T:System.Comparison`1" />。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="comparison" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparison" /> 的實作會在排序過程中造成錯誤。例如，在將項目與其本身比較時，<paramref name="comparison" /> 可能不會傳回 0。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32)">
      <summary>使用 <see cref="T:System.Array" /> 之每個元素的 <see cref="T:System.IComparable`1" /> 泛型介面實作，來排序 <see cref="T:System.Array" /> 內某個元素範圍中的元素。</summary>
      <param name="array">要排序的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的元素數目。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="array" /> 中的有效範圍。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面，來排序 <see cref="T:System.Array" /> 內某個元素範圍中的元素。</summary>
      <param name="array">要排序的以零為起始的一維 <see cref="T:System.Array" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的元素數目。</param>
      <param name="comparer">在比較元素時所使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面實作，或是 null 以使用每個元素的 <see cref="T:System.IComparable`1" /> 泛型介面實作。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="array" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="array" /> 中的有效範圍。-或-<paramref name="comparer" /> 的實作會在排序過程中造成錯誤。例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，而且 <paramref name="array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[])">
      <summary>使用每個索引鍵的 <see cref="T:System.IComparable`1" /> 泛型介面實作，根據第 1 個 <see cref="T:System.Array" /> 中的索引鍵，排序一對 <see cref="T:System.Array" /> 物件 (一個物件包含索引鍵，另一個物件包含對應的項目)。</summary>
      <param name="keys">一維、以零為起始的 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維、以零為起始的 <see cref="T:System.Array" />，包含對應到 <paramref name="keys" /> 中索引鍵的項目；或是 null 只排序 <paramref name="keys" />。</param>
      <typeparam name="TKey">索引鍵陣列的元素類型。</typeparam>
      <typeparam name="TValue">項目陣列的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的下限和 <paramref name="items" /> 的下限不相符。-或-<paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面，根據第 1 個 <see cref="T:System.Array" /> 中的索引鍵，來排序 <see cref="T:System.Array" /> 物件的對組 (一個包含索引鍵，另一個則包含對應的項目)。</summary>
      <param name="keys">一維、以零為起始的 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維、以零為起始的 <see cref="T:System.Array" />，包含對應到 <paramref name="keys" /> 中索引鍵的項目；或是 null 只排序 <paramref name="keys" />。</param>
      <param name="comparer">在比較元素時所使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面實作，或是 null 以使用每個元素的 <see cref="T:System.IComparable`1" /> 泛型介面實作。</param>
      <typeparam name="TKey">索引鍵陣列的元素類型。</typeparam>
      <typeparam name="TValue">項目陣列的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的下限和 <paramref name="items" /> 的下限不相符。-或-<paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。-或-<paramref name="comparer" /> 的實作會在排序過程中造成錯誤。例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，而且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)">
      <summary>使用每個索引鍵的 <see cref="T:System.IComparable`1" /> 泛型介面實作，根據第 1 個 <see cref="T:System.Array" /> 中的索引鍵，來排序 <see cref="T:System.Array" /> 物件對組 (一個包含索引鍵，另一個則包含對應的項目) 中某個範圍的元素。</summary>
      <param name="keys">一維、以零為起始的 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維、以零為起始的 <see cref="T:System.Array" />，包含對應到 <paramref name="keys" /> 中索引鍵的項目；或是 null 只排序 <paramref name="keys" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的元素數目。</param>
      <typeparam name="TKey">索引鍵陣列的元素類型。</typeparam>
      <typeparam name="TValue">項目陣列的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="keys" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的下限和 <paramref name="items" /> 的下限不相符。-或-<paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。-或-<paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="keys" /><see cref="T:System.Array" /> 中的有效範圍。-或-<paramref name="items" /> 不是 null，而且 <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="items" /><see cref="T:System.Array" /> 中的有效範圍。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面，根據第 1 個 <see cref="T:System.Array" /> 中的索引鍵，來排序<see cref="T:System.Array" /> 物件對組 (一個包含索引鍵，另一個則包含對應的項目) 中某個範圍的元素。</summary>
      <param name="keys">一維、以零為起始的 <see cref="T:System.Array" />，包含要排序的索引鍵。</param>
      <param name="items">一維、以零為起始的 <see cref="T:System.Array" />，包含對應到 <paramref name="keys" /> 中索引鍵的項目；或是 null 只排序 <paramref name="keys" />。</param>
      <param name="index">要排序之範圍的起始索引。</param>
      <param name="length">區段中要排序的元素數目。</param>
      <param name="comparer">在比較元素時所使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面實作，或是 null 以使用每個元素的 <see cref="T:System.IComparable`1" /> 泛型介面實作。</param>
      <typeparam name="TKey">索引鍵陣列的元素類型。</typeparam>
      <typeparam name="TValue">項目陣列的元素型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 <paramref name="keys" /> 的下限。-或-<paramref name="length" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的下限和 <paramref name="items" /> 的下限不相符。-或-<paramref name="items" /> 不是 null，而且 <paramref name="keys" /> 的長度大於 <paramref name="items" /> 的長度。-或-<paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="keys" /><see cref="T:System.Array" /> 中的有效範圍。-或-<paramref name="items" /> 不是 null，而且 <paramref name="index" /> 和 <paramref name="length" /> 沒有指定 <paramref name="items" /><see cref="T:System.Array" /> 中的有效範圍。-或-<paramref name="comparer" /> 的實作會在排序過程中造成錯誤。例如，在將項目與其本身比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，而且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一個或多個項目沒有實作 <see cref="T:System.IComparable`1" /> 泛型介面。</exception>
    </member>
    <member name="P:System.Array.SyncRoot">
      <summary>取得可用來對 <see cref="T:System.Array" /> 同步存取的物件。</summary>
      <returns>可用來同步存取 <see cref="T:System.Array" /> 的物件。</returns>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#Count">
      <summary>取得 <see cref="T:System.Array" /> 中包含的元素數目。</summary>
      <returns>
        <see cref="T:System.Array" /> 中所含的元素數目。</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#Add(System.Object)">
      <summary>實作 <see cref="M:System.Collections.IList.Add(System.Object)" />。在所有情況下都擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>永遠擲回例外狀況。</returns>
      <param name="value">要加入至 <see cref="T:System.Array" /> 的物件。</param>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Clear">
      <summary>根據元素類型而定，將 <see cref="T:System.Array" /> 中的所有元素設定為零、false 或 null。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Array" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Contains(System.Object)">
      <summary>判斷某元素是否在 <see cref="T:System.Array" /> 中。</summary>
      <returns>如果在 <see cref="T:System.Array" /> 中找到 <paramref name="value" /> 則為 true，否則為 false。</returns>
      <param name="value">要在 <see cref="T:System.Array" /> 中尋找的物件。要尋找之元素的參照型別可以是 null。</param>
      <exception cref="T:System.RankException">目前的 <see cref="T:System.Array" /> 為多維。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#IndexOf(System.Object)">
      <summary>搜尋指定的物件，並傳回目前一維執行個體內第一個相符項目的索引。</summary>
      <returns>在整個 <see cref="T:System.Array" /> 中 <paramref name="value" /> 的第一個相符項目的索引 (如果找到的話)，否則為 <see cref="T:System.Array" /> 的下限減 1。</returns>
      <param name="value">要在目前 <see cref="T:System.Array" /> 中尋找的物件。</param>
      <exception cref="T:System.RankException">目前的 <see cref="T:System.Array" /> 為多維。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>實作 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />。在所有情況下都擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">應該插入 <paramref name="value" /> 處的索引。</param>
      <param name="value">要插入的物件。</param>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="P:System.Array.System#Collections#IList#Item(System.Int32)">
      <summary>取得或設定指定索引上的元素。</summary>
      <returns>位於指定索引的元素。</returns>
      <param name="index">要取得或設定的元素索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。-或-<paramref name="index" /> 等於或大於 <see cref="P:System.Collections.ICollection.Count" />。</exception>
      <exception cref="T:System.ArgumentException">目前的 <see cref="T:System.Array" /> 不是剛好一維維度。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Remove(System.Object)">
      <summary>實作 <see cref="M:System.Collections.IList.Remove(System.Object)" />。在所有情況下都擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要從 <see cref="T:System.Array" /> 移除的物件。</param>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>實作 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />。在所有情況下都擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除之元素的索引。</param>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>判斷目前的集合物件在排序次序中位於另一個物件之前、相同位置或之後。</summary>
      <returns>整數，表示目前集合物件與 other 的關聯性，如下表所示。傳回值描述-1目前的執行個體在 <paramref name="other" /> 之前。0目前的執行個體與 <paramref name="other" /> 相等。1目前的執行個體在 <paramref name="other" /> 之後。</returns>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">要將目前物件與 <paramref name="other" /> 比較的物件。</param>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>判斷物件與目前的執行個體是否相等。</summary>
      <returns>如果兩個物件相等則為 true，否則為 false。</returns>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">決定目前執行個體是否與 <paramref name="other" /> 相等的物件。</param>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <returns>目前執行個體的雜湊程式碼。</returns>
      <param name="comparer">計算目前物件之雜湊碼的物件。</param>
    </member>
    <member name="M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})">
      <summary>判斷陣列中的每一個元素是否符合指定之述詞所定義的條件。</summary>
      <returns>如果 <paramref name="array" /> 的每個元素符合指定之述詞所定義的條件，則為 true，否則為 false。如果陣列中沒有元素，則傳回值為 true。</returns>
      <param name="array">要根據條件檢查之以零為起始的一維 <see cref="T:System.Array" /></param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定義檢查元素所根據的條件。</param>
      <typeparam name="T">陣列元素的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。-或-<paramref name="match" /> 為 null。</exception>
    </member>
    <member name="T:System.ArraySegment`1">
      <summary>分隔一維陣列的區段。</summary>
      <typeparam name="T">陣列區段中的元素類型。</typeparam>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[])">
      <summary>初始化 <see cref="T:System.ArraySegment`1" /> 結構的新執行個體，其會分隔指定陣列中的所有元素。</summary>
      <param name="array">要包裝的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.ArraySegment`1" /> 結構的新執行個體，其會分隔指定陣列中指定範圍的元素。</summary>
      <param name="array">包含要分隔之元素範圍的陣列。</param>
      <param name="offset">範圍中第 1 個元素以零為起始的索引。</param>
      <param name="count">範圍中的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 沒有指定 <paramref name="array" /> 中的有效範圍。</exception>
    </member>
    <member name="P:System.ArraySegment`1.Array">
      <summary>取得包含陣列區段分隔之元素範圍的原始陣列。</summary>
      <returns>傳遞給建構函式的原始陣列，並且這個陣列包含 <see cref="T:System.ArraySegment`1" /> 分隔的範圍。</returns>
    </member>
    <member name="P:System.ArraySegment`1.Count">
      <summary>取得由陣列區段分隔之範圍中的元素數目。</summary>
      <returns>由 <see cref="T:System.ArraySegment`1" /> 分隔之範圍中的元素數目。</returns>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
      <summary>決定指定的 <see cref="T:System.ArraySegment`1" /> 結構是否等於目前的執行個體。</summary>
      <returns>如果指定的 <see cref="T:System.ArraySegment`1" /> 結構等於目前的執行個體則為 true，否則為 false。</returns>
      <param name="obj">要與目前執行個體比較的 <see cref="T:System.ArraySegment`1" /> 結構。</param>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的執行個體。</summary>
      <returns>如果指定的物件是 <see cref="T:System.ArraySegment`1" /> 結構且等於目前執行個體，則為 true，否則為 false。</returns>
      <param name="obj">要與目前執行個體比較的物件。</param>
    </member>
    <member name="M:System.ArraySegment`1.GetHashCode">
      <summary>傳回目前執行個體的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ArraySegment`1.Offset">
      <summary>取得由陣列區段分隔之範圍中第 1 個元素的位置 (相對於原始陣列的開始)。</summary>
      <returns>由 <see cref="T:System.ArraySegment`1" /> 分隔之範圍中第 1 個元素的位置 (相對於原始陣列的開始)。</returns>
    </member>
    <member name="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>指出兩個 <see cref="T:System.ArraySegment`1" /> 結構是否相等。</summary>
      <returns>如果 <paramref name="a" /> 等於 <paramref name="b" /> 則為 true，否則為 false。</returns>
      <param name="a">位於等號比較運算子左邊的 <see cref="T:System.ArraySegment`1" /> 結構。</param>
      <param name="b">位於等號比較運算子右邊的 <see cref="T:System.ArraySegment`1" /> 結構。</param>
    </member>
    <member name="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>指出兩個 <see cref="T:System.ArraySegment`1" /> 結構是否不相等。</summary>
      <returns>如果 <paramref name="a" /> 不等於 <paramref name="b" /> 則為 true，否則為 false。</returns>
      <param name="a">位於不等比較運算子左邊的 <see cref="T:System.ArraySegment`1" /> 結構。</param>
      <param name="b">位於不等比較運算子右邊的 <see cref="T:System.ArraySegment`1" /> 結構。</param>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>將項目加入至陣列區段。</summary>
      <param name="item">要加入至陣列區段的物件。</param>
      <exception cref="T:System.NotSupportedException">陣列區段是唯讀的。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>從陣列區段中移除所有項目。</summary>
      <exception cref="T:System.NotSupportedException">陣列區段是唯讀的。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>判斷陣列區段是否包含特定值。</summary>
      <returns>如果在陣列區段中找到 <paramref name="item" /> 則為 true，否則為 false。</returns>
      <param name="item">要在陣列區段中尋找的物件。</param>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>從特定的陣列索引開始，將陣列區段的元素複製到陣列。</summary>
      <param name="array">一維陣列，這是從陣列區段複製之元素的目的地。陣列必須具有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-來源陣列區段中的項目數目，大於目的陣列中從 <paramref name="arrayIndex" /> 到 <paramref name="array" /> 到結尾的可用空間。-或-<paramref name="T" /> 型別無法自動轉換成目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.ArraySegment`1" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.ArraySegment`1" /> 是唯讀的，則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>從陣列區段中移除第一次出現的特定物件。</summary>
      <returns>如果成功從陣列區段中移除 <paramref name="item" /> 則為 true，否則為 false。如果在原始陣列區段中找不到 <paramref name="item" />，此方法也會傳回 false。</returns>
      <param name="item">要從陣列區段中移除的物件。</param>
      <exception cref="T:System.NotSupportedException">陣列區段是唯讀的。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回逐一查看陣列區段的列舉程式。</summary>
      <returns>可用來逐一查看陣列區段的列舉程式。</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)">
      <summary>判斷陣列區段中特定項目的索引。</summary>
      <returns>如果可在清單中找到則為 <paramref name="item" /> 的索引，否則為 -1。</returns>
      <param name="item">要在陣列區段中尋找的物件。</param>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>將項目插入至陣列區段中指定之索引處。</summary>
      <param name="index">應插入 <paramref name="item" /> 以零為起始的索引。</param>
      <param name="item">要插入至陣列區段的物件。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是陣列區段中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">陣列區段是唯讀的。</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>取得或設定指定索引上的元素。</summary>
      <returns>位於指定索引的元素。</returns>
      <param name="index">要取得或設定之元素以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.ArraySegment`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">屬性已設定，而且 <see cref="T:System.ArraySegment`1" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>在指定的索引處移除陣列區段項目。</summary>
      <param name="index">要移除之項目以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是陣列區段中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">陣列區段是唯讀的。</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary>取得在陣列區段中指定索引處的元素。</summary>
      <returns>位於指定索引的元素。</returns>
      <param name="index">要取得之元素以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.ArraySegment`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">屬性已設定。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看陣列區段的列舉程式。</summary>
      <returns>可用來逐一查看陣列區段的列舉程式。</returns>
    </member>
    <member name="T:System.ArrayTypeMismatchException">
      <summary>在嘗試於陣列內儲存錯誤類型之元素時擲回的例外。</summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor">
      <summary>初始化 <see cref="T:System.ArrayTypeMismatchException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.ArrayTypeMismatchException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.ArrayTypeMismatchException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null 參考，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.AsyncCallback">
      <summary>參考在完成對應之非同步作業時所呼叫的方法。</summary>
      <param name="ar">非同步作業的結果。 </param>
    </member>
    <member name="T:System.Attribute">
      <summary>表示自訂屬性的基底類別。</summary>
    </member>
    <member name="M:System.Attribute.#ctor">
      <summary>初始化 <see cref="T:System.Attribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Attribute.Equals(System.Object)">
      <summary>傳回值，指出執行個體是否等於指定的物件。</summary>
      <returns>如果 <paramref name="obj" /> 等於此執行個體的型別和值則為 true，否則為 false。</returns>
      <param name="obj">要和此執行個體比較的 <see cref="T:System.Object" /> 或 null。</param>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
      <summary>擷取套用至指定組件的自訂屬性。參數會指定組件，以及要搜尋的自訂屬性型別。</summary>
      <returns>型別 <paramref name="attributeType" /> 的單一自訂屬性參考，套用於 <paramref name="element" />；如果沒有這類屬性，則為 null。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.Assembly" /> 類別的物件，描述可重複使用的模組集合。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>擷取套用至組件的自訂屬性。參數會指定組件、要搜尋的自訂屬性型別，以及略過的搜尋選項。</summary>
      <returns>型別 <paramref name="attributeType" /> 的單一自訂屬性參考，套用於 <paramref name="element" />；如果沒有這類屬性，則為 null。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.Assembly" /> 類別的物件，描述可重複使用的模組集合。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">已略過此參數，且不會影響此方法的作業。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
      <summary>擷取套用至型別成員的自訂屬性。參數會指定成員，以及要搜尋的自訂屬性型別。</summary>
      <returns>型別 <paramref name="attributeType" /> 的單一自訂屬性參考，套用於 <paramref name="element" />；如果沒有這類屬性，則為 null。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.MemberInfo" /> 類別的物件，描述類別的建構函式、事件、欄位、方法或屬性成員。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>擷取套用至型別成員的自訂屬性。參數會指定成員、要搜尋的自訂屬性型別，以及是否要搜尋成員的祖系。</summary>
      <returns>型別 <paramref name="attributeType" /> 的單一自訂屬性參考，套用於 <paramref name="element" />；如果沒有這類屬性，則為 null。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.MemberInfo" /> 類別的物件，描述類別的建構函式、事件、欄位、方法或屬性成員。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">如果為 true，則指定也為自訂屬性搜尋 <paramref name="element" /> 的上階。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)">
      <summary>擷取套用至模組的自訂屬性。參數會指定模組，以及要搜尋的自訂屬性型別。</summary>
      <returns>型別 <paramref name="attributeType" /> 的單一自訂屬性參考，套用於 <paramref name="element" />；如果沒有這類屬性，則為 null。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.Module" /> 類別的物件，描述可移植執行檔案。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>擷取套用至模組的自訂屬性。參數會指定模組、要搜尋的自訂屬性型別，以及忽略的搜尋選項。</summary>
      <returns>型別 <paramref name="attributeType" /> 的單一自訂屬性參考，套用於 <paramref name="element" />；如果沒有這類屬性，則為 null。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.Module" /> 類別的物件，描述可移植執行檔案。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">已略過此參數，且不會影響此方法的作業。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
      <summary>擷取套用至方法參數的自訂屬性。參數會指定方法參數，以及要搜尋的自訂屬性型別。</summary>
      <returns>型別 <paramref name="attributeType" /> 的單一自訂屬性參考，套用於 <paramref name="element" />；如果沒有這類屬性，則為 null。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.ParameterInfo" /> 類別的物件，描述類別成員的參數。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>擷取套用至方法參數的自訂屬性。參數會指定方法參數、要搜尋的自訂屬性型別，以及是否要搜尋方法參數的祖系。</summary>
      <returns>型別 <paramref name="attributeType" /> 的單一自訂屬性參考，套用於 <paramref name="element" />；如果沒有這類屬性，則為 null。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.ParameterInfo" /> 類別的物件，描述類別成員的參數。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">如果為 true，則指定也為自訂屬性搜尋 <paramref name="element" /> 的上階。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上要求的屬性。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)">
      <summary>擷取套用至組件的自訂屬性陣列。參數會指定組件。</summary>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="element" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.Assembly" /> 類別的物件，描述可重複使用的模組集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 null。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)">
      <summary>擷取套用至組件的自訂屬性陣列。參數會指定組件和忽略的搜尋選項。</summary>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="element" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.Assembly" /> 類別的物件，描述可重複使用的模組集合。</param>
      <param name="inherit">已略過此參數，且不會影響此方法的作業。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
      <summary>擷取套用至組件的自訂屬性陣列。參數會指定組件，以及要搜尋的自訂屬性型別。</summary>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="element" /> 的型別 <paramref name="attributeType" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.Assembly" /> 類別的物件，描述可重複使用的模組集合。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>擷取套用至組件的自訂屬性陣列。參數會指定組件、要搜尋的自訂屬性型別，以及忽略的搜尋選項。</summary>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="element" /> 的型別 <paramref name="attributeType" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.Assembly" /> 類別的物件，描述可重複使用的模組集合。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">已略過此參數，且不會影響此方法的作業。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)">
      <summary>擷取套用至型別成員的自訂屬性陣列。參數會指定成員。</summary>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="element" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.MemberInfo" /> 類別的物件，描述類別的建構函式、事件、欄位、方法或屬性成員。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
      <summary>擷取套用至型別成員的自訂屬性陣列。參數會指定成員、要搜尋的自訂屬性型別，以及是否要搜尋成員的祖系。</summary>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="element" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.MemberInfo" /> 類別的物件，描述類別的建構函式、事件、欄位、方法或屬性成員。</param>
      <param name="inherit">如果為 true，則指定也為自訂屬性搜尋 <paramref name="element" /> 的上階。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
      <summary>擷取套用至型別成員的自訂屬性陣列。參數會指定成員，以及要搜尋的自訂屬性型別。</summary>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="element" /> 的型別 <paramref name="type" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.MemberInfo" /> 類別的物件，描述類別的建構函式、事件、欄位、方法或屬性成員。</param>
      <param name="type">要搜尋之自訂屬性的型別或基底型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>擷取套用至型別成員的自訂屬性陣列。參數會指定成員、要搜尋的自訂屬性型別，以及是否要搜尋成員的祖系。</summary>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="element" /> 的型別 <paramref name="type" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.MemberInfo" /> 類別的物件，描述類別的建構函式、事件、欄位、方法或屬性成員。</param>
      <param name="type">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">如果為 true，則指定也為自訂屬性搜尋 <paramref name="element" /> 的上階。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module)">
      <summary>擷取套用至模組的自訂屬性陣列。參數會指定模組。</summary>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="element" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.Module" /> 類別的物件，描述可移植執行檔案。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 null。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)">
      <summary>擷取套用至模組的自訂屬性陣列。參數會指定模組和忽略的搜尋選項。</summary>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="element" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.Module" /> 類別的物件，描述可移植執行檔案。</param>
      <param name="inherit">已略過此參數，且不會影響此方法的作業。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)">
      <summary>擷取套用至模組的自訂屬性陣列。參數會指定模組，以及要搜尋的自訂屬性型別。</summary>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="element" /> 的型別 <paramref name="attributeType" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.Module" /> 類別的物件，描述可移植執行檔案。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>擷取套用至模組的自訂屬性陣列。參數會指定模組、要搜尋的自訂屬性型別，以及忽略的搜尋選項。</summary>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="element" /> 的型別 <paramref name="attributeType" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.Module" /> 類別的物件，描述可移植執行檔案。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">已略過此參數，且不會影響此方法的作業。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <summary>擷取套用至方法參數的自訂屬性陣列。參數會指定方法參數。</summary>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="element" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.ParameterInfo" /> 類別的物件，描述類別成員的參數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 null。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>擷取套用至方法參數的自訂屬性陣列。參數會指定方法參數，以及是否要搜尋方法參數的祖系。</summary>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="element" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.ParameterInfo" /> 類別的物件，描述類別成員的參數。</param>
      <param name="inherit">如果為 true，則指定也為自訂屬性搜尋 <paramref name="element" /> 的上階。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> 的 <see cref="P:System.Reflection.ParameterInfo.Member" /> 屬性為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 為 null。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
      <summary>擷取套用至方法參數的自訂屬性陣列。參數會指定方法參數，以及要搜尋的自訂屬性型別。</summary>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="element" /> 的型別 <paramref name="attributeType" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.ParameterInfo" /> 類別的物件，描述類別成員的參數。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>擷取套用至方法參數的自訂屬性陣列。參數會指定方法參數、要搜尋的自訂屬性型別，以及是否要搜尋方法參數的祖系。</summary>
      <returns>
        <see cref="T:System.Attribute" /> 陣列，包含套用至 <paramref name="element" /> 的型別 <paramref name="attributeType" /> 的自訂屬性；如果不存在這類自訂屬性，則為空陣列。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.ParameterInfo" /> 類別的物件，描述類別成員的參數。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">如果為 true，則指定也為自訂屬性搜尋 <paramref name="element" /> 的上階。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Attribute.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)">
      <summary>判斷是否將任何自訂屬性套用至組件。參數會指定組件，以及要搜尋的自訂屬性型別。</summary>
      <returns>如果 <paramref name="attributeType" /> 型別的自訂屬性套用至 <paramref name="element" /> 則為 true，否則為 false。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.Assembly" /> 類別的物件，描述可重複使用的模組集合。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>判斷是否將任何自訂屬性套用至組件。參數會指定組件、要搜尋的自訂屬性型別，以及忽略的搜尋選項。</summary>
      <returns>如果 <paramref name="attributeType" /> 型別的自訂屬性套用至 <paramref name="element" /> 則為 true，否則為 false。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.Assembly" /> 類別的物件，描述可重複使用的模組集合。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">已略過此參數，且不會影響此方法的作業。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)">
      <summary>判斷是否將任何自訂屬性套用至型別成員。參數會指定成員，以及要搜尋的自訂屬性型別。</summary>
      <returns>如果 <paramref name="attributeType" /> 型別的自訂屬性套用至 <paramref name="element" /> 則為 true，否則為 false。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.MemberInfo" /> 類別的物件，描述類別的建構函式、事件、欄位、方法、型別或屬性成員。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>判斷是否將任何自訂屬性套用至型別成員。參數會指定成員、要搜尋的自訂屬性型別，以及是否要搜尋成員的祖系。</summary>
      <returns>如果 <paramref name="attributeType" /> 型別的自訂屬性套用至 <paramref name="element" /> 則為 true，否則為 false。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.MemberInfo" /> 類別的物件，描述類別的建構函式、事件、欄位、方法、型別或屬性成員。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">如果為 true，則指定也為自訂屬性搜尋 <paramref name="element" /> 的上階。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是建構函式、方法、屬性、事件、型別或欄位。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type)">
      <summary>判斷是否將任何指定型別的自訂屬性套用至模組。參數會指定模組，以及要搜尋的自訂屬性型別。</summary>
      <returns>如果 <paramref name="attributeType" /> 型別的自訂屬性套用至 <paramref name="element" /> 則為 true，否則為 false。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.Module" /> 類別的物件，描述可移植執行檔案。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>判斷是否將任何自訂屬性套用至模組。參數會指定模組、要搜尋的自訂屬性型別，以及忽略的搜尋選項。</summary>
      <returns>如果 <paramref name="attributeType" /> 型別的自訂屬性套用至 <paramref name="element" /> 則為 true，否則為 false。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.Module" /> 類別的物件，描述可移植執行檔案。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">已略過此參數，且不會影響此方法的作業。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)">
      <summary>判斷是否將任何自訂屬性套用至方法參數。參數會指定方法參數，以及要搜尋的自訂屬性型別。</summary>
      <returns>如果 <paramref name="attributeType" /> 型別的自訂屬性套用至 <paramref name="element" /> 則為 true，否則為 false。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.ParameterInfo" /> 類別的物件，描述類別成員的參數。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>判斷是否將任何自訂屬性套用至方法參數。參數會指定方法參數、要搜尋的自訂屬性型別，以及是否要搜尋方法參數的祖系。</summary>
      <returns>如果 <paramref name="attributeType" /> 型別的自訂屬性套用至 <paramref name="element" /> 則為 true，否則為 false。</returns>
      <param name="element">衍生自 <see cref="T:System.Reflection.ParameterInfo" /> 類別的物件，描述類別成員的參數。</param>
      <param name="attributeType">要搜尋之自訂屬性的型別或基底型別。</param>
      <param name="inherit">如果為 true，則指定也為自訂屬性搜尋 <paramref name="element" /> 的上階。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是衍生自 <see cref="T:System.Attribute" />。</exception>
      <exception cref="T:System.ExecutionEngineException">
        <paramref name="element" /> 不是方法、建構函式或型別。</exception>
    </member>
    <member name="M:System.Attribute.Match(System.Object)">
      <summary>在衍生類別中覆寫時，會傳回值，指出此執行個體是否等於指定物件。</summary>
      <returns>如果這個執行個體等於 <paramref name="obj" /> 則為 true，否則為 false。</returns>
      <param name="obj">與 <see cref="T:System.Attribute" /> 的此執行個體相互比較的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="T:System.AttributeTargets">
      <summary>指定有效套用屬性 (Attribute) 的應用程式元素。</summary>
    </member>
    <member name="F:System.AttributeTargets.All">
      <summary>屬性可以套用至任何應用程式元素。</summary>
    </member>
    <member name="F:System.AttributeTargets.Assembly">
      <summary>屬性可以套用至組件。</summary>
    </member>
    <member name="F:System.AttributeTargets.Class">
      <summary>屬性可以套用至類別。</summary>
    </member>
    <member name="F:System.AttributeTargets.Constructor">
      <summary>屬性可以套用至建構函式。</summary>
    </member>
    <member name="F:System.AttributeTargets.Delegate">
      <summary>屬性可以套用至委派。</summary>
    </member>
    <member name="F:System.AttributeTargets.Enum">
      <summary>屬性可以套用至列舉。</summary>
    </member>
    <member name="F:System.AttributeTargets.Event">
      <summary>屬性可以套用至事件。</summary>
    </member>
    <member name="F:System.AttributeTargets.Field">
      <summary>屬性可以套用至欄位。</summary>
    </member>
    <member name="F:System.AttributeTargets.GenericParameter">
      <summary>屬性可以套用至泛型參數。</summary>
    </member>
    <member name="F:System.AttributeTargets.Interface">
      <summary>屬性可以套用至介面。</summary>
    </member>
    <member name="F:System.AttributeTargets.Method">
      <summary>屬性可以套用至方法。</summary>
    </member>
    <member name="F:System.AttributeTargets.Module">
      <summary>屬性可以套用至模組。</summary>
    </member>
    <member name="F:System.AttributeTargets.Parameter">
      <summary>屬性可以套用至參數。</summary>
    </member>
    <member name="F:System.AttributeTargets.Property">
      <summary>屬性 (Attribute) 可以套用至屬性 (Property)。</summary>
    </member>
    <member name="F:System.AttributeTargets.ReturnValue">
      <summary>屬性可以套用至傳回值。</summary>
    </member>
    <member name="F:System.AttributeTargets.Struct">
      <summary>屬性可以套用至結構，也就是值型別 (Value Type)。</summary>
    </member>
    <member name="T:System.AttributeUsageAttribute">
      <summary>指定另一個屬性 (Attribute) 類別的使用方法。無法繼承此類別。</summary>
    </member>
    <member name="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)">
      <summary>使用指定的 <see cref="T:System.AttributeTargets" /> 清單、<see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> 值和 <see cref="P:System.AttributeUsageAttribute.Inherited" /> 值來初始化 <see cref="T:System.AttributeUsageAttribute" /> 類別的新執行個體。</summary>
      <param name="validOn">使用位元的 OR 運算所結合的數值集，用來指示哪個程式元素有效。</param>
    </member>
    <member name="P:System.AttributeUsageAttribute.AllowMultiple">
      <summary>取得或設定布林值 (Boolean)，指出所指定屬性的幾個執行個體能否指定給單一程式元素。</summary>
      <returns>如果允許指定一個以上的執行個體則為 true，否則為 false。預設為 false。</returns>
    </member>
    <member name="P:System.AttributeUsageAttribute.Inherited">
      <summary>取得或設定布林 (Boolean) 值，指出所指示的屬性是否能被衍生類別和覆寫成員所繼承。</summary>
      <returns>如果衍生類別及覆寫成員可以繼承屬性則為 true，否則為 false。預設值為 true。</returns>
    </member>
    <member name="P:System.AttributeUsageAttribute.ValidOn">
      <summary>取得一組數值，辨識哪些程式元素可套用所指定的屬性。</summary>
      <returns>一個或多個 <see cref="T:System.AttributeTargets" /> 值。預設值為 All。</returns>
    </member>
    <member name="T:System.BadImageFormatException">
      <summary>當 DLL 或可執行程式的檔案映像為無效時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor">
      <summary>初始化 <see cref="T:System.BadImageFormatException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.BadImageFormatException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.BadImageFormatException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 null 參考，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String)">
      <summary>使用指定的錯誤訊息和檔案名稱，初始化 <see cref="T:System.BadImageFormatException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
      <param name="fileName">檔案的完整名稱，其具有無效的影像。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.BadImageFormatException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="fileName">檔案的完整名稱，其具有無效的影像。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="P:System.BadImageFormatException.FileName">
      <summary>取得造成這個例外狀況的檔案名稱。</summary>
      <returns>具有無效影像的檔案名稱；如果沒有檔案名稱傳遞給目前執行個體的建構函式，則為 Null 參考。</returns>
    </member>
    <member name="P:System.BadImageFormatException.Message">
      <summary>取得造成此例外狀況的錯誤訊息和檔案名稱。</summary>
      <returns>字串，包含造成此例外狀況的錯誤訊息和檔案名稱。</returns>
    </member>
    <member name="M:System.BadImageFormatException.ToString">
      <summary>傳回此例外狀況的完整限定名稱、可能的錯誤訊息和內部例外的名稱。</summary>
      <returns>字串，包含此例外狀況的完整限定名稱、可能的錯誤訊息和內部例外的名稱。</returns>
    </member>
    <member name="T:System.BitConverter">
      <summary>將基底資料型別與位元組陣列相互轉換。</summary>
    </member>
    <member name="M:System.BitConverter.DoubleToInt64Bits(System.Double)">
      <summary>將指定的雙精確度浮點數轉換為 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，其值等於 <paramref name="value" />。</returns>
      <param name="value">要進行轉換的數字。</param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Boolean)">
      <summary>傳回指定的布林值為位元組陣列。</summary>
      <returns>長度為 1 的位元組陣列。</returns>
      <param name="value">布林值。</param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Char)">
      <summary>傳回指定的 Unicode 位元值為位元組陣列。</summary>
      <returns>長度為 2 的位元組陣列。</returns>
      <param name="value">要進行轉換的字元。</param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Double)">
      <summary>傳回指定的雙精確度浮點數值為位元組陣列。</summary>
      <returns>長度為 8 的位元組陣列。</returns>
      <param name="value">要進行轉換的數字。</param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int16)">
      <summary>傳回指定的 16 位元帶正負號的整數值為位元組陣列。</summary>
      <returns>長度為 2 的位元組陣列。</returns>
      <param name="value">要進行轉換的數字。</param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int32)">
      <summary>傳回指定的 32 位元帶正負號的整數值為位元組陣列。</summary>
      <returns>長度為 4 的位元組陣列。</returns>
      <param name="value">要進行轉換的數字。</param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Int64)">
      <summary>傳回指定的 64 位元帶正負號的整數值為位元組陣列。</summary>
      <returns>長度為 8 的位元組陣列。</returns>
      <param name="value">要進行轉換的數字。</param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.Single)">
      <summary>傳回指定的單精確度浮點數值為位元組陣列。</summary>
      <returns>長度為 4 的位元組陣列。</returns>
      <param name="value">要進行轉換的數字。</param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt16)">
      <summary>傳回指定的 16 位元不帶正負號的整數值為位元組陣列。</summary>
      <returns>長度為 2 的位元組陣列。</returns>
      <param name="value">要進行轉換的數字。</param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt32)">
      <summary>傳回指定的 32 位元不帶正負號的整數值為位元組陣列。</summary>
      <returns>長度為 4 的位元組陣列。</returns>
      <param name="value">要進行轉換的數字。</param>
    </member>
    <member name="M:System.BitConverter.GetBytes(System.UInt64)">
      <summary>傳回指定的 64 位元不帶正負號的整數值為位元組陣列。</summary>
      <returns>長度為 8 的位元組陣列。</returns>
      <param name="value">要進行轉換的數字。</param>
    </member>
    <member name="M:System.BitConverter.Int64BitsToDouble(System.Int64)">
      <summary>將指定的 64 位元帶正負號整數轉換為雙精確度浮點數。</summary>
      <returns>雙精確度浮點數，其值等於 <paramref name="value" />。</returns>
      <param name="value">要進行轉換的數字。</param>
    </member>
    <member name="F:System.BitConverter.IsLittleEndian">
      <summary>指出資料存放在此電腦架構中的位元組順序 (「Endianess」)。</summary>
    </member>
    <member name="M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的一個位元組所轉換的布林值。</summary>
      <returns>如果在 <paramref name="value" /> 的 <paramref name="startIndex" /> 上的位元組為非零值，則為 true，否則為 false。</returns>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">起始位置在 <paramref name="value" /> 內。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToChar(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的兩個位元組所轉換的 Unicode 字元。</summary>
      <returns>由兩個位元組所形成的字元，開始於 <paramref name="startIndex" />。</returns>
      <param name="value">陣列。</param>
      <param name="startIndex">起始位置在 <paramref name="value" /> 內。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 等於 <paramref name="value" /> 的長度減去 1。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToDouble(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的八個位元組所轉換的雙精確度浮點數。</summary>
      <returns>由八個位元組所形成的雙精確度浮點數，開始於 <paramref name="startIndex" />。</returns>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">起始位置在 <paramref name="value" /> 內。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大於或等於 <paramref name="value" /> 的長度減去 7，而且小於或等於 <paramref name="value" /> 的長度減去 1。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt16(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的兩個位元組所轉換的 16 位元帶正負號的整數 (Signed Integer)。</summary>
      <returns>由兩個位元組所形成的 16 位元帶正負號的整數，開始於 <paramref name="startIndex" />。</returns>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">起始位置在 <paramref name="value" /> 內。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 等於 <paramref name="value" /> 的長度減去 1。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt32(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的四個位元組所轉換的 32 位元帶正負號的整數。</summary>
      <returns>由四個位元組所形成的 32 位元帶正負號的整數，開始於 <paramref name="startIndex" />。</returns>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">起始位置在 <paramref name="value" /> 內。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大於或等於 <paramref name="value" /> 的長度減去 3，而且小於或等於 <paramref name="value" /> 的長度減去 1。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToInt64(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的八個位元組所轉換的 64 位元帶正負號的整數。</summary>
      <returns>由八個位元組所形成的 64 位元帶正負號的整數，開始於 <paramref name="startIndex" />。</returns>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">起始位置在 <paramref name="value" /> 內。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大於或等於 <paramref name="value" /> 的長度減去 7，而且小於或等於 <paramref name="value" /> 的長度減去 1。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToSingle(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的四個位元組所轉換的單精確度浮點數。</summary>
      <returns>由四個位元組所形成的單精確度浮點數，開始於 <paramref name="startIndex" />。</returns>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">起始位置在 <paramref name="value" /> 內。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大於或等於 <paramref name="value" /> 的長度減去 3，而且小於或等於 <paramref name="value" /> 的長度減去 1。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[])">
      <summary>將指定之位元組陣列的每一個元素之數值轉換成其對等的十六進位字串表示。</summary>
      <returns>一對十六進位的 <see cref="T:System.String" /> 是以連字號做為分隔，其中每對各表示 <paramref name="value" /> 中對應的元素，例如「7F-2C-4A」。</returns>
      <param name="value">位元組陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32)">
      <summary>將指定之位元組子陣列的每一個元素之數值轉換成其對等的十六進位字串表示。</summary>
      <returns>一對十六進位的 <see cref="T:System.String" /> 是以連字號做為分隔，其中每對各表示 <paramref name="value" /> 子陣列中對應的元素，例如「7F-2C-4A」。</returns>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">起始位置在 <paramref name="value" /> 內。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
      <summary>將指定之位元組子陣列的每一個元素之數值轉換成其對等的十六進位字串表示。</summary>
      <returns>一對十六進位的 <see cref="T:System.String" /> 是以連字號做為分隔，其中每對各表示 <paramref name="value" /> 子陣列中對應的元素，例如「7F-2C-4A」。</returns>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">起始位置在 <paramref name="value" /> 內。</param>
      <param name="length">
        <paramref name="value" /> 中要轉換的陣列元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小於零。-或-<paramref name="startIndex" /> 大於零，且會大於或等於 <paramref name="value" /> 的長度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 和 <paramref name="length" /> 的組合沒有指定 <paramref name="value" /> 內的位置，也就是說，<paramref name="startIndex" /> 參數會大於 <paramref name="value" /> 的長度減去 <paramref name="length" /> 參數。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的兩個位元組所轉換的 16 位元不帶正負號的整數 (Unsigned Integer)。</summary>
      <returns>由兩個位元組所形成的 16 位元不帶正負號的整數，開始於 <paramref name="startIndex" />。</returns>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">起始位置在 <paramref name="value" /> 內。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 等於 <paramref name="value" /> 的長度減去 1。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的四個位元組所轉換的 32 位元不帶正負號的整數。</summary>
      <returns>由四個位元組所形成的 32 位元不帶正負號的整數，開始於 <paramref name="startIndex" />。</returns>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">起始位置在 <paramref name="value" /> 內。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大於或等於 <paramref name="value" /> 的長度減去 3，而且小於或等於 <paramref name="value" /> 的長度減去 1。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)">
      <summary>傳回從位元組陣列中指定位置的八個位元組所轉換的 64 位元不帶正負號的整數。</summary>
      <returns>由八個位元組所形成的 64 位元不帶正負號的整數，開始於 <paramref name="startIndex" />。</returns>
      <param name="value">位元組陣列。</param>
      <param name="startIndex">起始位置在 <paramref name="value" /> 內。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="startIndex" /> 大於或等於 <paramref name="value" /> 的長度減去 7，而且小於或等於 <paramref name="value" /> 的長度減去 1。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於 <paramref name="value" /> 的長度減去 1。</exception>
    </member>
    <member name="T:System.Boolean">
      <summary>代表布林值。</summary>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Boolean)">
      <summary>將此執行個體與指定 <see cref="T:System.Boolean" /> 物件相比較，並傳回整數，此整數表示兩者彼此的關聯性 (Relationship)。</summary>
      <returns>帶正負號的整數，表示這個執行個體與 <paramref name="value" /> 的相對值。傳回值條件小於零這個執行個體為 false，而且 <paramref name="value" /> 為 true。零這個執行個體和 <paramref name="value" /> 相等 (同為 true 或同為 false)。大於零這個執行個體為 true，而 <paramref name="value" /> 為 false。</returns>
      <param name="value">要與此執行個體相比較的 <see cref="T:System.Boolean" /> 物件。</param>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Object)">
      <summary>將此執行個體與指定的物件相比較，並傳回整數，此整數表示兩者彼此的關聯性。</summary>
      <returns>帶正負號的整數，表示這個執行個體與 <paramref name="obj" /> 的相對順序。傳回值狀況小於零這個執行個體為 false，而且 <paramref name="obj" /> 為 true。零這個執行個體和 <paramref name="obj" /> 相等 (同為 true 或同為 false)。大於零這個執行個體為 true，而 <paramref name="obj" /> 為 false。-或-<paramref name="obj" /> 為 null。</returns>
      <param name="obj">與此執行個體相比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Boolean" />。</exception>
    </member>
    <member name="M:System.Boolean.Equals(System.Boolean)">
      <summary>傳回值，指出此執行個體是否等於指定之 <see cref="T:System.Boolean" /> 物件。</summary>
      <returns>如果 <paramref name="obj" /> 與此執行個體具有相同的值則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體 (Instance) 相比較的 <see cref="T:System.Boolean" /> 值。</param>
    </member>
    <member name="M:System.Boolean.Equals(System.Object)">
      <summary>傳回值，指出此執行個體是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.Boolean" />，且其值與這個執行個體相同，則為 true，否則為 false。</returns>
      <param name="obj">與此執行個體相比較的物件。</param>
    </member>
    <member name="F:System.Boolean.FalseString">
      <summary>將布林值 false 表示為字串。此欄位為唯讀的。</summary>
    </member>
    <member name="M:System.Boolean.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.Boolean" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.Boolean.GetTypeCode">
      <summary>傳回值型別 <see cref="T:System.Boolean" /> 的 <see cref="T:System.TypeCode" />。</summary>
      <returns>列舉常數、<see cref="F:System.TypeCode.Boolean" />。</returns>
    </member>
    <member name="M:System.Boolean.Parse(System.String)">
      <summary>將邏輯值的指定字串表示轉換為它的相等的 <see cref="T:System.Boolean" />，或如果字串不等於 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 的值，則擲回例外狀況。</summary>
      <returns>如果 <paramref name="value" /> 等於 <see cref="F:System.Boolean.TrueString" /> 欄位的值則為 true，如果 <paramref name="value" /> 等於 <see cref="F:System.Boolean.FalseString" /> 欄位的值則為 false。</returns>
      <param name="value">字串，包含要轉換的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不等於 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 欄位的值。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>true 或 false。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>如果此執行個體的值為 true，則為 1，否則為 0。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">嘗試將 <see cref="T:System.Boolean" /> 值轉換為 <see cref="T:System.Char" /> 值。不支援此轉換。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">嘗試將 <see cref="T:System.Boolean" /> 值轉換為 <see cref="T:System.DateTime" /> 值。不支援此轉換。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>如果此執行個體的值為 true，則為 1，否則為 0。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>如果此執行個體的值為 true，則為 1，否則為 0。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>如果此執行個體的值為 true，則為 1，否則為 0。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>如果此執行個體的值為 true，則為 1，否則為 0。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>如果此執行個體的值為 true，則為 1，否則為 0。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>如果此執行個體的值為 true，則為 1，否則為 0。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>如果此執行個體的值為 true，則為 1，否則為 0。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>所指定型別的物件，其值等於這個 <see cref="T:System.Boolean" /> 物件的值。</returns>
      <param name="type">所要的型別。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的特定文化特性資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.InvalidCastException">不支援所要求的型別轉換。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>如果此執行個體的值為 true，則為 1，否則為 0。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>如果此執行個體的值為 true，則為 1，否則為 0。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>如果此執行個體的值為 true，則為 1，否則為 0。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Boolean.ToString">
      <summary>將此執行個體的值轉換為它的對等字串表示 ("True" 或 "False")。</summary>
      <returns>如果這個執行個體的值是 true，則為 <see cref="F:System.Boolean.TrueString" />；如果這個執行個體的值是 false，則為 <see cref="F:System.Boolean.FalseString" />。</returns>
    </member>
    <member name="M:System.Boolean.ToString(System.IFormatProvider)">
      <summary>將此執行個體的值轉換為它的對等字串表示 ("True" 或 "False")。</summary>
      <returns>如果這個執行個體的值是 true，則為 <see cref="F:System.Boolean.TrueString" />；如果這個執行個體的值是 false，則為 <see cref="F:System.Boolean.FalseString" />。</returns>
      <param name="provider">(保留的) <see cref="T:System.IFormatProvider" /> 物件。</param>
    </member>
    <member name="F:System.Boolean.TrueString">
      <summary>將布林值 true 表示為字串。此欄位為唯讀的。</summary>
    </member>
    <member name="M:System.Boolean.TryParse(System.String,System.Boolean@)">
      <summary>嘗試將邏輯值的指定字串表示轉換為它的相等的 <see cref="T:System.Boolean" />。傳回值會指出轉換是成功或是失敗。</summary>
      <returns>如果成功地轉換 <paramref name="value" /> 則為 true，否則為 false。</returns>
      <param name="value">字串，包含要轉換的值。</param>
      <param name="result">如果轉換成功，則如果 <paramref name="value" /> 等於 <see cref="F:System.Boolean.TrueString" />，這個方法傳回時會包含 true，如果 <paramref name="value" /> 等於 <see cref="F:System.Boolean.FalseString" />，則包含 false。如果轉換失敗，則包含 false。如果 <paramref name="value" /> 為 null，或不等於 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 欄位，則轉換失敗。</param>
    </member>
    <member name="T:System.Buffer">
      <summary>操作基本型別的陣列。</summary>
    </member>
    <member name="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>在從特定位移 (Offset) 開始的來源陣列中，複製指定的位元組數到從特定位移開始的目的陣列上。</summary>
      <param name="src">來源緩衝區。</param>
      <param name="srcOffset">
        <paramref name="src" /> 中以零為起始的位元組位移。</param>
      <param name="dst">目的緩衝區。</param>
      <param name="dstOffset">
        <paramref name="dst" /> 中以零為起始的位元組位移。</param>
      <param name="count">要複製的位元組數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="src" /> 或 <paramref name="dst" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="src" /> 或 <paramref name="dst" /> 不是基本的陣列。-或-<paramref name="src" /> 中的位元組數目小於 <paramref name="srcOffset" /> 加上 <paramref name="count" />。-或-<paramref name="dst" /> 中的位元組數目小於 <paramref name="dstOffset" /> 加上 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="srcOffset" />、<paramref name="dstOffset" /> 或 <paramref name="count" /> 小於 0。</exception>
    </member>
    <member name="M:System.Buffer.ByteLength(System.Array)">
      <summary>傳回指定陣列中的位元組數目。</summary>
      <returns>陣列中的位元組數目。</returns>
      <param name="array">陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不是原始的。</exception>
    </member>
    <member name="M:System.Buffer.GetByte(System.Array,System.Int32)">
      <summary>在指定陣列的指定位置擷取位元組。</summary>
      <returns>傳回陣列中的 <paramref name="index" /> 位元組。</returns>
      <param name="array">陣列。</param>
      <param name="index">陣列中的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不是原始的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 為負數或大於 <paramref name="array" /> 的長度。</exception>
    </member>
    <member name="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
      <summary>指派指定的值給指定陣列中特定位置的位元組。</summary>
      <param name="array">陣列。</param>
      <param name="index">陣列中的位置。</param>
      <param name="value">要指派的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不是原始的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 為負數或大於 <paramref name="array" /> 的長度。 </exception>
    </member>
    <member name="T:System.Byte">
      <summary>表示 8 位元不帶正負號的整數 (Unsigned Integer)。</summary>
    </member>
    <member name="M:System.Byte.CompareTo(System.Byte)">
      <summary>將此執行個體與指定的 8 位元不帶正負號的整數相比較，並傳回它們的相對值指示。</summary>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的關係。傳回值描述小於零這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。大於零這個執行個體大於 <paramref name="value" />。</returns>
      <param name="value">要比較的 8 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Byte.CompareTo(System.Object)">
      <summary>將此執行個體與指定的物件相比較，並傳回它們相對值的指示。</summary>
      <returns>帶正負號的整數，指示這個執行個體與 <paramref name="value" /> 的關係。傳回值描述小於零這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。大於零這個執行個體大於 <paramref name="value" />。-或-<paramref name="value" /> 為 null。</returns>
      <param name="value">要比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Byte" />。</exception>
    </member>
    <member name="M:System.Byte.Equals(System.Byte)">
      <summary>傳回指出此執行個體和指定的 <see cref="T:System.Byte" /> 物件是否表示相同值的值。</summary>
      <returns>如果 <paramref name="obj" /> 等於這個執行個體則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相比較的 <see cref="T:System.Byte" /> 物件。</param>
    </member>
    <member name="M:System.Byte.Equals(System.Object)">
      <summary>傳回值，指出此執行個體是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.Byte" /> 的執行個體，並且等於此執行個體的值，則為 true，否則為 false。</returns>
      <param name="obj">與此執行個體或 null 相互比較的物件。</param>
    </member>
    <member name="M:System.Byte.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.Byte" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.Byte.GetTypeCode">
      <summary>傳回值型別 <see cref="T:System.Byte" /> 的 <see cref="T:System.TypeCode" />。</summary>
      <returns>列舉常數、<see cref="F:System.TypeCode.Byte" />。</returns>
    </member>
    <member name="F:System.Byte.MaxValue">
      <summary>表示 <see cref="T:System.Byte" /> 的最大可能值。此欄位為常數。</summary>
    </member>
    <member name="F:System.Byte.MinValue">
      <summary>表示 <see cref="T:System.Byte" /> 的最小可能值。此欄位為常數。</summary>
    </member>
    <member name="M:System.Byte.Parse(System.String)">
      <summary>將數字的字串表示轉換為它對等的 <see cref="T:System.Byte" />。</summary>
      <returns>
        <see cref="T:System.Byte" /> 值，與 <paramref name="s" /> 中包含的數字相等。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 樣式來解譯。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是正確的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式中數字的字串表示轉換成它的對等 <see cref="T:System.Byte" />。</summary>
      <returns>
        <see cref="T:System.Byte" /> 值，與 <paramref name="s" /> 中包含的數字相等。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式元素。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是正確的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字。-或-<paramref name="s" /> 包含非零的小數數字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將數字的字串表示 (使用指定樣式和特定文化特性的格式) 轉換成它的對等 <see cref="T:System.Byte" />。</summary>
      <returns>
        <see cref="T:System.Byte" /> 值，與 <paramref name="s" /> 中包含的數字相等。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式元素。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件，可提供關於 <paramref name="s" /> 的特定文化特性的格式資訊。如果 <paramref name="provider" /> 為 null，則會使用執行緒目前的文化特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是正確的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.IFormatProvider)">
      <summary>將使用指定特定文化特性格式之數字的字串表示轉換成它的對等 <see cref="T:System.Byte" />。</summary>
      <returns>
        <see cref="T:System.Byte" /> 值，與 <paramref name="s" /> 中包含的數字相等。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 樣式來解譯。</param>
      <param name="provider">物件，可提供關於 <paramref name="s" /> 的特定文化特性剖析資訊。如果 <paramref name="provider" /> 為 null，則會使用目前執行緒文化特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不屬於正確的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示數字小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零則為 true，否則為 false。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <param name="type">要將此 <see cref="T:System.Byte" /> 值轉換成的型別。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值的格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.InvalidCastException">不支援所要求的型別轉換。</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Byte.ToString">
      <summary>將目前 <see cref="T:System.Byte" /> 物件的值轉換為其對等的字串表示。</summary>
      <returns>此物件值的字串表示，由沒有零的前置字元且範圍從 0 到 9 的數字順序所組成。</returns>
    </member>
    <member name="M:System.Byte.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將目前 <see cref="T:System.Byte" /> 物件的數值轉換為其對等字串表示。</summary>
      <returns>這個物件值的字串表示，採用 <paramref name="provider" /> 參數所指定的格式。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件，提供文化特性特定格式資訊。</param>
    </member>
    <member name="M:System.Byte.ToString(System.String)">
      <summary>使用指定的格式，將目前 <see cref="T:System.Byte" /> 物件的值轉換為其對等字串表示。</summary>
      <returns>目前 <see cref="T:System.Byte" /> 物件的字串表示，按照 <paramref name="format" /> 參數所指定來格式化。</returns>
      <param name="format">數值格式字串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 包含不支援的規範。支援的格式規範列在「備註」一節中。</exception>
    </member>
    <member name="M:System.Byte.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性的格式資訊，將目前 <see cref="T:System.Byte" /> 物件的值轉換為其對等字串表示。</summary>
      <returns>目前 <see cref="T:System.Byte" /> 物件的字串表示，按照 <paramref name="format" /> 和 <paramref name="provider" /> 參數所指定來格式化。</returns>
      <param name="format">標準或自訂數值格式字串。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件，提供文化特性特定格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 包含不支援的規範。支援的格式規範列在「備註」一節中。</exception>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Byte@)">
      <summary>嘗試將數字的字串表示轉換成同等的 <see cref="T:System.Byte" />，並傳回一個值指示轉換是否成功。</summary>
      <returns> 如果成功地轉換 <paramref name="s" />，則為 true；否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 樣式來解譯。</param>
      <param name="result">當此方法傳回時，如果轉換成功，則會包含相當於 <paramref name="s" /> 中所含之數字的 <see cref="T:System.Byte" /> 值；如果轉換失敗則為零。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
      <summary>將數字的字串表示 (使用指定樣式和特定文化特性的格式) 轉換成它的對等 <see cref="T:System.Byte" />。傳回值會指出轉換是成功或是失敗。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式元素。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。如果 <paramref name="provider" /> 為 null，則會使用執行緒目前的文化特性。</param>
      <param name="result">當此方法傳回時，如果轉換成功便包含相當於 <paramref name="s" /> 所含數值的 8 位元不帶正負號整數值，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、不是正確格式，或是表示小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="T:System.CannotUnloadAppDomainException">
      <summary>嘗試卸載應用程式定義域失敗時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor">
      <summary>初始化 <see cref="T:System.CannotUnloadAppDomainException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.CannotUnloadAppDomainException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.CannotUnloadAppDomainException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.CannotUnloadAppDomainException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.Char">
      <summary>表示 Unicode 字元。</summary>
    </member>
    <member name="M:System.Char.CompareTo(System.Char)">
      <summary>比較此執行個體與指定的 <see cref="T:System.Char" /> 物件，並且傳回一個整數，指出此執行個體的排序位置若與指定的 <see cref="T:System.Char" /> 值相比，是位於前面、緊接在後還是相同位置。</summary>
      <returns>帶正負號的數字，這個數字表示這個執行個體在排序次序中，相對於 <paramref name="value" /> 參數的位置。傳回值描述小於零這個執行個體位於 <paramref name="value" /> 之前。零這個執行個體在排序次序中的位置與 <paramref name="value" /> 相同。大於零這個執行個體位於 <paramref name="value" /> 之後。</returns>
      <param name="value">要比較的 <see cref="T:System.Char" /> 物件。</param>
    </member>
    <member name="M:System.Char.CompareTo(System.Object)">
      <summary>比較此執行個體與指定的物件，並且傳回一個整數，指出此執行個體的排序位置若與指定的物件相比，是位於前面、緊接在後還是相同位置。</summary>
      <returns>帶正負號的數字，表示這個執行個體在排序次序中，相對於 <paramref name="value" /> 參數的位置。傳回值描述小於零這個執行個體位於 <paramref name="value" /> 之前。零這個執行個體在排序次序中的位置與 <paramref name="value" /> 相同。大於零這個執行個體位於 <paramref name="value" /> 之後。-或-<paramref name="value" /> 為 null。</returns>
      <param name="value">與此執行個體相比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Char" /> 物件。</exception>
    </member>
    <member name="M:System.Char.ConvertFromUtf32(System.Int32)">
      <summary>將指定之 Unicode 字碼指標轉換成 UTF-16 編碼的字串。</summary>
      <returns>由一個 <see cref="T:System.Char" /> 物件或 <see cref="T:System.Char" /> 物件的 Surrogate 字組所組成的字串，這些物件相當於 <paramref name="utf32" /> 參數所指定的字碼指標。</returns>
      <param name="utf32">21 位元 Unicode 字碼指標。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="utf32" /> 不是從 U+0 到 U+10FFFF 範圍的有效 21 位元 Unicode 字碼指標 (此範圍不包括從 U+D800 到 U+DFFF 範圍的 Surrogate 字組)。</exception>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.Char,System.Char)">
      <summary>將 UTF-16 編碼之 Surrogate 字組的值轉換成 Unicode 字碼指標。</summary>
      <returns>以 <paramref name="highSurrogate" /> 和 <paramref name="lowSurrogate" /> 參數表示的 21 位元 Unicode 字碼指標。</returns>
      <param name="highSurrogate">高 Surrogate 字碼單位 (也就是從 U+D800 到 U+DBFF 範圍內的字碼單位)。</param>
      <param name="lowSurrogate">低 Surrogate 字碼單位 (也就是從 U+DC00 到 U+DFFF 範圍內的字碼單位)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="highSurrogate" /> 不在 U+D800 到 U+DBFF 的範圍內，或 <paramref name="lowSurrogate" /> 不在 U+DC00 到 U+DFFF 的範圍內。</exception>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.String,System.Int32)">
      <summary>將字串中指定之位置上的 UTF-16 編碼之字元或 Surrogate 字組的值轉換成 Unicode 字碼指標。</summary>
      <returns>21 位元 Unicode 字碼指標，以 <paramref name="index" /> 參數中由 <paramref name="s" /> 參數指定之位置上的字元或 Surrogate 字組來表示。</returns>
      <param name="s">包含字元或 Surrogate 字組的字串。</param>
      <param name="index">
        <paramref name="s" /> 中字元或 Surrogate 字組的索引位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是在 <paramref name="s" /> 內的位置。</exception>
      <exception cref="T:System.ArgumentException">指定之索引位置包含 Surrogate 字組，而且此字組中的第一個字元不是有效的高 Surrogate，或是此字組中的第二個字元不是有效的低 Surrogate。 </exception>
    </member>
    <member name="M:System.Char.Equals(System.Char)">
      <summary>傳回值，指出此執行個體是否等於指定之 <see cref="T:System.Char" /> 物件。</summary>
      <returns>如果 <paramref name="value" /> 參數等於此執行個體的值則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相比較的 <see cref="T:System.Char" /> 物件。</param>
    </member>
    <member name="M:System.Char.Equals(System.Object)">
      <summary>傳回值，指出此執行個體是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.Char" /> 的執行個體，並且等於此執行個體的值則為 true，否則為 false。</returns>
      <param name="obj">與此執行個體或 null 相互比較的物件。</param>
    </member>
    <member name="M:System.Char.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Char.GetNumericValue(System.Char)">
      <summary>將指定的數字 Unicode 字元轉換成雙精確度浮點數。</summary>
      <returns>如果該字元代表一個數字，則為 <paramref name="c" /> 的數字值，否則為 -1.0。</returns>
      <param name="c">Unicode 字元。</param>
    </member>
    <member name="M:System.Char.GetNumericValue(System.String,System.Int32)">
      <summary>將指定字串中指定位置的數字 Unicode 字元轉換成雙精確度浮點數。</summary>
      <returns>如果該字元代表一個數字，則為 <paramref name="s" /> 中 <paramref name="index" /> 位置處的字元數字值，否則為 -1。</returns>
      <param name="s">字串。</param>
      <param name="index">
        <paramref name="s" /> 中的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
    </member>
    <member name="M:System.Char.GetTypeCode">
      <summary>傳回值型別 <see cref="T:System.Char" /> 的 <see cref="T:System.TypeCode" />。</summary>
      <returns>列舉常數、<see cref="F:System.TypeCode.Char" />。</returns>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.Char)">
      <summary>將指定的 Unicode 字元分類至由其中一個 <see cref="T:System.Globalization.UnicodeCategory" /> 值所識別的群組。</summary>
      <returns>
        <see cref="T:System.Globalization.UnicodeCategory" /> 值，識別包含 <paramref name="c" /> 的群組。</returns>
      <param name="c">Unicode 字元。</param>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.String,System.Int32)">
      <summary>將指定字串中指定位置處的字元分類至群組，而該群組是由其中一個 <see cref="T:System.Globalization.UnicodeCategory" /> 值所識別。</summary>
      <returns>
        <see cref="T:System.Globalization.UnicodeCategory" /> 列舉常數，識別包含 <paramref name="s" /> 中 <paramref name="index" /> 位置處字元的群組。</returns>
      <param name="s">
        <see cref="T:System.String" />。</param>
      <param name="index">
        <paramref name="s" /> 中的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
    </member>
    <member name="M:System.Char.IsControl(System.Char)">
      <summary>指出指定的 Unicode 字元是否分類為控制字元。</summary>
      <returns>如果 <paramref name="c" /> 是控制字元則為 true，否則為 false。</returns>
      <param name="c">Unicode 字元。</param>
    </member>
    <member name="M:System.Char.IsControl(System.String,System.Int32)">
      <summary>指出指定的字串中指定位置處的字元是否分類為控制字元。</summary>
      <returns>如果 <paramref name="s" /> 中 <paramref name="index" /> 位置處的字元是控制字元則為 true，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">
        <paramref name="s" /> 中的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
    </member>
    <member name="M:System.Char.IsDigit(System.Char)">
      <summary>指出指定的 Unicode 字元是否分類為十進位數字。</summary>
      <returns>如果 <paramref name="c" /> 是十進位數字則為 true，否則為 false。</returns>
      <param name="c">Unicode 字元。</param>
    </member>
    <member name="M:System.Char.IsDigit(System.String,System.Int32)">
      <summary>指出指定的字串中指定位置處的字元是否分類為十進位數字。</summary>
      <returns>如果 <paramref name="s" /> 中 <paramref name="index" /> 位置處的字元是十進位數字則為 true，否則為 false。</returns>
      <param name="s">
        <see cref="T:System.String" />。</param>
      <param name="index">
        <paramref name="s" /> 中的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.Char)">
      <summary>指出指定的 <see cref="T:System.Char" /> 物件是否為高 Surrogate。</summary>
      <returns>如果 <paramref name="c" /> 參數的數值範圍是從 U+D800 到 U+DBFF，則為 true，否則為 false。</returns>
      <param name="c">要評估的 Unicode 字元。</param>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.String,System.Int32)">
      <summary>指出在字串中的指定之位置上的 <see cref="T:System.Char" /> 物件是否為高 Surrogate。</summary>
      <returns>如果 <paramref name="s" /> 參數中指定字元的數值範圍是從 U+D800 到 U+DBFF，則為 true，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是在 <paramref name="s" /> 內的位置。</exception>
    </member>
    <member name="M:System.Char.IsLetter(System.Char)">
      <summary>表示指定的 Unicode 字元是否分類為 Unicode 字母。</summary>
      <returns>如果 <paramref name="c" /> 是字母則為 true，否則為 false。</returns>
      <param name="c">要評估的 Unicode 字元。</param>
    </member>
    <member name="M:System.Char.IsLetter(System.String,System.Int32)">
      <summary>指出指定的字串中指定位置處的字元是否分類為 Unicode 字母。</summary>
      <returns>如果 <paramref name="s" /> 中 <paramref name="index" /> 位置處的字元是字母則為 true，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.Char)">
      <summary>指出指定的 Unicode 字元是否分類為字母或十進位數字。</summary>
      <returns>如果 <paramref name="c" /> 是字母或十進位數字則為 true，否則為 false。</returns>
      <param name="c">要評估的 Unicode 字元。</param>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.String,System.Int32)">
      <summary>指出指定的字串中指定位置處的字元是否分類為字母或十進位數字。</summary>
      <returns>如果 <paramref name="s" /> 中 <paramref name="index" /> 位置處的字元是字母或十進位數字則為 true，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
    </member>
    <member name="M:System.Char.IsLower(System.Char)">
      <summary>指出指定的 Unicode 字元是否分類為小寫字母。</summary>
      <returns>如果 <paramref name="c" /> 是小寫字母則為 true，否則為 false。</returns>
      <param name="c">Unicode 字元。</param>
    </member>
    <member name="M:System.Char.IsLower(System.String,System.Int32)">
      <summary>指出指定的字串中指定位置處的字元是否分類為小寫字母。</summary>
      <returns>如果 <paramref name="s" /> 中 <paramref name="index" /> 位置處的字元是小寫字母則為 true，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">
        <paramref name="s" /> 中的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.Char)">
      <summary>指出指定的 <see cref="T:System.Char" /> 物件是否為低 Surrogate。</summary>
      <returns>如果 <paramref name="c" /> 參數的數值範圍是從 U+DC00 到 U+DFFF，則為 true，否則為 false。</returns>
      <param name="c">要評估的字元。</param>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.String,System.Int32)">
      <summary>指出在字串中的指定之位置上的 <see cref="T:System.Char" /> 物件是否為低 Surrogate。</summary>
      <returns>如果 <paramref name="s" /> 參數中指定字元的數值範圍是從 U+DC00 到 U+DFFF，則為 true，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">要評估的字元在 <paramref name="s" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是在 <paramref name="s" /> 內的位置。</exception>
    </member>
    <member name="M:System.Char.IsNumber(System.Char)">
      <summary>指出指定的 Unicode 字元是否分類為數字。</summary>
      <returns>如果 <paramref name="c" /> 是數字則為 true，否則為 false。</returns>
      <param name="c">Unicode 字元。</param>
    </member>
    <member name="M:System.Char.IsNumber(System.String,System.Int32)">
      <summary>指出指定的字串中指定位置處的字元是否分類為數字。</summary>
      <returns>如果 <paramref name="s" /> 中 <paramref name="index" /> 位置處的字元是數字則為 true，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">
        <paramref name="s" /> 中的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
    </member>
    <member name="M:System.Char.IsPunctuation(System.Char)">
      <summary>指出指定的 Unicode 字元是否分類為標點符號。</summary>
      <returns>如果 <paramref name="c" /> 是標點符號則為 true，否則為 false。</returns>
      <param name="c">Unicode 字元。</param>
    </member>
    <member name="M:System.Char.IsPunctuation(System.String,System.Int32)">
      <summary>指出指定的字串中指定位置處的字元是否分類為標點符號。</summary>
      <returns>如果 <paramref name="s" /> 中 <paramref name="index" /> 位置處的字元是標點符號則為 true，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">
        <paramref name="s" /> 中的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
    </member>
    <member name="M:System.Char.IsSeparator(System.Char)">
      <summary>指出指定的 Unicode 字元是否分類為分隔符號字元。</summary>
      <returns>如果 <paramref name="c" /> 是分隔符號字元則為 true，否則為 false。</returns>
      <param name="c">Unicode 字元。</param>
    </member>
    <member name="M:System.Char.IsSeparator(System.String,System.Int32)">
      <summary>指出指定的字串中指定位置處的字元是否分類為分隔符號字元。</summary>
      <returns>如果 <paramref name="s" /> 中 <paramref name="index" /> 位置處的字元是分隔符號字元則為 true，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">
        <paramref name="s" /> 中的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
    </member>
    <member name="M:System.Char.IsSurrogate(System.Char)">
      <summary>指出指定的字元是否有 Surrogate 字碼指標。</summary>
      <returns>如果 <paramref name="c" /> 為高 Surrogate 或低 Surrogate 則為 true，否則為 false。</returns>
      <param name="c">Unicode 字元。</param>
    </member>
    <member name="M:System.Char.IsSurrogate(System.String,System.Int32)">
      <summary>指出位於指定的字串中指定位置處的字元是否有 Surrogate 字碼指標。</summary>
      <returns>如果 <paramref name="s" /> 中 <paramref name="index" /> 位置的字元為高 Surrogate 或低 Surrogate，則為 true，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">
        <paramref name="s" /> 中的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.Char,System.Char)">
      <summary>指出兩個指定的 <see cref="T:System.Char" /> 物件是否會組成 Surrogate 字組。</summary>
      <returns>如果 <paramref name="highSurrogate" /> 參數的數值之範圍是從 U+D800 到 U+DBFF，且 <paramref name="lowSurrogate" /> 參數的數值之範圍是從 U+DC00 到 U+DFFF，則為 true，否則為 false。</returns>
      <param name="highSurrogate">字元。</param>
      <param name="lowSurrogate">字元。</param>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.String,System.Int32)">
      <summary>指出在字串中的指定之位置上的兩個相鄰 <see cref="T:System.Char" /> 物件是否會組成 Surrogate 字組。</summary>
      <returns>如果 <paramref name="s" /> 參數和 <paramref name="index" /> 參數指定一組相鄰的字元，而且在 <paramref name="index" /> 位置上的字元之數值範圍是從 U+D800 到 U+DBFF，而在 <paramref name="index" />+1 位置上的字元之數值範圍是從 U+DC00 到 U+DFFF，則為 true，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">
        <paramref name="s" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是在 <paramref name="s" /> 內的位置。</exception>
    </member>
    <member name="M:System.Char.IsSymbol(System.Char)">
      <summary>指出指定的 Unicode 字元是否分類為符號字元。</summary>
      <returns>如果 <paramref name="c" /> 是符號字元則為 true，否則為 false。</returns>
      <param name="c">Unicode 字元。</param>
    </member>
    <member name="M:System.Char.IsSymbol(System.String,System.Int32)">
      <summary>指出指定的字串中指定位置處的字元是否分類為符號字元。</summary>
      <returns>如果 <paramref name="s" /> 中 <paramref name="index" /> 位置處的字元是符號字元則為 true，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">
        <paramref name="s" /> 中的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
    </member>
    <member name="M:System.Char.IsUpper(System.Char)">
      <summary>指出指定的 Unicode 字元是否分類為大寫字母。</summary>
      <returns>如果 <paramref name="c" /> 是大寫字母則為 true，否則為 false。</returns>
      <param name="c">Unicode 字元。</param>
    </member>
    <member name="M:System.Char.IsUpper(System.String,System.Int32)">
      <summary>指出指定的字串中指定位置處的字元是否分類為大寫字母。</summary>
      <returns>如果 <paramref name="s" /> 中 <paramref name="index" /> 位置處的字元是大寫字母則為 true，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">
        <paramref name="s" /> 中的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.Char)">
      <summary>指出指定的 Unicode 字元是否分類為泛空白字元。</summary>
      <returns>如果 <paramref name="c" /> 是空白字元則為 true，否則為 false。</returns>
      <param name="c">Unicode 字元。</param>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.String,System.Int32)">
      <summary>指出指定的字串中指定位置處的字元是否分類為空白字元。</summary>
      <returns>如果 <paramref name="s" /> 中 <paramref name="index" /> 位置處的字元是空白字元則為 true，否則為 false。</returns>
      <param name="s">字串。</param>
      <param name="index">
        <paramref name="s" /> 中的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於 <paramref name="s" /> 中的最後位置。</exception>
    </member>
    <member name="F:System.Char.MaxValue">
      <summary>表示 <see cref="T:System.Char" /> 的最大可能值。此欄位為常數。</summary>
    </member>
    <member name="F:System.Char.MinValue">
      <summary>表示 <see cref="T:System.Char" /> 的最小可能值。此欄位為常數。</summary>
    </member>
    <member name="M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>注意：不支援這項轉換。嘗試這麼做會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">不支援此轉換。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.Char" /> 物件的值未變更。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>注意：不支援這項轉換。嘗試這麼做會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">不支援此轉換。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>注意：不支援這項轉換。嘗試這麼做會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>沒有傳回任何值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件。(指定 null，因為已忽略 <paramref name="provider" /> 參數)。</param>
      <exception cref="T:System.InvalidCastException">不支援此轉換。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>注意：不支援這項轉換。嘗試這麼做會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">不支援此轉換。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>注意：不支援這項轉換。嘗試這麼做會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">不支援此轉換。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>指定型別的物件。</returns>
      <param name="type">
        <see cref="T:System.Type" /> 物件。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.InvalidCastException">目前 <see cref="T:System.Char" /> 物件的值不能轉換為 <paramref name="type" /> 參數指定的型別。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.Char" /> 物件的轉換值。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Char.ToLower(System.Char)">
      <summary>將 Unicode 字元值轉換成它的對等小寫。</summary>
      <returns>等同於 <paramref name="c" /> 的小寫項目；如果 <paramref name="c" /> 已經是小寫或不是英文字母，則為未變更的 <paramref name="c" /> 值。</returns>
      <param name="c">Unicode 字元。</param>
    </member>
    <member name="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)">
      <summary>使用指定的特定文化特性格式資訊，將指定的 Unicode 字元值轉換成它的對等小寫。</summary>
      <returns>等同於 <paramref name="c" /> 的小寫項目 (已根據 <paramref name="culture" /> 做修改)；如果 <paramref name="c" /> 已經是小寫或不是英文字母，則為未變更的 <paramref name="c" /> 值。</returns>
      <param name="c">Unicode 字元。</param>
      <param name="culture">提供文化特性大小寫規則的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 null。</exception>
    </member>
    <member name="M:System.Char.ToLowerInvariant(System.Char)">
      <summary>使用不因文化特性而異 (Invariant Culture) 的轉換規則，將 Unicode 字元的值轉換成其小寫的同等項目。</summary>
      <returns>等同於 <paramref name="c" /> 參數的小寫項目；如果 <paramref name="c" /> 已經是小寫或不是英文字母，則為未變更的 <paramref name="c" /> 值。</returns>
      <param name="c">Unicode 字元。</param>
    </member>
    <member name="M:System.Char.ToString">
      <summary>將此執行個體的值轉換為它的對等字串表示。</summary>
      <returns>此執行個體值的字串表示。</returns>
    </member>
    <member name="M:System.Char.ToString(System.Char)">
      <summary>將指定 Unicode 字元的值轉換成它的對等字串表示。</summary>
      <returns>
        <paramref name="c" /> 值的字串表示。</returns>
      <param name="c">Unicode 字元。</param>
    </member>
    <member name="M:System.Char.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性的格式資訊，將此執行個體的值轉換為它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
      <param name="provider">(保留的) <see cref="T:System.IFormatProvider" />，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Char.ToUpper(System.Char)">
      <summary>將 Unicode 字元值轉換成它的對等大寫。</summary>
      <returns>等同於 <paramref name="c" /> 的大寫項目；如果 <paramref name="c" /> 已經是大寫、沒有大寫對等項目或者不是英文字母，則為未變更的 <paramref name="c" /> 值。</returns>
      <param name="c">Unicode 字元。</param>
    </member>
    <member name="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)">
      <summary>使用指定的特定文化特性格式資訊，將指定的 Unicode 字元值轉換成它的對等大寫。</summary>
      <returns>等同於 <paramref name="c" /> 的大寫項目 (已根據 <paramref name="culture" /> 做修改)；如果 <paramref name="c" /> 已經是大寫、沒有大寫對應項或不是英文字母，則為未變更的 <paramref name="c" /> 值。</returns>
      <param name="c">Unicode 字元。</param>
      <param name="culture">提供文化特性大小寫規則的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 null。</exception>
    </member>
    <member name="M:System.Char.ToUpperInvariant(System.Char)">
      <summary>使用不因文化特性而異的轉換規則，將 Unicode 字元的值轉換成其大寫的同等項目。</summary>
      <returns>等同於 <paramref name="c" /> 參數的大寫項目；如果 <paramref name="c" /> 已經是大寫或不是英文字母，則為未變更的 <paramref name="c" /> 值。</returns>
      <param name="c">要轉換的 Unicode 字元。</param>
    </member>
    <member name="M:System.Char.TryParse(System.String,System.Char@)">
      <summary>將指定的字串值轉換成它的對等 Unicode 字元。傳回碼 (Return Code) 會指出轉換是成功或是失敗。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 參數則為 true，否則為 false。</returns>
      <param name="s">包含單一字元或 null 的字串。</param>
      <param name="result">當此方法傳回時，如果轉換成功則包含相當於 <paramref name="s" /> 中唯一字元的 Unicode 字元；如果轉換失敗，則為未定義的值。如果 <paramref name="s" /> 參數為 null 或 <paramref name="s" /> 的長度不是 1，轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="T:System.CLSCompliantAttribute">
      <summary>指出程式元素是否符合 Common Language Specification (CLS) 標準。無法繼承此類別。</summary>
    </member>
    <member name="M:System.CLSCompliantAttribute.#ctor(System.Boolean)">
      <summary>使用布林值初始化 <see cref="T:System.CLSCompliantAttribute" /> 類別的執行個體，該布林值會指出指定的程式項目是否符合 CLS 標準。</summary>
      <param name="isCompliant">如果符合 CLS 標準，則為 true；否則為 false。</param>
    </member>
    <member name="P:System.CLSCompliantAttribute.IsCompliant">
      <summary>取得布林值，指出指定程式元素是否符合 CLS 標準。</summary>
      <returns>如果程式元素符合 CLS 標準則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Comparison`1">
      <summary>表示比較兩個相同型別之物件的方法。</summary>
      <returns>帶正負號的整數，表示 x 和 y 的相對值，如下表所示。Value狀況小於 0<paramref name="x" /> 小於 <paramref name="y" />。0 <paramref name="x" /> 等於 <paramref name="y" />。大於 0<paramref name="x" /> 大於 <paramref name="y" />。</returns>
      <param name="x">要比較的第 1 個物件。</param>
      <param name="y">要比較的第 2 個物件。</param>
      <typeparam name="T">要比較之物件的型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Console">
      <summary>表示主控台應用程式 (Console Application) 的標準輸入、輸出和錯誤資料流。無法繼承此類別。</summary>
    </member>
    <member name="P:System.Console.Error">
      <summary>取得標準錯誤輸出資料流。</summary>
      <returns>
        <see cref="T:System.IO.TextWriter" />，表示標準錯誤輸出資料流。</returns>
    </member>
    <member name="P:System.Console.In">
      <summary>取得標準輸入資料流。</summary>
      <returns>
        <see cref="T:System.IO.TextReader" />，表示標準輸入資料流。</returns>
    </member>
    <member name="P:System.Console.Out">
      <summary>取得標準輸出資料流。</summary>
      <returns>
        <see cref="T:System.IO.TextWriter" />，表示標準輸出資料流。</returns>
    </member>
    <member name="M:System.Console.ReadLine">
      <summary>從主控台讀取一行字元。</summary>
      <returns>自主控台的下一行字元。</returns>
    </member>
    <member name="M:System.Console.SetError(System.IO.TextWriter)">
      <summary>[安全性關鍵] 設定 <see cref="P:System.Console.Error" /> 屬性。</summary>
      <param name="newError">表示新標準錯誤輸出的資料流。</param>
    </member>
    <member name="M:System.Console.SetIn(System.IO.TextReader)">
      <summary>[安全性關鍵] 設定 <see cref="P:System.Console.In" /> 屬性。</summary>
      <param name="newIn">表示新標準輸入的資料流。</param>
    </member>
    <member name="M:System.Console.SetOut(System.IO.TextWriter)">
      <summary>[安全性關鍵] 設定 <see cref="P:System.Console.Out" /> 屬性。</summary>
      <param name="newOut">表示新標準輸出的資料流。</param>
    </member>
    <member name="M:System.Console.Write(System.Char)">
      <summary>將指定的 Unicode 字元值寫入標準輸出資料流。</summary>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Console.Write(System.Char[])">
      <summary>將指定的 Unicode 字元陣列寫入標準輸出資料流。</summary>
      <param name="buffer">Unicode 字元陣列。</param>
    </member>
    <member name="M:System.Console.Write(System.Char[],System.Int32,System.Int32)">
      <summary>將指定的 Unicode 字元子陣列寫入標準輸出資料流。</summary>
      <param name="buffer">Unicode 字元陣列。</param>
      <param name="index">
        <paramref name="buffer" /> 中的起始位置。</param>
      <param name="count">要寫入的字元數。</param>
    </member>
    <member name="M:System.Console.Write(System.Int32)">
      <summary>將指定 32 位元帶正負號整數值的文字表示寫入標準輸出資料流。</summary>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Console.Write(System.Object)">
      <summary>將指定物件的文字表示寫入標準輸出資料流。</summary>
      <param name="value">要寫入的值，或 null。</param>
    </member>
    <member name="M:System.Console.Write(System.String)">
      <summary>將指定的字串值寫入標準輸出資料流。</summary>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object)">
      <summary>使用指定的格式資訊，將指定之物件的文字表示寫入到標準輸出資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要使用 <paramref name="format" /> 寫入的物件。</param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object,System.Object)">
      <summary>使用指定的格式資訊，將指定之物件的文字表示寫入到標準輸出資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">第 1 個物件，使用 <paramref name="format" /> 寫入。</param>
      <param name="arg1">第 2 個物件，使用 <paramref name="format" /> 寫入。</param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)">
      <summary>使用指定的格式資訊，將指定之物件的文字表示寫入到標準輸出資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">第 1 個物件，使用 <paramref name="format" /> 寫入。</param>
      <param name="arg1">第 2 個物件，使用 <paramref name="format" /> 寫入。</param>
      <param name="arg2">第 3 個物件，使用 <paramref name="format" /> 寫入。</param>
    </member>
    <member name="M:System.Console.Write(System.String,System.Object[])">
      <summary>使用指定的格式資訊，將指定之物件陣列的文字表示寫入到標準輸出資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg">要使用 <paramref name="format" /> 寫入的物件陣列。</param>
    </member>
    <member name="M:System.Console.WriteLine">
      <summary>將目前的行結束字元寫入標準輸出資料流。</summary>
    </member>
    <member name="M:System.Console.WriteLine(System.Char)">
      <summary>將指定的 Unicode 字元值 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Console.WriteLine(System.Char[])">
      <summary>將指定的 Unicode 字元陣列 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
      <param name="buffer">Unicode 字元陣列。</param>
    </member>
    <member name="M:System.Console.WriteLine(System.Int32)">
      <summary>將指定的 32 位元帶正負號整數值的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Console.WriteLine(System.Object)">
      <summary>將指定物件的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Console.WriteLine(System.String)">
      <summary>將指定的字串值 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object)">
      <summary>使用指定的格式資訊，將指定之物件的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">要使用 <paramref name="format" /> 寫入的物件。</param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object)">
      <summary>使用指定的格式資訊，將指定之物件的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">第 1 個物件，使用 <paramref name="format" /> 寫入。</param>
      <param name="arg1">第 2 個物件，使用 <paramref name="format" /> 寫入。</param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)">
      <summary>使用指定的格式資訊，將指定之物件的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg0">第 1 個物件，使用 <paramref name="format" /> 寫入。</param>
      <param name="arg1">第 2 個物件，使用 <paramref name="format" /> 寫入。</param>
      <param name="arg2">第 3 個物件，使用 <paramref name="format" /> 寫入。</param>
    </member>
    <member name="M:System.Console.WriteLine(System.String,System.Object[])">
      <summary>使用指定的格式資訊，將指定之物件陣列的文字表示 (後面接著目前的行結束字元) 寫入標準輸出資料流。</summary>
      <param name="format">複合格式字串。</param>
      <param name="arg">要使用 <paramref name="format" /> 寫入的物件陣列。</param>
    </member>
    <member name="T:System.ContextStaticAttribute">
      <summary>指出特定內容的靜態欄位值是唯一的。</summary>
    </member>
    <member name="M:System.ContextStaticAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ContextStaticAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Convert">
      <summary>將基底資料型別轉換為其他基底資料型別。</summary>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type)">
      <summary>傳回指定之型別的物件，此物件的值與指定的物件相等。</summary>
      <returns>型別為 <paramref name="conversionType" /> 且值與 <paramref name="value" /> 相等的物件。-或-如果 <paramref name="value" /> 為 null 且 <paramref name="conversionType" /> 不是實值型別，則為 null 參考 (在 Visual Basic 中為 Nothing)。</returns>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="conversionType">要傳回的物件型別。</param>
      <exception cref="T:System.InvalidCastException">不支援此轉換。-或-<paramref name="value" /> 是 null，且 <paramref name="conversionType" /> 是實值型別。-或-<paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" /> 介面。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是 <paramref name="conversionType" /> 可辨認的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示超出 <paramref name="conversionType" /> 範圍的數字。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" /> 為 null。</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
      <summary>傳回物件，該物件屬於指定的型別，且其值等於指定的物件。參數提供特定文化特性的格式資訊。</summary>
      <returns>型別為 <paramref name="conversionType" /> 且值與 <paramref name="value" /> 相等的物件。-或-如果 <paramref name="value" /> 的型別和 <paramref name="conversionType" /> 相等，則為 <paramref name="value" />。-或-如果 <paramref name="value" /> 為 null 且 <paramref name="conversionType" /> 不是實值型別，則為 null 參考 (在 Visual Basic 中為 Nothing)。</returns>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="conversionType">要傳回的物件型別。</param>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
      <exception cref="T:System.InvalidCastException">不支援此轉換。-或-<paramref name="value" /> 是 null，且 <paramref name="conversionType" /> 是實值型別。-或-<paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" /> 介面。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是 <paramref name="provider" /> 可辨識的 <paramref name="conversionType" /> 的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示超出 <paramref name="conversionType" /> 範圍的數字。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conversionType" /> 為 null。</exception>
    </member>
    <member name="M:System.Convert.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
      <summary>傳回物件，該物件屬於指定的型別，且其值等於指定的物件。參數提供特定文化特性的格式資訊。</summary>
      <returns>基礎型別為 <paramref name="typeCode" /> 且值與 <paramref name="value" /> 相等的物件。-或-如果 <paramref name="value" /> 為 null 且 <paramref name="typeCode" /> 為 <see cref="F:System.TypeCode.Empty" />、<see cref="F:System.TypeCode.String" /> 或 <see cref="F:System.TypeCode.Object" />，則為 null 參考 (在 Visual Basic 中為 Nothing)。</returns>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的物件。</param>
      <param name="typeCode">要傳回的物件型別。</param>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
      <exception cref="T:System.InvalidCastException">不支援此轉換。-或-<paramref name="value" /> 是 null，且 <paramref name="typeCode" /> 指定實值型別。-或-<paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" /> 介面。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是 <paramref name="provider" /> 可辨識的 <paramref name="typeCode" /> 的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示超出 <paramref name="typeCode" /> 型別範圍的數字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeCode" /> 無效。</exception>
    </member>
    <member name="F:System.Convert.DBNull">
      <summary>表示資料庫資料行缺少資料的常數，也就是資料庫 null。</summary>
    </member>
    <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
      <summary>將 Unicode 字元陣列 (將二進位資料編碼為 Base64 數字) 的子集轉換為相等的 8 位元不帶正負號的整數陣列。參數會指定輸入陣列中的子集，以及要轉換的元素個數。</summary>
      <returns>8 位元不帶正負號的整數陣列，相當於 <paramref name="inArray" /> 中 <paramref name="offset" /> 位置的 <paramref name="length" /> 個元素。</returns>
      <param name="inArray">Unicode 字元陣列。</param>
      <param name="offset">
        <paramref name="inArray" /> 中的位置。</param>
      <param name="length">
        <paramref name="inArray" /> 中要轉換的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="length" /> 小於 0。-或-<paramref name="offset" /> 加上 <paramref name="length" /> 指示的位置不在 <paramref name="inArray" /> 內。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="inArray" /> 除了空白字元之外的長度，不是零或 4 的倍數。-或-<paramref name="inArray" /> 的格式無效。<paramref name="inArray" /> 包含一個非 Base 64 的字元、兩個以上的填補字元或一個位於填補字元間的非泛空白字元。</exception>
    </member>
    <member name="M:System.Convert.FromBase64String(System.String)">
      <summary>將指定的 <see cref="T:System.String" /> (其會將二進位資料編碼為 Base-64 位數)，轉換為 8 位元不帶正負號的整數陣列的對等用法。</summary>
      <returns>8 位元不帶正負號的整數陣列，與 <paramref name="s" /> 相等。</returns>
      <param name="s">
        <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 除了空白字元之外的長度，不是零或 4 的倍數。-或-<paramref name="s" /> 的格式無效。<paramref name="s" /> 包含一個非 Base 64 的字元、兩個以上的填補字元或一個位於填補字元間的非泛空白字元。</exception>
    </member>
    <member name="M:System.Convert.GetTypeCode(System.Object)">
      <summary>傳回指定物件的 <see cref="T:System.TypeCode" />。</summary>
      <returns>
        <paramref name="value" /> 的 <see cref="T:System.TypeCode" />，或如果 <paramref name="value" /> 是 null，則為 <see cref="F:System.TypeCode.Empty" />。</returns>
      <param name="value">
        <see cref="T:System.Object" />，實作 <see cref="T:System.IConvertible" /> 介面。</param>
    </member>
    <member name="M:System.Convert.IsDBNull(System.Object)">
      <summary>傳回指定物件是否屬於型別 <see cref="T:System.DBNull" /> 的指示。</summary>
      <returns>如果 <paramref name="value" /> 屬於型別 <see cref="T:System.DBNull" /> 則為 true，否則為 false。。</returns>
      <param name="value">物件。</param>
    </member>
    <member name="M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>將 8 位元不帶正負號的整數陣列子集，轉換成以 Base 64 數字編碼的 Unicode 字元陣列相等子集。參數會將子集指定為輸入和輸出陣列中的位移，以及轉換輸入陣列中的元素數目。</summary>
      <returns>32 位元帶正負號的整數，包含 <paramref name="outArray" /> 中的位元組數。</returns>
      <param name="inArray">8 位元不帶正負號的整數的輸入陣列。</param>
      <param name="offsetIn">
        <paramref name="inArray" /> 中的位置。</param>
      <param name="length">要轉換的 <paramref name="inArray" /> 元素數目。</param>
      <param name="outArray">Unicode 字元的輸出陣列。</param>
      <param name="offsetOut">
        <paramref name="outArray" /> 中的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 或 <paramref name="outArray" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offsetIn" />、<paramref name="offsetOut" /> 或 <paramref name="length" /> 為負值。-或-<paramref name="offsetIn" /> 加上 <paramref name="length" /> 大於 <paramref name="inArray" /> 的長度。-或-<paramref name="offsetOut" /> 加上要傳回的項目數目大於 <paramref name="outArray" /> 的長度。</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[])">
      <summary>將 8 位元不帶正負號的整數陣列，轉換為以 Base-64 位數編碼的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>
        <paramref name="inArray" /> 內容的 <see cref="T:System.String" /> 表示，格式為 Base 64。</returns>
      <param name="inArray">8 位元不帶正負號的整數的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 為 null。</exception>
    </member>
    <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
      <summary>將 8 位元不帶正負號的整數陣列子集，轉換為以 Base 64 數字編碼的相等 <see cref="T:System.String" /> 表示。參數以輸入陣列中的位移來指定子集，以及陣列中要轉換的元素個數。</summary>
      <returns>
        <paramref name="inArray" /> 中從位置 <paramref name="offset" /> 開始的 <paramref name="length" /> 個元素的 <see cref="T:System.String" /> 表示，格式為 Base 64。</returns>
      <param name="inArray">8 位元不帶正負號的整數的陣列。</param>
      <param name="offset">
        <paramref name="inArray" /> 中的位移。</param>
      <param name="length">要轉換的 <paramref name="inArray" /> 元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inArray" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="length" /> 為負值。-或-<paramref name="offset" /> 加上 <paramref name="length" /> 大於 <paramref name="inArray" /> 的長度。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Boolean)">
      <summary>傳回指定的布林值 (Boolean)；不會執行實際的轉換。</summary>
      <returns>傳回未變更的 <paramref name="value" /> 參數。</returns>
      <param name="value">布林值。</param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Byte)">
      <summary>將指定的 8 位元不帶正負號整數的值，轉換為相等的布林值。</summary>
      <returns>如果 <paramref name="value" /> 不是零則為 true，否則為 false。</returns>
      <param name="value">8 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Char)">
      <summary>呼叫此方法永遠會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="value">Unicode 字元。</param>
      <exception cref="T:System.InvalidCastException">不支援此轉換。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 數字的值轉換為相等的布林值 (Boolean)。</summary>
      <returns>如果 <paramref name="value" /> 不是零則為 true，否則為 false。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 數字。</param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Double)">
      <summary>將指定的雙精確度浮點數值，轉換為相等的布林值。</summary>
      <returns>如果 <paramref name="value" /> 不是零則為 true，否則為 false。</returns>
      <param name="value">雙精確度浮點數。</param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int16)">
      <summary>將指定的 16 位元帶正負號的整數值，轉換為相等的布林值。</summary>
      <returns>如果 <paramref name="value" /> 不是零則為 true，否則為 false。</returns>
      <param name="value">16 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數值，轉換為相等的布林值。</summary>
      <returns>如果 <paramref name="value" /> 不是零則為 true，否則為 false。</returns>
      <param name="value">32 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Int64)">
      <summary>將指定的 64 位元帶正負號的整數值，轉換為相等的布林值。</summary>
      <returns>如果 <paramref name="value" /> 不是零則為 true，否則為 false。</returns>
      <param name="value">64 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object)">
      <summary>將指定的 <see cref="T:System.Object" /> 的值轉換為相等的布林值。</summary>
      <returns>true 或 false，會反映針對 <paramref name="value" /> 的基礎型別叫用 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> 方法所傳回的值。如果 <paramref name="value" /> 為 null，此方法會傳回 false。</returns>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的 <see cref="T:System.Object" /> 或 null。</param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Object,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將指定的 <see cref="T:System.Object" /> 的值轉換為相等的布林值。</summary>
      <returns>true 或 false，會反映針對 <paramref name="value" /> 的基礎型別叫用 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" /> 方法所傳回的值。如果 <paramref name="value" /> 為 null，此方法會傳回 false。</returns>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的 <see cref="T:System.Object" /> 或 null。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" /> 介面。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.SByte)">
      <summary>將指定的 8 位元帶正負號的整數值，轉換為相等的布林值。</summary>
      <returns>如果 <paramref name="value" /> 不是零則為 true，否則為 false。</returns>
      <param name="value">8 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.Single)">
      <summary>將指定的單精確度浮點數值，轉換為相等的布林值。</summary>
      <returns>如果 <paramref name="value" /> 不是零則為 true，否則為 false。</returns>
      <param name="value">單精確度浮點數。</param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String)">
      <summary>將邏輯值的指定 <see cref="T:System.String" /> 表示轉換為其相等的布林值。</summary>
      <returns>如果 <paramref name="value" /> 等於 <see cref="F:System.Boolean.TrueString" /> 則為 true，如果 <paramref name="value" /> 等於 <see cref="F:System.Boolean.FalseString" /> 或 null 則為 false。</returns>
      <param name="value">
        <see cref="T:System.String" />，包含 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 的值。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不等於 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將指定的邏輯值之 <see cref="T:System.String" /> 表示轉換為相等的布林值。</summary>
      <returns>如果 <paramref name="value" /> 等於 <see cref="F:System.Boolean.TrueString" /> 則為 true，如果 <paramref name="value" /> 等於 <see cref="F:System.Boolean.FalseString" /> 或 null 則為 false。</returns>
      <param name="value">字串，包含 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 的值。</param>
      <param name="provider">(保留字) <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不等於 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。</exception>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號整數的值，轉換為相等的布林值。</summary>
      <returns>如果 <paramref name="value" /> 不是零則為 true，否則為 false。</returns>
      <param name="value">16 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為相等的布林值。</summary>
      <returns>如果 <paramref name="value" /> 不是零則為 true，否則為 false。</returns>
      <param name="value">32 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToBoolean(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為相等的布林值。</summary>
      <returns>如果 <paramref name="value" /> 不是零則為 true，否則為 false。</returns>
      <param name="value">64 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToByte(System.Boolean)">
      <summary>將指定的布林值轉換為相等的 8 位元不帶正負號的整數。</summary>
      <returns>如果 <paramref name="value" /> 為 true，則為數字 1，否則為 0。</returns>
      <param name="value">布林值。</param>
    </member>
    <member name="M:System.Convert.ToByte(System.Byte)">
      <summary>傳回指定的 8 位元不帶正負號整數；不會執行實際的轉換。</summary>
      <returns>傳回未變更的 <paramref name="value" /> 參數。</returns>
      <param name="value">8 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToByte(System.Char)">
      <summary>將指定的 Unicode 字元值轉換為相等的 8 位元不帶正負號的整數。</summary>
      <returns>8 位元不帶正負號的整數，等於 <paramref name="value" />。</returns>
      <param name="value">Unicode 字元。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 數字的值轉換為相等的 8 位元不帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 8 位元帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Byte.MaxValue" /> 或小於 <see cref="F:System.Byte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Double)">
      <summary>將指定的雙精確度浮點數值轉換為相等的 8 位元不帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 8 位元帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">雙精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Byte.MaxValue" /> 或小於 <see cref="F:System.Byte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int16)">
      <summary>將指定之 16 位元帶正負號的整數值，轉換為相等的 8 位元不帶正負號的整數。</summary>
      <returns>8 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">16 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數值，轉換為相等的 8 位元不帶正負號的整數。</summary>
      <returns>8 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">32 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Int64)">
      <summary>將指定的 64 位元帶正負號的整數值，轉換為相等的 8 位元不帶正負號的整數。</summary>
      <returns>8 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">64 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object)">
      <summary>將指定的 <see cref="T:System.Object" /> 的值轉換為 8 位元不帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 值的 8 位元不帶正負號的整數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的 <see cref="T:System.Object" /> 或 null。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Object,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將指定的 <see cref="T:System.Object" /> 的值轉換為 8 位元不帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 值的 8 位元不帶正負號的整數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.Object" />，實作 <see cref="T:System.IConvertible" /> 介面。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Convert.ToByte(System.SByte)">
      <summary>將指定的 8 位元帶正負號的整數值，轉換為相等的 8 位元不帶正負號的整數。</summary>
      <returns>8 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">8 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Byte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.Single)">
      <summary>將指定的單精確度浮點數值，轉換為相等的 8 位元不帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 8 位元帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">單精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Byte.MaxValue" /> 或小於 <see cref="F:System.Byte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String)">
      <summary>將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的 8 位元不帶正負號的整數。</summary>
      <returns>8 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由選擇性的正負號之後跟隨一連串數字 (0 到 9) 所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將數字的指定 <see cref="T:System.String" /> 表示轉換為 8 位元不帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，等於 <paramref name="value" /> 的值。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由選擇性的正負號之後跟隨一連串數字 (0 到 9) 所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.String,System.Int32)">
      <summary>將指定基底中數字的字串表示，轉換為相等的 8 位元不帶正負號的整數。</summary>
      <returns>8 位元不帶正負號的整數，與 <paramref name="value" /> 中的數字相等。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">含有數字的 <see cref="T:System.String" />。</param>
      <param name="fromBase">
        <paramref name="value" /> 中數字的基底，必須是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。-或-<paramref name="value" />，表示非基底 10 的不帶正負號的數字有前置一個負號。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含的字元，對於 <paramref name="fromBase" /> 指定的基底而言是無效的數字。如果 <paramref name="value" /> 中的第一個字元無效，則例外狀況訊息會指出無數字可進行轉換，否則訊息會指出 <paramref name="value" /> 包含無效的尾端字元。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />，表示基底 10 的不帶正負號的數字有前置一個負號。-或-傳回值小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號整數的值，轉換為相等的 8 位元不帶正負號整數。</summary>
      <returns>8 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">16 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為相等的 8 位元不帶正負號整數。</summary>
      <returns>8 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">32 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToByte(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為相等的 8 位元不帶正負號整數。</summary>
      <returns>8 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">64 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Byte)">
      <summary>將指定的 8 位元不帶正負號整數的值，轉換為它的相等 Unicode 字元。</summary>
      <returns>等於 <paramref name="value" /> 值的 Unicode 字元。</returns>
      <param name="value">8 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToChar(System.Char)">
      <summary>傳回指定的 Unicode 字元值；不會執行實際的轉換。</summary>
      <returns>傳回未變更的 <paramref name="value" /> 參數。</returns>
      <param name="value">Unicode 字元。</param>
    </member>
    <member name="M:System.Convert.ToChar(System.Decimal)">
      <summary>呼叫此方法永遠會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 數字。</param>
      <exception cref="T:System.InvalidCastException">不支援此轉換。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Double)">
      <summary>呼叫此方法永遠會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="value">雙精確度浮點數。</param>
      <exception cref="T:System.InvalidCastException">不支援此轉換。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int16)">
      <summary>將指定的 16 位元帶正負號的整數值，轉換為其相等的 Unicode 字元。</summary>
      <returns>等於 <paramref name="value" /> 值的 Unicode 字元。</returns>
      <param name="value">16 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Char.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數值，轉換為其相等的 Unicode 字元。</summary>
      <returns>等於 <paramref name="value" /> 值的 Unicode 字元。</returns>
      <param name="value">32 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Char.MinValue" /> 或大於 <see cref="F:System.Char.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Int64)">
      <summary>將指定的 64 位元帶正負號的整數值，轉換為其相等的 Unicode 字元。</summary>
      <returns>等於 <paramref name="value" /> 值的 Unicode 字元。</returns>
      <param name="value">64 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Char.MinValue" /> 或大於 <see cref="F:System.Char.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object)">
      <summary>將指定的 <see cref="T:System.Object" /> 的值轉換為 Unicode 字元。</summary>
      <returns>等於 <paramref name="value" /> 值的 Unicode 字元。-或-如果 <paramref name="value" /> 等於 null 則為 <see cref="F:System.Char.MinValue" />。</returns>
      <param name="value">
        <see cref="T:System.Object" />，實作 <see cref="T:System.IConvertible" /> 介面。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" /> 介面。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Object,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將指定的 <see cref="T:System.Object" /> 的值轉換為它的相等 Unicode 字元。</summary>
      <returns>等於 <paramref name="value" /> 值的 Unicode 字元。-或-如果 <paramref name="value" /> 等於 null 則為 <see cref="F:System.Char.MinValue" />。</returns>
      <param name="value">
        <see cref="T:System.Object" />，實作 <see cref="T:System.IConvertible" /> 介面。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" /> 介面。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.SByte)">
      <summary>將指定的 8 位元帶正負號的整數值，轉換為其相等的 Unicode 字元。</summary>
      <returns>等於 <paramref name="value" /> 值的 Unicode 字元。</returns>
      <param name="value">8 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Char.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.Single)">
      <summary>呼叫此方法永遠會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="value">單精確度浮點數。</param>
      <exception cref="T:System.InvalidCastException">不支援此轉換。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String)">
      <summary>將 <see cref="T:System.String" /> 的第 1 個字元轉換為 Unicode 字元。</summary>
      <returns>Unicode 字元，等於 <paramref name="value" /> 中的第 1 個且唯一的字元。</returns>
      <param name="value">長度為 1 的 <see cref="T:System.String" /> 或 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的長度不為 1。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將 <see cref="T:System.String" /> 的第 1 個字元轉換為 Unicode 字元。</summary>
      <returns>Unicode 字元，等於 <paramref name="value" /> 中的第 1 個且唯一的字元。</returns>
      <param name="value">長度為 1 的 <see cref="T:System.String" /> 或 null。</param>
      <param name="provider">(保留字) <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 的長度不為 1。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號整數的值，轉換為它的相等 Unicode 字元。</summary>
      <returns>等於 <paramref name="value" /> 值的 Unicode 字元。</returns>
      <param name="value">16 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為它的相等 Unicode 字元。</summary>
      <returns>等於 <paramref name="value" /> 值的 Unicode 字元。</returns>
      <param name="value">32 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Char.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToChar(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為它的相等 Unicode 字元。</summary>
      <returns>等於 <paramref name="value" /> 值的 Unicode 字元。</returns>
      <param name="value">64 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Char.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object)">
      <summary>將指定的 <see cref="T:System.Object" /> 的值轉換為 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，與 <paramref name="value" /> 的值相等。-或-如果 <paramref name="value" /> 是 null，則為等於 <see cref="F:System.DateTime.MinValue" /> 的 <see cref="T:System.DateTime" />。</returns>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的 <see cref="T:System.Object" /> 或 null。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效的 <see cref="T:System.DateTime" /> 值。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" />。-或-不支援這個轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.Object,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將指定的 <see cref="T:System.Object" /> 的值轉換為 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，與 <paramref name="value" /> 的值相等。-或-如果 <paramref name="value" /> 是 null，則為等於 <see cref="F:System.DateTime.MinValue" /> 的 <see cref="T:System.DateTime" />。</returns>
      <param name="value">
        <see cref="T:System.Object" />，實作 <see cref="T:System.IConvertible" /> 介面。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" />。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String)">
      <summary>將日期和時間的指定 <see cref="T:System.String" /> 表示，轉換為相等的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，與 <paramref name="value" /> 的值相等。-或-如果 <paramref name="value" /> 是 null，則為等於 <see cref="F:System.DateTime.MinValue" /> 的 <see cref="T:System.DateTime" />。</returns>
      <param name="value">日期和時間的字串表示。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是正確的日期和時間字串格式。</exception>
    </member>
    <member name="M:System.Convert.ToDateTime(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，與 <paramref name="value" /> 的值相等。-或-如果 <paramref name="value" /> 是 null，則為等於 <see cref="F:System.DateTime.MinValue" /> 的 <see cref="T:System.DateTime" />。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的日期和時間。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是正確的日期和時間字串格式。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Boolean)">
      <summary>將指定的布林值轉換為相等的 <see cref="T:System.Decimal" /> 數字。</summary>
      <returns>如果 <paramref name="value" /> 為 true，則為數字 1，否則為 0。</returns>
      <param name="value">布林值。</param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Byte)">
      <summary>將指定的 8 位元不帶正負號整數的值，轉換為相等的 <see cref="T:System.Decimal" /> 數字。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，與 <paramref name="value" /> 的值相等。</returns>
      <param name="value">8 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Char)">
      <summary>呼叫此方法永遠會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="value">Unicode 字元。</param>
      <exception cref="T:System.InvalidCastException">不支援此轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.DateTime)">
      <summary>呼叫此方法永遠會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="value">
        <see cref="T:System.DateTime" />。</param>
      <exception cref="T:System.InvalidCastException">不支援此轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Decimal)">
      <summary>傳回指定的 <see cref="T:System.Decimal" /> 數字；不會執行實際的轉換。</summary>
      <returns>傳回未變更的 <paramref name="value" /> 參數。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 數字。</param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Double)">
      <summary>將指定的雙精確度浮點數值，轉換為相等的 <see cref="T:System.Decimal" /> 數字。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，與 <paramref name="value" /> 的值相等。</returns>
      <param name="value">雙精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 的數值大於 <see cref="F:System.Decimal.MaxValue" /> 或小於 <see cref="F:System.Decimal.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int16)">
      <summary>將指定的 16 位元帶正負號整數的值，轉換為相等的 <see cref="T:System.Decimal" /> 數字。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，與 <paramref name="value" /> 的值相等。</returns>
      <param name="value">16 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int32)">
      <summary>將指定的 32 位元帶正負號整數的值，轉換為相等的 <see cref="T:System.Decimal" /> 數字。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，與 <paramref name="value" /> 的值相等。</returns>
      <param name="value">32 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Int64)">
      <summary>將指定的 64 位元帶正負號整數的值，轉換為相等的 <see cref="T:System.Decimal" /> 數字。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，與 <paramref name="value" /> 的值相等。</returns>
      <param name="value">64 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object)">
      <summary>將指定的 <see cref="T:System.Object" /> 的值轉換為 <see cref="T:System.Decimal" /> 數字。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.Decimal" /> 數字；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的 <see cref="T:System.Object" /> 或 null。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" />。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Object,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將指定的 <see cref="T:System.Object" /> 的值轉換為 <see cref="T:System.Decimal" /> 數字。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.Decimal" /> 數字；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.Object" />，實作 <see cref="T:System.IConvertible" /> 介面。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" />。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.SByte)">
      <summary>將指定的 8 位元帶正負號整數的值，轉換為相等的 <see cref="T:System.Decimal" /> 數字。</summary>
      <returns>8 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">8 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.Single)">
      <summary>將指定的單精確度浮點數值轉換為相等的 <see cref="T:System.Decimal" /> 數字。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，與 <paramref name="value" /> 的值相等。</returns>
      <param name="value">單精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Decimal.MaxValue" /> 或小於 <see cref="F:System.Decimal.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String)">
      <summary>將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的 <see cref="T:System.Decimal" /> 數字。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，與 <paramref name="value" /> 的值相等。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效格式的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的 <see cref="T:System.Decimal" /> 數字。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，與 <paramref name="value" /> 的值相等。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效格式的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號整數的值，轉換為相等的 <see cref="T:System.Decimal" /> 數字。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，與 <paramref name="value" /> 的值相等。</returns>
      <param name="value">16 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為相等的 <see cref="T:System.Decimal" /> 數字。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，與 <paramref name="value" /> 的值相等。</returns>
      <param name="value">32 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToDecimal(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為相等的 <see cref="T:System.Decimal" /> 數字。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，與 <paramref name="value" /> 的值相等。</returns>
      <param name="value">64 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Boolean)">
      <summary>將指定的布林值轉換為相等的雙精確度浮點數。</summary>
      <returns>如果 <paramref name="value" /> 為 true，則為數字 1，否則為 0。</returns>
      <param name="value">布林值。</param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Byte)">
      <summary>將指定的 8 位元不帶正負號整數的值，轉換為相等的雙精確度浮點數。</summary>
      <returns>等於 <paramref name="value" /> 值的雙精確度浮點數。</returns>
      <param name="value">8 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Char)">
      <summary>呼叫此方法永遠會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="value">Unicode 字元。</param>
      <exception cref="T:System.InvalidCastException">不支援此轉換。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 數字的值轉換為相等的雙精確度浮點數。</summary>
      <returns>等於 <paramref name="value" /> 值的雙精確度浮點數。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 數字。</param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Double)">
      <summary>傳回指定的雙精確度浮點數；不會執行實際的轉換。</summary>
      <returns>傳回未變更的 <paramref name="value" /> 參數。</returns>
      <param name="value">雙精確度浮點數。</param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int16)">
      <summary>將指定的 16 位元帶正負號整數的值，轉換為相等的雙精確度浮點數。</summary>
      <returns>等於 <paramref name="value" /> 值的雙精確度浮點數。</returns>
      <param name="value">16 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int32)">
      <summary>將指定的 32 位元帶正負號整數的值，轉換為相等的雙精確度浮點數。</summary>
      <returns>等於 <paramref name="value" /> 值的雙精確度浮點數。</returns>
      <param name="value">32 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Int64)">
      <summary>將指定的 64 位元帶正負號整數的值，轉換為相等的雙精確度浮點數。</summary>
      <returns>等於 <paramref name="value" /> 值的雙精確度浮點數。</returns>
      <param name="value">64 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object)">
      <summary>將指定的 <see cref="T:System.Object" /> 的值轉換為雙精確度浮點數。</summary>
      <returns>等於 <paramref name="value" /> 值的雙精確度浮點數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的 <see cref="T:System.Object" /> 或 null。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" />。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.Object,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將指定的 <see cref="T:System.Object" /> 的值轉換為雙精確度浮點數。</summary>
      <returns>等於 <paramref name="value" /> 值的雙精確度浮點數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.Object" />，實作 <see cref="T:System.IConvertible" /> 介面。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" />。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.SByte)">
      <summary>將指定的 8 位元帶正負號整數的值，轉換為相等的雙精確度浮點數。</summary>
      <returns>8 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">8 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToDouble(System.Single)">
      <summary>將指定的單精確度浮點數值，轉換為相等的雙精確度浮點數。</summary>
      <returns>等於 <paramref name="value" /> 值的雙精確度浮點數。</returns>
      <param name="value">單精確度浮點數。</param>
    </member>
    <member name="M:System.Convert.ToDouble(System.String)">
      <summary>將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的雙精確度浮點數。</summary>
      <returns>等於 <paramref name="value" /> 值的雙精確度浮點數。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效格式的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的雙精確度浮點數。</summary>
      <returns>等於 <paramref name="value" /> 值的雙精確度浮點數。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效格式的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號整數的值，轉換為相等的雙精確度浮點數。</summary>
      <returns>等於 <paramref name="value" /> 值的雙精確度浮點數。</returns>
      <param name="value">16 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為相等的雙精確度浮點數。</summary>
      <returns>等於 <paramref name="value" /> 值的雙精確度浮點數。</returns>
      <param name="value">32 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToDouble(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為相等的雙精確度浮點數。</summary>
      <returns>等於 <paramref name="value" /> 值的雙精確度浮點數。</returns>
      <param name="value">64 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Boolean)">
      <summary>將指定的布林值轉換為相等的 16 位元帶正負號的整數。</summary>
      <returns>如果 <paramref name="value" /> 為 true，則為數字 1，否則為 0。</returns>
      <param name="value">布林值。</param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Byte)">
      <summary>將指定的 8 位元不帶正負號的整數值，轉換為相等的 16 位元帶正負號的整數。</summary>
      <returns>16 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">8 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Char)">
      <summary>將指定的 Unicode 字元值轉換為相等的 16 位元帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 的 16 位元帶正負號的整數。</returns>
      <param name="value">Unicode 字元。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 數字的值轉換為相等的 16 位元帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 16 位元帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int16.MaxValue" /> 或小於 <see cref="F:System.Int16.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Double)">
      <summary>將指定的雙精確度浮點數值，轉換為相等的 16 位元帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 16 位元帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">雙精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int16.MaxValue" /> 或小於 <see cref="F:System.Int16.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int16)">
      <summary>傳回指定的 16 位元帶正負號的整數；不會執行實際的轉換。</summary>
      <returns>傳回未變更的 <paramref name="value" /> 參數。</returns>
      <param name="value">16 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數值，轉換為相等的 16 位元帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 的 16 位元帶正負號的整數。</returns>
      <param name="value">32 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int16.MaxValue" /> 或小於 <see cref="F:System.Int16.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Int64)">
      <summary>將指定的 64 位元帶正負號的整數值，轉換為相等的 16 位元帶正負號的整數。</summary>
      <returns>16 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">64 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int16.MaxValue" /> 或小於 <see cref="F:System.Int16.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object)">
      <summary>將指定的 <see cref="T:System.Object" /> 值轉換為 16 位元帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 值的 16 位元帶正負號的整數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的 <see cref="T:System.Object" /> 或 null。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.Object,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將指定的 <see cref="T:System.Object" /> 的值轉換為 16 位元帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 值的 16 位元帶正負號的整數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.Object" />，實作 <see cref="T:System.IConvertible" /> 介面。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.SByte)">
      <summary>將指定的 8 位元帶正負號整數的值，轉換為相等的 16 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">8 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToInt16(System.Single)">
      <summary>將指定的單精確度浮點數值，轉換為相等的 16 位元帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 16 位元帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">單精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int16.MaxValue" /> 或小於 <see cref="F:System.Int16.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String)">
      <summary>將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的 16 位元帶正負號的整數。</summary>
      <returns>16 位元帶正負號的整數，等於 <paramref name="value" /> 的值。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由選擇性的正負號之後跟隨一連串數字 (0 到 9) 所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的 16 位元帶正負號的整數。</summary>
      <returns>16 位元帶正負號的整數，等於 <paramref name="value" /> 的值。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由選擇性的正負號之後跟隨一連串數字 (0 到 9) 所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.String,System.Int32)">
      <summary>將指定基底中數字的字串表示，轉換為相等的 16 位元帶正負號的整數。</summary>
      <returns>16 位元帶正負號的整數，等於包含在 <paramref name="value" /> 中的數字。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">包含數字的字串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中數字的基底，必須是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。-或-<paramref name="value" />，表示非基底 10 的帶正負號的數字有前置一個負號。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含的字元，對於 <paramref name="fromBase" /> 指定的基底而言是無效的數字。如果 <paramref name="value" /> 中的第一個字元無效，則例外狀況訊息會指出無數字可進行轉換，否則訊息會指出 <paramref name="value" /> 包含無效的尾端字元。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />，表示非基底 10 的帶正負號的數字有前置一個負號。-或-傳回值小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號的整數值，轉換為相等的 16 位元帶正負號的整數。</summary>
      <returns>16 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">16 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為相等的 16 位元帶正負號整數。</summary>
      <returns>16 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">32 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt16(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為相等的 16 位元帶正負號整數。</summary>
      <returns>16 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">64 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Boolean)">
      <summary>將指定的布林值轉換為相等的 32 位元帶正負號的整數。</summary>
      <returns>如果 <paramref name="value" /> 為 true，則為數字 1，否則為 0。</returns>
      <param name="value">布林值。</param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Byte)">
      <summary>將指定的 8 位元不帶正負號的整數值，轉換為相等的 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">8 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Char)">
      <summary>將指定的 Unicode 字元值轉換為相等的 32 位元帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 的 32 位元帶正負號的整數。</returns>
      <param name="value">Unicode 字元。</param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 數字的值轉換為相等的 32 位元帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 32 位元帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int32.MaxValue" /> 或小於 <see cref="F:System.Int32.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Double)">
      <summary>將指定的雙精確度浮點數值，轉換為相等的 32 位元帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 32 位元帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">雙精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int32.MaxValue" /> 或小於 <see cref="F:System.Int32.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int16)">
      <summary>將指定之 16 位元帶正負號的整數值，轉換為相等的 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">16 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int32)">
      <summary>傳回指定的 32 位元帶正負號的整數；不會執行實際的轉換。</summary>
      <returns>傳回未變更的 <paramref name="value" /> 參數。</returns>
      <param name="value">32 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Int64)">
      <summary>將指定之 64 位元帶正負號的整數值，轉換為相等的 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">64 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int32.MaxValue" /> 或小於 <see cref="F:System.Int32.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object)">
      <summary>將指定的 <see cref="T:System.Object" /> 值轉換為 32 位元帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 值的 32 位元帶正負號的整數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的 <see cref="T:System.Object" /> 或 null。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.Object,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將指定的 <see cref="T:System.Object" /> 的值轉換為 32 位元帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 值的 32 位元帶正負號的整數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.Object" />，實作 <see cref="T:System.IConvertible" /> 介面。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.SByte)">
      <summary>將指定的 8 位元帶正負號整數的值，轉換為相等的 32 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">8 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToInt32(System.Single)">
      <summary>將指定的單精確度浮點數值，轉換為相等的 32 位元帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 32 位元帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">單精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int32.MaxValue" /> 或小於 <see cref="F:System.Int32.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String)">
      <summary>將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，等於 <paramref name="value" /> 的值。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由選擇性的正負號之後跟隨一連串數字 (0 到 9) 所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，等於 <paramref name="value" /> 的值。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由選擇性的正負號之後跟隨一連串數字 (0 到 9) 所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.String,System.Int32)">
      <summary>將指定基底中數字的 <see cref="T:System.String" /> 表示，轉換為相等的 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，等於包含在 <paramref name="value" /> 中的數字。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">含有數字的 <see cref="T:System.String" />。</param>
      <param name="fromBase">
        <paramref name="value" /> 中數字的基底，必須是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。-或-<paramref name="value" />，表示非基底 10 的帶正負號的數字有前置一個負號。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含的字元，對於 <paramref name="fromBase" /> 指定的基底而言是無效的數字。如果 <paramref name="value" /> 中的第一個字元無效，則例外狀況訊息會指出無數字可進行轉換，否則訊息會指出 <paramref name="value" /> 包含無效的尾端字元。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />，表示非基底 10 的帶正負號的數字有前置一個負號。-或-傳回值小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號的整數值，轉換為相等的 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">16 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為相等的 32 位元帶正負號整數。</summary>
      <returns>32 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">32 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt32(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為相等的 32 位元帶正負號整數。</summary>
      <returns>32 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">64 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Boolean)">
      <summary>將指定的布林值轉換為相等的 64 位元帶正負號的整數。</summary>
      <returns>如果 <paramref name="value" /> 為 true，則為數字 1，否則為 0。</returns>
      <param name="value">布林值。</param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Byte)">
      <summary>將指定的 8 位元不帶正負號的整數值，轉換為相等的 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">8 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Char)">
      <summary>將指定的 Unicode 字元值轉換為相等的 64 位元帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 的 64 位元帶正負號的整數。</returns>
      <param name="value">Unicode 字元。</param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 數字的值轉換為相等的 64 位元帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 64 位元帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int64.MaxValue" /> 或小於 <see cref="F:System.Int64.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Double)">
      <summary>將指定的雙精確度浮點數值，轉換為相等的 64 位元帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 64 位元帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">雙精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int64.MaxValue" /> 或小於 <see cref="F:System.Int64.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int16)">
      <summary>將指定之 16 位元帶正負號的整數值，轉換為相等的 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">16 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數值，轉換為相等的 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">32 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Int64)">
      <summary>傳回指定的 64 位元帶正負號的整數；不會執行實際的轉換。</summary>
      <returns>傳回未變更的 <paramref name="value" /> 參數。</returns>
      <param name="value">64 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object)">
      <summary>將指定的 <see cref="T:System.Object" /> 值轉換為 64 位元帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 值的 64 位元帶正負號的整數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的 <see cref="T:System.Object" /> 或 null。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.Object,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將指定的 <see cref="T:System.Object" /> 的值轉換為 64 位元帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 值的 64 位元帶正負號的整數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.Object" />，實作 <see cref="T:System.IConvertible" /> 介面。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.SByte)">
      <summary>將指定的 8 位元帶正負號整數的值，轉換為相等的 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">8 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToInt64(System.Single)">
      <summary>將指定的單精確度浮點數值，轉換為相等的 64 位元帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 64 位元帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">單精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int64.MaxValue" /> 或小於 <see cref="F:System.Int64.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String)">
      <summary>將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，等於 <paramref name="value" /> 的值。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由選擇性的正負號之後跟隨一連串數字 (0 到 9) 所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，等於 <paramref name="value" /> 的值。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由選擇性的正負號之後跟隨一連串數字 (0 到 9) 所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.String,System.Int32)">
      <summary>將指定基底中數字的字串表示，轉換為相等的 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，等於包含在 <paramref name="value" /> 中的數字。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">包含數字的字串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中數字的基底，必須是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。-或-<paramref name="value" />，表示非基底 10 的帶正負號的數字有前置一個負號。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含的字元，對於 <paramref name="fromBase" /> 指定的基底而言是無效的數字。如果 <paramref name="value" /> 中的第一個字元無效，則例外狀況訊息會指出無數字可進行轉換，否則訊息會指出 <paramref name="value" /> 包含無效的尾端字元。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />，表示非基底 10 的帶正負號的數字有前置一個負號。-或-傳回值小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號的整數值，轉換為相等的 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">16 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為相等的 64 位元帶正負號整數。</summary>
      <returns>64 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">32 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToInt64(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為相等的 64 位元帶正負號整數。</summary>
      <returns>64 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">64 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Boolean)">
      <summary>將指定的布林值轉換為相等的 8 位元帶正負號的整數。</summary>
      <returns>如果 <paramref name="value" /> 為 true，則為數字 1，否則為 0。</returns>
      <param name="value">布林值。</param>
    </member>
    <member name="M:System.Convert.ToSByte(System.Byte)">
      <summary>將指定的 8 位元不帶正負號的整數值，轉換為相等的 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">8 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Char)">
      <summary>將指定的 Unicode 字元值轉換為相等的 8 位元帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 的 8 位元帶正負號的整數。</returns>
      <param name="value">Unicode 字元。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 數字的值轉換為相等的 8 位元帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 8 位元帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" /> 或小於 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Double)">
      <summary>將指定的雙精確度浮點數值，轉換為相等的 8 位元帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 8 位元帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">雙精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" /> 或小於 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int16)">
      <summary>將指定的 16 位元帶正負號整數的值，轉換為相等的 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">16 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" /> 或小於 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數值，轉換為相等的 8 位元帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 的 8 位元帶正負號的整數。</returns>
      <param name="value">32 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" /> 或小於 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Int64)">
      <summary>將指定的 64 位元帶正負號的整數值，轉換為相等的 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">64 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" /> 或小於 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object)">
      <summary>將指定的 <see cref="T:System.Object" /> 的值轉換為 8 位元帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 值的 8 位元帶正負號的整數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的 <see cref="T:System.Object" /> 或 null。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.Object,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將指定的 <see cref="T:System.Object" /> 的值轉換為 8 位元帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 值的 8 位元帶正負號的整數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.Object" />，實作 <see cref="T:System.IConvertible" /> 介面。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Convert.ToSByte(System.SByte)">
      <summary>傳回指定的 8 位元帶正負號的整數；不會執行實際的轉換。</summary>
      <returns>傳回未變更的 <paramref name="value" /> 參數。</returns>
      <param name="value">8 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToSByte(System.Single)">
      <summary>將指定的單精確度浮點數值，轉換為相等的 8 位元帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 8 位元帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">單精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" /> 或小於 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String)">
      <summary>將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，等於 <paramref name="value" /> 的值。-或-如果值是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由選擇性的正負號之後跟隨一連串數字 (0 到 9) 所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由選擇性的正負號之後跟隨一連串數字 (0 到 9) 所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.String,System.Int32)">
      <summary>將指定基底中數字的字串表示，轉換為相等的 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，等於包含在 <paramref name="value" /> 中的數字。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">包含數字的字串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中數字的基底，必須是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。-或-<paramref name="value" />，表示非基底 10 的帶正負號的數字有前置一個負號。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含的字元，對於 <paramref name="fromBase" /> 指定的基底而言是無效的數字。如果 <paramref name="value" /> 中的第一個字元無效，則例外狀況訊息會指出無數字可進行轉換，否則訊息會指出 <paramref name="value" /> 包含無效的尾端字元。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />，表示非基底 10 的帶正負號的數字有前置一個負號。-或-傳回值小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號的整數值，轉換為相等的 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">16 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt32)">
      <summary>將指定之 32 位元不帶正負號的整數值，轉換為相等的 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">32 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" /> 或小於 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSByte(System.UInt64)">
      <summary>將指定之 64 位元不帶正負號的整數值，轉換為相等的 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">64 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.SByte.MaxValue" /> 或小於 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Boolean)">
      <summary>將指定的布林值轉換為相等的單精確度浮點數。</summary>
      <returns>如果 <paramref name="value" /> 為 true，則為數字 1，否則為 0。</returns>
      <param name="value">布林值。</param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Byte)">
      <summary>將指定的 8 位元不帶正負號整數的值，轉換為相等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">8 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Char)">
      <summary>呼叫此方法永遠會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="value">Unicode 字元。</param>
      <exception cref="T:System.InvalidCastException">不支援此轉換。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 數字的值轉換為相等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，等於 <paramref name="value" /> 的值。<paramref name="value" /> 會捨入為最接近的數字。例如，在捨入至兩個小數位數時，值 2.345 會變成 2.34，而值 2.355 會變成 2.36。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 數字。</param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Double)">
      <summary>將指定的雙精確度浮點數值，轉換為相等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，等於 <paramref name="value" /> 的值。<paramref name="value" /> 會捨入為最接近的數字。例如，在捨入至兩個小數位數時，值 2.345 會變成 2.34，而值 2.355 會變成 2.36。</returns>
      <param name="value">雙精確度浮點數。</param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int16)">
      <summary>將指定的 16 位元帶正負號整數的值，轉換為相等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">16 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int32)">
      <summary>將指定的 32 位元帶正負號整數的值，轉換為相等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">32 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Int64)">
      <summary>將指定的 64 位元帶正負號整數的值，轉換為相等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">64 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object)">
      <summary>將指定的 <see cref="T:System.Object" /> 的值轉換為單精確度浮點數。</summary>
      <returns>等於 <paramref name="value" /> 值的單精確度浮點數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的 <see cref="T:System.Object" /> 或 null。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" />。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.Object,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將指定的 <see cref="T:System.Object" /> 的值轉換為單精確度浮點數。</summary>
      <returns>等於 <paramref name="value" /> 值的單精確度浮點數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.Object" />，實作 <see cref="T:System.IConvertible" /> 介面。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" />。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.SByte)">
      <summary>將指定的 8 位元帶正負號整數的值，轉換為相等的單精確度浮點數。</summary>
      <returns>8 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">8 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToSingle(System.Single)">
      <summary>傳回指定的單精確度浮點數；不會執行實際的轉換。</summary>
      <returns>傳回未變更的 <paramref name="value" /> 參數。</returns>
      <param name="value">單精確度浮點數。</param>
    </member>
    <member name="M:System.Convert.ToSingle(System.String)">
      <summary>將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，等於 <paramref name="value" /> 的值。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效格式的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，等於 <paramref name="value" /> 的值。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效格式的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號整數的值，轉換為相等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">16 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為相等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">32 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToSingle(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為相等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">64 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean)">
      <summary>將指定的 Boolean 的值轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">布林值。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Boolean,System.IFormatProvider)">
      <summary>將指定的 Boolean 的值轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">布林值。</param>
      <param name="provider">(保留字) <see cref="T:System.IFormatProvider" /> 介面實作的執行個體。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Byte)">
      <summary>將指定的 8 位元不帶正負號整數的值，轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">8 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.IFormatProvider)">
      <summary>將指定的 8 位元不帶正負號整數的值，轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">8 位元不帶正負號的整數。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Byte,System.Int32)">
      <summary>將 8 位元不帶正負號整數的值，轉換為它在指定基底中的相等字串表示。</summary>
      <returns>在基底 <paramref name="toBase" /> 中 <paramref name="value" /> 的字串表示。</returns>
      <param name="value">8 位元不帶正負號的整數。</param>
      <param name="toBase">傳回值的基底，必須是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Char)">
      <summary>將指定 Unicode 字元的值轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">Unicode 字元。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Char,System.IFormatProvider)">
      <summary>將指定 Unicode 字元的值轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">Unicode 字元。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime)">
      <summary>將指定的 <see cref="T:System.DateTime" /> 的值轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">
        <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Convert.ToString(System.DateTime,System.IFormatProvider)">
      <summary>將指定的 <see cref="T:System.DateTime" /> 的值轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">
        <see cref="T:System.DateTime" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 數字的值轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 數字。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Decimal,System.IFormatProvider)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 數字的值轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 數字。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Double)">
      <summary>將指定的雙精確度浮點數值，轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">雙精確度浮點數。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Double,System.IFormatProvider)">
      <summary>將指定的雙精確度浮點數值，轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。<paramref name="provider" /> 會被忽略，它不參與這項作業。</returns>
      <param name="value">雙精確度浮點數。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Int16)">
      <summary>將指定的 16 位元帶正負號整數的值，轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">16 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.IFormatProvider)">
      <summary>將指定的 16 位元帶正負號整數的值，轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">16 位元帶正負號的整數。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Int16,System.Int32)">
      <summary>將 16 位元帶正負號整數的值，轉換為它在指定基底中的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>在基底 <paramref name="toBase" /> 中 <paramref name="value" /> 的 <see cref="T:System.String" /> 表示。</returns>
      <param name="value">16 位元帶正負號的整數。</param>
      <param name="toBase">傳回值的基底，必須是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int32)">
      <summary>將指定的 32 位元帶正負號整數的值，轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">32 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.IFormatProvider)">
      <summary>將指定的 32 位元帶正負號整數的值，轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">32 位元帶正負號的整數。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Int32,System.Int32)">
      <summary>將 32 位元帶正負號整數的值，轉換為它在指定基底中的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>在基底 <paramref name="toBase" /> 中 <paramref name="value" /> 的 <see cref="T:System.String" /> 表示。</returns>
      <param name="value">32 位元帶正負號的整數。</param>
      <param name="toBase">傳回值的基底，必須是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Int64)">
      <summary>將指定的 64 位元帶正負號整數的值，轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">64 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.IFormatProvider)">
      <summary>將指定的 64 位元帶正負號整數的值，轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">64 位元帶正負號的整數。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Int64,System.Int32)">
      <summary>將 64 位元帶正負號整數的值，轉換為它在指定基底中的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>在基底 <paramref name="toBase" /> 中 <paramref name="value" /> 的 <see cref="T:System.String" /> 表示。</returns>
      <param name="value">64 位元帶正負號的整數。</param>
      <param name="toBase">傳回值的基底，必須是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="toBase" /> 不是 2、8、10 或 16。</exception>
    </member>
    <member name="M:System.Convert.ToString(System.Object)">
      <summary>將指定的 <see cref="T:System.Object" /> 的值轉換為它的 <see cref="T:System.String" /> 表示。</summary>
      <returns>
        <paramref name="value" /> 值的 <see cref="T:System.String" /> 表示，如果值是 null 則為 <see cref="F:System.String.Empty" />。</returns>
      <param name="value">
        <see cref="T:System.Object" /> 或 null。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Object,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將指定的 <see cref="T:System.Object" /> 的值轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>
        <paramref name="value" /> 值的 <see cref="T:System.String" /> 表示，如果 <paramref name="value" /> 是 null 則為 <see cref="F:System.String.Empty" />。</returns>
      <param name="value">
        <see cref="T:System.Object" /> 或 null。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Convert.ToString(System.SByte)">
      <summary>將指定的 8 位元帶正負號整數的值，轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">8 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToString(System.SByte,System.IFormatProvider)">
      <summary>將指定的 8 位元帶正負號整數的值，轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">8 位元帶正負號的整數。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Single)">
      <summary>將指定的單精確度浮點數值轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">單精確度浮點數。</param>
    </member>
    <member name="M:System.Convert.ToString(System.Single,System.IFormatProvider)">
      <summary>將指定的單精確度浮點數值轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">單精確度浮點數。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號整數的值，轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">16 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt16,System.IFormatProvider)">
      <summary>將指定的 16 位元不帶正負號整數的值，轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">16 位元不帶正負號的整數。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">32 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt32,System.IFormatProvider)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">32 位元不帶正負號的整數。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">64 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToString(System.UInt64,System.IFormatProvider)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為它的相等 <see cref="T:System.String" /> 表示。</summary>
      <returns>等於 <paramref name="value" /> 值的 <see cref="T:System.String" />。</returns>
      <param name="value">64 位元不帶正負號的整數。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Boolean)">
      <summary>將指定的布林值轉換為相等的 16 位元不帶正負號的整數。</summary>
      <returns>如果 <paramref name="value" /> 為 true，則為數字 1，否則為 0。</returns>
      <param name="value">布林值。</param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Byte)">
      <summary>將指定之 8 位元不帶正負號的整數值，轉換為相等的 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">8 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Char)">
      <summary>將指定的 Unicode 字元值轉換為相等的 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，等於 <paramref name="value" />。</returns>
      <param name="value">Unicode 字元。</param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 數字的值轉換為相等的 16 位元不帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 16 位元不帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Double)">
      <summary>將指定的雙精確度浮點數值轉換為相等的 16 位元不帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 16 位元不帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">雙精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int16)">
      <summary>將指定之 16 位元帶正負號的整數值，轉換為相等的 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">16 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數值，轉換為相等的 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，等於 <paramref name="value" />。</returns>
      <param name="value">32 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Int64)">
      <summary>將指定的 64 位元帶正負號的整數值，轉換為相等的 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">64 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object)">
      <summary>將指定的 <see cref="T:System.Object" /> 值轉換為 16 位元不帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 值的 16 位元不帶正負號的整數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的 <see cref="T:System.Object" /> 或 null。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Object,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將指定的 <see cref="T:System.Object" /> 的值轉換為 16 位元不帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 值的 16 位元不帶正負號的整數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.Object" />，實作 <see cref="T:System.IConvertible" /> 介面。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.SByte)">
      <summary>將指定的 8 位元帶正負號整數的值，轉換為相等的 16 位元不帶正負號整數。</summary>
      <returns>16 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">8 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.Single)">
      <summary>將指定的單精確度浮點數值，轉換為相等的 16 位元不帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 16 位元不帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">單精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String)">
      <summary>將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由選擇性的正負號之後跟隨一連串數字 (0 到 9) 所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將數字的指定 <see cref="T:System.String" /> 表示轉換為 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由選擇性的正負號之後跟隨一連串數字 (0 到 9) 所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.String,System.Int32)">
      <summary>將指定基底中數字的字串表示，轉換為相等的 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，與 <paramref name="value" /> 中的數字相等。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">包含數字的字串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中數字的基底，必須是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。-或-<paramref name="value" />，表示非基底 10 的不帶正負號的數字有前置一個負號。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含的字元，對於 <paramref name="fromBase" /> 指定的基底而言是無效的數字。如果 <paramref name="value" /> 中的第一個字元無效，則例外狀況訊息會指出無數字可進行轉換，否則訊息會指出 <paramref name="value" /> 包含無效的尾端字元。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />，表示非基底 10 的不帶正負號的數字有前置一個負號。-或-傳回值小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt16)">
      <summary>傳回指定的 16 位元不帶正負號整數；不會執行實際的轉換。</summary>
      <returns>傳回未變更的 <paramref name="value" /> 參數。</returns>
      <param name="value">16 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt32)">
      <summary>將指定之 32 位元不帶正負號的整數值，轉換為相等的 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">32 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt16(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為相等的 16 位元不帶正負號整數。</summary>
      <returns>16 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">64 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Boolean)">
      <summary>將指定的布林值轉換為相等的 32 位元不帶正負號的整數。</summary>
      <returns>如果 <paramref name="value" /> 為 true，則為數字 1，否則為 0。</returns>
      <param name="value">布林值。</param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Byte)">
      <summary>將指定的 8 位元不帶正負號整數的值，轉換為相等的 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">8 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Char)">
      <summary>將指定的 Unicode 字元值轉換為相等的 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，等於 <paramref name="value" />。</returns>
      <param name="value">Unicode 字元。</param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 數字的值轉換為相等的 32 位元不帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 32 位元不帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Double)">
      <summary>將指定的雙精確度浮點數值轉換為相等的 32 位元不帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 32 位元不帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">雙精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int16)">
      <summary>將指定的 16 位元帶正負號整數的值，轉換為相等的 32 位元不帶正負號整數。</summary>
      <returns>32 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">16 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數值，轉換為相等的 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，等於 <paramref name="value" />。</returns>
      <param name="value">32 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Int64)">
      <summary>將指定的 64 位元帶正負號的整數值轉換為相等的 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">64 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object)">
      <summary>將指定的 <see cref="T:System.Object" /> 值轉換為 32 位元不帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 值的 32 位元不帶正負號的整數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的 <see cref="T:System.Object" /> 或 null。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Object,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將指定的 <see cref="T:System.Object" /> 的值轉換為 32 位元不帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 值的 32 位元不帶正負號的整數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.Object" />，實作 <see cref="T:System.IConvertible" /> 介面。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.SByte)">
      <summary>將指定的 8 位元帶正負號的整數值，轉換為相等的 32 位元不帶正負號的整數。</summary>
      <returns>8 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">8 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.Single)">
      <summary>將指定的單精確度浮點數值，轉換為相等的 32 位元不帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 32 位元不帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">單精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String)">
      <summary>將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由選擇性的正負號之後跟隨一連串數字 (0 到 9) 所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由選擇性的正負號之後跟隨一連串數字 (0 到 9) 所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.String,System.Int32)">
      <summary>將指定基底中數字的字串表示，轉換為相等的 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，與 <paramref name="value" /> 中的數字相等。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">包含數字的字串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中數字的基底，必須是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。-或-<paramref name="value" />，表示非基底 10 的不帶正負號的數字有前置一個負號。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含的字元，對於 <paramref name="fromBase" /> 指定的基底而言是無效的數字。如果 <paramref name="value" /> 中的第一個字元無效，則例外狀況訊息會指出無數字可進行轉換，否則訊息會指出 <paramref name="value" /> 包含無效的尾端字元。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />，表示非基底 10 的不帶正負號的數字有前置一個負號。-或-傳回值小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號整數的值，轉換為相等的 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">16 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt32)">
      <summary>傳回指定的 32 位元不帶正負號整數；不會執行實際的轉換。</summary>
      <returns>傳回未變更的 <paramref name="value" /> 參數。</returns>
      <param name="value">32 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToUInt32(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號整數的值，轉換為相等的 32 位元不帶正負號整數。</summary>
      <returns>32 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">64 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Boolean)">
      <summary>將指定的布林值轉換為相等的 64 位元不帶正負號的整數。</summary>
      <returns>如果 <paramref name="value" /> 為 true，則為數字 1，否則為 0。</returns>
      <param name="value">布林值。</param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Byte)">
      <summary>將指定的 8 位元不帶正負號整數的值，轉換為相等的 64 位元不帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">8 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Char)">
      <summary>將指定的 Unicode 字元值轉換為相等的 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，等於 <paramref name="value" />。</returns>
      <param name="value">Unicode 字元。</param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 數字的值轉換為相等的 64 位元不帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 64 位元不帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Double)">
      <summary>將指定的雙精確度浮點數值轉換為相等的 64 位元不帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 64 位元不帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">雙精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int16)">
      <summary>將指定的 16 位元帶正負號整數的值，轉換為相等的 64 位元不帶正負號整數。</summary>
      <returns>64 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">16 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數值，轉換為相等的 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，等於 <paramref name="value" />。</returns>
      <param name="value">32 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Int64)">
      <summary>將指定的 64 位元帶正負號的整數值，轉換為相等的 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">64 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object)">
      <summary>將指定的 <see cref="T:System.Object" /> 值轉換為 64 位元不帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 值的 64 位元不帶正負號的整數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">實作 <see cref="T:System.IConvertible" /> 介面的 <see cref="T:System.Object" /> 或 null。</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不會實作 <see cref="T:System.IConvertible" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Object,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將指定的 <see cref="T:System.Object" /> 的值轉換為 64 位元不帶正負號的整數。</summary>
      <returns>等於 <paramref name="value" /> 值的 64 位元不帶正負號的整數；如果 <paramref name="value" /> 為 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.Object" />，實作 <see cref="T:System.IConvertible" /> 介面。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.SByte)">
      <summary>將指定的 8 位元帶正負號的整數值，轉換為相等的 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">8 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.Single)">
      <summary>將指定的單精確度浮點數值，轉換為相等的 64 位元不帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> ，捨入至最接近的 64 位元不帶正負號的整數。如果 <paramref name="value" /> 介於兩個整數正中間，則傳回偶數；也就是 4.5 轉換為 4，而 5.5 則轉換為 6。</returns>
      <param name="value">單精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於零或大於 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String)">
      <summary>將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的 64 位元不帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，等於 <paramref name="value" /> 的值。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由選擇性的正負號之後跟隨一連串數字 (0 到 9) 所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將數字的指定 <see cref="T:System.String" /> 表示轉換為相等的 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">
        <see cref="T:System.String" />，含有要轉換的數字。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是由選擇性的正負號之後跟隨一連串數字 (0 到 9) 所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 表示小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.String,System.Int32)">
      <summary>將指定基底中數字的字串表示，轉換為相等的 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，與 <paramref name="value" /> 中的數字相等。-或-如果 <paramref name="value" /> 是 null，則為零。</returns>
      <param name="value">包含數字的字串。</param>
      <param name="fromBase">
        <paramref name="value" /> 中數字的基底，必須是 2、8、10 或 16。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromBase" /> 不是 2、8、10 或 16。-或-<paramref name="value" />，表示非基底 10 的不帶正負號的數字有前置一個負號。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 包含的字元，對於 <paramref name="fromBase" /> 指定的基底而言是無效的數字。如果 <paramref name="value" /> 中的第一個字元無效，則例外狀況訊息會指出無數字可進行轉換，否則訊息會指出 <paramref name="value" /> 包含無效的尾端字元。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" />，表示非基底 10 的不帶正負號的數字有前置一個負號。-或-傳回值小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號整數的值，轉換為相等的 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">16 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號整數的值，轉換為相等的 64 位元不帶正負號整數。</summary>
      <returns>64 位元不帶正負號的整數，等於 <paramref name="value" />。</returns>
      <param name="value">32 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Convert.ToUInt64(System.UInt64)">
      <summary>傳回指定的 64 位元不帶正負號整數；不會執行實際的轉換。</summary>
      <returns>傳回未變更的 <paramref name="value" /> 參數。</returns>
      <param name="value">64 位元不帶正負號的整數。</param>
    </member>
    <member name="T:System.Converter`2">
      <summary>表示將物件從某個型別轉換成另一個型別的方法。</summary>
      <returns>
        <paramref name="TOutput" />，表示轉換的 <paramref name="TInput" />。.NET Framework for Windows Phone 類別庫 (Class Library) 中沒有任何方法具有做為參數的 <see cref="T:System.Converter`2" /> 委派。<see cref="T:System.Converter`2" /> 委派存在的主要目的是為了支援基礎結構，但是您還是可以利用它來建立使用轉換子的自訂方法。</returns>
      <param name="input">要進行轉換的物件。</param>
      <typeparam name="TInput">要轉換的成員型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="TOutput">輸入物件要轉換成的型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.DataMisalignedException">
      <summary>從位址讀取資料單元，或將資料單元寫入位址時，若資料單元不是資料大小的倍數，就會擲回例外狀況 (Exception)。無法繼承此類別。</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor">
      <summary>初始化 <see cref="T:System.DataMisalignedException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.DataMisalignedException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" /> 物件。<paramref name="message" /> 的內容必須能讓人了解。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和基礎例外狀況來初始化 <see cref="T:System.DataMisalignedException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" /> 物件。<paramref name="message" /> 的內容必須能讓人了解。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
      <param name="innerException">導致目前 <see cref="T:System.DataMisalignedException" /> 的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.DateTime">
      <summary>表示時間的瞬間，通常以一天的日期和時間表示。</summary>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定的年、月和日。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日期 (1 到 <paramref name="month" /> 中的天數)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1 或大於 9999。-或-<paramref name="month" /> 小於 1 或大於 12。-或-<paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。</exception>
      <exception cref="T:System.ArgumentException">指定的參數會判定為早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定之月曆的指定之年、月和日。</summary>
      <param name="year">年 (1 到 <paramref name="calendar" /> 中的年份)。</param>
      <param name="month">月份 (1 到 <paramref name="calendar" /> 中的月份數目)。</param>
      <param name="day">日期 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="calendar">用來解譯 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的曆法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在 <paramref name="calendar" /> 所支援的範圍中。-或-<paramref name="month" /> 小於 1 或大於 <paramref name="calendar" /> 的月份數目。-或-<paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。</exception>
      <exception cref="T:System.ArgumentException">指定的參數會判定為早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定的年、月、日、時、分和秒。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日期 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1 或大於 9999。-或-<paramref name="month" /> 小於 1 或大於 12。-或-<paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。-或-<paramref name="hour" /> 小於 0 或大於 23。-或-<paramref name="minute" /> 小於 0 或大於 59。-或-<paramref name="second" /> 小於 0 或大於 59。</exception>
      <exception cref="T:System.ArgumentException">指定的參數會判定為早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定之年、月、日、時、分、秒以及 Coordinated Universal Time (UTC) 或本地時間。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日期 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="kind">其中一個列舉值，指出 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" /> 和 <paramref name="second" /> 是指定本地時間或 Coordinated Universal Time (UTC)，還是兩者都不指定。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1 或大於 9999。-或-<paramref name="month" /> 小於 1 或大於 12。-或-<paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。-或-<paramref name="hour" /> 小於 0 或大於 23。-或-<paramref name="minute" /> 小於 0 或大於 59。-或-<paramref name="second" /> 小於 0 或大於 59。</exception>
      <exception cref="T:System.ArgumentException">指定的日期和時間參數會判定為早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。-或-<paramref name="kind" /> 不是其中一個 <see cref="T:System.DateTimeKind" /> 值。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定之月曆的指定之年、月、日、時、分和秒。</summary>
      <param name="year">年 (1 到 <paramref name="calendar" /> 中的年份)。</param>
      <param name="month">月份 (1 到 <paramref name="calendar" /> 中的月份數目)。</param>
      <param name="day">日期 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="calendar">用來解譯 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的曆法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在 <paramref name="calendar" /> 所支援的範圍中。-或-<paramref name="month" /> 小於 1 或大於 <paramref name="calendar" /> 的月份數目。-或-<paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。-或-<paramref name="hour" /> 小於 0 或大於 23。-或-<paramref name="minute" /> 小於 0 或大於 59。-或-<paramref name="second" /> 小於 0 或大於 59。</exception>
      <exception cref="T:System.ArgumentException">指定的參數會判定為早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定的年、月、日、時、分、秒和毫秒 (Millisecond)。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日期 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="millisecond">毫秒 (0 到 999)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1 或大於 9999。-或-<paramref name="month" /> 小於 1 或大於 12。-或-<paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。-或-<paramref name="hour" /> 小於 0 或大於 23。-或-<paramref name="minute" /> 小於 0 或大於 59。-或-<paramref name="second" /> 小於 0 或大於 59。-或-<paramref name="millisecond" /> 小於 0 或大於 999。</exception>
      <exception cref="T:System.ArgumentException">指定的參數會判定為早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定之年、月、日、時、分、秒、毫秒以及 Coordinated Universal Time (UTC) 或本地時間。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日期 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="millisecond">毫秒 (0 到 999)。</param>
      <param name="kind">其中一個列舉值，指出 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" /> 和 <paramref name="millisecond" /> 是指定本地時間或 Coordinated Universal Time (UTC)，還是兩者都不指定。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1 或大於 9999。-或-<paramref name="month" /> 小於 1 或大於 12。-或-<paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。-或-<paramref name="hour" /> 小於 0 或大於 23。-或-<paramref name="minute" /> 小於 0 或大於 59。-或-<paramref name="second" /> 小於 0 或大於 59。-或-<paramref name="millisecond" /> 小於 0 或大於 999。</exception>
      <exception cref="T:System.ArgumentException">指定的日期和時間參數會判定為早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。-或-<paramref name="kind" /> 不是其中一個 <see cref="T:System.DateTimeKind" /> 值。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定之月曆的指定之年、月、日、時、分、秒和毫秒。</summary>
      <param name="year">年 (1 到 <paramref name="calendar" /> 中的年份)。</param>
      <param name="month">月份 (1 到 <paramref name="calendar" /> 中的月份數目)。</param>
      <param name="day">日期 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="millisecond">毫秒 (0 到 999)。</param>
      <param name="calendar">用來解譯 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的曆法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在 <paramref name="calendar" /> 所支援的範圍中。-或-<paramref name="month" /> 小於 1 或大於 <paramref name="calendar" /> 的月份數目。-或-<paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。-或-<paramref name="hour" /> 小於 0 或大於 23。-或-<paramref name="minute" /> 小於 0 或大於 59。-或-<paramref name="second" /> 小於 0 或大於 59。-或-<paramref name="millisecond" /> 小於 0 或大於 999。</exception>
      <exception cref="T:System.ArgumentException">指定的參數會判定為早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定之日曆的指定之年、月、日、時、分、秒、毫秒以及 Coordinated Universal Time (UTC) 或本地時間。</summary>
      <param name="year">年 (1 到 <paramref name="calendar" /> 中的年份)。</param>
      <param name="month">月份 (1 到 <paramref name="calendar" /> 中的月份數目)。</param>
      <param name="day">日期 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="millisecond">毫秒 (0 到 999)。</param>
      <param name="calendar">用來解譯 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的曆法。</param>
      <param name="kind">其中一個列舉值，指出 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" /> 和 <paramref name="millisecond" /> 是指定本地時間或 Coordinated Universal Time (UTC)，還是兩者都不指定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在 <paramref name="calendar" /> 所支援的範圍中。-或-<paramref name="month" /> 小於 1 或大於 <paramref name="calendar" /> 的月份數目。-或-<paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。-或-<paramref name="hour" /> 小於 0 或大於 23。-或-<paramref name="minute" /> 小於 0 或大於 59。-或-<paramref name="second" /> 小於 0 或大於 59。-或-<paramref name="millisecond" /> 小於 0 或大於 999。</exception>
      <exception cref="T:System.ArgumentException">指定的日期和時間參數會判定為早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。-或-<paramref name="kind" /> 不是其中一個 <see cref="T:System.DateTimeKind" /> 值。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64)">
      <summary>將 <see cref="T:System.DateTime" /> 類別的新執行個體初始化為刻度的指定數目。</summary>
      <param name="ticks">自西曆 0001 年 1 月 1 日 00:00:00.000 以來經過的日期和時間，以 100 奈秒間隔數表示。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)">
      <summary>將 <see cref="T:System.DateTime" /> 結構的新執行個體初始化為指定的刻度數以及 Coordinated Universal Time (UTC) 或本地時間。</summary>
      <param name="ticks">自西曆 0001 年 1 月 1 日 00:00:00.000 以來經過的日期和時間，以 100 奈秒間隔數表示。</param>
      <param name="kind">其中一個列舉值，指出 <paramref name="ticks" /> 是指定本地時間或 Coordinated Universal Time (UTC)，還是兩者都不指定。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> 不是其中一個 <see cref="T:System.DateTimeKind" /> 值。</exception>
    </member>
    <member name="M:System.DateTime.Add(System.TimeSpan)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，這是將此執行個體的值加上指定之 <see cref="T:System.TimeSpan" /> 值的結果。</summary>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示時間間隔的總和。</returns>
      <param name="value">要加入的時間間隔。這個值可以是正數或負數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddDays(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，這是將此執行個體的值加上指定之天數的結果。</summary>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示天數的總和。</returns>
      <param name="value">要加入之整數和小數的天數。這個值可以是正數或負數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddHours(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，這是將此執行個體的值加上指定之時數的結果。</summary>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示小時數的總和。</returns>
      <param name="value">要加入之整數和小數的小時數。這個值可以是正數或負數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddMilliseconds(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，這是將此執行個體的值加上指定之毫秒數的結果。</summary>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示毫秒數的總和。</returns>
      <param name="value">要加入之整數和小數的毫秒數。這個值可以是正數或負數，並且會四捨五入至最接近的整數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddMinutes(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，這是將此執行個體的值加上指定之分鐘數的結果。</summary>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示分鐘數的總和。</returns>
      <param name="value">要加入之整數和小數的分鐘數。這個值可以是正數或負數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddMonths(System.Int32)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，這是將此執行個體的值加上指定之月數的結果。</summary>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="months" /> 的總和。</returns>
      <param name="months">要加入的月數。這個值可以是正數或負數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。-或-<paramref name="months" /> 小於 -120,000 或大於 120,000。</exception>
    </member>
    <member name="M:System.DateTime.AddSeconds(System.Double)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，這是將此執行個體的值加上指定之秒數的結果。</summary>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示秒數的總和。</returns>
      <param name="value">要加入之整數和小數的秒數。這個值可以是正數或負數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddTicks(System.Int64)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，這是將此執行個體的值加上指定之刻度數的結果。</summary>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示時間的總和。</returns>
      <param name="value">要加入的 100 奈秒刻度數。這個值可以是正數或負數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddYears(System.Int32)">
      <summary>傳回新的 <see cref="T:System.DateTime" />，這是將此執行個體的值加上指定之年數的結果。</summary>
      <returns>物件，其值為這個執行個體所表示日期和時間加上 <paramref name="value" /> 所表示年數的總和。</returns>
      <param name="value">要加入的年數。這個值可以是正數或負數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 或產生的 <see cref="T:System.DateTime" /> 早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.Compare(System.DateTime,System.DateTime)">
      <summary>比較 <see cref="T:System.DateTime" /> 的兩個執行個體，並且傳回一個整數，指出第 1 個 <see cref="T:System.DateTime" /> 執行個體是早於、同於或晚於第 2 個 <see cref="T:System.DateTime" /> 執行個體。</summary>
      <returns>帶正負號的數字，表示 <paramref name="t1" /> 和 <paramref name="t2" /> 的相對值。實值型別條件小於零<paramref name="t1" /> 早於 <paramref name="t2" />。零<paramref name="t1" /> 與 <paramref name="t2" /> 相同。大於零<paramref name="t1" /> 晚於 <paramref name="t2" />。</returns>
      <param name="t1">要比較的第 1 個物件。</param>
      <param name="t2">要比較的第 2 個物件。</param>
    </member>
    <member name="M:System.DateTime.CompareTo(System.DateTime)">
      <summary>比較此執行個體的值與指定的 <see cref="T:System.DateTime" /> 值，並且傳回一個整數，指出此執行個體是早於、同於或晚於指定的 <see cref="T:System.DateTime" /> 值。</summary>
      <returns>帶正負號的整數，表示此執行個體和 <paramref name="value" /> 參數之間的關聯性，如下表所示。值描述小於零這個執行個體早於 <paramref name="value" />。零這個執行個體和 <paramref name="value" /> 相同。大於零這個執行個體晚於 <paramref name="value" />。</returns>
      <param name="value">要與此執行個體相比較的物件。</param>
    </member>
    <member name="M:System.DateTime.CompareTo(System.Object)">
      <summary>比較此執行個體的值與含有指定之 <see cref="T:System.DateTime" /> 值的指定物件，並且傳回一個整數，指出此執行個體是早於、同於或晚於指定的 <see cref="T:System.DateTime" /> 值。</summary>
      <returns>帶正負號的整數，表示此執行個體和 <paramref name="value" /> 參數之間的關聯性，如下表所示。值描述小於零這個執行個體早於 <paramref name="value" />。零這個執行個體和 <paramref name="value" /> 相同。大於零這個執行個體晚於 <paramref name="value" />，或者 <paramref name="value" /> 是 null。</returns>
      <param name="value">與此執行個體相比較的物件，或為 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.DateTime" />。</exception>
    </member>
    <member name="P:System.DateTime.Date">
      <summary>取得此執行個體的日期部分。</summary>
      <returns>新物件，具有與此執行個體相同的日期，而其時間值則設定為午夜 12:00:00 (00:00:00)。</returns>
    </member>
    <member name="P:System.DateTime.Day">
      <summary>取得由此執行個體表示的月份天數。</summary>
      <returns>日期元件，以 1 到 31 之間的值表示。</returns>
    </member>
    <member name="P:System.DateTime.DayOfWeek">
      <summary>取得由此執行個體表示的一週天數。</summary>
      <returns>列舉的常數，指出這個 <see cref="T:System.DateTime" /> 值代表的是一週的哪一天。</returns>
    </member>
    <member name="P:System.DateTime.DayOfYear">
      <summary>取得由此執行個體表示的一年天數。</summary>
      <returns>一年中的日期，以 1 到 366 之間的值表示。</returns>
    </member>
    <member name="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)">
      <summary>傳回指定之月份和年份中的天數。</summary>
      <returns>指定 <paramref name="year" /> 的 <paramref name="month" /> 中的天數。例如，如果 <paramref name="month" /> 等於 2 (表示二月)，則根據 <paramref name="year" /> 是否為閏年，傳回值會是 28 或 29。</returns>
      <param name="year">年。</param>
      <param name="month">月 (範圍從 1 到 12 的數字)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> 小於 1 或大於 12。-或-<paramref name="year" /> 小於 1 或大於 9999。</exception>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime)">
      <summary>傳回值，指出此執行個體的值是否等於指定的 <see cref="T:System.DateTime" /> 執行個體的值。</summary>
      <returns>如果 <paramref name="value" /> 參數等於此執行個體的值則為 true，否則為 false。</returns>
      <param name="value">要與此執行個體相比較的物件。</param>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime,System.DateTime)">
      <summary>傳回值，指出兩個 <see cref="T:System.DateTime" /> 執行個體是否具有相同的日期和時間值。</summary>
      <returns>如果兩個 <see cref="T:System.DateTime" /> 值相等則為 true，否則為 false。</returns>
      <param name="t1">要比較的第 1 個物件。</param>
      <param name="t2">要比較的第 2 個物件。</param>
    </member>
    <member name="M:System.DateTime.Equals(System.Object)">
      <summary>傳回值，指出此執行個體是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.DateTime" /> 的執行個體，並且等於此執行個體的值則為 true，否則為 false。</returns>
      <param name="value">要與此執行個體相比較的物件。</param>
    </member>
    <member name="M:System.DateTime.FromBinary(System.Int64)">
      <summary>還原序列化 64 位元的二進位值，並重新建立原始的序列化 <see cref="T:System.DateTime" /> 物件。</summary>
      <returns>相當於原始 <see cref="T:System.DateTime" /> 物件的物件。</returns>
      <param name="dateData">64 位元帶正負號的整數，可在 2 位元欄位中編碼 <see cref="P:System.DateTime.Kind" /> 屬性，並在 62 位元欄位中編碼 <see cref="P:System.DateTime.Ticks" /> 屬性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateData" /> 小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.FromFileTime(System.Int64)">
      <summary>將指定的 Windows 檔案時間轉換成相等的本地時間。</summary>
      <returns>物件，表示與 <paramref name="fileTime" /> 參數表示之日期和時間相等的本地時間。</returns>
      <param name="fileTime">Windows 檔案時間以刻度表示。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> 小於 0，或表示大於 <see cref="F:System.DateTime.MaxValue" /> 的時間。</exception>
    </member>
    <member name="M:System.DateTime.FromFileTimeUtc(System.Int64)">
      <summary>將指定的 Windows 檔案時間轉換成相等的 UTC 時間。</summary>
      <returns>物件，表示與 <paramref name="fileTime" /> 參數表示之日期和時間相等的 UTC 時間。</returns>
      <param name="fileTime">Windows 檔案時間以刻度表示。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> 小於 0，或表示大於 <see cref="F:System.DateTime.MaxValue" /> 的時間。</exception>
    </member>
    <member name="M:System.DateTime.FromOADate(System.Double)">
      <summary>傳回等於指定 OLE Automation 日期的 <see cref="T:System.DateTime" />。</summary>
      <returns>物件，表示和 <paramref name="d" /> 參數相同的日期和時間。</returns>
      <param name="d">OLE Automation 日期值。</param>
      <exception cref="T:System.ArgumentException">日期不是有效的 OLE Automation 日期值。</exception>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats">
      <summary>將這個執行個體的值轉換為標準日期和時間格式規範所支援的所有字串表示。</summary>
      <returns>字串陣列，其中的每個元素都是這個執行個體的值使用其中一個標準日期和時間格式規範所格式化的表示。</returns>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char)">
      <summary>將這個執行個體的值轉換為指定的標準日期和時間格式規範所支援的所有字串表示。</summary>
      <returns>字串陣列，其中的每個元素都是這個執行個體的值使用 <paramref name="format" /> 標準日期和時間格式規範所格式化的表示。</returns>
      <param name="format">標準日期和時間格式字串 (請參閱「備註」)。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的標準日期和時間格式規範字元。</exception>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)">
      <summary>將這個執行個體的值轉換為指定的標準日期和時間格式規範和特定文化特性格式資訊所支援的所有字串表示。</summary>
      <returns>字串陣列，其中的每個元素都是這個執行個體的值使用其中一個標準日期和時間格式規範所格式化的表示。</returns>
      <param name="format">日期和時間格式字串 (請參閱「備註」)。</param>
      <param name="provider">物件，提供關於此執行個體的文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的標準日期和時間格式規範字元。</exception>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)">
      <summary>將這個執行個體的值轉換為標準日期和時間格式規範和指定的特定文化特性格式資訊所支援的所有字串表示。</summary>
      <returns>字串陣列，其中的每個元素都是這個執行個體的值使用其中一個標準日期和時間格式規範所格式化的表示。</returns>
      <param name="provider">物件，提供關於此執行個體的文化特性格式資訊。</param>
    </member>
    <member name="M:System.DateTime.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.DateTime.GetTypeCode">
      <summary>傳回值型別 <see cref="T:System.DateTime" /> 的 <see cref="T:System.TypeCode" />。</summary>
      <returns>列舉常數、<see cref="F:System.TypeCode.DateTime" />。</returns>
    </member>
    <member name="P:System.DateTime.Hour">
      <summary>取得此執行個體所表示日期的小時部分。</summary>
      <returns>小時元件，以 0 到 23 之間的值表示。</returns>
    </member>
    <member name="M:System.DateTime.IsDaylightSavingTime">
      <summary>指出此 <see cref="T:System.DateTime" /> 執行個體是否在目前時區的日光節約時間範圍內。</summary>
      <returns>如果 <see cref="P:System.DateTime.Kind" /> 為 <see cref="F:System.DateTimeKind.Local" /> 或 <see cref="F:System.DateTimeKind.Unspecified" />，而且這個 <see cref="T:System.DateTime" /> 執行個體的值位於目前時區的日光節約時間範圍內，則為 true；如果 <see cref="P:System.DateTime.Kind" /> 是 <see cref="F:System.DateTimeKind.Utc" />，則為 false。</returns>
    </member>
    <member name="M:System.DateTime.IsLeapYear(System.Int32)">
      <summary>傳回指定年份是否為閏年的指示。</summary>
      <returns>如果 <paramref name="year" /> 是閏年則為 true，否則為 false。</returns>
      <param name="year">4 位數的年份。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1 或大於 9999。</exception>
    </member>
    <member name="P:System.DateTime.Kind">
      <summary>取得值，指出此執行個體表示的時間是根據本地時間、Coordinated Universal Time (UTC)，或兩者皆非。</summary>
      <returns>其中一個列舉值。預設值為 <see cref="F:System.DateTimeKind.Unspecified" />。</returns>
    </member>
    <member name="F:System.DateTime.MaxValue">
      <summary>表示 <see cref="T:System.DateTime" /> 的最大可能值。這個欄位是唯讀的。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="F:System.DateTime.MaxValue" /> 超出目前文化特性之預設日曆或所指定文化特性預設日曆的範圍。</exception>
    </member>
    <member name="P:System.DateTime.Millisecond">
      <summary>取得此執行個體所表示日期的毫秒部分。</summary>
      <returns>毫秒元件，以 0 到 999 之間的值表示。</returns>
    </member>
    <member name="P:System.DateTime.Minute">
      <summary>取得此執行個體所表示日期的分鐘部分。</summary>
      <returns>分鐘元件，以 0 到 59 之間的值表示。</returns>
    </member>
    <member name="F:System.DateTime.MinValue">
      <summary>表示 <see cref="T:System.DateTime" /> 的最小可能值。這個欄位是唯讀的。</summary>
    </member>
    <member name="P:System.DateTime.Month">
      <summary>取得此執行個體所表示日期的月份部分。</summary>
      <returns>月份元件，以 1 到 12 之間的值表示。</returns>
    </member>
    <member name="P:System.DateTime.Now">
      <summary>取得 <see cref="T:System.DateTime" /> 物件，此物件會設定為這部電腦上目前的日期和時間，以本地時間表示。</summary>
      <returns>物件，其值為目前的本地日期和時間。</returns>
    </member>
    <member name="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)">
      <summary>將指定的時間間隔加上指定的日期和時間，產生新的日期和時間。</summary>
      <returns>物件，這個物件是 <paramref name="d" /> 和 <paramref name="t" /> 之值的總和。</returns>
      <param name="d">要加入的第一個物件。</param>
      <param name="t">要加入的第二個物件。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)">
      <summary>判斷 <see cref="T:System.DateTime" /> 的兩個指定之執行個體是否相等。</summary>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 表示相同的日期和時間，則為 true，否則為 false。</returns>
      <param name="d1">要比較的第 1 個物件。</param>
      <param name="d2">要比較的第 2 個物件。</param>
    </member>
    <member name="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)">
      <summary>判斷某個指定的 <see cref="T:System.DateTime" /> 是否大於另一個指定的 <see cref="T:System.DateTime" />。</summary>
      <returns>如果 <paramref name="t1" /> 大於 <paramref name="t2" /> 則為 true，否則為 false。</returns>
      <param name="t1">要比較的第 1 個物件。</param>
      <param name="t2">要比較的第 2 個物件。</param>
    </member>
    <member name="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)">
      <summary>判斷某個指定的 <see cref="T:System.DateTime" /> 是否大於或等於另一個指定的 <see cref="T:System.DateTime" />。</summary>
      <returns>如果 <paramref name="t1" /> 大於或等於 <paramref name="t2" /> 則為 true，否則為 false。</returns>
      <param name="t1">要比較的第 1 個物件。</param>
      <param name="t2">要比較的第 2 個物件。</param>
    </member>
    <member name="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)">
      <summary>判斷 <see cref="T:System.DateTime" /> 的兩個指定之執行個體是否不相等。</summary>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 不表示相同的日期和時間，則為 true，否則為 false。</returns>
      <param name="d1">要比較的第 1 個物件。</param>
      <param name="d2">要比較的第 2 個物件。</param>
    </member>
    <member name="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)">
      <summary>判斷某個指定的 <see cref="T:System.DateTime" /> 是否小於另一個指定的 <see cref="T:System.DateTime" />。</summary>
      <returns>如果 <paramref name="t1" /> 小於 <paramref name="t2" /> 則為 true，否則為 false。</returns>
      <param name="t1">要比較的第 1 個物件。</param>
      <param name="t2">要比較的第 2 個物件。</param>
    </member>
    <member name="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)">
      <summary>判斷某個指定的 <see cref="T:System.DateTime" /> 是否小於或等於另一個指定的 <see cref="T:System.DateTime" />。</summary>
      <returns>如果 <paramref name="t1" /> 小於或等於 <paramref name="t2" /> 則為 true，否則為 false。</returns>
      <param name="t1">要比較的第 1 個物件。</param>
      <param name="t2">要比較的第 2 個物件。</param>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)">
      <summary>將另一個指定的日期和時間減去指定的日期和時間，並傳回時間間隔。</summary>
      <returns>
        <paramref name="d1" /> 和 <paramref name="d2" /> 之間的時間間隔，也就是 <paramref name="d1" /> 減 <paramref name="d2" />。</returns>
      <param name="d1">位於減號左邊的日期和時間值 (被減數)。</param>
      <param name="d2">位於減號右邊的日期和時間值 (減數)。</param>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)">
      <summary>將指定的日期和時間減去指定的時間間隔，並傳回新的日期和時間。</summary>
      <returns>物件，其值為 <paramref name="d" /> 值減掉 <paramref name="t" /> 值的差異值。</returns>
      <param name="d">位於減號左邊的日期和時間值 (被減數)。</param>
      <param name="t">要減去的時間間隔 (減數)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTime" /> 早於 <see cref="F:System.DateTime.MinValue" /> 或晚於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String)">
      <summary>將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTime" />。</summary>
      <returns>物件，等同於 <paramref name="s" /> 參數中所包含的日期和時間。</returns>
      <param name="s">字串，包含要轉換的日期和時間。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不包含日期和時間的有效字串表示。</exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTime" />。</summary>
      <returns>物件，等同於 <paramref name="s" /> 參數中所包含的日期和時間，如同 <paramref name="provider" /> 參數所指定的日期和時間。</returns>
      <param name="s">字串，包含要轉換的日期和時間。</param>
      <param name="provider">提供關於 <paramref name="s" /> 之文化特性特有格式資訊的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不包含日期和時間的有效字串表示。</exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的特定文化特性格式資訊和格式樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTime" />。</summary>
      <returns>物件，等同於 <paramref name="s" /> 參數中所包含的日期和時間，如同 <paramref name="provider" /> 和 <paramref name="styles" /> 參數所指定的日期和時間。</returns>
      <param name="s">字串，包含要轉換的日期和時間。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <param name="styles">列舉值的位元組合，表示可以在 <paramref name="s" /> 中出現使剖析作業成功，以及定義如何解譯剖析的日期與目前時區或目前日期之間關聯性的樣式元素。一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不包含日期和時間的有效字串表示。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包含無效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值組合。例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>使用指定的格式以及特定文化特性的格式資訊，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTime" />。字串表示的格式必須完全符合指定的格式。</summary>
      <returns>物件，等同於 <paramref name="s" /> 參數中所包含的日期和時間，如同 <paramref name="format" /> 和 <paramref name="provider" /> 參數所指定的日期和時間。</returns>
      <param name="s">字串，包含要轉換的日期和時間。</param>
      <param name="format">格式規範，定義 <paramref name="s" /> 所需的格式。</param>
      <param name="provider">提供關於 <paramref name="s" /> 之文化特性特有格式資訊的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 或 <paramref name="format" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="format" /> 是空字串。-或-<paramref name="s" /> 不包含對應至 <paramref name="format" /> 中指定模式的日期和時間。</exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTime" />。字串表示的格式必須完全符合指定的格式，否則會擲回例外狀況。</summary>
      <returns>物件，等同於 <paramref name="s" /> 參數中所包含的日期和時間，如同 <paramref name="format" />、<paramref name="provider" /> 和 <paramref name="style" /> 參數所指定的日期和時間。</returns>
      <param name="s">字串，包含要轉換的日期和時間。</param>
      <param name="format">格式規範，定義 <paramref name="s" /> 所需的格式。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <param name="style">列舉值的位元組合，提供有關 <paramref name="s" />、可以出現在 <paramref name="s" /> 中的樣式元素，或是從 <paramref name="s" /> 轉換成 <see cref="T:System.DateTime" /> 值的詳細資訊。一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 或 <paramref name="format" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="format" /> 是空字串。-或-<paramref name="s" /> 不包含對應至 <paramref name="format" /> 中指定模式的日期和時間。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 包含無效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值組合。例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式陣列、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTime" />。字串表示的格式必須至少完全符合其中一個指定的格式，否則會擲回例外狀況。</summary>
      <returns>物件，等同於 <paramref name="s" /> 參數中所包含的日期和時間，如同 <paramref name="formats" />、<paramref name="provider" /> 和 <paramref name="style" /> 參數所指定的日期和時間。</returns>
      <param name="s">字串，含有要轉換的一或多個日期和時間。</param>
      <param name="formats">
        <paramref name="s" /> 允許的格式陣列。</param>
      <param name="provider">提供關於 <paramref name="s" /> 之文化特性特有格式資訊的物件。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 的必要格式。一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 或 <paramref name="formats" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 為空字串。-或-<paramref name="formats" /> 的某個項目是空字串。-或-<paramref name="s" /> 不包含對應至 <paramref name="formats" /> 任何項目的日期和時間。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 包含無效的<see cref="T:System.Globalization.DateTimeStyles" /> 值組合。例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
    </member>
    <member name="P:System.DateTime.Second">
      <summary>取得此執行個體所表示日期的秒數部分。</summary>
      <returns>秒數元件，以 0 到 59 之間的值表示。</returns>
    </member>
    <member name="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)">
      <summary>建立新的 <see cref="T:System.DateTime" /> 物件，此物件的刻度數與指定的 <see cref="T:System.DateTime" /> 相同，但依指定的 <see cref="T:System.DateTimeKind" /> 值所示，指定為本地時間、國際標準時間 (Coordinated Universal Time，UTC)，或兩者都不是。</summary>
      <returns>新的物件，這個物件的刻度數與 <paramref name="value" /> 參數表示的物件相同，且具有 <paramref name="kind" /> 參數指定的 <see cref="T:System.DateTimeKind" /> 值。</returns>
      <param name="value">新物件的日期和時間值。</param>
      <param name="kind">其中一個列舉值，指出新物件是以本地時間或 UTC 指定，還是兩者皆非。</param>
    </member>
    <member name="M:System.DateTime.Subtract(System.DateTime)">
      <summary>將此執行個體減去指定的日期和時間。</summary>
      <returns>時間間隔，等於由此執行個體所表示的日期和時間減去由 <paramref name="value" /> 所表示的日期和時間。</returns>
      <param name="value">要減去的日期和時間。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">該結果小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.Subtract(System.TimeSpan)">
      <summary>將此執行個體減去指定的持續期間。</summary>
      <returns>物件，等於由此執行個體所表示的日期和時間減去由 <paramref name="value" /> 所表示的時間間隔。</returns>
      <param name="value">要減去的時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">該結果小於 <see cref="F:System.DateTime.MinValue" /> 或大於 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>傳回目前的 <see cref="T:System.DateTime" /> 物件。</summary>
      <returns>目前的 <see cref="T:System.DateTime" /> 物件。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>將目前的 <see cref="T:System.DateTime" /> 物件轉換為指定型別的物件。</summary>
      <returns>
        <paramref name="type" /> 參數所指定之型別的物件，其中含有等於目前 <see cref="T:System.DateTime" /> 物件的值。</returns>
      <param name="type">所要的型別。</param>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.InvalidCastException">不支援 <see cref="T:System.DateTime" /> 型別進行這種轉換。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="P:System.DateTime.Ticks">
      <summary>取得表示此執行個體之日期與時間的滴答數。</summary>
      <returns>刻度數目，表示此執行個體的日期和時間。值介於 DateTime.MinValue.Ticks 和 DateTime.MaxValue.Ticks 之間。</returns>
    </member>
    <member name="P:System.DateTime.TimeOfDay">
      <summary>取得此執行個體的一天時間。</summary>
      <returns>時間間隔，表示從午夜以來已經過的當天部分。</returns>
    </member>
    <member name="M:System.DateTime.ToBinary">
      <summary>將目前的 <see cref="T:System.DateTime" /> 物件序列化成 64 位元的二進位值，之後可以用這個值來重新建立 <see cref="T:System.DateTime" /> 物件。</summary>
      <returns>64 位元帶正負號的整數，可以編碼 <see cref="P:System.DateTime.Kind" /> 和 <see cref="P:System.DateTime.Ticks" /> 屬性。</returns>
    </member>
    <member name="P:System.DateTime.Today">
      <summary>取得目前的日期。</summary>
      <returns>設定為今天日期的物件，且時間元件會設定為 00:00:00。</returns>
    </member>
    <member name="M:System.DateTime.ToFileTime">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換成 Windows 檔案時間。</summary>
      <returns>以 Windows 檔案時間表示的目前 <see cref="T:System.DateTime" /> 物件的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的檔案時間將會表示在西元 1601 年 1 月 1 日午夜 12:00 以前的日期和時間，時區為 UTC。</exception>
    </member>
    <member name="M:System.DateTime.ToFileTimeUtc">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換成 Windows 檔案時間。</summary>
      <returns>以 Windows 檔案時間表示的目前 <see cref="T:System.DateTime" /> 物件的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的檔案時間將會表示在西元 1601 年 1 月 1 日午夜 12:00 以前的日期和時間，時區為 UTC。</exception>
    </member>
    <member name="M:System.DateTime.ToLocalTime">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換成本地時間。</summary>
      <returns>物件，其 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Local" />，而其值為下列其中一項：與目前 <see cref="T:System.DateTime" /> 值相等的本地時間；如果轉換過的值太大，而無法由 <see cref="T:System.DateTime" /> 物件表示，則為 <see cref="F:System.DateTime.MaxValue" />；如果轉換過的值太小，而無法表示為 <see cref="T:System.DateTime" /> 物件，則為 <see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="M:System.DateTime.ToLongDateString">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其對等的完整日期 (Long Date) 字串表示。</summary>
      <returns>目前 <see cref="T:System.DateTime" /> 物件的完整日期字串表示。</returns>
    </member>
    <member name="M:System.DateTime.ToLongTimeString">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其對等的完整時間 (Long Time) 字串表示。</summary>
      <returns>目前 <see cref="T:System.DateTime" /> 物件的完整時間字串表示。</returns>
    </member>
    <member name="M:System.DateTime.ToOADate">
      <summary>將此執行個體的值轉換為對等的 OLE Automation 日期。</summary>
      <returns>雙精確度浮點數，含有等於此執行個體值的 OLE Automation 日期。</returns>
      <exception cref="T:System.OverflowException">此執行個體的值無法以 OLE Automation 日期表示。</exception>
    </member>
    <member name="M:System.DateTime.ToShortDateString">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其對等的簡短日期 (Short Date) 字串表示。</summary>
      <returns>目前 <see cref="T:System.DateTime" /> 物件的簡短日期字串表示。</returns>
    </member>
    <member name="M:System.DateTime.ToShortTimeString">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其對等的簡短時間 (Short Time) 字串表示。</summary>
      <returns>目前 <see cref="T:System.DateTime" /> 物件的簡短時間字串表示。</returns>
    </member>
    <member name="M:System.DateTime.ToString">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其對等的字串表示。</summary>
      <returns>目前 <see cref="T:System.DateTime" /> 物件值的字串表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">日期與時間超出目前文化特性使用之行事曆所支援的日期範圍。</exception>
    </member>
    <member name="M:System.DateTime.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性的格式資訊，將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其對等字串表示。</summary>
      <returns>目前 <see cref="T:System.DateTime" /> 物件值的字串表示，如同 <paramref name="provider" /> 參數所指定。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和時間超出行事曆使用 <paramref name="provider" /> 所支援的日期範圍。</exception>
    </member>
    <member name="M:System.DateTime.ToString(System.String)">
      <summary>使用指定的格式，將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其對等字串表示。</summary>
      <returns>目前 <see cref="T:System.DateTime" /> 物件值的字串表示，如同 <paramref name="format" /> 參數所指定。</returns>
      <param name="format">標準或自訂的日期和時間格式字串 (請參閱「備註」)。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的長度為 1，而且不是為 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 所定義的格式規範字元之一。-或-<paramref name="format" /> 不包含有效的自訂格式模式。</exception>
    </member>
    <member name="M:System.DateTime.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性的格式資訊，將目前 <see cref="T:System.DateTime" /> 物件的值轉換為其對等字串表示。</summary>
      <returns>目前 <see cref="T:System.DateTime" /> 物件值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 參數所指定。</returns>
      <param name="format">標準或自訂的日期和時間格式字串 (請參閱「備註」)。</param>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的長度為 1，而且不是為 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 所定義的格式規範字元之一。-或-<paramref name="format" /> 不包含有效的自訂格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和時間超出行事曆使用 <paramref name="provider" /> 所支援的日期範圍。</exception>
    </member>
    <member name="M:System.DateTime.ToUniversalTime">
      <summary>將目前 <see cref="T:System.DateTime" /> 物件的值轉換成 Coordinated Universal Time (UTC)。</summary>
      <returns>物件，其 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Utc" />，而其值為下列其中一項：與目前 <see cref="T:System.DateTime" /> 值相等的 UTC 時間；如果轉換過的值太大，而無法由 <see cref="T:System.DateTime" /> 物件表示，則為 <see cref="F:System.DateTime.MaxValue" />；如果轉換過的值太小，而無法由 <see cref="T:System.DateTime" /> 物件表示，則為 <see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.DateTime@)">
      <summary>將日期及時間的指定字串表示轉換為它的 <see cref="T:System.DateTime" /> 對等用法，並且傳回指出轉換是否成功的值。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 參數則為 true，否則為 false。</returns>
      <param name="s">字串，包含要轉換的日期和時間。</param>
      <param name="result">當此方法傳回時，如果轉換成功，則會包含相當於 <paramref name="s" /> 中所含之日期和時間的 <see cref="T:System.DateTime" /> 值；如果轉換失敗，則為 <see cref="F:System.DateTime.MinValue" />。如果 <paramref name="s" /> 參數為 null、為空字串或者不包含日期和時間的有效字串表示，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>使用指定的文化特性特定格式資訊和格式樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTime" />，並傳回值，此值表示轉換是否成功。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 參數則為 true，否則為 false。</returns>
      <param name="s">字串，包含要轉換的日期和時間。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <param name="styles">列舉值之位元組合的指標，這些列舉值會定義如何根據目前時區或目前日期解譯已剖析的日期。一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <param name="result">當此方法傳回時，如果轉換成功，則會包含相當於 <paramref name="s" /> 中所含之日期和時間的 <see cref="T:System.DateTime" /> 值；如果轉換失敗，則為 <see cref="F:System.DateTime.MinValue" />。如果 <paramref name="s" /> 參數為 null、為空字串 ("") 或者不包含日期和時間的有效字串表示，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。-或-<paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的無效組合 (例如 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="provider" /> 屬於中性的文化特性，而且不能用於剖析作業中。</exception>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>使用指定的格式、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTime" />。字串表示的格式必須完全符合指定的格式。此方法會傳回值，此值表示轉換是否成功。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 參數則為 true，否則為 false。</returns>
      <param name="s">字串，包含要轉換的日期和時間。</param>
      <param name="format">
        <paramref name="s" /> 的必要格式。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <param name="style">一或多個列舉值的位元組合，表示 <paramref name="s" /> 的允許格式。</param>
      <param name="result">當此方法傳回時，如果轉換成功，則會包含相當於 <paramref name="s" /> 中所含之日期和時間的 <see cref="T:System.DateTime" /> 值；如果轉換失敗，則為 <see cref="F:System.DateTime.MinValue" />。如果 <paramref name="s" /> 或 <paramref name="format" /> 參數為 null、空字串，或不包含與 <paramref name="format" /> 中指定之模式相對應的日期和時間，則此轉換作業會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。-或-<paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的無效組合 (例如 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />)。</exception>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>使用指定的格式陣列、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTime" />。字串表示的格式必須至少完全符合其中一個指定格式。此方法會傳回值，此值表示轉換是否成功。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 參數則為 true，否則為 false。</returns>
      <param name="s">字串，含有要轉換的一或多個日期和時間。</param>
      <param name="formats">
        <paramref name="s" /> 參數之可用格式的陣列。</param>
      <param name="provider">提供關於 <paramref name="s" /> 之文化特性特有格式資訊的物件。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 的允許格式。一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <param name="result">當此方法傳回時，如果轉換成功，則會包含相當於 <paramref name="s" /> 中所含之日期和時間的 <see cref="T:System.DateTime" /> 值；如果轉換失敗，則為 <see cref="F:System.DateTime.MinValue" />。如果 <paramref name="s" /> 或 <paramref name="formats" /> 為 null、<paramref name="s" /> 或 <paramref name="formats" /> 的一個項目為空字串，或是 <paramref name="s" /> 的格式沒有與 <paramref name="formats" /> 中的至少一個格式模式所指定的內容完全相同，則此轉換作業會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。-或-<paramref name="styles" /> 包含 <see cref="T:System.Globalization.DateTimeStyles" /> 值的無效組合 (例如 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />)。</exception>
    </member>
    <member name="P:System.DateTime.UtcNow">
      <summary>取得 <see cref="T:System.DateTime" /> 物件，此物件會設定為這部電腦上目前的日期和時間，以 Coordinated Universal Time (UTC) 表示。</summary>
      <returns>物件，其值為目前的 UTC 日期和時間。</returns>
    </member>
    <member name="P:System.DateTime.Year">
      <summary>取得此執行個體所表示日期的年份部分。</summary>
      <returns>年份元件，以 1 到 9999 之間的值表示。</returns>
    </member>
    <member name="T:System.DateTimeKind">
      <summary>指定 <see cref="T:System.DateTime" /> 物件是否表示本地時間、Coordinated Universal Time (UTC) 或是兩者皆非。</summary>
    </member>
    <member name="F:System.DateTimeKind.Local">
      <summary>表示的時間為本地時間。</summary>
    </member>
    <member name="F:System.DateTimeKind.Unspecified">
      <summary>表示的時間既未指定為本地時間，也未指定為 Coordinated Universal Time (UTC)。</summary>
    </member>
    <member name="F:System.DateTimeKind.Utc">
      <summary>表示的時間為 UTC。</summary>
    </member>
    <member name="T:System.DateTimeOffset">
      <summary>表示一個時間點，通常以一天的日期和時間表示 (相對於 Coordinated Universal Time)。</summary>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime)">
      <summary>使用指定的 <see cref="T:System.DateTime" /> 值來初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
      <param name="dateTime">日期和時間。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">因套用位移而產生的國際標準時間 (Coordinated Universal Time，UTC) 日期和時間早於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-因套用位移而產生的 UTC 日期和時間晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)">
      <summary>使用指定的 <see cref="T:System.DateTime" /> 值和位移來初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
      <param name="dateTime">日期和時間。</param>
      <param name="offset">Coordinated Universal Time (UTC) 的時間位移。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime.Kind" /> 等於 <see cref="F:System.DateTimeKind.Utc" /> 且 <paramref name="offset" /> 不等於零。-或-<paramref name="dateTime.Kind" /> 等於 <see cref="F:System.DateTimeKind.Local" /> 且 <paramref name="offset" /> 不等於系統本地時區的位移。-或-<paramref name="offset" /> 未以整數分鐘數指定。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小於 -14 小時或大於 14 小時。-或-<see cref="P:System.DateTimeOffset.UtcDateTime" /> 小於 <see cref="F:System.DateTimeOffset.MinValue" /> 或大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)">
      <summary>使用指定之行事曆的指定年、月、日、時、分、秒、毫秒和位移來初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
      <param name="year">年。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日期 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="millisecond">毫秒 (0 到 999)。</param>
      <param name="calendar">已定義時間的行事曆。</param>
      <param name="offset">Coordinated Universal Time (UTC) 的時間位移。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 不表示整數分鐘數。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> 不可為 null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 <paramref name="calendar" /> 參數的 MinSupportedDateTime.Year，或大於 MaxSupportedDateTime.Year。-或-<paramref name="month" /> 小於或大於 <paramref name="calendar" /> 中 <paramref name="year" /> 的月份數。-或-<paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。-或-<paramref name="hour" /> 小於零或大於 23。-或-<paramref name="minute" /> 小於 0 或大於 59。-或-<paramref name="second" /> 小於 0 或大於 59。-或-<paramref name="millisecond" /> 小於 0 或大於 999。-或-<paramref name="offset" /> 小於 -14 小時或大於 14 小時。-或-<paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 參數無法表示為日期和時間值。-或-<see cref="P:System.DateTimeOffset.UtcDateTime" /> 屬性比 <see cref="F:System.DateTimeOffset.MinValue" /> 早，或比 <see cref="F:System.DateTimeOffset.MaxValue" /> 晚。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>使用指定的年、月、日、時、分、秒、毫秒和位移來初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日期 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="millisecond">毫秒 (0 到 999)。</param>
      <param name="offset">Coordinated Universal Time (UTC) 的時間位移。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 不表示整數分鐘數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1 或大於 9999。-或-<paramref name="month" /> 小於 1 或大於 12。-或-<paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。-或-<paramref name="hour" /> 小於零或大於 23。-或-<paramref name="minute" /> 小於 0 或大於 59。-或-<paramref name="second" /> 小於 0 或大於 59。-或-<paramref name="millisecond" /> 小於 0 或大於 999。-或-<paramref name="offset" /> 小於 -14 或大於 14。-或-<see cref="P:System.DateTimeOffset.UtcDateTime" /> 屬性比 <see cref="F:System.DateTimeOffset.MinValue" /> 早，或比 <see cref="F:System.DateTimeOffset.MaxValue" /> 晚。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>使用指定的年、月、日、時、分、秒和位移來初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
      <param name="year">年份 (1 到 9999)。</param>
      <param name="month">月份 (1 到 12)。</param>
      <param name="day">日期 (1 到 <paramref name="month" /> 中的天數)。</param>
      <param name="hour">小時 (0 到 23)。</param>
      <param name="minute">分鐘 (0 到 59)。</param>
      <param name="second">秒數 (0 到 59)。</param>
      <param name="offset">Coordinated Universal Time (UTC) 的時間位移。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 不表示整數分鐘數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1 或大於 9999。-或-<paramref name="month" /> 小於 1 或大於 12。-或-<paramref name="day" /> 小於 1 或大於 <paramref name="month" /> 中的天數。-或-<paramref name="hour" /> 小於零或大於 23。-或-<paramref name="minute" /> 小於 0 或大於 59。-或-<paramref name="second" /> 小於 0 或大於 59。-或-<paramref name="offset" /> 小於 -14 小時或大於 14 小時。-或-<see cref="P:System.DateTimeOffset.UtcDateTime" /> 屬性比 <see cref="F:System.DateTimeOffset.MinValue" /> 早，或比 <see cref="F:System.DateTimeOffset.MaxValue" /> 晚。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)">
      <summary>使用指定數目的刻度和位移來初始化 <see cref="T:System.DateTimeOffset" /> 結構的新執行個體。</summary>
      <param name="ticks">以 0001 年 1 月 1 日午夜 12:00:00 以來已經過的 100 奈秒間隔數表示的日期和時間。</param>
      <param name="offset">Coordinated Universal Time (UTC) 的時間位移。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 未以整數分鐘數指定。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.DateTimeOffset.UtcDateTime" /> 屬性比 <see cref="F:System.DateTimeOffset.MinValue" /> 早，或比 <see cref="F:System.DateTimeOffset.MaxValue" /> 晚。-或-<paramref name="ticks" /> 小於 DateTimeOffset.MinValue.Ticks 或大於 DateTimeOffset.MaxValue.Ticks。-或-<paramref name="Offset" /> 小於 -14 小時或大於 14 小時。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Add(System.TimeSpan)">
      <summary>將指定的時間間隔加入至 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="timeSpan" /> 所表示之時間間隔的總和。</returns>
      <param name="timeSpan">
        <see cref="T:System.TimeSpan" /> 物件，表示正的或負的時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddDays(System.Double)">
      <summary>將指定的整數和小數天數加入至目前 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="days" /> 所表示之天數的總和。</returns>
      <param name="days">整數和小數的天數。可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddHours(System.Double)">
      <summary>將指定的整數和小數時數加入至目前 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="hours" /> 所表示之小時數的總和。</returns>
      <param name="hours">整數和小數的時數。可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMilliseconds(System.Double)">
      <summary>將指定的毫秒數加入至目前 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="milliseconds" /> 所表示之整數毫秒數的總和。</returns>
      <param name="milliseconds">整數和小數的毫秒數。可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMinutes(System.Double)">
      <summary>將指定的整數和小數分鐘數加入至目前 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="minutes" /> 所表示之分鐘數的總和。</returns>
      <param name="minutes">整數和小數的分鐘數。可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMonths(System.Int32)">
      <summary>將指定的月份數加入至目前 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="months" /> 所表示之月份數的總和。</returns>
      <param name="months">整數月份數。可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddSeconds(System.Double)">
      <summary>將指定的整數和小數秒數加入至目前 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="seconds" /> 所表示之秒數的總和。</returns>
      <param name="seconds">整數和小數的秒數。可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddTicks(System.Int64)">
      <summary>將指定的刻度數加入至目前 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="ticks" /> 所表示之刻度數的總和。</returns>
      <param name="ticks">100 毫微秒刻度數。可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddYears(System.Int32)">
      <summary>將指定的年份數加入至 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>物件，其值為目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間加上 <paramref name="years" /> 所表示之年份數的總和。</returns>
      <param name="years">年份數。可以是負數或正數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>比較兩個 <see cref="T:System.DateTimeOffset" /> 物件，並指出第 1 個日期是早於、等於還是晚於第 2 個日期。</summary>
      <returns>帶正負號的整數，表示 <paramref name="first" /> 參數的值是早於、晚於或等於 <paramref name="second" /> 參數的值，如下表所示。傳回值描述小於零<paramref name="first" /> 早於 <paramref name="second" />。零<paramref name="first" /> 等於 <paramref name="second" />。大於零<paramref name="first" /> 晚於 <paramref name="second" />。</returns>
      <param name="first">要比較的第 1 個物件。</param>
      <param name="second">要比較的第 2 個物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件與指定的 <see cref="T:System.DateTimeOffset" /> 物件進行比較，並指示目前物件是早於、等於還是晚於第 2 個 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>帶正負號的整數，表示目前 <see cref="T:System.DateTimeOffset" /> 物件和 <paramref name="other" /> 之間的關係，如下表所示。傳回值描述小於零目前 <see cref="T:System.DateTimeOffset" /> 物件早於 <paramref name="other" />。零目前的 <see cref="T:System.DateTimeOffset" /> 物件與 <paramref name="other" /> 相同。大於零。目前 <see cref="T:System.DateTimeOffset" /> 物件晚於 <paramref name="other" />。</returns>
      <param name="other">要與目前 <see cref="T:System.DateTimeOffset" /> 物件比較的物件。</param>
    </member>
    <member name="P:System.DateTimeOffset.Date">
      <summary>取得 <see cref="T:System.DateTime" /> 值，此值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的日期元件。</summary>
      <returns>物件，其值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的日期元件。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DateTime">
      <summary>取得 <see cref="T:System.DateTime" /> 值，此值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的日期和時間。</summary>
      <returns>物件，其值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的日期和時間。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Day">
      <summary>取得由目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之月份中的第幾天。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的天數元件，以 1 到 31 之間的數值表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfWeek">
      <summary>取得由目前 <see cref="T:System.DateTimeOffset" /> 物件所表示的星期幾。</summary>
      <returns>一個列舉值，指出目前 <see cref="T:System.DateTimeOffset" /> 物件的星期幾。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfYear">
      <summary>取得由目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之一年中的第幾天。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件之一年中的第幾天，以 1 到 366 之間的數值表示。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset)">
      <summary>判斷目前 <see cref="T:System.DateTimeOffset" /> 物件與指定的 <see cref="T:System.DateTimeOffset" /> 物件是否表示相同的時間點。</summary>
      <returns>如果兩個 <see cref="T:System.DateTimeOffset" /> 物件具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值則為 true，否則為 false。</returns>
      <param name="other">要與目前 <see cref="T:System.DateTimeOffset" /> 物件比較的物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷兩個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否表示相同的時間點。</summary>
      <returns>如果兩個 <see cref="T:System.DateTimeOffset" /> 物件具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值則為 true，否則為 false。</returns>
      <param name="first">要比較的第 1 個物件。</param>
      <param name="second">要比較的第 2 個物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.Object)">
      <summary>判斷 <see cref="T:System.DateTimeOffset" /> 物件與指定的物件是否表示相同的時間點。</summary>
      <returns>如果 <paramref name="obj" /> 參數為 <see cref="T:System.DateTimeOffset" /> 物件且與目前 <see cref="T:System.DateTimeOffset" /> 物件代表相同的時間點，則為 true，否則為 false。</returns>
      <param name="obj">要與目前 <see cref="T:System.DateTimeOffset" /> 物件比較的物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)">
      <summary>判斷目前 <see cref="T:System.DateTimeOffset" /> 物件與指定的 <see cref="T:System.DateTimeOffset" /> 物件是否表示相同的時間且具有相同的位移。</summary>
      <returns>如果目前 <see cref="T:System.DateTimeOffset" /> 物件與 <paramref name="other" /> 具有相同的日期和時間值以及相同的 <see cref="P:System.DateTimeOffset.Offset" /> 值則為 true，否則為 false。</returns>
      <param name="other">要與目前 <see cref="T:System.DateTimeOffset" /> 物件比較的物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.FromFileTime(System.Int64)">
      <summary>將指定的 Windows 檔案時間轉換成相等的本地時間。</summary>
      <returns>物件，表示位移已經設定為本地時間位移之 <paramref name="fileTime" /> 的日期和時間。</returns>
      <param name="fileTime">Windows 檔案時間，以刻度表示。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="filetime" /> 小於零。-或-<paramref name="filetime" /> 大於 DateTimeOffset.MaxValue.Ticks。</exception>
    </member>
    <member name="M:System.DateTimeOffset.GetHashCode">
      <summary>傳回目前 <see cref="T:System.DateTimeOffset" /> 物件的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Hour">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件表示之時間的時數元件。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的時數元件。此屬性使用 24 小時制，且值的範圍從 0 到 23。</returns>
    </member>
    <member name="P:System.DateTimeOffset.LocalDateTime">
      <summary>取得 <see cref="T:System.DateTime" /> 值，此值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的本地日期和時間。</summary>
      <returns>物件，其值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的當地日期和時間。</returns>
    </member>
    <member name="F:System.DateTimeOffset.MaxValue">
      <summary>表示 <see cref="T:System.DateTimeOffset" /> 的最大可能值。此欄位為唯讀的。</summary>
    </member>
    <member name="P:System.DateTimeOffset.Millisecond">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之時間的毫秒數元件。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的毫秒數元件，以 0 到 999 之間的整數表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Minute">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之時間的分鐘數元件。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的分鐘數元件，以 0 到 59 之間的整數表示。</returns>
    </member>
    <member name="F:System.DateTimeOffset.MinValue">
      <summary>表示最早的 <see cref="T:System.DateTimeOffset" /> 可能值。此欄位為唯讀的。</summary>
    </member>
    <member name="P:System.DateTimeOffset.Month">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期的月份元件。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的月份元件，以 1 到 12 之間的整數表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Now">
      <summary>取得 <see cref="T:System.DateTimeOffset" /> 物件，此物件的日期和時間已設定為目前電腦上的目前日期和時間，而位移已設定為本地時間相對於 Coordinated Universal Time (UTC) 的位移。</summary>
      <returns>物件，其日期和時間為目前本地時間，而位移為本地時區相對於 Coordinated Universal Time (UTC) 的位移。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Offset">
      <summary>取得 Coordinated Universal Time (UTC) 的時間位移。</summary>
      <returns>物件，表示目前 <see cref="T:System.DateTimeOffset" /> 物件的時間值與國際標準時間 (UTC) 之間的時差。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)">
      <summary>將指定的時間間隔加入至具有指定日期和時間的 <see cref="T:System.DateTimeOffset" /> 物件，並產生具有新日期和時間的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>物件，其值為 <paramref name="dateTimeOffset" /> 和 <paramref name="timeSpan" /> 值的總和。</returns>
      <param name="dateTimeOffset">要在其中加入時間間隔的物件。</param>
      <param name="timeSpan">要加入的時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷兩個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否表示相同的時間點。</summary>
      <returns>如果兩個 <see cref="T:System.DateTimeOffset" /> 物件具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值則為 true，否則為 false。</returns>
      <param name="left">要比較的第 1 個物件。</param>
      <param name="right">要比較的第 2 個物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷一個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否大於 (或晚於) 第 2 個指定的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值晚於 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 true，否則為 false。</returns>
      <param name="left">要比較的第 1 個物件。</param>
      <param name="right">要比較的第 2 個物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷一個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否大於 (或等於) 第 2 個指定的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值與 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值相同，則為 true，否則為 false。</returns>
      <param name="left">要比較的第 1 個物件。</param>
      <param name="right">要比較的第 2 個物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset">
      <summary>定義從 <see cref="T:System.DateTime" /> 物件到 <see cref="T:System.DateTimeOffset" /> 物件的隱含轉換。</summary>
      <returns>轉換的物件。</returns>
      <param name="dateTime">要進行轉換的物件。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">因套用位移而產生的國際標準時間 (Coordinated Universal Time，UTC) 日期和時間早於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-因套用位移而產生的 UTC 日期和時間晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷兩個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否參照不同的時間點。</summary>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 沒有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值則為 true，否則為 false。</returns>
      <param name="left">要比較的第 1 個物件。</param>
      <param name="right">要比較的第 2 個物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷一個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否小於第 2 個指定的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值早於 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 true，否則為 false。</returns>
      <param name="left">要比較的第 1 個物件。</param>
      <param name="right">要比較的第 2 個物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>判斷一個指定的 <see cref="T:System.DateTimeOffset" /> 物件是否小於第 2 個指定的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值早於 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，則為 true，否則為 false。</returns>
      <param name="left">要比較的第 1 個物件。</param>
      <param name="right">要比較的第 2 個物件。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>從其他 <see cref="T:System.DateTimeOffset" /> 物件減去一個物件並產生時間間隔。</summary>
      <returns>物件，表示 <paramref name="left" /> 和 <paramref name="right" /> 之間的差。</returns>
      <param name="left">當做被減數的日期和時間 (被減數)。</param>
      <param name="right">要減去的日期和時間 (減數)。</param>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)">
      <summary>從指定的日期和時間減去指定的時間間隔，並產生新的日期和時間。</summary>
      <returns>物件，等於 <paramref name="dateTimeOffset" /> 減 <paramref name="timeSpan" /> 的值。</returns>
      <param name="dateTimeOffset">當做被減數的日期和時間。</param>
      <param name="timeSpan">要減去的時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" /> 或大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String)">
      <summary>將日期、時間和位移之指定的字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />。</summary>
      <returns>物件，與 <paramref name="input" /> 中包含的日期和時間相等。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 不包含日期和時間的有效字串表示。-或-<paramref name="input" /> 包含位移值的字串表示 (不含日期或時間)。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />。</summary>
      <returns>物件，等同於 <paramref name="input" /> 中所包含的日期和時間，如 <paramref name="formatProvider" /> 所指定。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的文化特性專屬格式資訊。</param>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 不包含日期和時間的有效字串表示。-或-<paramref name="input" /> 包含位移值的字串表示 (不含日期或時間)。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的特定文化特性格式資訊和格式樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />。</summary>
      <returns>物件，等同於 <paramref name="input" /> 中所包含的日期和時間，如 <paramref name="formatProvider" /> 和 <paramref name="styles" /> 所指定。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的文化特性專屬格式資訊。</param>
      <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 的允許格式。一般會指定的值是 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。-或-<paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。-或-<paramref name="styles" /> 包含不受支援的<see cref="T:System.Globalization.DateTimeStyles" /> 值。-或-<paramref name="styles" /> 包含無法同時使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 不包含日期和時間的有效字串表示。-或-<paramref name="input" /> 包含位移值的字串表示 (不含日期或時間)。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>使用指定的格式以及特定文化特性的格式資訊，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />。字串表示的格式必須完全符合指定的格式。</summary>
      <returns>物件，等同於 <paramref name="input" /> 中所包含的日期和時間，如 <paramref name="format" /> 和 <paramref name="formatProvider" /> 所指定。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="format">格式規範，定義 <paramref name="input" /> 的預期格式。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的文化特性特定格式資訊。</param>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="format" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 為空字串 ("")。-或-<paramref name="input" /> 不包含日期和時間的有效字串表示。-或-<paramref name="format" /> 為空字串。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />。字串表示的格式必須完全符合指定的格式。</summary>
      <returns>物件，等同於 <paramref name="input" /> 參數中所包含的日期和時間，如 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 參數所指定。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="format">格式規範，定義 <paramref name="input" /> 的預期格式。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的文化特性特定格式資訊。</param>
      <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 的允許格式。</param>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。-或-<paramref name="styles" /> 參數包含不受支援的值。-或-<paramref name="styles" /> 參數包含無法同時使用的<see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。-或-<paramref name="format" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 為空字串 ("")。-或-<paramref name="input" /> 不包含日期和時間的有效字串表示。-或-<paramref name="format" /> 為空字串。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />。字串表示的格式必須完全符合其中一個指定的格式。</summary>
      <returns>物件，等同於 <paramref name="input" /> 參數中所包含的日期和時間，如 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 參數所指定。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="formats">格式規範陣列，定義 <paramref name="input" /> 的預期格式。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的文化特性特定格式資訊。</param>
      <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 的允許格式。</param>
      <exception cref="T:System.ArgumentException">位移大於 14 小時或小於 -14 小時。-或-<paramref name="styles" /> 包含不受支援的值。-或-<paramref name="styles" /> 參數包含無法同時使用的<see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 為空字串 ("")。-或-<paramref name="input" /> 不包含日期和時間的有效字串表示。-或-<paramref name="formats" /> 的項目都未包含有效的格式規範。</exception>
    </member>
    <member name="P:System.DateTimeOffset.Second">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之時鐘時間的秒數元件。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 物件的秒數元件，以 0 到 59 之間的整數表示。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)">
      <summary>從目前 <see cref="T:System.DateTimeOffset" /> 物件減去表示特定日期和時間的 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <returns>物件，指定兩個 <see cref="T:System.DateTimeOffset" /> 物件的間隔。</returns>
      <param name="value">要減去的日期和時間。</param>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.TimeSpan)">
      <summary>從目前 <see cref="T:System.DateTimeOffset" /> 物件減去指定的時間間隔。</summary>
      <returns>物件，等於目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期和時間減 <paramref name="value" /> 所表示之時間間隔。</returns>
      <param name="value">要減去的時間間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的 <see cref="T:System.DateTimeOffset" /> 值小於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生的 <see cref="T:System.DateTimeOffset" /> 值大於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件的值與相同型別的其他物件進行比較。</summary>
      <returns>下表的其中一個值。傳回值描述小於零目前 <see cref="T:System.DateTimeOffset" /> 物件小於 (早於) <paramref name="obj" />。零目前 <see cref="T:System.DateTimeOffset" /> 物件等於 <paramref name="obj" /> (時間點相同)。大於零目前 <see cref="T:System.DateTimeOffset" /> 物件大於 (晚於) <paramref name="obj" />。</returns>
      <param name="obj">要與目前 <see cref="T:System.DateTimeOffset" /> 物件比較的物件。</param>
    </member>
    <member name="P:System.DateTimeOffset.Ticks">
      <summary>取得刻度數，此值表示目前 <see cref="T:System.DateTimeOffset" /> 物件之時鐘時間的日期和時間。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 物件之時間的刻度數。</returns>
    </member>
    <member name="P:System.DateTimeOffset.TimeOfDay">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件之一天中的時間。</summary>
      <returns>物件，表示自午夜起已經過之目前日期的時間間隔。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToFileTime">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件的值轉換成 Windows 檔案時間。</summary>
      <returns>以 Windows 檔案時間表示的目前 <see cref="T:System.DateTimeOffset" /> 物件的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的檔案時間將會表示在西元 1601 年 1 月 1 日午夜以前的日期和時間，以 Coordinated Universal Time (UTC) 時間計算。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToLocalTime">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件轉換為表示本地時間的 <see cref="T:System.DateTimeOffset" /> 物件。</summary>
      <returns>物件，表示轉換為本地時間之目前 <see cref="T:System.DateTimeOffset" /> 物件的日期和時間。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToOffset(System.TimeSpan)">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件的值轉換為位移值指定的日期和時間。</summary>
      <returns>物件，等於起始 <see cref="T:System.DateTimeOffset" /> 物件 (即它們的 <see cref="M:System.DateTimeOffset.ToUniversalTime" /> 方法都會傳回相同的時間點)，但其 <see cref="P:System.DateTimeOffset.Offset" /> 屬性設定成 <paramref name="offset" />。</returns>
      <param name="offset">要將 <see cref="T:System.DateTimeOffset" /> 值轉換成的位移。</param>
      <exception cref="T:System.ArgumentException">產生之 <see cref="T:System.DateTimeOffset" /> 物件的 <see cref="P:System.DateTimeOffset.DateTime" /> 值早於 <see cref="F:System.DateTimeOffset.MinValue" />。-或-產生之 <see cref="T:System.DateTimeOffset" /> 物件的 <see cref="P:System.DateTimeOffset.DateTime" /> 值晚於 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小於 -14 小時。-或-<paramref name="offset" /> 大於 14 小時。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件的值轉換為其對等的字串表示。</summary>
      <returns>包含附加至字串尾端之位移的 <see cref="T:System.DateTimeOffset" /> 物件之字串表示。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">日期與時間超出目前文化特性使用之行事曆所支援的日期範圍。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.IFormatProvider)">
      <summary>使用指定的文化特性特定格式資訊，將目前 <see cref="T:System.DateTimeOffset" /> 物件的值轉換為其對等字串表示。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件值的字串表示，如 <paramref name="formatProvider" /> 所指定。</returns>
      <param name="formatProvider">物件，提供文化特性特定格式資訊。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和時間超出行事曆使用 <paramref name="formatProvider" /> 所支援的日期範圍。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String)">
      <summary>使用指定的格式，將目前 <see cref="T:System.DateTimeOffset" /> 物件的值轉換為其對等字串表示。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件值的字串表示，如 <paramref name="format" /> 所指定。</returns>
      <param name="format">格式字串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的長度為 1，而且不是針對 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 所定義的其中一個標準格式規範字元。-或-<paramref name="format" /> 並未包含有效的自訂格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日期與時間超出目前文化特性使用之行事曆所支援的日期範圍。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性的格式資訊，將目前 <see cref="T:System.DateTimeOffset" /> 物件的值轉換為其對等字串表示。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件值的字串表示，如 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">格式字串。</param>
      <param name="formatProvider">物件，提供文化特性特定格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的長度為 1，而且不是針對 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 所定義的其中一個標準格式規範字元。-或-<paramref name="format" /> 並未包含有效的自訂格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和時間超出行事曆使用 <paramref name="formatProvider" /> 所支援的日期範圍。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToUniversalTime">
      <summary>將目前 <see cref="T:System.DateTimeOffset" /> 物件轉換為表示 Coordinated Universal Time (UTC) 的 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <returns>物件，表示轉換為國際標準時間 (UTC) 之目前 <see cref="T:System.DateTimeOffset" /> 物件的日期和時間。</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)">
      <summary>嘗試將日期和時間之指定的字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />，並傳回一個值，指示轉換是否成功。</summary>
      <returns>如果成功地轉換 <paramref name="input" /> 參數則為 true，否則為 false。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="result">當方法傳回時，如果轉換成功，內含的 <see cref="T:System.DateTimeOffset" /> 就等於 <paramref name="input" /> 的日期和時間，如果轉換失敗，則為 <see cref="F:System.DateTimeOffset.MinValue" />。如果 <paramref name="input" /> 參數為 null，或者不包含日期和時間的有效字串表示，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>嘗試將日期和時間之指定的字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />，並傳回一個值，指示轉換是否成功。</summary>
      <returns>如果成功地轉換 <paramref name="input" /> 參數則為 true，否則為 false。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="formatProvider">提供關於 <paramref name="input" /> 的文化特性特定格式資訊的物件。</param>
      <param name="styles">列舉值的位元組合，表示 <paramref name="input" /> 的允許格式。</param>
      <param name="result">當方法傳回時，如果轉換成功，內含的 <see cref="T:System.DateTimeOffset" /> 值就等於 <paramref name="input" /> 的日期和時間，如果轉換失敗，則為 <see cref="F:System.DateTimeOffset.MinValue" />。如果 <paramref name="input" /> 參數為 null，或者不包含日期和時間的有效字串表示，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包含未定義的<see cref="T:System.Globalization.DateTimeStyles" /> 值。-或-<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />  不受支援。-或-<paramref name="styles" /> 包含互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>使用指定的格式、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />。字串表示的格式必須完全符合指定的格式。</summary>
      <returns>如果成功地轉換 <paramref name="input" /> 參數則為 true，否則為 false。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="format">格式規範，定義 <paramref name="input" /> 所需的格式。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的文化特性特定格式資訊。</param>
      <param name="styles">列舉值的位元組合，表示允許的輸入格式。一般會指定的值是 None。</param>
      <param name="result">當方法傳回時，如果轉換成功，內含的 <see cref="T:System.DateTimeOffset" /> 就等於 <paramref name="input" /> 的日期和時間，如果轉換失敗，則為 <see cref="F:System.DateTimeOffset.MinValue" />。如果 <paramref name="input" /> 參數為 null，或者不包含由 <paramref name="format" /> 和 <paramref name="provider" /> 定義的預期格式之日期和時間的有效字串表示，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包含未定義的<see cref="T:System.Globalization.DateTimeStyles" /> 值。-或-<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />  不受支援。-或-<paramref name="styles" /> 包含互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>使用指定的格式陣列、特定文化特性格式資訊以及樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.DateTimeOffset" />。字串表示的格式必須完全符合其中一個指定的格式。</summary>
      <returns>如果成功地轉換 <paramref name="input" /> 參數則為 true，否則為 false。</returns>
      <param name="input">字串，包含要轉換的日期和時間。</param>
      <param name="formats">陣列，定義 <paramref name="input" /> 的預期格式。</param>
      <param name="formatProvider">物件，提供關於 <paramref name="input" /> 的文化特性特定格式資訊。</param>
      <param name="styles">列舉值的位元組合，表示允許的輸入格式。一般會指定的值是 None。</param>
      <param name="result">當方法傳回時，如果轉換成功，內含的 <see cref="T:System.DateTimeOffset" /> 就等於 <paramref name="input" /> 的日期和時間，如果轉換失敗，則為 <see cref="F:System.DateTimeOffset.MinValue" />。如果 <paramref name="input" /> 不包含日期和時間的有效字串表示，或者不包含 <paramref name="format" /> 定義之預期格式的日期和時間，或者 <paramref name="formats" /> 為 null，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包含未定義的<see cref="T:System.Globalization.DateTimeStyles" /> 值。-或-<see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />  不受支援。-或-<paramref name="styles" /> 包含互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="P:System.DateTimeOffset.UtcDateTime">
      <summary>取得 <see cref="T:System.DateTime" /> 值，此值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的 Coordinated Universal Time (UTC) 日期和時間。</summary>
      <returns>物件，其值表示目前 <see cref="T:System.DateTimeOffset" /> 物件的國際標準時間 (UTC) 日期和時間。</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcNow">
      <summary>取得 <see cref="T:System.DateTimeOffset" /> 物件，此物件的日期和時間已設定為目前 Coordinated Universal Time (UTC) 日期和時間，且位移為 <see cref="F:System.TimeSpan.Zero" />。</summary>
      <returns>其日期和時間為目前國際標準時間 (UTC)，且其位移為 <see cref="F:System.TimeSpan.Zero" /> 的物件。</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcTicks">
      <summary>取得刻度數，此值表示目前 <see cref="T:System.DateTimeOffset" /> 物件之 Coordinated Universal Time (UTC) 的日期和時間。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 物件的國際標準時間 (UTC) 刻度數。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Year">
      <summary>取得目前 <see cref="T:System.DateTimeOffset" /> 物件所表示之日期的年份元件。</summary>
      <returns>目前 <see cref="T:System.DateTimeOffset" /> 物件的年份元件，以 0 到 9999 之間的整數表示。</returns>
    </member>
    <member name="T:System.DayOfWeek">
      <summary>指定一週中的星期名稱。</summary>
    </member>
    <member name="F:System.DayOfWeek.Friday">
      <summary>指出星期五。</summary>
    </member>
    <member name="F:System.DayOfWeek.Monday">
      <summary>指出星期一。</summary>
    </member>
    <member name="F:System.DayOfWeek.Saturday">
      <summary>指出星期六。</summary>
    </member>
    <member name="F:System.DayOfWeek.Sunday">
      <summary>指出星期日。</summary>
    </member>
    <member name="F:System.DayOfWeek.Thursday">
      <summary>指出星期四。</summary>
    </member>
    <member name="F:System.DayOfWeek.Tuesday">
      <summary>指出星期二。</summary>
    </member>
    <member name="F:System.DayOfWeek.Wednesday">
      <summary>指出星期三。</summary>
    </member>
    <member name="T:System.DBNull">
      <summary>表示不存在的值。無法繼承此類別。</summary>
    </member>
    <member name="M:System.DBNull.GetTypeCode">
      <summary>取得此 <see cref="T:System.DBNull" /> 的 <see cref="T:System.TypeCode" /> 值。</summary>
      <returns>
        <see cref="T:System.DBNull" /> 的 <see cref="T:System.TypeCode" /> 值，其為 <see cref="F:System.TypeCode.DBNull" />。</returns>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>無。不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">不支援 <see cref="T:System.DBNull" /> 型別進行這種轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>無。不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">不支援 <see cref="T:System.DBNull" /> 型別進行這種轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>無。不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">不支援 <see cref="T:System.DBNull" /> 型別進行這種轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>無。不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">不支援 <see cref="T:System.DBNull" /> 型別進行這種轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>無。不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">不支援 <see cref="T:System.DBNull" /> 型別進行這種轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>無。不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">不支援 <see cref="T:System.DBNull" /> 型別進行這種轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>無。不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">不支援 <see cref="T:System.DBNull" /> 型別進行這種轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>無。不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">不支援 <see cref="T:System.DBNull" /> 型別進行這種轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>無。不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">不支援 <see cref="T:System.DBNull" /> 型別進行這種轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>無。不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">不支援 <see cref="T:System.DBNull" /> 型別進行這種轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>無。不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">不支援 <see cref="T:System.DBNull" /> 型別進行這種轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>將目前的 <see cref="T:System.DBNull" /> 物件轉換為指定的型別。</summary>
      <returns>如果支援該轉換，則為目前 <see cref="T:System.DBNull" /> 物件的 Boxed 對等項目，否則會擲回例外狀況，且不傳回任何值。</returns>
      <param name="type">要將目前 <see cref="T:System.DBNull" /> 物件轉換為的型別。</param>
      <param name="provider">物件，實作 <see cref="T:System.IFormatProvider" /> 介面並用於擴大轉換。如果指定 null，則會從目前的文化特性取得格式資訊。</param>
      <exception cref="T:System.InvalidCastException">不支援 <see cref="T:System.DBNull" /> 型別進行這種轉換。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>無。不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">不支援 <see cref="T:System.DBNull" /> 型別進行這種轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>無。不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">不支援 <see cref="T:System.DBNull" /> 型別進行這種轉換。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試進行這個轉換會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>無。不使用此成員的傳回值。</returns>
      <param name="provider">實作 <see cref="T:System.IFormatProvider" /> 介面的物件。(不會使用此參數；指定 null。)</param>
      <exception cref="T:System.InvalidCastException">不支援 <see cref="T:System.DBNull" /> 型別進行這種轉換。</exception>
    </member>
    <member name="M:System.DBNull.ToString">
      <summary>傳回空字串 (<see cref="F:System.String.Empty" />)。</summary>
      <returns>空字串 (<see cref="F:System.String.Empty" />)。</returns>
    </member>
    <member name="M:System.DBNull.ToString(System.IFormatProvider)">
      <summary>使用指定的 <see cref="T:System.IFormatProvider" /> 來傳回空字串。</summary>
      <returns>空字串 (<see cref="F:System.String.Empty" />)。</returns>
      <param name="provider">用來格式化傳回值的 <see cref="T:System.IFormatProvider" />。-或-null，用來從作業系統的目前地區設定取得格式資訊。</param>
    </member>
    <member name="F:System.DBNull.Value">
      <summary>表示 <see cref="T:System.DBNull" /> 類別的唯一執行個體。</summary>
    </member>
    <member name="T:System.Decimal">
      <summary>表示十進位數字。</summary>
    </member>
    <member name="M:System.Decimal.#ctor(System.Double)">
      <summary>將 <see cref="T:System.Decimal" /> 的新執行個體初始化為指定雙精確度浮點數的值。</summary>
      <param name="value">要表示為 <see cref="T:System.Decimal" /> 的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Decimal.MaxValue" /> 或小於 <see cref="F:System.Decimal.MinValue" />。-或-<paramref name="value" /> 是 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Decimal" /> 的新執行個體為指定 32 位元帶正負號的整數值。</summary>
      <param name="value">要表示為 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)">
      <summary>從指定執行個體的組成部分初始化 <see cref="T:System.Decimal" /> 的新執行個體。</summary>
      <param name="lo">96 位元整數的低 32 位元。</param>
      <param name="mid">96 位元整數的中 32 位元。</param>
      <param name="hi">96 位元整數的高 32 位元。</param>
      <param name="isNegative">數字的正負號；1 是負，0 是正。</param>
      <param name="scale">範圍從 0 到 28 的 10 乘冪。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> 大於 28。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32[])">
      <summary>初始化 <see cref="T:System.Decimal" /> 的新執行個體為以二進位表示並包含在指定陣列中的十進位值。</summary>
      <param name="bits">含有十進位值表示的 32 位元帶正負號整數陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bits" /> 的長度不是 4。-或-在 <paramref name="bits" /> 中的十進位值的表示無效。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int64)">
      <summary>初始化 <see cref="T:System.Decimal" /> 的新執行個體為指定 64 位元帶正負號的整數值。</summary>
      <param name="value">要表示為 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Single)">
      <summary>將 <see cref="T:System.Decimal" /> 的新執行個體初始化為指定單精確度浮點數的值。</summary>
      <param name="value">要表示為 <see cref="T:System.Decimal" /> 的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.Decimal.MaxValue" /> 或小於 <see cref="F:System.Decimal.MinValue" />。-或-<paramref name="value" /> 是 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt32)">
      <summary>初始化 <see cref="T:System.Decimal" /> 的新執行個體為指定 32 位元不帶正負號的整數值。</summary>
      <param name="value">要表示為 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt64)">
      <summary>初始化 <see cref="T:System.Decimal" /> 的新執行個體為指定 64 位元不帶正負號的整數值。</summary>
      <param name="value">要表示為 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.Add(System.Decimal,System.Decimal)">
      <summary>加入兩個指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 值，為 <paramref name="d1" /> 和 <paramref name="d2" /> 的總和。</returns>
      <param name="d1">
        <see cref="T:System.Decimal" />。</param>
      <param name="d2">
        <see cref="T:System.Decimal" />。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d1" /> 和 <paramref name="d2" /> 的總和小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.Ceiling(System.Decimal)">
      <summary>傳回大於或等於指定之十進位數字的最小整數值。</summary>
      <returns>大於或等於 <paramref name="d" /> 參數的最小整數值。請注意，此方法會傳回 <see cref="T:System.Decimal" />，而不是整數類資料型別。</returns>
      <param name="d">十進位數字。</param>
    </member>
    <member name="M:System.Decimal.Compare(System.Decimal,System.Decimal)">
      <summary>比較兩個指定的 <see cref="T:System.Decimal" /> 值，並且傳回值指出第 1 個值是大於、等於還是小於第 2 個值的整數。</summary>
      <returns>帶正負號的數字，表示 <paramref name="d1" /> 和 <paramref name="d2" /> 之間的關聯性。傳回值意義小於零<paramref name="d1" /> 小於 <paramref name="d2" />。零<paramref name="d1" /> 和 <paramref name="d2" /> 相等。大於零<paramref name="d1" /> 大於 <paramref name="d2" />。</returns>
      <param name="d1">
        <see cref="T:System.Decimal" />。</param>
      <param name="d2">
        <see cref="T:System.Decimal" />。</param>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Decimal)">
      <summary>比較此執行個體與指定的 <see cref="T:System.Decimal" /> 物件，並且傳回一個整數，指出此執行個體的值是大於、小於或等於指定之 <see cref="T:System.Decimal" /> 的值。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的關聯性。傳回值意義小於零這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。大於零這個執行個體大於 <paramref name="value" />。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 物件。</param>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Object)">
      <summary>比較此執行個體與指定的 <see cref="T:System.Object" />，並且傳回一個整數，指出此執行個體的值是大於、小於或等於指定之 <see cref="T:System.Object" /> 的值。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的關聯性。傳回值意義小於零這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。大於零這個執行個體大於 <paramref name="value" />。-或-<paramref name="value" /> 為 null。</returns>
      <param name="value">
        <see cref="T:System.Object" /> 或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Decimal" />。</exception>
    </member>
    <member name="M:System.Decimal.Divide(System.Decimal,System.Decimal)">
      <summary>除兩個指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>
        <see cref="T:System.Decimal" />，為 <paramref name="d1" /> 除以 <paramref name="d2" /> 的商數。</returns>
      <param name="d1">
        <see cref="T:System.Decimal" /> (被除數)。</param>
      <param name="d2">
        <see cref="T:System.Decimal" /> (除數)。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> 為零。</exception>
      <exception cref="T:System.OverflowException">傳回值 (也就是商數) 小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal)">
      <summary>傳回指出此執行個體和指定的 <see cref="T:System.Decimal" /> 物件是否表示相同值的值。</summary>
      <returns>如果 <paramref name="value" /> 等於這個執行個體則為 true，否則為 false。</returns>
      <param name="value">要與此執行個體相比較的 <see cref="T:System.Decimal" /> 物件。</param>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal,System.Decimal)">
      <summary>傳回數值，指出 <see cref="T:System.Decimal" /> 的兩個指定執行個體是否表示相同的值。</summary>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 相等則為 true，否則為 false。</returns>
      <param name="d1">
        <see cref="T:System.Decimal" />。</param>
      <param name="d2">
        <see cref="T:System.Decimal" />。</param>
    </member>
    <member name="M:System.Decimal.Equals(System.Object)">
      <summary>傳回數值，指出此執行個體和指定的 <see cref="T:System.Object" /> 是否表示相同的型別和值。</summary>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.Decimal" /> 且等於這個執行個體，則為 true，否則為 false。</returns>
      <param name="value">
        <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Decimal.Floor(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 數字往負無限大方向捨入為最接近的整數。</summary>
      <returns>如果 <paramref name="d" /> 具有小數部分，則為往負無限大方向 (也就是小於 <paramref name="d" />) 的下一個 <see cref="T:System.Decimal" /> 整數。-或-如果 <paramref name="d" /> 不具有小數部分，則傳回的 <paramref name="d" /> 不變更。</returns>
      <param name="d">
        <see cref="T:System.Decimal" />。</param>
    </member>
    <member name="M:System.Decimal.GetBits(System.Decimal)">
      <summary>將 <see cref="T:System.Decimal" /> 的指定執行個體值轉換為它的對等二進位表示。</summary>
      <returns>32 位元帶正負號的整數陣列，具有包含 <paramref name="d" /> 的二進位表示之四個元素。</returns>
      <param name="d">
        <see cref="T:System.Decimal" /> 值。</param>
    </member>
    <member name="M:System.Decimal.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Decimal.GetTypeCode">
      <summary>傳回值型別 <see cref="T:System.Decimal" /> 的 <see cref="T:System.TypeCode" />。</summary>
      <returns>列舉常數、<see cref="F:System.TypeCode.Decimal" />。</returns>
    </member>
    <member name="F:System.Decimal.MaxValue">
      <summary>表示 <see cref="T:System.Decimal" /> 的最大可能值。這個欄位是不變且唯讀的。</summary>
    </member>
    <member name="F:System.Decimal.MinusOne">
      <summary>表示數字負一 (-1)。</summary>
    </member>
    <member name="F:System.Decimal.MinValue">
      <summary>表示 <see cref="T:System.Decimal" /> 的最小可能值。這個欄位是不變且唯讀的。</summary>
    </member>
    <member name="M:System.Decimal.Multiply(System.Decimal,System.Decimal)">
      <summary>乘兩個指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>
        <see cref="T:System.Decimal" />，為 <paramref name="d1" /> 乘 <paramref name="d2" /> 的乘積。</returns>
      <param name="d1">
        <see cref="T:System.Decimal" /> (被乘數)。</param>
      <param name="d2">
        <see cref="T:System.Decimal" /> (乘數)。</param>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.Negate(System.Decimal)">
      <summary>傳回指定的 <see cref="T:System.Decimal" /> 值乘以負一的乘積。</summary>
      <returns>值為 <paramref name="d" /> 的 <see cref="T:System.Decimal" />，但正負號相反。-或-零 (如果 <paramref name="d" /> 是零)。</returns>
      <param name="d">
        <see cref="T:System.Decimal" />。</param>
    </member>
    <member name="F:System.Decimal.One">
      <summary>表示數字一 (1)。</summary>
    </member>
    <member name="M:System.Decimal.op_Addition(System.Decimal,System.Decimal)">
      <summary>加入兩個指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>
        <paramref name="d1" /> 加 <paramref name="d2" /> 所得出的 <see cref="T:System.Decimal" /> 結果。</returns>
      <param name="d1">
        <see cref="T:System.Decimal" />。</param>
      <param name="d2">
        <see cref="T:System.Decimal" />。</param>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Decrement(System.Decimal)">
      <summary>將 <see cref="T:System.Decimal" /> 運算元減一。</summary>
      <returns>
        <paramref name="d" /> 減一的值。</returns>
      <param name="d">
        <see cref="T:System.Decimal" /> 運算元。</param>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Division(System.Decimal,System.Decimal)">
      <summary>除兩個指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>
        <paramref name="d1" /> 除以 <paramref name="d2" /> 的 <see cref="T:System.Decimal" /> 結果。</returns>
      <param name="d1">
        <see cref="T:System.Decimal" /> (被除數)。</param>
      <param name="d2">
        <see cref="T:System.Decimal" /> (除數)。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> 為零。</exception>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Equality(System.Decimal,System.Decimal)">
      <summary>傳回值，指出 <see cref="T:System.Decimal" /> 的兩個執行個體是否相等。</summary>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 相等則為 true，否則為 false。</returns>
      <param name="d1">
        <see cref="T:System.Decimal" />。</param>
      <param name="d2">
        <see cref="T:System.Decimal" />。</param>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Single">
      <summary>將 <see cref="T:System.Decimal" /> 轉換為單精確度浮點數。</summary>
      <returns>單精確度浮點數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的 <see cref="T:System.Decimal" />。</param>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.SByte">
      <summary>將 <see cref="T:System.Decimal" /> 轉換為 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的 <see cref="T:System.Decimal" />。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int64">
      <summary>將 <see cref="T:System.Decimal" /> 轉換為 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的 <see cref="T:System.Decimal" />。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt64">
      <summary>將 <see cref="T:System.Decimal" /> 轉換為 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的 <see cref="T:System.Decimal" />。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 是負的或大於 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt32">
      <summary>將 <see cref="T:System.Decimal" /> 轉換為 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的 <see cref="T:System.Decimal" />。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 是負的或大於 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt16">
      <summary>將 <see cref="T:System.Decimal" /> 轉換為 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的 <see cref="T:System.Decimal" />。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.UInt16.MaxValue" /> 或小於 <see cref="F:System.UInt16.MinValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Char">
      <summary>將 <see cref="T:System.Decimal" /> 轉換為 Unicode 字元。</summary>
      <returns>Unicode 字元，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的 <see cref="T:System.Decimal" />。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Byte">
      <summary>將 <see cref="T:System.Decimal" /> 轉換為 8 位元不帶正負號的整數。</summary>
      <returns>8 位元不帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的 <see cref="T:System.Decimal" />。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Double">
      <summary>將 <see cref="T:System.Decimal" /> 轉換為雙精確度浮點數。</summary>
      <returns>雙精確度浮點數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的 <see cref="T:System.Decimal" />。</param>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int32">
      <summary>將 <see cref="T:System.Decimal" /> 轉換為 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的 <see cref="T:System.Decimal" />。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int16">
      <summary>將 <see cref="T:System.Decimal" /> 轉換為 16 位元帶正負號的整數。</summary>
      <returns>16 位元帶正負號的整數，表示已轉換的 <see cref="T:System.Decimal" />。</returns>
      <param name="value">要進行轉換的 <see cref="T:System.Decimal" />。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Double)~System.Decimal">
      <summary>將雙精確度浮點數轉換為 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" />，表示已轉換的雙精確度浮點數。</returns>
      <param name="value">雙精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。-或-<paramref name="value" /> 是 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Single)~System.Decimal">
      <summary>將單精確度浮點數轉換為 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" />，表示已轉換的單精確度浮點數。</returns>
      <param name="value">單精確度浮點數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。-或-<paramref name="value" /> 是 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />。</exception>
    </member>
    <member name="M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)">
      <summary>傳回數值，指出指定的 <see cref="T:System.Decimal" /> 是否大於另一個指定的 <see cref="T:System.Decimal" />。</summary>
      <returns>如果 <paramref name="d1" /> 大於 <paramref name="d2" /> 則為 true，否則為 false。</returns>
      <param name="d1">
        <see cref="T:System.Decimal" />。</param>
      <param name="d2">
        <see cref="T:System.Decimal" />。</param>
    </member>
    <member name="M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)">
      <summary>傳回數值，指出指定的 <see cref="T:System.Decimal" /> 是否大於或等於另一個指定的 <see cref="T:System.Decimal" />。</summary>
      <returns>如果 <paramref name="d1" /> 大於或等於 <paramref name="d2" /> 則為 true，否則為 false。</returns>
      <param name="d1">
        <see cref="T:System.Decimal" />。</param>
      <param name="d2">
        <see cref="T:System.Decimal" />。</param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Byte)~System.Decimal">
      <summary>將 8 位元不帶正負號的整數轉換為 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" />，表示已轉換的 8 位元不帶正負號的整數。</returns>
      <param name="value">8 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Char)~System.Decimal">
      <summary>將 Unicode 字元轉換為 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" />，表示已轉換的 Unicode 字元。</returns>
      <param name="value">Unicode 字元。</param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int16)~System.Decimal">
      <summary>將 16 位元帶正負號的整數轉換為 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" />，表示已轉換的 16 位元帶正負號的整數。</returns>
      <param name="value">16 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int32)~System.Decimal">
      <summary>將 32 位元帶正負號的整數轉換為 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" />，表示已轉換的 32 位元帶正負號的整數。</returns>
      <param name="value">32 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int64)~System.Decimal">
      <summary>將 64 位元帶正負號的整數轉換為 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" />，表示已轉換的 64 位元帶正負號的整數。</returns>
      <param name="value">64 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.SByte)~System.Decimal">
      <summary>將 8 位元帶正負號的整數轉換為 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" />，表示已轉換的 8 位元帶正負號的整數。</returns>
      <param name="value">8 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt16)~System.Decimal">
      <summary>將 16 位元不帶正負號的整數轉換為 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" />，表示已轉換的 16 位元不帶正負號的整數。</returns>
      <param name="value">16 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt32)~System.Decimal">
      <summary>將 32 位元不帶正負號的整數轉換為 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" />，表示已轉換的 32 位元不帶正負號的整數。</returns>
      <param name="value">32 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt64)~System.Decimal">
      <summary>將 64 位元不帶正負號的整數轉換為 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" />，表示已轉換的 64 位元不帶正負號的整數。</returns>
      <param name="value">64 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.Decimal.op_Increment(System.Decimal)">
      <summary>將 <see cref="T:System.Decimal" /> 運算元加 1。</summary>
      <returns>
        <paramref name="d" /> 加 1 的值。</returns>
      <param name="d">
        <see cref="T:System.Decimal" /> 運算元。</param>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)">
      <summary>傳回值，指出 <see cref="T:System.Decimal" /> 的兩個執行個體是否不相等。</summary>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 不相等則為 true，否則為 false。</returns>
      <param name="d1">
        <see cref="T:System.Decimal" />。</param>
      <param name="d2">
        <see cref="T:System.Decimal" />。</param>
    </member>
    <member name="M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)">
      <summary>傳回數值，指出指定的 <see cref="T:System.Decimal" /> 是否小於另一個指定的 <see cref="T:System.Decimal" />。</summary>
      <returns>如果 <paramref name="d1" /> 小於 <paramref name="d2" /> 則為 true，否則為 false。</returns>
      <param name="d1">
        <see cref="T:System.Decimal" />。</param>
      <param name="d2">
        <see cref="T:System.Decimal" />。</param>
    </member>
    <member name="M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)">
      <summary>傳回數值，指出指定的 <see cref="T:System.Decimal" /> 是否小於或等於另一個指定的 <see cref="T:System.Decimal" />。</summary>
      <returns>如果 <paramref name="d1" /> 小於或等於 <paramref name="d2" /> 則為 true，否則為 false。</returns>
      <param name="d1">
        <see cref="T:System.Decimal" />。</param>
      <param name="d2">
        <see cref="T:System.Decimal" />。</param>
    </member>
    <member name="M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)">
      <summary>傳回從兩個指定的 <see cref="T:System.Decimal" /> 值相除所得的餘數。</summary>
      <returns>
        <paramref name="d1" /> 除以 <paramref name="d2" /> 所得的 <see cref="T:System.Decimal" /> 餘數。</returns>
      <param name="d1">
        <see cref="T:System.Decimal" /> (被除數)。</param>
      <param name="d2">
        <see cref="T:System.Decimal" /> (除數)。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> 為 零。</exception>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)">
      <summary>乘兩個指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <returns>
        <paramref name="d1" /> 乘以 <paramref name="d2" /> 的 <see cref="T:System.Decimal" /> 結果。</returns>
      <param name="d1">
        <see cref="T:System.Decimal" />。</param>
      <param name="d2">
        <see cref="T:System.Decimal" />。</param>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)">
      <summary>將兩個指定的 <see cref="T:System.Decimal" /> 值相減。</summary>
      <returns>
        <paramref name="d1" /> 減去 <paramref name="d2" /> 的 <see cref="T:System.Decimal" /> 結果。</returns>
      <param name="d1">
        <see cref="T:System.Decimal" />。</param>
      <param name="d2">
        <see cref="T:System.Decimal" />。</param>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_UnaryNegation(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 運算元值變成相反值。</summary>
      <returns>
        <paramref name="d" /> 乘以負一 (-1) 的乘積。</returns>
      <param name="d">
        <see cref="T:System.Decimal" /> 運算元。</param>
    </member>
    <member name="M:System.Decimal.op_UnaryPlus(System.Decimal)">
      <summary>傳回 <see cref="T:System.Decimal" /> 運算元的值 (運算元的正負號不變)。</summary>
      <returns>運算元 <paramref name="d" /> 的值。</returns>
      <param name="d">
        <see cref="T:System.Decimal" /> 運算元。</param>
    </member>
    <member name="M:System.Decimal.Parse(System.String)">
      <summary>將數字的字串表示轉換為它對等的 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，等於包含在 <paramref name="s" /> 中的數字。</returns>
      <param name="s">要轉換的數字的字串表示。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式中數字的字串表示轉換成它的對等 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，等於包含在 <paramref name="s" /> 中的數字，如同 <paramref name="style" /> 所指定。</returns>
      <param name="s">要轉換的數字的字串表示。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式元素。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Number" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 為 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字</exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>使用指定的樣式和特定文化特性格式，將數字的字串表示轉換為其對等的 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，等於包含在 <paramref name="s" /> 中的數字，如同 <paramref name="style" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="s">要轉換的數字的字串表示。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式元素。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Number" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件，可提供關於 <paramref name="s" /> 的特定文化特性的格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 為 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的特定文化特性格式資訊，將數字的字串表示轉換為其對等的 <see cref="T:System.Decimal" />。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，等於包含在 <paramref name="s" /> 中的數字，如同 <paramref name="provider" /> 所指定。</returns>
      <param name="s">要轉換的數字的字串表示。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供關於 <paramref name="s" /> 的特定文化特性剖析資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不屬於正確的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Decimal.Remainder(System.Decimal,System.Decimal)">
      <summary>計算兩個 <see cref="T:System.Decimal" /> 值相除後的餘數。</summary>
      <returns>
        <see cref="T:System.Decimal" />，為 <paramref name="d1" /> 除以 <paramref name="d2" /> 後的餘數。</returns>
      <param name="d1">
        <see cref="T:System.Decimal" /> (被除數)。</param>
      <param name="d2">
        <see cref="T:System.Decimal" /> (除數)。</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> 為零。</exception>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.Int32)">
      <summary>將 <see cref="T:System.Decimal" /> 值捨入為指定的小數位數。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，等於捨入為 <paramref name="decimals" /> 小數位數的 <paramref name="d" />。</returns>
      <param name="d">要捨入的 <see cref="T:System.Decimal" /> 值。</param>
      <param name="decimals">從 0 到 28 的值，此值指定要捨入到的小數位數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> 不是從 0 到 28 的值。</exception>
    </member>
    <member name="M:System.Decimal.Subtract(System.Decimal,System.Decimal)">
      <summary>將另一個指定的 <see cref="T:System.Decimal" /> 值減去某個值。</summary>
      <returns>
        <paramref name="d1" /> 減去 <paramref name="d2" /> 的 <see cref="T:System.Decimal" /> 結果。</returns>
      <param name="d1">
        <see cref="T:System.Decimal" /> (被減數)。</param>
      <param name="d2">
        <see cref="T:System.Decimal" /> (減數)。</param>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零則為 true，否則為 false。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.OverflowException">產生的整數值小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.OverflowException">產生的整數值小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <param name="provider">參數已忽略。</param>
      <exception cref="T:System.OverflowException">產生的整數值小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.OverflowException">產生的整數值小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.OverflowException">產生的整數值小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <param name="type">將此 <see cref="T:System.Decimal" /> 執行個體的值轉換成的目標型別。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的特定文化特性資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.InvalidCastException">不支援所要求的型別轉換。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.OverflowException">產生的整數值小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.OverflowException">產生的整數值小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.OverflowException">產生的整數值小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToByte(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 8 位元不帶正負號整數。</summary>
      <returns>8 位元不帶正負號的整數，等於 <paramref name="value" />。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToDouble(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的雙精確度浮點數。</summary>
      <returns>雙精確度浮點數，等於 <paramref name="d" />。</returns>
      <param name="d">要進行轉換的 <see cref="T:System.Decimal" /> 值。</param>
    </member>
    <member name="M:System.Decimal.ToInt16(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 16 位元帶正負號整數。</summary>
      <returns>16 位元帶正負號的整數，等於 <paramref name="value" />。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToInt32(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 32 位元帶正負號整數。</summary>
      <returns>32 位元帶正負號的整數，等於 <paramref name="d" /> 的值。</returns>
      <param name="d">要進行轉換的 <see cref="T:System.Decimal" /> 值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> 小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToInt64(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 64 位元帶正負號整數。</summary>
      <returns>64 位元帶正負號的整數，等於 <paramref name="d" /> 的值。</returns>
      <param name="d">要進行轉換的 <see cref="T:System.Decimal" /> 值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> 小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToSByte(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 8 位元帶正負號整數。</summary>
      <returns>8 位元帶正負號的整數，等於 <paramref name="value" />。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToSingle(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，等於 <paramref name="d" /> 的值。</returns>
      <param name="d">要轉換的 <see cref="T:System.Decimal" /> 值。</param>
    </member>
    <member name="M:System.Decimal.ToString">
      <summary>將此執行個體的數值轉換為它的對等字串表示。</summary>
      <returns>字串，表示此執行個體的值。</returns>
    </member>
    <member name="M:System.Decimal.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Decimal.ToString(System.String)">
      <summary>使用指定格式，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">標準或自訂數值格式字串 (請參閱「備註」)。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。</exception>
    </member>
    <member name="M:System.Decimal.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">標準或自訂數值格式字串 (請參閱「備註」)。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，可提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。</exception>
    </member>
    <member name="M:System.Decimal.ToUInt16(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 16 位元不帶正負號整數。</summary>
      <returns>16 位元不帶正負號的整數，等於 <paramref name="value" /> 的值。</returns>
      <param name="value">要轉換的 <see cref="T:System.Decimal" /> 值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大於 <see cref="F:System.UInt16.MaxValue" /> 或小於 <see cref="F:System.UInt16.MinValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToUInt32(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 32 位元不帶正負號整數。</summary>
      <returns>32 位元不帶正負號的整數，等於 <paramref name="d" /> 的值。</returns>
      <param name="d">要轉換的 <see cref="T:System.Decimal" /> 值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> 是負的或大於 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToUInt64(System.Decimal)">
      <summary>將指定的 <see cref="T:System.Decimal" /> 值轉換為對等的 64 位元不帶正負號整數。</summary>
      <returns>64 位元不帶正負號的整數，等於 <paramref name="d" /> 的值。</returns>
      <param name="d">要轉換的 <see cref="T:System.Decimal" /> 值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> 是負的或大於 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.Truncate(System.Decimal)">
      <summary>傳回指定 <see cref="T:System.Decimal" /> 的整數數字；捨棄任何的小數數字。</summary>
      <returns>將 <paramref name="d" /> 趨近零捨入為最接近之整數的 <see cref="T:System.Decimal" /> 結果。</returns>
      <param name="d">要截斷的 <see cref="T:System.Decimal" />。</param>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Decimal@)">
      <summary>將數字的字串表示轉換為它對等的 <see cref="T:System.Decimal" />。傳回值會指出轉換是成功或是失敗。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">要轉換的數字的字串表示。</param>
      <param name="result">傳回此方法時，如果轉換成功，則包含 <paramref name="s" /> 所含數值的對等 <see cref="T:System.Decimal" /> 數字，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、不是有效格式的數字，或表示小於 <see cref="F:System.Decimal.MinValue" /> 或者大於 <see cref="F:System.Decimal.MaxValue" /> 的數字，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
      <summary>使用指定的樣式和特定文化特性格式，將數字的字串表示轉換為其對等的 <see cref="T:System.Decimal" />。傳回值會指出轉換是成功或是失敗。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">要轉換的數字的字串表示。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的位元組合，指出 <paramref name="s" /> 的允許格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Number" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件，可提供關於 <paramref name="s" /> 的特定文化特性剖析資訊。</param>
      <param name="result">傳回此方法時，如果轉換成功，則包含 <paramref name="s" /> 所含數值的對等 <see cref="T:System.Decimal" /> 數字，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 為 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
    </member>
    <member name="F:System.Decimal.Zero">
      <summary>表示數字零 (0)。</summary>
    </member>
    <member name="T:System.Delegate">
      <summary>表示委派，它是參考到靜態方法或該類別的類別執行個體和執行個體方法 (Instance Method) 的資料結構。</summary>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
      <summary>串連兩個委派的引動過程清單。</summary>
      <returns>具有引動過程清單的新委派，此清單可串連該順序的 <paramref name="a" /> 和 <paramref name="b" /> 的引動過程清單。如果 <paramref name="b" /> 為 null，則會傳回 <paramref name="a" />；如果 <paramref name="a" /> 為 null 參考，則會傳回 <paramref name="b" />；如果 <paramref name="a" /> 和 <paramref name="b" /> 兩者都是 null 參考，則會傳回 null 參考。</returns>
      <param name="a">引動過程清單首先到達的委派。</param>
      <param name="b">引動過程清單最後到達的委派。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="a" /> 和 <paramref name="b" /> 都不是 null，而且 <paramref name="a" /> 和 <paramref name="b" /> 不是相同委派型別的執行個體。</exception>
      <exception cref="T:System.MethodAccessException">應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate[])">
      <summary>串連委派陣列的引動過程清單。</summary>
      <returns>具有引動過程清單的新委派，此清單可串連 <paramref name="delegates" /> 陣列中委派的引動過程清單。如果 <paramref name="delegates" /> 為 null、<paramref name="delegates" /> 中沒有項目，或者 <paramref name="delegates" /> 中的每個項目都是 null，則傳回 null。</returns>
      <param name="delegates">要結合的委派陣列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegates" /> 中的所有非 Null 元素並非都是相同委派型別的執行個體。</exception>
    </member>
    <member name="M:System.Delegate.CombineImpl(System.Delegate)">
      <summary>串連特定委派與目前委派的引動過程清單。</summary>
      <returns>具有引動過程清單的新委派，此清單可串連目前委派的引動過程清單和 <paramref name="d" /> 的引動過程清單之委派；而在 <paramref name="d" /> 為 null 時，則為目前委派。</returns>
      <param name="d">其引動過程清單會與目前委派之引動過程清單合併的委派。</param>
      <exception cref="T:System.MulticastNotSupportedException">在所有情況下。</exception>
      <exception cref="T:System.MethodAccessException">應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)">
      <summary>建立指定之型別的委派，其表示指定之靜態或執行個體方法，並有指定第 1 個引數。</summary>
      <returns>指定之型別的委派，其表示指定的靜態或執行個體方法。</returns>
      <param name="type">要建立的委派型別。</param>
      <param name="firstArgument">此委派要繫結的物件，或是 null，表示將 <paramref name="method" /> 視為 static (Visual Basic 中則為 Shared)。</param>
      <param name="method">委派所要表示的靜態或執行個體方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。-或-<paramref name="method" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不繼承 <see cref="T:System.MulticastDelegate" />。-或-<paramref name="type" /> 不是 RuntimeType。請參閱「[c1439fb5-cf76-475d-a9d2-fe64ba858858]」。-或-<paramref name="method" /> 無法繫結。-或-<paramref name="method" /> 不是 RuntimeMethodInfo。請參閱「[c1439fb5-cf76-475d-a9d2-fe64ba858858]」。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 Invoke 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有 <paramref name="method" /> 的存取權限。-或-應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)">
      <summary>建立指定之型別的委派，其表示指定之靜態或執行個體方法，並有指定第 1 個引數以及繫結失敗時所發生的行為。</summary>
      <returns>指定之型別的委派，表示指定之靜態或執行個體方法；如果 <paramref name="throwOnBindFailure" /> 為 false，且委派無法繫結至 <paramref name="method" />，則為 null。</returns>
      <param name="type">表示要建立之委派的型別。</param>
      <param name="firstArgument">委派所表示之方法的第 1 個引數。對於執行個體方法而言，它必須與執行個體型別相容。</param>
      <param name="method">委派所要表示的靜態或執行個體方法。</param>
      <param name="throwOnBindFailure">true 表示如果無法繫結 <paramref name="method" /> 則擲回例外狀況，否則為 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。-或-<paramref name="method" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不繼承 <see cref="T:System.MulticastDelegate" />。-或-<paramref name="type" /> 不是 RuntimeType。請參閱「[c1439fb5-cf76-475d-a9d2-fe64ba858858]」。-或-<paramref name="method" /> 無法繫結，且 <paramref name="throwOnBindFailure" /> 為 true。-或-<paramref name="method" /> 不是 RuntimeMethodInfo。請參閱「[c1439fb5-cf76-475d-a9d2-fe64ba858858]」。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 Invoke 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有 <paramref name="method" /> 的存取權限。-或-應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>建立指定型別的委派，此委派表示要在指定的類別執行個體上叫用的指定執行個體方法。</summary>
      <returns>指定型別的委派，表示要在指定的類別執行個體上叫用的指定執行個體方法。</returns>
      <param name="type">要建立的委派型別。</param>
      <param name="target">用來叫用 <paramref name="method" /> 的類別執行個體。</param>
      <param name="method">委派要表示的執行個體方法名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。-或-<paramref name="target" /> 為 null。-或-<paramref name="method" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不繼承 <see cref="T:System.MulticastDelegate" />。-或-<paramref name="type" /> 不是 RuntimeType。請參閱「[c1439fb5-cf76-475d-a9d2-fe64ba858858]」。-或-<paramref name="method" /> 不是執行個體方法。-或-<paramref name="method" /> 無法繫結，例如因為無法找到。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 Invoke 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有 <paramref name="method" /> 的存取權限。-或-應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)">
      <summary>建立指定型別的委派，此委派表示要在指定的類別執行個體上，使用指定的大小寫區分來叫用的指定執行個體方法。</summary>
      <returns>指定型別的委派，表示要在指定的類別執行個體上叫用的指定執行個體方法。</returns>
      <param name="type">要建立的委派型別。</param>
      <param name="target">用來叫用 <paramref name="method" /> 的類別執行個體。</param>
      <param name="method">委派要表示的執行個體方法名稱。</param>
      <param name="ignoreCase">true 表示在比較方法名稱時忽略大小寫，否則為 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。-或-<paramref name="target" /> 為 null。-或-<paramref name="method" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不繼承 <see cref="T:System.MulticastDelegate" />。-或-<paramref name="type" /> 不是 RuntimeType。請參閱「[c1439fb5-cf76-475d-a9d2-fe64ba858858]」。-或-<paramref name="method" /> 不是執行個體方法。-或-<paramref name="method" /> 無法繫結，例如因為無法找到。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 Invoke 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有 <paramref name="method" /> 的存取權限。-或-應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)">
      <summary>建立指定之型別的委派，其表示要在指定的類別執行個體上叫用的指定之執行個體方法，且會指定區分大小寫的方式以及在繫結失敗時要發生的行為。</summary>
      <returns>指定型別的委派，表示要在指定的類別執行個體上叫用的指定執行個體方法。</returns>
      <param name="type">要建立的委派型別。</param>
      <param name="target">用來叫用 <paramref name="method" /> 的類別執行個體。</param>
      <param name="method">委派要表示的執行個體方法名稱。</param>
      <param name="ignoreCase">true 表示在比較方法名稱時忽略大小寫，否則為 false。</param>
      <param name="throwOnBindFailure">true 表示如果無法繫結 <paramref name="method" /> 則擲回例外狀況，否則為 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。-或-<paramref name="target" /> 為 null。-或-<paramref name="method" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不繼承 <see cref="T:System.MulticastDelegate" />。-或-<paramref name="type" /> 不是 RuntimeType。請參閱「[c1439fb5-cf76-475d-a9d2-fe64ba858858]」。-或-<paramref name="method" /> 不是執行個體方法。-或-<paramref name="method" /> 無法繫結；例如，因為找不到且 <paramref name="throwOnBindFailure" /> 為 true。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 Invoke 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有 <paramref name="method" /> 的存取權限。-或-應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)">
      <summary>建立指定型別的委派來表示指定的靜態方法。</summary>
      <returns>指定型別的委派，用來表示指定的靜態方法。</returns>
      <param name="type">要建立的委派型別。</param>
      <param name="method">委派所要表示的靜態或執行個體方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。-或-<paramref name="method" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不繼承 <see cref="T:System.MulticastDelegate" />。-或-<paramref name="type" /> 不是 RuntimeType。請參閱「[c1439fb5-cf76-475d-a9d2-fe64ba858858]」。-或-<paramref name="method" /> 無法繫結。-或-<paramref name="method" /> 不是 RuntimeMethodInfo。請參閱「[c1439fb5-cf76-475d-a9d2-fe64ba858858]」。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 Invoke 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有 <paramref name="method" /> 的存取權限。-或-應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)">
      <summary>建立指定之型別的委派，用來表示指定之靜態方法，並包含在繫結失敗時發生的指定之行為。</summary>
      <returns>指定型別的委派，用來表示指定的靜態方法。</returns>
      <param name="type">要建立的委派型別。</param>
      <param name="method">委派所要表示的靜態或執行個體方法。</param>
      <param name="throwOnBindFailure">true 表示如果無法繫結 <paramref name="method" /> 則擲回例外狀況，否則為 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。-或-<paramref name="method" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不繼承 <see cref="T:System.MulticastDelegate" />。-或-<paramref name="type" /> 不是 RuntimeType。請參閱「[c1439fb5-cf76-475d-a9d2-fe64ba858858]」。-或-<paramref name="method" /> 無法繫結，且 <paramref name="throwOnBindFailure" /> 為 true。-或-<paramref name="method" /> 不是 RuntimeMethodInfo。請參閱「[c1439fb5-cf76-475d-a9d2-fe64ba858858]」。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 Invoke 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有 <paramref name="method" /> 的存取權限。-或-應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)">
      <summary>建立指定型別的委派，此委派表示指定類別的指定靜態方法。</summary>
      <returns>指定型別的委派，表示指定類別的指定靜態方法。</returns>
      <param name="type">要建立的委派型別。</param>
      <param name="target">實作 <paramref name="method" /> 的類別。</param>
      <param name="method">委派要表示的靜態方法名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。-或-<paramref name="target" /> 為 null。-或-<paramref name="method" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不繼承 <see cref="T:System.MulticastDelegate" />。-或-<paramref name="type" /> 不是 RuntimeType。請參閱「[c1439fb5-cf76-475d-a9d2-fe64ba858858]」。-或-<paramref name="target" /> 不是 RuntimeType。-或-<paramref name="target" /> 為開放式泛型型別。也就是說，它的 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性為 true。-或-<paramref name="method" /> 不是 static 方法 (在 Visual Basic 中為 Shared 方法)。-或-<paramref name="method" /> 無法繫結；例如，因為找不到且 <paramref name="throwOnBindFailure" /> 為 true。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 Invoke 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有 <paramref name="method" /> 的存取權限。-或-應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)">
      <summary>建立指定之型別的委派，其表示指定之類別的指定之靜態方法，且指定區分大小寫的方式。</summary>
      <returns>指定型別的委派，表示指定類別的指定靜態方法。</returns>
      <param name="type">要建立的委派型別。</param>
      <param name="target">實作 <paramref name="method" /> 的類別。</param>
      <param name="method">委派要表示的靜態方法名稱。</param>
      <param name="ignoreCase">true 表示在比較方法名稱時忽略大小寫，否則為 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。-或-<paramref name="target" /> 為 null。-或-<paramref name="method" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不繼承 <see cref="T:System.MulticastDelegate" />。-或-<paramref name="type" /> 不是 RuntimeType。請參閱「[c1439fb5-cf76-475d-a9d2-fe64ba858858]」。-或-<paramref name="target" /> 不是 RuntimeType。-或-<paramref name="target" /> 為開放式泛型型別。也就是說，它的 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性為 true。-或-<paramref name="method" /> 不是 static 方法 (在 Visual Basic 中為 Shared 方法)。-或-<paramref name="method" /> 無法繫結，例如因為無法找到。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 Invoke 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有 <paramref name="method" /> 的存取權限。-或-應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)">
      <summary>建立指定之型別的委派，其表示指定之類別的指定之靜態方法，且會指定區分大小寫的方式以及在繫結失敗時要發生的行為。</summary>
      <returns>指定型別的委派，表示指定類別的指定靜態方法。</returns>
      <param name="type">要建立的委派型別。</param>
      <param name="target">實作 <paramref name="method" /> 的類別。</param>
      <param name="method">委派要表示的靜態方法名稱。</param>
      <param name="ignoreCase">true 表示在比較方法名稱時忽略大小寫，否則為 false。</param>
      <param name="throwOnBindFailure">true 表示如果無法繫結 <paramref name="method" /> 則擲回例外狀況，否則為 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。-或-<paramref name="target" /> 為 null。-或-<paramref name="method" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不繼承 <see cref="T:System.MulticastDelegate" />。-或-<paramref name="type" /> 不是 RuntimeType。請參閱「[c1439fb5-cf76-475d-a9d2-fe64ba858858]」。-或-<paramref name="target" /> 不是 RuntimeType。-或-<paramref name="target" /> 為開放式泛型型別。也就是說，它的 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性為 true。-或-<paramref name="method" /> 不是 static 方法 (在 Visual Basic 中為 Shared 方法)。-或-<paramref name="method" /> 無法繫結；例如，因為找不到且 <paramref name="throwOnBindFailure" /> 為 true。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 Invoke 方法。</exception>
      <exception cref="T:System.MethodAccessException">呼叫端沒有 <paramref name="method" /> 的存取權限。-或-應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="M:System.Delegate.DynamicInvoke(System.Object[])">
      <summary>動態叫用 (晚期繫結) 目前委派所表示的方法。</summary>
      <returns>物件，由委派所表示的方法傳回。</returns>
      <param name="args">物件的陣列，這些物件是要傳遞至目前委派所表示方法的引數。-或-如果目前委派所表示的方法不需要引數，則為 null 參考 (在 Visual Basic 中為 Nothing)。</param>
      <exception cref="T:System.MemberAccessException">呼叫端無法存取委派所表示的方法 (例如，如果方法是私用的)。-或-在 <paramref name="args" /> 中列示的參數數目、順序或型別是無效的。</exception>
      <exception cref="T:System.Reflection.TargetException">委派所表示的方法是執行個體方法，並且目標物件是 null。-或-委派所表示的方法在不支援該方法的物件或類別上被叫用。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">其中一個封裝的方法會擲回例外狀況。</exception>
      <exception cref="T:System.MethodAccessException">應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="M:System.Delegate.Equals(System.Object)">
      <summary>判斷指定的物件和目前的委派是否具有相同型別，並共用相同的目標、方法和引動過程清單。</summary>
      <returns>如果 <paramref name="obj" /> 和目前的委派具有相同的目標、方法和引動過程清單，則為 true，否則為 false。</returns>
      <param name="obj">要與目前委派相比較的物件。</param>
      <exception cref="T:System.MemberAccessException">呼叫端無法存取委派所表示的方法 (例如，如果方法為私用的)。</exception>
      <exception cref="T:System.MethodAccessException">應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="M:System.Delegate.GetHashCode">
      <summary>傳回委派的雜湊程式碼。</summary>
      <returns>委派的雜湊程式碼。</returns>
      <exception cref="T:System.MethodAccessException">應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="M:System.Delegate.GetInvocationList">
      <summary>傳回委派的引動過程清單。</summary>
      <returns>委派的陣列，表示目前委派的引動過程清單。</returns>
      <exception cref="T:System.MethodAccessException">應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="P:System.Delegate.Method">
      <summary>取得委派所表示的方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />，描述委派所表示的方法。</returns>
      <exception cref="T:System.MemberAccessException">呼叫端無法存取委派所表示的方法 (例如，如果方法為私用的)。</exception>
      <exception cref="T:System.MethodAccessException">應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)">
      <summary>判斷指定的委派是否相等。</summary>
      <returns>如果 <paramref name="d1" /> 等於 <paramref name="d2" /> 則為 true，否則為 false。</returns>
      <param name="d1">要比較的第 1 個委派。</param>
      <param name="d2">要比較的第 2 個委派。</param>
      <exception cref="T:System.MethodAccessException">應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)">
      <summary>判斷指定的委派是否不相等。</summary>
      <returns>如果 <paramref name="d1" /> 不等於 <paramref name="d2" /> 則為 true，否則為 false。</returns>
      <param name="d1">要比較的第 1 個委派。</param>
      <param name="d2">要比較的第 2 個委派。</param>
      <exception cref="T:System.MethodAccessException">應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="M:System.Delegate.Remove(System.Delegate,System.Delegate)">
      <summary>從另一個委派的引動過程清單，移除委派的引動過程清單上最後 1 個元素。</summary>
      <returns>如果在 <paramref name="source" /> 的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則為新委派 (其具有藉由取得 <paramref name="source" /> 的引動過程清單並移除 <paramref name="value" /> 的引動過程清單上最後一個項目所形成的引動過程清單)。如果 <paramref name="value" /> 是 null，或未在 <paramref name="source" /> 的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則會傳回 <paramref name="source" />。如果 <paramref name="value" /> 的引動過程清單等於 <paramref name="source" /> 的引動過程清單，或是 <paramref name="source" /> 等於 null 參考，則會傳回 null 參考。</returns>
      <param name="source">委派，要從其中移除 <paramref name="value" /> 的引動過程清單。</param>
      <param name="value">委派，提供要從 <paramref name="source" /> 的引動過程清單移除的引動過程清單。</param>
      <exception cref="T:System.MemberAccessException">呼叫端無法存取委派所表示的方法 (例如，如果方法是私用的)。</exception>
      <exception cref="T:System.ArgumentException">委派型別不相符。</exception>
      <exception cref="T:System.MethodAccessException">應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)">
      <summary>從另一個委派的引動過程清單，移除委派的引動過程清單上所有的項目。</summary>
      <returns>如果在 <paramref name="source" /> 的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則為新委派 (其具有藉由取得 <paramref name="source" /> 的引動過程清單並移除 <paramref name="value" /> 的引動過程清單上所有項目所形成的引動過程清單)。如果 <paramref name="value" /> 是 null，或未在 <paramref name="source" /> 的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則會傳回 <paramref name="source" />。如果 <paramref name="value" /> 的引動過程清單等於 <paramref name="source" /> 的引動過程清單、<paramref name="source" /> 只包含等於 <paramref name="value" /> 引動過程清單的一系列引動過程清單，或是 <paramref name="source" /> 為 null 參考，則會傳回 null 參考。</returns>
      <param name="source">委派，要從其中移除 <paramref name="value" /> 的引動過程清單。</param>
      <param name="value">委派，提供要從 <paramref name="source" /> 的引動過程清單移除的引動過程清單。</param>
      <exception cref="T:System.MemberAccessException">呼叫端無法存取委派所表示的方法 (例如，如果方法是私用的)。</exception>
      <exception cref="T:System.ArgumentException">委派型別不相符。</exception>
    </member>
    <member name="M:System.Delegate.RemoveImpl(System.Delegate)">
      <summary>從另一個委派的引動過程清單移除委派的引動過程清單。</summary>
      <returns>如果在目前委派的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則為新委派 (其具有藉由取得目前委派的引動過程清單並移除 <paramref name="value" /> 的引動過程清單所形成的引動過程清單)。如果 <paramref name="value" /> 是 null，或未在目前委派的引動過程清單中找到 <paramref name="value" /> 的引動過程清單，則會傳回目前的委派。如果 <paramref name="value" /> 的引動過程清單等於目前委派的引動過程清單，則會傳回 null。</returns>
      <param name="d">委派，提供要從目前委派的引動過程清單移除的引動過程清單。</param>
      <exception cref="T:System.MemberAccessException">呼叫端無法存取委派所表示的方法 (例如，如果方法為私用的)。</exception>
      <exception cref="T:System.MethodAccessException">應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="P:System.Delegate.Target">
      <summary>取得目前的委派用來叫用執行個體方法的類別執行個體。</summary>
      <returns>如果目前的委派表示執行個體方法時，則為目前委派用來叫用執行個體方法的物件；如果此委派表示靜態方法，則為 null。</returns>
      <exception cref="T:System.MethodAccessException">應用程式程式碼會利用方法 (例如 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />)，嘗試存取此成員的晚期繫結。</exception>
    </member>
    <member name="T:System.DivideByZeroException">
      <summary>嘗試將整數或小數值除以零時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor">
      <summary>初始化 <see cref="T:System.DivideByZeroException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.DivideByZeroException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.DivideByZeroException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary>DLL 匯入中所指定的 DLL 找不到時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.DllNotFoundException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.DllNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.DllNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Double">
      <summary>表示雙精確度浮點數。</summary>
    </member>
    <member name="M:System.Double.CompareTo(System.Double)">
      <summary>比較此執行個體與雙精確度的浮點數值，並且傳回一個整數，指出此執行個體的值是小於、等於或大於特定的雙精確度浮點數值。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的相對值。傳回值描述小於零這個執行個體小於 <paramref name="value" />。-或-這個執行個體不是數字 (<see cref="F:System.Double.NaN" />)，而且 <paramref name="value" /> 是數字。零這個執行個體等於 <paramref name="value" />。-或-這個執行個體和 <paramref name="value" /> 都不是數字 (<see cref="F:System.Double.NaN" />)、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />。大於零這個執行個體大於 <paramref name="value" />。-或-這個執行個體是數字，而且 <paramref name="value" /> 為非數字 (<see cref="F:System.Double.NaN" />)。</returns>
      <param name="value">要比較的雙精確度浮點數。</param>
    </member>
    <member name="M:System.Double.CompareTo(System.Object)">
      <summary>比較此執行個體與特定物件，並且傳回一個整數，指出此執行個體的值是小於、等於或大於特定物件的值。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的相對值。值描述負整數這個執行個體小於 <paramref name="value" />。-或-這個執行個體不是數字 (<see cref="F:System.Double.NaN" />)，而且 <paramref name="value" /> 是數字。零這個執行個體等於 <paramref name="value" />。-或-這個執行個體和 <paramref name="value" /> 都是 Double.NaN、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />正整數這個執行個體大於 <paramref name="value" />。-或-這個執行個體是數字，而且 <paramref name="value" /> 為非數字 (<see cref="F:System.Double.NaN" />)。-或-<paramref name="value" /> 為 null。</returns>
      <param name="value">要比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Double" />。</exception>
    </member>
    <member name="F:System.Double.Epsilon">
      <summary>表示最小的正 <see cref="T:System.Double" /> 值大於零。此欄位為常數。</summary>
    </member>
    <member name="M:System.Double.Equals(System.Double)">
      <summary>傳回指出此執行個體和指定的 <see cref="T:System.Double" /> 物件是否表示相同值的值。</summary>
      <returns>如果 <paramref name="obj" /> 等於這個執行個體則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相比較的 <see cref="T:System.Double" /> 物件。</param>
    </member>
    <member name="M:System.Double.Equals(System.Object)">
      <summary>傳回值，指出此執行個體是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.Double" /> 的執行個體，並且等於此執行個體的值則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Double.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Double.GetTypeCode">
      <summary>傳回值型別 <see cref="T:System.Double" /> 的 <see cref="T:System.TypeCode" />。</summary>
      <returns>列舉常數、<see cref="F:System.TypeCode.Double" />。</returns>
    </member>
    <member name="M:System.Double.IsInfinity(System.Double)">
      <summary>傳回值，指出指定的數字是否評估為負或正的無限大。</summary>
      <returns>如果 <paramref name="d" /> 評估為 <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />，則為 true，否則為 false。</returns>
      <param name="d">雙精度浮點數。</param>
    </member>
    <member name="M:System.Double.IsNaN(System.Double)">
      <summary>傳回值，指出指定的數字是否評估為非數字 (<see cref="F:System.Double.NaN" />) 的值。</summary>
      <returns>如果 <paramref name="d" /> 評估為 <see cref="F:System.Double.NaN" /> 則為 true，否則為 false。</returns>
      <param name="d">雙精度浮點數。</param>
    </member>
    <member name="M:System.Double.IsNegativeInfinity(System.Double)">
      <summary>傳回值，指出指定的數字是否評估為負的無限大。</summary>
      <returns>如果 <paramref name="d" /> 評估為 <see cref="F:System.Double.NegativeInfinity" /> 則為 true，否則為 false。</returns>
      <param name="d">雙精度浮點數。</param>
    </member>
    <member name="M:System.Double.IsPositiveInfinity(System.Double)">
      <summary>傳回值，指出指定數字是否評估為正的無限大。</summary>
      <returns>如果 <paramref name="d" /> 評估為 <see cref="F:System.Double.PositiveInfinity" /> 則為 true，否則為 false。</returns>
      <param name="d">雙精度浮點數。</param>
    </member>
    <member name="F:System.Double.MaxValue">
      <summary>表示 <see cref="T:System.Double" /> 的最大可能值。此欄位為常數。</summary>
    </member>
    <member name="F:System.Double.MinValue">
      <summary>表示 <see cref="T:System.Double" /> 的最小可能值。此欄位為常數。</summary>
    </member>
    <member name="F:System.Double.NaN">
      <summary>表示不是數字 (NaN) 的值。此欄位為常數。</summary>
    </member>
    <member name="F:System.Double.NegativeInfinity">
      <summary>表示負無限大。此欄位為常數。</summary>
    </member>
    <member name="M:System.Double.op_Equality(System.Double,System.Double)">
      <summary>傳回值，這個值表示兩個指定的 <see cref="T:System.Double" /> 值是否相等。</summary>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 相等則為 true，否則為 false。</returns>
      <param name="left">要比較的第 1 個值。</param>
      <param name="right">要比較的第 2 個值。</param>
    </member>
    <member name="M:System.Double.op_GreaterThan(System.Double,System.Double)">
      <summary>傳回值，這個值表示某個指定的 <see cref="T:System.Double" /> 值是否大於另一個指定的 <see cref="T:System.Double" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 大於 <paramref name="right" /> 則為 true，否則為 false。</returns>
      <param name="left">要比較的第 1 個值。</param>
      <param name="right">要比較的第 2 個值。</param>
    </member>
    <member name="M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)">
      <summary>傳回值，這個值表示某個指定的 <see cref="T:System.Double" /> 值是否大於或等於另一個指定的 <see cref="T:System.Double" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 大於或等於 <paramref name="right" /> 則為 true，否則為 false。</returns>
      <param name="left">要比較的第 1 個值。</param>
      <param name="right">要比較的第 2 個值。</param>
    </member>
    <member name="M:System.Double.op_Inequality(System.Double,System.Double)">
      <summary>傳回值，這個值表示兩個指定的 <see cref="T:System.Double" /> 值是否相等。</summary>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等則為 true，否則為 false。</returns>
      <param name="left">要比較的第 1 個值。</param>
      <param name="right">要比較的第 2 個值。</param>
    </member>
    <member name="M:System.Double.op_LessThan(System.Double,System.Double)">
      <summary>傳回值，這個值表示某個指定的 <see cref="T:System.Double" /> 值是否小於另一個指定的 <see cref="T:System.Double" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 小於 <paramref name="right" /> 則為 true，否則為 false。</returns>
      <param name="left">要比較的第 1 個值。</param>
      <param name="right">要比較的第 2 個值。</param>
    </member>
    <member name="M:System.Double.op_LessThanOrEqual(System.Double,System.Double)">
      <summary>傳回值，這個值表示某個指定的 <see cref="T:System.Double" /> 值是否小於或等於另一個指定的 <see cref="T:System.Double" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 小於或等於 <paramref name="right" /> 則為 true，否則為 false。</returns>
      <param name="left">要比較的第 1 個值。</param>
      <param name="right">要比較的第 2 個值。</param>
    </member>
    <member name="M:System.Double.Parse(System.String)">
      <summary>將數字的字串表示轉換為其對等的雙精確度浮點數。</summary>
      <returns>雙精確度浮點數，相當於數值或以 <paramref name="s" /> 指定的符號。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 並不表示有效格式的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將數字的字串表示 (使用指定樣式) 轉換為其對等的雙精確度浮點數。</summary>
      <returns>雙精確度浮點數，相當於數值或以 <paramref name="s" /> 指定的符號。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式元素。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的組合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 並不表示有效格式的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>使用指定樣式和文化特性特定格式，將數字的字串表示轉換為其對等的雙精確度浮點數。</summary>
      <returns>雙精確度浮點數，相當於數值或以 <paramref name="s" /> 指定的符號。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式元素。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的組合。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不表示數值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 為 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.IFormatProvider)">
      <summary>將數字的字串表示 (使用指定的特定文化特性格式) 轉換為其對等的雙精確度浮點數。</summary>
      <returns>雙精確度浮點數，相當於數值或以 <paramref name="s" /> 指定的符號。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 並不表示有效格式的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
    </member>
    <member name="F:System.Double.PositiveInfinity">
      <summary>表示正無限大。此欄位為常數。</summary>
    </member>
    <member name="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零則為 true，否則為 false。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回<see cref="T:System.InvalidCastException" /></summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <param name="type">要將此 <see cref="T:System.Double" /> 值轉換成的型別。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的特定文化特性資訊。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Double.ToString">
      <summary>將此執行個體的數值轉換為它的對等字串表示。</summary>
      <returns>此執行個體值的字串表示。</returns>
    </member>
    <member name="M:System.Double.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Double.ToString(System.String)">
      <summary>使用指定格式，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">標準或自訂數值格式字串 (請參閱「備註」)。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。</exception>
    </member>
    <member name="M:System.Double.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">標準或自訂數值格式字串 (請參閱「備註」)。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Double@)">
      <summary>將數字的字串表示轉換為其對等的雙精確度浮點數。傳回值會指出轉換是成功或是失敗。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="result">當此方法傳回時，如果轉換成功便包含相對於 <paramref name="s" /> 參數的雙精確度浮點數，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、不是有效格式的數字，或表示小於 <see cref="F:System.Double.MinValue" /> 或者大於 <see cref="F:System.Double.MaxValue" /> 的數字，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <summary>使用指定樣式和文化特性特定格式，將數字的字串表示轉換為其對等的雙精確度浮點數。傳回值會指出轉換是成功或是失敗。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的位元組合，指出 <paramref name="s" /> 的允許格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的組合。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <param name="result">當此方法傳回時，如果轉換成功便包含相對於 <paramref name="s" /> 中數字值或符號的雙精確度浮點數，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、不是與 <paramref name="style" /> 相容的格式、表示小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字，或是如果 <paramref name="style" /> 不是有效的 <see cref="T:System.Globalization.NumberStyles" /> 列舉常數組合，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
    </member>
    <member name="T:System.EntryPointNotFoundException">
      <summary>當試著載入類別卻因沒有進入方法而告失敗時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.EntryPointNotFoundException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.EntryPointNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.EntryPointNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.Enum">
      <summary>提供列舉的基底類別。</summary>
    </member>
    <member name="M:System.Enum.#ctor">
      <summary>初始化 <see cref="T:System.Enum" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Enum.CompareTo(System.Object)">
      <summary>將此執行個體與指定的物件相比較，並傳回它們相對值的指示。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="target" /> 的關係。傳回值描述小於零這個執行個體的值小於 <paramref name="target" /> 的值。零這個執行個體的值等於 <paramref name="target" /> 的值。大於零這個執行個體的值大於 <paramref name="target" /> 的值。-或-<paramref name="target" /> 為 null。</returns>
      <param name="target">要比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 和此執行個體不是相同型別。</exception>
      <exception cref="T:System.InvalidOperationException">這個執行個體不是 <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" /> 或 <see cref="T:System.UInt64" /> 型別。</exception>
      <exception cref="T:System.NullReferenceException">這個執行個體是 null。</exception>
    </member>
    <member name="M:System.Enum.Equals(System.Object)">
      <summary>傳回值，指出此執行個體是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.Enum" />，且具有與這個執行個體相同的基礎型別和值，則為 true，否則為 false。</returns>
      <param name="obj">與此執行個體或 null 相互比較的物件。</param>
    </member>
    <member name="M:System.Enum.Format(System.Type,System.Object,System.String)">
      <summary>根據指定的格式，將指定列舉型別的指定數值轉換為相等的字串表示。</summary>
      <returns>
        <paramref name="value" /> 的字串表示。</returns>
      <param name="enumType">要進行轉換的數值列舉型別。</param>
      <param name="value">要進行轉換的值。</param>
      <param name="format">要使用的輸出格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" />、<paramref name="value" /> 或 <paramref name="format" /> 參數是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 參數不是 <see cref="T:System.Enum" /> 型別。-或-<paramref name="value" /> 來自與 <paramref name="enumType" /> 不同型別的列舉型別。-或-<paramref name="value" /> 的型別不是 <paramref name="enumType" /> 的基礎型別。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 參數包含無效的值。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> 等於 "X"，但是其列舉型別未知。</exception>
    </member>
    <member name="M:System.Enum.GetHashCode">
      <summary>傳回此執行個體值的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Enum.GetName(System.Type,System.Object)">
      <summary>擷取有指定數值的指定列舉的常數名稱。</summary>
      <returns>字串 (包含數值為 <paramref name="enumType" /> 的 <paramref name="value" /> 中的列舉常數名稱)，或 null (如果沒有發現這類常數)。</returns>
      <param name="enumType">列舉型別。</param>
      <param name="value">特定列舉常數之基礎型別的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。-或-<paramref name="value" /> 既不是 <paramref name="enumType" /> 型別也不是與 <paramref name="enumType" /> 相同的基礎型別。</exception>
    </member>
    <member name="M:System.Enum.GetNames(System.Type)">
      <summary>在指定的列舉型別中擷取常數名稱的陣列。</summary>
      <returns>在 <paramref name="enumType" /> 中的常數名稱字串陣列。</returns>
      <param name="enumType">列舉型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.GetTypeCode">
      <summary>傳回此執行個體的基礎 <see cref="T:System.TypeCode" />。</summary>
      <returns>這個執行個體的 <see cref="T:System.TypeCode" />。</returns>
      <exception cref="T:System.InvalidOperationException">列舉型別未知。</exception>
    </member>
    <member name="M:System.Enum.GetUnderlyingType(System.Type)">
      <summary>傳回指定列舉的基礎型別。</summary>
      <returns>
        <paramref name="enumType" /> 的基礎型別。</returns>
      <param name="enumType">要擷取其基礎型別的列舉。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.GetValues(System.Type)">
      <summary>在指定的列舉型別中擷取常數值的陣列。</summary>
      <returns>含有 <paramref name="enumType" /> 中之常數值的陣列。陣列的元素依列舉常數的二進位值排序。</returns>
      <param name="enumType">列舉型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.HasFlag(System.Enum)">
      <summary>判斷目前執行個體中是否設定一或多個位元欄位。</summary>
      <returns>如果 <paramref name="flag" /> 中設定的一個或多個位元欄位也在目前執行個體中設定，則為 true，否則為 false。</returns>
      <param name="flag">列舉值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> 與目前的執行個體屬於不同的型別。</exception>
    </member>
    <member name="M:System.Enum.IsDefined(System.Type,System.Object)">
      <summary>傳回具有指定數值的常數是否存在於指定列舉的指示。</summary>
      <returns>如果在 <paramref name="enumType" /> 中的常數有等於 <paramref name="value" /> 的數值，則為 true，否則為 false。</returns>
      <param name="enumType">列舉型別。</param>
      <param name="value">在 <paramref name="enumType" /> 中常數的數值或名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 Enum。-或-<paramref name="value" /> 的型別不是 <paramref name="enumType" />。-或-<paramref name="value" /> 的型別不是 <paramref name="enumType" /> 的基礎型別。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 不是 <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" />、<see cref="T:System.UInt64" /> 或 <see cref="T:System.String" /> 型別。</exception>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String)">
      <summary>把一或多個列舉常數的名稱或數字數值的字串表示轉換為一個對等列舉物件。</summary>
      <returns>
        <paramref name="enumType" /> 型別的物件，其數值以 <paramref name="value" /> 表示。</returns>
      <param name="enumType">列舉型別。</param>
      <param name="value">字串，包含要轉換的名稱或數值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。-或-<paramref name="value" /> 是空字串或是只包含泛空白字元。-或-<paramref name="value" /> 是個名稱，但不是為列舉型別所定義的其中一個具名常數。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 超出 <paramref name="enumType" /> 之基礎型別的範圍。</exception>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
      <summary>把一或多個列舉常數的名稱或數字數值的字串表示轉換為一個對等列舉物件。參數指定運算是否不區分大小寫。</summary>
      <returns>
        <paramref name="enumType" /> 型別的物件，其數值以 <paramref name="value" /> 表示。</returns>
      <param name="enumType">列舉的 <see cref="T:System.Type" />。</param>
      <param name="value">字串，包含要轉換的名稱或數值。</param>
      <param name="ignoreCase">如果 true，則忽略大小寫，否則區分大小寫。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。-或-<paramref name="value" /> 是空字串 ("") 或是只包含泛空白字元。-或-<paramref name="value" /> 是個名稱，但不是為列舉型別所定義的其中一個具名常數。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 超出 <paramref name="enumType" /> 之基礎型別的範圍。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>根據基礎型別，將目前值轉換成布林值 (Boolean)。</summary>
      <returns>此成員一律會擲回例外狀況。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>根據基礎型別，將目前值轉換成 8 位元不帶正負號的整數 (Unsigned Integer)。</summary>
      <returns>轉換的值。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>根據基礎型別，將目前值轉換成 Unicode 字元。</summary>
      <returns>此成員一律會擲回例外狀況。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>根據基礎型別，將目前值轉換成 <see cref="T:System.DateTime" />。</summary>
      <returns>此成員一律會擲回例外狀況。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>根據基礎型別，將目前值轉換成 <see cref="T:System.Decimal" />。</summary>
      <returns>此成員一律會擲回例外狀況。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>根據基礎型別，將目前值轉換成雙精確度浮點數。</summary>
      <returns>此成員一律會擲回例外狀況。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>根據基礎型別，將目前值轉換成 16 位元帶正負號的整數。</summary>
      <returns>轉換的值。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>根據基礎型別，將目前值轉換成 32 位元帶正負號的整數。</summary>
      <returns>轉換的值。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>根據基礎型別，將目前值轉換成 64 位元帶正負號的整數。</summary>
      <returns>轉換的值。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>根據基礎型別，將目前值轉換成 8 位元帶正負號的整數。</summary>
      <returns>轉換的值。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>根據基礎型別，將目前值轉換成單精確度浮點數。</summary>
      <returns>此成員一律會擲回例外狀況。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>根據基礎型別，將目前值轉換成指定的型別。</summary>
      <returns>轉換的值。</returns>
      <param name="type">要轉換過去的目標型別。</param>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>根據基礎型別，將目前值轉換成 16 位元不帶正負號的整數。</summary>
      <returns>轉換的值。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>根據基礎型別，將目前值轉換成 32 位元不帶正負號的整數。</summary>
      <returns>轉換的值。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>根據基礎型別，將目前值轉換成 64 位元不帶正負號的整數。</summary>
      <returns>轉換的值。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Object)">
      <summary>傳回設為指定值之指定的列舉的執行個體。</summary>
      <returns>值為 <paramref name="value" /> 的列舉物件。</returns>
      <param name="enumType">列舉。</param>
      <param name="value">值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。-或-<paramref name="value" /> 不是 <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" /> 或 <see cref="T:System.UInt64" /> 型別。</exception>
    </member>
    <member name="M:System.Enum.ToString">
      <summary>將此執行個體的值轉換為它的對等字串表示。</summary>
      <returns>此執行個體值的字串表示。</returns>
    </member>
    <member name="M:System.Enum.ToString(System.IFormatProvider)">
      <summary>此方法多載已過時，請改用 <see cref="M:System.Enum.ToString" />。</summary>
      <returns>此執行個體值的字串表示。</returns>
      <param name="provider">(已過時)</param>
    </member>
    <member name="M:System.Enum.ToString(System.String)">
      <summary>使用指定格式，將此執行個體的值轉換為它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">格式字串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 包含無效的規格。</exception>
    </member>
    <member name="M:System.Enum.ToString(System.String,System.IFormatProvider)">
      <summary>此方法多載已過時，請改用 <see cref="M:System.Enum.ToString(System.String)" />。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">格式規格。</param>
      <param name="provider">(已過時)</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不包含有效的格式規格。</exception>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
      <summary>把一或多個列舉常數的名稱或數字數值的字串表示轉換為一個對等列舉物件。參數會定義運算是否區分大小寫。指出轉換是否成功的傳回值。</summary>
      <returns>如果成功地轉換 <paramref name="value" /> 參數則為 true，否則為 false。</returns>
      <param name="value">要轉換之列舉名稱或基礎值的字串表示。</param>
      <param name="ignoreCase">true 表示忽略大小寫，false 表示區分大小寫。</param>
      <param name="result">當此方法傳回時，會包含型別 <paramref name="TEnum" /> 的物件，其值以 <paramref name="value" /> 表示。這個參數會以未初始化的狀態傳遞。</param>
      <typeparam name="TEnum">要將 <paramref name="value" /> 轉換成的列舉型別。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> 不是列舉型別。</exception>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,``0@)">
      <summary>把一或多個列舉常數的名稱或數字數值的字串表示轉換為一個對等列舉物件。指出轉換是否成功的傳回值。</summary>
      <returns>如果成功地轉換 <paramref name="value" /> 參數則為 true，否則為 false。</returns>
      <param name="value">要轉換之列舉名稱或基礎值的字串表示。</param>
      <param name="result">當此方法傳回時，會包含型別 <paramref name="TEnum" /> 的物件，其值以 <paramref name="value" /> 表示。這個參數會以未初始化的狀態傳遞。</param>
      <typeparam name="TEnum">要將 <paramref name="value" /> 轉換成的列舉型別。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> 不是列舉型別。</exception>
    </member>
    <member name="T:System.Environment">
      <summary>提供有關目前環境和平台的資訊，以及操作的方法。無法繼承此類別。</summary>
    </member>
    <member name="P:System.Environment.CurrentDirectory">
      <summary>取得目前工作目錄的完整路徑。</summary>
      <returns>含有目錄路徑的字串。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有適當的使用權限。</exception>
    </member>
    <member name="P:System.Environment.CurrentManagedThreadId">
      <summary>取得目前 Managed 執行緒的唯一識別項。</summary>
      <returns>整數，表示這個 Managed 執行緒的唯一識別項。</returns>
    </member>
    <member name="M:System.Environment.FailFast(System.String)">
      <summary>[安全性關鍵] 在將訊息寫入至 Windows 應用程式事件記錄檔後立即終止處理序，然後在向 Microsoft 報告錯誤時包含該訊息。</summary>
      <param name="message">解釋處理序結束原因的訊息；如果未提供任何解釋，則為 null。</param>
    </member>
    <member name="M:System.Environment.FailFast(System.String,System.Exception)">
      <summary>[安全性關鍵] 在將訊息寫入至 Windows 應用程式事件記錄檔後立即終止處理序，然後在向 Microsoft 報告錯誤時，包含該訊息和例外狀況資訊。</summary>
      <param name="message">解釋處理序結束原因的訊息；如果未提供任何解釋，則為 null。</param>
      <param name="exception">表示造成終止之錯誤的例外狀況。這通常是 catch 區塊中的例外狀況。</param>
    </member>
    <member name="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
      <summary>取得由指定列舉識別的系統特殊資料夾的路徑。</summary>
      <returns>如果所指定的系統特殊資料夾實體存在您的電腦中，則為到該資料夾的路徑；否則，則為空字串 ("")。如果作業系統沒有建立資料夾、現有資料夾會被刪除或資料夾是沒有對應到實體路徑的虛擬目錄 (例如 [我的電腦])，則資料夾不會實體存在。</returns>
      <param name="folder">列舉常數，識別系統特殊資料夾。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="folder" /> 不是 <see cref="T:System.Environment.SpecialFolder" /> 的成員。</exception>
      <exception cref="T:System.PlatformNotSupportedException">不支援目前的平台。</exception>
    </member>
    <member name="P:System.Environment.HasShutdownStarted">
      <summary>取得值，指出 Common Language Runtime 是否正在關閉，或目前的應用程式定義域是否正在卸載。</summary>
      <returns>如果 Common Language Runtime 正在關閉或目前的 <see cref="T:System.AppDomain" /> 正在卸載，則為 true；否則為 false。目前的應用程式定義域為 <see cref="T:System.AppDomain" />，它包含正在呼叫 <see cref="P:System.Environment.HasShutdownStarted" /> 的物件。</returns>
    </member>
    <member name="P:System.Environment.NewLine">
      <summary>取得為此環境定義的新行字串。</summary>
      <returns>非 Unix 平台中包含 "\r\n" 的字串。 或Unix 平台中包含 "\n" 的字串。</returns>
    </member>
    <member name="P:System.Environment.OSVersion">
      <summary>取得含有目前平台識別項和版本號碼的 <see cref="T:System.OperatingSystem" /> 物件。</summary>
      <returns>
        <see cref="T:System.OperatingSystem" /> 物件。</returns>
      <exception cref="T:System.InvalidOperationException">這個屬性無法取得系統版本。-或-取得的平台識別項不是 <see cref="T:System.PlatformID" /> 的成員。</exception>
    </member>
    <member name="P:System.Environment.ProcessorCount">
      <summary>取得目前電腦上的處理器數目。</summary>
      <returns>32 位元帶正負號的整數，可指定目前電腦上的處理器數目。沒有預設值。</returns>
    </member>
    <member name="P:System.Environment.TickCount">
      <summary>取得系統啟動後經過的毫秒數。</summary>
      <returns>32 位元帶正負號的整數，包含自上一次電腦啟動後所經過的毫秒時間量。</returns>
    </member>
    <member name="P:System.Environment.Version">
      <summary>取得描述 Common Language Runtime 的主要、次要、組建 (Build) 和修訂號碼的 <see cref="T:System.Version" /> 物件。</summary>
      <returns>
        <see cref="T:System.Version" /> 物件。</returns>
    </member>
    <member name="T:System.Environment.SpecialFolder">
      <summary>指定用來擷取系統特殊資料夾目錄路徑的列舉常數。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.ApplicationData">
      <summary>表示做為目前漫遊使用者的應用程式特定資料之通用儲存機制的目錄。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Favorites">
      <summary>表示做為使用者的我的最愛項目之通用儲存機制的目錄。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Personal">
      <summary>表示做為文件通用儲存機制的目錄。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Programs">
      <summary>包含使用者程式群組的目錄。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.StartMenu">
      <summary>包含 [開始] 功能表項目的目錄。</summary>
    </member>
    <member name="F:System.Environment.SpecialFolder.Startup">
      <summary>對應至使用者 [啟動] 程式群組的目錄。</summary>
    </member>
    <member name="T:System.EventArgs">
      <summary>
        <see cref="T:System.EventArgs" /> 是含有事件資料之類別的基底類別。</summary>
    </member>
    <member name="M:System.EventArgs.#ctor">
      <summary>初始化 <see cref="T:System.EventArgs" /> 類別的新執行個體。</summary>
    </member>
    <member name="F:System.EventArgs.Empty">
      <summary>表示不具有事件資料的事件。</summary>
    </member>
    <member name="T:System.EventHandler">
      <summary>表示處理不含事件資料之事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">未包含任何事件資料的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="T:System.EventHandler`1">
      <summary>表示將處理事件的方法。</summary>
      <param name="sender">事件來源。</param>
      <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
      <typeparam name="TEventArgs">此事件所產生的事件資料型別。</typeparam>
    </member>
    <member name="T:System.Exception">
      <summary>表示應用程式執行期間所發生的錯誤。</summary>
    </member>
    <member name="M:System.Exception.#ctor">
      <summary>初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Exception.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.Exception.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">目前例外狀況原因的例外狀況，如果沒有指定內部例外狀況，則為 null 參考 (Visual Basic 中的 Nothing)。</param>
    </member>
    <member name="P:System.Exception.Data">
      <summary>取得由索引鍵/值組所組成的集合，提供關於此例外狀況的額外使用者定義資訊。</summary>
      <returns>實作 <see cref="T:System.Collections.IDictionary" /> 介面的物件，含有由使用者定義之索引鍵/值組所組成的集合。預設值為空集合。</returns>
    </member>
    <member name="M:System.Exception.GetBaseException">
      <summary>在衍生類別中覆寫時，傳回一或多個後續的例外狀況的根本原因 <see cref="T:System.Exception" />。</summary>
      <returns>例外狀況鏈結中所擲回的第 1 個例外狀況。如果目前的例外狀況的 <see cref="P:System.Exception.InnerException" /> 屬性為 Null 參考 (在 Visual Basic 中為 Nothing)，則這個屬性會傳回目前的例外狀況。</returns>
    </member>
    <member name="M:System.Exception.GetType">
      <summary>取得目前執行個體的執行階段型別。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示目前執行個體的確實執行階段型別。</returns>
    </member>
    <member name="P:System.Exception.HelpLink">
      <summary>取得或設定與這個例外狀況相關聯說明檔的連結。</summary>
      <returns>Uniform Resource Name (URN) 或統一資源定位器 (URL)。</returns>
    </member>
    <member name="P:System.Exception.HResult">
      <summary>取得或設定 HRESULT，它是指派給特定例外狀況的編碼數值。</summary>
      <returns>HRESULT 值。</returns>
    </member>
    <member name="P:System.Exception.InnerException">
      <summary>取得造成目前例外狀況的 <see cref="T:System.Exception" /> 執行個體。</summary>
      <returns>Exception 的執行個體，描述造成目前例外狀況的錯誤。InnerException 屬性會傳回與傳遞到建構函式中相同的值；如果沒有提供內部例外值給建構函式，則傳回 null 參考 (在 Visual Basic 中為 Nothing)。此屬性是唯讀的。</returns>
    </member>
    <member name="P:System.Exception.Message">
      <summary>取得描述目前例外狀況的訊息。</summary>
      <returns>解釋例外狀況原因的錯誤訊息，或空字串 ("")。</returns>
    </member>
    <member name="P:System.Exception.Source">
      <summary>[安全性關鍵] 取得或設定造成錯誤的應用程式或物件的名稱。</summary>
      <returns>造成錯誤的應用程式或物件的名稱。</returns>
    </member>
    <member name="P:System.Exception.StackTrace">
      <summary>在擲回目前例外狀況時，取得呼叫堆疊上框架的字串表示。</summary>
      <returns>描述呼叫堆疊內容的字串，最先出現最近的方法呼叫。</returns>
    </member>
    <member name="M:System.Exception.ToString">
      <summary>建立並傳回目前例外狀況的字串表示。</summary>
      <returns>目前例外狀況的字串表示。</returns>
    </member>
    <member name="T:System.ExecutionEngineException">
      <summary>當 Common Language Runtime 執行引擎中有內部錯誤時，會擲回的例外狀況。無法繼承此類別。</summary>
    </member>
    <member name="T:System.FieldAccessException">
      <summary>當嘗試存取類別內私用的或保護的欄位為不合法時，會擲回的例外狀況。</summary>
    </member>
    <member name="T:System.FlagsAttribute">
      <summary>指出可將列舉視為位元欄位 (Bit Field)；也就是一組旗標。</summary>
    </member>
    <member name="M:System.FlagsAttribute.#ctor">
      <summary>初始化 <see cref="T:System.FlagsAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.FormatException">
      <summary>當引數的格式不符合叫用 (Invoke) 方法的參數規格時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.FormatException.#ctor">
      <summary>初始化 <see cref="T:System.FormatException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.FormatException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.FormatException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.FormatException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.Func`1">
      <summary>封裝沒有參數的方法，並傳回由 <paramref name="TResult" /> 參數所指定之型別值。</summary>
      <returns>此委派封裝之方法的傳回值。</returns>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`2">
      <summary>封裝具有 1 個參數的方法，並傳回由 <paramref name="TResult" /> 參數所指定之型別值。</summary>
      <returns>此委派封裝之方法的傳回值。</returns>
      <param name="arg">此委派封裝之方法的參數。</param>
      <typeparam name="T">這個委派所封裝之方法的參數型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`3">
      <summary>封裝具有 2 個參數的方法，並傳回由 <paramref name="TResult" /> 參數所指定的型別值。</summary>
      <returns>此委派封裝之方法的傳回值。</returns>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`4">
      <summary>封裝具有 3 個參數的方法，並傳回由 <paramref name="TResult" /> 參數所指定之型別值。</summary>
      <returns>此委派封裝之方法的傳回值。</returns>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`5">
      <summary>封裝具有 4 個參數的方法，並傳回由 <paramref name="TResult" /> 參數所指定之型別值。</summary>
      <returns>此委派封裝之方法的傳回值。</returns>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`6">
      <summary>封裝具有 5 個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <returns>此委派封裝之方法的傳回值。</returns>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`7">
      <summary>封裝具有 6 個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <returns>此委派封裝之方法的傳回值。</returns>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`8">
      <summary>封裝具有 7 個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <returns>此委派封裝之方法的傳回值。</returns>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Func`9">
      <summary>封裝具有 8 個參數的方法，並傳回由 <paramref name="TResult" /> 參數指定之型別的值。</summary>
      <returns>此委派封裝之方法的傳回值。</returns>
      <param name="arg1">此委派封裝之方法的第 1 個參數。</param>
      <param name="arg2">此委派封裝之方法的第 2 個參數。</param>
      <param name="arg3">此委派封裝之方法的第 3 個參數。</param>
      <param name="arg4">此委派封裝之方法的第 4 個參數。</param>
      <param name="arg5">此委派封裝之方法的第 5 個參數。</param>
      <param name="arg6">此委派封裝之方法的第 6 個參數。</param>
      <param name="arg7">此委派封裝之方法的第 7 個參數。</param>
      <param name="arg8">此委派封裝之方法的第 8 個參數。</param>
      <typeparam name="T1">這個委派所封裝方法的第一個參數之型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
      <typeparam name="T2">此委派封裝之方法的第 2 個參數之型別。</typeparam>
      <typeparam name="T3">此委派封裝之方法的第 3 個參數之型別。</typeparam>
      <typeparam name="T4">此委派封裝之方法之第 4 個參數的型別。</typeparam>
      <typeparam name="T5">此委派封裝之方法之第 5 個參數的型別。</typeparam>
      <typeparam name="T6">此委派封裝之方法之第 6 個參數的型別。</typeparam>
      <typeparam name="T7">此委派封裝之方法之第 7 個參數的型別。</typeparam>
      <typeparam name="T8">此委派封裝之方法之第 8 個參數的型別。</typeparam>
      <typeparam name="TResult">這個委派所封裝之方法的傳回值之型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.GC">
      <summary>控制系統記憶體回收行程，它是自動重新利用未使用之記憶體的服務。</summary>
    </member>
    <member name="M:System.GC.AddMemoryPressure(System.Int64)">
      <summary>[安全性關鍵] 告知執行階段，在排定記憶體回收時應考慮的大量 Unmanaged 記憶體配置。</summary>
      <param name="bytesAllocated">已配置的 Unmanaged 記憶體累加數量。</param>
    </member>
    <member name="M:System.GC.Collect">
      <summary>誘發立即執行所有層代的記憶體回收。</summary>
    </member>
    <member name="M:System.GC.Collect(System.Int32)">
      <summary>[安全性關鍵] 誘發立即執行指定層代的記憶體回收。</summary>
      <param name="generation">要回收的層代。</param>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode)">
      <summary>在 <see cref="T:System.GCCollectionMode" /> 值所指定的時間，強制執行層代 0 至指定層代的記憶體回收。</summary>
      <param name="generation">可以執行記憶體回收的最舊層代編號。</param>
      <param name="mode">其中一個列舉值，指定記憶體回收的行為。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 無效。-或-<paramref name="mode" /> 不是其中一個 <see cref="T:System.GCCollectionMode" /> 值。</exception>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)">
      <summary>根據指定是否執行區塊式回收的值，在 <see cref="T:System.GCCollectionMode" /> 值所指定的時間，強制執行層代 0 至指定層代的記憶體回收。</summary>
      <param name="generation">可以執行記憶體回收的最舊層代編號。</param>
      <param name="mode">其中一個列舉值，指定要強制或最佳化記憶體回收。</param>
      <param name="blocking">true 表示執行區塊式記憶體回收，false 表示盡可能執行背景記憶體回收。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 無效。-或-<paramref name="mode" /> 不是其中一個 <see cref="T:System.GCCollectionMode" /> 值。</exception>
    </member>
    <member name="M:System.GC.CollectionCount(System.Int32)">
      <summary>傳回指定物件層代已發生記憶體回收的次數。</summary>
      <returns>自從啟動處理序之後，指定層代已發生記憶體回收的次數。</returns>
      <param name="generation">要判斷記憶體回收計數的物件層代。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 小於 0。</exception>
    </member>
    <member name="M:System.GC.GetGeneration(System.Object)">
      <summary>[安全性關鍵] 擷取指定之物件的層代。</summary>
      <returns>指定之物件的層代編號。</returns>
      <param name="obj">要檢查的物件。</param>
    </member>
    <member name="M:System.GC.GetTotalMemory(System.Boolean)">
      <summary>擷取目前被視為已配置的位元組數。參數會指出此方法是否可以先等待短暫間隔後再傳回，以便讓系統回收記憶體和最終處理物件。</summary>
      <returns>數目，為目前配置於 Managed 記憶體中位元組的最佳可用近似數目。</returns>
      <param name="forceFullCollection">true 表示此方法可以等待記憶體回收發生後再傳回，否則為 false。</param>
    </member>
    <member name="M:System.GC.KeepAlive(System.Object)">
      <summary>參考指定的物件，使它從目前常式的開始至呼叫此方法時都不適合記憶體回收。</summary>
      <param name="obj">要參考的物件。</param>
    </member>
    <member name="P:System.GC.MaxGeneration">
      <summary>取得系統目前支援的最大層代編號。</summary>
      <returns>範圍從零至所支援最大層代編號的值。</returns>
    </member>
    <member name="M:System.GC.RemoveMemoryPressure(System.Int64)">
      <summary>[安全性關鍵] 告知執行階段，Unmanaged 記憶體已釋放，所以排定記憶體回收時不需要再考慮它。</summary>
      <param name="bytesAllocated">已釋放的 Unmanaged 記憶體數量。</param>
    </member>
    <member name="M:System.GC.ReRegisterForFinalize(System.Object)">
      <summary>要求系統為指定物件 (先前已經為其呼叫 <see cref="M:System.GC.SuppressFinalize(System.Object)" />) 呼叫完成項。</summary>
      <param name="obj">必須呼叫完成項的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 為 null。</exception>
    </member>
    <member name="M:System.GC.SuppressFinalize(System.Object)">
      <summary>要求系統不要為指定物件呼叫完成項。</summary>
      <param name="obj">不得呼叫完成項的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 為 null。</exception>
    </member>
    <member name="M:System.GC.WaitForPendingFinalizers">
      <summary>暫止目前的執行緒，直到處理完成項佇列的執行緒已經清空該佇列為止。</summary>
    </member>
    <member name="T:System.GCCollectionMode">
      <summary>指定強制記憶體回收的行為。</summary>
    </member>
    <member name="F:System.GCCollectionMode.Default">
      <summary>這個列舉型別 (Enumeration) 的預設值，目前為 <see cref="F:System.GCCollectionMode.Forced" />。</summary>
    </member>
    <member name="F:System.GCCollectionMode.Forced">
      <summary>強制立即執行記憶體回收。</summary>
    </member>
    <member name="F:System.GCCollectionMode.Optimized">
      <summary>允許記憶體回收以判斷現在是否為回收物件的最佳時間。 </summary>
    </member>
    <member name="T:System.Guid">
      <summary>表示全域唯一識別項 (GUID)。</summary>
    </member>
    <member name="M:System.Guid.#ctor(System.Byte[])">
      <summary>使用指定的位元組陣列來初始化 <see cref="T:System.Guid" /> 類別的新執行個體。</summary>
      <param name="b">16 個元素位元組陣列，包含要用來初始化 GUID 的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="b" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="b" /> 的長度不是 16 個位元組。</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>使用指定的整數和位元組來初始化 <see cref="T:System.Guid" /> 類別的新執行個體。</summary>
      <param name="a">GUID 的前 4 個位元組。</param>
      <param name="b">GUID 接下來的 2 個位元組。</param>
      <param name="c">GUID 接下來的 2 個位元組。</param>
      <param name="d">GUID 的下一個位元組。</param>
      <param name="e">GUID 的下一個位元組。</param>
      <param name="f">GUID 的下一個位元組。</param>
      <param name="g">GUID 的下一個位元組。</param>
      <param name="h">GUID 的下一個位元組。</param>
      <param name="i">GUID 的下一個位元組。</param>
      <param name="j">GUID 的下一個位元組。</param>
      <param name="k">GUID 的下一個位元組。</param>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
      <summary>使用指定的整數和位元組陣列來初始化 <see cref="T:System.Guid" /> 類別的新執行個體。</summary>
      <param name="a">GUID 的前 4 個位元組。</param>
      <param name="b">GUID 接下來的 2 個位元組。</param>
      <param name="c">GUID 接下來的 2 個位元組。</param>
      <param name="d">GUID 剩餘的 8 個位元組。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> 的長度不是 8 個位元組。</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.String)">
      <summary>使用指定字串表示的值來初始化 <see cref="T:System.Guid" /> 類別的新執行個體。</summary>
      <param name="g">
        <see cref="T:System.String" />，包含下列格式之一的 GUID ("d" 代表十六進位數字，其大小寫不拘)：32 個連續數字：dddddddddddddddddddddddddddddddd-或-8、4、4、4 和 12 個數字的群組，其間以短破折號相隔。整個 GUID 可以選擇性地用對稱的大括號或括號括起來：dddddddd-dddd-dddd-dddd-dddddddddddd-或-{dddddddd-dddd-dddd-dddd-dddddddddddd}-或-(dddddddd-dddd-dddd-dddd-dddddddddddd)-或-8、4 和 4 個數字的群組，和一個 2 個數字形成之八個群組的子集，而每個群組都以 "0x" 或 "0X" 做為字首，並且以逗號分隔。整個 GUID 和子集都用對稱的大括號括起來。{0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}}所有的大括號、逗號和 "0x" 都是必要的。所有的空白字元都會被忽略。而群組中所有前置的零都會被忽略。群組中所顯示的數字是可以出現在群組中有意義的數字數目上限。您可以指定從 1 到群組所顯示的數字數目。所指定的數字會假設為群組的低序位數字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="g" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="g" /> 的格式無效。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="g" /> 的格式無效。</exception>
      <exception cref="T:System.Exception">發生了內部型別轉換錯誤。</exception>
    </member>
    <member name="M:System.Guid.CompareTo(System.Guid)">
      <summary>將此執行個體與指定的 <see cref="T:System.Guid" /> 物件相比較，並傳回它們的相對值指示。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的相對值。值描述負整數這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。正整數這個執行個體大於 <paramref name="value" />。</returns>
      <param name="value">要與此執行個體相比較的 <see cref="T:System.Guid" /> 物件。</param>
    </member>
    <member name="M:System.Guid.CompareTo(System.Object)">
      <summary>將此執行個體與指定的物件相比較，並傳回它們相對值的指示。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的相對值。值描述負值整數這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。正整數這個執行個體大於 <paramref name="value" />。-或-<paramref name="value" /> 為 null。</returns>
      <param name="value">要比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Guid" />。</exception>
    </member>
    <member name="F:System.Guid.Empty">
      <summary>
        <see cref="T:System.Guid" /> 類別的唯讀執行個體，其值保證全為零。</summary>
    </member>
    <member name="M:System.Guid.Equals(System.Guid)">
      <summary>傳回指出此執行個體和指定的 <see cref="T:System.Guid" /> 物件是否表示相同值的值。</summary>
      <returns>如果 <paramref name="g" /> 等於這個執行個體則為 true，否則為 false。</returns>
      <param name="g">要與此執行個體相比較的 <see cref="T:System.Guid" /> 物件。</param>
    </member>
    <member name="M:System.Guid.Equals(System.Object)">
      <summary>傳回值，指出此執行個體是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="o" /> 是 <see cref="T:System.Guid" />，且其值與這個執行個體相同，則為 true，否則為 false。</returns>
      <param name="o">要與此執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Guid.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>此執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Guid.NewGuid">
      <summary>初始化 <see cref="T:System.Guid" /> 類別的新執行個體。</summary>
      <returns>新的 <see cref="T:System.Guid" /> 物件。</returns>
    </member>
    <member name="M:System.Guid.op_Equality(System.Guid,System.Guid)">
      <summary>表示兩個指定之 <see cref="T:System.Guid" /> 物件的值是否相等。</summary>
      <returns>如果 <paramref name="a" /> 和 <paramref name="b" /> 相等則為 true，否則為 false。</returns>
      <param name="a">要比較的第 1 個物件。</param>
      <param name="b">要比較的第 2 個物件。</param>
    </member>
    <member name="M:System.Guid.op_Inequality(System.Guid,System.Guid)">
      <summary>傳回兩個指定的 <see cref="T:System.Guid" /> 物件值是否不相等的指示。</summary>
      <returns>如果 <paramref name="a" /> 和 <paramref name="b" /> 不相等則為 true，否則為 false。</returns>
      <param name="a">
        <see cref="T:System.Guid" /> 物件。</param>
      <param name="b">
        <see cref="T:System.Guid" /> 物件。</param>
    </member>
    <member name="M:System.Guid.Parse(System.String)">
      <summary>將 GUID 的字串表示轉換為對等的 <see cref="T:System.Guid" /> 值。</summary>
      <returns>包含所剖析之值的結構。</returns>
      <param name="input">要轉換的 GUID。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 不是可辨認的格式。</exception>
    </member>
    <member name="M:System.Guid.ParseExact(System.String,System.String)">
      <summary>將 GUID 的字串表示轉換為對等的 <see cref="T:System.Guid" /> 值，但字串必須是指定的格式。</summary>
      <returns>包含所剖析之值的結構。</returns>
      <param name="input">要轉換的 GUID。</param>
      <param name="format">下列其中一個規範，表示在解譯 <paramref name="input" /> 時要使用的確切格式："N"、"D"、"B"、"P" 或 "X"。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="format" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 不是可辨認的格式。</exception>
    </member>
    <member name="M:System.Guid.ToByteArray">
      <summary>傳回 16 個元素的位元組陣列，位元組陣列會包含此執行個體的值。</summary>
      <returns>16 個元素的位元組陣列。</returns>
    </member>
    <member name="M:System.Guid.ToString">
      <summary>以登錄格式傳回此執行個體值的 <see cref="T:System.String" /> 表示。</summary>
      <returns>以這種模式格式化的 String：xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx其中的 GUID 值是以一系列小寫的十六進位數字表示，按照 8、4、4、4 和 12 個數字群組的方式，以連字號分開。傳回值的範例是 "382c74c3-721d-4f34-80e5-57657b6cbc27"。</returns>
    </member>
    <member name="M:System.Guid.ToString(System.String)">
      <summary>根據提供的格式規範，傳回此 <see cref="T:System.Guid" /> 執行個體值的 <see cref="T:System.String" /> 表示。</summary>
      <returns>這個 <see cref="T:System.Guid" /> 的值，按照指定的格式，以一系列小寫的十六進位數字來表示。</returns>
      <param name="format">單一格式的規範，指示如何格式化此 <see cref="T:System.Guid" /> 的值。<paramref name="format" /> 參數可能是 "N"、"D"、"B" 或 "P"。如果 <paramref name="format" /> 為 null 或空字串 ("")，則使用 "D"。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的值不是 null、空字串 ("")、"N"、"D"、"B" 或 "P"。</exception>
    </member>
    <member name="M:System.Guid.ToString(System.String,System.IFormatProvider)">
      <summary>根據提供的格式規範和特定文化特性的格式資訊，傳回此 <see cref="T:System.Guid" /> 類別的執行個體值的 <see cref="T:System.String" /> 表示。</summary>
      <returns>這個 <see cref="T:System.Guid" /> 的值，按照指定的格式，以一系列小寫的十六進位數字來表示。</returns>
      <param name="format">單一格式的規範，指示如何格式化此 <see cref="T:System.Guid" /> 的值。<paramref name="format" /> 參數可能是 "N"、"D"、"B" 或 "P"。如果 <paramref name="format" /> 為 null 或空字串 ("")，則使用 "D"。</param>
      <param name="provider">(保留字) IFormatProvider 參考，提供特定文化特性的格式服務。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的值不是 null、空字串 ("")、"N"、"D"、"B" 或 "P"。</exception>
    </member>
    <member name="M:System.Guid.TryParse(System.String,System.Guid@)">
      <summary>將 GUID 的字串表示轉換為對等的 <see cref="T:System.Guid" /> 值。</summary>
      <returns>如果剖析作業成功則為 true，否則為 false。</returns>
      <param name="input">要轉換的 GUID。</param>
      <param name="result">要包含所剖析之值的結構。</param>
    </member>
    <member name="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)">
      <summary>將 GUID 的字串表示轉換為對等的 <see cref="T:System.Guid" /> 值，但字串必須是指定的格式。</summary>
      <returns>如果剖析作業成功則為 true，否則為 false。</returns>
      <param name="input">要轉換的 GUID。</param>
      <param name="format">下列其中一個規範，表示在解譯 <paramref name="input" /> 時要使用的確切格式："N"、"D"、"B"、"P" 或 "X"。</param>
      <param name="result">當此方法傳回時，如果轉換成功就會包含相當於 <paramref name="input" /> 中所含之 GUID 的值；如果轉換失敗則為 <see cref="F:System.Guid.Empty" />。</param>
    </member>
    <member name="T:System.IAsyncResult">
      <summary>指出非同步作業 (Asynchronous Operation) 的狀態。</summary>
    </member>
    <member name="P:System.IAsyncResult.AsyncState">
      <summary>取得符合或包含非同步作業資訊的使用者定義的物件。</summary>
      <returns>使用者定義的物件，其符合或包含非同步作業的資訊。</returns>
    </member>
    <member name="P:System.IAsyncResult.AsyncWaitHandle">
      <summary>取得 <see cref="T:System.Threading.WaitHandle" />，用於等候非同步作業完成。</summary>
      <returns>等候控制代碼，用於等候非同步作業完成。</returns>
    </member>
    <member name="P:System.IAsyncResult.CompletedSynchronously">
      <summary>取得指出非同步作業是否同步完成的值。</summary>
      <returns>如果非同步作業同步完成則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.IAsyncResult.IsCompleted">
      <summary>取得指出非同步作業是否已經完成的值。</summary>
      <returns>如果作業已完成則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.IComparable">
      <summary>定義通用的型別特定比較方法，值型別 (Value Type) 或類別 (Class) 會實作此方法，以排列或排序其執行個體。</summary>
    </member>
    <member name="M:System.IComparable.CompareTo(System.Object)">
      <summary>將目前的執行個體與相同型別的另一個物件相比較，並傳回整數，此整數表示目前的執行個體在排序次序中，位於另一個物件之前、之後或相同位置。</summary>
      <returns>32 位元帶正負號的整數，表示所比較的物件之相對順序。傳回值具有這些意義：Value意義小於零排序次序中這個執行個體在 <paramref name="obj" /> 的前面。零這個執行個體出現在排序次序中的位置和 <paramref name="obj" /> 相同。大於零排序次序中這個執行個體在 <paramref name="obj" /> 的後面。</returns>
      <param name="obj">要與此執行個體相互比較的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 與此執行個體的型別不同。</exception>
    </member>
    <member name="T:System.IComparable`1">
      <summary>定義通用的比較方法，值型別或類別會實作此方法，以建立型別特有的比較方法來排序執行個體。</summary>
      <typeparam name="T">要比較之物件的型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="M:System.IComparable`1.CompareTo(`0)">
      <summary>將目前的執行個體與另一個具有相同型別的物件相比較。</summary>
      <returns>32 位元帶正負號的整數，表示所比較的物件之相對順序。傳回值的意義如下：值意義小於零這個物件小於 <paramref name="other" /> 參數。零這個物件等於 <paramref name="other" />。大於零這個物件大於 <paramref name="other" />。</returns>
      <param name="other">要與此物件相互比較的物件。</param>
    </member>
    <member name="T:System.IConvertible">
      <summary>定義方法，該方法會將實作參考的值或值型別 (Value Type) 轉換成具有等值的 Common Language Runtime 型別。</summary>
    </member>
    <member name="M:System.IConvertible.GetTypeCode">
      <summary>傳回此執行個體的 <see cref="T:System.TypeCode" />。</summary>
      <returns>列舉常數，該常數是實作這個介面的類型或實值型別的 <see cref="T:System.TypeCode" />。</returns>
    </member>
    <member name="M:System.IConvertible.ToBoolean(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將此執行個體的值轉換為相等的布林值。</summary>
      <returns>布林值，等於此執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.IConvertible.ToByte(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將此執行個體的值轉換為相等的 8 位元不帶正負號的整數。</summary>
      <returns>8 位元不帶正負號的整數，相當於此執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.IConvertible.ToChar(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將此執行個體的值轉換為相等的 Unicode 字元。</summary>
      <returns>Unicode 字元，等於此執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.IConvertible.ToDateTime(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將此執行個體的值轉換為相等的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 執行個體，等於這個執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.IConvertible.ToDecimal(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將此執行個體的值轉換為相等的 <see cref="T:System.Decimal" /> 數字。</summary>
      <returns>
        <see cref="T:System.Decimal" /> 數字，等於這個執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.IConvertible.ToDouble(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將此執行個體的值轉換為相等的雙精確度浮點數。</summary>
      <returns>雙精確度浮點數，等於此執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.IConvertible.ToInt16(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將此執行個體的值轉換為相等的 16 位元帶正負號的整數。</summary>
      <returns>16 位元帶正負號的整數，相當於此執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.IConvertible.ToInt32(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將此執行個體的值轉換為相等的 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，相當於此執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.IConvertible.ToInt64(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將此執行個體的值轉換為相等的 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，相當於此執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.IConvertible.ToSByte(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將此執行個體的值轉換為相等的 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，相當於此執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.IConvertible.ToSingle(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將此執行個體的值轉換為相等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，等於此執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.IConvertible.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將此執行個體的值轉換為相等的 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:System.String" /> 執行個體，等於這個執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將此執行個體的值轉換為具有等值的指定 <see cref="T:System.Type" /> 的 <see cref="T:System.Object" />。</summary>
      <returns>型別 <paramref name="conversionType" /> 的 <see cref="T:System.Object" /> 執行個體，其值等於這個執行個體的值。</returns>
      <param name="conversionType">此執行個體的值要轉換成的 <see cref="T:System.Type" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.IConvertible.ToUInt16(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將此執行個體的值轉換為相等的 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，相當於此執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.IConvertible.ToUInt32(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將此執行個體的值轉換為相等的 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，相當於此執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.IConvertible.ToUInt64(System.IFormatProvider)">
      <summary>使用指定的特定文化特性之格式資訊，將此執行個體的值轉換為相等的 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，相當於此執行個體的值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 介面實作，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="T:System.ICustomFormatter">
      <summary>定義支援物件值的自訂 (使用者定義) 格式的方法。</summary>
    </member>
    <member name="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性 (Culture) 的格式資訊，將指定物件值轉換成相等的字串表示。</summary>
      <returns>
        <paramref name="arg" /> 值的字串表示，根據 <paramref name="format" /> 和 <paramref name="formatProvider" /> 的指示格式化。</returns>
      <param name="format">格式字串，包含格式規格。</param>
      <param name="arg">要格式化的物件。</param>
      <param name="formatProvider">
        <see cref="T:System.IFormatProvider" /> 物件，該物件提供目前執行個體的相關格式資訊。</param>
    </member>
    <member name="T:System.IDisposable">
      <summary>定義要釋放已配置資源的方法。</summary>
    </member>
    <member name="M:System.IDisposable.Dispose">
      <summary>執行與釋放 (Free)、釋放 (Release) 或重設 Unmanaged 資源相關聯之應用程式定義的工作。</summary>
    </member>
    <member name="T:System.IEquatable`1">
      <summary>定義值型別或類別所實作的一般方法，藉以建立型別特定的方法來判斷執行個體是否相等。</summary>
      <typeparam name="T">要比較之物件的型別。</typeparam>
    </member>
    <member name="M:System.IEquatable`1.Equals(`0)">
      <summary>指出目前的物件是否等於另一個具有相同型別的物件。</summary>
      <returns>如果目前物件等於 <paramref name="other" /> 參數則為 true，否則為 false。</returns>
      <param name="other">要與此物件相互比較的物件。</param>
    </member>
    <member name="T:System.IFormatProvider">
      <summary>提供機制來擷取要控制格式的物件。</summary>
    </member>
    <member name="M:System.IFormatProvider.GetFormat(System.Type)">
      <summary>傳回物件，此物件為所指定型別提供格式化服務。</summary>
      <returns>如果 <see cref="T:System.IFormatProvider" /> 實作可以提供該型別的物件，則為 <paramref name="formatType" /> 所指定的物件執行個體，否則為 null。</returns>
      <param name="formatType">物件，指定要傳回的格式化物件的型別。</param>
    </member>
    <member name="T:System.IFormattable">
      <summary>提供將物件的值格式化成以字串表示的功能。</summary>
    </member>
    <member name="M:System.IFormattable.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式，格式化目前執行個體的值。</summary>
      <returns>
        <see cref="T:System.String" />，包含指定格式中目前執行個體的值。</returns>
      <param name="format">指定要使用之格式的 <see cref="T:System.String" />。-或-null，使用定義給 <see cref="T:System.IFormattable" /> 實作類型的預設格式。</param>
      <param name="formatProvider">
        <see cref="T:System.IFormatProvider" />，用來格式化數值。-或-null，用來從作業系統的目前地區設定取得數值格式資訊。</param>
    </member>
    <member name="T:System.IndexOutOfRangeException">
      <summary>嘗試使用陣列以外的索引來存取陣列的元素時所擲回的例外狀況。無法繼承此類別。</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor">
      <summary>初始化 <see cref="T:System.IndexOutOfRangeException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.IndexOutOfRangeException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.IndexOutOfRangeException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.Int16">
      <summary>表示 16 位元帶正負號的整數。</summary>
    </member>
    <member name="M:System.Int16.CompareTo(System.Int16)">
      <summary>比較此執行個體和特定 16 位元帶正負號的整數，並且傳回一個整數，指出此執行個體的值是大於、小於或等於特定 16 位元帶正負號的整數值。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的相對值。傳回值描述小於零這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。大於零這個執行個體大於 <paramref name="value" />。</returns>
      <param name="value">要比較的整數。</param>
    </member>
    <member name="M:System.Int16.CompareTo(System.Object)">
      <summary>比較此執行個體和特定物件，並且傳回一個整數，指出此執行個體的值是小於、等於或大於特定物件。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的相對值。傳回值描述小於零這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。大於零這個執行個體大於 <paramref name="value" />。-或-<paramref name="value" /> 為 null。</returns>
      <param name="value">要比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Int16" />。</exception>
    </member>
    <member name="M:System.Int16.Equals(System.Int16)">
      <summary>傳回值，指出此執行個體是否等於指定的 <see cref="T:System.Int16" /> 值。</summary>
      <returns>如果 <paramref name="obj" /> 與此執行個體具有相同的值則為 true，否則為 false。</returns>
      <param name="obj">與此執行個體比較的 <see cref="T:System.Int16" /> 值。</param>
    </member>
    <member name="M:System.Int16.Equals(System.Object)">
      <summary>傳回值，指出此執行個體是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.Int16" /> 的執行個體，並且等於此執行個體的值，則為 true，否則為 false。</returns>
      <param name="obj">與此執行個體相比較的物件。</param>
    </member>
    <member name="M:System.Int16.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Int16.GetTypeCode">
      <summary>傳回值型別 <see cref="T:System.Int16" /> 的 <see cref="T:System.TypeCode" />。</summary>
      <returns>列舉常數、<see cref="F:System.TypeCode.Int16" />。</returns>
    </member>
    <member name="F:System.Int16.MaxValue">
      <summary>表示 <see cref="T:System.Int16" /> 的最大可能值。此欄位為常數。</summary>
    </member>
    <member name="F:System.Int16.MinValue">
      <summary>表示 <see cref="T:System.Int16" /> 的最小可能值。此欄位為常數。</summary>
    </member>
    <member name="M:System.Int16.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 16 位元帶正負號的整數。</summary>
      <returns>16 位元帶正負號的整數，等於包含在 <paramref name="s" /> 中的數字。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式中數字的字串表示轉換成它的對等 16 位元帶正負號的整數。</summary>
      <returns>16 位元帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式元素。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。-或-<paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將數字的字串表示 (使用指定的樣式和特定文化特性的格式) 轉換成它的對等 16 位元帶正負號的整數。</summary>
      <returns>16 位元帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式元素。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。-或-<paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.IFormatProvider)">
      <summary>將所指定文化特性專屬格式之數字的字串表示，轉換為它的相等 16 位元帶正負號的整數。</summary>
      <returns>16 位元帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零則為 true，否則為 false。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <param name="type">要將此 <see cref="T:System.Int16" /> 值轉換成的型別。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值的格式資訊。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int16.ToString">
      <summary>將此執行個體的數值轉換為它的對等字串表示。</summary>
      <returns>此執行個體值的字串表示，包含減號 (如果數值為負) 及一連串範圍由 0 到 9 的數字 (沒有前置字元零)。</returns>
    </member>
    <member name="M:System.Int16.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Int16.ToString(System.String)">
      <summary>使用指定格式，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">標準或自訂數值格式字串 (請參閱「備註」)。</param>
    </member>
    <member name="M:System.Int16.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和文化特性特定的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">標準或自訂數值格式字串 (請參閱「備註」)。</param>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
      <summary>將數字的字串表示 (使用指定的樣式和特定文化特性的格式) 轉換成它的對等 16 位元帶正負號的整數。傳回值會指出轉換是成功或是失敗。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式元素。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <param name="result">當此方法回傳時，如果轉換成功則包含相當於 <paramref name="s" /> 所含數值的 16 位元帶正負號的整數值，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Int16@)">
      <summary>將數字的字串表示轉換成它的對等 16 位元帶正負號的整數。傳回值會指出轉換是成功或是失敗。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="result">當此方法回傳時，如果轉換成功則包含相當於 <paramref name="s" /> 所含數值的 16 位元帶正負號的整數值，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、不是正確格式，或是表示小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="T:System.Int32">
      <summary>表示 32 位元帶正負號的整數。</summary>
    </member>
    <member name="M:System.Int32.CompareTo(System.Int32)">
      <summary>比較此執行個體和特定 32 位元帶正負號的整數，並且傳回一個整數，指出此執行個體的值是大於、小於或等於特定 32 位元帶正負號的整數的值。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的相對值。傳回值描述小於零這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。大於零這個執行個體大於 <paramref name="value" />。</returns>
      <param name="value">要比較的整數。</param>
    </member>
    <member name="M:System.Int32.CompareTo(System.Object)">
      <summary>比較此執行個體與特定物件，並且傳回一個整數，指出此執行個體的值是大於、小於或等於特定物件的值。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的相對值。傳回值描述小於零這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。大於零這個執行個體大於 <paramref name="value" />。-或-<paramref name="value" /> 為 null。</returns>
      <param name="value">要比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Int32" />。</exception>
    </member>
    <member name="M:System.Int32.Equals(System.Int32)">
      <summary>傳回值，指出此執行個體是否等於指定的 <see cref="T:System.Int32" /> 值。</summary>
      <returns>如果 <paramref name="obj" /> 與此執行個體具有相同的值則為 true，否則為 false。</returns>
      <param name="obj">與此執行個體比較的 <see cref="T:System.Int32" /> 值。</param>
    </member>
    <member name="M:System.Int32.Equals(System.Object)">
      <summary>傳回值，指出此執行個體是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.Int32" /> 的執行個體，並且等於此執行個體的值，則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Int32.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Int32.GetTypeCode">
      <summary>傳回值型別 <see cref="T:System.Int32" /> 的 <see cref="T:System.TypeCode" />。</summary>
      <returns>列舉常數、<see cref="F:System.TypeCode.Int32" />。</returns>
    </member>
    <member name="F:System.Int32.MaxValue">
      <summary>表示 <see cref="T:System.Int32" /> 的最大可能值。此欄位為常數。</summary>
    </member>
    <member name="F:System.Int32.MinValue">
      <summary>表示 <see cref="T:System.Int32" /> 的最小可能值。此欄位為常數。</summary>
    </member>
    <member name="M:System.Int32.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，等於包含在 <paramref name="s" /> 中的數字。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式中數字的字串表示轉換成它的對等 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式元素。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。-或-<paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將數字的字串表示 (使用指定的樣式和特定文化特性的格式) 轉換成它的對等 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式元素。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供關於 <paramref name="s" /> 格式的特定文化特性資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。-或-<paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.IFormatProvider)">
      <summary>將所指定文化特性專屬格式之數字的字串表示，轉換為它的相等 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是正確的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零則為 true，否則為 false。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <param name="type">要將此 <see cref="T:System.Int32" /> 值轉換成的型別。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值的格式資訊。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int32.ToString">
      <summary>將此執行個體的數值轉換為它的對等字串表示。</summary>
      <returns>此執行個體值的字串表示，包含減號 (如果數值為負) 及一連串範圍由 0 到 9 的數字 (沒有前置字元零)。</returns>
    </member>
    <member name="M:System.Int32.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Int32.ToString(System.String)">
      <summary>使用指定格式，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">標準或自訂數值格式字串 (請參閱「備註」)。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效或不受支援。</exception>
    </member>
    <member name="M:System.Int32.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">標準或自訂數值格式字串 (請參閱「備註」)。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供特定文化特性的格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效或不受支援。</exception>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
      <summary>將數字的字串表示 (使用指定的樣式和特定文化特性的格式) 轉換成它的對等 32 位元帶正負號的整數。傳回值，指出轉換是否成功。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式元素。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <param name="result">當此方法回傳時，如果轉換成功則包含相當於 <paramref name="s" /> 所含數值的 32 位元帶正負號的整數值，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Int32@)">
      <summary>將數字的字串表示轉換成它的對等 32 位元帶正負號的整數。傳回值，指出轉換是否成功。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="result">當此方法回傳時，如果轉換成功則包含相當於 <paramref name="s" /> 所含數值的 32 位元帶正負號的整數值，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、不是正確格式，或是表示小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="T:System.Int64">
      <summary>表示 64 位元帶正負號的整數。</summary>
    </member>
    <member name="M:System.Int64.CompareTo(System.Int64)">
      <summary>將這個執行個體和指定的 64 位元帶正負號整數相比較，並傳回其相對值的指示。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的相對值。傳回值描述小於零這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。大於零這個執行個體大於 <paramref name="value" />。</returns>
      <param name="value">要比較的整數。</param>
    </member>
    <member name="M:System.Int64.CompareTo(System.Object)">
      <summary>將此執行個體與指定的物件相比較，並傳回它們相對值的指示。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的相對值。傳回值描述小於零這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。大於零這個執行個體大於 <paramref name="value" />。-或-<paramref name="value" /> 為 null。</returns>
      <param name="value">要比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Int64" />。</exception>
    </member>
    <member name="M:System.Int64.Equals(System.Int64)">
      <summary>傳回值，指出此執行個體是否等於指定的 <see cref="T:System.Int64" /> 值。</summary>
      <returns>如果 <paramref name="obj" /> 與此執行個體具有相同的值則為 true，否則為 false。</returns>
      <param name="obj">與此執行個體比較的 <see cref="T:System.Int64" /> 值。</param>
    </member>
    <member name="M:System.Int64.Equals(System.Object)">
      <summary>傳回值，指出此執行個體是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.Int64" /> 的執行個體，並且等於此執行個體的值，則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Int64.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Int64.GetTypeCode">
      <summary>傳回值型別 <see cref="T:System.Int64" /> 的 <see cref="T:System.TypeCode" />。</summary>
      <returns>列舉常數、<see cref="F:System.TypeCode.Int64" />。</returns>
    </member>
    <member name="F:System.Int64.MaxValue">
      <summary>表示 Int64 的最大可能值。此欄位為常數。</summary>
    </member>
    <member name="F:System.Int64.MinValue">
      <summary>表示 Int64 的最小可能值。此欄位為常數。</summary>
    </member>
    <member name="M:System.Int64.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，等於包含在 <paramref name="s" /> 中的數字。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式中數字的字串表示轉換成它的對等 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的位元組合，指出 <paramref name="s" /> 的允許格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將數字的字串表示 (使用指定的樣式和特定文化特性的格式) 轉換成它的對等 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的位元組合，指出 <paramref name="s" /> 的允許格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.IFormatProvider)">
      <summary>將所指定文化特性專屬格式之數字的字串表示，轉換為它的相等 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供關於 <paramref name="s" /> 的特定文化特性格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零則為 true，否則為 false。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <param name="type">要將此 <see cref="T:System.Int64" /> 值轉換成的型別。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值的格式資訊。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Int64.ToString">
      <summary>將此執行個體的數值轉換為它的對等字串表示。</summary>
      <returns>此執行個體值的字串表示，包含減號 (如果數值為負) 及一連串範圍由 0 到 9 的數字 (沒有前置字元零)。</returns>
    </member>
    <member name="M:System.Int64.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供特定文化特性的格式資訊。</param>
    </member>
    <member name="M:System.Int64.ToString(System.String)">
      <summary>使用指定格式，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">標準或自訂數值格式字串 (請參閱「備註」)。</param>
    </member>
    <member name="M:System.Int64.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">標準或自訂數值格式字串 (請參閱「備註」)。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" />，提供關於此執行個體的特定文化特性格式資訊。</param>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
      <summary>將數字的字串表示 (使用指定的樣式和特定文化特性的格式) 轉換成它的對等 64 位元帶正負號的整數。傳回值會指出轉換是成功或是失敗。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的位元組合，指出 <paramref name="s" /> 的允許格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <param name="result">當此方法回傳時，如果轉換成功則包含相當於 <paramref name="s" /> 所含數值的 64 位元帶正負號的整數值，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Int64@)">
      <summary>將數字的字串表示轉換成它的對等 64 位元帶正負號的整數。傳回值會指出轉換是成功或是失敗。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="result">當此方法回傳時，如果轉換成功則包含相當於 <paramref name="s" /> 所含數值的 64 位元帶正負號的整數值，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、不是正確格式，或是表示小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="T:System.IntPtr">
      <summary>特定平台專用的型別，用來表示指標或控制代碼。</summary>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int32)">
      <summary>使用指定的 32 位元指標或控制代碼來初始化 <see cref="T:System.IntPtr" /> 的新執行個體。</summary>
      <param name="value">包含在 32 位元帶正負號整數中的指標或控制代碼。</param>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int64)">
      <summary>使用指定的 64 位元指標來初始化 <see cref="T:System.IntPtr" /> 的新執行個體。</summary>
      <param name="value">包含在 64 位元帶正負號整數中的指標或控制代碼。</param>
      <exception cref="T:System.OverflowException">在 32 位元的平台上，<paramref name="value" /> 太大或太小，以致於無法表示為 <see cref="T:System.IntPtr" />。</exception>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Void*)">
      <summary>[安全性關鍵] 使用未指定型別的指定指標來初始化 <see cref="T:System.IntPtr" /> 的新執行個體。</summary>
      <param name="value">未指定型別的指標。</param>
    </member>
    <member name="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
      <summary>將指標的值加上位移。</summary>
      <returns>新的指標，反映將 <paramref name="pointer" /> 加上 <paramref name="offset" /> 的結果。</returns>
      <param name="pointer">要加上位移的指標。</param>
      <param name="offset">要加入的位移。</param>
    </member>
    <member name="M:System.IntPtr.Equals(System.Object)">
      <summary>傳回值，指出此執行個體是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.IntPtr" /> 的執行個體，並且等於此執行個體的值，則為 true，否則為 false。</returns>
      <param name="obj">與此執行個體或 null 相互比較的物件。</param>
    </member>
    <member name="M:System.IntPtr.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
      <summary>將指標的值加上位移。</summary>
      <returns>新的指標，反映將 <paramref name="pointer" /> 加上 <paramref name="offset" /> 的結果。</returns>
      <param name="pointer">要加上位移的指標。</param>
      <param name="offset">要加入的位移。</param>
    </member>
    <member name="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
      <summary>判斷 <see cref="T:System.IntPtr" /> 的兩個指定之執行個體是否相等。</summary>
      <returns>如果 <paramref name="value1" /> 等於 <paramref name="value2" /> 則為 true，否則為 false。</returns>
      <param name="value1">
        <see cref="T:System.IntPtr" />。</param>
      <param name="value2">
        <see cref="T:System.IntPtr" />。</param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
      <summary>將 32 位元帶正負號整數的值轉換為 <see cref="T:System.IntPtr" />。</summary>
      <returns>
        <see cref="T:System.IntPtr" /> 的新執行個體，初始化為 <paramref name="value" />。</returns>
      <param name="value">32 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
      <summary>將 64 位元帶正負號整數的值轉換為 <see cref="T:System.IntPtr" />。</summary>
      <returns>
        <see cref="T:System.IntPtr" /> 的新執行個體，初始化為 <paramref name="value" />。</returns>
      <param name="value">64 位元帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">在 32 位元的平台上，<paramref name="value" /> 太大，以致於無法代表 <see cref="T:System.IntPtr" />。</exception>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
      <summary>將指定的 <see cref="T:System.IntPtr" /> 值轉換為 64 位元帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> 的內容。</returns>
      <param name="value">
        <see cref="T:System.IntPtr" />。</param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
      <summary>將指定的 <see cref="T:System.IntPtr" /> 值轉換為未指定型別的指標。</summary>
      <returns>
        <paramref name="value" /> 的內容。</returns>
      <param name="value">
        <see cref="T:System.IntPtr" />。</param>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
      <summary>將指定的 <see cref="T:System.IntPtr" /> 值轉換為 32 位元帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> 的內容。</returns>
      <param name="value">
        <see cref="T:System.IntPtr" />。</param>
      <exception cref="T:System.OverflowException">在 64 位元的平台上，<paramref name="value" /> 的值太大或太小，以致於無法表示為 32 位元帶正負號的整數。</exception>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
      <summary>[安全性關鍵] 將未指定型別的指定指標轉換為 <see cref="T:System.IntPtr" />。</summary>
      <returns>
        <see cref="T:System.IntPtr" /> 的新執行個體，初始化為 <paramref name="value" />。</returns>
      <param name="value">未指定型別的指標。</param>
    </member>
    <member name="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
      <summary>判斷 <see cref="T:System.IntPtr" /> 的兩個指定之執行個體是否不相等。</summary>
      <returns>如果 <paramref name="value1" /> 不等於 <paramref name="value2" /> 則為 true，否則為 false。</returns>
      <param name="value1">
        <see cref="T:System.IntPtr" />。</param>
      <param name="value2">
        <see cref="T:System.IntPtr" />。</param>
    </member>
    <member name="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
      <summary>將指標的值減去移位。</summary>
      <returns>新的指標，反映從 <paramref name="pointer" /> 減掉 <paramref name="offset" /> 的結果。</returns>
      <param name="pointer">要減去位移的指標。</param>
      <param name="offset">要減去的位移。</param>
    </member>
    <member name="P:System.IntPtr.Size">
      <summary>取得此執行個體的大小。</summary>
      <returns>此處理序中的指標或控制代碼的大小，以位元組為單位。此屬性的值在 32 位元處理序中為 4，而在 64 位元處理序中為 8。</returns>
    </member>
    <member name="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
      <summary>將指標的值減去移位。</summary>
      <returns>新的指標，反映從 <paramref name="pointer" /> 減掉 <paramref name="offset" /> 的結果。</returns>
      <param name="pointer">要減去位移的指標。</param>
      <param name="offset">要減去的位移。</param>
    </member>
    <member name="M:System.IntPtr.ToInt32">
      <summary>將此執行個體的值轉換為 32 位元帶正負號的整數。</summary>
      <returns>32 位元帶正負號的整數，等於此執行個體的值。</returns>
      <exception cref="T:System.OverflowException">在 64 位元的平台上，此執行個體的值太大或太小，以致於無法表示為 32 位元帶正負號的整數。</exception>
    </member>
    <member name="M:System.IntPtr.ToInt64">
      <summary>將此執行個體的值轉換為 64 位元帶正負號的整數。</summary>
      <returns>64 位元帶正負號的整數，等於此執行個體的值。</returns>
    </member>
    <member name="M:System.IntPtr.ToPointer">
      <summary>將此執行個體的值轉換為未指定型別的指標。</summary>
      <returns>
        <see cref="T:System.Void" /> 的指標，也就是含有未指定型別資料的記憶體指標。</returns>
    </member>
    <member name="M:System.IntPtr.ToString">
      <summary>將目前 <see cref="T:System.IntPtr" /> 物件的數值轉換為它的對等字串表示。</summary>
      <returns>此執行個體值的字串表示。</returns>
    </member>
    <member name="M:System.IntPtr.ToString(System.String)">
      <summary>將目前 <see cref="T:System.IntPtr" /> 物件的數值轉換為它的對等字串表示。</summary>
      <returns>目前 <see cref="T:System.IntPtr" /> 物件值的字串表示。</returns>
      <param name="format">格式的規格會管理如何轉換目前 <see cref="T:System.IntPtr" /> 物件。</param>
    </member>
    <member name="F:System.IntPtr.Zero">
      <summary>表示已經初始化為零的指標或控制代碼的唯讀欄位。</summary>
    </member>
    <member name="T:System.InvalidCastException">
      <summary>無效的轉型 (Casting) 或明確轉換所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor">
      <summary>初始化 <see cref="T:System.InvalidCastException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.InvalidCastException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.InvalidCastException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Int32)">
      <summary>使用指定訊息和錯誤碼，初始化 <see cref="T:System.InvalidCastException" /> 類別的新執行個體。</summary>
      <param name="message">訊息，指出例外狀況發生的原因。</param>
      <param name="errorCode">與這個例外狀況相關聯的錯誤碼 (HRESULT) 值。</param>
    </member>
    <member name="T:System.InvalidOperationException">
      <summary>當方法呼叫對物件的目前狀態是無效時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor">
      <summary>初始化 <see cref="T:System.InvalidOperationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.InvalidOperationException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.InvalidOperationException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.InvalidProgramException">
      <summary>例外狀況，當程式包含無效的 Microsoft Intermediate Language (MSIL) 或中繼資料 (Metadata) 時會擲回此例外狀況。通常，這表示在產生程式的編譯中有錯誤。</summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.InvalidProgramException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.InvalidProgramException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.InvalidProgramException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.InvalidTimeZoneException">
      <summary>時區資訊無效時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor">
      <summary>使用系統提供的訊息來初始化 <see cref="T:System.InvalidTimeZoneException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String)">
      <summary>使用指定的訊息字串來初始化 <see cref="T:System.InvalidTimeZoneException" /> 類別的新執行個體。</summary>
      <param name="message">描述例外狀況的字串。</param>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.InvalidTimeZoneException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.IObservable`1">
      <summary>定義發送式通知的提供者。</summary>
      <typeparam name="T">提供通知資訊的物件。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
      <summary>訂閱 <paramref name=" observer" /> 以接收通知。</summary>
      <returns>對介面的參照，該介面允許觀察器在提供者傳送完通知之前就先停止接收通知。</returns>
      <param name="observer">要接收通知的物件。</param>
    </member>
    <member name="T:System.IObserver`1">
      <summary>提供用於接收發送式通知的機制。</summary>
      <typeparam name="T">提供通知資訊的物件。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="M:System.IObserver`1.OnCompleted">
      <summary>通知觀察器可觀察元素的順序已結束。沒有其他的值或通知可供此順序使用。</summary>
    </member>
    <member name="M:System.IObserver`1.OnError(System.Exception)">
      <summary>通知觀察器在處理可觀察項目順序時發生例外狀況。</summary>
    </member>
    <member name="M:System.IObserver`1.OnNext(`0)">
      <summary>通知觀察器在可觀察項目順序中的新值。</summary>
      <param name="value">目前的通知資訊。</param>
    </member>
    <member name="T:System.IProgress`1">
      <summary>定義進度更新的提供者。</summary>
      <typeparam name="T">進度更新值的型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="M:System.IProgress`1.Report(`0)">
      <summary>報告進度更新。</summary>
      <param name="value">已更新進度的值。</param>
    </member>
    <member name="T:System.IServiceProvider">
      <summary>定義機制來擷取服務物件，也就是為其他物件提供自訂支援的物件。</summary>
    </member>
    <member name="M:System.IServiceProvider.GetService(System.Type)">
      <summary>取得指定型別的服務物件。</summary>
      <returns>型別 <paramref name="serviceType" /> 的服務物件。-或-如果不存在型別 <paramref name="serviceType" /> 的服務物件，則為 null。</returns>
      <param name="serviceType">物件，指定要取得的服務物件型別。</param>
    </member>
    <member name="T:System.Lazy`1">
      <summary>提供延遲初始設定的支援。</summary>
      <typeparam name="T">指定要延遲初始化之物件的型別。</typeparam>
    </member>
    <member name="M:System.Lazy`1.#ctor">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。當延遲初始設定發生時，會使用目標型別的預設建構函式。</summary>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。當延遲初始設定發生時，會使用目標型別的預設建構函式和指定的初始設定模式。</summary>
      <param name="isThreadSafe">true 可以讓此執行個體可供多個執行緒同時使用，false 可以讓此執行個體一次只能供一個執行緒使用。</param>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0})">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。當延遲初始設定發生時，會使用指定的初始設定函式。</summary>
      <param name="valueFactory">在需要時會叫用來產生延遲初始化值的委派。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 為 null。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體。當延遲初始設定發生時，會使用指定的初始設定函式和初始設定模式。</summary>
      <param name="valueFactory">在需要時會叫用來產生延遲初始化值的委派。</param>
      <param name="isThreadSafe">true 可以讓此執行個體可供多個執行緒同時使用，false 可以讓此執行個體一次只能供一個執行緒使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 為 null。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新行個體，此執行個體會使用指定的初始設定函式和執行緒安全模式。</summary>
      <param name="valueFactory">在需要時會叫用來產生延遲初始化值的委派。</param>
      <param name="mode">其中一個列舉值，其指定執行緒安全性模式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含無效的值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 為 null。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 類別的新執行個體，此執行個體會使用 <paramref name="T" /> 的預設建構函式和指定的執行緒安全模式。</summary>
      <param name="mode">其中一個列舉值，其指定執行緒安全性模式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含無效的值。</exception>
    </member>
    <member name="P:System.Lazy`1.IsValueCreated">
      <summary>取得值，指出是否已建立此 <see cref="T:System.Lazy`1" /> 執行個體的值。</summary>
      <returns>如果已建立此 <see cref="T:System.Lazy`1" /> 執行個體的值則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Lazy`1.ToString">
      <summary>建立並傳回此執行個體之 <see cref="P:System.Lazy`1.Value" /> 屬性的字串表示。</summary>
      <returns>在此值已建立的情況下 (亦即 <see cref="P:System.Lazy`1.IsValueCreated" /> 屬性傳回 true)，於此執行個體的 <see cref="P:System.Lazy`1.Value" /> 屬性上呼叫 <see cref="M:System.Object.ToString" /> 方法的結果。反之，字串表示值尚未建立。</returns>
      <exception cref="T:System.NullReferenceException">
        <see cref="P:System.Lazy`1.Value" /> 屬性為 null。</exception>
    </member>
    <member name="P:System.Lazy`1.Value">
      <summary>取得目前 <see cref="T:System.Lazy`1" /> 執行個體的延遲初始化值。</summary>
      <returns>目前 <see cref="T:System.Lazy`1" /> 執行個體的延遲初始化值。</returns>
      <exception cref="T:System.MemberAccessException">
        <see cref="T:System.Lazy`1" /> 執行個體已初始化為使用延遲初始化型別的預設建構函式，而且存取建構函式的使用權限已遺失。</exception>
      <exception cref="T:System.MissingMemberException">
        <see cref="T:System.Lazy`1" /> 執行個體已初始化為使用延遲初始化型別的預設建構函式，而且該型別沒有 public 無參數的建構函式。</exception>
      <exception cref="T:System.InvalidOperationException">初始設定函式嘗試存取此執行個體的 <see cref="P:System.Lazy`1.Value" />。</exception>
    </member>
    <member name="T:System.LoaderOptimization">
      <summary>用於指定可執行檔之載入器最佳化的列舉。</summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomain">
      <summary>指出應用程式將可能具有許多使用相同程式碼的定義域，而載入器必須跨越應用程式定義域來分享最多的內部資源。</summary>
    </member>
    <member name="F:System.LoaderOptimization.MultiDomainHost">
      <summary>指出應用程式將可能在多個定義域中裝載 (Host) 唯一的程式碼，而載入器只能針對已經加入至全域組件快取的全域可用 (強式名稱) 組件，共用應用程式定義域間的資源。</summary>
    </member>
    <member name="F:System.LoaderOptimization.NotSpecified">
      <summary>指出未指定最佳化來分享內部資源。如果預設的定義域或裝載介面已指定最佳化，則載入器會予以使用，否則，載入器會使用 <see cref="F:System.LoaderOptimization.SingleDomain" />。</summary>
    </member>
    <member name="F:System.LoaderOptimization.SingleDomain">
      <summary>指出應用程式將可能具有單一的定義域，而載入器不可以跨越應用程式定義域來分享內部資源。 </summary>
    </member>
    <member name="T:System.Math">
      <summary>提供三角函數、對數函數和其他一般數學函數的常數和靜態方法。</summary>
    </member>
    <member name="M:System.Math.Abs(System.Decimal)">
      <summary>傳回 <see cref="T:System.Decimal" /> 數字的絕對值。</summary>
      <returns>
        <see cref="T:System.Decimal" /> x，滿足 0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" />。</returns>
      <param name="value">大於或等於 <see cref="F:System.Decimal.MinValue" /> 但小於或等於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</param>
    </member>
    <member name="M:System.Math.Abs(System.Double)">
      <summary>傳回雙精確度浮點數的絕對值。</summary>
      <returns>雙精度浮點數 x，滿足 0 ≤ x ≤<see cref="F:System.Double.MaxValue" />。</returns>
      <param name="value">大於或等於 <see cref="F:System.Double.MinValue" /> 但小於或等於 <see cref="F:System.Double.MaxValue" /> 的數字。</param>
    </member>
    <member name="M:System.Math.Abs(System.Int16)">
      <summary>傳回 16 位元帶正負號整數的絕對值。</summary>
      <returns>16 位元帶正負號的整數 x，滿足 0 ≤ x ≤<see cref="F:System.Int16.MaxValue" />。</returns>
      <param name="value">大於或等於 <see cref="F:System.Int16.MinValue" /> 但小於或等於 <see cref="F:System.Int16.MaxValue" /> 的數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 等於 <see cref="F:System.Int16.MinValue" />。</exception>
    </member>
    <member name="M:System.Math.Abs(System.Int32)">
      <summary>傳回 32 位元帶正負號整數的絕對值。</summary>
      <returns>32 位元帶正負號的整數 x，滿足 0 ≤ x ≤<see cref="F:System.Int32.MaxValue" />。</returns>
      <param name="value">大於或等於 <see cref="F:System.Int32.MinValue" /> 但小於或等於 <see cref="F:System.Int32.MaxValue" /> 的數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 等於 <see cref="F:System.Int32.MinValue" />。</exception>
    </member>
    <member name="M:System.Math.Abs(System.Int64)">
      <summary>傳回 64 位元帶正負號整數的絕對值。</summary>
      <returns>64 位元帶正負號的整數 x，滿足 0 ≤ x ≤<see cref="F:System.Int64.MaxValue" />。</returns>
      <param name="value">大於或等於 <see cref="F:System.Int64.MinValue" /> 但小於或等於 <see cref="F:System.Int64.MaxValue" /> 的數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 等於 <see cref="F:System.Int64.MinValue" />。</exception>
    </member>
    <member name="M:System.Math.Abs(System.SByte)">
      <summary>傳回 8 位元帶正負號整數的絕對值。</summary>
      <returns>8 位元帶正負號的整數 x，滿足 0 ≤ x ≤<see cref="F:System.SByte.MaxValue" />。</returns>
      <param name="value">大於或等於 <see cref="F:System.SByte.MinValue" /> 但小於或等於 <see cref="F:System.SByte.MaxValue" /> 的數字。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 等於 <see cref="F:System.SByte.MinValue" />。</exception>
    </member>
    <member name="M:System.Math.Abs(System.Single)">
      <summary>傳回單精確度浮點數的絕對值。</summary>
      <returns>單精度浮點數 x，滿足 0 ≤ x ≤<see cref="F:System.Single.MaxValue" />。</returns>
      <param name="value">大於或等於 <see cref="F:System.Single.MinValue" /> 但小於或等於 <see cref="F:System.Single.MaxValue" /> 的數字。</param>
    </member>
    <member name="M:System.Math.Acos(System.Double)">
      <summary>傳回餘弦函數 (Cosine) 是指定數字的角。</summary>
      <returns>單位為弧度的角度 θ，滿足 0 ≤θ≤π-或-如果 <paramref name="d" /> &lt; -1 或 <paramref name="d" /> &gt; 1 或 <paramref name="d" /> 等於 <see cref="F:System.Double.NaN" />，則為 <see cref="F:System.Double.NaN" />。</returns>
      <param name="d">表示餘弦的數字，其中 <paramref name="d" /> 必須大於或等於 -1，但小於或等於 1。</param>
    </member>
    <member name="M:System.Math.Asin(System.Double)">
      <summary>傳回正弦函數 (Sine) 是指定數字的角。</summary>
      <returns>單位為弧度的角度 θ，滿足 -π/2 ≤θ≤π/2 -或-如果 <paramref name="d" /> &lt; -1 或 <paramref name="d" /> &gt; 1 或 <paramref name="d" /> 等於 <see cref="F:System.Double.NaN" />，則為 <see cref="F:System.Double.NaN" />。</returns>
      <param name="d">表示正弦的數字，其中 <paramref name="d" /> 必須大於或等於 -1，但小於或等於 1。</param>
    </member>
    <member name="M:System.Math.Atan(System.Double)">
      <summary>傳回正切函數 (Tangent) 是指定數字的角。</summary>
      <returns>單位為弧度的角度 θ，滿足 -π/2 ≤θ≤π/2。-或-如果 <paramref name="d" /> 等於 <see cref="F:System.Double.NaN" /> 則為 <see cref="F:System.Double.NaN" />、如果 <paramref name="d" /> 等於 <see cref="F:System.Double.NegativeInfinity" /> 則為 -π/2 捨入至雙精確度浮點數 (-1.5707963267949)，或如果 <paramref name="d" /> 等於 <see cref="F:System.Double.PositiveInfinity" /> 則為 π/2 捨入至雙精確度浮點數 (1.5707963267949)。</returns>
      <param name="d">表示正切函數的數字。</param>
    </member>
    <member name="M:System.Math.Atan2(System.Double,System.Double)">
      <summary>傳回正切函數是兩個指定數字之商數的角。</summary>
      <returns>單位為弧度的角度 θ，滿足 -π≤θ≤π，且 tan(θ) = <paramref name="y" /> / <paramref name="x" />，其中 (<paramref name="x" />, <paramref name="y" />) 為笛卡兒平面 (Cartesian Plane) 上的點。注意下列各項：如果 (<paramref name="x" />, <paramref name="y" />) 在第 1 象限，則 0 &lt; θ &lt; π/2。如果 (<paramref name="x" />, <paramref name="y" />) 在第 2 象限，則 π/2 &lt; θ≤π。如果 (<paramref name="x" />, <paramref name="y" />) 在第 3 象限，則 -π &lt; θ &lt; -π/2。如果 (<paramref name="x" />, <paramref name="y" />) 在第 4 象限，則 -π/2 &lt; θ &lt; 0。如果是位在象限界限上的點，則傳回值如下：如果 y 是 0，而 <paramref name="x" /> 不是負值，則 θ = 0。如果 y 是 0 且 <paramref name="x" /> 是負值，則 θ = π。如果 y 是正值，而 <paramref name="x" /> 是 0，則 θ = π/2。如果 y 是負值，且 x 是 0，則 θ = -π/2。如果 <paramref name="x" /> 或 <paramref name="y" /> 是 <see cref="F:System.Double.NaN" />，或者 <paramref name="x" /> 和 <paramref name="y" /> 是 <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />，此方法會傳回 <see cref="F:System.Double.NaN" />。</returns>
      <param name="y">點的 Y 座標。</param>
      <param name="x">點的 X 座標。</param>
    </member>
    <member name="M:System.Math.Ceiling(System.Decimal)">
      <summary>傳回大於或等於指定之十進位數字的最小整數值。</summary>
      <returns>大於或等於 <paramref name="d" /> 的最小整數值。請注意，這個方法會傳回 <see cref="T:System.Decimal" />，而不是整數類資料型別。</returns>
      <param name="d">十進位數字。</param>
    </member>
    <member name="M:System.Math.Ceiling(System.Double)">
      <summary>傳回大於或等於指定的雙精確度浮點數的最小整數值。</summary>
      <returns>大於或等於 <paramref name="a" /> 的最小整數值。如果 <paramref name="a" /> 等於 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，則會傳回該值。請注意，此方法會傳回 <see cref="T:System.Double" />，而不是整數類資料型別。</returns>
      <param name="a">雙精確度浮點數。</param>
    </member>
    <member name="M:System.Math.Cos(System.Double)">
      <summary>傳回指定角的餘弦函數。</summary>
      <returns>
        <paramref name="d" /> 的餘弦函數。如果 <paramref name="d" /> 等於 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，則這個方法會傳回 <see cref="F:System.Double.NaN" />。</returns>
      <param name="d">角度，以弧度為單位。</param>
    </member>
    <member name="M:System.Math.Cosh(System.Double)">
      <summary>傳回指定角的雙曲線餘弦函數。</summary>
      <returns>
        <paramref name="value" /> 的雙曲線餘弦函數。如果 <paramref name="value" /> 等於 <see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，則會傳回 <see cref="F:System.Double.PositiveInfinity" />。如果 <paramref name="value" /> 等於 <see cref="F:System.Double.NaN" />，則會傳回 <see cref="F:System.Double.NaN" />。</returns>
      <param name="value">角度，以弧度為單位。</param>
    </member>
    <member name="F:System.Math.E">
      <summary>表示自然對數基底，由常數 e 指定。</summary>
    </member>
    <member name="M:System.Math.Exp(System.Double)">
      <summary>傳回 e 的指定次數乘冪。</summary>
      <returns>數字 e 的 <paramref name="d" /> 次乘冪。如果 <paramref name="d" /> 等於 <see cref="F:System.Double.NaN" /> 或 <see cref="F:System.Double.PositiveInfinity" />，則傳回該值。如果 <paramref name="d" /> 等於 <see cref="F:System.Double.NegativeInfinity" />，則傳回 0。</returns>
      <param name="d">指定乘冪數的數字。</param>
    </member>
    <member name="M:System.Math.Floor(System.Decimal)">
      <summary>傳回小於或等於指定的十進位數字的最大整數。</summary>
      <returns>小於或等於 <paramref name="d" /> 的最大整數。</returns>
      <param name="d">十進位數字。</param>
    </member>
    <member name="M:System.Math.Floor(System.Double)">
      <summary>傳回小於或等於指定的雙精確度浮點數的最大整數。</summary>
      <returns>小於或等於 <paramref name="d" /> 的最大整數。如果 <paramref name="d" /> 等於 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，則會傳回該值。</returns>
      <param name="d">雙精確度浮點數。</param>
    </member>
    <member name="M:System.Math.IEEERemainder(System.Double,System.Double)">
      <summary>傳回指定數字除以另一個指定數字所得的餘數。</summary>
      <returns>等於 <paramref name="x" /> - (<paramref name="y" /> Q) 的數字，其中 Q 是捨入至最接近整數的 <paramref name="x" /> / <paramref name="y" /> 的商數 (如果 <paramref name="x" /> / <paramref name="y" /> 是兩個整數的中間數，則會傳回偶數整數)。如果 <paramref name="x" /> - (<paramref name="y" /> Q) 為零，則在 <paramref name="x" /> 為正時傳回值 +0，或在 <paramref name="x" /> 為負時傳回 -0。如果 <paramref name="y" /> = 0，則傳回 <see cref="F:System.Double.NaN" /> (非數字)。</returns>
      <param name="x">被除數。</param>
      <param name="y">除數。</param>
    </member>
    <member name="M:System.Math.Log(System.Double)">
      <summary>傳回指定數字的自然 (底數為 e) 對數。</summary>
      <returns>下表的其中一個值。 的正負號<paramref name="d" />傳回正<paramref name="d" /> 的自然對數，也就是 ln <paramref name="d" /> 或 log e<paramref name="d" />零<see cref="F:System.Double.NegativeInfinity" />負<see cref="F:System.Double.NaN" />等於 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" />等於 <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
      <param name="d">要找出其對數的數字。</param>
    </member>
    <member name="M:System.Math.Log(System.Double,System.Double)">
      <summary>傳回具有指定底數的指定數字之對數。</summary>
      <returns>下表的其中一個值。(+Infinity 表示 <see cref="F:System.Double.PositiveInfinity" />，-Infinity 表示 <see cref="F:System.Double.NegativeInfinity" />，NaN 則表示 <see cref="F:System.Double.NaN" />)。<paramref name="a" /><paramref name="newBase" />傳回值<paramref name="a" />&gt; 0(0 &lt;<paramref name="newBase" />&lt; 1) -或-(<paramref name="newBase" />&gt; 1)lognewBase(a)<paramref name="a" />&lt; 0(任意值)NaN(任意值)<paramref name="newBase" />&lt; 0NaN<paramref name="a" /> != 1<paramref name="newBase" /> = 0NaN<paramref name="a" /> != 1<paramref name="newBase" /> = +InfinityNaN<paramref name="a" /> = NaN(任意值)NaN(任意值)<paramref name="newBase" /> = NaNNaN(任意值)<paramref name="newBase" /> = 1NaN<paramref name="a" /> = 00 &lt;<paramref name="newBase" />&lt; 1 +Infinity<paramref name="a" /> = 0<paramref name="newBase" />&gt; 1-Infinity<paramref name="a" /> = +Infinity0 &lt;<paramref name="newBase" />&lt; 1-Infinity<paramref name="a" /> = +Infinity<paramref name="newBase" />&gt; 1+Infinity<paramref name="a" /> = 1<paramref name="newBase" /> = 00<paramref name="a" /> = 1<paramref name="newBase" /> = +Infinity0</returns>
      <param name="a">要找出其對數的數字。</param>
      <param name="newBase">對數的底數。</param>
    </member>
    <member name="M:System.Math.Log10(System.Double)">
      <summary>傳回指定數字的底數 10 對數。</summary>
      <returns>下表的其中一個值。 的正負號<paramref name="d" />傳回值正<paramref name="d" /> 的底數為 10 的對數，也就是 log 10<paramref name="d" />。零<see cref="F:System.Double.NegativeInfinity" />負<see cref="F:System.Double.NaN" />等於 <see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" />等於 <see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
      <param name="d">要找出其對數的數字。</param>
    </member>
    <member name="M:System.Math.Max(System.Byte,System.Byte)">
      <summary>傳回兩個 8 位元不帶正負號整數中較大的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較大者。</returns>
      <param name="val1">要比較的兩個 8 位元不帶正負號整數中的第 1 個。</param>
      <param name="val2">比較的兩個 8 位元不帶正負號整數中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Max(System.Decimal,System.Decimal)">
      <summary>傳回兩個十進位數字中較大的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較大者。</returns>
      <param name="val1">要比較的兩個 <see cref="T:System.Decimal" /> 數字中的第 1 個。</param>
      <param name="val2">要比較的兩個 <see cref="T:System.Decimal" /> 數字中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Max(System.Double,System.Double)">
      <summary>傳回兩個雙精確度浮點數中較大的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較大者。如果 <paramref name="val1" />、<paramref name="val2" />，或 <paramref name="val1" /> 和 <paramref name="val2" /> 都等於 <see cref="F:System.Double.NaN" />，則會傳回 <see cref="F:System.Double.NaN" />。</returns>
      <param name="val1">要比較的兩個雙精確度浮點數中的第 1 個。</param>
      <param name="val2">要比較的兩個雙精確度浮點數中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Max(System.Int16,System.Int16)">
      <summary>傳回兩個 16 位元帶正負號整數中較大的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較大者。</returns>
      <param name="val1">要比較的兩個 16 位元帶正負號整數中的第 1 個。</param>
      <param name="val2">要比較的兩個 16 位元帶正負號整數中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Max(System.Int32,System.Int32)">
      <summary>傳回兩個 32 位元帶正負號整數中較大的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較大者。</returns>
      <param name="val1">要比較的兩個 32 位元帶正負號整數中的第 1 個。</param>
      <param name="val2">要比較的兩個 32 位元帶正負號整數中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Max(System.Int64,System.Int64)">
      <summary>傳回兩個 64 位元帶正負號整數中較大的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較大者。</returns>
      <param name="val1">要比較的兩個 64 位元帶正負號整數中的第 1 個。</param>
      <param name="val2">要比較的兩個 64 位元帶正負號整數中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Max(System.SByte,System.SByte)">
      <summary>傳回兩個 8 位元帶正負號整數中較大的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較大者。</returns>
      <param name="val1">要比較的兩個 8 位元帶正負號整數中的第 1 個。</param>
      <param name="val2">要比較的兩個 8 位元帶正負號整數中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Max(System.Single,System.Single)">
      <summary>傳回兩個單精確度浮點數中較大的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較大者。如果 <paramref name="val1" />、<paramref name="val2" /> 或 <paramref name="val1" /> 和 <paramref name="val2" /> 都等於 <see cref="F:System.Single.NaN" />，則會傳回 <see cref="F:System.Single.NaN" />。</returns>
      <param name="val1">要比較的兩個單精確度浮點數中的第 1 個。</param>
      <param name="val2">要比較的兩個單精確度浮點數中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
      <summary>傳回兩個 16 位元不帶正負號整數中較大的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較大者。</returns>
      <param name="val1">要比較的兩個 16 位元不帶正負號整數中的第 1 個。</param>
      <param name="val2">比較的兩個 16 位元不帶正負號整數中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
      <summary>傳回兩個 32 位元不帶正負號整數中較大的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較大者。</returns>
      <param name="val1">要比較的兩個 32 位元不帶正負號整數中的第 1 個。</param>
      <param name="val2">比較的兩個 32 位元不帶正負號整數中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
      <summary>傳回兩個 64 位元不帶正負號整數中較大的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較大者。</returns>
      <param name="val1">要比較的兩個 64 位元不帶正負號整數中的第 1 個。</param>
      <param name="val2">比較的兩個 64 位元不帶正負號整數中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Min(System.Byte,System.Byte)">
      <summary>傳回兩個 8 位元不帶正負號整數中較小的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較小者。</returns>
      <param name="val1">要比較的兩個 8 位元不帶正負號整數中的第 1 個。</param>
      <param name="val2">比較的兩個 8 位元不帶正負號整數中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Min(System.Decimal,System.Decimal)">
      <summary>傳回兩個十進位數字中較小的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較小者。</returns>
      <param name="val1">要比較的兩個 <see cref="T:System.Decimal" /> 數字中的第 1 個。</param>
      <param name="val2">要比較的兩個 <see cref="T:System.Decimal" /> 數字中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Min(System.Double,System.Double)">
      <summary>傳回兩個雙精確度浮點數中較小的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較小者。如果 <paramref name="val1" />、<paramref name="val2" />，或 <paramref name="val1" /> 和 <paramref name="val2" /> 都等於 <see cref="F:System.Double.NaN" />，則會傳回 <see cref="F:System.Double.NaN" />。</returns>
      <param name="val1">要比較的兩個雙精確度浮點數中的第 1 個。</param>
      <param name="val2">要比較的兩個雙精確度浮點數中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Min(System.Int16,System.Int16)">
      <summary>傳回兩個 16 位元帶正負號整數中較小的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較小者。</returns>
      <param name="val1">要比較的兩個 16 位元帶正負號整數中的第 1 個。</param>
      <param name="val2">要比較的兩個 16 位元帶正負號整數中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Min(System.Int32,System.Int32)">
      <summary>傳回兩個 32 位元帶正負號整數中較小的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較小者。</returns>
      <param name="val1">要比較的兩個 32 位元帶正負號整數中的第 1 個。</param>
      <param name="val2">要比較的兩個 32 位元帶正負號整數中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Min(System.Int64,System.Int64)">
      <summary>傳回兩個 64 位元帶正負號整數中較小的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較小者。</returns>
      <param name="val1">要比較的兩個 64 位元帶正負號整數中的第 1 個。</param>
      <param name="val2">要比較的兩個 64 位元帶正負號整數中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Min(System.SByte,System.SByte)">
      <summary>傳回兩個 8 位元帶正負號整數中較小的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較小者。</returns>
      <param name="val1">要比較的兩個 8 位元帶正負號整數中的第 1 個。</param>
      <param name="val2">要比較的兩個 8 位元帶正負號整數中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Min(System.Single,System.Single)">
      <summary>傳回兩個單精確度浮點數中較小的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較小者。如果 <paramref name="val1" />、<paramref name="val2" />，或 <paramref name="val1" /> 和 <paramref name="val2" /> 都等於 <see cref="F:System.Single.NaN" />，則會傳回 <see cref="F:System.Single.NaN" />。</returns>
      <param name="val1">要比較的兩個單精確度浮點數中的第 1 個。</param>
      <param name="val2">要比較的兩個單精確度浮點數中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
      <summary>傳回兩個 16 位元不帶正負號整數中較小的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較小者。</returns>
      <param name="val1">要比較的兩個 16 位元不帶正負號整數中的第 1 個。</param>
      <param name="val2">比較的兩個 16 位元不帶正負號整數中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
      <summary>傳回兩個 32 位元不帶正負號整數中較小的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較小者。</returns>
      <param name="val1">要比較的兩個 32 位元不帶正負號整數中的第 1 個。</param>
      <param name="val2">比較的兩個 32 位元不帶正負號整數中的第 2 個。</param>
    </member>
    <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
      <summary>傳回兩個 64 位元不帶正負號整數中較小的一個。</summary>
      <returns>參數 <paramref name="val1" /> 或 <paramref name="val2" />，擇一較小者。</returns>
      <param name="val1">要比較的兩個 64 位元不帶正負號整數中的第 1 個。</param>
      <param name="val2">比較的兩個 64 位元不帶正負號整數中的第 2 個。</param>
    </member>
    <member name="F:System.Math.PI">
      <summary>表示圓周率，由常數 π 指定。</summary>
    </member>
    <member name="M:System.Math.Pow(System.Double,System.Double)">
      <summary>傳回具有指定乘冪數的指定數字。</summary>
      <returns>數字 <paramref name="x" /> 的 <paramref name="y" /> 次乘冪。</returns>
      <param name="x">雙精確度浮點數，做為乘冪數。</param>
      <param name="y">雙精確度浮點數，用來指定乘冪數。</param>
    </member>
    <member name="M:System.Math.Round(System.Decimal)">
      <summary>將十進位的值捨入至最接近的整數值。</summary>
      <returns>最接近參數 <paramref name="d" /> 的整數。如果 <paramref name="d" /> 的小數部分落在兩個整數中間，一個是偶數，另一個是奇數，則會傳回偶數。請注意，此方法會傳回 <see cref="T:System.Decimal" /> 型別，而不是整數類資料型別。</returns>
      <param name="d">要捨入的十進位數字。</param>
      <exception cref="T:System.OverflowException">結果位於 <see cref="T:System.Decimal" /> 的範圍之外。</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32)">
      <summary>將十進位值捨入為指定的小數位數。</summary>
      <returns>小數位數等於 <paramref name="decimals" /> 之最接近 <paramref name="d" /> 的數字。</returns>
      <param name="d">要捨入的十進位數字。</param>
      <param name="decimals">傳回值中的小數位數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> 小於 0 或大於 28。</exception>
      <exception cref="T:System.OverflowException">結果位於 <see cref="T:System.Decimal" /> 的範圍之外。</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)">
      <summary>將十進位值捨入為指定的小數位數。如果值介於兩個其他數字之間，參數會指定如何捨入該值。</summary>
      <returns>最接近 <paramref name="d" /> 的數字，其中包含等於 <paramref name="decimals" /> 的小數位數。如果 <paramref name="d" /> 的小數位數少於 <paramref name="decimals" />，則傳回未變更的 <paramref name="d" />。</returns>
      <param name="d">要捨入的十進位數字。</param>
      <param name="decimals">傳回值中的小數位數。</param>
      <param name="mode">指定如何捨入 <paramref name="d" /> (如果它剛好介於兩個其他數字的中間)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> 小於 0 或大於 28。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是 <see cref="T:System.MidpointRounding" /> 的有效值。</exception>
      <exception cref="T:System.OverflowException">結果位於 <see cref="T:System.Decimal" /> 的範圍之外。</exception>
    </member>
    <member name="M:System.Math.Round(System.Decimal,System.MidpointRounding)">
      <summary>將十進位值捨入至最接近的整數。如果值介於兩個其他數字之間，參數會指定如何捨入該值。</summary>
      <returns>最接近 <paramref name="d" /> 的整數。如果 <paramref name="d" /> 正好為兩個數字的中間數 (一個為偶數，另一個為奇數)，則 <paramref name="mode" /> 會決定要傳回哪個數字。</returns>
      <param name="d">要捨入的十進位數字。</param>
      <param name="mode">指定如何捨入 <paramref name="d" /> (如果它剛好介於兩個其他數字的中間)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是 <see cref="T:System.MidpointRounding" /> 的有效值。</exception>
      <exception cref="T:System.OverflowException">結果位於 <see cref="T:System.Decimal" /> 的範圍之外。</exception>
    </member>
    <member name="M:System.Math.Round(System.Double)">
      <summary>將雙精確度浮點數捨入至最接近的整數值。</summary>
      <returns>最接近 <paramref name="a" /> 的整數。如果 <paramref name="a" /> 的小數部分落在兩個整數中間，一個是偶數，另一個是奇數，則會傳回偶數。請注意，此方法會傳回 <see cref="T:System.Double" /> 型別，而不是整數類資料型別。</returns>
      <param name="a">要捨入的雙精確度浮點數。</param>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32)">
      <summary>將雙精確度浮點值捨入至指定的小數位數。</summary>
      <returns>小數位數等於 <paramref name="digits" /> 之最接近 <paramref name="value" /> 的數字。</returns>
      <param name="value">要捨入的雙精確度浮點數。</param>
      <param name="digits">傳回值中的小數位數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> 小於 0 或大於 15。</exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)">
      <summary>將雙精度浮點值捨入至指定的小數位數。如果值介於兩個其他數字之間，參數會指定如何捨入該值。</summary>
      <returns>小數位數等於 <paramref name="digits" /> 之最接近 <paramref name="value" /> 的數字。如果 <paramref name="value" /> 的小數位數少於 <paramref name="digits" />，則傳回未變更的 <paramref name="value" />。</returns>
      <param name="value">要捨入的雙精確度浮點數。</param>
      <param name="digits">傳回值中的小數位數。</param>
      <param name="mode">指定如何捨入 <paramref name="value" /> (如果它剛好介於兩個其他數字的中間)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="digits" /> 小於 0 或大於 15。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是 <see cref="T:System.MidpointRounding" /> 的有效值。</exception>
    </member>
    <member name="M:System.Math.Round(System.Double,System.MidpointRounding)">
      <summary>將雙精度浮點數捨入至最接近的整數。如果值介於兩個其他數字之間，參數會指定如何捨入該值。</summary>
      <returns>最接近 <paramref name="value" /> 的整數。如果 <paramref name="value" /> 正好為兩個整數的中間數 (一個為偶數，另一個為奇數)，則 <paramref name="mode" /> 會決定要傳回哪個數字。</returns>
      <param name="value">要捨入的雙精確度浮點數。</param>
      <param name="mode">指定如何捨入 <paramref name="value" /> (如果它剛好介於兩個其他數字的中間)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是 <see cref="T:System.MidpointRounding" /> 的有效值。</exception>
    </member>
    <member name="M:System.Math.Sign(System.Decimal)">
      <summary>傳回數值，指出十進位數字的正負號。</summary>
      <returns>數字，指示 <paramref name="value" /> 的正負號。數字描述-1 <paramref name="value" /> 小於零。0 <paramref name="value" /> 等於零。1 <paramref name="value" /> 大於零。</returns>
      <param name="value">帶正負號的 <see cref="T:System.Decimal" /> 數字。</param>
    </member>
    <member name="M:System.Math.Sign(System.Double)">
      <summary>傳回數值，指出雙精確度浮點數的正負號。</summary>
      <returns>數字，指示 <paramref name="value" /> 的正負號。數字描述-1 <paramref name="value" /> 小於零。0 <paramref name="value" /> 等於零。1 <paramref name="value" /> 大於零。</returns>
      <param name="value">帶正負號的數字。</param>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> 等於 <see cref="F:System.Double.NaN" />。</exception>
    </member>
    <member name="M:System.Math.Sign(System.Int16)">
      <summary>傳回數值，指出 16 位元帶正負號整數的正負號。</summary>
      <returns>數字，指示 <paramref name="value" /> 的正負號。數字描述-1 <paramref name="value" /> 小於零。0 <paramref name="value" /> 等於零。1 <paramref name="value" /> 大於零。</returns>
      <param name="value">帶正負號的數字。</param>
    </member>
    <member name="M:System.Math.Sign(System.Int32)">
      <summary>傳回數值，指出 32 位元帶正負號整數的正負號。</summary>
      <returns>數字，指示 <paramref name="value" /> 的正負號。數字描述-1 <paramref name="value" /> 小於零。0 <paramref name="value" /> 等於零。1 <paramref name="value" /> 大於零。</returns>
      <param name="value">帶正負號的數字。</param>
    </member>
    <member name="M:System.Math.Sign(System.Int64)">
      <summary>傳回數值，指出 64 位元帶正負號整數的正負號。</summary>
      <returns>數字，指示 <paramref name="value" /> 的正負號。數字描述-1 <paramref name="value" /> 小於零。0 <paramref name="value" /> 等於零。1 <paramref name="value" /> 大於零。</returns>
      <param name="value">帶正負號的數字。</param>
    </member>
    <member name="M:System.Math.Sign(System.SByte)">
      <summary>傳回數值，指出 8 位元帶正負號整數的正負號。</summary>
      <returns>數字，指示 <paramref name="value" /> 的正負號。數字描述-1 <paramref name="value" /> 小於零。0 <paramref name="value" /> 等於零。1 <paramref name="value" /> 大於零。</returns>
      <param name="value">帶正負號的數字。</param>
    </member>
    <member name="M:System.Math.Sign(System.Single)">
      <summary>傳回數值，指出單精確度浮點數的正負號。</summary>
      <returns>數字，指示 <paramref name="value" /> 的正負號。數字描述-1 <paramref name="value" /> 小於零。0 <paramref name="value" /> 等於零。1 <paramref name="value" /> 大於零。</returns>
      <param name="value">帶正負號的數字。</param>
      <exception cref="T:System.ArithmeticException">
        <paramref name="value" /> 等於 <see cref="F:System.Single.NaN" />。</exception>
    </member>
    <member name="M:System.Math.Sin(System.Double)">
      <summary>傳回指定角的正弦函數。</summary>
      <returns>
        <paramref name="a" /> 的正弦函數。如果 <paramref name="a" /> 等於 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，則這個方法會傳回 <see cref="F:System.Double.NaN" />。</returns>
      <param name="a">角度，以弧度為單位。</param>
    </member>
    <member name="M:System.Math.Sinh(System.Double)">
      <summary>傳回指定角的雙曲線正弦函數。</summary>
      <returns>
        <paramref name="value" /> 的雙曲線正弦函數。如果 <paramref name="value" /> 等於 <see cref="F:System.Double.NegativeInfinity" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NaN" />，則這個方法會傳回等於 <paramref name="value" /> 的 <see cref="T:System.Double" />。</returns>
      <param name="value">角度，以弧度為單位。</param>
    </member>
    <member name="M:System.Math.Sqrt(System.Double)">
      <summary>傳回指定數字的平方根。</summary>
      <returns> 的值<paramref name="d" />傳回值零或正數<paramref name="d" /> 的正平方根。負<see cref="F:System.Double.NaN" />如果 <paramref name="d" /> 等於 <see cref="F:System.Double.NaN" /> 或 <see cref="F:System.Double.PositiveInfinity" />，則會傳回該值。</returns>
      <param name="d">數字。</param>
    </member>
    <member name="M:System.Math.Tan(System.Double)">
      <summary>傳回指定角的正切函數。</summary>
      <returns>
        <paramref name="a" /> 的正切函數。如果 <paramref name="a" /> 等於 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，則這個方法會傳回 <see cref="F:System.Double.NaN" />。</returns>
      <param name="a">角度，以弧度為單位。</param>
    </member>
    <member name="M:System.Math.Tanh(System.Double)">
      <summary>傳回指定角的雙曲線正切函數。</summary>
      <returns>
        <paramref name="value" /> 的雙曲線正切函數。如果 <paramref name="value" /> 等於 <see cref="F:System.Double.NegativeInfinity" />，這個方法會傳回 -1。如果值等於 <see cref="F:System.Double.PositiveInfinity" />，這個方法會傳回 1。如果 <paramref name="value" /> 等於 <see cref="F:System.Double.NaN" />，這個方法會傳回 <see cref="F:System.Double.NaN" />。</returns>
      <param name="value">角度，以弧度為單位。</param>
    </member>
    <member name="M:System.Math.Truncate(System.Decimal)">
      <summary>計算指定的十進位數字的整數部分。</summary>
      <returns>
        <paramref name="d" /> 的整數部分；換言之，捨棄所有小數點後的數字。</returns>
      <param name="d">要截斷的數字。</param>
    </member>
    <member name="M:System.Math.Truncate(System.Double)">
      <summary>計算指定的雙精度浮點數的整數部分。</summary>
      <returns>
        <paramref name="d" /> 的整數部分；換言之，捨棄所有小數點後的數字，或是下表中列出的其中一個值。<paramref name="d" />傳回值<see cref="F:System.Double.NaN" /><see cref="F:System.Double.NaN" /><see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Double.NegativeInfinity" /><see cref="F:System.Double.PositiveInfinity" /><see cref="F:System.Double.PositiveInfinity" /></returns>
      <param name="d">要截斷的數字。</param>
    </member>
    <member name="T:System.MemberAccessException">
      <summary>嘗試存取類別成員失敗時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor">
      <summary>初始化 <see cref="T:System.MemberAccessException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.MemberAccessException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.MemberAccessException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.MethodAccessException">
      <summary>當嘗試存取類別內私用的或保護的方法是不合法時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor">
      <summary>初始化 <see cref="T:System.MethodAccessException" /> 類別的新執行個體，設定新執行個體的 <see cref="P:System.Exception.Message" /> 屬性為描述錯誤的系統提供訊息，例如「嘗試存取方法失敗」。此訊息會考量目前系統的文化特性。</summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.MethodAccessException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.MethodAccessException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.MidpointRounding">
      <summary>指定數學捨入方法遇到剛好位於兩個數字中間的數字時，應採用何種處理方式。</summary>
    </member>
    <member name="F:System.MidpointRounding.AwayFromZero">
      <summary>當某個數字剛好位於另外兩個數字之間的中點時，朝向遠離零的方向將其捨入成距離最近的數字。</summary>
    </member>
    <member name="F:System.MidpointRounding.ToEven">
      <summary>當某個數字剛好位於另外兩個數字之間的中點時，將其捨入成為距離最近的偶數。</summary>
    </member>
    <member name="T:System.MissingFieldException">
      <summary>當嘗試動態存取不存在的欄位時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor">
      <summary>初始化 <see cref="T:System.MissingFieldException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.MissingFieldException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.MissingFieldException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.MissingMemberException">
      <summary>當嘗試動態存取不存在的類別成員時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor">
      <summary>初始化 <see cref="T:System.MissingMemberException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.MissingMemberException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況根本原因之內部例外狀況的參考來初始化 <see cref="T:System.MissingMemberException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">導致目前 Exception 的 <see cref="T:System.Exception" /> 的執行個體。如果 <paramref name="inner" /> 不是 null 參考 (在 Visual Basic 中為 Nothing)，則會在處理 <paramref name="inner" /> 的 Catch 區塊中引發目前的 Exception。</param>
    </member>
    <member name="P:System.MissingMemberException.Message">
      <summary>取得顯示類別名稱、成員名稱和遺漏成員簽章的文字字串。</summary>
      <returns>錯誤訊息字串。</returns>
    </member>
    <member name="T:System.MissingMethodException">
      <summary>當嘗試動態存取不存在的方法時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor">
      <summary>初始化 <see cref="T:System.MissingMethodException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.MissingMethodException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.MissingMethodException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.MTAThreadAttribute">
      <summary>指示應用程式的 COM 執行緒模型為多執行緒 Apartment (Multithreaded Apartment，MTA)。</summary>
    </member>
    <member name="M:System.MTAThreadAttribute.#ctor">
      <summary>初始化 <see cref="T:System.MTAThreadAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.MulticastDelegate">
      <summary>表示多重傳送的委派 (Delegate)；也就是說，委派可以在它的引動過程清單中包含一個以上的元素。</summary>
    </member>
    <member name="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
      <summary>結合此 <see cref="T:System.Delegate" /> 和指定的 <see cref="T:System.Delegate" />，形成新的委派。</summary>
      <returns>
        <see cref="T:System.Delegate" />，表示 <see cref="T:System.MulticastDelegate" /> 引動過程清單的新根 (Root)。</returns>
      <param name="follow">要和此委派結合的委派。</param>
      <exception cref="T:System.MemberAccessException">無法建立 abstract 類別的執行個體，或已利用最後繫結機制叫用此成員。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="a" /> 和 <paramref name="b" /> 都不是 null，而且 <paramref name="a" /> 和 <paramref name="b" /> 不是相同委派型別的執行個體。</exception>
    </member>
    <member name="M:System.MulticastDelegate.Equals(System.Object)">
      <summary>判斷此多重傳送委派和指定的物件是否相等。</summary>
      <returns>如果 <paramref name="obj" /> 和此執行個體具有相同的引動過程清單則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相互比較的物件。</param>
      <exception cref="T:System.MemberAccessException">無法建立 abstract 類別的執行個體，或已利用最後繫結機制叫用此成員。</exception>
    </member>
    <member name="M:System.MulticastDelegate.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
      <exception cref="T:System.MemberAccessException">無法建立 abstract 類別的執行個體，或已利用最後繫結機制叫用此成員。</exception>
    </member>
    <member name="M:System.MulticastDelegate.GetInvocationList">
      <summary>依照引動過程的順序，傳回此多重傳送委派的引動過程清單。</summary>
      <returns>委派陣列，其引動過程清單完全符合此執行個體的引動過程清單。</returns>
      <exception cref="T:System.MemberAccessException">無法建立 abstract 類別的執行個體，或已利用最後繫結機制叫用此成員。</exception>
    </member>
    <member name="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>判斷兩個 <see cref="T:System.MulticastDelegate" /> 物件是否相等。</summary>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 具有相同的引動過程清單則為 true，否則為 false。</returns>
      <param name="d1">左運算元。</param>
      <param name="d2">右運算元。</param>
      <exception cref="T:System.MemberAccessException">無法建立 abstract 類別的執行個體，或已利用最後繫結機制叫用此成員。</exception>
    </member>
    <member name="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>判斷兩個 <see cref="T:System.MulticastDelegate" /> 物件是否不相等。</summary>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 沒有相同的引動過程清單則為 true，否則為 false。</returns>
      <param name="d1">左運算元。</param>
      <param name="d2">右運算元。</param>
      <exception cref="T:System.MemberAccessException">無法建立 abstract 類別的執行個體，或已利用最後繫結機制叫用此成員。</exception>
    </member>
    <member name="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
      <summary>從此 <see cref="T:System.MulticastDelegate" /> 的引動過程清單中，移除和指定委派相等的元素。</summary>
      <returns>如果在這個執行個體的引動過程清單中找到 <paramref name="value" />，則傳回引動過程清單中沒有 <paramref name="value" /> 的新 <see cref="T:System.Delegate" />，否則，傳回含有原始引動過程清單的這個執行個體。</returns>
      <param name="value">要在引動過程清單中搜尋的委派。</param>
      <exception cref="T:System.MemberAccessException">無法建立 abstract 類別的執行個體，或已利用最後繫結機制叫用此成員。 </exception>
    </member>
    <member name="T:System.MulticastNotSupportedException">
      <summary>嘗試組合以 <see cref="T:System.Delegate" /> 型別 (而不是 <see cref="T:System.MulticastDelegate" /> 型別) 為基礎的兩個委派時，所擲回的例外狀況。無法繼承此類別。</summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor">
      <summary>初始化 <see cref="T:System.MulticastNotSupportedException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.MulticastNotSupportedException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.MulticastNotSupportedException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.NotFiniteNumberException">
      <summary>當浮點數值為正無限大、負無限大或非數字 (NaN) 時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor">
      <summary>初始化 <see cref="T:System.NotFiniteNumberException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.NotFiniteNumberException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況根本原因之內部例外狀況的參考來初始化 <see cref="T:System.NotFiniteNumberException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.NotImplementedException">
      <summary>當要求的方法或作業不實作時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.NotImplementedException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.NotImplementedException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.NotImplementedException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.NotSupportedException">
      <summary>當不支援叫用的方法，或是嘗試讀取、搜尋或寫入不支援叫用功能的資料流時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor">
      <summary>初始化 <see cref="T:System.NotSupportedException" /> 類別的新執行個體，設定該新執行個體的 <see cref="P:System.Exception.Message" /> 屬性為描述錯誤的系統提供訊息。此訊息會考量目前系統的文化特性。</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.NotSupportedException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。<paramref name="message" /> 的內容必須能讓人了解。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.NotSupportedException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null 參考，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Nullable">
      <summary>支援值型別，可以類似參考型別指派 null 給它。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>比較兩個 <see cref="T:System.Nullable`1" /> 物件的相對值。</summary>
      <returns>整數，表示 <paramref name="n1" /> 和 <paramref name="n2" /> 參數的相對值。傳回值描述小於零<paramref name="n1" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 false，而 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 true。-或-<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 true，而 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 屬性值小於 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 屬性值。零<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 false。-或-<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 true，而 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 屬性值等於 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 屬性值。大於零<paramref name="n1" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 true，而 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 false。-或-<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 true，而 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 屬性值大於 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 屬性值。</returns>
      <param name="n1">
        <see cref="T:System.Nullable`1" /> 物件。</param>
      <param name="n2">
        <see cref="T:System.Nullable`1" /> 物件。</param>
      <typeparam name="T">
        <paramref name="n1" /> 和 <paramref name="n2" /> 參數的基礎實值型別。</typeparam>
    </member>
    <member name="M:System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>指出兩個指定的 <see cref="T:System.Nullable`1" /> 物件是否相等。</summary>
      <returns>如果 <paramref name="n1" /> 參數等於 <paramref name="n2" /> 參數則為 true，否則為 false。傳回值取決於兩個比較參數的 <see cref="P:System.Nullable`1.HasValue" /> 和 <see cref="P:System.Nullable`1.Value" /> 屬性。傳回值描述true<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 false。-或-<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 true，並且參數的 <see cref="P:System.Nullable`1.Value" /> 屬性相等。false一個參數的 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 true，而另一個參數為 false。-或-<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 屬性都是 true，並且參數的 <see cref="P:System.Nullable`1.Value" /> 屬性不相等。</returns>
      <param name="n1">
        <see cref="T:System.Nullable`1" /> 物件。</param>
      <param name="n2">
        <see cref="T:System.Nullable`1" /> 物件。</param>
      <typeparam name="T">
        <paramref name="n1" /> 和 <paramref name="n2" /> 參數的基礎實值型別。</typeparam>
    </member>
    <member name="M:System.Nullable.GetUnderlyingType(System.Type)">
      <summary>傳回已指定可為 null 型別的基礎型別引數。</summary>
      <returns>如果 <paramref name="nullableType" /> 參數是封閉式泛型可為 null 的型別，則為 <paramref name="nullableType" /> 參數的型別引數，否則為 null。</returns>
      <param name="nullableType">
        <see cref="T:System.Type" /> 物件，描述封閉式泛型可為 null 的型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullableType" /> 為 null。</exception>
    </member>
    <member name="T:System.Nullable`1">
      <summary>表示其基礎型別為實值型別的物件，可以如同參考型別一樣指派 null。</summary>
      <typeparam name="T">
        <see cref="T:System.Nullable`1" /> 泛型型別的基礎實值型別。</typeparam>
    </member>
    <member name="M:System.Nullable`1.#ctor(`0)">
      <summary>將 <see cref="T:System.Nullable`1" /> 結構的新執行個體初始化為指定值。</summary>
      <param name="value">實值型別。</param>
    </member>
    <member name="M:System.Nullable`1.Equals(System.Object)">
      <summary>指出目前 <see cref="T:System.Nullable`1" /> 物件是否等於指定的物件。</summary>
      <returns>如果 <paramref name="other" /> 參數等於目前 <see cref="T:System.Nullable`1" /> 物件則為 true，否則為 false。下表描述如何為比較值定義相等比較：傳回值描述true<see cref="P:System.Nullable`1.HasValue" /> 屬性為 false，<paramref name="other" /> 參數為 null。也就是說，兩個 null 值在定義上是相等的。-或-<see cref="P:System.Nullable`1.HasValue" /> 屬性為 true，而 <see cref="P:System.Nullable`1.Value" /> 屬性所傳回的值與 <paramref name="other" /> 參數相等。false目前 <see cref="T:System.Nullable`1" /> 結構的 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 true，而 <paramref name="other" /> 參數為 null。-或-目前 <see cref="T:System.Nullable`1" /> 結構的 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 false，而 <paramref name="other" /> 參數為 null。-或-目前 <see cref="T:System.Nullable`1" /> 結構的 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 true，而 <see cref="P:System.Nullable`1.Value" /> 屬性所傳回的值與 <paramref name="other" /> 參數不相等。</returns>
      <param name="other">物件。</param>
    </member>
    <member name="M:System.Nullable`1.GetHashCode">
      <summary>擷取 <see cref="P:System.Nullable`1.Value" /> 屬性所傳回之物件的雜湊程式碼。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 true，則為 <see cref="P:System.Nullable`1.Value" /> 屬性所傳回之物件的雜湊碼，或是如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 false，則為零。</returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault">
      <summary>擷取目前 <see cref="T:System.Nullable`1" /> 物件的值，或物件的預設值。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 true，則為 <see cref="P:System.Nullable`1.Value" /> 屬性的值，否則為目前 <see cref="T:System.Nullable`1" /> 物件的預設值。預設值的型別是目前 <see cref="T:System.Nullable`1" /> 物件的型別引數，並且其值只由二進位零組成。</returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault(`0)">
      <summary>擷取目前 <see cref="T:System.Nullable`1" /> 物件的值，或指定的預設值。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 true，則為 <see cref="P:System.Nullable`1.Value" /> 屬性的值，否則為 <paramref name="defaultValue" /> 參數。</returns>
      <param name="defaultValue">如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 false，則為要傳回的值。</param>
    </member>
    <member name="P:System.Nullable`1.HasValue">
      <summary>取得值，指出目前 <see cref="T:System.Nullable`1" /> 物件是否有值。</summary>
      <returns>如果目前 <see cref="T:System.Nullable`1" /> 物件有值則為 true，如果目前 <see cref="T:System.Nullable`1" /> 物件沒有值，則為 false。</returns>
    </member>
    <member name="M:System.Nullable`1.op_Explicit(System.Nullable{`0})~`0">
      <summary>傳回指定之 <see cref="T:System.Nullable`1" /> 值的值。</summary>
      <returns>
        <paramref name="value" /> 參數之 <see cref="P:System.Nullable`1.Value" /> 屬性的值。</returns>
      <param name="value">
        <see cref="T:System.Nullable`1" /> 值。</param>
    </member>
    <member name="M:System.Nullable`1.op_Implicit(`0)~System.Nullable{`0}">
      <summary>建立新 <see cref="T:System.Nullable`1" /> 已經初始化為指定值的物件。</summary>
      <returns>
        <see cref="T:System.Nullable`1" /> 物件，其 <see cref="P:System.Nullable`1.Value" /> 屬性已經使用 <paramref name="value" /> 參數加以初始化。</returns>
      <param name="value">實值型別。</param>
    </member>
    <member name="M:System.Nullable`1.ToString">
      <summary>傳回目前 <see cref="T:System.Nullable`1" /> 物件值的文字表示。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 true，則為目前 <see cref="T:System.Nullable`1" /> 物件值的文字表示，如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 false，則為空字串 ("")。</returns>
    </member>
    <member name="P:System.Nullable`1.Value">
      <summary>取得目前的 <see cref="T:System.Nullable`1" /> 值。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 true，則為目前 <see cref="T:System.Nullable`1" /> 物件的值。如果 <see cref="P:System.Nullable`1.HasValue" /> 屬性為 false，則會擲回例外狀況。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Nullable`1.HasValue" /> 屬性為 false。</exception>
    </member>
    <member name="T:System.NullReferenceException">
      <summary>當嘗試解除 null 物件的參考時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor">
      <summary>初始化 <see cref="T:System.NullReferenceException" /> 類別的新執行個體，設定該新執行個體的 <see cref="P:System.Exception.Message" /> 屬性為描述錯誤的系統提供訊息，例如「在需要物件執行個體的位置找到 'Null' 值」。此訊息會考量目前系統的文化特性。</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.NullReferenceException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。<paramref name="message" /> 的內容必須能讓人了解。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.NullReferenceException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Object">
      <summary>支援 .NET Framework 類別階層架構中的所有類別，提供衍生類別的低階服務。這是 .NET Framework 中所有類別的超基底類別，是型別階層架構的根。</summary>
    </member>
    <member name="M:System.Object.#ctor">
      <summary>初始化 <see cref="T:System.Object" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Object.Equals(System.Object)">
      <summary>判斷指定的 <see cref="T:System.Object" /> 是否等於目前 <see cref="T:System.Object" />。</summary>
      <returns>如果指定的 <see cref="T:System.Object" /> 和目前的 <see cref="T:System.Object" /> 相等則為 true，否則為 false。</returns>
      <param name="obj">
        <see cref="T:System.Object" />，要與目前的 <see cref="T:System.Object" /> 比較。 </param>
    </member>
    <member name="M:System.Object.Equals(System.Object,System.Object)">
      <summary>判斷指定的 <see cref="T:System.Object" /> 執行個體是否視為相等。</summary>
      <returns>如果 <paramref name="objA" /> 與 <paramref name="objB" /> 是相同執行個體，或兩者為 null 參考，或 objA.Equals(objB) 傳回 true，則為 true，否則為 false。</returns>
      <param name="objA">要比較的第 1 個 <see cref="T:System.Object" />。 </param>
      <param name="objB">要比較的第 2 個 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Object.Finalize">
      <summary>在廢棄項目收集回收 <see cref="T:System.Object" /> 之前，允許物件嘗試釋放資源並執行其他清理作業。</summary>
    </member>
    <member name="M:System.Object.GetHashCode">
      <summary>做為特定型別的雜湊函式。 </summary>
      <returns>目前 <see cref="T:System.Object" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.Object.GetType">
      <summary>取得目前執行個體的 <see cref="T:System.Type" />。</summary>
      <returns>
        <see cref="T:System.Type" /> 執行個體，表示目前執行個體的確實執行階段型別。</returns>
    </member>
    <member name="M:System.Object.MemberwiseClone">
      <summary>建立目前 <see cref="T:System.Object" /> 的淺層複本 (Shallow Copy)。</summary>
      <returns>目前 <see cref="T:System.Object" /> 的淺層複本。</returns>
    </member>
    <member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
      <summary>判斷指定的物件執行個體是否為相同的執行個體。</summary>
      <returns>如果 <paramref name="objA" /> 與 <paramref name="objB" /> 為相同的執行個體，或兩者皆為 null，則為 true，否則為 false。</returns>
      <param name="objA">要比較的第 1 個物件。 </param>
      <param name="objB">要比較的第 2 個物件。 </param>
    </member>
    <member name="M:System.Object.ToString">
      <summary>傳回字串，表示目前的物件。</summary>
      <returns>字串，表示目前的物件。</returns>
    </member>
    <member name="T:System.ObjectDisposedException">
      <summary>當作業在處置物件上執行時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String)">
      <summary>使用含有處置物件的名稱來初始化 <see cref="T:System.ObjectDisposedException" /> 類別的新執行個體。</summary>
      <param name="objectName">字串，包含處置物件的名稱。</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.ObjectDisposedException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 不是 null，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
      <summary>使用指定的物件名稱和訊息來初始化 <see cref="T:System.ObjectDisposedException" /> 類別的新執行個體。</summary>
      <param name="objectName">已處置的物件的名稱。</param>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="P:System.ObjectDisposedException.Message">
      <summary>取得描述錯誤的訊息。</summary>
      <returns>描述錯誤的字串。</returns>
    </member>
    <member name="P:System.ObjectDisposedException.ObjectName">
      <summary>取得處置物件的名稱。</summary>
      <returns>字串，包含處置物件的名稱。</returns>
    </member>
    <member name="T:System.ObsoleteAttribute">
      <summary>標記不再使用的程式元素。無法繼承此類別。</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.ObsoleteAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String)">
      <summary>使用指定的因應措施訊息來初始化 <see cref="T:System.ObsoleteAttribute" /> 類別的新執行個體。</summary>
      <param name="message">說明其他運算的文字字串。</param>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String,System.Boolean)">
      <summary>使用運算訊息和指出使用已過時元素是否視為錯誤的布林值 (Boolean)，來初始化 <see cref="T:System.ObsoleteAttribute" /> 類別的新執行個體。</summary>
      <param name="message">說明其他運算的文字字串。</param>
      <param name="error">布林值，指出使用已過時元素是否視為錯誤。</param>
    </member>
    <member name="P:System.ObsoleteAttribute.IsError">
      <summary>取得布林值，指出編譯器 (Compiler) 是否將使用已過時程式元素視為錯誤。</summary>
      <returns>如果使用已過時元素視為錯誤則為 true，否則為 false。預設為 false。</returns>
    </member>
    <member name="P:System.ObsoleteAttribute.Message">
      <summary>取得運算訊息，包含其他程式元素的說明。</summary>
      <returns>運算的文字字串。</returns>
    </member>
    <member name="T:System.OperatingSystem">
      <summary>表示作業系統的資訊，例如版本和平台識別項。無法繼承此類別。</summary>
    </member>
    <member name="M:System.OperatingSystem.#ctor(System.PlatformID,System.Version)">
      <summary>使用指定的平台識別項值和版本物件來初始化 <see cref="T:System.OperatingSystem" /> 類別的新執行個體。</summary>
      <param name="platform">其中一個 <see cref="T:System.PlatformID" /> 值表示作業系統平台。</param>
      <param name="version">
        <see cref="T:System.Version" /> 物件，表示作業系統版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="platform" /> 不是 <see cref="T:System.PlatformID" /> 列舉值。</exception>
    </member>
    <member name="M:System.OperatingSystem.Clone">
      <summary>建立與此執行個體相同的 <see cref="T:System.OperatingSystem" /> 物件。</summary>
      <returns>為這個執行個體之複本的 <see cref="T:System.OperatingSystem" /> 物件。</returns>
    </member>
    <member name="P:System.OperatingSystem.Platform">
      <summary>取得辨識此作業系統平台的 <see cref="T:System.PlatformID" /> 列舉值。</summary>
      <returns>其中一個 <see cref="T:System.PlatformID" /> 值。</returns>
    </member>
    <member name="M:System.OperatingSystem.ToString">
      <summary>將此 <see cref="T:System.OperatingSystem" /> 物件的值轉換為它的對等字串表示。</summary>
      <returns>
        <see cref="P:System.OperatingSystem.Platform" /> 和 <see cref="P:System.OperatingSystem.Version" /> 傳回值的字串表示。</returns>
    </member>
    <member name="P:System.OperatingSystem.Version">
      <summary>取得辨識此作業系統的 <see cref="T:System.Version" /> 物件。</summary>
      <returns>描述這個作業系統的主要版本、次要版本、組建和修訂編號的 <see cref="T:System.Version" /> 物件。</returns>
    </member>
    <member name="T:System.OperationCanceledException">
      <summary>在取消執行緒執行的作業之後，在執行緒中擲回的例外狀況。</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor">
      <summary>使用系統提供的錯誤訊息，初始化 <see cref="T:System.OperationCanceledException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.OperationCanceledException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的字串。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.OperationCanceledException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外。如果 <paramref name="innerException" /> 參數並非 null，即會在處理內部例外狀況的 catch 區塊中發生目前的例外狀況。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>使用指定的錯誤訊息、造成這個例外狀況原因的內部例外狀況參考和取消語彙基元，初始化 <see cref="T:System.OperationCanceledException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外。如果 <paramref name="innerException" /> 參數並非 null，即會在處理內部例外狀況的 catch 區塊中發生目前的例外狀況。</param>
      <param name="token">與已取消作業關聯的取消語彙基元。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Threading.CancellationToken)">
      <summary>使用指定的錯誤訊息和取消語彙基元，初始化 <see cref="T:System.OperationCanceledException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="token">與已取消作業關聯的取消語彙基元。</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Threading.CancellationToken)">
      <summary>使用取消語彙基元，初始化 <see cref="T:System.OperationCanceledException" /> 類別的新執行個體。</summary>
      <param name="token">與已取消作業關聯的取消語彙基元。</param>
    </member>
    <member name="P:System.OperationCanceledException.CancellationToken">
      <summary>取得與已取消之作業關聯的語彙基元。</summary>
      <returns>與已取消之作業關聯的語彙基元，或是預設語彙基元。</returns>
    </member>
    <member name="T:System.OutOfMemoryException">
      <summary>當沒有足夠的記憶體繼續執行程式時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor">
      <summary>初始化 <see cref="T:System.OutOfMemoryException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.OutOfMemoryException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.OutOfMemoryException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.OverflowException">
      <summary>當檢查內容中的算數、轉型 (Casting) 或轉換作業發生溢位時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.OverflowException.#ctor">
      <summary>初始化 <see cref="T:System.OverflowException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.OverflowException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.OverflowException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.ParamArrayAttribute">
      <summary>表示方法將允許在引動過程中使用不定數目的引數。無法繼承此類別。</summary>
    </member>
    <member name="M:System.ParamArrayAttribute.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.ParamArrayAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.PlatformID">
      <summary>識別組件所支援的作業系統或開發平台。</summary>
    </member>
    <member name="F:System.PlatformID.NokiaS60">
      <summary>作業系統是 Nokia S60。</summary>
    </member>
    <member name="F:System.PlatformID.Unix">
      <summary>作業系統是 Unix。</summary>
    </member>
    <member name="F:System.PlatformID.Win32NT">
      <summary>作業系統是 Windows NT 或更新版本。</summary>
    </member>
    <member name="F:System.PlatformID.Win32S">
      <summary>作業系統是 Win32。Win32 是在 Windows 的 16 位元版本上執行的層級，提供存取 32 位元的應用程式。</summary>
    </member>
    <member name="F:System.PlatformID.Win32Windows">
      <summary>作業系統是 Windows 95 或更新版本。</summary>
    </member>
    <member name="F:System.PlatformID.WinCE">
      <summary>作業系統是 Windows CE。</summary>
    </member>
    <member name="F:System.PlatformID.Xbox">
      <summary>開發平台為 Xbox 360。</summary>
    </member>
    <member name="T:System.PlatformNotSupportedException">
      <summary>當某功能不在特定平台上執行時擲回的例外狀況。</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.PlatformNotSupportedException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.PlatformNotSupportedException" /> 類別的新執行個體。</summary>
      <param name="message">文字訊息，說明例外狀況的原因。</param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.PlatformNotSupportedException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Predicate`1">
      <summary>表示定義一組準則的方法，並判斷指定的物件是否符合這些準則。</summary>
      <returns>如果 <paramref name="obj" /> 符合這個委派表示方法中所定義的準則，則為 true，否則為 false。</returns>
      <param name="obj">要針對準則相比較的物件。</param>
      <typeparam name="T">要比較之物件的型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="T:System.Progress`1">
      <summary>提供 <see cref="T:System.IProgress`1" />，以針對每個報告的進度值叫用回呼。</summary>
      <typeparam name="T">指定進度報表值的型別。</typeparam>
    </member>
    <member name="M:System.Progress`1.#ctor">
      <summary>初始化 <see cref="T:System.Progress`1" /> 物件。</summary>
    </member>
    <member name="M:System.Progress`1.#ctor(System.Action{`0})">
      <summary>初始化具有指定之回呼的 <see cref="T:System.Progress`1" /> 物件。</summary>
      <param name="handler">可針對每個報告的進度值叫用的處理常式。除了以 <see cref="E:System.Progress`1.ProgressChanged" /> 事件登錄的所有委派以外，還會叫用這個處理常式。根據 <see cref="T:System.Progress`1" /> 在架構時擷取的 <see cref="T:System.Threading.SynchronizationContext" /> 執行個體而定，這個處理常式執行個體可能與本身同時叫用。</param>
    </member>
    <member name="M:System.Progress`1.OnReport(`0)">
      <summary>報告進度變更。</summary>
      <param name="value">已更新進度的值。</param>
    </member>
    <member name="E:System.Progress`1.ProgressChanged">
      <summary>針對每個報告的進度值引發。</summary>
    </member>
    <member name="M:System.Progress`1.System#IProgress{T}#Report(`0)">
      <summary>報告進度變更。</summary>
      <param name="value">已更新進度的值。</param>
    </member>
    <member name="T:System.Random">
      <summary>表示虛擬亂數產生器，為產生數字序列 (Sequence) 的裝置，符合隨機方式的特定統計需求。</summary>
    </member>
    <member name="M:System.Random.#ctor">
      <summary>使用時間相依預設種子值來初始化 <see cref="T:System.Random" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Random.#ctor(System.Int32)">
      <summary>使用指定的種子值初始化 <see cref="T:System.Random" /> 類別的新執行個體。</summary>
      <param name="Seed">用來計算虛擬亂數序列起始值的數字。如果指定了負數，則會採用數字的絕對值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="Seed" /> 是 <see cref="F:System.Int32.MinValue" />，計算其絕對值時會造成溢位。</exception>
    </member>
    <member name="M:System.Random.Next">
      <summary>傳回非負值的亂數。</summary>
      <returns>32 位元帶正負號的整數大於或等於零，並且小於 <see cref="F:System.Int32.MaxValue" />。</returns>
    </member>
    <member name="M:System.Random.Next(System.Int32)">
      <summary>傳回小於指定最大值的非負值亂數。</summary>
      <returns>32 位元帶正負號的整數，大於或等於零並且小於 <paramref name="maxValue" />，也就是說，傳回值的範圍通常包含零，但不包含 <paramref name="maxValue" />。然而，如果 <paramref name="maxValue" /> 等於零，則會傳回 <paramref name="maxValue" />。</returns>
      <param name="maxValue">產生亂數的獨佔上限 (Exclusive Upper Bound)。<paramref name="maxValue" /> 必須大於或等於零。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxValue" /> 小於零。</exception>
    </member>
    <member name="M:System.Random.Next(System.Int32,System.Int32)">
      <summary>傳回指定範圍內的亂數。</summary>
      <returns>32 位元帶正負號的整數，大於或等於 <paramref name="minValue" /> 並且小於 <paramref name="maxValue" />；也就是說，傳回值的範圍包含<paramref name="minValue" />，但不包含 <paramref name="maxValue" />。如果 <paramref name="minValue" /> 等於 <paramref name="maxValue" />，則傳回 <paramref name="minValue" />。</returns>
      <param name="minValue">傳回亂數的內含下限 (Inclusive Lower Bound)。</param>
      <param name="maxValue">傳回亂數的獨佔上限。<paramref name="maxValue" /> 必須大於或等於 <paramref name="minValue" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minValue" /> 大於 <paramref name="maxValue" />。</exception>
    </member>
    <member name="M:System.Random.NextBytes(System.Byte[])">
      <summary>以亂數填入指定位元組陣列的元素。</summary>
      <param name="buffer">要包含亂數的位元組陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
    </member>
    <member name="M:System.Random.NextDouble">
      <summary>傳回 0.0 和 1.0 之間的亂數。</summary>
      <returns>雙精確度浮點數大於或等於 0.0，且小於 1.0。</returns>
    </member>
    <member name="M:System.Random.Sample">
      <summary>傳回 0.0 和 1.0 之間的亂數。</summary>
      <returns>雙精確度浮點數大於或等於 0.0，且小於 1.0。</returns>
    </member>
    <member name="T:System.RankException">
      <summary>當將錯誤維度 (Dimension) 數目的陣列傳遞給方法時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.RankException.#ctor">
      <summary>初始化 <see cref="T:System.RankException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.RankException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.RankException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.RankException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.RankException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.ResolveEventArgs">
      <summary>提供 <see cref="E:System.AppDomain.AssemblyResolve" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ResolveEventArgs.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ResolveEventArgs" /> 類別的新執行個體。</summary>
      <param name="name">要解析的項目名稱。</param>
    </member>
    <member name="P:System.ResolveEventArgs.Name">
      <summary>取得要解析的項目名稱。</summary>
      <returns>要解析的項目名稱。</returns>
    </member>
    <member name="T:System.ResolveEventHandler">
      <summary>[安全性關鍵] 表示處理 <see cref="E:System.AppDomain.AssemblyResolve" /> 事件的方法。</summary>
      <returns>已解析的組件，如果無法解析組件則為 null。</returns>
      <param name="sender">事件的來源。</param>
      <param name="args">事件資料。</param>
    </member>
    <member name="T:System.RuntimeArgumentHandle">
      <summary>參考可變長度的引數清單。</summary>
    </member>
    <member name="T:System.RuntimeFieldHandle">
      <summary>使用內部中繼資料 (Metadata) 語彙基元 (Token) 來表示欄位。</summary>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.Object)">
      <summary>指出目前執行個體和指定的物件是否相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.RuntimeFieldHandle" />，並且等於目前執行個體的值，則為 true，否則為 false。</returns>
      <param name="obj">要與目前執行個體相比較的物件。</param>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)">
      <summary>指出目前的執行個體和指定的 <see cref="T:System.RuntimeFieldHandle" /> 是否相等。</summary>
      <returns>如果 <paramref name="handle" /> 的值和目前執行個體的值相等則為 true，否則為 false.。</returns>
      <param name="handle">要與目前執行個體相比較的 <see cref="T:System.RuntimeFieldHandle" />。</param>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetHashCode"></member>
    <member name="M:System.RuntimeFieldHandle.op_Equality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>指出兩個 <see cref="T:System.RuntimeFieldHandle" /> 結構是否相等。</summary>
      <returns>如果 <paramref name="left" /> 等於 <paramref name="right" /> 則為 true，否則為 false。</returns>
      <param name="left">要比較的 <see cref="T:System.RuntimeFieldHandle" />。<paramref name="right" />。</param>
      <param name="right">要比較的 <see cref="T:System.RuntimeFieldHandle" />。<paramref name="left" />。</param>
    </member>
    <member name="M:System.RuntimeFieldHandle.op_Inequality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>指出兩個 <see cref="T:System.RuntimeFieldHandle" /> 結構是否不相等。</summary>
      <returns>如果 <paramref name="left" /> 不等於 <paramref name="right" /> 則為 true，否則為 false。</returns>
      <param name="left">要比較的 <see cref="T:System.RuntimeFieldHandle" />。<paramref name="right" />。</param>
      <param name="right">要比較的 <see cref="T:System.RuntimeFieldHandle" />。<paramref name="left" />。</param>
    </member>
    <member name="P:System.RuntimeFieldHandle.Value">
      <summary>取得目前執行個體所表示欄位的控點。</summary>
      <returns>
        <see cref="T:System.IntPtr" />，包含目前執行個體所表示欄位的控點。</returns>
    </member>
    <member name="T:System.RuntimeMethodHandle">
      <summary>
        <see cref="T:System.RuntimeMethodHandle" /> 是方法內部中繼資料表示的控制碼。</summary>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.Object)">
      <summary>指出此執行個體是否等於指定的物件。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.RuntimeMethodHandle" />，並且等於這個執行個體的值，則為 true，否則為 false。</returns>
      <param name="obj">與此執行個體比較的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)">
      <summary>指出此執行個體是否等於指定的 <see cref="T:System.RuntimeMethodHandle" />。</summary>
      <returns>如果 <paramref name="handle" /> 等於這個執行個體的值則為 true，否則為 false。</returns>
      <param name="handle">與此執行個體比較的 <see cref="T:System.RuntimeMethodHandle" />。</param>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>指出 <see cref="T:System.RuntimeMethodHandle" /> 的兩個執行個體是否相等。</summary>
      <returns>如果 <paramref name="left" /> 的值等於 <paramref name="right" /> 的值則為 true，否則為 false。</returns>
      <param name="left">要比較的 <see cref="T:System.RuntimeMethodHandle" />。<paramref name="right" />。</param>
      <param name="right">要比較的 <see cref="T:System.RuntimeMethodHandle" />。<paramref name="left" />。</param>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>指出 <see cref="T:System.RuntimeMethodHandle" /> 的兩個執行個體是否不相等。</summary>
      <returns>如果 <paramref name="left" /> 的值不等於 <paramref name="right" /> 的值則為 true，否則為 false。</returns>
      <param name="left">要比較的 <see cref="T:System.RuntimeMethodHandle" />。<paramref name="right" />。</param>
      <param name="right">要比較的 <see cref="T:System.RuntimeMethodHandle" />。<paramref name="left" />。</param>
    </member>
    <member name="P:System.RuntimeMethodHandle.Value">
      <summary>取得這個執行個體的值。</summary>
      <returns>方法內部中繼資料表示的控制代碼。</returns>
    </member>
    <member name="T:System.RuntimeTypeHandle">
      <summary>使用內部中繼資料 (Metadata) 語彙基元 (Token) 來表示型別。</summary>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.Object)">
      <summary>指出指定的物件是否等於目前 <see cref="T:System.RuntimeTypeHandle" /> 結構。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 結構，並且等於這個執行個體的值，則為 true，否則為 false。</returns>
      <param name="obj">與目前執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.RuntimeTypeHandle)">
      <summary>指出指定的 <see cref="T:System.RuntimeTypeHandle" /> 結構是否等於目前的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</summary>
      <returns>如果 <paramref name="handle" /> 的值等於此執行個體的值則為 true，否則為 false。</returns>
      <param name="handle">要與目前執行個體比較的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</param>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetHashCode">
      <summary>傳回目前執行個體的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.Object,System.RuntimeTypeHandle)">
      <summary>指出物件和 <see cref="T:System.RuntimeTypeHandle" /> 結構是否相等。</summary>
      <returns>如果 <paramref name="left" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 結構，並且等於 <paramref name="right" />，則為 true，否則為 false。</returns>
      <param name="left">要與 <paramref name="right" /> 比較的物件。</param>
      <param name="right">要與 <paramref name="left" /> 比較的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</param>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.RuntimeTypeHandle,System.Object)">
      <summary>指出 <see cref="T:System.RuntimeTypeHandle" /> 結構是否等於物件。</summary>
      <returns>如果 <paramref name="right" /> 是 <see cref="T:System.RuntimeTypeHandle" />，並且等於 <paramref name="left" />，則為 true，否則為 false。</returns>
      <param name="left">要與 <paramref name="right" /> 比較的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</param>
      <param name="right">要與 <paramref name="left" /> 比較的物件。</param>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.Object,System.RuntimeTypeHandle)">
      <summary>指出物件和 <see cref="T:System.RuntimeTypeHandle" /> 結構是否不相等。</summary>
      <returns>如果 <paramref name="left" /> 是 <see cref="T:System.RuntimeTypeHandle" />，並且不等於 <paramref name="right" />，則為 true，否則為 false。</returns>
      <param name="left">要與 <paramref name="right" /> 比較的物件。</param>
      <param name="right">要與 <paramref name="left" /> 比較的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</param>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.RuntimeTypeHandle,System.Object)">
      <summary>指出 <see cref="T:System.RuntimeTypeHandle" /> 結構是否不等於物件。</summary>
      <returns>如果 <paramref name="right" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 結構，並且不等於 <paramref name="left" />，則為 true，否則為 false。</returns>
      <param name="left">要與 <paramref name="right" /> 比較的 <see cref="T:System.RuntimeTypeHandle" /> 結構。</param>
      <param name="right">要與 <paramref name="left" /> 比較的物件。</param>
    </member>
    <member name="T:System.SByte">
      <summary>表示 8 位元帶正負號的整數 (Signed Integer)。</summary>
    </member>
    <member name="M:System.SByte.CompareTo(System.Object)">
      <summary>將此執行個體與指定的物件相比較，並傳回它們相對值的指示。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="obj" /> 的相對值。傳回值描述小於零這個執行個體小於 <paramref name="obj" />。零這個執行個體等於 <paramref name="obj" />。大於零這個執行個體大於 <paramref name="obj" />。-或-<paramref name="obj" /> 為 null。</returns>
      <param name="obj">要比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.SByte" />。</exception>
    </member>
    <member name="M:System.SByte.CompareTo(System.SByte)">
      <summary>將這個執行個體和指定的 8 位元帶正負號整數相比較，並傳回其相對值的指示。</summary>
      <returns>帶正負號的整數，表示這個執行個體與 <paramref name="value" /> 的相對順序。傳回值描述小於零這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。大於零這個執行個體大於 <paramref name="value" />。</returns>
      <param name="value">要比較的 8 位元帶正負號的整數。</param>
    </member>
    <member name="M:System.SByte.Equals(System.Object)">
      <summary>傳回值，指出此執行個體是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.SByte" /> 的執行個體，並且等於此執行個體的值，則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.SByte.Equals(System.SByte)">
      <summary>傳回值，指出此執行個體是否等於指定的 <see cref="T:System.SByte" /> 值。</summary>
      <returns>如果 <paramref name="obj" /> 與此執行個體具有相同的值則為 true，否則為 false。</returns>
      <param name="obj">與此執行個體比較的 <see cref="T:System.SByte" /> 值。</param>
    </member>
    <member name="M:System.SByte.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.SByte.GetTypeCode">
      <summary>傳回值型別 <see cref="T:System.SByte" /> 的 <see cref="T:System.TypeCode" />。</summary>
      <returns>列舉常數、<see cref="F:System.TypeCode.SByte" />。</returns>
    </member>
    <member name="F:System.SByte.MaxValue">
      <summary>表示 <see cref="T:System.SByte" /> 的最大可能值。此欄位為常數。</summary>
    </member>
    <member name="F:System.SByte.MinValue">
      <summary>表示 <see cref="T:System.SByte" /> 的最小可能值。此欄位為常數。</summary>
    </member>
    <member name="M:System.SByte.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，等於 <paramref name="s" /> 參數中包含的數字。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 樣式來解譯。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是由選擇性的正負號之後跟隨一連串數字 (0 到 9) 所組成。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將指定樣式中數字的字串表示轉換成它的對等 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，包含要轉換的數字。這個字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式元素。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。-或-<paramref name="s" /> 包含非零的小數數字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將數字的字串表示 (使用指定的樣式和特定文化特性的格式) 轉換成它的對等 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的位元組值，等於 <paramref name="s" /> 參數中所指定的數字。</returns>
      <param name="s">字串，包含要轉換的數字。該字串使用 <paramref name="style" /> 指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式元素。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。如果 <paramref name="provider" /> 為 null，則會使用執行緒目前的文化特性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 的組合。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。-或-<paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.IFormatProvider)">
      <summary>將所指定文化特性專屬格式之數字的字串表示，轉換為它的相等 8 位元帶正負號的整數。</summary>
      <returns>8 位元帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 樣式來解譯。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。如果 <paramref name="provider" /> 為 null，則會使用執行緒目前的文化特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零則為 true，否則為 false。</returns>
      <param name="provider">不使用此參數。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">不使用此參數。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試這麼做會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">不使用此參數。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為型別為 <paramref name="type" /> 的物件。</returns>
      <param name="type">要轉換此 <see cref="T:System.SByte" /> 值的 <see cref="T:System.Type" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值的格式資訊。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.SByte.ToString">
      <summary>將此執行個體的數值轉換為它的對等字串表示。</summary>
      <returns>此執行個體值的字串表示，包含減號 (如果數值為負) 及一連串範圍由 0 到 9 的數字 (沒有前置字元零)。</returns>
    </member>
    <member name="M:System.SByte.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
    </member>
    <member name="M:System.SByte.ToString(System.String)">
      <summary>使用指定格式，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">標準或自訂數值格式字串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。</exception>
    </member>
    <member name="M:System.SByte.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">標準或自訂數值格式字串。</param>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。</exception>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
      <summary>使用指定的文化特性特定格式資訊和格式樣式，將日期和時間的指定字串表示轉換為其對等的 <see cref="T:System.SByte" />，並傳回值，此值表示轉換是否成功。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 的允許格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <param name="result">當此方法回傳時，如果轉換成功則包含相當於 <paramref name="s" /> 所含數值的 8 位元帶正負號的整數值，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.SByte@)">
      <summary>嘗試將數字的字串表示轉換成同等的 <see cref="T:System.SByte" />，並傳回一個值指示轉換是否成功。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="result">當此方法傳回時，如果轉換成功便包含相對於 <paramref name="s" /> 中所含數字的 8 位元帶正負號的整數值，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、不是正確格式，或是表示小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="T:System.Single">
      <summary>表示單精確度浮點數。</summary>
    </member>
    <member name="M:System.Single.CompareTo(System.Object)">
      <summary>比較此執行個體與特定物件，並且傳回一個整數，指出此執行個體的值是大於、小於或等於特定物件的值。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的相對值。傳回值描述小於零這個執行個體小於 <paramref name="value" />。-或-這個執行個體不是數字 (<see cref="F:System.Single.NaN" />)，而且 <paramref name="value" /> 是數字。零這個執行個體等於 <paramref name="value" />。-或-這個執行個體和值皆不是數字 (<see cref="F:System.Single.NaN" />)、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />。大於零這個執行個體大於 <paramref name="value" />。-或-這個執行個體是數字，而且 <paramref name="value" /> 為非數字 (<see cref="F:System.Single.NaN" />)。-或-<paramref name="value" /> 為 null。</returns>
      <param name="value">要比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Single" />。</exception>
    </member>
    <member name="M:System.Single.CompareTo(System.Single)">
      <summary>比較此執行個體與單精確度的浮點數值，並且傳回一個整數，指出此執行個體的值是大於、小於或等於特定的單精確度浮點數值。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的相對值。傳回值描述小於零這個執行個體小於 <paramref name="value" />。-或-這個執行個體不是數字 (<see cref="F:System.Single.NaN" />)，而且 <paramref name="value" /> 是數字。零這個執行個體等於 <paramref name="value" />。-或-這個執行個體和 <paramref name="value" /> 都不是數字 (<see cref="F:System.Single.NaN" />)、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />。大於零這個執行個體大於 <paramref name="value" />。-或-這個執行個體是數字，而且 <paramref name="value" /> 為非數字 (<see cref="F:System.Single.NaN" />)。</returns>
      <param name="value">要比較的單精確度浮點數。</param>
    </member>
    <member name="F:System.Single.Epsilon">
      <summary>表示最小的正 <see cref="T:System.Single" /> 值大於零。此欄位為常數。</summary>
    </member>
    <member name="M:System.Single.Equals(System.Object)">
      <summary>傳回值，指出此執行個體是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.Single" /> 的執行個體，並且等於此執行個體的值則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Single.Equals(System.Single)">
      <summary>傳回指出此執行個體和指定的 <see cref="T:System.Single" /> 物件是否表示相同值的值。</summary>
      <returns>如果 <paramref name="obj" /> 等於這個執行個體則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相比較的 <see cref="T:System.Single" /> 物件。</param>
    </member>
    <member name="M:System.Single.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Single.GetTypeCode">
      <summary>傳回值型別 <see cref="T:System.Single" /> 的 <see cref="T:System.TypeCode" />。</summary>
      <returns>列舉常數、<see cref="F:System.TypeCode.Single" />。</returns>
    </member>
    <member name="M:System.Single.IsInfinity(System.Single)">
      <summary>傳回值，指出指定的數字是否評估為負或正的無限大。</summary>
      <returns>如果 <paramref name="f" /> 評估為 <see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />，則為 true，否則為 false。</returns>
      <param name="f">單精確度浮點數。</param>
    </member>
    <member name="M:System.Single.IsNaN(System.Single)">
      <summary>傳回值，指出指定的數字是否評估為非數字 (<see cref="F:System.Single.NaN" />)。</summary>
      <returns>如果 <paramref name="f" /> 評估為不是數字 (<see cref="F:System.Single.NaN" />) 則為 true，否則為 false。</returns>
      <param name="f">單精確度浮點數。</param>
    </member>
    <member name="M:System.Single.IsNegativeInfinity(System.Single)">
      <summary>傳回值，指出指定的數字是否評估為負的無限大。</summary>
      <returns>如果 <paramref name="f" /> 評估為 <see cref="F:System.Single.NegativeInfinity" /> 則為 true，否則為 false。</returns>
      <param name="f">單精確度浮點數。</param>
    </member>
    <member name="M:System.Single.IsPositiveInfinity(System.Single)">
      <summary>傳回值，指出指定數字是否評估為正的無限大。</summary>
      <returns>如果 <paramref name="f" /> 評估為 <see cref="F:System.Single.PositiveInfinity" /> 則為 true，否則為 false。</returns>
      <param name="f">單精確度浮點數。</param>
    </member>
    <member name="F:System.Single.MaxValue">
      <summary>表示 <see cref="T:System.Single" /> 的最大可能值。此欄位為常數。</summary>
    </member>
    <member name="F:System.Single.MinValue">
      <summary>表示 <see cref="T:System.Single" /> 的最小可能值。此欄位為常數。</summary>
    </member>
    <member name="F:System.Single.NaN">
      <summary>表示非數字 (NaN)。此欄位為常數。</summary>
    </member>
    <member name="F:System.Single.NegativeInfinity">
      <summary>表示負無限大。此欄位為常數。</summary>
    </member>
    <member name="M:System.Single.op_Equality(System.Single,System.Single)">
      <summary>傳回值，這個值表示兩個指定的 <see cref="T:System.Single" /> 值是否相等。</summary>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 相等則為 true，否則為 false。</returns>
      <param name="left">要比較的第 1 個值。</param>
      <param name="right">要比較的第 2 個值。</param>
    </member>
    <member name="M:System.Single.op_GreaterThan(System.Single,System.Single)">
      <summary>傳回值，這個值表示某個指定的 <see cref="T:System.Single" /> 值是否大於另一個指定的 <see cref="T:System.Single" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 大於 <paramref name="right" /> 則為 true，否則為 false。</returns>
      <param name="left">要比較的第 1 個值。</param>
      <param name="right">要比較的第 2 個值。</param>
    </member>
    <member name="M:System.Single.op_GreaterThanOrEqual(System.Single,System.Single)">
      <summary>傳回值，這個值表示某個指定的 <see cref="T:System.Single" /> 值是否大於或等於另一個指定的 <see cref="T:System.Single" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 大於或等於 <paramref name="right" /> 則為 true，否則為 false。</returns>
      <param name="left">要比較的第 1 個值。</param>
      <param name="right">要比較的第 2 個值。</param>
    </member>
    <member name="M:System.Single.op_Inequality(System.Single,System.Single)">
      <summary>傳回值，這個值表示兩個指定的 <see cref="T:System.Single" /> 值是否相等。</summary>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等則為 true，否則為 false。</returns>
      <param name="left">要比較的第 1 個值。</param>
      <param name="right">要比較的第 2 個值。</param>
    </member>
    <member name="M:System.Single.op_LessThan(System.Single,System.Single)">
      <summary>傳回值，這個值表示某個指定的 <see cref="T:System.Single" /> 值是否小於另一個指定的 <see cref="T:System.Single" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 小於 <paramref name="right" /> 則為 true，否則為 false。</returns>
      <param name="left">要比較的第 1 個值。</param>
      <param name="right">要比較的第 2 個值。</param>
    </member>
    <member name="M:System.Single.op_LessThanOrEqual(System.Single,System.Single)">
      <summary>傳回值，這個值表示某個指定的 <see cref="T:System.Single" /> 值是否小於或等於另一個指定的 <see cref="T:System.Single" /> 值。</summary>
      <returns>如果 <paramref name="left" /> 小於或等於 <paramref name="right" /> 則為 true，否則為 false。</returns>
      <param name="left">要比較的第 1 個值。</param>
      <param name="right">要比較的第 2 個值。</param>
    </member>
    <member name="M:System.Single.Parse(System.String)">
      <summary>將數字的字串表示轉換為其對等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，與 <paramref name="s" /> 中指定的數值或符號對等。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是有效格式的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將數字的字串表示 (使用指定樣式) 轉換為其對等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，與 <paramref name="s" /> 中指定的數值或符號對等。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式元素。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的組合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是有效格式的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 為 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將數字的字串表示 (使用指定樣式和的特定文化特性格式) 轉換為其對等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，與 <paramref name="s" /> 中指定的數值或符號對等。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 的允許格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的組合。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不表示為數值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 為 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.IFormatProvider)">
      <summary>將數字的字串表示 (使用指定的特定文化特性格式) 轉換為其對等的單精確度浮點數。</summary>
      <returns>單精確度浮點數，與 <paramref name="s" /> 中指定的數值或符號對等。</returns>
      <param name="s">字串，包含要轉換的數字。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是有效格式的數字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字。</exception>
    </member>
    <member name="F:System.Single.PositiveInfinity">
      <summary>表示正無限大。此欄位為常數。</summary>
    </member>
    <member name="M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零則為 true，否則為 false。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <param name="type">要將此 <see cref="T:System.Single" /> 值轉換成的型別。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值的格式資訊。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.Single.ToString">
      <summary>將此執行個體的數值轉換為它的對等字串表示。</summary>
      <returns>此執行個體值的字串表示。</returns>
    </member>
    <member name="M:System.Single.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
    </member>
    <member name="M:System.Single.ToString(System.String)">
      <summary>使用指定格式，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。</exception>
    </member>
    <member name="M:System.Single.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
      <summary>將數字的字串表示 (使用指定樣式和的特定文化特性格式) 轉換為其對等的單精確度浮點數。傳回碼 (Return Code) 會指出轉換是成功或是失敗。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 的允許格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的組合。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <param name="result">當此方法傳回時，如果轉換成功便包含等於 <paramref name="s" /> 所含數值或符號的單精確度浮點值，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、不是與 <paramref name="style" /> 相容的格式、表示小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字，或是如果 <paramref name="style" /> 不是有效的 <see cref="T:System.Globalization.NumberStyles" /> 列舉常數組合，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 為 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Single@)">
      <summary>將數字的字串表示轉換為其對等的單精確度浮點數。傳回碼 (Return Code) 會指出轉換是成功或是失敗。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="result">當此方法傳回時，如果轉換成功便包含等於 <paramref name="s" /> 所含數值或符號的單精確度浮點值，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、不是有效格式的數字，或表示小於 <see cref="F:System.Single.MinValue" /> 或者大於 <see cref="F:System.Single.MaxValue" /> 的數字，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="T:System.StackOverflowException">
      <summary>例外狀況，擲回於執行堆疊因為包含過多巢狀方法呼叫而溢位時。無法繼承此類別。</summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor">
      <summary>初始化 <see cref="T:System.StackOverflowException" /> 類別的新執行個體，設定新執行個體的 <see cref="P:System.Exception.Message" /> 屬性為描述錯誤的系統提供訊息，例如「要求的作業造成堆疊溢位」。此訊息會考量目前系統的文化特性。</summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.StackOverflowException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。message 的內容必須能讓人瞭解。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.StackOverflowException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.STAThreadAttribute">
      <summary>指出應用程式的 COM 執行緒模型為單一執行緒 Apartment (Single-Threaded Apartment，STA)。</summary>
    </member>
    <member name="M:System.STAThreadAttribute.#ctor">
      <summary>初始化 <see cref="T:System.STAThreadAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.String">
      <summary>將文字表示為一系列的 Unicode 字元。</summary>
    </member>
    <member name="M:System.String.#ctor(System.Char*)">
      <summary>[安全性關鍵] 將 <see cref="T:System.String" /> 類別的新執行個體初始化為 Unicode 字元陣列的指定指標所指示的值。</summary>
      <param name="value">指標，其屬於以 null 結束的 Unicode 字元陣列。</param>
    </member>
    <member name="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
      <summary>[安全性關鍵] 將 <see cref="T:System.String" /> 類別的新執行個體初始化為 Unicode 字元陣列、在陣列內起始字元的位置以及長度等等的指定指標所指示的值。</summary>
      <param name="value">Unicode 字元陣列的指標。</param>
      <param name="startIndex">起始位置在 <paramref name="value" /> 內。</param>
      <param name="length">
        <paramref name="value" /> 內要使用的字元數。</param>
    </member>
    <member name="M:System.String.#ctor(System.Char,System.Int32)">
      <summary>將 <see cref="T:System.String" /> 類別的新執行個體初始化為由重複指定次數的指定 Unicode 字元所指示的值。</summary>
      <param name="c">Unicode 字元。</param>
      <param name="count">
        <paramref name="c" /> 發生的次數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小於零。</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char[])">
      <summary>將 <see cref="T:System.String" /> 類別的新執行個體初始化為 Unicode 字元陣列所指示的值。</summary>
      <param name="value">Unicode 字元陣列。</param>
    </member>
    <member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary>將 <see cref="T:System.String" /> 類別的新執行個體初始化為 Unicode 字元陣列、在陣列內起始字元的位置和長度等等所指示的值。</summary>
      <param name="value">Unicode 字元陣列。</param>
      <param name="startIndex">起始位置在 <paramref name="value" /> 內。</param>
      <param name="length">
        <paramref name="value" /> 內要使用的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="length" /> 的總和大於 <paramref name="value" /> 中的項目數目。</exception>
    </member>
    <member name="M:System.String.#ctor(System.SByte*)">
      <summary>[安全性關鍵] 將 <see cref="T:System.String" /> 類別的新執行個體初始化為 8 位元帶正負號整數陣列的指標所指示的值。</summary>
      <param name="value">指標，其屬於以 null 結束之 8 位元帶正負號整數的陣列。</param>
    </member>
    <member name="P:System.String.Chars(System.Int32)">
      <summary>取得目前字串中指定之字元位置的字元。</summary>
      <returns>位置 <paramref name="index" /> 上的 Unicode 字元。</returns>
      <param name="index">目前字串中的字元位置。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 大於或等於此物件的長度或小於零。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>執行子字串 (擷取自兩個指定的 <see cref="T:System.String" /> 物件) 的區分文化特性分較，並傳回一個整數，指出它們在排序順序中的相互關係。</summary>
      <returns>32 位元帶正負號整數，指出兩比較元的語彙關係。值條件小於零<paramref name="strA" /> 中的子字串小於 <paramref name="strB" /> 中的子字串。零子字串相等，或者 <paramref name="length" /> 為零。大於零<paramref name="strA" /> 中的子字串大於 <paramref name="strB" /> 中的子字串。</returns>
      <param name="strA">要用於比較中的第 1 個字串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字串的位置。</param>
      <param name="strB">要用於比較的第 2 個字串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字串的位置。</param>
      <param name="length">要比較的子字串最大字元數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> 大於 <paramref name="strA" />.<see cref="P:System.String.Length" />。-或-<paramref name="indexB" /> 大於 <paramref name="strB" />.<see cref="P:System.String.Length" />。-或-<paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 為負值。-或-<paramref name="indexA" /> 或 <paramref name="indexB" /> 為 null，而且 <paramref name="length" /> 大於零。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <summary>使用指定的字串比較選項以及可以影響比較結果之特定文化特性的資訊，比較兩個指定的 <see cref="T:System.String" /> 物件的子字串，並傳回一個整數，指出這兩個字串在排序順序中的相互關係。</summary>
      <returns>整數，指出兩個字子字串之間的語彙關係。值條件小於零<paramref name="strA" /> 中的子字串小於 <paramref name="strB" /> 中的子字串。零子字串相等，或者 <paramref name="length" /> 為零。大於零<paramref name="strA" /> 中的子字串大於 <paramref name="strB" /> 中的子字串。</returns>
      <param name="strA">第 1 個字串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字串的開始位置。</param>
      <param name="strB">第 2 個字串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字串的開始位置。</param>
      <param name="length">要比較的子字串最大字元數。</param>
      <param name="culture">提供文化特性特有之比較資訊的文化特性。</param>
      <param name="options">如忽略大小寫或符號的選項，用於執行比較時。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> 大於 strA.Length。-或-<paramref name="indexB" /> 大於 strB.Length。-或-<paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 為負值。-或-<paramref name="strA" /> 或 <paramref name="strB" /> 為 null，而且 <paramref name="length" /> 大於零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 null。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>使用指定的字串比較選項，比較兩個指定之 <see cref="T:System.String" /> 物件的子字串，並且傳回指出它們在排序順序中彼此關聯性的整數。</summary>
      <returns>32 位元帶正負號整數，指出兩比較元的語彙關係。值狀況小於零<paramref name="strA" /> 參數中的子字串小於 <paramref name="strB" /> 參數中的子字串。零子字串相等，或 <paramref name="length" /> 參數為零。大於零<paramref name="strA" /> 中的子字串大於 <paramref name="strB" /> 中的子字串。</returns>
      <param name="strA">要用於比較中的第 1 個字串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字串的位置。</param>
      <param name="strB">要用於比較的第 2 個字串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字串的位置。</param>
      <param name="length">要比較的子字串最大字元數。</param>
      <param name="comparisonType">其中一個列舉值，指定要用於比較的規則。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> 大於 <paramref name="strA" />.<see cref="P:System.String.Length" />。-或-<paramref name="indexB" /> 大於 <paramref name="strB" />.<see cref="P:System.String.Length" />。-或-<paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 為負值。-或-<paramref name="indexA" /> 或 <paramref name="indexB" /> 為 null，而且 <paramref name="length" /> 大於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String)">
      <summary>執行兩個指定之 <see cref="T:System.String" /> 物件的區分文化特性分較，並傳回一個整數，指出它們在排序順序中的相互關係。</summary>
      <returns>32 位元帶正負號整數，指出兩比較元的語彙關係。值狀況小於零<paramref name="strA" /> 小於 <paramref name="strB" />。零<paramref name="strA" /> 等於 <paramref name="strB" />。大於零<paramref name="strA" /> 大於 <paramref name="strB" />。</returns>
      <param name="strA">要比較的第 1 個字串。</param>
      <param name="strB">要比較的第 2 個字串。</param>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <summary>使用指定的字串比較選項以及可以影響比較結果之特定文化特性的資訊，比較兩個指定的 <see cref="T:System.String" /> 物件，並傳回一個整數，指出這兩個字串在排序順序中的相互關係。</summary>
      <returns>32 位元帶正負號整數，指出 <paramref name="strA" /> 與 <paramref name="strB" /> 之間的語彙關係。值條件小於零<paramref name="strA" /> 小於 <paramref name="strB" />。零<paramref name="strA" /> 等於 <paramref name="strB" />。大於零<paramref name="strA" /> 大於 <paramref name="strB" />。</returns>
      <param name="strA">第 1 個字串。</param>
      <param name="strB">第 2 個字串。</param>
      <param name="culture">提供文化特性特有之比較資訊的文化特性。</param>
      <param name="options">如忽略大小寫或符號的選項，用於執行比較時。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 null。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.StringComparison)">
      <summary>使用指定的字串比較選項，比較兩個指定的 <see cref="T:System.String" /> 物件，並且傳回指出它們在排序順序中彼此關聯性的整數。</summary>
      <returns>32 位元帶正負號整數，指出兩比較元的語彙關係。值狀況小於零<paramref name="strA" /> 小於 <paramref name="strB" />。零<paramref name="strA" /> 等於 <paramref name="strB" />。大於零<paramref name="strA" /> 大於 <paramref name="strB" />。</returns>
      <param name="strA">要比較的第 1 個字串。</param>
      <param name="strB">要比較的第 2 個字串。</param>
      <param name="comparisonType">其中一個列舉值，指定要用於比較的規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.StringComparison" /> 不受支援。</exception>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>藉由評估每個子字串中對應的 <see cref="T:System.Char" /> 物件之數字值，比較兩個指定的 <see cref="T:System.String" /> 物件之子字串。</summary>
      <returns>32 位元帶正負號整數，指出兩比較元的語彙關係。值條件小於零<paramref name="strA" /> 中的子字串小於 <paramref name="strB" /> 中的子字串。零子字串相等，或者 <paramref name="length" /> 為零。大於零<paramref name="strA" /> 中的子字串大於 <paramref name="strB" /> 中的子字串。</returns>
      <param name="strA">要用於比較中的第 1 個字串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字串的起始索引。</param>
      <param name="strB">要用於比較的第 2 個字串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字串的起始索引。</param>
      <param name="length">要比較的子字串最大字元數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="strA" /> 不是 null，而且 <paramref name="indexA" /> 大於 <paramref name="strA" />。<see cref="P:System.String.Length" />.-或-<paramref name="strB" /> 不是 null，而且 <paramref name="indexB" /> 大於 <paramref name="strB" />。<see cref="P:System.String.Length" />.-或-<paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 為負值。</exception>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.String)">
      <summary>在每一個字串中評估對應 <see cref="T:System.Char" /> 物件的數值，藉此比較兩個指定的 <see cref="T:System.String" /> 物件，並且傳回指出它們在排序順序中相對位置的整數。</summary>
      <returns>整數，指出兩個比較元之間的語彙關係。值條件小於零<paramref name="strA" /> 小於 <paramref name="strB" />。零<paramref name="strA" /> 和 <paramref name="strB" /> 相等。大於零<paramref name="strA" /> 大於 <paramref name="strB" />。</returns>
      <param name="strA">要比較的第 1 個字串。</param>
      <param name="strB">要比較的第 2 個字串。</param>
    </member>
    <member name="M:System.String.CompareTo(System.Object)">
      <summary>比較此執行個體與指定的 <see cref="T:System.Object" />，並且指出此執行個體在排序次序中，位於所指定 <see cref="T:System.Object" /> 之前、之後或相同位置。</summary>
      <returns>32 位元帶正負號的整數，這個整數表示這個執行個體在排序次序中，位於 <paramref name="value" /> 參數之前、之後或相同位置。值狀況小於零這個執行個體位於 <paramref name="value" /> 之前。零這個執行個體在排序次序中的位置與 <paramref name="value" /> 相同。大於零這個執行個體位於 <paramref name="value" /> 之後。-或-<paramref name="value" /> 為 null。</returns>
      <param name="value">評估為 String 的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.String" />。</exception>
    </member>
    <member name="M:System.String.CompareTo(System.String)">
      <summary>比較此執行個體與指定的 <see cref="T:System.String" /> 物件，並且指出此執行個體在排序次序中，位於所指定 <see cref="T:System.String" /> 之前、之後或相同位置。</summary>
      <returns>32 位元帶正負號的整數，這個整數表示這個執行個體在排序次序中，位於 <paramref name="value" /> 參數之前、之後或相同位置。值狀況小於零這個執行個體位於 <paramref name="strB" /> 之前。零這個執行個體在排序次序中的位置與 <paramref name="strB" /> 相同。大於零這個執行個體位於 <paramref name="strB" /> 之後。-或-<paramref name="strB" /> 為 null。</returns>
      <param name="strB">要和此執行個體比較的字串。</param>
    </member>
    <member name="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
      <summary>串連型別 <see cref="T:System.String" /> 之已建構的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合的成員。</summary>
      <returns>
        <paramref name="values" /> 中的串連字串。</returns>
      <param name="values">集合物件，此物件實作 <see cref="T:System.Collections.Generic.IEnumerable`1" />，且其泛型型別引數為 <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 為 null。</exception>
    </member>
    <member name="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>串連 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 實作的成員。</summary>
      <returns>
        <paramref name="values" /> 中的串連成員。</returns>
      <param name="values">集合物件，此物件實作 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 介面。</param>
      <typeparam name="T">
        <paramref name="values" /> 之成員的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 為 null。</exception>
    </member>
    <member name="M:System.String.Concat(System.Object)">
      <summary>建立指定物件的 <see cref="T:System.String" /> 表示。</summary>
      <returns>
        <paramref name="arg0" /> 值的字串表示，如果 <paramref name="arg0" /> 是 null 則為 <see cref="F:System.String.Empty" />。</returns>
      <param name="arg0">要表示的物件，或 null。</param>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object)">
      <summary>串連兩個指定物件的字串表示。</summary>
      <returns>
        <paramref name="arg0" /> 和 <paramref name="arg1" /> 之值的已串連字串表示。</returns>
      <param name="arg0">要串連的第 1 個物件。</param>
      <param name="arg1">要串連的第 2 個物件。</param>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
      <summary>串連三個指定物件的 <see cref="T:System.String" /> 表示。</summary>
      <returns>
        <paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 之值的已串連字串表示。</returns>
      <param name="arg0">要串連的第 1 個物件。</param>
      <param name="arg1">要串連的第 2 個物件。</param>
      <param name="arg2">要串連的第 3 個物件。</param>
    </member>
    <member name="M:System.String.Concat(System.Object[])">
      <summary>串連指定 <see cref="T:System.Object" /> 陣列中元素的字串表示。</summary>
      <returns>
        <paramref name="args" /> 中元素值之已串連的字串表示。</returns>
      <param name="args">包含要串連之元素的物件陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="args" /> 為 null。</exception>
      <exception cref="T:System.OutOfMemoryException">記憶體不足。</exception>
    </member>
    <member name="M:System.String.Concat(System.String,System.String)">
      <summary>串連 <see cref="T:System.String" /> 的兩個指定執行個體。</summary>
      <returns>
        <paramref name="str0" /> 和 <paramref name="str1" /> 的串連。</returns>
      <param name="str0">要串連的第 1 個字串。</param>
      <param name="str1">要串連的第 2 個字串。</param>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String)">
      <summary>串連 <see cref="T:System.String" /> 的三個指定執行個體。</summary>
      <returns>
        <paramref name="str0" />、<paramref name="str1" /> 和 <paramref name="str2" /> 的串連。</returns>
      <param name="str0">要串連的第 1 個字串。</param>
      <param name="str1">要串連的第 2 個字串。</param>
      <param name="str2">要串連的第 3 個字串。</param>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
      <summary>串連 <see cref="T:System.String" /> 的四個指定執行個體。</summary>
      <returns>
        <paramref name="str0" />、<paramref name="str1" />、<paramref name="str2" /> 和 <paramref name="str3" /> 的串連。</returns>
      <param name="str0">要串連的第 1 個字串。</param>
      <param name="str1">要串連的第 2 個字串。</param>
      <param name="str2">要串連的第 3 個字串。</param>
      <param name="str3">要串連的第 4 個字串。</param>
    </member>
    <member name="M:System.String.Concat(System.String[])">
      <summary>串連指定 <see cref="T:System.String" /> 陣列中的元素。</summary>
      <returns>
        <paramref name="values" /> 的串連元素。</returns>
      <param name="values">字串執行個體的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 為 null。</exception>
      <exception cref="T:System.OutOfMemoryException">記憶體不足。</exception>
    </member>
    <member name="M:System.String.Contains(System.String)">
      <summary>傳回值，指出指定的 <see cref="T:System.String" /> 物件是否會出現在此字串內。</summary>
      <returns>如果 <paramref name="value" /> 參數出現在此字串內，或是 <paramref name="value" /> 為空字串 ("") 則為 true，否則為 false。</returns>
      <param name="value">要尋找的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
    </member>
    <member name="M:System.String.Copy(System.String)">
      <summary>使用與指定的 <see cref="T:System.String" /> 相同的值，建立 <see cref="T:System.String" /> 的新執行個體。</summary>
      <returns>具有與 <paramref name="str" /> 相同值的新字串。</returns>
      <param name="str">要複製的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 null。</exception>
    </member>
    <member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>從這個執行個體中的指定位置開始，將指定數目的字元複製到 Unicode 字元陣列中的指定位置。</summary>
      <param name="sourceIndex">在此要複製的執行個體中，其第 1 個字元的索引。</param>
      <param name="destination">將此執行個體中字元複製所到的目標 Unicode 字元陣列。</param>
      <param name="destinationIndex">在 <paramref name="destination" /> 中進行複製作業的起始索引。</param>
      <param name="count">要複製到 <paramref name="destination" /> 的此執行個體字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />、<paramref name="destinationIndex" /> 或 <paramref name="count" /> 為負值。-或-<paramref name="count" /> 大於從 <paramref name="startIndex" /> 到這個執行個體結尾的子字串長度。-或-<paramref name="count" /> 大於從 <paramref name="destinationIndex" /> 到 <paramref name="destination" /> 結尾的子陣列長度</exception>
    </member>
    <member name="F:System.String.Empty">
      <summary>表示空字串。這個欄位是唯讀的。</summary>
    </member>
    <member name="M:System.String.EndsWith(System.String)">
      <summary>判斷此執行個體的結尾是否符合指定的字串。</summary>
      <returns>如果 <paramref name="value" /> 符合此執行個體的結尾則為 true，否則為 false。</returns>
      <param name="value">要比對的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.StringComparison)">
      <summary>判斷當使用指定之比較選項進行比較時，此字串的結尾是否符合指定之字串。</summary>
      <returns>如果 <paramref name="value" /> 參數符合此字串的結尾則為 true，否則為 false。</returns>
      <param name="value">要比對的字串。</param>
      <param name="comparisonType">其中一個列舉值，判斷此字串和 <paramref name="value" /> 的比較方式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.Equals(System.Object)">
      <summary>判斷此 <see cref="T:System.String" /> 執行個體和指定之物件 (必須是 <see cref="T:System.String" /> 物件) 是否具有相同的值。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.String" />，且其值與這個執行個體相同，則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體比較的字串。</param>
    </member>
    <member name="M:System.String.Equals(System.String)">
      <summary>判斷此執行個體和另一個指定的 <see cref="T:System.String" /> 物件是否具有相同的值。</summary>
      <returns>如果 <paramref name="value" /> 參數的值與此執行個體相同則為 true，否則為 false。</returns>
      <param name="value">要與此執行個體比較的字串。</param>
    </member>
    <member name="M:System.String.Equals(System.String,System.String)">
      <summary>判斷兩個指定的 <see cref="T:System.String" /> 物件是否具有相同的值。</summary>
      <returns>如果<paramref name="a" /> 的值與 <paramref name="b" /> 的值相同則為 true，否則為 false。如果 <paramref name="a" /> 和 <paramref name="b" /> 都是 null，這個方法會傳回 true。</returns>
      <param name="a">要比較的第 1 個字串，或 null。</param>
      <param name="b">要比較的第 2 個字串，或 null。</param>
    </member>
    <member name="M:System.String.Equals(System.String,System.String,System.StringComparison)">
      <summary>判斷兩個指定的 <see cref="T:System.String" /> 物件是否具有相同的值。參數可指定用於比較的文化特性、大小寫及排序規則。</summary>
      <returns>如果 <paramref name="a" /> 參數的值等於 <paramref name="b" /> 參數的值則為 true，否則為 false。</returns>
      <param name="a">要比較的第 1 個字串，或 null。</param>
      <param name="b">要比較的第 2 個字串，或 null。</param>
      <param name="comparisonType">其中一個列舉值，指定比較的規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.Equals(System.String,System.StringComparison)">
      <summary>判斷此字串和指定的 <see cref="T:System.String" /> 物件是否具有相同的值。參數可指定用於比較的文化特性、大小寫及排序規則。</summary>
      <returns>如果 <paramref name="value" /> 參數的值與此字串相同則為 true，否則為 false。</returns>
      <param name="value">要與此執行個體比較的字串。</param>
      <param name="comparisonType">其中一個列舉值，指定比較的規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
      <summary>以與指定陣列中對應的物件值相等的文字，取代指定之字串中的格式項目。指定的參數提供特定文化特性的格式資訊。</summary>
      <returns>
        <paramref name="format" /> 的複本，其中的格式項目已經由 <paramref name="args" /> 中對應物件的字串表示所取代。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
      <param name="format">複合格式字串 (請參閱「備註」)。</param>
      <param name="args">物件陣列，包含零或多個要格式化的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 或 <paramref name="args" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 都是無效的。-或-格式項目的索引小於零，或者大於或等於 <paramref name="args" /> 陣列的長度。</exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object)">
      <summary>以指定之物件的字串表示，取代指定之字串中的一或多個格式項目。</summary>
      <returns>
        <paramref name="format" /> 的複本，其中的第一個格式項目已經由 <paramref name="arg0" /> 的字串表示所取代。</returns>
      <param name="format">複合格式字串 (請參閱「備註」)。</param>
      <param name="arg0">要格式化的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 中的格式項目無效。-或-格式項目的索引不是零。</exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object)">
      <summary>以兩個指定之物件的字串表示，取代指定之字串中的格式項目。</summary>
      <returns>
        <paramref name="format" /> 的複本，其中的格式項目已經由 <paramref name="arg0" /> 和 <paramref name="arg1" /> 的字串表示所取代。</returns>
      <param name="format">複合格式字串 (請參閱「備註」)。</param>
      <param name="arg0">要格式化的第 1 個物件。</param>
      <param name="arg1">要格式化的第 2 個物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 都是無效的。-或-格式項目的索引不是零或一。</exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
      <summary>以三個指定之物件的字串表示，取代指定之字串中的格式項目。</summary>
      <returns>
        <paramref name="format" /> 的複本，其中的第一個、第二個和第三個格式項目已經由 <paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 的字串表示所取代。</returns>
      <param name="format">複合格式字串 (請參閱「備註」)。</param>
      <param name="arg0">要格式化的第 1 個物件。</param>
      <param name="arg1">要格式化的第 2 個物件。</param>
      <param name="arg2">要格式化的第 3 個物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 都是無效的。-或-格式項目的索引小於零或大於二。</exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object[])">
      <summary>以指定陣列中對應物件的字串表示，取代指定之字串中的格式項目。</summary>
      <returns>
        <paramref name="format" /> 的複本，其中的格式項目已經由 <paramref name="args" /> 中對應物件的字串表示所取代。</returns>
      <param name="format">複合格式字串 (請參閱「備註」)。</param>
      <param name="args">物件陣列，包含零或多個要格式化的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 或 <paramref name="args" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 都是無效的。-或-格式項目的索引小於零，或者大於或等於 <paramref name="args" /> 陣列的長度。</exception>
    </member>
    <member name="M:System.String.GetHashCode">
      <summary>傳回此字串的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="M:System.String.GetTypeCode">
      <summary>傳回類別 <see cref="T:System.String" /> 的 <see cref="T:System.TypeCode" />。</summary>
      <returns>列舉常數、<see cref="F:System.TypeCode.String" />。</returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char)">
      <summary>報告此字串中指定之 Unicode 字元第一次出現的以零為起始的索引。</summary>
      <returns>如果找到該字元，則為 <paramref name="value" /> 的以零為起始的索引位置，否則為 -1。</returns>
      <param name="value">要進行搜尋的 Unicode 字元。</param>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32)">
      <summary>報告此字串中指定之 Unicode 字元第一次出現的以零為起始的索引。搜尋從指定的字元位置開始。</summary>
      <returns>如果找到該字元，則為 <paramref name="value" /> 的以零為起始的索引位置，否則為 -1。</returns>
      <param name="value">要進行搜尋的 Unicode 字元。</param>
      <param name="startIndex">搜尋起始位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於這個字串執行個體的長度。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
      <summary>報告這個執行個體中指定之字元第一次出現的以零為起始的索引。搜尋從指定的字元位置開始，並檢視指定數目的字元位置。</summary>
      <returns>如果找到該字元，則為 <paramref name="value" /> 的以零為起始的索引位置，否則為 -1。</returns>
      <param name="value">要進行搜尋的 Unicode 字元。</param>
      <param name="startIndex">搜尋起始位置。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="startIndex" /> 為負值。-或-<paramref name="startIndex" /> 大於這個字串的長度。-或-<paramref name="count" /> 大於這個字串長度減 1 的長度<paramref name="startIndex" /></exception>
    </member>
    <member name="M:System.String.IndexOf(System.String)">
      <summary>報告這個執行個體中指定之字串第一次出現的以零為起始的索引。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 的以零為起始的索引位置，否則為 -1。如果 <paramref name="value" /> 為 <see cref="F:System.String.Empty" />，則傳回值是 0。</returns>
      <param name="value">要尋找的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32)">
      <summary>報告這個執行個體中指定之字串第一次出現的以零為起始的索引。搜尋從指定的字元位置開始。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 的以零為起始的索引位置，否則為 -1。如果 <paramref name="value" /> 為 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" />。</returns>
      <param name="value">要尋找的字串。</param>
      <param name="startIndex">搜尋起始位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於這個字串的長度。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
      <summary>報告這個執行個體中指定之字串第一次出現的以零為起始的索引。搜尋從指定的字元位置開始，並檢視指定數目的字元位置。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 的以零為起始的索引位置，否則為 -1。如果 <paramref name="value" /> 為 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" />。</returns>
      <param name="value">要尋找的字串。</param>
      <param name="startIndex">搜尋起始位置。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="startIndex" /> 為負值。-或-<paramref name="startIndex" /> 大於這個字串的長度。-或-<paramref name="count" /> 大於這個字串長度減 <paramref name="startIndex" /> 的長度。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>報告目前 <see cref="T:System.String" /> 物件中指定之字串第一次出現的以零為起始的的索引。參數會指定目前字串中的開始搜尋位置、目前字串中要搜尋的字元數目，以及要用於指定字串的搜尋類型。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 參數的以零為起始的索引位置，否則為 -1。如果 <paramref name="value" /> 為 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" />。</returns>
      <param name="value">要尋找的字串。</param>
      <param name="startIndex">搜尋起始位置。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <param name="comparisonType">其中一個列舉值，指定搜尋規則。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="startIndex" /> 為負值。-或-<paramref name="startIndex" /> 大於這個執行個體的長度。-或-<paramref name="count" /> 大於這個字串長度減 <paramref name="startIndex" /> 的長度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>報告目前 <see cref="T:System.String" /> 物件中指定之字串第一次出現的以零為起始的的索引。參數會指定目前字串中的開始搜尋位置和要用於指定字串的搜尋類型。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 參數的以零為起始的索引位置，否則為 -1。如果 <paramref name="value" /> 為 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" />。</returns>
      <param name="value">要尋找的字串。</param>
      <param name="startIndex">搜尋起始位置。</param>
      <param name="comparisonType">其中一個列舉值，指定搜尋規則。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於這個字串的長度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.StringComparison)">
      <summary>報告目前 <see cref="T:System.String" /> 物件中指定之字串第一次出現的以零為起始的的索引。參數會指定要用於指定字串的搜尋類型。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 參數的以零為起始的索引位置，否則為 -1。如果 <paramref name="value" /> 為 <see cref="F:System.String.Empty" />，則傳回值是 0。</returns>
      <param name="value">要尋找的字串。</param>
      <param name="comparisonType">其中一個列舉值，指定搜尋規則。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[])">
      <summary>報告指定 Unicode 字元陣列中的任何字元於此執行個體中第一次出現的以零為起始的索引。</summary>
      <returns>在 <paramref name="anyOf" /> 中找到的任何字元於此執行個體中第一次出現的以零為起始的索引位置，否則，如果 <paramref name="anyOf" /> 中沒有找到任何字元，則為 -1。</returns>
      <param name="anyOf">Unicode 字元陣列，含有一或多個要搜尋的字元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 為 null。</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
      <summary>報告指定 Unicode 字元陣列中的任何字元於此執行個體中第一次出現的以零為起始的索引。搜尋從指定的字元位置開始。</summary>
      <returns>在 <paramref name="anyOf" /> 中找到的任何字元於此執行個體中第一次出現的以零為起始的索引位置，否則，如果 <paramref name="anyOf" /> 中沒有找到任何字元，則為 -1。</returns>
      <param name="anyOf">Unicode 字元陣列，含有一或多個要搜尋的字元。</param>
      <param name="startIndex">搜尋起始位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 為負值。-或-<paramref name="startIndex" /> 大於這個執行個體中的字元數。</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>報告指定 Unicode 字元陣列中的任何字元於此執行個體中第一次出現的以零為起始的索引。搜尋從指定的字元位置開始，並檢視指定數目的字元位置。</summary>
      <returns>在 <paramref name="anyOf" /> 中找到的任何字元於此執行個體中第一次出現的以零為起始的索引位置，否則，如果 <paramref name="anyOf" /> 中沒有找到任何字元，則為 -1。</returns>
      <param name="anyOf">Unicode 字元陣列，含有一或多個要搜尋的字元。</param>
      <param name="startIndex">搜尋起始位置。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="startIndex" /> 為負值。-或-<paramref name="count" /> + <paramref name="startIndex" /> 大於這個執行個體中的字元數。</exception>
    </member>
    <member name="M:System.String.Insert(System.Int32,System.String)">
      <summary>傳回新字串，在這個執行個體中的指定索引位置插入指定的字串。</summary>
      <returns>與這個執行個體相等的新字串，但是在 <paramref name="startIndex" /> 位置插入 <paramref name="value" />。</returns>
      <param name="startIndex">插入的索引位置。</param>
      <param name="value">要插入的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 為負值或大於此執行個體的長度。</exception>
    </member>
    <member name="M:System.String.Intern(System.String)">
      <summary>擷取指定的 <see cref="T:System.String" /> 的系統參考。</summary>
      <returns>如果已經保留，則為系統的 <paramref name="str" /> 參考，否則為具有 <paramref name="str" /> 值之字串的新參考。</returns>
      <param name="str">要在保留集區中搜尋的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 null。</exception>
    </member>
    <member name="M:System.String.IsInterned(System.String)">
      <summary>擷取對指定 <see cref="T:System.String" /> 的參考。</summary>
      <returns>如果是在 Common Language Runtime 保留集區中，則為 <paramref name="str" /> 的參考，否則為 null。</returns>
      <param name="str">要在保留集區中搜尋的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 null。</exception>
    </member>
    <member name="M:System.String.IsNullOrEmpty(System.String)">
      <summary>指出指定的字串是否為 null 或 <see cref="F:System.String.Empty" /> 字串。</summary>
      <returns>如果 <paramref name="value" /> 參數為 null 或空字串 ("")，則為 true，否則為 false。</returns>
      <param name="value">要測試的字串。</param>
    </member>
    <member name="M:System.String.IsNullOrWhiteSpace(System.String)">
      <summary>指出指定的字串是否為 null、空白，或只由空白字元組成的字串。</summary>
      <returns>如果 <paramref name="value" /> 參數是 null 或 <see cref="F:System.String.Empty" />，或者 <paramref name="value" /> 完全由空白字元組成，則為 true。</returns>
      <param name="value">要測試的字串。</param>
    </member>
    <member name="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>串連型別 <see cref="T:System.String" /> 之已建構的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 集合的成員，並在每個成員之間使用指定的分隔符號。</summary>
      <returns>字串，由 <paramref name="values" /> 的成員組成，每個成員之間都以 <paramref name="separator" /> 字串隔開。如果 <paramref name="values" /> 沒有成員，這個方法會傳回 <see cref="F:System.String.Empty" />。</returns>
      <param name="separator">要當做分隔符號的字串。</param>
      <param name="values">包含要串連之字串的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 為 null。</exception>
    </member>
    <member name="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
      <summary>串連字串集合的成員，並在每個成員之間使用指定的分隔符號。</summary>
      <returns>字串，由 <paramref name="values" /> 的成員組成，每個元素之間都以 <paramref name="separator" /> 字串隔開。如果 <paramref name="values" /> 沒有成員，這個方法會傳回 <see cref="F:System.String.Empty" />。</returns>
      <param name="separator">要當做分隔符號的字串。</param>
      <param name="values">包含要串連之物件的集合。</param>
      <typeparam name="T">
        <paramref name="values" /> 之成員的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 為 null。</exception>
    </member>
    <member name="M:System.String.Join(System.String,System.Object[])">
      <summary>串連物件陣列的元素，並在每個元素之間使用指定的分隔符號。</summary>
      <returns>字串，由 <paramref name="values" /> 的元素組成，每個元素之間都以 <paramref name="separator" /> 字串隔開。如果 <paramref name="values" /> 為空字串 ("")，這個方法會傳回 <see cref="F:System.String.Empty" />。</returns>
      <param name="separator">要當做分隔符號的字串。</param>
      <param name="values">含有要串連之元素的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 為 null。</exception>
    </member>
    <member name="M:System.String.Join(System.String,System.String[])">
      <summary>將指定 <see cref="T:System.String" /> 陣列每個元素之間的指定分隔符號 <see cref="T:System.String" /> 串連，產生單一的串連字串。</summary>
      <returns>字串，由 <paramref name="value" /> 中的元素組成，每個元素之間都以 <paramref name="separator" /> 字串隔開。如果 <paramref name="value" /> 為空陣列，這個方法會傳回 <see cref="F:System.String.Empty" />。</returns>
      <param name="separator">要當做分隔符號的字串。</param>
      <param name="value">含有要串連之元素的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
    </member>
    <member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
      <summary>將指定 <see cref="T:System.String" /> 陣列每個元素之間的指定分隔符號 <see cref="T:System.String" /> 串連，產生單一的串連字串。參數指定要使用的第 1 個陣列元素和元素數目。</summary>
      <returns>字串，由 <paramref name="value" /> 中的字串組成，每個字串之間都以 <paramref name="separator" /> 字串隔開。-或-如果 <paramref name="count" /> 為零、<paramref name="value" /> 沒有任何元素，或 <paramref name="separator" /> 和 <paramref name="value" /> 的所有元素都是 <see cref="F:System.String.Empty" />，則為 <see cref="F:System.String.Empty" />。</returns>
      <param name="separator">要當做分隔符號的字串。</param>
      <param name="value">含有要串連之元素的陣列。</param>
      <param name="startIndex">
        <paramref name="value" /> 中要使用的第 1 個元素。</param>
      <param name="count">要使用之 <paramref name="value" /> 中的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 小於 0。-或-<paramref name="startIndex" /> 加上 <paramref name="count" /> 大於 <paramref name="value" /> 中的項目數目。</exception>
      <exception cref="T:System.OutOfMemoryException">記憶體不足。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char)">
      <summary>報告這個執行個體中指定之 Unicode 字元最後出現的以零為起始的索引位置。</summary>
      <returns>如果找到該字元，則為 <paramref name="value" /> 的以零為起始的索引位置，否則為 -1。</returns>
      <param name="value">要進行搜尋的 Unicode 字元。</param>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
      <summary>報告這個執行個體中指定之 Unicode 字元最後出現的以零為起始的索引位置。搜尋從指定的字元位置開始。</summary>
      <returns>如果找到該字元，則為 <paramref name="value" /> 的以零為起始的索引位置，如果沒有找到，或者如果目前執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。</returns>
      <param name="value">要進行搜尋的 Unicode 字元。</param>
      <param name="startIndex">此執行個體中的子字串起始位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">目前執行個體不等於 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> 小於零，或是大於或等於這個執行個體的長度。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
      <summary>報告此執行個體內的子字串中指定之 Unicode 字元最後出現的以零為起始的索引位置。搜尋從指定的字元位置開始，並檢視指定數目的字元位置。</summary>
      <returns>如果找到該字元，則為 <paramref name="value" /> 的以零為起始的索引位置，如果沒有找到，或者如果目前執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。</returns>
      <param name="value">要進行搜尋的 Unicode 字元。</param>
      <param name="startIndex">此執行個體中的子字串起始位置。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">目前執行個體不等於 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> 小於零，或是大於或等於這個執行個體的長度。-或-目前執行個體不等於 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> - <paramref name="count" /> + 1 小於零。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String)">
      <summary>回報這個執行個體中指定之字串最後出現的以零為起始的索引位置。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 的以零為起始的索引位置，否則為 -1。如果 <paramref name="value" /> 是 <see cref="F:System.String.Empty" />，則傳回值為此執行個體中的最後一個索引位置。</returns>
      <param name="value">要尋找的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
      <summary>回報這個執行個體中指定之字串最後出現的以零為起始的索引位置。搜尋從指定的字元位置開始。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 的以零為起始的索引位置，如果沒有找到，或者如果目前執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。如果 <paramref name="value" /> 是 <see cref="F:System.String.Empty" />，則傳回值為 <paramref name="startIndex" /> 與這個執行個體中最後一個索引位置兩者中較小者。</returns>
      <param name="value">要尋找的字串。</param>
      <param name="startIndex">搜尋起始位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">目前的執行個體不等於 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> 小於零或大於目前執行個體的長度。-或-目前執行個體等於 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> 大於零。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
      <summary>回報這個執行個體中指定之字串最後出現的以零為起始的索引位置。搜尋從指定的字元位置開始，並檢視指定數目的字元位置。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 的以零為起始的索引位置，如果沒有找到，或者如果目前執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。如果 <paramref name="value" /> 為 <see cref="F:System.String.Empty" />，則傳回值是 <paramref name="startIndex" />。</returns>
      <param name="value">要尋找的字串。</param>
      <param name="startIndex">搜尋起始位置。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 為負值。-或-目前執行個體不等於 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> 為負數。-或-目前執行個體不等於 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> 大於這個執行個體的長度。-或-目前執行個體不等於 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> - <paramref name="count" /> + 1 指定的位置不在這個執行個體中。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>回報這個執行個體中指定之字串最後出現的以零為起始的索引位置。參數會指定目前字串中的開始搜尋位置、目前字串中要搜尋的字元數目，以及要用於指定字串的搜尋類型。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 參數的以零為起始的索引位置，如果沒有找到，或者如果目前執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。如果 <paramref name="value" /> 是 <see cref="F:System.String.Empty" />，則傳回值為 <paramref name="startIndex" /> 與這個執行個體中最後一個索引位置兩者中較小者。</returns>
      <param name="value">要尋找的字串。</param>
      <param name="startIndex">搜尋起始位置。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <param name="comparisonType">其中一個列舉值，指定搜尋規則。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 為負值。-或-目前執行個體不等於 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> 為負數。-或-目前執行個體不等於 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> 大於這個執行個體的長度。-或-目前執行個體不等於 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> + 1 - <paramref name="count" /> 指定的位置不在這個執行個體中。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>報告目前 <see cref="T:System.String" /> 物件中指定之字串最後出現的以零為起始的索引。參數會指定目前字串中的開始搜尋位置和要用於指定字串的搜尋類型。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 參數的以零為起始的索引位置，如果沒有找到，或者如果目前執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。如果 <paramref name="value" /> 是 <see cref="F:System.String.Empty" />，則傳回值為 <paramref name="startIndex" /> 與這個執行個體中最後一個索引位置兩者中較小者。</returns>
      <param name="value">要尋找的字串。</param>
      <param name="startIndex">搜尋起始位置。</param>
      <param name="comparisonType">其中一個列舉值，指定搜尋規則。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">目前的執行個體不等於 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> 小於零或大於目前執行個體的長度。-或-目前執行個體等於 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> 大於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.StringComparison)">
      <summary>報告目前 <see cref="T:System.String" /> 物件中指定之字串最後出現的以零為起始的索引。參數會指定要用於指定字串的搜尋類型。</summary>
      <returns>如果找到該字串，則為 <paramref name="value" /> 參數的以零為起始的索引位置，否則為 -1。如果 <paramref name="value" /> 是 <see cref="F:System.String.Empty" />，則傳回值為此執行個體中的最後一個索引位置。</returns>
      <param name="value">要尋找的字串。</param>
      <param name="comparisonType">其中一個列舉值，指定搜尋規則。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[])">
      <summary>報告 Unicode 陣列中的一或多個指定字元在此執行個體中最後出現的以零為起始的索引位置。</summary>
      <returns>在 <paramref name="anyOf" /> 中找到的任何字元於此執行個體中最後出現的索引位置，否則，如果 <paramref name="anyOf" /> 中沒有找到任何字元，則為 -1。</returns>
      <param name="anyOf">Unicode 字元陣列，含有一或多個要搜尋的字元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 為 null。</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
      <summary>報告 Unicode 陣列中的一或多個指定字元在此執行個體中最後出現的以零為起始的索引位置。搜尋從指定的字元位置開始。</summary>
      <returns>在 <paramref name="anyOf" /> 中找到的任何字元於此執行個體中最後出現的索引位置，否則，如果 <paramref name="anyOf" /> 中沒有找到任何字元，或是目前的執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。</returns>
      <param name="anyOf">Unicode 字元陣列，含有一或多個要搜尋的字元。</param>
      <param name="startIndex">搜尋起始位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">目前執行個體不等於 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> 指定的位置不在這個執行個體中。</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>報告 Unicode 陣列中的一或多個指定字元在此執行個體中最後出現的以零為起始的索引位置。搜尋從指定的字元位置開始，並檢視指定數目的字元位置。</summary>
      <returns>在 <paramref name="anyOf" /> 中找到的任何字元於此執行個體中最後出現的索引位置，否則，如果 <paramref name="anyOf" /> 中沒有找到任何字元，或是目前的執行個體等於 <see cref="F:System.String.Empty" />，則為 -1。</returns>
      <param name="anyOf">Unicode 字元陣列，含有一或多個要搜尋的字元。</param>
      <param name="startIndex">搜尋起始位置。</param>
      <param name="count">要檢視的字元位置數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">目前執行個體不等於 <see cref="F:System.String.Empty" />，而且 <paramref name="count" /> 或 <paramref name="startIndex" /> 為負數。-或-目前執行個體不等於 <see cref="F:System.String.Empty" />，而且 <paramref name="startIndex" /> 減去 <paramref name="count" /> 指定的位置不在這個執行個體中。</exception>
    </member>
    <member name="P:System.String.Length">
      <summary>取得目前字串中字元的數目。</summary>
      <returns>目前字串中的字元數。</returns>
    </member>
    <member name="M:System.String.op_Equality(System.String,System.String)">
      <summary>判斷兩個指定的 <see cref="T:System.String" /> 物件是否具有相同的值。</summary>
      <returns>如果<paramref name="a" /> 的值與 <paramref name="b" /> 的值相同則為 true，否則為 false。</returns>
      <param name="a">要比較的第 1 個字串，或 null。</param>
      <param name="b">要比較的第 2 個字串，或 null。</param>
    </member>
    <member name="M:System.String.op_Inequality(System.String,System.String)">
      <summary>判斷兩個指定的 <see cref="T:System.String" /> 物件是否具有不同的值。</summary>
      <returns>如果 <paramref name="a" /> 的值與 <paramref name="b" /> 的值不同，則為 true，否則為 false。</returns>
      <param name="a">要比較的第 1 個字串，或 null。</param>
      <param name="b">要比較的第 2 個字串，或 null。</param>
    </member>
    <member name="M:System.String.PadLeft(System.Int32)">
      <summary>將此執行個體中的字元靠右對齊，以空格在左側填補至指定的總長度。</summary>
      <returns>與此執行個體相等的新字串，但為靠右對齊，並在左側視需要填補若干空格來建立 <paramref name="totalWidth" /> 的長度。不過，如果 <paramref name="totalWidth" /> 小於此執行個體的長度，這個方法會傳回現有執行個體的參考。如果 <paramref name="totalWidth" /> 等於此執行個體的長度，這個方法會傳回與此執行個體相同的新字串。</returns>
      <param name="totalWidth">產生的字串中的字元數，等於原始字元加上任何其他填補字元的數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> 小於零。</exception>
    </member>
    <member name="M:System.String.PadLeft(System.Int32,System.Char)">
      <summary>將此執行個體中的字元靠右對齊，以指定的 Unicode 字元在左側填補至指定的總長度。</summary>
      <returns>與這個執行個體相等的新字串，但為靠右對齊，並在左側視需要填補若干 <paramref name="paddingChar" /> 字元來建立 <paramref name="totalWidth" /> 的長度。不過，如果 <paramref name="totalWidth" /> 小於此執行個體的長度，這個方法會傳回現有執行個體的參考。如果 <paramref name="totalWidth" /> 等於此執行個體的長度，這個方法會傳回與此執行個體相同的新字串。</returns>
      <param name="totalWidth">產生的字串中的字元數，等於原始字元加上任何其他填補字元的數目。</param>
      <param name="paddingChar">Unicode 填補字元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> 小於零。</exception>
    </member>
    <member name="M:System.String.PadRight(System.Int32)">
      <summary>傳回具有指定長度的新字串，字串結尾會以空格或指定的 Unicode 字元填補。</summary>
      <returns>與此執行個體相等的新字串，但為靠左對齊，並在右側視需要填補若干空格來建立 <paramref name="totalWidth" /> 的長度。不過，如果 <paramref name="totalWidth" /> 小於此執行個體的長度，這個方法會傳回現有執行個體的參考。如果 <paramref name="totalWidth" /> 等於此執行個體的長度，這個方法會傳回與此執行個體相同的新字串。</returns>
      <param name="totalWidth">產生的字串中的字元數，等於原始字元加上任何其他填補字元的數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> 小於零。</exception>
    </member>
    <member name="M:System.String.PadRight(System.Int32,System.Char)">
      <summary>將此字串中的字元靠左對齊，以指定的 Unicode 字元在右側填補至指定的總長度。</summary>
      <returns>與這個執行個體相等的新字串，但為靠左對齊，並在右側視需要填補若干 <paramref name="paddingChar" /> 字元來建立 <paramref name="totalWidth" /> 的長度。不過，如果 <paramref name="totalWidth" /> 小於此執行個體的長度，這個方法會傳回現有執行個體的參考。如果 <paramref name="totalWidth" /> 等於此執行個體的長度，這個方法會傳回與此執行個體相同的新字串。</returns>
      <param name="totalWidth">產生的字串中的字元數，等於原始字元加上任何其他填補字元的數目。</param>
      <param name="paddingChar">Unicode 填補字元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> 小於零。</exception>
    </member>
    <member name="M:System.String.Remove(System.Int32)">
      <summary>從這個字串中的指定之位置開始刪除所有字元，一直到最後一個位置為止。</summary>
      <returns>新的字串，等於此字串減去已移除的字元。</returns>
      <param name="startIndex">要開始刪除字元之以零為起始的位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零。-或-<paramref name="startIndex" /> 指定的位置不在這個字串中。</exception>
    </member>
    <member name="M:System.String.Remove(System.Int32,System.Int32)">
      <summary>在這個執行個體中，從指定的位置開始刪除指定的字元數。</summary>
      <returns>新的字串，等於此執行個體減去 <paramref name="count" /> 個字元。</returns>
      <param name="startIndex">要開始刪除字元以零為起始的位置。</param>
      <param name="count">要刪除的字元數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 加上 <paramref name="count" /> 指定的位置不在這個執行個體中。</exception>
    </member>
    <member name="M:System.String.Replace(System.Char,System.Char)">
      <summary>傳回新字串，其中目前字串中所有出現的指定 Unicode 字元，都取代成另一個指定的 Unicode 字元。</summary>
      <returns>與這個執行個體相等的新字串，但 <paramref name="oldChar" /> 的所有執行個體都取代成 <paramref name="newChar" />。</returns>
      <param name="oldChar">要受取代的 Unicode 字元。</param>
      <param name="newChar">要取代 <paramref name="oldChar" /> 所有元素的 Unicode 字元。</param>
    </member>
    <member name="M:System.String.Replace(System.String,System.String)">
      <summary>傳回新字串，其中目前字串中所有出現的指定字串，都取代成另一個指定的字串。</summary>
      <returns>與目前字串相等的新字串，但 <paramref name="oldValue" /> 的所有執行個體都取代成 <paramref name="newValue" />。</returns>
      <param name="oldValue">要取代的字串。</param>
      <param name="newValue">用來取代 <paramref name="oldValue" /> 所有元素的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> 為空字串 ("")。</exception>
    </member>
    <member name="M:System.String.Split(System.Char[])">
      <summary>傳回字串陣列，此陣列包含此執行個體中的子字串，由指定的 Unicode 字元陣列的元素所分隔。</summary>
      <returns>陣列，其元素包含這個執行個體中由 <paramref name="separator" /> 內的一個或多個字元所分隔的子字串。如需詳細資訊，請參閱「備註」一節。</returns>
      <param name="separator">Unicode 字元陣列 (可分隔此執行個體中的子字串)、不包含分隔符號的空陣列，或 null。</param>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32)">
      <summary>傳回字串陣列，此陣列包含此執行個體中的子字串，由指定的 Unicode 字元陣列的元素所分隔。參數可指定要傳回的子字串數目的最大值。</summary>
      <returns>陣列，其元素包含這個執行個體中由 <paramref name="separator" /> 內的一個或多個字元所分隔的子字串。如需詳細資訊，請參閱「備註」一節。</returns>
      <param name="separator">Unicode 字元陣列 (可分隔此執行個體中的子字串)、不包含分隔符號的空陣列，或 null。</param>
      <param name="count">要傳回的子字串之最大數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 為負值。</exception>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
      <summary>傳回字串陣列，此陣列包含此字串中的子字串，由指定的 Unicode 字元陣列之元素所分隔。參數指定傳回的子字串最大數目，以及是否傳回空的陣列元素。</summary>
      <returns>陣列，其元素包含這個字串中由 <paramref name="separator" /> 內的一個或多個字元所分隔的子字串。如需詳細資訊，請參閱「備註」一節。</returns>
      <param name="separator">Unicode 字元陣列 (可分隔此字串中的子字串)、不包含分隔符號的空陣列、或 null。</param>
      <param name="count">要傳回的子字串之最大數目。</param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> 表示要省略傳回陣列中的空陣列元素，否則 <see cref="F:System.StringSplitOptions.None" /> 表示要包含傳回陣列中的空陣列元素。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是其中一個 <see cref="T:System.StringSplitOptions" /> 值。</exception>
    </member>
    <member name="M:System.String.Split(System.Char[],System.StringSplitOptions)">
      <summary>傳回字串陣列，此陣列包含此字串中的子字串，由指定的 Unicode 字元陣列之元素所分隔。參數指定是否傳回空白的陣列元素。</summary>
      <returns>陣列，其元素包含這個字串中由 <paramref name="separator" /> 內的一個或多個字元所分隔的子字串。如需詳細資訊，請參閱「備註」一節。</returns>
      <param name="separator">Unicode 字元陣列 (可分隔此字串中的子字串)、不包含分隔符號的空陣列，或 null。</param>
      <param name="options">旗標，指出是否在傳回的陣列中包含空白元素。指定 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> 表示忽略傳回陣列中的空白元素。指定 <see cref="F:System.StringSplitOptions.None" /> 表示要包含傳回陣列中的空白元素。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是 <see cref="T:System.StringSplitOptions" /> 列舉型別的成員。</exception>
    </member>
    <member name="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
      <summary>傳回字串陣列，此陣列包含此字串中的子字串，由指定的字串陣列之元素所分隔。參數指定傳回的子字串最大數目，以及是否傳回空的陣列元素。</summary>
      <returns>陣列，其元素包含這個字串中由 <paramref name="separator" /> 內的一個或多個字串所分隔的子字串。如需詳細資訊，請參閱「備註」一節。</returns>
      <param name="separator">字串陣列 (可分隔此字串中的子字串)、不包含分隔符號的空陣列、或 null。</param>
      <param name="count">要傳回的子字串之最大數目。</param>
      <param name="options">
        <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> 表示要省略傳回陣列中的空陣列元素。<see cref="F:System.StringSplitOptions.None" /> 表示要包含傳回陣列中的空陣列元素。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是其中一個 <see cref="T:System.StringSplitOptions" /> 值。</exception>
    </member>
    <member name="M:System.String.Split(System.String[],System.StringSplitOptions)">
      <summary>傳回字串陣列，此陣列包含此字串中的子字串，由指定的字串陣列之元素所分隔。參數指定是否傳回空白的陣列元素。</summary>
      <returns>陣列，其元素包含這個字串中由 <paramref name="separator" /> 內的一個或多個字串所分隔的子字串。如需詳細資訊，請參閱「備註」一節。</returns>
      <param name="separator">字串陣列 (可分隔此字串中的子字串)、不包含分隔符號的空陣列、或 null。</param>
      <param name="options">旗標，指出是否在傳回的陣列中包含空白元素。指定 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> 表示忽略傳回陣列中的空陣列元素。指定 <see cref="F:System.StringSplitOptions.None" /> 表示要包含傳回陣列中的空陣列元素。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是 <see cref="T:System.StringSplitOptions" /> 列舉型別的成員。</exception>
    </member>
    <member name="M:System.String.StartsWith(System.String)">
      <summary>判斷此執行個體的開頭是否符合指定的字串。</summary>
      <returns>如果 <paramref name="value" /> 符合此字串的開頭則為 true，否則為 false。</returns>
      <param name="value">要比較的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.StringComparison)">
      <summary>判斷當使用指定之比較選項進行比較時，此字串執行個體的開頭是否符合指定之字串。</summary>
      <returns>如果 <paramref name="value" /> 參數符合此字串的開頭則為 true，否則為 false。</returns>
      <param name="value">要比較的字串。</param>
      <param name="comparisonType">其中一個列舉值，判斷此字串和 <paramref name="value" /> 的比較方式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.Substring(System.Int32)">
      <summary>從這個執行個體擷取子字串。子字串從指定的字元位置開始。</summary>
      <returns>與這個執行個體中從 <paramref name="startIndex" /> 開始之子字串相等的字串；如果 <paramref name="startIndex" /> 等於這個執行個體的長度，則為 <see cref="F:System.String.Empty" />。</returns>
      <param name="startIndex">此執行個體中子字串之以零為起始的起始字元位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小於零或大於這個執行個體的長度。</exception>
    </member>
    <member name="M:System.String.Substring(System.Int32,System.Int32)">
      <summary>從這個執行個體擷取子字串。子字串起始於指定的字元位置，並且具有指定的長度。</summary>
      <returns>與長度為 <paramref name="length" /> 且在這個執行個體中從 <paramref name="startIndex" /> 開始之子字串相等的字串；如果 <paramref name="startIndex" /> 等於這個執行個體的長度且 <paramref name="length" /> 為零，則為 <see cref="F:System.String.Empty" />。</returns>
      <param name="startIndex">此執行個體中子字串之以零為起始的起始字元位置。</param>
      <param name="length">子字串中的字元數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 加上 <paramref name="length" /> 指示的位置不在這個執行個體中。-或-<paramref name="startIndex" /> 或 <paramref name="length" /> 小於零。</exception>
    </member>
    <member name="M:System.String.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回列舉程式，可逐一查看目前的 <see cref="T:System.String" /> 物件。</summary>
      <returns>型別 <see cref="T:System.Char" /> 的 <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用於逐一查看目前的 <see cref="T:System.String" /> 物件。</returns>
    </member>
    <member name="M:System.String.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回列舉程式，可逐一查看目前的 <see cref="T:System.String" /> 物件。</summary>
      <returns>物件，可用於逐一查看目前的 <see cref="T:System.String" /> 物件。</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前 <see cref="T:System.String" /> 物件的值為 <see cref="F:System.Boolean.TrueString" />，則為 true；如果目前 <see cref="T:System.String" /> 物件的值為 <see cref="F:System.Boolean.FalseString" />，則為 false。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.FormatException">目前 <see cref="T:System.String" /> 物件的值不是 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 物件，提供特定文化特性的格式化資訊。</param>
      <exception cref="T:System.FormatException">無法剖析目前 <see cref="T:System.String" /> 物件的值。</exception>
      <exception cref="T:System.OverflowException">目前 <see cref="T:System.String" /> 物件的值為大於 <see cref="F:System.Byte.MaxValue" /> 或小於 <see cref="F:System.Byte.MinValue" /> 的數字。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件中位於索引 0 的字元。</returns>
      <param name="provider">物件，提供文件特性的格式化資訊。</param>
    </member>
    <member name="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供文件特性的格式化資訊。</param>
    </member>
    <member name="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供文件特性的格式化資訊。</param>
      <exception cref="T:System.FormatException">無法剖析目前 <see cref="T:System.String" /> 物件的值。</exception>
      <exception cref="T:System.OverflowException">目前 <see cref="T:System.String" /> 物件的值為小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供文件特性的格式化資訊。</param>
      <exception cref="T:System.FormatException">無法剖析目前 <see cref="T:System.String" /> 物件的值。</exception>
      <exception cref="T:System.OverflowException">目前 <see cref="T:System.String" /> 物件的值為小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供文件特性的格式化資訊。</param>
      <exception cref="T:System.FormatException">無法剖析目前 <see cref="T:System.String" /> 物件的值。</exception>
      <exception cref="T:System.OverflowException">目前 <see cref="T:System.String" /> 物件的值為大於 <see cref="F:System.Int16.MaxValue" /> 或小於 <see cref="F:System.Int16.MinValue" /> 的數字。 </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供文件特性的格式化資訊。</param>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供文件特性的格式化資訊。</param>
    </member>
    <member name="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供文件特性的格式化資訊。</param>
      <exception cref="T:System.FormatException">無法剖析目前 <see cref="T:System.String" /> 物件的值。</exception>
      <exception cref="T:System.OverflowException">目前 <see cref="T:System.String" /> 物件的值為大於 <see cref="F:System.SByte.MaxValue" /> 或小於 <see cref="F:System.SByte.MinValue" /> 的數字。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供文件特性的格式化資訊。</param>
    </member>
    <member name="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="type">傳回的物件之型別。</param>
      <param name="provider">物件，提供文件特性的格式化資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。</exception>
      <exception cref="T:System.InvalidCastException">目前 <see cref="T:System.String" /> 物件的值不能轉換為 <paramref name="type" /> 參數指定的型別。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供文件特性的格式化資訊。</param>
      <exception cref="T:System.FormatException">無法剖析目前 <see cref="T:System.String" /> 物件的值。</exception>
      <exception cref="T:System.OverflowException">目前 <see cref="T:System.String" /> 物件的值為大於 <see cref="F:System.UInt16.MaxValue" /> 或小於 <see cref="F:System.UInt16.MinValue" /> 的數字。 </exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供文件特性的格式化資訊。</param>
      <exception cref="T:System.FormatException">無法剖析目前 <see cref="T:System.String" /> 物件的值。</exception>
      <exception cref="T:System.OverflowException">目前 <see cref="T:System.String" /> 物件的值為大於 <see cref="F:System.UInt32.MaxValue" /> 或小於 <see cref="F:System.UInt32.MinValue" /> 的數字。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前 <see cref="T:System.String" /> 物件的轉換值。</returns>
      <param name="provider">物件，提供文件特性的格式化資訊。</param>
    </member>
    <member name="M:System.String.ToCharArray">
      <summary>將此執行個體中的字元複製到 Unicode 字元陣列中。</summary>
      <returns>Unicode 字元陣列，其元素是此執行個體的個別字元。如果此執行個體是空字串，則傳回的陣列會是空的且長度為零。</returns>
    </member>
    <member name="M:System.String.ToCharArray(System.Int32,System.Int32)">
      <summary>將這個執行個體的指定子字串字元複製到 Unicode 字元陣列。</summary>
      <returns>Unicode 字元陣列，其元素是這個執行個體中從 <paramref name="startIndex" /> 字元位置起算的 <paramref name="length" /> 個字元。</returns>
      <param name="startIndex">這個執行個體中的子字串起始位置。</param>
      <param name="length">這個執行個體中的子字串長度。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小於零。-或-<paramref name="startIndex" /> 加上 <paramref name="length" /> 大於這個執行個體的長度。</exception>
    </member>
    <member name="M:System.String.ToLower">
      <summary>使用目前文化特性的大小寫規則，傳回此字串轉換成小寫的複本。</summary>
      <returns>目前字串的小寫對應項。</returns>
    </member>
    <member name="M:System.String.ToLower(System.Globalization.CultureInfo)">
      <summary>使用指定之文化特性的大小寫規則，傳回此字串轉換成小寫的複本。</summary>
      <returns>目前字串的小寫對應項。</returns>
      <param name="culture">提供文化特性大小寫規則的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 null。</exception>
    </member>
    <member name="M:System.String.ToLowerInvariant">
      <summary>使用不因文化特性而異的大小寫規則，傳回此字串轉換成小寫的複本。</summary>
      <returns>目前字串的小寫對應項。</returns>
    </member>
    <member name="M:System.String.ToString">
      <summary>傳回此字串的執行個體；不會執行實際的轉換。</summary>
      <returns>目前的字串。</returns>
    </member>
    <member name="M:System.String.ToString(System.IFormatProvider)">
      <summary>傳回此字串的執行個體；不會執行實際的轉換。</summary>
      <returns>目前的字串。</returns>
      <param name="provider">(保留) 提供文化特性專屬格式資訊的物件。</param>
    </member>
    <member name="M:System.String.ToUpper">
      <summary>使用目前文化特性的大小寫規則，傳回此字串轉換成大寫的複本。</summary>
      <returns>目前字串的大寫對應項。</returns>
    </member>
    <member name="M:System.String.ToUpper(System.Globalization.CultureInfo)">
      <summary>使用指定之文化特性的大小寫規則，傳回此字串轉換成大寫的複本。</summary>
      <returns>目前字串的大寫對應項。</returns>
      <param name="culture">提供文化特性大小寫規則的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 null。</exception>
    </member>
    <member name="M:System.String.ToUpperInvariant">
      <summary>使用不因文化特性而異的大小寫規則，傳回此字串轉換成大寫的複本。</summary>
      <returns>目前字串的大寫對應項。</returns>
    </member>
    <member name="M:System.String.Trim">
      <summary>從目前的字串中移除所有前置和後端空白字元。</summary>
      <returns>從目前字串的開頭和結尾移除所有空白字元後，所保留下來的字串。</returns>
    </member>
    <member name="M:System.String.Trim(System.Char[])">
      <summary>從目前的字串中移除陣列中指定之一組字元的所有前置和後端指定項目。</summary>
      <returns>從目前字串的開頭和結尾移除 <paramref name="trimChars" /> 參數中所有出現的字元後，所保留下來的字串。如果 <paramref name="trimChars" /> 是 null 或空陣列，則反而會移除空白字元。</returns>
      <param name="trimChars">要移除的 Unicode 字元陣列或 null。</param>
    </member>
    <member name="M:System.String.TrimEnd(System.Char[])">
      <summary>從目前的字串中移除陣列中指定之一組字元的所有後端指定項目。</summary>
      <returns>從目前字串的結尾移除 <paramref name="trimChars" /> 參數中所有出現的字元後，所保留下來的字串。如果 <paramref name="trimChars" /> 是 null 或空陣列，則反而會移除空白字元。</returns>
      <param name="trimChars">要移除的 Unicode 字元陣列或 null。</param>
    </member>
    <member name="M:System.String.TrimStart(System.Char[])">
      <summary>從目前的字串中移除陣列中指定之一組字元的所有前置指定項目。</summary>
      <returns>從目前字串的開頭移除的 <paramref name="trimChars" /> 參數中所有出現的字元後，所保留下來的字串。如果 <paramref name="trimChars" /> 是 null 或空陣列，則反而會移除空白字元。</returns>
      <param name="trimChars">要移除的 Unicode 字元陣列或 null。</param>
    </member>
    <member name="T:System.StringComparer">
      <summary>表示使用特定大小寫和文化特性架構或序數比較規則的字串比較作業。</summary>
    </member>
    <member name="M:System.StringComparer.#ctor">
      <summary>初始化 <see cref="T:System.StringComparer" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.StringComparer.Compare(System.Object,System.Object)">
      <summary>以衍生類別覆寫時，比較兩個物件，並且傳回其相對排序次序的指示。</summary>
      <returns>Value意義小於零<paramref name="x" /> 小於 <paramref name="y" />。-或-<paramref name="x" /> 為 null。零<paramref name="x" /> 等於 <paramref name="y" />。大於零<paramref name="x" /> 大於 <paramref name="y" />。-或-<paramref name="y" /> 為 null。</returns>
      <param name="x">要與 <paramref name="y" /> 比較的物件。</param>
      <param name="y">要與 <paramref name="x" /> 比較的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 和 <paramref name="y" /> 都不是 <see cref="T:System.String" /> 物件，而且 <paramref name="x" /> 和 <paramref name="y" /> 都未實作 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.StringComparer.Compare(System.String,System.String)">
      <summary>以衍生類別覆寫時，比較兩個字串，並且傳回其相對排序次序的指示。</summary>
      <returns>值意義小於零<paramref name="x" /> 小於 <paramref name="y" />。-或-<paramref name="x" /> 為 null。零<paramref name="x" /> 等於 <paramref name="y" />。大於零<paramref name="x" /> 大於 <paramref name="y" />。-或-<paramref name="y" /> 為 null。</returns>
      <param name="x">要與 <paramref name="y" /> 比較的字串。</param>
      <param name="y">要與 <paramref name="x" /> 比較的字串。</param>
    </member>
    <member name="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)">
      <summary>建立 <see cref="T:System.StringComparer" /> 物件，該物件會依據指定之文化特性的規則比較字串。</summary>
      <returns>新 <see cref="T:System.StringComparer" /> 物件，依據 <paramref name="culture" /> 參數使用的比較規則，以及 <paramref name="ignoreCase" /> 參數指定的大小寫規則，執行字串比較。</returns>
      <param name="culture">一種文化特性，使用其語言規則來執行字串比較。</param>
      <param name="ignoreCase">true 表示將比較作業指定為不區分大小寫，false 表示將比較作業指定為區分大小寫。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 null。</exception>
    </member>
    <member name="P:System.StringComparer.CurrentCulture">
      <summary>取得 <see cref="T:System.StringComparer" /> 物件，該物件會使用目前文化特性的字組比較規則，執行區分大小寫字串的比較。</summary>
      <returns>新的 <see cref="T:System.StringComparer" /> 物件。</returns>
    </member>
    <member name="P:System.StringComparer.CurrentCultureIgnoreCase">
      <summary>取得 <see cref="T:System.StringComparer" /> 物件，該物件會使用目前文化特性的字組比較規則，執行不區分大小寫字串的比較。</summary>
      <returns>新的 <see cref="T:System.StringComparer" /> 物件。</returns>
    </member>
    <member name="M:System.StringComparer.Equals(System.Object,System.Object)">
      <summary>以衍生類別覆寫時，指出兩個物件是否相等。</summary>
      <returns>如果 <paramref name="x" /> 和 <paramref name="y" /> 都參考相同的物件，或者 <paramref name="x" /> 和 <paramref name="y" /> 都是相同的物件型別，而且這些物件都相等，則為 true，否則為 false。</returns>
      <param name="x">要與 <paramref name="y" /> 比較的物件。</param>
      <param name="y">要與 <paramref name="x" /> 比較的物件。</param>
    </member>
    <member name="M:System.StringComparer.Equals(System.String,System.String)">
      <summary>以衍生類別覆寫時，指出兩個字串是否相等。</summary>
      <returns>如果 <paramref name="x" /> 和 <paramref name="y" /> 都參考相同的物件，或者 <paramref name="x" /> 和 <paramref name="y" /> 相等，則為 true，否則為 false。</returns>
      <param name="x">要與 <paramref name="y" /> 比較的字串。</param>
      <param name="y">要與 <paramref name="x" /> 比較的字串。</param>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.Object)">
      <summary>以衍生類別覆寫時，取得指定之物件的雜湊程式碼。</summary>
      <returns>從 <paramref name="obj" /> 參數值計算之 32 位元帶正負號的雜湊碼。</returns>
      <param name="obj">物件。</param>
      <exception cref="T:System.ArgumentException">記憶體不足，無法配置計算雜湊程式碼所需的緩衝區。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 為 null。</exception>
    </member>
    <member name="M:System.StringComparer.GetHashCode(System.String)">
      <summary>以衍生類別覆寫時，取得指定之字串的雜湊程式碼。</summary>
      <returns>從 <paramref name="obj" /> 參數值計算之 32 位元帶正負號的雜湊碼。</returns>
      <param name="obj">字串。</param>
      <exception cref="T:System.ArgumentException">記憶體不足，無法配置計算雜湊程式碼所需的緩衝區。</exception>
    </member>
    <member name="P:System.StringComparer.InvariantCulture">
      <summary>取得 <see cref="T:System.StringComparer" /> 物件，該物件會使用不變文化特性的字組比較規則，執行區分大小寫字串的比較。</summary>
      <returns>新的 <see cref="T:System.StringComparer" /> 物件。</returns>
    </member>
    <member name="P:System.StringComparer.InvariantCultureIgnoreCase">
      <summary>取得 <see cref="T:System.StringComparer" /> 物件，該物件會使用不變文化特性的字組比較規則，執行不區分大小寫字串的比較。</summary>
      <returns>新的 <see cref="T:System.StringComparer" /> 物件。</returns>
    </member>
    <member name="P:System.StringComparer.Ordinal">
      <summary>取得 <see cref="T:System.StringComparer" /> 物件，該物件會執行區分大小寫的序數字串比較。</summary>
      <returns>
        <see cref="T:System.StringComparer" /> 物件。</returns>
    </member>
    <member name="P:System.StringComparer.OrdinalIgnoreCase">
      <summary>取得 <see cref="T:System.StringComparer" /> 物件，該物件會執行不區分大小寫的序數字串比較。</summary>
      <returns>
        <see cref="T:System.StringComparer" /> 物件。</returns>
    </member>
    <member name="T:System.StringComparison">
      <summary>指定 <see cref="M:System.String.Compare(System.String,System.String)" /> 與 <see cref="M:System.String.Equals(System.Object)" /> 方法的某些多載形式所使用的文化特性、大小寫與排序規則。</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCulture">
      <summary>比較使用區分文化特性排序規則和使用目前文化特性的字串。</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCultureIgnoreCase">
      <summary>比較使用區分文化特性排序規則和使用目前文化特性的字串，並忽略所比較字串的大小寫。</summary>
    </member>
    <member name="F:System.StringComparison.InvariantCulture">
      <summary>比較使用區分文化特性排序規則和使用不變文化特性的字串。</summary>
    </member>
    <member name="F:System.StringComparison.InvariantCultureIgnoreCase">
      <summary>比較使用區分文化特性排序規則和使用不變文化特性的字串，並忽略所比較字串的大小寫。</summary>
    </member>
    <member name="F:System.StringComparison.Ordinal">
      <summary>採用序數排序規則比較字串。</summary>
    </member>
    <member name="F:System.StringComparison.OrdinalIgnoreCase">
      <summary>採用序數排序規則比較字串，並忽略所比較字串的大小寫。</summary>
    </member>
    <member name="T:System.StringSplitOptions">
      <summary>指定分隔已分隔之字串的方法是否要加入或省略傳回陣列中的空子字串。</summary>
    </member>
    <member name="F:System.StringSplitOptions.None">
      <summary>此傳回值會加入包含了空字串的陣列元素。</summary>
    </member>
    <member name="F:System.StringSplitOptions.RemoveEmptyEntries">
      <summary>此傳回值不會加入包含了空字串的陣列元素。</summary>
    </member>
    <member name="T:System.SystemException">
      <summary>定義 <see cref="N:System" /> 命名空間中預先定義之例外狀況的基底類別。</summary>
    </member>
    <member name="M:System.SystemException.#ctor">
      <summary>初始化 <see cref="T:System.SystemException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.SystemException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.SystemException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.SystemException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.SystemException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.ThreadStaticAttribute">
      <summary>指出每個執行緒的靜態欄位值是唯一的。</summary>
    </member>
    <member name="M:System.ThreadStaticAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ThreadStaticAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.TimeoutException">
      <summary>分配給處理或作業的時間已經過期時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor">
      <summary>初始化 <see cref="T:System.TimeoutException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.TimeoutException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和內部例外狀況來初始化 <see cref="T:System.TimeoutException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.TimeSpan">
      <summary>表示時間間隔。</summary>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>將新的 <see cref="T:System.TimeSpan" /> 初始化為指定的時數、分數和秒數。</summary>
      <param name="hours">時數。</param>
      <param name="minutes">分鐘數。</param>
      <param name="seconds">秒數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">參數指定的 <see cref="T:System.TimeSpan" /> 值小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>將新的 <see cref="T:System.TimeSpan" /> 初始化為指定的天數、時數、分數和秒數。</summary>
      <param name="days">天數。</param>
      <param name="hours">時數。</param>
      <param name="minutes">分鐘數。</param>
      <param name="seconds">秒數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">參數指定的 <see cref="T:System.TimeSpan" /> 值小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>將新的 <see cref="T:System.TimeSpan" /> 初始化為指定的天數、時數、分數、秒數和毫秒數。</summary>
      <param name="days">天數。</param>
      <param name="hours">時數。</param>
      <param name="minutes">分鐘數。</param>
      <param name="seconds">秒數。</param>
      <param name="milliseconds">毫秒數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">參數指定的 <see cref="T:System.TimeSpan" /> 值小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int64)">
      <summary>將新的 <see cref="T:System.TimeSpan" /> 初始化為指定的刻度數。</summary>
      <param name="ticks">以 100 奈秒為單位所表示的時段。</param>
    </member>
    <member name="M:System.TimeSpan.Add(System.TimeSpan)">
      <summary>傳回新的 <see cref="T:System.TimeSpan" /> 物件，此物件的值等於指定的 <see cref="T:System.TimeSpan" /> 物件與此執行個體的總和。</summary>
      <returns>新物件，表示這個執行個體的值加上 <paramref name="ts" /> 的值。</returns>
      <param name="ts">要加入的時間間隔。</param>
      <exception cref="T:System.OverflowException">產生的 <see cref="T:System.TimeSpan" /> 小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)">
      <summary>比較兩個 <see cref="T:System.TimeSpan" /> 值，並且傳回一個整數，指出第 1 個間隔是長於、等於還是短於第 2 個間隔。</summary>
      <returns>下表的其中一個值。值描述-1 <paramref name="t1" />  短於 <paramref name="t2" />0 <paramref name="t1" />  等於 <paramref name="t2" />1 <paramref name="t1" />  長於 <paramref name="t2" /></returns>
      <param name="t1">要比較的第 1 個時間間隔。</param>
      <param name="t2">要比較的第 2 個時間間隔。</param>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.Object)">
      <summary>比較此執行個體和特定物件，並且傳回一個整數，指出此執行個體表示的時間間隔是長於、等於或短於特定物件表示的時間間隔。</summary>
      <returns>下表的其中一個值。值描述-1 這個執行個體的值短於 <paramref name="value" /> 的值。0 這個執行個體的值等於 <paramref name="value" /> 的值。1 這個執行個體的值長於 <paramref name="value" /> 的值。-或-<paramref name="value" /> 為 null。</returns>
      <param name="value">要比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.TimeSpan" />。</exception>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.TimeSpan)">
      <summary>比較此執行個體和特定 <see cref="T:System.TimeSpan" /> 物件，並且傳回一個整數，指出此執行個體表示的時間間隔是長於、等於或短於特定 <see cref="T:System.TimeSpan" /> 物件表示的時間間隔。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的相對值。值描述負整數這個執行個體短於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。正整數這個執行個體長於 <paramref name="value" />.</returns>
      <param name="value">與此執行個體相比較的物件。</param>
    </member>
    <member name="P:System.TimeSpan.Days">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構所表示之時間間隔的天數元件。</summary>
      <returns>此執行個體的天數元件。傳回值可以為正數或是負數。</returns>
    </member>
    <member name="M:System.TimeSpan.Duration">
      <summary>傳回新的 <see cref="T:System.TimeSpan" /> 物件，其值為目前 <see cref="T:System.TimeSpan" /> 物件的絕對值。</summary>
      <returns>新的物件，其值為目前 <see cref="T:System.TimeSpan" /> 物件的絕對值。</returns>
      <exception cref="T:System.OverflowException">此執行個體的值為 <see cref="F:System.TimeSpan.MinValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.Equals(System.Object)">
      <summary>傳回值，指出此執行個體是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.TimeSpan" /> 物件，表示與目前的 <see cref="T:System.TimeSpan" /> 結構有相同時間間隔，則為 true，否則為 false。</returns>
      <param name="value">要與此執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan)">
      <summary>傳回值，指出此執行個體是否等於指定之 <see cref="T:System.TimeSpan" /> 物件。</summary>
      <returns>如果 <paramref name="obj" /> 表示的時間間隔與此執行個體相同則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)">
      <summary>傳回值，指出 <see cref="T:System.TimeSpan" />的兩個指定執行個體是否相等。</summary>
      <returns>如果 <paramref name="t1" /> 的值和 <paramref name="t2" /> 的值相等則為 true，否則為 false。</returns>
      <param name="t1">要比較的第 1 個時間間隔。</param>
      <param name="t2">要比較的第 2 個時間間隔。</param>
    </member>
    <member name="M:System.TimeSpan.FromDays(System.Double)">
      <summary>傳回表示指定天數的 <see cref="T:System.TimeSpan" />，其規格的精確度達到最接近的毫秒數。</summary>
      <returns>表示 <paramref name="value" /> 的物件。</returns>
      <param name="value">精確到最接近毫秒的天數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。-或-<paramref name="value" /> 為 <see cref="F:System.Double.PositiveInfinity" />。-或-<paramref name="value" /> 為 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等於 <see cref="F:System.Double.NaN" />。</exception>
    </member>
    <member name="M:System.TimeSpan.FromHours(System.Double)">
      <summary>傳回表示指定時數的 <see cref="T:System.TimeSpan" />，其規格的精確度達到最接近的毫秒數。</summary>
      <returns>表示 <paramref name="value" /> 的物件。</returns>
      <param name="value">精確到最接近毫秒的時數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。-或-<paramref name="value" /> 為 <see cref="F:System.Double.PositiveInfinity" />。-或-<paramref name="value" /> 為 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等於 <see cref="F:System.Double.NaN" />。</exception>
    </member>
    <member name="M:System.TimeSpan.FromMilliseconds(System.Double)">
      <summary>傳回表示指定毫秒數的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>表示 <paramref name="value" /> 的物件。</returns>
      <param name="value">毫秒數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。-或-<paramref name="value" /> 為 <see cref="F:System.Double.PositiveInfinity" />。-或-<paramref name="value" /> 為 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等於 <see cref="F:System.Double.NaN" />。</exception>
    </member>
    <member name="M:System.TimeSpan.FromMinutes(System.Double)">
      <summary>傳回表示指定分數的 <see cref="T:System.TimeSpan" />，其規格的精確度達到最接近的毫秒數。</summary>
      <returns>表示 <paramref name="value" /> 的物件。</returns>
      <param name="value">精確到最接近毫秒的分數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。-或-<paramref name="value" /> 為 <see cref="F:System.Double.PositiveInfinity" />。-或-<paramref name="value" /> 為 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等於 <see cref="F:System.Double.NaN" />。</exception>
    </member>
    <member name="M:System.TimeSpan.FromSeconds(System.Double)">
      <summary>傳回表示指定秒數的 <see cref="T:System.TimeSpan" />，其規格的精確度達到最接近的毫秒數。</summary>
      <returns>表示 <paramref name="value" /> 的物件。</returns>
      <param name="value">精確到最接近毫秒的秒數。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。-或-<paramref name="value" /> 為 <see cref="F:System.Double.PositiveInfinity" />。-或-<paramref name="value" /> 為 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等於 <see cref="F:System.Double.NaN" />。</exception>
    </member>
    <member name="M:System.TimeSpan.FromTicks(System.Int64)">
      <summary>傳回表示指定時間的 <see cref="T:System.TimeSpan" />，其規格是以刻度為單位。</summary>
      <returns>表示 <paramref name="value" /> 的物件。</returns>
      <param name="value">表示時間的刻度數。</param>
    </member>
    <member name="M:System.TimeSpan.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.TimeSpan.Hours">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構所表示之時間間隔的小時元件。</summary>
      <returns>目前 <see cref="T:System.TimeSpan" /> 結構的時數元件。傳回值範圍從 -23 到 23。</returns>
    </member>
    <member name="F:System.TimeSpan.MaxValue">
      <summary>表示最大 <see cref="T:System.TimeSpan" /> 值。這個欄位是唯讀的。</summary>
    </member>
    <member name="P:System.TimeSpan.Milliseconds">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構所表示之時間間隔的奈秒元件。</summary>
      <returns>目前 <see cref="T:System.TimeSpan" /> 結構的毫秒數元件。傳回值範圍從 -999 到 999。</returns>
    </member>
    <member name="P:System.TimeSpan.Minutes">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構所表示之時間間隔的分鐘元件。</summary>
      <returns>目前 <see cref="T:System.TimeSpan" /> 結構的分鐘數元件。傳回值範圍從 -59 到 59。</returns>
    </member>
    <member name="F:System.TimeSpan.MinValue">
      <summary>表示最小 <see cref="T:System.TimeSpan" /> 值。這個欄位是唯讀的。</summary>
    </member>
    <member name="M:System.TimeSpan.Negate">
      <summary>傳回新的 <see cref="T:System.TimeSpan" />，其值是此執行個體的相反值。</summary>
      <returns>與此執行個體具有相同數值，但正負號相反的新物件。</returns>
      <exception cref="T:System.OverflowException">這個執行個體的相反值不能由 <see cref="T:System.TimeSpan" /> 表示；也就是說，這個執行個體的值是 <see cref="F:System.TimeSpan.MinValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)">
      <summary>加入兩個指定的 <see cref="T:System.TimeSpan" /> 執行個體。</summary>
      <returns>物件，其值為 <paramref name="t1" /> 和 <paramref name="t2" /> 值的總和。</returns>
      <param name="t1">要加入的第一個時間間隔。</param>
      <param name="t2">要加入的第二個時間間隔。</param>
      <exception cref="T:System.OverflowException">產生的 <see cref="T:System.TimeSpan" /> 小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)">
      <summary>指出兩個 <see cref="T:System.TimeSpan" /> 執行個體是否相等。</summary>
      <returns>如果 <paramref name="t1" /> 的值和 <paramref name="t2" /> 的值相等則為 true，否則為 false。</returns>
      <param name="t1">要比較的第 1 個時間間隔。</param>
      <param name="t2">要比較的第 2 個時間間隔。</param>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)">
      <summary>指出指定的 <see cref="T:System.TimeSpan" /> 是否大於另一個指定的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>如果 <paramref name="t1" /> 的值大於 <paramref name="t2" /> 的值則為 true，否則為 false。</returns>
      <param name="t1">要比較的第 1 個時間間隔。</param>
      <param name="t2">要比較的第 2 個時間間隔。</param>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>指出指定的 <see cref="T:System.TimeSpan" /> 是否大於或等於另一個指定的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>如果 <paramref name="t1" /> 的值大於或等於 <paramref name="t2" /> 的值則為 true，否則為 false。</returns>
      <param name="t1">要比較的第 1 個時間間隔。</param>
      <param name="t2">要比較的第 2 個時間間隔。</param>
    </member>
    <member name="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)">
      <summary>指出兩個 <see cref="T:System.TimeSpan" /> 執行個體是否不相等。</summary>
      <returns>如果 <paramref name="t1" /> 的值和 <paramref name="t2" /> 的值不相等則為 true，否則為 false。</returns>
      <param name="t1">要比較的第 1 個時間間隔。</param>
      <param name="t2">要比較的第 2 個時間間隔。</param>
    </member>
    <member name="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)">
      <summary>指出指定的 <see cref="T:System.TimeSpan" /> 是否小於另一個指定的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>如果 <paramref name="t1" /> 的值小於 <paramref name="t2" /> 的值則為 true，否則為 false。</returns>
      <param name="t1">要比較的第 1 個時間間隔。</param>
      <param name="t2">要比較的第 2 個時間間隔。</param>
    </member>
    <member name="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>指出指定的 <see cref="T:System.TimeSpan" /> 是否小於或等於另一個指定的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>如果 <paramref name="t1" /> 的值小於或等於 <paramref name="t2" /> 的值則為 true，否則為 false。</returns>
      <param name="t1">要比較的第 1 個時間間隔。</param>
      <param name="t2">要比較的第 2 個時間間隔。</param>
    </member>
    <member name="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)">
      <summary>將指定的 <see cref="T:System.TimeSpan" /> 從另一個指定的 <see cref="T:System.TimeSpan" /> 減掉。</summary>
      <returns>物件，其值為 <paramref name="t1" /> 值減去 <paramref name="t2" /> 值的結果。</returns>
      <param name="t1">當做被減數的時間間隔 (被減數)。</param>
      <param name="t2">要減去的時間間隔 (減數)。</param>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)">
      <summary>傳回 <see cref="T:System.TimeSpan" />，其值是指定執行個體的相反值。</summary>
      <returns>與此執行個體具有相同數值的物件，但正負號相反。</returns>
      <param name="t">要成為相反值的時間間隔。</param>
      <exception cref="T:System.OverflowException">這個執行個體的相反值不能由 <see cref="T:System.TimeSpan" /> 表示；也就是說，這個執行個體的值是 <see cref="F:System.TimeSpan.MinValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)">
      <summary>傳回 <see cref="T:System.TimeSpan" /> 的指定執行個體。</summary>
      <returns>
        <paramref name="t" /> 指定的時間間隔。</returns>
      <param name="t">要傳回的時間間隔。</param>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String)">
      <summary>將時間間隔的字串表示轉換成其對等的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>對應至 <paramref name="s" /> 的時間間隔。</returns>
      <param name="s">指定要轉換之時間間隔的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式無效。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示數字小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。-或-天數、時數、分鐘數或秒數元件中至少有一個超出其有效範圍。</exception>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的文化特性特定格式資訊，將時間間隔的字串表示轉換為其對等的 <see cref="T:System.TimeSpan" />。</summary>
      <returns>對應至 <paramref name="input" /> 的時間間隔，如 <paramref name="formatProvider" /> 所指定。</returns>
      <param name="input">指定要轉換之時間間隔的字串。</param>
      <param name="formatProvider">物件，提供文化特性特定格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 的格式無效。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 表示小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" /> 的數字。-或-<paramref name="input" /> 的天數、時數、分鐘數或秒數元件中至少有一個超出其有效範圍。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>使用指定之格式和文化特性特定格式資訊，將時間間隔的字串表示轉換為其對等的 <see cref="T:System.TimeSpan" />。字串表示的格式必須完全符合指定的格式。</summary>
      <returns>對應至 <paramref name="input" /> 的時間間隔，如 <paramref name="format" /> 和 <paramref name="formatProvider" /> 所指定。</returns>
      <param name="input">指定要轉換之時間間隔的字串。</param>
      <param name="format">標準或自訂格式字串，會定義 <paramref name="input" /> 的必要格式。</param>
      <param name="formatProvider">物件，提供文件特性的格式化資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 的格式無效。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 表示小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" /> 的數字。-或-<paramref name="input" /> 的天數、時數、分鐘數或秒數元件中至少有一個超出其有效範圍。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>使用指定之格式、文化特性特定格式資訊和樣式，將時間間隔的字串表示轉換為其對等的 <see cref="T:System.TimeSpan" />。字串表示的格式必須完全符合指定的格式。</summary>
      <returns>對應至 <paramref name="input" /> 的時間間隔，如 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 所指定。</returns>
      <param name="input">指定要轉換之時間間隔的字串。</param>
      <param name="format">標準或自訂格式字串，會定義 <paramref name="input" /> 的必要格式。</param>
      <param name="formatProvider">物件，提供文件特性的格式化資訊。</param>
      <param name="styles">列舉值的位元組合，此組合定義 <paramref name="input" /> 中可以存在的樣式元素。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 是無效的 <see cref="T:System.Globalization.TimeSpanStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 的格式無效。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 表示小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" /> 的數字。-或-<paramref name="input" /> 的天數、時數、分鐘數或秒數元件中至少有一個超出其有效範圍。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider)">
      <summary>使用指定之格式字串的陣列和文化特性特定格式資訊，將時間間隔的字串表示轉換為其對等的 <see cref="T:System.TimeSpan" />。字串表示的格式必須完全符合其中一個指定的格式。</summary>
      <returns>對應至 <paramref name="input" /> 的時間間隔，如 <paramref name="formats" /> 和 <paramref name="formatProvider" /> 所指定。</returns>
      <param name="input">指定要轉換之時間間隔的字串。</param>
      <param name="formats">標準或自訂格式字串的陣列，此陣列定義 <paramref name="input" /> 的必要格式。</param>
      <param name="formatProvider">物件，提供文件特性的格式化資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 的格式無效。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 表示小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" /> 的數字。-或-<paramref name="input" /> 的天數、時數、分鐘數或秒數元件中至少有一個超出其有效範圍。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>使用指定之格式、文化特性特定格式資訊和樣式，將時間間隔的字串表示轉換為其對等的 <see cref="T:System.TimeSpan" />。字串表示的格式必須完全符合其中一個指定的格式。</summary>
      <returns>對應至 <paramref name="input" /> 的時間間隔，如 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 所指定。</returns>
      <param name="input">指定要轉換之時間間隔的字串。</param>
      <param name="formats">標準或自訂格式字串的陣列，這些格式字串定義 <paramref name="input" /> 的必要格式。</param>
      <param name="formatProvider">物件，提供文件特性的格式化資訊。</param>
      <param name="styles">列舉值的位元組合，此組合定義輸入中可以存在的樣式元素。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 是無效的 <see cref="T:System.Globalization.TimeSpanStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 的格式無效。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 表示小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" /> 的數字。-或-<paramref name="input" /> 的天數、時數、分鐘數或秒數元件中至少有一個超出其有效範圍。</exception>
    </member>
    <member name="P:System.TimeSpan.Seconds">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構所表示之時間間隔的秒鐘元件。</summary>
      <returns>目前 <see cref="T:System.TimeSpan" /> 結構的秒數元件。傳回值範圍從 -59 到 59。</returns>
    </member>
    <member name="M:System.TimeSpan.Subtract(System.TimeSpan)">
      <summary>傳回新的 <see cref="T:System.TimeSpan" /> 物件，此物件的值等於指定的 <see cref="T:System.TimeSpan" /> 物件與此執行個體之間的差值。</summary>
      <returns>新的時間間隔，其值是為這個執行個體的值減去 <paramref name="ts" /> 值的結果。</returns>
      <param name="ts">要減去的時間間隔。</param>
      <exception cref="T:System.OverflowException">傳回值小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="P:System.TimeSpan.Ticks">
      <summary>取得刻度數，表示目前 <see cref="T:System.TimeSpan" /> 結構的值。</summary>
      <returns>此執行個體中包含的刻度數。</returns>
    </member>
    <member name="F:System.TimeSpan.TicksPerDay">
      <summary>表示 1 天中的刻度數。這個欄位是常數。</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerHour">
      <summary>表示 1 小時中的刻度數。這個欄位是常數。</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMillisecond">
      <summary>表示 1 毫秒中的刻度數。這個欄位是常數。</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMinute">
      <summary>表示 1 分鐘中的刻度數。這個欄位是常數。</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerSecond">
      <summary>表示 1 秒中的刻度數。</summary>
    </member>
    <member name="M:System.TimeSpan.ToString">
      <summary>將目前 <see cref="T:System.TimeSpan" /> 物件的值轉換為其對等的字串表示。</summary>
      <returns>目前 <see cref="T:System.TimeSpan" /> 值的字串表示。</returns>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String)">
      <summary>使用指定的格式，將目前 <see cref="T:System.TimeSpan" /> 物件的值轉換為其對等字串表示。</summary>
      <returns>目前 <see cref="T:System.TimeSpan" /> 值的字串表示，採用 <paramref name="format" /> 參數所指定的格式。</returns>
      <param name="format">標準或自訂 <see cref="T:System.TimeSpan" /> 格式字串。</param>
      <exception cref="T:System.FormatException">無法辨識 <paramref name="format" /> 參數或不支援此參數。</exception>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性格式資訊，將目前 <see cref="T:System.TimeSpan" /> 物件的值轉換為其對等字串表示。</summary>
      <returns>目前 <see cref="T:System.TimeSpan" /> 值的字串表示，如 <paramref name="format" /> 和 <paramref name="formatProvider" /> 所指定。</returns>
      <param name="format">標準或自訂 <see cref="T:System.TimeSpan" /> 格式字串。</param>
      <param name="formatProvider">物件，提供文化特性特定格式資訊。</param>
      <exception cref="T:System.FormatException">無法辨識 <paramref name="format" /> 參數或不支援此參數。</exception>
    </member>
    <member name="P:System.TimeSpan.TotalDays">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構的值，此值以整數和小數的天數表示。</summary>
      <returns>此執行個體表示的完整天數。</returns>
    </member>
    <member name="P:System.TimeSpan.TotalHours">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構的值，此值以整數和小數的時數表示。</summary>
      <returns>此執行個體表示的完整時數。</returns>
    </member>
    <member name="P:System.TimeSpan.TotalMilliseconds">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構的值，此值以整數和小數的毫秒數表示。</summary>
      <returns>此執行個體表示的完整毫秒數。</returns>
    </member>
    <member name="P:System.TimeSpan.TotalMinutes">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構的值，此值以整數和小數的分鐘數表示。</summary>
      <returns>此執行個體表示的完整分鐘數。</returns>
    </member>
    <member name="P:System.TimeSpan.TotalSeconds">
      <summary>取得目前 <see cref="T:System.TimeSpan" /> 結構的值，此值以整數和小數的秒數表示。</summary>
      <returns>此執行個體表示的完整秒數。</returns>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>使用指定的文化特性特定格式資訊，將時間間隔的字串表示轉換為其對等的 <see cref="T:System.TimeSpan" />，並傳回表示轉換是否成功的值。</summary>
      <returns>如果成功地轉換 <paramref name="input" /> 則為 true，否則為 false。如果 <paramref name="input" /> 參數是 null 或 <see cref="F:System.String.Empty" />、具有無效格式、代表小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" /> 的時間間隔，或是其天數、時數、分鐘數或秒數項目至少有一個超出有效範圍，這項作業就會傳回 false。</returns>
      <param name="input">指定要轉換之時間間隔的字串。</param>
      <param name="formatProvider">物件，提供文化特性特定格式資訊。</param>
      <param name="result">當此方法回傳時，會包含表示 <paramref name="input" /> 指定的時間間隔之物件，如果轉換失敗，則為 <see cref="F:System.TimeSpan.Zero" />。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)">
      <summary>將時間間隔的字串表示轉換為其對等的 <see cref="T:System.TimeSpan" />，並傳回表示轉換是否成功的值。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。如果 <paramref name="s" /> 參數是 null 或 <see cref="F:System.String.Empty" />、具有無效格式、代表小於 <see cref="F:System.TimeSpan.MinValue" /> 或大於 <see cref="F:System.TimeSpan.MaxValue" /> 的時間間隔，或是其天數、時數、分鐘數或秒數項目至少有一個超出有效範圍，這項作業就會傳回 false。</returns>
      <param name="s">指定要轉換之時間間隔的字串。</param>
      <param name="result">當此方法回傳時，會包含表示 <paramref name="s" /> 指定的時間間隔之物件，如果轉換失敗，則為 <see cref="F:System.TimeSpan.Zero" />。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>使用指定的格式、文化特性特定格式資訊和樣式，將時間間隔的字串表示轉換為其對等的 <see cref="T:System.TimeSpan" />，並傳回表示轉換是否成功的值。字串表示的格式必須完全符合指定的格式。</summary>
      <returns>如果成功地轉換 <paramref name="input" /> 則為 true，否則為 false。</returns>
      <param name="input">指定要轉換之時間間隔的字串。</param>
      <param name="format">標準或自訂格式字串，會定義 <paramref name="input" /> 的必要格式。</param>
      <param name="formatProvider">物件，提供文件特性的格式化資訊。</param>
      <param name="styles">一或多個列舉值，這些值表示 <paramref name="input" /> 的樣式。</param>
      <param name="result">當此方法回傳時，會包含表示 <paramref name="input" /> 指定的時間間隔之物件，如果轉換失敗，則為 <see cref="F:System.TimeSpan.Zero" />。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>使用指定的格式和文化特性特定格式資訊，將時間間隔的字串表示轉換為其對等的 <see cref="T:System.TimeSpan" />，並傳回表示轉換是否成功的值。字串表示的格式必須完全符合指定的格式。</summary>
      <returns>如果成功地轉換 <paramref name="input" /> 則為 true，否則為 false。</returns>
      <param name="input">指定要轉換之時間間隔的字串。</param>
      <param name="format">標準或自訂格式字串，會定義 <paramref name="input" /> 的必要格式。</param>
      <param name="formatProvider">物件，提供文化特性特定格式資訊。</param>
      <param name="result">當此方法回傳時，會包含表示 <paramref name="input" /> 指定的時間間隔之物件，如果轉換失敗，則為 <see cref="F:System.TimeSpan.Zero" />。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>使用指定的格式、文化特性特定格式資訊和樣式，將指定的時間間隔字串表示轉換為其對等的 <see cref="T:System.TimeSpan" />，並傳回表示轉換是否成功的值。字串表示的格式必須完全符合其中一個指定的格式。</summary>
      <returns>如果成功地轉換 <paramref name="input" /> 則為 true，否則為 false。</returns>
      <param name="input">指定要轉換之時間間隔的字串。</param>
      <param name="formats">標準或自訂格式字串的陣列，這些格式字串定義可接受的 <paramref name="input" /> 格式。</param>
      <param name="formatProvider">物件，提供文化特性特定格式資訊。</param>
      <param name="styles">一或多個列舉值，這些值表示 <paramref name="input" /> 的樣式。</param>
      <param name="result">當此方法回傳時，會包含表示 <paramref name="input" /> 指定的時間間隔之物件，如果轉換失敗，則為 <see cref="F:System.TimeSpan.Zero" />。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)">
      <summary>使用指定的格式和文化特性特定格式資訊，將指定的時間間隔字串表示轉換為其對等的 <see cref="T:System.TimeSpan" />，並傳回表示轉換是否成功的值。字串表示的格式必須完全符合其中一個指定的格式。</summary>
      <returns>如果成功地轉換 <paramref name="input" /> 則為 true，否則為 false。</returns>
      <param name="input">指定要轉換之時間間隔的字串。</param>
      <param name="formats">標準或自訂格式字串的陣列，這些格式字串定義可接受的 <paramref name="input" /> 格式。</param>
      <param name="formatProvider">物件，提供文件特性的格式化資訊。</param>
      <param name="result">當此方法回傳時，會包含表示 <paramref name="input" /> 指定的時間間隔之物件，如果轉換失敗，則為 <see cref="F:System.TimeSpan.Zero" />。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="F:System.TimeSpan.Zero">
      <summary>表示零 <see cref="T:System.TimeSpan" /> 值。這個欄位是唯讀的。</summary>
    </member>
    <member name="T:System.TimeZoneInfo">
      <summary>表示時區。</summary>
    </member>
    <member name="P:System.TimeZoneInfo.BaseUtcOffset">
      <summary>取得目前時區標準時間與 Coordinated Universal Time (UTC) 的時差。</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> 物件，表示目前時區標準時間與國際標準時間 (UTC) 的時差。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)">
      <summary>將時間轉換為特定時區的時間。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 值，表示目的地時區的日期和時間。</returns>
      <param name="dateTime">要轉換的日期和時間。</param>
      <param name="destinationTimeZone">要轉換 <paramref name="dateTime" /> 的目標時區。它必須是 <see cref="P:System.TimeZoneInfo.Local" /> 或 <see cref="P:System.TimeZoneInfo.Utc" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 參數值表示無效的時間。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZone" /> 參數的值為 null。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)">
      <summary>將時間轉換為特定時區的時間。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 值，表示目的地時區的日期和時間。</returns>
      <param name="dateTimeOffset">要轉換的日期和時間。</param>
      <param name="destinationTimeZone">要轉換 <paramref name="dateTime" /> 的目標時區。它必須是 <see cref="P:System.TimeZoneInfo.Local" /> 或 <see cref="P:System.TimeZoneInfo.Utc" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZone" /> 參數的值為 null。</exception>
    </member>
    <member name="P:System.TimeZoneInfo.DaylightName">
      <summary>取得目前時區日光節約時間的當地語系化顯示名稱。</summary>
      <returns>時區之當地語系化日光節約時間的顯示名稱。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.DisplayName">
      <summary>取得表示時區的當地語系化一般顯示名稱。</summary>
      <returns>時區的當地語系化一般顯示名稱。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)">
      <summary>判斷目前的 <see cref="T:System.TimeZoneInfo" /> 物件和另一個 <see cref="T:System.TimeZoneInfo" /> 物件是否相等。</summary>
      <returns>如果兩個 <see cref="T:System.TimeZoneInfo" /> 物件相等則為 true，否則為 false。</returns>
      <param name="other">要與目前 <see cref="T:System.TimeZoneInfo" /> 物件比較的第 2 個 <see cref="T:System.TimeZoneInfo" /> 物件。</param>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)">
      <summary>傳回不明確的日期和時間可能對應的日期和時間相關資訊。</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> 物件陣列，這些物件表示特定日期和時間可對應的可能國際標準時間 (UTC) 位移。</returns>
      <param name="dateTime">日期和時間。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 不是模稜兩可的時間。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)">
      <summary>傳回不明確的日期和時間可能對應的日期和時間相關資訊。</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> 物件陣列，這些物件表示特定日期和時間可對應的可能國際標準時間 (UTC) 位移。</returns>
      <param name="dateTimeOffset">日期和時間。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 不是模稜兩可的時間。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetHashCode">
      <summary>做為雜湊函式，用於雜湊演算法和資料結構，例如雜湊資料表。</summary>
      <returns>32 位元帶正負號的整數，表示此 <see cref="T:System.TimeZoneInfo" /> 物件的雜湊碼。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)">
      <summary>計算此時區與國際標準時間 (UTC) 在特定日期和時間的位移和差異。</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> 物件，表示兩個時區間的時差。</returns>
      <param name="dateTime">判斷其位移的日期和時間。</param>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)">
      <summary>計算此時區與國際標準時間 (UTC) 在特定日期和時間的位移和差異。</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> 物件，表示國際標準時間 (UTC) 與目前時區的時差。</returns>
      <param name="dateTimeOffset">判斷其位移的日期和時間。</param>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)">
      <summary>判斷特定時區中的特定日期和時間是否模稜兩可，以及是否可對應到兩個或多個 Coordinated Universal Time (UTC) 時間。</summary>
      <returns>如果 <paramref name="dateTime" /> 參數模稜兩可則為 true，否則為 false。</returns>
      <param name="dateTime">日期和時間值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Local" />，且 <paramref name="dateTime" /> 是無效的時間。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)">
      <summary>判斷特定時區中的特定日期和時間是否模稜兩可，以及是否可對應到兩個或多個 Coordinated Universal Time (UTC) 時間。</summary>
      <returns>如果目前時區中的 <paramref name="dateTimeOffset" /> 參數模稜兩可則為 true，否則為 false。</returns>
      <param name="dateTimeOffset">日期和時間。</param>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)">
      <summary>指出所指定日期和時間是否在目前 <see cref="T:System.TimeZoneInfo" /> 物件之時區的日光節約時間範圍內。</summary>
      <returns>如果 <paramref name="dateTime" /> 參數為日光節約時間則為 true，否則為 false。</returns>
      <param name="dateTime">日期和時間值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 屬性為 <see cref="F:System.DateTimeKind.Local" />，且 <paramref name="dateTime" /> 是無效的時間。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)">
      <summary>指出所指定日期和時間是否在目前 <see cref="T:System.TimeZoneInfo" /> 物件之時區的日光節約時間範圍內。</summary>
      <returns>如果 <paramref name="dateTimeOffset" /> 參數為日光節約時間則為 true，否則為 false。</returns>
      <param name="dateTimeOffset">日期和時間值。</param>
    </member>
    <member name="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)">
      <summary>指出特定日期和時間是否無效。</summary>
      <returns>如果 <paramref name="dateTime" /> 無效則為 true，否則為 false。</returns>
      <param name="dateTime">日期和時間值。</param>
    </member>
    <member name="P:System.TimeZoneInfo.Local">
      <summary>取得表示本地時區的 <see cref="T:System.TimeZoneInfo" /> 物件。</summary>
      <returns>表示本地時區的 <see cref="T:System.TimeZoneInfo" /> 物件。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.StandardName">
      <summary>取得時區標準時間的當地語系化顯示名稱。</summary>
      <returns>時區標準時間的當地語系化顯示名稱。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.SupportsDaylightSavingTime">
      <summary>取得值，指出時區是否具有任何日光節約時間規則。</summary>
      <returns>如果時區支援日光節約時間則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ToString">
      <summary>傳回目前 <see cref="T:System.TimeZoneInfo" /> 物件的顯示名稱。</summary>
      <returns>目前 <see cref="T:System.TimeZoneInfo" /> 物件的 <see cref="P:System.TimeZoneInfo.DisplayName" /> 屬性值。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.Utc">
      <summary>取得表示 Coordinated Universal Time (UTC) 時區的 <see cref="T:System.TimeZoneInfo" /> 物件。</summary>
      <returns>表示國際標準時間 (UTC) 時區的 <see cref="T:System.TimeZoneInfo" /> 物件。</returns>
    </member>
    <member name="T:System.Tuple">
      <summary>提供用於建立 Tuple 物件的靜態方法。</summary>
    </member>
    <member name="M:System.Tuple.Create``1(``0)">
      <summary>建立新的 1-Tuple 或單一 (Singleton)。</summary>
      <returns>值為 (<paramref name="item1" />) 的 Tuple。</returns>
      <param name="item1">Tuple 之唯一元件的值。</param>
      <typeparam name="T1">Tuple 之唯一元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``2(``0,``1)">
      <summary>建立新的 2-Tuple 或雙重 (Pair)。</summary>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />) 的 2-Tuple。</returns>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``3(``0,``1,``2)">
      <summary>建立新的 3-Tuple 或三重 (Triple)。</summary>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />、<paramref name="item3" />) 的 3-Tuple。</returns>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``4(``0,``1,``2,``3)">
      <summary>建立新的 4-Tuple 或四重 (Quadruple)。</summary>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />、<paramref name="item3" />、<paramref name="item4" />) 的 4-Tuple。</returns>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
      <summary>建立新的 5-Tuple 或五重 (Quintuple)。</summary>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />、<paramref name="item3" />、<paramref name="item4" />、<paramref name="item5" />) 的 5-Tuple。</returns>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 第 5 個元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
      <summary>建立新的 6-Tuple 或六重 (Sextuple)。</summary>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />、<paramref name="item3" />、<paramref name="item4" />、<paramref name="item5" />、<paramref name="item6" />) 的 6-Tuple。</returns>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <param name="item6">Tuple 第 6 個元件的值。</param>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 第 5 個元件的型別。</typeparam>
      <typeparam name="T6">Tuple 第 6 個元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
      <summary>建立新的 7-Tuple 或七重 (Septuple)。</summary>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />、<paramref name="item3" />、<paramref name="item4" />、<paramref name="item5" />、<paramref name="item6" />、<paramref name="item7" />) 的 7-Tuple。</returns>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <param name="item6">Tuple 第 6 個元件的值。</param>
      <param name="item7">Tuple 第 7 個元件的值。</param>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 第 5 個元件的型別。</typeparam>
      <typeparam name="T6">Tuple 第 6 個元件的型別。</typeparam>
      <typeparam name="T7">Tuple 第 7 個元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>建立新的 8-tuple 或八重 (Octuple)。</summary>
      <returns>值為 (<paramref name="item1" />、<paramref name="item2" />、<paramref name="item3" />、<paramref name="item4" />、<paramref name="item5" />、<paramref name="item6" />、<paramref name="item7" />、<paramref name="item8" />) 的 8-Tuple 或八重 (Octuple)。 </returns>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <param name="item6">Tuple 第 6 個元件的值。</param>
      <param name="item7">Tuple 第 7 個元件的值。</param>
      <param name="item8">Tuple 第 8 個元件的值。</param>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 第 5 個元件的型別。</typeparam>
      <typeparam name="T6">Tuple 第 6 個元件的型別。</typeparam>
      <typeparam name="T7">Tuple 第 7 個元件的型別。</typeparam>
      <typeparam name="T8">Tuple 第 8 個元件的型別。</typeparam>
    </member>
    <member name="T:System.Tuple`1">
      <summary>表示 1-Tuple 或單一 (Singleton)。</summary>
      <typeparam name="T1">Tuple 之唯一元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple`1.#ctor(`0)">
      <summary>初始化 <see cref="T:System.Tuple`1" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 之唯一元件的值。</param>
    </member>
    <member name="M:System.Tuple`1.Equals(System.Object)">
      <summary>傳回值，此值表示目前的 <see cref="T:System.Tuple`1" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於指定的物件則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Tuple`1.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`1" /> 物件的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="P:System.Tuple`1.Item1">
      <summary>取得 <see cref="T:System.Tuple`1" /> 物件之單一元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`1" /> 物件之單一元件的值。</returns>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`1" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="other" /> 在排序次序中的相對位置，如下表所示。值Description負值整數這個執行個體位於 <paramref name="other" /> 之前。零這個執行個體在排序次序中的位置和 <paramref name="other" /> 相同。正整數這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <param name="other">與目前執行個體相互比較的物件。</param>
      <param name="comparer">物件，提供自訂的比較規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`1" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，此值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`1" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於指定的物件則為 true，否則為 false。</returns>
      <param name="other">要與此執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用於評估兩個物件是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`1" /> 物件的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`1" /> 物件之雜湊程式碼的物件。</param>
    </member>
    <member name="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`1" /> 物件與指定的物件進行比較，並且傳回一個整數，指出目前物件在排序順序中，究竟在指定物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="obj" /> 在排序次序中的相對位置，如下表所示。值Description負值整數這個執行個體位於 <paramref name="obj" /> 之前。零這個執行個體在排序次序中的位置和 <paramref name="obj" /> 相同。正整數這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <param name="obj">與目前執行個體相互比較的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`1" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`1.ToString">
      <summary>傳回表示此 <see cref="T:System.Tuple`1" /> 執行個體之值的字串。</summary>
      <returns>此 <see cref="T:System.Tuple`1" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`2">
      <summary>表示 2-Tuple 或雙重 (Pair)。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple`2.#ctor(`0,`1)">
      <summary>初始化 <see cref="T:System.Tuple`2" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
    </member>
    <member name="M:System.Tuple`2.Equals(System.Object)">
      <summary>傳回值，此值表示目前的 <see cref="T:System.Tuple`2" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於指定的物件則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Tuple`2.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`2" /> 物件的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="P:System.Tuple`2.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`2" /> 物件之第 1 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`2" /> 物件之第 1 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`2.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`2" /> 物件之第 2 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`2" /> 物件之第 2 個元件的值。</returns>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`2" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="other" /> 在排序次序中的相對位置，如下表所示。值Description負值整數這個執行個體位於 <paramref name="other" /> 之前。零這個執行個體在排序次序中的位置和 <paramref name="other" /> 相同。正整數這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <param name="other">與目前執行個體相互比較的物件。</param>
      <param name="comparer">物件，提供自訂的比較規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`2" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，此值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`2" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於指定的物件則為 true，否則為 false。</returns>
      <param name="other">要與此執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用於評估兩個物件是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`2" /> 物件的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`2" /> 物件之雜湊程式碼的物件。</param>
    </member>
    <member name="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`2" /> 物件與指定的物件進行比較，並且傳回一個整數，指出目前物件在排序順序中，究竟在指定物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="obj" /> 在排序次序中的相對位置，如下表所示。值Description負值整數這個執行個體位於 <paramref name="obj" /> 之前。零這個執行個體在排序次序中的位置和 <paramref name="obj" /> 相同。正整數這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <param name="obj">與目前執行個體相互比較的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`2" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`2.ToString">
      <summary>傳回表示此 <see cref="T:System.Tuple`2" /> 執行個體之值的字串。</summary>
      <returns>此 <see cref="T:System.Tuple`2" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`3">
      <summary>表示 3-Tuple 或三重 (Triple)。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple`3.#ctor(`0,`1,`2)">
      <summary>初始化 <see cref="T:System.Tuple`3" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
    </member>
    <member name="M:System.Tuple`3.Equals(System.Object)">
      <summary>傳回值，此值表示目前的 <see cref="T:System.Tuple`3" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於指定的物件則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Tuple`3.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`3" /> 物件的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="P:System.Tuple`3.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`3" /> 物件之第一個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`3" /> 物件之第一個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`3.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`3" /> 物件之第二個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`3" /> 物件之第二個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`3.Item3">
      <summary>取得目前 <see cref="T:System.Tuple`3" /> 物件之第三個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`3" /> 物件之第三個元件的值。</returns>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`3" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="other" /> 在排序次序中的相對位置，如下表所示。值Description負值整數這個執行個體位於 <paramref name="other" /> 之前。零這個執行個體在排序次序中的位置和 <paramref name="other" /> 相同。正整數這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <param name="other">與目前執行個體相互比較的物件。</param>
      <param name="comparer">物件，提供自訂的比較規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`3" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，此值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`3" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於指定的物件則為 true，否則為 false。</returns>
      <param name="other">要與此執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用於評估兩個物件是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`3" /> 物件的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`3" /> 物件之雜湊程式碼的物件。</param>
    </member>
    <member name="M:System.Tuple`3.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`3" /> 物件與指定的物件進行比較，並且傳回一個整數，指出目前物件在排序順序中，究竟在指定物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="obj" /> 在排序次序中的相對位置，如下表所示。值Description負值整數這個執行個體位於 <paramref name="obj" /> 之前。零這個執行個體在排序次序中的位置和 <paramref name="obj" /> 相同。正整數這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <param name="obj">與目前執行個體相互比較的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`3" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`3.ToString">
      <summary>傳回表示此 <see cref="T:System.Tuple`3" /> 執行個體之值的字串。</summary>
      <returns>此 <see cref="T:System.Tuple`3" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`4">
      <summary>表示 4-Tuple 或四重 (Quadruple)。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple`4.#ctor(`0,`1,`2,`3)">
      <summary>初始化 <see cref="T:System.Tuple`4" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
    </member>
    <member name="M:System.Tuple`4.Equals(System.Object)">
      <summary>傳回值，此值表示目前的 <see cref="T:System.Tuple`4" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於指定的物件則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Tuple`4.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`4" /> 物件的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="P:System.Tuple`4.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`4" /> 物件之第 1 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`4" /> 物件之第 1 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`4" /> 物件之第 2 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`4" /> 物件之第 2 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item3">
      <summary>取得目前 <see cref="T:System.Tuple`4" /> 物件之第 3 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`4" /> 物件之第 3 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item4">
      <summary>取得目前 <see cref="T:System.Tuple`4" /> 物件之第 4 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`4" /> 物件之第 4 個元件的值。</returns>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`4" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="other" /> 在排序次序中的相對位置，如下表所示。值Description負值整數這個執行個體位於 <paramref name="other" /> 之前。零這個執行個體在排序次序中的位置和 <paramref name="other" /> 相同。正整數這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <param name="other">與目前執行個體相互比較的物件。</param>
      <param name="comparer">物件，提供自訂的比較規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`4" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，此值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`4" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於指定的物件則為 true，否則為 false。</returns>
      <param name="other">要與此執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用於評估兩個物件是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`4" /> 物件的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`4" /> 物件之雜湊程式碼的物件。</param>
    </member>
    <member name="M:System.Tuple`4.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`4" /> 物件與指定的物件進行比較，並且傳回一個整數，指出目前物件在排序順序中，究竟在指定物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="obj" /> 在排序次序中的相對位置，如下表所示。值Description負值整數這個執行個體位於 <paramref name="obj" /> 之前。零這個執行個體在排序次序中的位置和 <paramref name="obj" /> 相同。正整數這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <param name="obj">與目前執行個體相互比較的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`4" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`4.ToString">
      <summary>傳回表示此 <see cref="T:System.Tuple`4" /> 執行個體之值的字串。</summary>
      <returns>此 <see cref="T:System.Tuple`4" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`5">
      <summary>表示 5-Tuple 或五重 (Quintuple)。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 第 5 個元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
      <summary>初始化 <see cref="T:System.Tuple`5" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
    </member>
    <member name="M:System.Tuple`5.Equals(System.Object)">
      <summary>傳回值，此值表示目前的 <see cref="T:System.Tuple`5" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於指定的物件則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Tuple`5.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`5" /> 物件的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="P:System.Tuple`5.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`5" /> 物件之第 1 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`5" /> 物件之第 1 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`5" /> 物件之第 2 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`5" /> 物件之第 2 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item3">
      <summary>取得目前 <see cref="T:System.Tuple`5" /> 物件之第 3 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`5" /> 物件之第 3 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item4">
      <summary>取得目前 <see cref="T:System.Tuple`5" /> 物件之第 4 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`5" /> 物件之第 4 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item5">
      <summary>取得目前 <see cref="T:System.Tuple`5" /> 物件之第 5 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`5" /> 物件之第 5 個元件的值。</returns>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`5" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="other" /> 在排序次序中的相對位置，如下表所示。值Description負值整數這個執行個體位於 <paramref name="other" /> 之前。零這個執行個體在排序次序中的位置和 <paramref name="other" /> 相同。正整數這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <param name="other">與目前執行個體相互比較的物件。</param>
      <param name="comparer">物件，提供自訂的比較規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`5" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，此值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`5" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於指定的物件則為 true，否則為 false。</returns>
      <param name="other">要與此執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用於評估兩個物件是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`5" /> 物件的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`5" /> 物件之雜湊程式碼的物件。</param>
    </member>
    <member name="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`5" /> 物件與指定的物件進行比較，並且傳回一個整數，指出目前物件在排序順序中，究竟在指定物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="obj" /> 在排序次序中的相對位置，如下表所示。值Description負值整數這個執行個體位於 <paramref name="obj" /> 之前。零這個執行個體在排序次序中的位置和 <paramref name="obj" /> 相同。正整數這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <param name="obj">與目前執行個體相互比較的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`5" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`5.ToString">
      <summary>傳回表示此 <see cref="T:System.Tuple`5" /> 執行個體之值的字串。</summary>
      <returns>此 <see cref="T:System.Tuple`5" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`6">
      <summary>表示 6-Tuple 或六重 (Sextuple)。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 第 5 個元件的型別。</typeparam>
      <typeparam name="T6">Tuple 第 6 個元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
      <summary>初始化 <see cref="T:System.Tuple`6" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <param name="item6">Tuple 第 6 個元件的值。</param>
    </member>
    <member name="M:System.Tuple`6.Equals(System.Object)">
      <summary>傳回值，此值表示目前的 <see cref="T:System.Tuple`6" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於指定的物件則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Tuple`6.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`6" /> 物件的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="P:System.Tuple`6.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`6" /> 物件之第 1 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`6" /> 物件之第 1 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`6" /> 物件之第 2 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`6" /> 物件之第 2 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item3">
      <summary>取得目前 <see cref="T:System.Tuple`6" /> 物件之第 3 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`6" /> 物件之第 3 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item4">
      <summary>取得目前 <see cref="T:System.Tuple`6" /> 物件之第 4 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`6" /> 物件之第 4 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item5">
      <summary>取得目前 <see cref="T:System.Tuple`6" /> 物件之第 5 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`6" /> 物件之第 5 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item6">
      <summary>取得目前 <see cref="T:System.Tuple`6" /> 物件之第 6 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`6" /> 物件之第 6 個元件的值。</returns>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`6" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="other" /> 在排序次序中的相對位置，如下表所示。值Description負值整數這個執行個體位於 <paramref name="other" /> 之前。零這個執行個體在排序次序中的位置和 <paramref name="other" /> 相同。正整數這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <param name="other">與目前執行個體相互比較的物件。</param>
      <param name="comparer">物件，提供自訂的比較規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`6" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，此值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`6" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於指定的物件則為 true，否則為 false。</returns>
      <param name="other">要與此執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用於評估兩個物件是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`6" /> 物件的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`6" /> 物件之雜湊程式碼的物件。</param>
    </member>
    <member name="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`6" /> 物件與指定的物件進行比較，並且傳回一個整數，指出目前物件在排序順序中，究竟在指定物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="obj" /> 在排序次序中的相對位置，如下表所示。值Description負值整數這個執行個體位於 <paramref name="obj" /> 之前。零這個執行個體在排序次序中的位置和 <paramref name="obj" /> 相同。正整數這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <param name="obj">與目前執行個體相互比較的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`6" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`6.ToString">
      <summary>傳回表示此 <see cref="T:System.Tuple`6" /> 執行個體之值的字串。</summary>
      <returns>此 <see cref="T:System.Tuple`6" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`7">
      <summary>表示 7-Tuple 或七重 (Septuple)。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 第 5 個元件的型別。</typeparam>
      <typeparam name="T6">Tuple 第 6 個元件的型別。</typeparam>
      <typeparam name="T7">Tuple 第 7 個元件的型別。</typeparam>
    </member>
    <member name="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
      <summary>初始化 <see cref="T:System.Tuple`7" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <param name="item6">Tuple 第 6 個元件的值。</param>
      <param name="item7">Tuple 第 7 個元件的值。</param>
    </member>
    <member name="M:System.Tuple`7.Equals(System.Object)">
      <summary>傳回值，此值表示目前的 <see cref="T:System.Tuple`7" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於指定的物件則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Tuple`7.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Tuple`7" /> 物件的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="P:System.Tuple`7.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第 1 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第 1 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第 2 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第 2 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item3">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第 3 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第 3 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item4">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第 4 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第 4 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item5">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第 5 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第 5 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item6">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第 6 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第 6 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item7">
      <summary>取得目前 <see cref="T:System.Tuple`7" /> 物件之第 7 個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`7" /> 物件之第 7 個元件的值。</returns>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`7" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="other" /> 在排序次序中的相對位置，如下表所示。值Description負值整數這個執行個體位於 <paramref name="other" /> 之前。零這個執行個體在排序次序中的位置和 <paramref name="other" /> 相同。正整數這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <param name="other">與目前執行個體相互比較的物件。</param>
      <param name="comparer">物件，提供自訂的比較規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`7" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，此值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`7" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於指定的物件則為 true，否則為 false。</returns>
      <param name="other">要與此執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用於評估兩個物件是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`7" /> 物件的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`7" /> 物件之雜湊程式碼的物件。</param>
    </member>
    <member name="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`7" /> 物件與指定的物件進行比較，並且傳回一個整數，指出目前物件在排序順序中，究竟在指定物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="obj" /> 在排序次序中的相對位置，如下表所示。值Description負值整數這個執行個體位於 <paramref name="obj" /> 之前。零這個執行個體在排序次序中的位置和 <paramref name="obj" /> 相同。正整數這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <param name="obj">與目前執行個體相互比較的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`7" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`7.ToString">
      <summary>傳回表示此 <see cref="T:System.Tuple`7" /> 執行個體之值的字串。</summary>
      <returns>此 <see cref="T:System.Tuple`7" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Tuple`8">
      <summary>表示 n-Tuple，其中 n 等於或大於 8。</summary>
      <typeparam name="T1">Tuple 第 1 個元件的型別。</typeparam>
      <typeparam name="T2">Tuple 第 2 個元件的型別。</typeparam>
      <typeparam name="T3">Tuple 第 3 個元件的型別。</typeparam>
      <typeparam name="T4">Tuple 第 4 個元件的型別。</typeparam>
      <typeparam name="T5">Tuple 第 5 個元件的型別。</typeparam>
      <typeparam name="T6">Tuple 第 6 個元件的型別。</typeparam>
      <typeparam name="T7">Tuple 第 7 個元件的型別。</typeparam>
      <typeparam name="TRest">任何泛型 Tuple 物件，可定義 Tuple 其餘元件的類型。</typeparam>
    </member>
    <member name="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
      <summary>初始化 <see cref="T:System.Tuple`8" /> 類別的新執行個體。</summary>
      <param name="item1">Tuple 第 1 個元件的值。</param>
      <param name="item2">Tuple 第 2 個元件的值。</param>
      <param name="item3">Tuple 第 3 個元件的值。</param>
      <param name="item4">Tuple 第 4 個元件的值。</param>
      <param name="item5">Tuple 第 5 個元件的值。</param>
      <param name="item6">Tuple 第 6 個元件的值。</param>
      <param name="item7">Tuple 第 7 個元件的值。</param>
      <param name="rest">任何泛型 Tuple 物件，其中包含 Tuple 其餘元件的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rest" /> 不是泛型 Tuple 物件。</exception>
    </member>
    <member name="M:System.Tuple`8.Equals(System.Object)">
      <summary>傳回值，此值表示目前的 <see cref="T:System.Tuple`8" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於指定的物件則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Tuple`8.GetHashCode">
      <summary>計算目前 <see cref="T:System.Tuple`8" /> 物件的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="P:System.Tuple`8.Item1">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第一個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第一個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item2">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第二個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第二個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item3">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第三個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第三個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item4">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第四個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第四個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item5">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第五個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第五個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item6">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第六個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第六個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item7">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件之第七個元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件之第 7 個元件的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Rest">
      <summary>取得目前 <see cref="T:System.Tuple`8" /> 物件其餘元件的值。</summary>
      <returns>目前 <see cref="T:System.Tuple`8" /> 物件其餘元件的值。</returns>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比較子將目前的 <see cref="T:System.Tuple`8" /> 物件和指定的物件進行比較，並且傳回一個整數，表示目前的物件在排序順序中位於指定之物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="other" /> 在排序次序中的相對位置，如下表所示。值Description負值整數這個執行個體位於 <paramref name="other" /> 之前。零這個執行個體在排序次序中的位置和 <paramref name="other" /> 相同。正整數這個執行個體位於 <paramref name="other" /> 之後。</returns>
      <param name="other">與目前執行個體相互比較的物件。</param>
      <param name="comparer">物件，提供自訂的比較規則。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`8" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>傳回值，此值表示依據指定的比較方法，目前的 <see cref="T:System.Tuple`8" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前的執行個體等於指定的物件則為 true，否則為 false。</returns>
      <param name="other">要與此執行個體相互比較的物件。</param>
      <param name="comparer">物件，定義要用於評估兩個物件是否相等的方法。</param>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的計算方法，計算目前 <see cref="T:System.Tuple`8" /> 物件的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
      <param name="comparer">其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可以計算目前 <see cref="T:System.Tuple`8" /> 物件之雜湊程式碼的物件。</param>
    </member>
    <member name="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
      <summary>將目前的 <see cref="T:System.Tuple`8" /> 物件與指定的物件進行比較，並且傳回一個整數，指出目前物件在排序順序中，究竟在指定物件的前面、後面還是相同位置。</summary>
      <returns>帶正負號的整數，表示這個執行個體和 <paramref name="obj" /> 在排序次序中的相對位置，如下表所示。值Description負值整數這個執行個體位於 <paramref name="obj" /> 之前。零這個執行個體在排序次序中的位置和 <paramref name="obj" /> 相同。正整數這個執行個體位於 <paramref name="obj" /> 之後。</returns>
      <param name="obj">與目前執行個體相互比較的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`8" /> 物件。</exception>
    </member>
    <member name="M:System.Tuple`8.ToString">
      <summary>傳回表示此 <see cref="T:System.Tuple`8" /> 執行個體之值的字串。</summary>
      <returns>此 <see cref="T:System.Tuple`8" /> 物件的字串表示。</returns>
    </member>
    <member name="T:System.Type">
      <summary>表示型別宣告：類別型別、介面型別、陣列型別、值型別、列舉型別、型別參數、泛型型別定義，以及開放式或封閉式的建構泛型型別。</summary>
    </member>
    <member name="P:System.Type.Assembly">
      <summary>取得宣告此型別的 <see cref="T:System.Reflection.Assembly" />。若為泛型型別，則取得定義此泛型型別的 <see cref="T:System.Reflection.Assembly" />。</summary>
      <returns>
        <see cref="T:System.Reflection.Assembly" /> 執行個體，描述包含目前型別的組件。若為泛型型別，則此執行個體描述的是含有泛型型別定義的組件，而不是建立與使用特定建構型別的組件。</returns>
    </member>
    <member name="P:System.Type.AssemblyQualifiedName">
      <summary>取得 <see cref="T:System.Type" /> 的組件限定名稱，包含載入 <see cref="T:System.Type" /> 的組件名稱。</summary>
      <returns>
        <see cref="T:System.Type" /> 的組件限定名稱，包含載入 <see cref="T:System.Type" /> 的組件名稱，如果目前的執行個體表示泛型型別參數，則為 null。</returns>
    </member>
    <member name="P:System.Type.Attributes">
      <summary>取得與 <see cref="T:System.Type" /> 關聯的屬性。</summary>
      <returns>
        <see cref="T:System.Reflection.TypeAttributes" /> 物件，表示 <see cref="T:System.Type" /> 屬性集；但如果 <see cref="T:System.Type" /> 表示的是泛型型別參數，則此值就是未指定的。</returns>
    </member>
    <member name="P:System.Type.BaseType">
      <summary>取得目前 <see cref="T:System.Type" /> 所直接繼承的型別。</summary>
      <returns>由目前 <see cref="T:System.Type" /> 直接繼承的 <see cref="T:System.Type" />，如果目前 Type 表示 <see cref="T:System.Object" /> 類別或介面，則為 null。</returns>
    </member>
    <member name="P:System.Type.ContainsGenericParameters">
      <summary>取得值，指出目前的 <see cref="T:System.Type" /> 物件是否有尚未被指定型別取代的型別參數。</summary>
      <returns>如果 <see cref="T:System.Type" /> 物件本身為泛型型別參數或包含尚未提供特定型別的型別參數則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.DeclaringMethod">
      <summary>如果目前的 <see cref="T:System.Type" /> 表示泛型方法的型別參數，則取得表示宣告方法的 <see cref="T:System.Reflection.MethodBase" />。</summary>
      <returns>如果目前的 <see cref="T:System.Type" /> 表示泛型方法的型別參數，則為表示宣告方法的 <see cref="T:System.Reflection.MethodBase" />，否則為 null。</returns>
    </member>
    <member name="P:System.Type.DeclaringType">
      <summary>取得宣告目前巢狀型別或泛型型別參數的型別。</summary>
      <returns>若目前的型別是巢狀型別，即為表示封入型別的 <see cref="T:System.Type" /> 物件，若目前的型別是泛型型別的型別參數，則為泛型型別定義，而若目前的型別是泛型方法的型別參數，則為宣告泛型方法的型別，若以上皆否，便為 null。</returns>
    </member>
    <member name="P:System.Type.DefaultBinder">
      <summary>取得預設繫結器 (Binder) 的參考，它會實作內部規則來選取由 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 呼叫的適當成員。</summary>
      <returns>系統使用的預設繫結器之參考。</returns>
    </member>
    <member name="F:System.Type.Delimiter">
      <summary>分隔 <see cref="T:System.Type" /> 的命名空間中的名稱。此欄位為唯讀的。</summary>
    </member>
    <member name="F:System.Type.EmptyTypes">
      <summary>表示 <see cref="T:System.Type" /> 型別的空陣列。此欄位為唯讀的。</summary>
    </member>
    <member name="M:System.Type.Equals(System.Object)">
      <summary>判斷目前 <see cref="T:System.Type" /> 的基礎系統型別是否與指定的 <see cref="T:System.Object" /> 的基礎系統型別相同。</summary>
      <returns>如果 <paramref name="o" /> 的基礎系統型別與目前 <see cref="T:System.Type" /> 的基礎系統型別相同，則為 true，否則為 false。如果 <paramref name="o" /> 參數所指定的物件不是 Type，此方法也會傳回 false。</returns>
      <param name="o">將與目前 <see cref="T:System.Object" /> 的基礎系統型別比較的 <see cref="T:System.Type" /> 的基礎系統型別。</param>
    </member>
    <member name="M:System.Type.Equals(System.Type)">
      <summary>判斷目前 <see cref="T:System.Type" /> 的基礎系統型別是否與指定的 <see cref="T:System.Type" /> 的基礎系統型別相同。</summary>
      <returns>如果 <paramref name="o" /> 的基礎系統型別與目前 <see cref="T:System.Type" /> 的基礎系統型別相同，則為 true，否則為 false。</returns>
      <param name="o">將與目前 <see cref="T:System.Type" /> 的基礎系統型別比較的 <see cref="T:System.Type" /> 的基礎系統型別。</param>
    </member>
    <member name="F:System.Type.FilterNameIgnoreCase">
      <summary>表示用在名稱上的不區分大小寫的成員篩選條件。此欄位為唯讀的。</summary>
    </member>
    <member name="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)">
      <summary>傳回指定成員型別的 <see cref="T:System.Reflection.MemberInfo" /> 物件的篩選陣列。</summary>
      <returns>指定之成員型別的 <see cref="T:System.Reflection.MemberInfo" /> 物件篩選陣列。-或-如果目前 <see cref="T:System.Type" /> 沒有符合篩選條件的 <paramref name="memberType" /> 型別的成員，則為 <see cref="T:System.Reflection.MemberInfo" /> 型別的空陣列。</returns>
      <param name="memberType">MemberTypes 物件，指出要搜尋的成員型別。</param>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
      <param name="filter">執行比較的委派，如果目前進行檢查的成員符合 <paramref name="filterCriteria" />，則傳回 true，否則傳回 false。您可以使用此類別所提供的 FilterAttribute、FilterName 和 FilterNameIgnoreCase 委派。第一個委派使用 FieldAttributes、MethodAttributes 和 MethodImplAttributes 的欄位做為搜尋準則，而其他兩個委派則使用 String 物件做為搜尋準則。</param>
      <param name="filterCriteria">判斷在 MemberInfo 物件的陣列中是否傳回成員的搜尋準則。FieldAttributes、MethodAttributes 和 MethodImplAttributes 的欄位可以與這個類別提供的 FilterAttribute 委派搭配使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> 為 null。</exception>
    </member>
    <member name="P:System.Type.FullName">
      <summary>取得 <see cref="T:System.Type" /> 的完整限定名稱，包含 <see cref="T:System.Type" /> 的命名空間，但不含組件。</summary>
      <returns>
        <see cref="T:System.Type" /> 的完整名稱 (包括 <see cref="T:System.Type" /> 的命名空間而非組件)，如果目前執行個體表示泛型型別參數、陣列型別、指標型別或根據型別參數的 byref 型別，或不是泛型型別定義但包含無法解析型別參數的泛型型別，則為 null。</returns>
    </member>
    <member name="P:System.Type.GenericParameterAttributes">
      <summary>取得一組 <see cref="T:System.Reflection.GenericParameterAttributes" /> 旗標，描述目前泛型型別參數的變異係數與特殊條件約束。</summary>
      <returns>
        <see cref="T:System.Reflection.GenericParameterAttributes" /> 值的位元組合，描述目前泛型型別參數的共變數與特殊條件約束。</returns>
      <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Type" /> 物件不是泛型型別參數。也就是，<see cref="P:System.Type.IsGenericParameter" /> 屬性會傳回 false。</exception>
      <exception cref="T:System.NotSupportedException">基底類別中不支援叫用的方法。</exception>
    </member>
    <member name="P:System.Type.GenericParameterPosition">
      <summary>當 <see cref="T:System.Type" /> 物件表示泛型型別或泛型方法的型別參數時，在宣告參數的泛型型別或泛型方法之型別參數清單中，取得型別參數的位置。</summary>
      <returns>型別參數在宣告參數的泛型型別或方法之型別參數清單中的位置。位置編號從 0 開始。</returns>
      <exception cref="T:System.InvalidOperationException">目前型別不表示型別參數。也就是，<see cref="P:System.Type.IsGenericParameter" /> 會傳回 false。</exception>
    </member>
    <member name="P:System.Type.GenericTypeArguments">
      <summary>取得這個型別的泛型型別引數的陣列。</summary>
      <returns>這個型別的泛型型別引數的陣列。</returns>
    </member>
    <member name="M:System.Type.GetArrayRank">
      <summary>取得 <see cref="T:System.Array" /> 中的維度數目。</summary>
      <returns>
        <see cref="T:System.Int32" />，包含目前 Type 中的維度數目。</returns>
      <exception cref="T:System.NotSupportedException">在基底類別中不支援這個方法的功能，必須在衍生類別中實作才行。</exception>
      <exception cref="T:System.ArgumentException">目前的 Type 不是陣列。</exception>
    </member>
    <member name="M:System.Type.GetAttributeFlagsImpl">
      <summary>在衍生類別中覆寫時，實作 <see cref="P:System.Type.Attributes" /> 屬性並取得位元遮罩，指出與 <see cref="T:System.Type" /> 關聯的屬性。</summary>
      <returns>
        <see cref="T:System.Reflection.TypeAttributes" /> 物件，表示 <see cref="T:System.Type" /> 的屬性集。</returns>
    </member>
    <member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>使用指定的繫結條件約束 (Constraint) 搜尋其參數符合指定的引數型別和修飾詞 (Modifier) 的建構函式。</summary>
      <returns>
        <see cref="T:System.Reflection.ConstructorInfo" /> 物件，表示符合指定之需求的建構函式 (如果找到的話)，否則為 null。</returns>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
      <param name="binder">
        <see cref="T:System.Reflection.Binder" /> 物件，定義一組屬性並啟用繫結，可包含多載方法的選擇、引數型別的強制型轉，以及透過反映的成員引動過程。-或-Null 參考 (在 Visual Basic 中為 Nothing)，表示使用 <see cref="P:System.Type.DefaultBinder" />。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，表示所要取得之建構函式的參數數目、順序和型別。-或-<see cref="T:System.Type" /> 型別的空陣列 (也就是，Type[] types = new Type[0])，表示取得沒有參數的建構函式。-或-<see cref="F:System.Type.EmptyTypes" />. </param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，表示在參數型別陣列中與對應項目產生關聯的屬性。預設的繫結器不會處理此參數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> 為 null。-或-在 <paramref name="types" /> 中的其中一個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 為多維。-或-<paramref name="modifiers" /> 為多維。-或-<paramref name="types" /> 和 <paramref name="modifiers" /> 的長度不相同。</exception>
    </member>
    <member name="M:System.Type.GetConstructor(System.Type[])">
      <summary>搜尋其參數符合在指定陣列中的型別的公用執行個體建構函式。</summary>
      <returns>
        <see cref="T:System.Reflection.ConstructorInfo" /> 物件，表示其參數符合參數型別陣列中之型別的公用執行個體建構函式 (如果找到的話)，否則為 null。</returns>
      <param name="types">由 <see cref="T:System.Type" /> 物件組成的陣列，表示所要建構函式參數的數目、順序和型別。-或-由 <see cref="T:System.Type" /> 物件組成的空陣列，用來取得不需任何參數的建構函式。這種空陣列是由 static 欄位 <see cref="F:System.Type.EmptyTypes" /> 提供的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> 為 null。-或-在 <paramref name="types" /> 中的其中一個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 為多維。</exception>
    </member>
    <member name="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束和指定的呼叫慣例，搜尋其參數符合指定的引數型別和修飾詞的建構函式。</summary>
      <returns>
        <see cref="T:System.Reflection.ConstructorInfo" /> 物件，表示符合指定之需求的建構函式 (如果找到的話)，否則為 null。</returns>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
      <param name="binder">
        <see cref="T:System.Reflection.Binder" /> 物件，定義一組屬性並啟用繫結，可包含多載方法的選擇、引數型別的強制型轉，以及透過反映的成員引動過程。-或-Null 參考 (在 Visual Basic 中為 Nothing)，表示使用 <see cref="P:System.Type.DefaultBinder" />。</param>
      <param name="callConvention">
        <see cref="T:System.Reflection.CallingConventions" /> 物件，其指定一組所要使用的規則，而這些規則是關於引數的順序和配置、如何傳遞傳回值、引數使用哪些 register 以及清除堆疊。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，表示所要取得之建構函式的參數數目、順序和型別。-或-<see cref="T:System.Type" /> 型別的空陣列 (也就是，Type[] types = new Type[0])，表示取得沒有參數的建構函式。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，表示在 <paramref name="types" /> 陣列中與對應項目產生關聯的屬性。預設的繫結器不會處理此參數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> 為 null。-或-在 <paramref name="types" /> 中的其中一個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 為多維。-或-<paramref name="modifiers" /> 為多維。-或-<paramref name="types" /> 和 <paramref name="modifiers" /> 的長度不相同。</exception>
      <exception cref="T:System.NotSupportedException">目前的型別是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 或 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。</exception>
    </member>
    <member name="M:System.Type.GetConstructors">
      <summary>傳回所有定義給目前 <see cref="T:System.Type" /> 的 public 建構函式。</summary>
      <returns>由 <see cref="T:System.Reflection.ConstructorInfo" /> 物件組成的陣列，表示定義給目前 <see cref="T:System.Type" /> 的所有公用執行個體建構函式，但不含型別初始設定式 (靜態建構函式)。如果目前的 <see cref="T:System.Type" /> 沒有定義任何公用執行個體建構函式，或目前的 <see cref="T:System.Type" /> 表示泛型型別或泛型方法定義中的型別參數，則會傳回 <see cref="T:System.Reflection.ConstructorInfo" /> 型別的空陣列。</returns>
    </member>
    <member name="M:System.Type.GetConstructors(System.Reflection.BindingFlags)">
      <summary>在衍生類別中覆寫時，使用指定的 BindingFlags，搜尋定義給目前 <see cref="T:System.Type" /> 的建構函式。</summary>
      <returns>
        <see cref="T:System.Reflection.ConstructorInfo" /> 物件的陣列，表示定義給目前 <see cref="T:System.Type" /> 的所有建構函式皆符合指定的繫結條件約束，包含型別初始設定式 (如果有定義的話)。如果目前的 <see cref="T:System.Type" /> 沒有定義建構函式，或所定義的建構函式都不符合繫結條件約束，或目前的 <see cref="T:System.Type" /> 表示泛型型別或泛型方法定義中的型別參數，則傳回 <see cref="T:System.Reflection.ConstructorInfo" /> 型別的空陣列。</returns>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
    </member>
    <member name="M:System.Type.GetDefaultMembers">
      <summary>搜尋定義給目前 <see cref="T:System.Type" /> 的成員，而它的 <see cref="T:System.Reflection.DefaultMemberAttribute" /> 已設定。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，表示目前 <see cref="T:System.Type" /> 的所有預設成員。-或-如果目前 <see cref="T:System.Type" /> 並沒有預設成員，則為 <see cref="T:System.Reflection.MemberInfo" /> 的空陣列。</returns>
    </member>
    <member name="M:System.Type.GetElementType">
      <summary>在衍生類別中覆寫時，傳回由目前陣列、指標或參考型別所包含或參考物件的 <see cref="T:System.Type" />。</summary>
      <returns>目前的陣列、指標或參考型別所內含或參考之物件的 <see cref="T:System.Type" />，如果目前的 <see cref="T:System.Type" /> 不是陣列或指標、未以傳址方式傳遞，或表示泛型型別或泛型方法定義中之型別參數，則為 null。</returns>
    </member>
    <member name="M:System.Type.GetEvent(System.String)">
      <summary>傳回表示指定公用事件的 <see cref="T:System.Reflection.EventInfo" /> 物件。</summary>
      <returns>
        <see cref="T:System.Reflection.EventInfo" /> 物件，表示由目前 <see cref="T:System.Type" /> 所宣告或繼承的指定的公用事件 (如果找到的話)，否則為 null。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含由目前 <see cref="T:System.Type" /> 所宣告或繼承的事件的名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
    </member>
    <member name="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束，傳回表示指定事件的 <see cref="T:System.Reflection.EventInfo" /> 物件。</summary>
      <returns>
        <see cref="T:System.Reflection.EventInfo" /> 物件，表示由目前 <see cref="T:System.Type" /> 所宣告或繼承的指定事件 (如果找到的話)，否則為 null。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含由目前 <see cref="T:System.Type" /> 所宣告或繼承的事件的名稱。</param>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
    </member>
    <member name="M:System.Type.GetEvents">
      <summary>取得由目前 <see cref="T:System.Type" /> 所宣告或繼承的所有 public 事件。</summary>
      <returns>
        <see cref="T:System.Reflection.EventInfo" /> 物件的陣列，表示目前 <see cref="T:System.Type" /> 所宣告或繼承的所有公用事件。-或-如果目前 <see cref="T:System.Type" /> 沒有公用事件，則為 <see cref="T:System.Reflection.EventInfo" /> 型別的空陣列。</returns>
    </member>
    <member name="M:System.Type.GetEvents(System.Reflection.BindingFlags)">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束，搜尋由目前 <see cref="T:System.Type" /> 所宣告或繼承的事件。</summary>
      <returns>
        <see cref="T:System.Reflection.EventInfo" /> 物件的陣列，表示由目前 <see cref="T:System.Type" /> 所宣告或繼承的所有事件皆符合指定的繫結條件約束。-或-如果目前 <see cref="T:System.Type" /> 沒有事件，或沒有事件符合繫結條件約束，則為 <see cref="T:System.Reflection.EventInfo" /> 型別的空陣列。</returns>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
    </member>
    <member name="M:System.Type.GetField(System.String)">
      <summary>搜尋具有指定名稱的公用欄位。</summary>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 物件，表示具有指定之名稱的公用欄位 (如果找到的話)，否則為 null。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的資料欄位的名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">此 <see cref="T:System.Type" /> 物件為尚未呼叫 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法的<see cref="T:System.Reflection.Emit.TypeBuilder" />。</exception>
    </member>
    <member name="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>使用指定的繫結條件約束搜尋指定的欄位。</summary>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 物件，表示符合指定之需求的欄位 (如果找到的話)，否則為 null。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的資料欄位的名稱。</param>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
    </member>
    <member name="M:System.Type.GetFields">
      <summary>傳回目前 <see cref="T:System.Type" /> 的所有 public 欄位。</summary>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 物件的陣列，表示定義給目前 <see cref="T:System.Type" /> 的所有公用欄位。-或-如果沒有任何公用欄位定義給目前 <see cref="T:System.Type" />，則為 <see cref="T:System.Reflection.FieldInfo" /> 型別的空陣列。</returns>
    </member>
    <member name="M:System.Type.GetFields(System.Reflection.BindingFlags)">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束，搜尋定義給目前 <see cref="T:System.Type" /> 的欄位。</summary>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 物件的陣列，表示定義給目前 <see cref="T:System.Type" /> 的所有欄位皆符合指定的繫結條件約束。-或-如果沒有任何欄位定義給目前 <see cref="T:System.Type" />，或沒有已定義的欄位符合繫結條件約束，則為 <see cref="T:System.Reflection.FieldInfo" /> 型別的空陣列。</returns>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
    </member>
    <member name="M:System.Type.GetGenericArguments">
      <summary>傳回由 <see cref="T:System.Type" /> 物件組成的陣列，這些物件表示泛型型別的型別引數，或泛型型別定義的型別參數。</summary>
      <returns>由 <see cref="T:System.Type" /> 物件組成的陣列，代表泛型型別的型別引數。如果目前的型別不是泛型型別，則傳回空的陣列。</returns>
      <exception cref="T:System.NotSupportedException">基底類別中不支援叫用的方法。衍生類別 (Derived Class) 必須提供實作。</exception>
    </member>
    <member name="M:System.Type.GetGenericParameterConstraints">
      <summary>傳回由 <see cref="T:System.Type" /> 物件組成的陣列，這些物件表示對目前泛型型別參數所設下的條件約束。</summary>
      <returns>由 <see cref="T:System.Type" /> 物件組成的陣列，這些物件代表對目前泛型型別參數所設下的條件約束。</returns>
      <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Type" /> 物件不是泛型型別參數。也就是，<see cref="P:System.Type.IsGenericParameter" /> 屬性會傳回 false。</exception>
    </member>
    <member name="M:System.Type.GetGenericTypeDefinition">
      <summary>傳回表示泛型型別定義的 <see cref="T:System.Type" /> 物件，利用此泛型型別定義就可以建構出目前的泛型型別。</summary>
      <returns>代表泛型型別的 <see cref="T:System.Type" /> 物件，利用此泛型型別就可以建構出目前的型別。</returns>
      <exception cref="T:System.InvalidOperationException">目前的型別不是泛型型別。也就是，<see cref="P:System.Type.IsGenericType" /> 會傳回 false。</exception>
      <exception cref="T:System.NotSupportedException">基底類別中不支援叫用的方法。衍生類別 (Derived Class) 必須提供實作。</exception>
    </member>
    <member name="M:System.Type.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>
        <see cref="T:System.Int32" />，包含這個執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Type.GetInterface(System.String,System.Boolean)">
      <summary>在衍生類別中覆寫時，指定是否針對介面名稱以不區分大小寫的方式來搜尋指定的介面。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示具有指定之名稱的介面，由目前 <see cref="T:System.Type" /> 所實作或繼承 (如果找到的話)，否則為 null。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的介面名稱。若為泛型介面，則為 mangled 名稱。</param>
      <param name="ignoreCase">true 表示忽略 <paramref name="name" /> 中指定簡單介面名稱部分的大小寫 (指定命名空間的部分必須使用正確的大小寫)。-或-false 表示針對 <paramref name="name" /> 的所有部分執行區分大小寫的搜尋。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">目前的 <see cref="T:System.Type" /> 代表的型別有實作出相同的泛型介面，但型別引數不同。</exception>
    </member>
    <member name="M:System.Type.GetInterfaceMap(System.Type)">
      <summary>傳回指定介面型別的介面對應。</summary>
      <returns>
        <see cref="T:System.Reflection.InterfaceMapping" /> 物件，表示 <paramref name="interfaceType" /> 的介面對應。</returns>
      <param name="interfaceType">要擷取對應的介面的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="interfaceType" /> 參數不會參考介面。-或-<paramref name="interfaceType" /> 是泛型介面，目前的型別是陣列型別。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="interfaceType" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Type" /> 表示泛型型別參數，也就是說，<see cref="P:System.Type.IsGenericParameter" /> 為 true。</exception>
      <exception cref="T:System.NotSupportedException">基底類別中不支援叫用的方法。衍生類別 (Derived Class) 必須提供實作。</exception>
    </member>
    <member name="M:System.Type.GetInterfaces">
      <summary>在衍生類別中覆寫時，取得由目前 <see cref="T:System.Type" /> 所實作或繼承的所有介面。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件的陣列，表示由目前 <see cref="T:System.Type" /> 所實作或繼承的所有介面。-或-如果沒有任何介面是由目前 <see cref="T:System.Type" /> 所實作或繼承，則為 <see cref="T:System.Type" /> 型別的空陣列。</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用靜態初始設定式並擲回例外狀況。</exception>
    </member>
    <member name="M:System.Type.GetMember(System.String)">
      <summary>搜尋具有指定名稱的公用成員。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，表示具有指定之名稱的公用成員 (如果找到的話)，否則為空陣列。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的公用成員名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>使用指定的繫結條件約束搜尋指定的成員。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，表示具有指定之名稱的公用成員 (如果找到的話)，否則為空陣列。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的成員名稱。</param>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，表示傳回空陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>使用指定的繫結條件約束，搜尋指定成員型別的指定成員。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，表示具有指定之名稱的公用成員 (如果找到的話)，否則為空陣列。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的成員名稱。</param>
      <param name="type">要進行搜尋的 <see cref="T:System.Reflection.MemberTypes" /> 值。</param>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，表示傳回空陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">衍生類別必須提供實作。</exception>
    </member>
    <member name="M:System.Type.GetMembers">
      <summary>傳回目前 <see cref="T:System.Type" /> 的所有 public 成員。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，表示目前 <see cref="T:System.Type" /> 的所有公用成員。-或-如果目前 <see cref="T:System.Type" /> 沒有公用成員，則為 <see cref="T:System.Reflection.MemberInfo" /> 型別的空陣列。</returns>
    </member>
    <member name="M:System.Type.GetMembers(System.Reflection.BindingFlags)">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束，搜尋定義給目前 <see cref="T:System.Type" /> 的成員。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，表示定義給目前 <see cref="T:System.Type" /> 的所有成員皆符合指定的繫結條件約束。-或-如果沒有任何成員定義給目前 <see cref="T:System.Type" />，或沒有已定義的成員符合繫結條件約束，則為 <see cref="T:System.Reflection.MemberInfo" /> 型別的空陣列。</returns>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
    </member>
    <member name="M:System.Type.GetMethod(System.String)">
      <summary>搜尋具有指定名稱的公用方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件，表示具有指定之名稱的公用方法 (如果找到的話)，否則為 null。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的公用方法名稱。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>使用指定的繫結條件約束搜尋指定的方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件，表示符合指定之需求的方法 (如果找到的話)，否則為 null。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的方法名稱。</param>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱並符合指定繫結條件約束的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>使用指定的繫結條件約束和指定的呼叫慣例，來搜尋指定的方法，而該方法的參數符合指定的引數型別和修飾詞。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件，表示符合指定之需求的方法 (如果找到的話)，否則為 null。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的方法名稱。</param>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
      <param name="binder">
        <see cref="T:System.Reflection.Binder" /> 物件，定義一組屬性並啟用繫結，可包含多載方法的選擇、引數型別的強制型轉，以及透過反映的成員引動過程。-或-Null 參考 (在 Visual Basic 中為 Nothing)，表示使用 <see cref="P:System.Type.DefaultBinder" />。</param>
      <param name="callConvention">
        <see cref="T:System.Reflection.CallingConventions" /> 物件，針對引數的順序和配置、如何傳遞傳回值、引數使用哪些暫存器以及如何清除堆疊，指定一組所要使用的規則。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，表示所要取得之方法的參數數目、順序和型別。-或-<see cref="T:System.Type" /> 物件的空陣列 (由 <see cref="F:System.Type.EmptyTypes" /> 欄位提供)，用來取得沒有參數的方法。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，表示與 <paramref name="types" /> 陣列中對應的項目相關聯的屬性。只用於透過 COM Interop 進行呼叫以及只處理以傳址方式傳遞的參數。預設的繫結器不會處理此參數。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱並符合指定繫結條件約束的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。-或-<paramref name="types" /> 為 null。-或-在 <paramref name="types" /> 中的其中一個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 為多維。-或-<paramref name="modifiers" /> 為多維。</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>使用指定的繫結條件約束搜尋指定的方法，而該方法的參數符合指定的引數型別和修飾詞。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件，表示符合指定之需求的方法 (如果找到的話)，否則為 null。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的方法名稱。</param>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
      <param name="binder">
        <see cref="T:System.Reflection.Binder" /> 物件，定義一組屬性並啟用繫結，可包含多載方法的選擇、引數型別的強制型轉，以及透過反映的成員引動過程。-或-Null 參考 (在 Visual Basic 中為 Nothing)，表示使用 <see cref="P:System.Type.DefaultBinder" />。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，表示所要取得之方法的參數數目、順序和型別。-或-<see cref="T:System.Type" /> 物件的空陣列 (由 <see cref="F:System.Type.EmptyTypes" /> 欄位提供)，用來取得沒有參數的方法。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，表示與 <paramref name="types" /> 陣列中對應的項目相關聯的屬性。只用於透過 COM Interop 進行呼叫以及只處理以傳址方式傳遞的參數。預設的繫結器不會處理此參數。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱並符合指定繫結條件約束的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。-或-<paramref name="types" /> 為 null。-或-在 <paramref name="types" /> 中的其中一個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 為多維。-或-<paramref name="modifiers" /> 為多維。</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[])">
      <summary>搜尋指定的公用方法，其參數符合指定的引數型別。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件，表示公用方法，其參數符合指定的引數型別 (如果找到的話)，否則為 null。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的公用方法名稱。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，表示所要取得之方法的參數數目、順序和型別。-或-<see cref="T:System.Type" /> 物件的空陣列 (由 <see cref="F:System.Type.EmptyTypes" /> 欄位提供)，用來取得沒有參數的方法。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定的名稱和參數的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。-或-<paramref name="types" /> 為 null。-或-在 <paramref name="types" /> 中的其中一個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 為多維。</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>搜尋指定的公用方法，其參數符合指定的引數型別和修飾詞。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件，表示符合指定之需求的公用方法 (如果找到的話)，否則為 null。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的公用方法名稱。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，表示所要取得之方法的參數數目、順序和型別。-或-<see cref="T:System.Type" /> 物件的空陣列 (由 <see cref="F:System.Type.EmptyTypes" /> 欄位提供)，用來取得沒有參數的方法。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，表示與 <paramref name="types" /> 陣列中對應的項目相關聯的屬性。只用於透過 COM Interop 進行呼叫以及只處理以傳址方式傳遞的參數。預設的繫結器不會處理此參數。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定的名稱和參數的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。-或-<paramref name="types" /> 為 null。-或-在 <paramref name="types" /> 中的其中一個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 為多維。-或-<paramref name="modifiers" /> 為多維。</exception>
    </member>
    <member name="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束和指定的呼叫慣例搜尋指定的方法，而該方法的參數符合指定的引數型別和修飾詞。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件，表示符合指定之需求的方法 (如果找到的話)，否則為 null。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的方法名稱。</param>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
      <param name="binder">
        <see cref="T:System.Reflection.Binder" /> 物件，定義一組屬性並啟用繫結，可包含多載方法的選擇、引數型別的強制型轉，以及透過反映的成員引動過程。-或-Null 參考 (在 Visual Basic 中為 Nothing)，表示使用 <see cref="P:System.Type.DefaultBinder" />。</param>
      <param name="callConvention">
        <see cref="T:System.Reflection.CallingConventions" /> 物件，針對引數的順序和配置、如何傳遞傳回值、引數使用哪些暫存器以及哪一個處理序清除堆疊，指定一組所要使用的規則。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，表示所要取得之方法的參數數目、順序和型別。-或-<see cref="T:System.Type" /> 型別的空陣列 (也就是，Type[] types = new Type[0])，表示取得沒有參數的方法。-或-Null 參考 (在 Visual Basic 中為 Nothing)。如果 <paramref name="types" /> 為 null，則引數不相符。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，表示與 <paramref name="types" /> 陣列中對應的項目相關聯的屬性。預設的繫結器不會處理此參數。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱並符合指定繫結條件約束的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 為多維。-或-<paramref name="modifiers" /> 為多維。-或-<paramref name="types" /> 和 <paramref name="modifiers" /> 的長度不相同。</exception>
      <exception cref="T:System.NotSupportedException">目前的型別是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 或 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。</exception>
    </member>
    <member name="M:System.Type.GetMethods">
      <summary>傳回目前 <see cref="T:System.Type" /> 的所有 public 方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件的陣列，表示定義給目前 <see cref="T:System.Type" /> 的所有公用方法。-或-如果沒有任何公用方法定義給目前 <see cref="T:System.Reflection.MethodInfo" />，則為 <see cref="T:System.Type" /> 型別的空陣列。</returns>
    </member>
    <member name="M:System.Type.GetMethods(System.Reflection.BindingFlags)">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束，搜尋定義給目前 <see cref="T:System.Type" /> 的方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件的陣列，表示目前 <see cref="T:System.Type" /> 已定義符合指定之繫結條件約束的所有方法。-或-如果沒有任何方法定義給目前 <see cref="T:System.Type" />，或已定義的方法都不符合繫結條件約束，則為 <see cref="T:System.Reflection.MethodInfo" /> 型別的空陣列。</returns>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
    </member>
    <member name="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束搜尋指定的巢狀型別。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示符合指定之需求的巢狀型別 (如果找到的話)，否則為 null。</returns>
      <param name="name">包含要取得之巢狀型別名稱的字串。</param>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
    </member>
    <member name="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束，搜尋在目前 <see cref="T:System.Type" /> 內形成巢狀的型別。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件的陣列，表示目前 <see cref="T:System.Type" /> 中符合指定繫結條件約束的所有巢狀型別 (搜尋不是遞迴的)，如果沒有符合繫結條件約束的巢狀型別，則為型別 <see cref="T:System.Type" /> 的空陣列。</returns>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
    </member>
    <member name="M:System.Type.GetProperties">
      <summary>傳回目前 <see cref="T:System.Type" /> 的所有 public 屬性。</summary>
      <returns>
        <see cref="T:System.Reflection.PropertyInfo" /> 物件的陣列，表示目前 <see cref="T:System.Type" /> 的所有公用屬性。-或-如果目前 <see cref="T:System.Type" /> 沒有公用屬性，則為 <see cref="T:System.Reflection.PropertyInfo" /> 型別的空陣列。</returns>
    </member>
    <member name="M:System.Type.GetProperties(System.Reflection.BindingFlags)">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束，搜尋目前 <see cref="T:System.Type" /> 的屬性。</summary>
      <returns>
        <see cref="T:System.Reflection.PropertyInfo" /> 物件的陣列，表示目前 <see cref="T:System.Type" /> 中符合指定的繫結條件約束的所有屬性。-或-如果目前 <see cref="T:System.Type" /> 沒有屬性，或沒有屬性符合繫結條件約束，則為 <see cref="T:System.Reflection.PropertyInfo" /> 型別的空陣列。</returns>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
    </member>
    <member name="M:System.Type.GetProperty(System.String)">
      <summary>搜尋具有指定名稱的公用屬性。</summary>
      <returns>
        <see cref="T:System.Reflection.PropertyInfo" /> 物件，表示具有指定之名稱的公用屬性 (如果找到的話)，否則為 null。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的公用屬性名稱。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱的屬性。請參閱「備註」。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>使用指定的繫結條件約束搜尋指定的屬性。</summary>
      <returns>
        <see cref="T:System.Reflection.PropertyInfo" /> 物件，表示符合指定之需求的屬性 (如果找到的話)，否則為 null。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的屬性名稱。</param>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱並符合指定繫結條件約束的屬性。請參閱「備註」。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>使用指定的繫結條件約束搜尋指定的屬性，而該屬性的參數符合指定的引數型別和修飾詞。</summary>
      <returns>
        <see cref="T:System.Reflection.PropertyInfo" /> 物件，表示符合指定之需求的屬性 (如果找到的話)，否則為 null。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的屬性名稱。</param>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
      <param name="binder">
        <see cref="T:System.Reflection.Binder" /> 物件，定義一組屬性並啟用繫結，可包含多載方法的選擇、引數型別的強制型轉，以及透過反映的成員引動過程。-或-Null 參考 (在 Visual Basic 中為 Nothing)，表示使用 <see cref="P:System.Type.DefaultBinder" />。</param>
      <param name="returnType">屬性的傳回型別。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，表示所要取得之索引屬性的參數數目、順序和型別。-或-<see cref="T:System.Type" /> 型別的空陣列 (也就是，Type[] types = new Type[0])，取得未編索引的屬性。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，表示與 <paramref name="types" /> 陣列中對應的項目相關聯的屬性。預設的繫結器不會處理此參數。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱並符合指定繫結條件約束的屬性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。-或-<paramref name="types" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 為多維。-或-<paramref name="modifiers" /> 為多維。-或-<paramref name="types" /> 和 <paramref name="modifiers" /> 的長度不相同。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="types" /> 的一個項目是 null。</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type)">
      <summary>搜尋具有指定名稱和傳回型別的公用屬性。</summary>
      <returns>
        <see cref="T:System.Reflection.PropertyInfo" /> 物件，表示具有指定之名稱的公用屬性 (如果找到的話)，否則為 null。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的公用屬性名稱。</param>
      <param name="returnType">屬性的傳回型別。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱的屬性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null，或 <paramref name="returnType" /> 為 null。</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[])">
      <summary>搜尋指定的公用屬性，其參數符合指定的引數型別。</summary>
      <returns>
        <see cref="T:System.Reflection.PropertyInfo" /> 物件，表示公用屬性，其參數符合指定的引數型別 (如果找到的話)，否則為 null。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的公用屬性名稱。</param>
      <param name="returnType">屬性的傳回型別。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，表示所要取得之索引屬性的參數數目、順序和型別。-或-<see cref="T:System.Type" /> 型別的空陣列 (也就是，Type[] types = new Type[0])，取得未編索引的屬性。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱並符合指定引數型別的屬性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。-或-<paramref name="types" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 為多維。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="types" /> 的一個項目是 null。</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>搜尋指定的公用屬性，其參數符合指定的引數型別和修飾詞。</summary>
      <returns>
        <see cref="T:System.Reflection.PropertyInfo" /> 物件，表示符合指定之需求的公用屬性 (如果找到的話)，否則為 null。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的公用屬性名稱。</param>
      <param name="returnType">屬性的傳回型別。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，表示所要取得之索引屬性的參數數目、順序和型別。-或-<see cref="T:System.Type" /> 型別的空陣列 (也就是，Type[] types = new Type[0])，取得未編索引的屬性。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，表示與 <paramref name="types" /> 陣列中對應的項目相關聯的屬性。預設的繫結器不會處理此參數。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱並符合指定引數型別和修飾詞的屬性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。-或-<paramref name="types" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 為多維。-或-<paramref name="modifiers" /> 為多維。-或-<paramref name="types" /> 和 <paramref name="modifiers" /> 的長度不相同。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="types" /> 的一個項目是 null。</exception>
    </member>
    <member name="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束搜尋指定的屬性，而該屬性的參數符合指定的引數型別和修飾詞的建構函式。</summary>
      <returns>
        <see cref="T:System.Reflection.PropertyInfo" /> 物件，表示符合指定之需求的屬性 (如果找到的話)，否則為 null。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要取得的屬性名稱。</param>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。-或-零，傳回 null。</param>
      <param name="binder">
        <see cref="T:System.Reflection.Binder" /> 物件，定義一組屬性並啟用繫結，可包含多載方法的選擇、引數型別的強制型轉，以及透過反映的成員引動過程。-或-Null 參考 (在 Visual Basic 中為 Nothing)，表示使用 <see cref="P:System.Type.DefaultBinder" />。</param>
      <param name="returnType">屬性的傳回型別。</param>
      <param name="types">
        <see cref="T:System.Type" /> 物件的陣列，表示所要取得之索引屬性的參數數目、順序和型別。-或-<see cref="T:System.Type" /> 型別的空陣列 (也就是，Type[] types = new Type[0])，取得未編索引的屬性。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，表示與 <paramref name="types" /> 陣列中對應的項目相關聯的屬性。預設的繫結器不會處理此參數。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到一個以上具有指定名稱並符合指定繫結條件約束的屬性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。-或-<paramref name="types" /> 為 null。-或-在 <paramref name="types" /> 中的其中一個項目為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 為多維。-或-<paramref name="modifiers" /> 為多維。-或-<paramref name="types" /> 和<paramref name="modifiers" /> 的長度不相同。</exception>
      <exception cref="T:System.NotSupportedException">目前的型別是 <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" /> 或 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。</exception>
    </member>
    <member name="M:System.Type.GetType">
      <summary>取得目前的 <see cref="T:System.Type" />。</summary>
      <returns>目前的 <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">已叫用類別初始設定式並且擲回例外狀況。</exception>
    </member>
    <member name="M:System.Type.GetType(System.String)">
      <summary>取得具有指定名稱的 <see cref="T:System.Type" />，執行區分大小寫的搜尋。</summary>
      <returns>具有指定之名稱的 <see cref="T:System.Type" /> (如果找到的話)，否則為 null。</returns>
      <param name="typeName">要取得之型別的組件限定名稱。請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />。如果此型別位在目前執行的組件或 Mscorlib.dll 中，則提供其命名空間所限定的型別名稱便已足夠。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 null。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">已叫用類別初始設定式並且擲回例外狀況。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> 代表泛型型別，具有指標型別、ByRef 型別或 <see cref="T:System.Void" /> 做為其中一個型別引數。-或-<paramref name="typeName" /> 代表型別引數數目不正確的泛型型別。-或-<paramref name="typeName" /> 代表泛型型別，而且它的其中一個型別引數不符合對應之型別參數的條件約束。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> 表示 <see cref="T:System.TypedReference" /> 的陣列。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到此組件或它的一個相依項目。</exception>
      <exception cref="T:System.IO.FileLoadException">已找到此組件或它的一個相依項目，但是無法加以載入。</exception>
      <exception cref="T:System.BadImageFormatException">此組件或它的一個相依項目無效。-或-組件是由較新的 .NET Framework 版本所編譯的。</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean)">
      <summary>取得具有指定名稱的 <see cref="T:System.Type" />，執行區分大小寫的搜尋，並設定找不到該型別時，是否應擲回例外狀況。</summary>
      <returns>具有指定名稱的型別。如果找不到該型別，<paramref name="throwOnError" /> 參數將指定是傳回 null 還是擲回例外狀況。在某些情況下，無論 <paramref name="throwOnError" /> 的值為何，都將擲回例外狀況。請參閱「例外狀況」一節。</returns>
      <param name="typeName">要取得之型別的組件限定名稱。請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />。如果此型別位在目前執行的組件或 Mscorlib.dll 中，則提供其命名空間所限定的型別名稱便已足夠。</param>
      <param name="throwOnError">true 表示如果找不到型別則擲回例外狀況，false 表示傳回 null。指定 false 也會隱藏其他某些例外狀況條件，但並不是全部。請參閱「例外狀況」一節。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 null。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">已叫用類別初始設定式並且擲回例外狀況。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 為 true，且找不到該型別。-或-<paramref name="throwOnError" /> 為 true，且 <paramref name="typeName" /> 包含無效的字元，例如內嵌定位字元。-或-<paramref name="throwOnError" /> 為 true，且 <paramref name="typeName" /> 為空字串。-或-<paramref name="throwOnError" /> 為 true，且 <paramref name="typeName" /> 代表具有無效大小的陣列型別。-或-<paramref name="typeName" /> 表示 <see cref="T:System.TypedReference" /> 的陣列。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> 為 true，且 <paramref name="typeName" /> 包含無效的語法。例如，"MyType[,*,]"。-或-<paramref name="typeName" /> 代表泛型型別，具有指標型別、ByRef 型別或 <see cref="T:System.Void" /> 做為其中一個型別引數。-或-<paramref name="typeName" /> 代表型別引數數目不正確的泛型型別。-或-<paramref name="typeName" /> 代表泛型型別，而且它的其中一個型別引數不符合對應之型別參數的條件約束。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> 為 true，且找不到此組件或它的一個相依項目。</exception>
      <exception cref="T:System.IO.FileLoadException">已找到此組件或它的一個相依項目，但是無法加以載入。</exception>
      <exception cref="T:System.BadImageFormatException">此組件或它的一個相依項目無效。-或-組件是由較新的 .NET Framework 版本所編譯的。</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>取得具有指定名稱的 <see cref="T:System.Type" />，指定是否執行區分大小寫的搜尋，以及找不到該型別時是否應擲回例外狀況。</summary>
      <returns>具有指定名稱的型別。如果找不到該型別，<paramref name="throwOnError" /> 參數將指定是傳回 null 還是擲回例外狀況。在某些情況下，無論 <paramref name="throwOnError" /> 的值為何，都將擲回例外狀況。請參閱「例外狀況」一節。</returns>
      <param name="typeName">要取得之型別的組件限定名稱。請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />。如果此型別位在目前執行的組件或 Mscorlib.dll 中，則提供其命名空間所限定的型別名稱便已足夠。</param>
      <param name="throwOnError">true 表示如果找不到型別則擲回例外狀況，false 表示傳回 null。指定 false 也會隱藏其他某些例外狀況條件，但並不是全部。請參閱「例外狀況」一節。</param>
      <param name="ignoreCase">true 表示針對 <paramref name="typeName" /> 執行不區分大小寫的搜尋，false 表示針對 <paramref name="typeName" /> 執行區分大小寫的搜尋。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 null。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">已叫用類別初始設定式並且擲回例外狀況。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 為 true，且找不到該型別。-或-<paramref name="throwOnError" /> 為 true，且 <paramref name="typeName" /> 包含無效的字元，例如內嵌定位字元。-或-<paramref name="throwOnError" /> 為 true，且 <paramref name="typeName" /> 為空字串。-或-<paramref name="throwOnError" /> 為 true，且 <paramref name="typeName" /> 代表具有無效大小的陣列型別。-或-<paramref name="typeName" /> 表示 <see cref="T:System.TypedReference" /> 的陣列。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> 為 true，且 <paramref name="typeName" /> 包含無效的語法。例如，"MyType[,*,]"。-或-<paramref name="typeName" /> 代表泛型型別，具有指標型別、ByRef 型別或 <see cref="T:System.Void" /> 做為其中一個型別引數。-或-<paramref name="typeName" /> 代表型別引數數目不正確的泛型型別。-或-<paramref name="typeName" /> 代表泛型型別，而且它的其中一個型別引數不符合對應之型別參數的條件約束。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> 為 true，且找不到此組件或它的一個相依項目。</exception>
      <exception cref="T:System.IO.FileLoadException">已找到此組件或它的一個相依項目，但是無法加以載入。</exception>
      <exception cref="T:System.BadImageFormatException">此組件或它的一個相依項目無效。-或-組件是由較新的 .NET Framework 版本所編譯的。</exception>
    </member>
    <member name="M:System.Type.GetTypeCode(System.Type)">
      <summary>取得指定的 <see cref="T:System.Type" /> 的基礎型別程式碼。</summary>
      <returns>基礎型別的 <see cref="T:System.TypeCode" /> 值。</returns>
      <param name="type">要取得 <see cref="T:System.Type" /> 的基礎型別程式碼。</param>
    </member>
    <member name="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)">
      <summary>取得指定的型別控制代碼所參考的型別。</summary>
      <returns>由指定 <see cref="T:System.RuntimeTypeHandle" /> 參考的型別，如果控制代碼的值為 null 則為 null。</returns>
      <param name="handle">參考型別的 <see cref="T:System.RuntimeTypeHandle" /> 物件。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">已叫用類別初始設定式並且擲回例外狀況。</exception>
    </member>
    <member name="M:System.Type.GetTypeHandle(System.Object)">
      <summary>取得指定物件的 <see cref="T:System.Type" /> 的控制代碼。</summary>
      <returns>指定的 <see cref="T:System.Object" /> 的 <see cref="T:System.Type" /> 的控制代碼。</returns>
      <param name="o">
        <see cref="T:System.Object" />，要取得它的 Type 控制代碼。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 為 null。</exception>
    </member>
    <member name="P:System.Type.GUID">
      <summary>取得與 <see cref="T:System.Type" /> 關聯的 GUID。</summary>
      <returns>與 <see cref="T:System.Type" /> 關聯的 GUID。</returns>
    </member>
    <member name="P:System.Type.HasElementType">
      <summary>取得值，指出目前 <see cref="T:System.Type" /> 是否內含或參考其他型別；也就是說，目前 <see cref="T:System.Type" /> 是否為陣列、指標或以傳址方式傳遞。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是陣列、指標或以傳址方式傳遞，則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Type.HasElementTypeImpl">
      <summary>在衍生類別中覆寫時，實作 <see cref="P:System.Type.HasElementType" /> 屬性並判斷目前 <see cref="T:System.Type" /> 是否內含或參考其他型別；也就是說，目前 <see cref="T:System.Type" /> 是否為陣列、指標或以傳址方式傳遞。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是陣列、指標或以傳址方式傳遞，則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])">
      <summary>使用指定的繫結條件約束並符合指定的引數清單，來叫用指定的成員。</summary>
      <returns>
        <see cref="T:System.Object" />，表示叫用之成員的傳回值。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要叫用的建構函式、方法、屬性或欄位成員的名稱。-或-空字串 ("")，要叫用預設成員。</param>
      <param name="invokeAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。該存取可以是其中一個 BindingFlags，例如 Public、NonPublic、Private、InvokeMethod、GetField 等等。不需要指定查閱的型別。如果省略查閱的類型，將會使用 BindingFlags.Public   | BindingFlags.Instance | BindingFlags.Static。</param>
      <param name="binder">
        <see cref="T:System.Reflection.Binder" /> 物件，定義一組屬性並啟用繫結，可包含多載方法的選擇、引數型別的強制型轉，以及透過反映的成員引動過程。-或-Null 參考 (在 Visual Basic 中為 Nothing)，表示使用 <see cref="P:System.Type.DefaultBinder" />。請注意，可能需要明確定義 <see cref="T:System.Reflection.Binder" /> 物件，才能成功叫用具有變數引數的方法多載。</param>
      <param name="target">要叫用指定成員的 <see cref="T:System.Object" />。</param>
      <param name="args">包含引數的陣列，此引數要傳遞到要叫用的成員中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" /> 包含 CreateInstance，且 <paramref name="typeName" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="args" /> 為多維。-或-<paramref name="invokeAttr" /> 不是有效的 <see cref="T:System.Reflection.BindingFlags" /> 屬性。-或-<paramref name="invokeAttr" /> 不包含下列其中一個繫結旗標：InvokeMethod、CreateInstance、GetField、SetField、GetProperty 或 SetProperty。-或-<paramref name="invokeAttr" /> 包含 CreateInstance 連同 InvokeMethod、GetField、SetField、GetProperty 或 SetProperty。-或-<paramref name="invokeAttr" /> 包含 GetField 和 SetField。-或-<paramref name="invokeAttr" /> 包含 GetProperty 和 SetProperty。-或-<paramref name="invokeAttr" /> 包含 InvokeMethod 連同 SetField 或 SetProperty。-或-<paramref name="invokeAttr" /> 包含 SetField，且 <paramref name="args" /> 有一個以上的項目。-或-這個方法是在 COM 物件上呼叫，而且下列其中一個繫結旗標並未傳入：BindingFlags.InvokeMethod、BindingFlags.GetProperty、BindingFlags.SetProperty、BindingFlags.PutDispProperty 或 BindingFlags.PutRefDispProperty。-或-其中一個具名參數陣列包含為 null 的字串。</exception>
      <exception cref="T:System.MethodAccessException">指定的成員是類別初始設定式。</exception>
      <exception cref="T:System.MissingFieldException">找不到欄位或屬性。</exception>
      <exception cref="T:System.MissingMethodException">找不到方法。-或-目前的 <see cref="T:System.Type" /> 物件所代表的型別含有開放式型別參數，亦即 <see cref="P:System.Type.ContainsGenericParameters" /> 會傳回 true。</exception>
      <exception cref="T:System.Reflection.TargetException">在 <paramref name="target" /> 上無法叫用指定的成員。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">有一個以上的方法符合繫結準則。</exception>
      <exception cref="T:System.NotSupportedException">.NET Compact Framework 目前並不支援此方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="name" /> 所表示的方法有一個或多個未指定的泛型型別參數。也就是說，方法的 <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> 屬性會傳回 true。</exception>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束並符合指定的引數清單、修飾詞和文化特性，來叫用指定的成員。</summary>
      <returns>
        <see cref="T:System.Object" />，表示叫用之成員的傳回值。</returns>
      <param name="name">
        <see cref="T:System.String" />，包含要叫用的建構函式、方法、屬性或欄位成員的名稱。-或-空字串 ("")，要叫用預設成員。-或-若為 IDispatch 成員，則為代表 DispID 的字串，例如 "[DispID=3]"。</param>
      <param name="invokeAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，指定執行搜尋的方式。該存取可以是其中一個 BindingFlags，例如 Public、NonPublic、Private、InvokeMethod、GetField 等等。不需要指定查閱的型別。如果省略查閱的類型，將會使用 BindingFlags.Public   | BindingFlags.Instance | BindingFlags.Static。</param>
      <param name="binder">
        <see cref="T:System.Reflection.Binder" /> 物件，定義一組屬性並啟用繫結，可包含多載方法的選擇、引數型別的強制型轉，以及透過反映的成員引動過程。-或-Null 參考 (在 Visual Basic 中為 Nothing)，表示使用 <see cref="P:System.Type.DefaultBinder" />。請注意，可能需要明確定義 <see cref="T:System.Reflection.Binder" /> 物件，才能成功叫用具有變數引數的方法多載。</param>
      <param name="target">要叫用指定成員的 <see cref="T:System.Object" />。</param>
      <param name="args">包含引數的陣列，此引數要傳遞到要叫用的成員中。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件的陣列，表示與 <paramref name="args" /> 陣列中對應的項目相關聯的屬性。參數的關聯屬性是儲存在成員的簽章中。預設繫結器只會在呼叫 COM 元件時處理這個參數。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 物件，表示要使用的全球化地區設定，它可能是地區設定特性轉換所需要的，例如將數值的 String 轉換成 Double。-或-Null 參考 (在 Visual Basic 中為 Nothing)，表示使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="namedParameters">陣列，包含參數的名稱 (<paramref name="args" /> 陣列中的值已傳遞到這些參數)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" /> 包含 CreateInstance，且 <paramref name="typeName" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="args" /> 為多維。-或-<paramref name="modifiers" /> 為多維。-或-<paramref name="args" /> 和 <paramref name="modifiers" /> 的長度不相同。-或-<paramref name="invokeAttr" /> 不是有效的 <see cref="T:System.Reflection.BindingFlags" /> 屬性。-或-<paramref name="invokeAttr" /> 不包含下列其中一個繫結旗標：InvokeMethod、CreateInstance、GetField、SetField、GetProperty 或 SetProperty。-或-<paramref name="invokeAttr" /> 包含 CreateInstance 連同 InvokeMethod、GetField、SetField、GetProperty 或 SetProperty。-或-<paramref name="invokeAttr" /> 包含 GetField 和 SetField。-或-<paramref name="invokeAttr" /> 包含 GetProperty 和 SetProperty。-或-<paramref name="invokeAttr" /> 包含 InvokeMethod 連同 SetField 或 SetProperty。-或-<paramref name="invokeAttr" /> 包含 SetField，且 <paramref name="args" /> 有一個以上的項目。-或-具名參數陣列大於引數陣列。-或-這個方法是在 COM 物件上呼叫，而且下列其中一個繫結旗標並未傳入：BindingFlags.InvokeMethod、BindingFlags.GetProperty、BindingFlags.SetProperty、BindingFlags.PutDispProperty 或 BindingFlags.PutRefDispProperty。-或-其中一個具名參數陣列包含為 null 的字串。</exception>
      <exception cref="T:System.MethodAccessException">指定的成員是類別初始設定式。</exception>
      <exception cref="T:System.MissingFieldException">找不到欄位或屬性。</exception>
      <exception cref="T:System.MissingMethodException">找不到方法。-或-目前的 <see cref="T:System.Type" /> 物件所代表的型別含有開放式型別參數，亦即 <see cref="P:System.Type.ContainsGenericParameters" /> 會傳回 true。</exception>
      <exception cref="T:System.Reflection.TargetException">在 <paramref name="target" /> 上無法叫用指定的成員。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">有一個以上的方法符合繫結準則。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="name" /> 所表示的方法有一個或多個未指定的泛型型別參數。也就是說，方法的 <see cref="P:System.Reflection.MethodInfo.ContainsGenericParameters" /> 屬性會傳回 true。</exception>
    </member>
    <member name="P:System.Type.IsAbstract">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為 abstract 並且必須被覆寫。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是抽象的則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsAnsiClass">
      <summary>取得值，指出是否為 <see cref="T:System.Type" /> 選取字串格式屬性 AnsiClass。</summary>
      <returns>如果為 <see cref="T:System.Type" /> 選取字串格式屬性 AnsiClass 則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsArray">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為陣列。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是陣列則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Type.IsArrayImpl">
      <summary>在衍生類別中覆寫時，實作 <see cref="P:System.Type.IsArray" /> 屬性並判斷 <see cref="T:System.Type" /> 是否為陣列。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是陣列則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Type.IsAssignableFrom(System.Type)">
      <summary>判斷是否可以從指定 Type 的執行個體中，指派目前 <see cref="T:System.Type" /> 的執行個體。</summary>
      <returns>如果 <paramref name="c" /> 和目前 Type 表示相同型別、目前 Type 在 <paramref name="c" /> 的繼承階層架構中、 Type 是 <paramref name="c" /> 所實作的介面，或 <paramref name="c" /> 是泛型型別參數，而目前 Type 表示 <paramref name="c" /> 的其中一個條件約束，則為 true。如果這些條件都不成立，或如果 <paramref name="c" /> 是 null，則為 false。</returns>
      <param name="c">Type，要與目前的 Type 比較。</param>
    </member>
    <member name="P:System.Type.IsAutoClass">
      <summary>取得值，指出是否為 <see cref="T:System.Type" /> 選取字串格式屬性 AutoClass。</summary>
      <returns>如果為 <see cref="T:System.Type" /> 選取字串格式屬性 AutoClass 則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsAutoLayout">
      <summary>取得值，指出是否為 <see cref="T:System.Type" /> 選取類別配置屬性 AutoLayout。</summary>
      <returns>如果為 <see cref="T:System.Type" /> 選取類別配置屬性 AutoLayout 則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsByRef">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否以傳址方式傳遞。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是以傳址方式傳遞，則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Type.IsByRefImpl">
      <summary>在衍生類別中覆寫時，實作 <see cref="P:System.Type.IsByRef" /> 屬性並判斷 <see cref="T:System.Type" /> 是否以傳址方式傳遞。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是以傳址方式傳遞，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsClass">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為類別；也就是說，不是值型別或介面。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是類別則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsCOMObject">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為 COM 物件。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是 COM 物件則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Type.IsCOMObjectImpl">
      <summary>在衍生類別中覆寫時，實作 <see cref="P:System.Type.IsCOMObject" /> 屬性並判斷 <see cref="T:System.Type" /> 是否為 COM 物件。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是 COM 物件則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsConstructedGenericType">
      <summary>取得值，指出這個物件是否表示建構的泛型型別。</summary>
      <returns>如果這個物件表示建構的泛型型別則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsEnum">
      <summary>取得值，指出目前的 <see cref="T:System.Type" /> 是否表示列舉。</summary>
      <returns>如果目前 <see cref="T:System.Type" /> 表示列舉則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsExplicitLayout">
      <summary>取得值，指出是否為 <see cref="T:System.Type" /> 選取類別配置屬性 ExplicitLayout。</summary>
      <returns>如果為 <see cref="T:System.Type" /> 選取類別配置屬性 ExplicitLayout 則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsGenericParameter">
      <summary>取得值，指出目前的 <see cref="T:System.Type" /> 是否表示泛型型別或泛型方法定義中的型別參數。</summary>
      <returns>如果 <see cref="T:System.Type" /> 物件表示泛型型別定義或泛型方法定義中的型別參數，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsGenericType">
      <summary>取得值，指出目前型別是否為泛型型別。</summary>
      <returns>如果目前的型別為泛型型別則為 true，否則為  false。</returns>
    </member>
    <member name="P:System.Type.IsGenericTypeDefinition">
      <summary>取得值，指出目前的 <see cref="T:System.Type" /> 是否表示可用於建構其他泛型型別的泛型型別定義。</summary>
      <returns>如果 <see cref="T:System.Type" /> 物件表示泛型型別定義則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsImport">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否套用了 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> 屬性 (Attribute)，亦即其是否從 COM 型別程式庫匯入。</summary>
      <returns>如果 <see cref="T:System.Type" /> 具有 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> 則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Type.IsInstanceOfType(System.Object)">
      <summary>判斷指定的物件是否為目前 <see cref="T:System.Type" /> 的執行個體。</summary>
      <returns>如果目前 Type 在 <paramref name="o" /> 所表示的物件繼承階層架構中，或如果目前 Type 是 <paramref name="o" /> 所支援的介面，則為 true。如果這些條件都不成立、如果 <paramref name="o" /> 是 null，或如果目前 Type 是開放泛型型別 (也就是，<see cref="P:System.Type.ContainsGenericParameters" /> 傳回 true)，則為 false。</returns>
      <param name="o">要與目前 Type 比較的物件。</param>
    </member>
    <member name="P:System.Type.IsInterface">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為介面；也就是說，不是值類別或值型別。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是介面則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsLayoutSequential">
      <summary>取得值，指出是否為 <see cref="T:System.Type" /> 選取類別配置屬性 SequentialLayout。</summary>
      <returns>如果為 <see cref="T:System.Type" /> 選取類別配置屬性 SequentialLayout 則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsMarshalByRef">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否以傳址方式封送處理。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是以傳址方式封送處理，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsNested">
      <summary>取得值，指出目前的 <see cref="T:System.Type" /> 物件表示的型別其定義是否位於另一個型別的定義內部。</summary>
      <returns>如果 <see cref="T:System.Type" /> 以巢狀方式位於另一個型別之內，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsNestedAssembly">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為巢狀，並只在它自己的組件內為可見。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是巢狀且只在自己的組件內才可見，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsNestedFamANDAssem">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為巢狀，並只對同時屬於它自己家族和它自己組件的類別為可見。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是巢狀且只對同時屬於它自己家族和它自己組件的類別為可見，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsNestedFamily">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為巢狀，並只在它自己的家族內為可見。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是巢狀且只在自己的家族內才可見，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsNestedFamORAssem">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為巢狀並只對屬於它自己家族或它自己組件的類別為可見。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是巢狀且只對屬於它自己家族或它自己組件的類別為可見，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsNestedPrivate">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為巢狀並且宣告為私用。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是巢狀並且宣告為私用，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsNestedPublic">
      <summary>取得值，指出類別是否為巢狀 (Nest) 並且宣告為公用 (Public)。</summary>
      <returns>如果類別是巢狀並且宣告為公用，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsNotPublic">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否未宣告為 public。</summary>
      <returns>如果 <see cref="T:System.Type" /> 未宣告為公用而且不是巢狀型別，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsPointer">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為指標。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是指標則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Type.IsPointerImpl">
      <summary>在衍生類別中覆寫時，實作 <see cref="P:System.Type.IsPointer" /> 屬性並判斷 <see cref="T:System.Type" /> 是否為指標。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是指標則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsPrimitive">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為其中一個基本型別 (Primitive Type)。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是其中一個基本型別，則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Type.IsPrimitiveImpl">
      <summary>在衍生類別中覆寫時，實作 <see cref="P:System.Type.IsPrimitive" /> 屬性並判斷 <see cref="T:System.Type" /> 是否為其中一個基本型別。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是其中一個基本型別，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsPublic">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否宣告為 public。</summary>
      <returns>如果 <see cref="T:System.Type" /> 宣告為公用而且不是巢狀型別，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsSealed">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否宣告為密封。</summary>
      <returns>如果 <see cref="T:System.Type" /> 宣告為密封則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsSerializable">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為可序列化。</summary>
      <returns>如果 <see cref="T:System.Type" /> 可序列化則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsSpecialName">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否具有需要特殊處理的名稱。</summary>
      <returns>如果 <see cref="T:System.Type" /> 具有需要特殊處理的名稱，則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Type.IsSubclassOf(System.Type)">
      <summary>判斷目前的 <see cref="T:System.Type" /> 所表示的類別，是否從指定的 <see cref="T:System.Type" /> 所表示的類別衍生而來。</summary>
      <returns>如果 <paramref name="c" /> 參數所表示的 Type 和目前的 Type 皆表示類別，而且目前 Type 所表示的類別衍生自 <paramref name="c" /> 所表示的類別，則為 true，否則為 false。如果 <paramref name="c" /> 和目前的 Type 皆表示相同的類別，此方法也會傳回 false。</returns>
      <param name="c">Type，要與目前的 Type 比較。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 參數為 null。</exception>
    </member>
    <member name="P:System.Type.IsUnicodeClass">
      <summary>取得值，指出是否為 <see cref="T:System.Type" /> 選取字串格式屬性 UnicodeClass。</summary>
      <returns>如果為 <see cref="T:System.Type" /> 選取字串格式屬性 UnicodeClass 則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsValueType">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為值型別。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是實值型別則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Type.IsValueTypeImpl">
      <summary>實作 <see cref="P:System.Type.IsValueType" /> 屬性並判斷 <see cref="T:System.Type" /> 是否為值型別；也就是說，不是類別或介面。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是實值型別則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Type.IsVisible">
      <summary>取得一個值，指出位於組件之外的程式碼是否能存取 <see cref="T:System.Type" />。</summary>
      <returns>如果目前的 <see cref="T:System.Type" /> 是公用型別或公用巢狀型別 (所有封入型別均為公用) 則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Type.MakeArrayType">
      <summary>傳回 <see cref="T:System.Type" /> 物件，表示由目前型別組成的一維陣列，其下限為 0。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示由目前型別組成的一維陣列，其下限為 0。</returns>
      <exception cref="T:System.NotSupportedException">基底類別中不支援叫用的方法。衍生類別 (Derived Class) 必須提供實作。</exception>
      <exception cref="T:System.TypeLoadException">目前型別是 <see cref="T:System.TypedReference" />。-或-目前型別是 ByRef 型別。也就是，<see cref="P:System.Type.IsByRef" /> 會傳回 true。</exception>
    </member>
    <member name="M:System.Type.MakeArrayType(System.Int32)">
      <summary>傳回 <see cref="T:System.Type" /> 物件，表示由目前型別組成且為指定維度個數的陣列。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示由目前型別組成且為指定維度個數的陣列。</returns>
      <param name="rank">陣列的維度數目。此數字必須小於或等於 32。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> 都是無效的。例如 0 或負數。</exception>
      <exception cref="T:System.NotSupportedException">基底類別中不支援叫用的方法。</exception>
      <exception cref="T:System.TypeLoadException">目前型別是 <see cref="T:System.TypedReference" />。-或-目前型別是 ByRef 型別。也就是，<see cref="P:System.Type.IsByRef" /> 會傳回 true。-或-<paramref name="rank" /> 大於 32。</exception>
    </member>
    <member name="M:System.Type.MakeByRefType">
      <summary>傳回 <see cref="T:System.Type" /> 物件，當做 ref 參數傳遞時 (Visual Basic 中的 ByRef 參數)，表示目前的型別。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，當做 ref 參數傳遞時 (Visual Basic 中的 ByRef 參數)，表示目前的型別。</returns>
      <exception cref="T:System.NotSupportedException">基底類別中不支援叫用的方法。</exception>
      <exception cref="T:System.TypeLoadException">目前型別是 <see cref="T:System.TypedReference" />。-或-目前型別是 ByRef 型別。也就是，<see cref="P:System.Type.IsByRef" /> 會傳回 true。</exception>
    </member>
    <member name="M:System.Type.MakeGenericType(System.Type[])">
      <summary>用型別陣列的元素取代目前泛型型別定義的型別參數，並傳回表示所得結果建構型別的 <see cref="T:System.Type" /> 物件。</summary>
      <returns>
        <see cref="T:System.Type" />，表示用 <paramref name="typeArguments" /> 的元素取代目前泛型型別之型別參數所得到的建構型別。</returns>
      <param name="typeArguments">由型別組成的陣列，用來取代目前泛型型別的型別參數。</param>
      <exception cref="T:System.InvalidOperationException">目前型別不表示泛型型別定義。也就是，<see cref="P:System.Type.IsGenericTypeDefinition" /> 會傳回 false。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> 為 null。-或-<paramref name="typeArguments" /> 的任何項目是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArguments" /> 中的項目個數與目前泛型型別定義中的型別參數個數不同。-或-<paramref name="typeArguments" /> 中的所有項目都不符合目前泛型型別對應之型別參數所設定的條件。-或-<paramref name="typeArguments" /> 中包含的項目是指標型別 (<see cref="P:System.Type.IsPointer" /> 傳回 true)、ByRef 型別 (<see cref="P:System.Type.IsByRef" /> 傳回 true) 或 <see cref="T:System.Void" />。</exception>
      <exception cref="T:System.NotSupportedException">基底類別中不支援叫用的方法。衍生類別 (Derived Class) 必須提供實作。</exception>
    </member>
    <member name="M:System.Type.MakePointerType">
      <summary>傳回 <see cref="T:System.Type" /> 物件，表示指向目前型別的指標。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，代表指向目前型別的指標。</returns>
      <exception cref="T:System.NotSupportedException">基底類別中不支援叫用的方法。</exception>
      <exception cref="T:System.TypeLoadException">目前型別是 <see cref="T:System.TypedReference" />。-或-目前型別是 ByRef 型別。也就是，<see cref="P:System.Type.IsByRef" /> 會傳回 true。</exception>
    </member>
    <member name="P:System.Type.MemberType">
      <summary>取得一個 <see cref="T:System.Reflection.MemberTypes" /> 值，指出此成員是型別或巢狀型別。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberTypes" /> 值，指出此成員是型別或巢狀型別。</returns>
    </member>
    <member name="F:System.Type.Missing">
      <summary>表示在 <see cref="T:System.Type" /> 資訊中的遺漏值。此欄位為唯讀的。</summary>
    </member>
    <member name="P:System.Type.Module">
      <summary>在已定義的目前 <see cref="T:System.Type" /> 中取得模組 (DLL)。</summary>
      <returns>其中已定義目前 <see cref="T:System.Type" /> 的模組。</returns>
    </member>
    <member name="P:System.Type.Namespace">
      <summary>取得 <see cref="T:System.Type" /> 的命名空間。</summary>
      <returns>
        <see cref="T:System.Type" /> 的命名空間，如果目前的執行個體沒有命名空間，或表示泛型參數，則為 null。</returns>
    </member>
    <member name="P:System.Type.ReflectedType">
      <summary>取得用來取得此成員的類別物件。</summary>
      <returns>Type 物件，用來取得此 <see cref="T:System.Type" /> 物件。</returns>
    </member>
    <member name="M:System.Type.ToString">
      <summary>傳回 String，表示目前 Type 的名稱。</summary>
      <returns>表示目前 <see cref="T:System.Type" /> 的名稱的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Type.TypeHandle">
      <summary>取得目前 <see cref="T:System.Type" /> 的控制代碼。</summary>
      <returns>目前 <see cref="T:System.Type" /> 的控制代碼。</returns>
      <exception cref="T:System.NotSupportedException">.NET Compact Framework 目前並不支援此屬性。</exception>
    </member>
    <member name="P:System.Type.UnderlyingSystemType">
      <summary>指出型別，該型別是由表示此型別的 Common Language Runtime 所提供的。</summary>
      <returns>
        <see cref="T:System.Type" /> 的基礎系統型別。</returns>
    </member>
    <member name="T:System.TypeAccessException">
      <summary>當方法嘗試使用其無權存取的型別時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.TypeAccessException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.TypeAccessException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。此建構函式的呼叫端必須確保此字串已針對目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.TypeAccessException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。此建構函式的呼叫端必須確保此字串已針對目前系統的文化特性當地語系化。</param>
      <param name="inner">造成目前例外狀況的例外。如果 <paramref name="inner" /> 參數並非 null，即會在處理內部例外狀況的 catch 區塊中發生目前的例外狀況。 </param>
    </member>
    <member name="T:System.TypeCode">
      <summary>指定物件的型別。</summary>
    </member>
    <member name="F:System.TypeCode.Boolean">
      <summary>表示 true 或 false 的布林值的簡單型別。</summary>
    </member>
    <member name="F:System.TypeCode.Byte">
      <summary>表示不帶正負號的 8 位元整數的整數型別，其值介於 0 和 255 之間。</summary>
    </member>
    <member name="F:System.TypeCode.Char">
      <summary>表示不帶正負號的 16 位元整數的整數型別，其值介於 0 和 65535 之間。<see cref="F:System.TypeCode.Char" /> 型別的可能值集合對應於 Unicode 字元集。</summary>
    </member>
    <member name="F:System.TypeCode.DateTime">
      <summary>表示日期和時間值的型別。</summary>
    </member>
    <member name="F:System.TypeCode.DBNull">
      <summary>資料庫 null (資料行) 數值。</summary>
    </member>
    <member name="F:System.TypeCode.Decimal">
      <summary>簡單型別，表示具有 28-29 個有效位數、從 1.0 x 10 -28 到大約 7.9 x 10 28 的數值範圍。</summary>
    </member>
    <member name="F:System.TypeCode.Double">
      <summary>浮點型別，表示具有 15-16 位數精確度、從 5.0 x 10 -324 到大約 1.7 x 10 308 的數值範圍。</summary>
    </member>
    <member name="F:System.TypeCode.Empty">
      <summary>null 參考。</summary>
    </member>
    <member name="F:System.TypeCode.Int16">
      <summary>表示帶正負號的 16 位元整數的整數型別，其值介於 -32768 和 32767 之間。</summary>
    </member>
    <member name="F:System.TypeCode.Int32">
      <summary>表示帶正負號的 32 位元整數的整數型別，其值介於 -2147483648 和 2147483647 之間。</summary>
    </member>
    <member name="F:System.TypeCode.Int64">
      <summary>表示帶正負號的 64 位元整數的整數型別，其值介於 -9223372036854775808 和 9223372036854775807 之間。</summary>
    </member>
    <member name="F:System.TypeCode.Object">
      <summary>一般型別，表示未由另一個 TypeCode 明確表示的任何參考或實值型別。</summary>
    </member>
    <member name="F:System.TypeCode.SByte">
      <summary>表示帶正負號的 8 位元整數的整數型別，其值介於 -128 和 127 之間。</summary>
    </member>
    <member name="F:System.TypeCode.Single">
      <summary>浮點型別，表示具有 7 位數精確度、從 1.5 x 10 -45 到大約 3.4 x 10 38 的數值範圍。</summary>
    </member>
    <member name="F:System.TypeCode.String">
      <summary>表示 Unicode 字元字串的密封類別型別。</summary>
    </member>
    <member name="F:System.TypeCode.UInt16">
      <summary>表示不帶正負號的 16 位元整數的整數型別，其值介於 0 和 65535 之間。</summary>
    </member>
    <member name="F:System.TypeCode.UInt32">
      <summary>表示不帶正負號的 32 位元整數的整數型別，其值介於 0 和 4294967295 之間。</summary>
    </member>
    <member name="F:System.TypeCode.UInt64">
      <summary>表示不帶正負號的 64 位元整數的整數型別，其值介於 0 和 18446744073709551615 之間。</summary>
    </member>
    <member name="T:System.TypeInitializationException">
      <summary>因為當做類別初始設定式 (Class Initializer) 所擲回例外狀況的包裝函式，所擲回的例外狀況。無法繼承此類別。</summary>
    </member>
    <member name="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
      <summary>使用預設的錯誤訊息、特定的型別名稱和造成此例外狀況根本原因的內部例外的參考來初始化 <see cref="T:System.TypeInitializationException" /> 類別的新執行個體。</summary>
      <param name="fullTypeName">初始化失敗之型別的完整名稱。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 Null 參考 (在 Visual Basic 中為 Nothing)，則會在處理內部例外的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="P:System.TypeInitializationException.TypeName">
      <summary>取得初始化失敗之型別的完整限定名稱。</summary>
      <returns>初始化失敗之型別的完整限定名稱。</returns>
    </member>
    <member name="T:System.TypeLoadException">
      <summary>當發生型別載入錯誤時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor">
      <summary>初始化 <see cref="T:System.TypeLoadException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.TypeLoadException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.TypeLoadException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="P:System.TypeLoadException.Message">
      <summary>取得此例外狀況的錯誤訊息。</summary>
      <returns>錯誤訊息字串。</returns>
    </member>
    <member name="P:System.TypeLoadException.TypeName">
      <summary>取得造成例外狀況之型別的完整名稱。</summary>
      <returns>完整型別名稱。</returns>
    </member>
    <member name="T:System.UInt16">
      <summary>表示 16 位元不帶正負號的整數。</summary>
    </member>
    <member name="M:System.UInt16.CompareTo(System.Object)">
      <summary>比較此執行個體與特定物件，並且傳回一個整數，指出此執行個體的值是大於、等於或小於特定物件的值。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的相對值。傳回值描述小於零這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。大於零這個執行個體大於 <paramref name="value" />。-或-<paramref name="value" /> 為 null。</returns>
      <param name="value">要比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.UInt16" />。</exception>
    </member>
    <member name="M:System.UInt16.CompareTo(System.UInt16)">
      <summary>比較此執行個體和特定 16 位元不帶正負號的整數，並且傳回一個整數，指出此執行個體的值是大於、等於或小於特定 16 位元不帶正負號的整數的值。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的相對值。傳回值描述小於零這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。大於零這個執行個體大於 <paramref name="value" />。</returns>
      <param name="value">要比較的不帶正負號整數。</param>
    </member>
    <member name="M:System.UInt16.Equals(System.Object)">
      <summary>傳回值，指出此執行個體是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.UInt16" /> 的執行個體，並且等於此執行個體的值，則為 true，否則為 false。</returns>
      <param name="obj">與此執行個體相比較的物件。</param>
    </member>
    <member name="M:System.UInt16.Equals(System.UInt16)">
      <summary>傳回值，指出此執行個體是否等於指定的 <see cref="T:System.UInt16" /> 值。</summary>
      <returns>如果 <paramref name="obj" /> 與此執行個體具有相同的值則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體 (Instance) 相比較的 <see cref="T:System.UInt16" /> 值。</param>
    </member>
    <member name="M:System.UInt16.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.UInt16.GetTypeCode">
      <summary>傳回值型別 <see cref="T:System.UInt16" /> 的 <see cref="T:System.TypeCode" />。</summary>
      <returns>列舉常數、<see cref="F:System.TypeCode.UInt16" />。</returns>
    </member>
    <member name="F:System.UInt16.MaxValue">
      <summary>表示 <see cref="T:System.UInt16" /> 的最大可能值。此欄位為常數。</summary>
    </member>
    <member name="F:System.UInt16.MinValue">
      <summary>表示 <see cref="T:System.UInt16" /> 的最小可能值。此欄位為常數。</summary>
    </member>
    <member name="M:System.UInt16.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，等於包含在 <paramref name="s" /> 中的數字。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將所指定樣式之數字的字串表示，轉換為它的相等 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，指定 <paramref name="s" /> 可以使用的格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示數字小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" />。-或-<paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將指定樣式和特定文化特性的格式中數字的字串表示，轉換成它的對等 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式元素。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。-或-<paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.IFormatProvider)">
      <summary>將指定之特定文化特性格式中數字的字串表示法轉換成它的對等 16 位元不帶正負號的整數。</summary>
      <returns>16 位元不帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零則為 true，否則為 false。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.Single" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的目前值，轉換為 <paramref name="type" />。</returns>
      <param name="type">要將此 <see cref="T:System.UInt16" /> 值轉換成的型別。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值的格式資訊。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>此執行個體的目前值，未變更。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>這個執行個體的目前值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt16.ToString">
      <summary>將此執行個體的數值轉換為它的對等字串表示。</summary>
      <returns>此執行個體值的字串表示，由沒有正負號或為零的前置字元的範圍從 0 到 9 的數字順序所組成。</returns>
    </member>
    <member name="M:System.UInt16.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>此執行個體值的字串表示，由 0 到 9 的數字順序所組成，沒有正負號或為零的前置字元。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
    </member>
    <member name="M:System.UInt16.ToString(System.String)">
      <summary>使用指定的格式，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 參數無效。</exception>
    </member>
    <member name="M:System.UInt16.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。</exception>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
      <summary>嘗試將指定之樣式及文化特性專屬格式之數字的字串表示，轉換為它的 16 位元不帶正負號的整數對應項。傳回值會指出轉換是成功或是失敗。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 的允許格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <param name="result">當此方法傳回時，如果轉換成功便包含相當於 <paramref name="s" /> 所含數值的 16 位元不帶正負號整數值，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.UInt16@)">
      <summary>嘗試將數字的字串表示轉換為 16 位元不帶正負號的整數。傳回值會指出轉換是成功或是失敗。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="result">當此方法傳回時，如果轉換成功，將包含與 <paramref name="s" /> 中所包含之數字相等的 16 位元不帶正負號的整數值，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、不是正確格式，或是表示小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="T:System.UInt32">
      <summary>表示 32 位元不帶正負號的整數。</summary>
    </member>
    <member name="M:System.UInt32.CompareTo(System.Object)">
      <summary>比較此執行個體與特定物件，並且傳回一個整數，指出此執行個體的值是大於、等於或小於特定物件的值。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的相對值。傳回值描述小於零這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。大於零這個執行個體大於 <paramref name="value" />。-或-<paramref name="value" /> 為 null。</returns>
      <param name="value">要比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.UInt32" />。</exception>
    </member>
    <member name="M:System.UInt32.CompareTo(System.UInt32)">
      <summary>比較此執行個體和特定 32 位元不帶正負號的整數，並且傳回一個整數，指出此執行個體的值是大於、等於或小於特定 32 位元不帶正負號的整數的值。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的相對值。傳回值描述小於零這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。大於零這個執行個體大於 <paramref name="value" />。</returns>
      <param name="value">要比較的不帶正負號整數。</param>
    </member>
    <member name="M:System.UInt32.Equals(System.Object)">
      <summary>傳回值，指出此執行個體是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.UInt32" /> 的執行個體，並且等於此執行個體的值則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.UInt32.Equals(System.UInt32)">
      <summary>傳回值，指出此執行個體是否等於指定之 <see cref="T:System.UInt32" />。</summary>
      <returns>如果 <paramref name="obj" /> 與此執行個體具有相同的值則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體 (Instance) 相比較的 <see cref="T:System.UInt32" /> 值。</param>
    </member>
    <member name="M:System.UInt32.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.UInt32.GetTypeCode">
      <summary>傳回值型別 <see cref="T:System.UInt32" /> 的 <see cref="T:System.TypeCode" />。</summary>
      <returns>列舉常數、<see cref="F:System.TypeCode.UInt32" />。</returns>
    </member>
    <member name="F:System.UInt32.MaxValue">
      <summary>表示 <see cref="T:System.UInt32" /> 的最大可能值。此欄位為常數。</summary>
    </member>
    <member name="F:System.UInt32.MinValue">
      <summary>表示 <see cref="T:System.UInt32" /> 的最小可能值。此欄位為常數。</summary>
    </member>
    <member name="M:System.UInt32.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，等於包含在 <paramref name="s" /> 中的數字。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 參數為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 參數不是屬於正確的格式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 參數表示小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將所指定樣式之數字的字串表示，轉換為它的相等 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，指定 <paramref name="s" /> 可以使用的格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字。-或-<paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將指定樣式和特定文化特性的格式中數字的字串表示轉換成它的對等 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 中可以存在的樣式元素。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字。-或-<paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.IFormatProvider)">
      <summary>將指定之特定文化特性格式中數字的字串表示法轉換成它的對等 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是正確的樣式。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示數字小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零則為 true，否則為 false。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <param name="type">要將此 <see cref="T:System.UInt32" /> 值轉換成的型別。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值格式的特定文化特性資訊。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt64" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt32.ToString">
      <summary>將此執行個體的數值轉換為它的對等字串表示。</summary>
      <returns>此執行個體值的字串表示，由沒有正負號或為零的前置字元的範圍從 0 到 9 的數字順序所組成。</returns>
    </member>
    <member name="M:System.UInt32.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>此執行個體值的字串表示，由 0 到 9 的數字順序所組成，沒有正負號或為零的前置字元。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
    </member>
    <member name="M:System.UInt32.ToString(System.String)">
      <summary>使用指定的格式，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">標準或自訂數值格式字串 (請參閱「備註」)。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 參數無效。</exception>
    </member>
    <member name="M:System.UInt32.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">標準或自訂數值格式字串 (請參閱「備註」)。</param>
      <param name="provider">物件，提供關於此執行個體的文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 參數無效。</exception>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
      <summary>嘗試將指定之樣式及文化特性專屬格式之數字的字串表示，轉換為它的 32 位元不帶正負號的整數對應項。傳回值會指出轉換是成功或是失敗。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 的允許格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <param name="result">當此方法傳回時，如果轉換成功便包含相當於 <paramref name="s" /> 所含數值的 32 位元不帶正負號整數值，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.UInt32@)">
      <summary>將數字的字串表示轉換成它的對等 32 位元不帶正負號的整數。傳回值會指出轉換是成功或是失敗。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="result">當此方法傳回時，如果轉換成功，將包含與 <paramref name="s" /> 中所包含之數字相等的 32 位元不帶正負號的整數值，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、不是正確格式，或是表示小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="T:System.UInt64">
      <summary>表示 64 位元不帶正負號的整數。</summary>
    </member>
    <member name="M:System.UInt64.CompareTo(System.Object)">
      <summary>比較此執行個體與特定物件，並且傳回一個整數，指出此執行個體的值是大於、等於或小於特定物件的值。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的相對值。傳回值描述小於零這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。大於零這個執行個體大於 <paramref name="value" />。-或-<paramref name="value" /> 為 null。</returns>
      <param name="value">要比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.UInt64" />。</exception>
    </member>
    <member name="M:System.UInt64.CompareTo(System.UInt64)">
      <summary>比較此執行個體和特定 64 位元不帶正負號的整數，並且傳回一個整數，指出此執行個體的值是大於、等於或小於特定 64 位元不帶正負號的整數的值。</summary>
      <returns>帶正負號的數字，表示這個執行個體與 <paramref name="value" /> 的相對值。傳回值描述小於零這個執行個體小於 <paramref name="value" />。零這個執行個體等於 <paramref name="value" />。大於零這個執行個體大於 <paramref name="value" />。</returns>
      <param name="value">要比較的不帶正負號整數。</param>
    </member>
    <member name="M:System.UInt64.Equals(System.Object)">
      <summary>傳回值，指出此執行個體是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.UInt64" /> 的執行個體，並且等於此執行個體的值，則為 true，否則為 false。</returns>
      <param name="obj">與此執行個體相比較的物件。</param>
    </member>
    <member name="M:System.UInt64.Equals(System.UInt64)">
      <summary>傳回值，指出此執行個體是否等於指定的 <see cref="T:System.UInt64" /> 值。</summary>
      <returns>如果 <paramref name="obj" /> 與此執行個體具有相同的值則為 true，否則為 false。</returns>
      <param name="obj">要與此執行個體 (Instance) 相比較的 <see cref="T:System.UInt64" /> 值。</param>
    </member>
    <member name="M:System.UInt64.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.UInt64.GetTypeCode">
      <summary>傳回值型別 <see cref="T:System.UInt64" /> 的 <see cref="T:System.TypeCode" />。</summary>
      <returns>列舉常數、<see cref="F:System.TypeCode.UInt64" />。</returns>
    </member>
    <member name="F:System.UInt64.MaxValue">
      <summary>表示 <see cref="T:System.UInt64" /> 的最大可能值。此欄位為常數。</summary>
    </member>
    <member name="F:System.UInt64.MinValue">
      <summary>表示 <see cref="T:System.UInt64" /> 的最小可能值。此欄位為常數。</summary>
    </member>
    <member name="M:System.UInt64.Parse(System.String)">
      <summary>將數字的字串表示轉換成它的對等 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，等於包含在 <paramref name="s" /> 中的數字。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 參數為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 參數的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 參數表示小於<see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>將所指定樣式之數字的字串表示，轉換為它的相等 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="style">列舉值的位元組合，指定 <paramref name="s" /> 可以使用的格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 參數的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 參數表示小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。-或-<paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>將指定樣式和特定文化特性的格式中數字的字串表示，轉換成它的對等 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 的允許格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 參數的格式與 <paramref name="style" /> 不相容。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 參數表示小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。-或-<paramref name="s" /> 包含非零的小數數字。</exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.IFormatProvider)">
      <summary>將指定樣式和特定文化特性的格式中數字的字串表示，轉換成它的對等 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，等於 <paramref name="s" /> 中指定的數字。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 參數為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 參數的格式不正確。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 參數表示小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。</exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <returns>如果目前執行個體的值不是零則為 true，否則為 false。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Byte" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Char" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支援此轉換。嘗試使用這個方法會擲回 <see cref="T:System.InvalidCastException" />。</summary>
      <returns>不支援此轉換。沒有傳回任何值。</returns>
      <param name="provider">已忽略此參數。</param>
      <exception cref="T:System.InvalidCastException">在所有情況下。</exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Decimal" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Double" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int16" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int32" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Int64" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.SByte" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.Single" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <paramref name="type" />。</returns>
      <param name="type">要將此 <see cref="T:System.UInt64" /> 值轉換成的型別。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 實作，提供傳回值的格式資訊。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt16" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，轉換為 <see cref="T:System.UInt32" />。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>如需此成員的說明，請參閱 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <returns>目前執行個體的值，未變更。</returns>
      <param name="provider">已忽略此參數。</param>
    </member>
    <member name="M:System.UInt64.ToString">
      <summary>將此執行個體的數值轉換為它的對等字串表示。</summary>
      <returns>此執行個體值的字串表示，由沒有正負號或為零的前置字元的範圍從 0 到 9 的數字順序所組成。</returns>
    </member>
    <member name="M:System.UInt64.ToString(System.IFormatProvider)">
      <summary>使用指定的特定文化特性的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="provider" /> 所指定。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
    </member>
    <member name="M:System.UInt64.ToString(System.String)">
      <summary>使用指定的格式，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 參數無效。</exception>
    </member>
    <member name="M:System.UInt64.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和特定文化特性的格式資訊，將此執行個體的數值轉換成它的對等字串表示。</summary>
      <returns>這個執行個體值的字串表示，如同 <paramref name="format" /> 和 <paramref name="provider" /> 所指定。</returns>
      <param name="format">數值格式字串。</param>
      <param name="provider">物件，提供關於此執行個體的文化特性格式資訊。</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 參數無效。</exception>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
      <summary>嘗試將指定之樣式及文化特性專屬格式之數字的字串表示，轉換為它的 64 位元不帶正負號的整數對應項。傳回值會指出轉換是成功或是失敗。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">字串，表示要轉換的數字。這個字串使用 <paramref name="style" /> 參數指定的樣式來解譯。</param>
      <param name="style">列舉值的位元組合，表示 <paramref name="s" /> 的允許格式。一般會指定的值是 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">物件，提供關於 <paramref name="s" /> 的文化特性特定格式資訊。</param>
      <param name="result">當此方法傳回時，如果轉換成功便包含相當於 <paramref name="s" /> 所含數值的 64 位元不帶正負號整數值，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、格式與 <paramref name="style" /> 不相容，或是表示小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。-或-<paramref name="style" /> 不是<see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的組合。</exception>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.UInt64@)">
      <summary>嘗試將數字的字串表示轉換為 64 位元不帶正負號的整數。傳回值會指出轉換是成功或是失敗。</summary>
      <returns>如果成功地轉換 <paramref name="s" /> 則為 true，否則為 false。</returns>
      <param name="s">字串，表示要轉換的數字。</param>
      <param name="result">當此方法傳回時，如果轉換成功，將包含與 <paramref name="s" /> 中所包含之數字相等的 64 位元不帶正負號的整數值，如果轉換失敗則為零。如果 <paramref name="s" /> 參數為 null、不是正確格式，或是表示小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字，則轉換會失敗。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="T:System.UIntPtr">
      <summary>特定平台專用的型別，用來表示指標或控制代碼。</summary>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt32)">
      <summary>使用指定的 32 位元指標或控制代碼來初始化 <see cref="T:System.UIntPtr" /> 結構的新執行個體。</summary>
      <param name="value">包含在 32 位元不帶正負號整數中的指標或控制代碼。</param>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt64)">
      <summary>使用指定的 64 位元指標或控制代碼來初始化 <see cref="T:System.UIntPtr" /> 的新執行個體。</summary>
      <param name="value">包含在 64 位元不帶正負號整數中的指標或控制代碼。</param>
      <exception cref="T:System.OverflowException">在 32 位元的平台上，<paramref name="value" /> 太大，以致於無法代表 <see cref="T:System.UIntPtr" />。</exception>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.Void*)">
      <summary>[安全性關鍵] 使用未指定型別的指定指標來初始化 <see cref="T:System.UIntPtr" /> 的新執行個體。</summary>
      <param name="value">未指定型別的指標。</param>
    </member>
    <member name="M:System.UIntPtr.Add(System.UIntPtr,System.Int32)">
      <summary>將不帶正負號指標的值加上位移。</summary>
      <returns>新的不帶正負號指標，反映將 <paramref name="pointer" /> 加上 <paramref name="offset" /> 的結果。</returns>
      <param name="pointer">要加上位移的不帶正負號指標。</param>
      <param name="offset">要加入的位移。</param>
    </member>
    <member name="M:System.UIntPtr.Equals(System.Object)">
      <summary>傳回值，指出此執行個體是否和指定的物件相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.UIntPtr" /> 的執行個體，並且等於此執行個體的值，則為 true，否則為 false。</returns>
      <param name="obj">與此執行個體或 null 相互比較的物件。</param>
    </member>
    <member name="M:System.UIntPtr.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)">
      <summary>將不帶正負號指標的值加上位移。</summary>
      <returns>新的不帶正負號指標，反映將 <paramref name="pointer" /> 加上 <paramref name="offset" /> 的結果。</returns>
      <param name="pointer">要加上位移的不帶正負號指標。</param>
      <param name="offset">要加入的位移。</param>
    </member>
    <member name="M:System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)">
      <summary>判斷 <see cref="T:System.UIntPtr" /> 的兩個指定之執行個體是否相等。</summary>
      <returns>如果 <paramref name="value1" /> 等於 <paramref name="value2" /> 則為 true，否則為 false。</returns>
      <param name="value1">
        <see cref="T:System.UIntPtr" />。</param>
      <param name="value2">
        <see cref="T:System.UIntPtr" />。</param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr">
      <summary>將 32 位元不帶正負號整數的值轉換為 <see cref="T:System.UIntPtr" />。</summary>
      <returns>
        <see cref="T:System.UIntPtr" /> 的新執行個體，初始化為 <paramref name="value" />。</returns>
      <param name="value">32 位元不帶正負號的整數。</param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr">
      <summary>將 64 位元不帶正負號整數的值轉換為 <see cref="T:System.UIntPtr" />。</summary>
      <returns>
        <see cref="T:System.UIntPtr" /> 的新執行個體，初始化為 <paramref name="value" />。</returns>
      <param name="value">64 位元不帶正負號的整數。</param>
      <exception cref="T:System.OverflowException">在 32 位元的平台上，<paramref name="value" /> 太大，以致於無法代表 <see cref="T:System.UIntPtr" />。</exception>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64">
      <summary>將指定的 <see cref="T:System.UIntPtr" /> 值轉換為 64 位元不帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> 的內容。</returns>
      <param name="value">
        <see cref="T:System.UIntPtr" />。</param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*">
      <summary>[安全性關鍵] 將指定的 <see cref="T:System.UIntPtr" /> 值轉換為未指定型別的指標。</summary>
      <returns>
        <paramref name="value" /> 的內容。</returns>
      <param name="value">
        <see cref="T:System.UIntPtr" />。</param>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32">
      <summary>將指定的 <see cref="T:System.UIntPtr" /> 值轉換為 32 位元不帶正負號的整數。</summary>
      <returns>
        <paramref name="value" /> 的內容。</returns>
      <param name="value">
        <see cref="T:System.UIntPtr" />。</param>
      <exception cref="T:System.OverflowException">在 64 位元的平台上，<paramref name="value" /> 的值太大，以致於無法代表 32 位元不帶正負號的整數。</exception>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr">
      <summary>[安全性關鍵] 將未指定型別的指定指標轉換為 <see cref="T:System.UIntPtr" />。</summary>
      <returns>
        <see cref="T:System.UIntPtr" /> 的新執行個體，初始化為 <paramref name="value" />。</returns>
      <param name="value">未指定型別的指標。</param>
    </member>
    <member name="M:System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)">
      <summary>判斷 <see cref="T:System.UIntPtr" /> 的兩個指定之執行個體是否不相等。</summary>
      <returns>如果 <paramref name="value1" /> 不等於 <paramref name="value2" /> 則為 true，否則為 false。</returns>
      <param name="value1">
        <see cref="T:System.UIntPtr" />。</param>
      <param name="value2">
        <see cref="T:System.UIntPtr" />。</param>
    </member>
    <member name="M:System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)">
      <summary>將不帶正負號指標的值減去位移。</summary>
      <returns>新的不帶正負號指標，反映從 <paramref name="pointer" /> 減掉 <paramref name="offset" /> 的結果。</returns>
      <param name="pointer">要減去位移的不帶正負號指標。</param>
      <param name="offset">要減去的位移。</param>
    </member>
    <member name="P:System.UIntPtr.Size">
      <summary>取得此執行個體的大小。</summary>
      <returns>此平台上的指標或控制代碼的大小，以位元組為單位。此屬性的值在 32 位元平台上為 4，而在 64 位元平台上為 8。</returns>
    </member>
    <member name="M:System.UIntPtr.Subtract(System.UIntPtr,System.Int32)">
      <summary>將不帶正負號指標的值減去位移。</summary>
      <returns>新的不帶正負號指標，反映從 <paramref name="pointer" /> 減掉 <paramref name="offset" /> 的結果。</returns>
      <param name="pointer">要減去位移的不帶正負號指標。</param>
      <param name="offset">要減去的位移。</param>
    </member>
    <member name="M:System.UIntPtr.ToPointer">
      <summary>將此執行個體的值轉換為未指定型別的指標。</summary>
      <returns>
        <see cref="T:System.Void" /> 的指標，也就是含有未指定型別資料的記憶體指標。</returns>
    </member>
    <member name="M:System.UIntPtr.ToString">
      <summary>將此執行個體的數值轉換為它的對等字串表示。</summary>
      <returns>此執行個體值的字串表示。</returns>
    </member>
    <member name="M:System.UIntPtr.ToUInt32">
      <summary>將此執行個體的值轉換為 32 位元不帶正負號的整數。</summary>
      <returns>32 位元不帶正負號的整數，等於此執行個體的值。</returns>
      <exception cref="T:System.OverflowException">在 64 位元的平台上，此執行個體的值太大，以致於無法表示為 32 位元不帶正負號的整數。</exception>
    </member>
    <member name="M:System.UIntPtr.ToUInt64">
      <summary>將此執行個體的值轉換為 64 位元不帶正負號的整數。</summary>
      <returns>64 位元不帶正負號的整數，等於此執行個體的值。</returns>
    </member>
    <member name="F:System.UIntPtr.Zero">
      <summary>表示已經初始化為零的指標或控制代碼的唯讀欄位。</summary>
    </member>
    <member name="T:System.UnauthorizedAccessException">
      <summary>當作業系統因為 I/O 錯誤或特定類型的安全性錯誤而拒絕存取時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor">
      <summary>初始化 <see cref="T:System.UnauthorizedAccessException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.UnauthorizedAccessException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和導致此例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.UnauthorizedAccessException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.UnhandledExceptionEventArgs">
      <summary>提供在任何應用程式定義域中有未處理的例外狀況 (Exception) 時所引發之事件的資料。</summary>
    </member>
    <member name="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
      <summary>使用例外狀況物件和 Common Language Runtime 終止 (Termination) 旗標來初始化 <see cref="T:System.UnhandledExceptionEventArgs" /> 類別的新執行個體。</summary>
      <param name="exception">未處理的例外狀況。</param>
      <param name="isTerminating">如果執行階段已終止，則為 true；否則為 false。</param>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.ExceptionObject">
      <summary>取得未處理的例外狀況物件。</summary>
      <returns>未處理的例外狀況物件。</returns>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.IsTerminating">
      <summary>指出 Common Language Runtime 是否已終止。</summary>
      <returns>如果執行階段已終止則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.UnhandledExceptionEventHandler">
      <summary>[安全性關鍵] 表示將處理例外狀況 (Exception) 所引發之事件的方法，而該例外狀況不是由應用程式定義域處理。</summary>
      <param name="sender">未處理的例外狀況事件的來源。</param>
      <param name="e">事件資料。 </param>
    </member>
    <member name="T:System.ValueType">
      <summary>提供值型別 (Value Type) 的基底類別。</summary>
    </member>
    <member name="M:System.ValueType.#ctor">
      <summary>初始化 <see cref="T:System.ValueType" /> 類別的新執行個體。 </summary>
    </member>
    <member name="M:System.ValueType.Equals(System.Object)">
      <summary>指出此執行個體和指定的物件是否相等。</summary>
      <returns>如果 <paramref name="obj" /> 和此執行個體為同型別並表示相同的值則為 true，否則為 false。</returns>
      <param name="obj">要比較的另一個物件。</param>
    </member>
    <member name="M:System.ValueType.GetHashCode">
      <summary>傳回此執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數，其為此執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.ValueType.ToString">
      <summary>傳回此執行個體的完整限定型別名稱。</summary>
      <returns>包含完整型別名稱的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Version">
      <summary>表示組件、作業系統或 Common Language Runtime 的版本號碼。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32)">
      <summary>使用指定的主要和次要值來初始化 <see cref="T:System.Version" /> 類別的新執行個體。</summary>
      <param name="major">主要版本號碼。</param>
      <param name="minor">次要版本號碼。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" /> 或 <paramref name="minor" /> 小於零。</exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的主要、次要和組建值來初始化 <see cref="T:System.Version" /> 類別的新執行個體。</summary>
      <param name="major">主要版本號碼。</param>
      <param name="minor">次要版本號碼。</param>
      <param name="build">組建編號。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />、<paramref name="minor" /> 或 <paramref name="build" /> 小於零。</exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的主要、次要、組建和修訂編號來初始化 <see cref="T:System.Version" /> 類別的新執行個體。</summary>
      <param name="major">主要版本號碼。</param>
      <param name="minor">次要版本號碼。</param>
      <param name="build">組建編號。</param>
      <param name="revision">修訂編號。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />、<paramref name="minor" />、<paramref name="build" /> 或 <paramref name="revision" /> 小於零。</exception>
    </member>
    <member name="M:System.Version.#ctor(System.String)">
      <summary>使用指定的字串初始化 <see cref="T:System.Version" /> 類別的新執行個體。</summary>
      <param name="version">包含主要、次要、組建和修訂編號的字串，其中每個編號以句號字元 ('.') 隔開。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> 具有 2 個以下的元件或四個以上的元件。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">主要、次要、組建或修訂元件小於零。</exception>
      <exception cref="T:System.FormatException">至少有一個 <paramref name="version" /> 的元件未剖析成整數。</exception>
      <exception cref="T:System.OverflowException">至少有一個 <paramref name="version" /> 的元件表示大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="P:System.Version.Build">
      <summary>取得目前 <see cref="T:System.Version" /> 物件的版本號碼之組建元件值。</summary>
      <returns>組建編號；如果組建編號未定義，則為 -1。</returns>
    </member>
    <member name="M:System.Version.Clone">
      <summary>傳回新的 <see cref="T:System.Version" /> 物件，它的值和目前的 <see cref="T:System.Version" /> 物件相同。</summary>
      <returns>新的 <see cref="T:System.Object" />，其值為目前 <see cref="T:System.Version" /> 物件的複本。</returns>
    </member>
    <member name="M:System.Version.CompareTo(System.Object)">
      <summary>將目前 <see cref="T:System.Version" /> 物件與指定物件相比較，並傳回其相對值的指示。</summary>
      <returns>傳回值描述小於零目前的 <see cref="T:System.Version" /> 物件是 <paramref name="version" /> 之前的版本。零目前的 <see cref="T:System.Version" /> 物件與 <paramref name="version" /> 是相同版本。大於零目前的 <see cref="T:System.Version" /> 物件是 <paramref name="version" /> 的後續版本。-或-<paramref name="version" /> 為 null。</returns>
      <param name="version">要比較的物件，或 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> 不是 <see cref="T:System.Version" /> 型別。</exception>
    </member>
    <member name="M:System.Version.CompareTo(System.Version)">
      <summary>將目前 <see cref="T:System.Version" /> 物件與指定的 <see cref="T:System.Version" /> 物件相比較，並傳回其相對值的指示。</summary>
      <returns>傳回值描述小於零目前的 <see cref="T:System.Version" /> 物件是 <paramref name="value" /> 之前的版本。零目前的 <see cref="T:System.Version" /> 物件與 <paramref name="value" /> 是相同版本。大於零目前的 <see cref="T:System.Version" /> 物件是 <paramref name="value" /> 的後續版本。-或-<paramref name="value" /> 為 null。</returns>
      <param name="value">要與目前 <see cref="T:System.Version" /> 物件比較的 <see cref="T:System.Version" /> 物件，否則為 null。</param>
    </member>
    <member name="M:System.Version.Equals(System.Object)">
      <summary>傳回值，指出目前的 <see cref="T:System.Version" /> 物件是否等於指定的物件。</summary>
      <returns>如果目前 <see cref="T:System.Version" /> 物件和 <paramref name="obj" /> 都是 <see cref="T:System.Version" /> 物件，並且目前 <see cref="T:System.Version" /> 物件的每個元件都符合 <paramref name="obj" /> 的相對應元件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前的 <see cref="T:System.Version" /> 物件比較的物件，否則為 null。</param>
    </member>
    <member name="M:System.Version.Equals(System.Version)">
      <summary>傳回值，指出目前的 <see cref="T:System.Version" /> 物件和指定的 <see cref="T:System.Version" /> 物件是否表示相同的值。</summary>
      <returns>如果目前 <see cref="T:System.Version" /> 物件的每個元件都符合 <paramref name="obj" /> 參數的相對應元件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前 <see cref="T:System.Version" /> 物件比較的 <see cref="T:System.Version" /> 物件，否則為 null。</param>
    </member>
    <member name="M:System.Version.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Version" /> 物件的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.Version.Major">
      <summary>取得目前 <see cref="T:System.Version" /> 物件的版本號碼之主要元件值。</summary>
      <returns>主要版本號碼。</returns>
    </member>
    <member name="P:System.Version.MajorRevision">
      <summary>取得修訂編號的高 16 位元。</summary>
      <returns>16 位元帶正負號的整數。</returns>
    </member>
    <member name="P:System.Version.Minor">
      <summary>取得目前 <see cref="T:System.Version" /> 物件的版本號碼之次要元件值。</summary>
      <returns>次要版本號碼。</returns>
    </member>
    <member name="P:System.Version.MinorRevision">
      <summary>取得修訂編號的低 16 位元。</summary>
      <returns>16 位元帶正負號的整數。</returns>
    </member>
    <member name="M:System.Version.op_Equality(System.Version,System.Version)">
      <summary>判斷兩個指定的 <see cref="T:System.Version" /> 物件是否相等。</summary>
      <returns>如果 <paramref name="v1" /> 等於 <paramref name="v2" /> 則為 true，否則為 false。</returns>
      <param name="v1">第 1 個 <see cref="T:System.Version" /> 物件。</param>
      <param name="v2">第 2 個 <see cref="T:System.Version" /> 物件。</param>
    </member>
    <member name="M:System.Version.op_GreaterThan(System.Version,System.Version)">
      <summary>判斷第 1 個指定的 <see cref="T:System.Version" /> 物件是否大於第 2 個指定的 <see cref="T:System.Version" /> 物件。</summary>
      <returns>如果 <paramref name="v1" /> 大於 <paramref name="v2" /> 則為 true，否則為 false。</returns>
      <param name="v1">第 1 個 <see cref="T:System.Version" /> 物件。</param>
      <param name="v2">第 2 個 <see cref="T:System.Version" /> 物件。</param>
    </member>
    <member name="M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)">
      <summary>判斷第 1 個指定的 <see cref="T:System.Version" /> 物件是否大於或等於第 2 個指定的 <see cref="T:System.Version" /> 物件。</summary>
      <returns>如果 <paramref name="v1" /> 大於或等於 <paramref name="v2" /> 則為 true，否則為 false。</returns>
      <param name="v1">第 1 個 <see cref="T:System.Version" /> 物件。</param>
      <param name="v2">第 2 個 <see cref="T:System.Version" /> 物件。</param>
    </member>
    <member name="M:System.Version.op_Inequality(System.Version,System.Version)">
      <summary>判斷兩個指定的 <see cref="T:System.Version" /> 物件是否不相等。</summary>
      <returns>如果 <paramref name="v1" /> 不等於 <paramref name="v2" /> 則為 true，否則為 false。</returns>
      <param name="v1">第 1 個 <see cref="T:System.Version" /> 物件。</param>
      <param name="v2">第 2 個 <see cref="T:System.Version" /> 物件。</param>
    </member>
    <member name="M:System.Version.op_LessThan(System.Version,System.Version)">
      <summary>判斷第 1 個指定的 <see cref="T:System.Version" /> 物件是否小於第 2 個指定的 <see cref="T:System.Version" /> 物件。</summary>
      <returns>如果 <paramref name="v1" /> 小於 <paramref name="v2" /> 則為 true，否則為 false。</returns>
      <param name="v1">第 1 個 <see cref="T:System.Version" /> 物件。</param>
      <param name="v2">第 2 個 <see cref="T:System.Version" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> 為 null。</exception>
    </member>
    <member name="M:System.Version.op_LessThanOrEqual(System.Version,System.Version)">
      <summary>判斷第 1 個指定的 <see cref="T:System.Version" /> 物件是否小於或等於第 2 個 <see cref="T:System.Version" /> 物件。</summary>
      <returns>如果 <paramref name="v1" /> 小於或等於 <paramref name="v2" /> 則為 true，否則為 false。</returns>
      <param name="v1">第 1 個 <see cref="T:System.Version" /> 物件。</param>
      <param name="v2">第 2 個 <see cref="T:System.Version" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> 為 null。</exception>
    </member>
    <member name="M:System.Version.Parse(System.String)">
      <summary>將版本號碼的字串表示轉換為對等的 <see cref="T:System.Version" /> 物件。</summary>
      <returns>物件，相當於 <paramref name="input" /> 參數中指定的版本號碼。</returns>
      <param name="input">字串，包含要轉換的版本號碼。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 具有兩個以下或四個以上的版本元件。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="input" /> 中的至少一個元件小於零。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 中的至少一個元件不是整數。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 中的至少一個元件表示大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
    </member>
    <member name="P:System.Version.Revision">
      <summary>取得目前 <see cref="T:System.Version" /> 物件的版本號碼之修訂元件值。</summary>
      <returns>修訂編號；如果修訂編號未定義，則為 -1。</returns>
    </member>
    <member name="M:System.Version.ToString">
      <summary>將目前 <see cref="T:System.Version" /> 物件的值轉換為它的對等 <see cref="T:System.String" /> 表示。</summary>
      <returns>目前 <see cref="T:System.Version" /> 物件的主要、次要、組建和修訂元件值的 <see cref="T:System.String" /> 表示，如下列格式所述。每個元件是以句號字元 ('.') 隔開。方括弧 ('[' 和 ']') 指示如果未定義則不會在傳回值中出現的元件：major.minor[.build[.revision]]例如，如果您使用建構函式 Version(1,1) 建立 <see cref="T:System.Version" /> 物件，則傳回字串是 "1.1"。如果您使用建構函式 Version(1,3,4,2) 建立 <see cref="T:System.Version" /> 物件，則傳回字串是 "1.3.4.2"。</returns>
    </member>
    <member name="M:System.Version.ToString(System.Int32)">
      <summary>將目前 <see cref="T:System.Version" /> 物件的值轉換為它的對等 <see cref="T:System.String" /> 表示。指定的計數指示要傳回的元件數目。</summary>
      <returns>目前 <see cref="T:System.Version" /> 物件的主要、次要、組建和修訂元件值的 <see cref="T:System.String" /> 表示，每個元件都以句號字元 ('.') 隔開。<paramref name="fieldCount" /> 參數會判斷有多少元件傳回。fieldCount傳回值0 空字串 ("")。1 major2 major.minor3 major.minor.build4 major.minor.build.revision例如，如果您使用建構函式 Version(1,3,5) 建立 <see cref="T:System.Version" /> 物件，則 ToString(2) 會傳回 "1.3"，ToString(4) 則會擲回例外狀況。</returns>
      <param name="fieldCount">要傳回的元件數目。<paramref name="fieldCount" /> 的範圍從 0 到 4。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldCount" /> 小於 0 或大於 4。-或-<paramref name="fieldCount" /> 大於在目前 <see cref="T:System.Version" /> 物件中定義的元件數目。</exception>
    </member>
    <member name="M:System.Version.TryParse(System.String,System.Version@)">
      <summary>嘗試將版本號碼的字串表示轉換為對等的 <see cref="T:System.Version" /> 物件，並傳回表示轉換是否成功的值。</summary>
      <returns>如果成功地轉換 <paramref name="input" /> 參數則為 true，否則為 false。</returns>
      <param name="input">字串，包含要轉換的版本號碼。</param>
      <param name="result">當此方法傳回時，如果轉換成功，會包含與 <paramref name="input" /> 中所包含之數字相等的 <see cref="T:System.Version" />，如果轉換失敗，則包含主要和次要版本號碼都是零的 <see cref="T:System.Version" /> 物件。</param>
    </member>
    <member name="T:System.Void">
      <summary>為不傳回任何值的方法指定傳回值型別 (Value Type)。</summary>
    </member>
    <member name="T:System.WeakReference">
      <summary>表示弱式參考，即在參考物件的同時，仍允許系統透過記憶體回收來回收該物件。</summary>
    </member>
    <member name="M:System.WeakReference.#ctor">
      <summary>初始化 <see cref="T:System.WeakReference" /> 類別的新執行個體。此建構函式 (Constructor) 多載不能在 XAML 應用程式中實作。</summary>
      <exception cref="T:System.NotImplementedException">未實作此建構函式。</exception>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object)">
      <summary>參考指定的物件來初始化 <see cref="T:System.WeakReference" /> 類別的新執行個體。</summary>
      <param name="target">要追蹤的物件或 null。</param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
      <summary>參考指定的物件，並使用指定的重新恢復狀態追蹤 (Tracking)來初始化 <see cref="T:System.WeakReference" /> 類別的新執行個體。</summary>
      <param name="target">要追蹤的物件。</param>
      <param name="trackResurrection">指出何時停止追蹤物件。若為 true，則會在最終處理之後追蹤物件；若為 false，則只會追蹤物件到最終處理為止。</param>
    </member>
    <member name="M:System.WeakReference.Finalize">
      <summary>捨棄對目前 <see cref="T:System.WeakReference" /> 物件所表示之目標的參考。</summary>
    </member>
    <member name="P:System.WeakReference.IsAlive">
      <summary>取得目前 <see cref="T:System.WeakReference" /> 物件所參考的物件是否已進行記憶體回收的指示。</summary>
      <returns>如果目前 <see cref="T:System.WeakReference" /> 物件所參考的物件尚未進行記憶體回收，且仍可存取則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.WeakReference.Target">
      <summary>取得或設定目前 <see cref="T:System.WeakReference" /> 物件所參考的物件 (目標)。</summary>
      <returns>如果目前 <see cref="T:System.WeakReference" /> 物件所參考的物件已進行記憶體回收，則為 null，否則為目前 <see cref="T:System.WeakReference" /> 物件所參考的物件參考。</returns>
      <exception cref="T:System.InvalidOperationException">目標物件的參考無效。如果值是 null 參考，或者如果物件已在設定作業期間做最終處理，在設定這項屬性的同時，可能會傳回此例外狀況。</exception>
    </member>
    <member name="P:System.WeakReference.TrackResurrection">
      <summary>取得指示，瞭解是否要對目前 <see cref="T:System.WeakReference" /> 物件所參考的物件，在執行最終處理之後再進行追蹤。</summary>
      <returns>如果目前 <see cref="T:System.WeakReference" /> 物件所參考的物件在執行最終處理之後會受到追蹤則為 true，如果只針對該物件追蹤到最終處理為止，則為 false。</returns>
    </member>
    <member name="T:System.WeakReference`1">
      <summary>表示具備弱型別參考，即在參考物件的同時，仍允許系統透過記憶體回收來回收該物件。</summary>
      <typeparam name="T">參考之物件的類型。</typeparam>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0)">
      <summary>參考指定的物件來初始化 <see cref="T:System.WeakReference`1" /> 類別的新執行個體。</summary>
      <param name="target">要參考的物件，或 null。</param>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0,System.Boolean)">
      <summary>參考指定的物件，並使用指定的重新恢復狀態追蹤 (Tracking)來初始化 <see cref="T:System.WeakReference`1" /> 類別的新執行個體。</summary>
      <param name="target">要參考的物件，或 null。</param>
      <param name="trackResurrection">true 可以在物件最終處理之後追蹤物件，false 表示只追蹤物件到最終處理為止。</param>
    </member>
    <member name="M:System.WeakReference`1.SetTarget(`0)">
      <summary>設定這個 <see cref="T:System.WeakReference`1" /> 物件所參考的目標物件。</summary>
      <param name="target">新的目標物件。</param>
    </member>
    <member name="M:System.WeakReference`1.TryGetTarget(`0@)">
      <summary>嘗試擷取目前 <see cref="T:System.WeakReference`1" /> 物件所參考的目標物件。</summary>
      <returns>如果已擷取目標則為 true，否則為 false。</returns>
      <param name="target">當此方法傳回時，包含目標物件 (如果有的話)。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="T:System.Collections.BitArray">
      <summary>管理以布林 (Boolean) 表示的位元值之精簡陣列，其中 true 表示位元為開啟 (1)，而 false 表示位元為關閉 (0)。</summary>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Boolean[])">
      <summary>初始化 <see cref="T:System.Collections.BitArray" /> 類別的新執行個體，其包含的位元值是從指定的布林陣列複製過來的。</summary>
      <param name="values">要複製的布林值陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Byte[])">
      <summary>初始化 <see cref="T:System.Collections.BitArray" /> 類別的新執行個體，其包含的位元值是從指定的位元組陣列複製過來的。</summary>
      <param name="bytes">包含要複製值的位元組陣列，其中每一個位元組表示 8 個連續位元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> 的長度大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
      <summary>初始化 <see cref="T:System.Collections.BitArray" /> 類別的新執行個體，其包含的位元值是從指定的 <see cref="T:System.Collections.BitArray" /> 複製過來的。</summary>
      <param name="bits">要複製的 <see cref="T:System.Collections.BitArray" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.BitArray" /> 類別的新執行個體，此執行個體可保存指定數目的位元值 (其初始設定為 false)。</summary>
      <param name="length">在新 <see cref="T:System.Collections.BitArray" /> 中的位元值數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小於零。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
      <summary>初始化 <see cref="T:System.Collections.BitArray" /> 類別的新執行個體，其可以保存指定位元值數目 (初始設定為指定的值)。</summary>
      <param name="length">在新 <see cref="T:System.Collections.BitArray" /> 中的位元值數目。</param>
      <param name="defaultValue">要指派給每一個位元的布林值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小於零。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32[])">
      <summary>初始化 <see cref="T:System.Collections.BitArray" /> 類別的新執行個體，其包含的位元值是從指定的 32 位元整數陣列複製過來的。</summary>
      <param name="values">包含要複製值的整數陣列，其中每一個整數表示 32 個連續位元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="values" /> 的長度大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Collections.BitArray.And(System.Collections.BitArray)">
      <summary>在目前 <see cref="T:System.Collections.BitArray" /> 中的元素上，針對指定的 <see cref="T:System.Collections.BitArray" /> 中的對應元素，執行位元的 AND 運算。</summary>
      <returns>
        <see cref="T:System.Collections.BitArray" />，包含在目前 <see cref="T:System.Collections.BitArray" /> 中的元素上，針對指定的 <see cref="T:System.Collections.BitArray" /> 中的對應元素執行位元的 AND 運算之結果。</returns>
      <param name="value">
        <see cref="T:System.Collections.BitArray" />，用來執行位元的 AND 運算。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 和目前的 <see cref="T:System.Collections.BitArray" /> 項目數目不相同。</exception>
    </member>
    <member name="M:System.Collections.BitArray.Clone">
      <summary>建立 <see cref="T:System.Collections.BitArray" /> 的淺層複本 (Shallow Copy)。</summary>
      <returns>
        <see cref="T:System.Collections.BitArray" /> 的淺層複本。</returns>
    </member>
    <member name="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
      <summary>從目標陣列的指定索引開始，複製整個 <see cref="T:System.Collections.BitArray" /> 至相容的一維 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.BitArray" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-來源 <see cref="T:System.Collections.BitArray" /> 中的項目數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
      <exception cref="T:System.InvalidCastException">來源 <see cref="T:System.Collections.BitArray" /> 的型別無法自動轉換為目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.BitArray.Count">
      <summary>取得 <see cref="T:System.Collections.BitArray" /> 中所包含的元素數。</summary>
      <returns>
        <see cref="T:System.Collections.BitArray" /> 中所包含的項目數。</returns>
    </member>
    <member name="M:System.Collections.BitArray.Get(System.Int32)">
      <summary>取得 <see cref="T:System.Collections.BitArray" /> 中指定位置的位元值。</summary>
      <returns>在 <paramref name="index" /> 位置的位元值。</returns>
      <param name="index">要取得的值的以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。-或-<paramref name="index" /> 大於或等於 <see cref="T:System.Collections.BitArray" /> 中的項目數。</exception>
    </member>
    <member name="M:System.Collections.BitArray.GetEnumerator">
      <summary>傳回逐一查看 <see cref="T:System.Collections.BitArray" /> 的列舉程式。</summary>
      <returns>整個 <see cref="T:System.Collections.BitArray" /> 的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.BitArray" /> 是否為唯讀。</summary>
      <returns>此屬性永遠是 false。</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsSynchronized">
      <summary>取得值，指出對 <see cref="T:System.Collections.BitArray" /> 的存取是否為同步 (安全執行緒)。</summary>
      <returns>此屬性永遠為 false。</returns>
    </member>
    <member name="P:System.Collections.BitArray.Item(System.Int32)">
      <summary>取得或設定在 <see cref="T:System.Collections.BitArray" /> 中特定位置的位元值。</summary>
      <returns>在 <paramref name="index" /> 位置的位元值。</returns>
      <param name="index">要取得或設定的值以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。-或-<paramref name="index" /> 等於或大於 <see cref="P:System.Collections.BitArray.Count" />。</exception>
    </member>
    <member name="P:System.Collections.BitArray.Length">
      <summary>取得或設定 <see cref="T:System.Collections.BitArray" /> 中的元素數目。</summary>
      <returns>
        <see cref="T:System.Collections.BitArray" /> 中的元素數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性是設成小於 0 的值。</exception>
    </member>
    <member name="M:System.Collections.BitArray.Not">
      <summary>反轉目前 <see cref="T:System.Collections.BitArray" /> 中的位元值，使設定為 true 的項目變更為 false，而設定為 false 的項目變更為 true。</summary>
      <returns>具有已轉換位元值的目前執行個體。</returns>
    </member>
    <member name="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
      <summary>在目前 <see cref="T:System.Collections.BitArray" /> 中的元素上，針對指定的 <see cref="T:System.Collections.BitArray" /> 中的對應元素，執行位元的 OR 運算。</summary>
      <returns>
        <see cref="T:System.Collections.BitArray" />，包含在目前 <see cref="T:System.Collections.BitArray" /> 中的元素上，針對指定的 <see cref="T:System.Collections.BitArray" /> 中的對應元素執行位元的 OR 運算之結果。</returns>
      <param name="value">
        <see cref="T:System.Collections.BitArray" />，用來執行位元的 OR 運算。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 和目前的 <see cref="T:System.Collections.BitArray" /> 項目數目不相同。</exception>
    </member>
    <member name="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
      <summary>將 <see cref="T:System.Collections.BitArray" /> 中特定位置的位元設定為指定值。</summary>
      <param name="index">要設定之位元的以零為起始的索引。</param>
      <param name="value">要指派給位元的布林值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。-或-<paramref name="index" /> 大於或等於 <see cref="T:System.Collections.BitArray" /> 中的項目數。</exception>
    </member>
    <member name="M:System.Collections.BitArray.SetAll(System.Boolean)">
      <summary>將 <see cref="T:System.Collections.BitArray" /> 中的所有位元設定為指定值。</summary>
      <param name="value">要指派給所有位元的布林值。</param>
    </member>
    <member name="P:System.Collections.BitArray.SyncRoot">
      <summary>取得可用來對 <see cref="T:System.Collections.BitArray" /> 進行同步存取的物件。</summary>
      <returns>可用來對 <see cref="T:System.Collections.BitArray" /> 同步存取的物件。</returns>
    </member>
    <member name="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
      <summary>在目前 <see cref="T:System.Collections.BitArray" /> 中的元素上，針對指定的 <see cref="T:System.Collections.BitArray" /> 中的對應元素，執行位元互斥 OR 運算。</summary>
      <returns>
        <see cref="T:System.Collections.BitArray" />，包含在目前 <see cref="T:System.Collections.BitArray" /> 中的元素上，針對指定的 <see cref="T:System.Collections.BitArray" /> 中的對應元素所執行的位元互斥 OR 運算結果。</returns>
      <param name="value">
        <see cref="T:System.Collections.BitArray" />，用來執行位元互斥 OR 運算。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 和目前的 <see cref="T:System.Collections.BitArray" /> 項目數目不相同。 </exception>
    </member>
    <member name="T:System.Collections.DictionaryEntry">
      <summary>定義可設定或擷取的字典索引鍵/值組。</summary>
    </member>
    <member name="M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)">
      <summary>初始化具有指定索引鍵和值之 <see cref="T:System.Collections.DictionaryEntry" /> 型別的執行個體。</summary>
      <param name="key">在每個索引鍵/值組配對中定義的物件。</param>
      <param name="value">與 <paramref name="key" /> 關聯的定義。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null，而且 .NET Framework 版本為 1.0 或 1.1。</exception>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Key">
      <summary>取得或設定索引鍵/值組中的索引鍵。</summary>
      <returns>索引鍵/值組中的索引鍵。</returns>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Value">
      <summary>取得或設定索引鍵/值組中的值。</summary>
      <returns>索引鍵/值組中的值。</returns>
    </member>
    <member name="T:System.Collections.ICollection">
      <summary>定義所有非泛型集合的大小、列舉程式和同步方法。</summary>
    </member>
    <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Array" /> 索引開始，將 <see cref="T:System.Collections.ICollection" /> 的項目複製至 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-來源 <see cref="T:System.Collections.ICollection" /> 中的元素數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。-或- 來源 <see cref="T:System.Collections.ICollection" /> 的型別無法自動轉換為目的 <paramref name="array" /> 的型別<paramref name="." /></exception>
    </member>
    <member name="P:System.Collections.ICollection.Count">
      <summary>取得 <see cref="T:System.Collections.ICollection" /> 中所包含的元素數。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 中所包含的項目數。</returns>
    </member>
    <member name="P:System.Collections.ICollection.IsSynchronized">
      <summary>取得值，指出對 <see cref="T:System.Collections.ICollection" /> 的存取是否為同步 (安全執行緒)。</summary>
      <returns>如果 <see cref="T:System.Collections.ICollection" /> 的存取已同步處理 (執行緒安全) 則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Collections.ICollection.SyncRoot">
      <summary>取得可用來對 <see cref="T:System.Collections.ICollection" /> 進行同步存取的物件。</summary>
      <returns>可用來對 <see cref="T:System.Collections.ICollection" /> 同步存取的物件。</returns>
    </member>
    <member name="T:System.Collections.IComparer">
      <summary>公開比較兩個物件的方法。</summary>
    </member>
    <member name="M:System.Collections.IComparer.Compare(System.Object,System.Object)">
      <summary>比較兩個物件並傳回值，指出一個物件是小於、等於還是大於另一個物件。</summary>
      <returns>帶正負號的整數，表示 <paramref name="x" /> 和 <paramref name="y" /> 的相對值，如下表所示。Value狀況小於零<paramref name="x" /> 小於 <paramref name="y" />。零<paramref name="x" /> 等於 <paramref name="y" />。大於零<paramref name="x" /> 大於 <paramref name="y" />。</returns>
      <param name="x">要比較的第 1 個物件。</param>
      <param name="y">要比較的第 2 個物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 和 <paramref name="y" /> 都不實作 <see cref="T:System.IComparable" /> 介面。-或-<paramref name="x" /> 和 <paramref name="y" /> 是不同的型別，而且二者都不能處理與另外一方的比較。 </exception>
    </member>
    <member name="T:System.Collections.IDictionary">
      <summary>表示索引鍵/值組的非泛型集合。</summary>
    </member>
    <member name="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
      <summary>將隨附有索引鍵和值的元素加入至 <see cref="T:System.Collections.IDictionary" /> 物件。</summary>
      <param name="key">
        <see cref="T:System.Object" />，用做要加入之項目的索引鍵。</param>
      <param name="value">
        <see cref="T:System.Object" />，做為要加入之項目的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">具有相同索引鍵的項目已經存在 <see cref="T:System.Collections.IDictionary" /> 物件中。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> 是唯讀的。-或-<see cref="T:System.Collections.IDictionary" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.IDictionary.Clear">
      <summary>從 <see cref="T:System.Collections.IDictionary" /> 物件移除所有元素。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> 物件是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.IDictionary.Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IDictionary" /> 物件是否包含具有指定索引鍵的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 包含具有此索引鍵的項目則為 true，否則為 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.IDictionary" /> 物件中尋找的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.IDictionary.GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.IDictionary" /> 物件的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 物件的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 物件。</returns>
    </member>
    <member name="P:System.Collections.IDictionary.IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IDictionary" /> 物件大小是否固定。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 物件有固定的大小則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Collections.IDictionary.IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.IDictionary" /> 物件是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 物件是唯讀的，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Collections.IDictionary.Item(System.Object)">
      <summary>取得或設定具有指定機碼的元素。</summary>
      <returns>具有所指定索引鍵的元素。</returns>
      <param name="key">要取得或設定之元素的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">已設定該屬性，<see cref="T:System.Collections.IDictionary" /> 物件是唯讀的。-或-屬性已設定，<paramref name="key" /> 不存在於集合中，而且 <see cref="T:System.Collections.IDictionary" /> 有固定的大小。</exception>
    </member>
    <member name="P:System.Collections.IDictionary.Keys">
      <summary>取得 <see cref="T:System.Collections.ICollection" /> 物件，含有 <see cref="T:System.Collections.IDictionary" /> 之索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 物件，其中包含 <see cref="T:System.Collections.IDictionary" /> 物件的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.IDictionary.Remove(System.Object)">
      <summary>將有指定索引鍵的元素從 <see cref="T:System.Collections.IDictionary" /> 物件移除。</summary>
      <param name="key">要移除之元素的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> 物件是唯讀的。-或-<see cref="T:System.Collections.IDictionary" /> 具有固定的大小。</exception>
    </member>
    <member name="P:System.Collections.IDictionary.Values">
      <summary>取得 <see cref="T:System.Collections.ICollection" /> 物件，其中含有 <see cref="T:System.Collections.IDictionary" /> 物件中的值。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 物件，其中含有 <see cref="T:System.Collections.IDictionary" /> 物件中的值。</returns>
    </member>
    <member name="T:System.Collections.IDictionaryEnumerator">
      <summary>列舉非泛型字典的元素。</summary>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Entry">
      <summary>取得目前字典項目的索引鍵和值。</summary>
      <returns>
        <see cref="T:System.Collections.DictionaryEntry" />，含有目前字典項目的索引鍵和值。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 位於字典的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Key">
      <summary>取得目前字典項目的索引鍵。</summary>
      <returns>目前列舉元素的索引鍵。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 位於字典的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Value">
      <summary>取得目前字典元素的值。</summary>
      <returns>目前列舉元素的值。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 位於字典的第 1 個項目之前，或最後 1 個項目之後。 </exception>
    </member>
    <member name="T:System.Collections.IEnumerable">
      <summary>公開可支援簡易逐一查看非泛型集合的列舉程式。</summary>
    </member>
    <member name="M:System.Collections.IEnumerable.GetEnumerator">
      <summary>傳回在集合中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 物件，用於逐一查看集合。</returns>
    </member>
    <member name="T:System.Collections.IEnumerator">
      <summary>支援非泛型集合上的簡單逐一查看。</summary>
    </member>
    <member name="P:System.Collections.IEnumerator.Current">
      <summary>取得集合中的目前元素。</summary>
      <returns>集合中的目前元素。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。-或-在建立列舉程式之後，會修改集合。</exception>
    </member>
    <member name="M:System.Collections.IEnumerator.MoveNext">
      <summary>讓列舉程式前進至集合的下一個元素。</summary>
      <returns>如果列舉程式成功地前移至下一個元素則為 true，如果列舉程式已超過集合的結尾，則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。</exception>
    </member>
    <member name="M:System.Collections.IEnumerator.Reset">
      <summary>設定列舉程式至它的初始位置，這是在集合中第 1 個元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。</exception>
    </member>
    <member name="T:System.Collections.IEqualityComparer">
      <summary>定義支援物件之相等比較的方法。</summary>
    </member>
    <member name="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)">
      <summary>判斷指定的物件是否相等。</summary>
      <returns>如果指定的物件相等則為 true，否則為 false。</returns>
      <param name="x">要比較的第 1 個物件。</param>
      <param name="y">要比較的第 2 個物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 和 <paramref name="y" /> 是不同的型別，而且二者都不能處理與另外一方的比較。</exception>
    </member>
    <member name="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)">
      <summary>傳回指定物件的雜湊程式碼。</summary>
      <returns>指定物件的雜湊程式碼。</returns>
      <param name="obj">要傳回雜湊程式碼的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的型別是參考型別，而 <paramref name="obj" /> 為 null。</exception>
    </member>
    <member name="T:System.Collections.IList">
      <summary>表示可以個別由索引存取之物件的非泛型集合。</summary>
    </member>
    <member name="M:System.Collections.IList.Add(System.Object)">
      <summary>將項目加入至 <see cref="T:System.Collections.IList" />。</summary>
      <returns>新項目的插入位置。</returns>
      <param name="value">要加入至 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。-或-<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.IList.Clear">
      <summary>移除 <see cref="T:System.Collections.IList" /> 中的所有項目。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.IList.Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到 <see cref="T:System.Object" /> 則為 true，否則為 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Collections.IList.IndexOf(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 中特定項目的索引。</summary>
      <returns>如果可在清單中找到，則為 <paramref name="value" /> 的索引；否則為 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
      <summary>將項目插入至 <see cref="T:System.Collections.IList" /> 的指定索引處。</summary>
      <param name="index">應插入 <paramref name="value" /> 以零為起始的索引。</param>
      <param name="value">要插入至 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。-或-<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> 是 <see cref="T:System.Collections.IList" /> 中的 null 參考。</exception>
    </member>
    <member name="P:System.Collections.IList.IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 大小是否固定。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 有固定的大小則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Collections.IList.IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 是唯讀的，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Collections.IList.Item(System.Int32)">
      <summary>取得或設定指定索引上的元素。</summary>
      <returns>位於指定索引的元素。</returns>
      <param name="index">要取得或設定之元素以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">屬性已設定且 <see cref="T:System.Collections.IList" /> 為唯讀的。</exception>
    </member>
    <member name="M:System.Collections.IList.Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.IList" /> 移除第一次出現的特定物件。</summary>
      <param name="value">要從 <see cref="T:System.Collections.IList" /> 移除的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。-或-<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
      <summary>移除所指定索引處的 <see cref="T:System.Collections.IList" /> 項目。</summary>
      <param name="index">要移除之項目以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 是唯讀的。-或-<see cref="T:System.Collections.IList" /> 具有固定的大小。 </exception>
    </member>
    <member name="T:System.Collections.IStructuralComparable">
      <summary>支援集合物件的結構比較。</summary>
    </member>
    <member name="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)">
      <summary>決定目前的集合物件是否會依照排序順序，在其他物件之前、和其他物件在相同位置中發生，或者會接在其他物件之後。</summary>
      <returns>整數，表示目前集合物件與 <paramref name="other" /> 的關聯性，如下表所示。傳回值Description-1目前的執行個體在 <paramref name="other" /> 之前。0目前的執行個體與 <paramref name="other" /> 相等。1目前的執行個體在 <paramref name="other" /> 之後。</returns>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">物件，此物件會比較目前集合物件的成員與對應的 <paramref name="other" /> 成員。</param>
      <exception cref="T:System.ArgumentException">此執行個體和 <paramref name="other" /> 屬於不相同的型別。</exception>
    </member>
    <member name="T:System.Collections.IStructuralEquatable">
      <summary>定義支援物件之結構相等比較的方法。</summary>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>判斷物件與目前的執行個體在結構上是否相等。</summary>
      <returns>如果兩個物件相等則為 true，否則為 false。</returns>
      <param name="other">要與目前執行個體比較的物件。</param>
      <param name="comparer">決定目前執行個體是否與 <paramref name="other" /> 相等的物件。</param>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)">
      <summary>傳回目前執行個體的雜湊碼。</summary>
      <returns>目前執行個體的雜湊程式碼。</returns>
      <param name="comparer">計算目前物件之雜湊碼的物件。</param>
    </member>
    <member name="T:System.Collections.StructuralComparisons">
      <summary>提供物件，用以執行兩個集合物件的結構比較。</summary>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralComparer">
      <summary>取得預先定義的物件，這個物件會執行兩個物件的結構比較。</summary>
      <returns>預先定義的物件，用來執行兩個集合物件的結構比較。</returns>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralEqualityComparer">
      <summary>取得預先定義的物件，這個物件會比較兩個物件的結構是否相等。</summary>
      <returns>預先定義的物件，用來比較兩個集合物件的結構是否相等。</returns>
    </member>
    <member name="T:System.Collections.Generic.Comparer`1">
      <summary>提供基底類別 (Base Class) 用於 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型介面的實作。</summary>
      <typeparam name="T">要比較之物件的型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.Comparer`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)">
      <summary>在衍生類別中覆寫時，比較型別相同的兩個物件並傳回值，指出一個物件是小於、等於還是大於另一個物件。</summary>
      <returns>帶正負號的整數，表示 x 和 y 的相對值，如下表所示。值狀況小於零<paramref name="x" /> 小於 <paramref name="y" />。零<paramref name="x" /> 等於 <paramref name="y" />。大於零<paramref name="x" /> 大於 <paramref name="y" />。</returns>
      <param name="x">要比較的第 1 個物件。</param>
      <param name="y">要比較的第 2 個物件。</param>
      <exception cref="T:System.ArgumentException">型別 <paramref name="T" /> 不實作 <see cref="T:System.IComparable`1" /> 泛型介面或 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})">
      <summary>使用指定的比較建立比較子。</summary>
      <returns>新的比較子。</returns>
      <param name="comparison">要使用的比較。</param>
    </member>
    <member name="P:System.Collections.Generic.Comparer`1.Default">
      <summary>傳回泛型引數指定之型別的預設排序次序比較子 (Comparer)。</summary>
      <returns>物件，繼承 <see cref="T:System.Collections.Generic.Comparer`1" />，並用做型別 <paramref name="T" /> 的排序次序比較子。</returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary>比較兩個物件並傳回值，指出一個物件是小於、等於還是大於另一個物件。</summary>
      <returns>帶正負號的整數，表示 x 和 y 的相對值，如下表所示。值狀況小於零<paramref name="x" /> 小於 <paramref name="y" />。零<paramref name="x" /> 等於 <paramref name="y" />。大於零<paramref name="x" /> 大於 <paramref name="y" />。</returns>
      <param name="x">要比較的第 1 個物件。</param>
      <param name="y">要比較的第 2 個物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 或 <paramref name="y" /> 的型別無法轉型為型別 <paramref name="T" />。-或-<paramref name="x" /> 和 <paramref name="y" /> 不實作 <see cref="T:System.IComparable`1" /> 泛型介面或 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2">
      <summary>表示索引鍵和值的集合。</summary>
      <typeparam name="TKey">字典中的索引鍵型別。</typeparam>
      <typeparam name="TValue">字典中的值型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 類別的新執行個體，該執行個體是空的、具有預設初始容量，且使用索引鍵型別的預設相等比較子。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 類別的新執行個體，其包含複製自指定 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的元素，且使用索引鍵型別的預設相等比較子。</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，要將其元素複製到新的 <see cref="T:System.Collections.Generic.Dictionary`2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一或多個重複的索引鍵。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 類別的新執行個體，其包含複製自指定 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的元素，且使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，要將其元素複製到新的 <see cref="T:System.Collections.Generic.Dictionary`2" />。</param>
      <param name="comparer">在比較索引鍵時所使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 實作，或是 null 以便對索引鍵的型別使用預設 <see cref="T:System.Collections.Generic.EqualityComparer`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一或多個重複的索引鍵。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 類別的新執行個體，此執行個體是空白的、具有預設的初始容量，並使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="comparer">在比較索引鍵時所使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 實作，或是 null 以便對索引鍵的型別使用預設 <see cref="T:System.Collections.Generic.EqualityComparer`1" />。</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 類別的新執行個體，該執行個體是空的、具有指定初始容量，且使用索引鍵型別的預設相等比較子。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 可包含的元素初始數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於 0。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2" /> 類別的新執行個體，此執行個體是空白的、具有指定的初始容量，並使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 可包含的元素初始數目。</param>
      <param name="comparer">在比較索引鍵時所使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 實作，或是 null 以便對索引鍵的型別使用預設 <see cref="T:System.Collections.Generic.EqualityComparer`1" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於 0。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
      <summary>將指定的索引鍵和值加入字典。</summary>
      <param name="key">要加入的元素的索引鍵。</param>
      <param name="value">要加入之項目的值。在參考型別中，此值可以是 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 中已存在具有相同索引鍵的項目。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Clear">
      <summary>從 <see cref="T:System.Collections.Generic.Dictionary`2" /> 移除所有索引鍵和值。</summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Comparer">
      <summary>取得 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />，用於判斷字典的索引鍵是否相等。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型介面實作，用於判斷目前 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的索引鍵是否相等，並提供索引鍵的雜湊值。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
      <summary>判斷 <see cref="T:System.Collections.Generic.Dictionary`2" /> 是否包含指定的索引鍵。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.Dictionary`2" /> 包含具有所指定索引鍵的項目則為 true，否則為 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中尋找的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
      <summary>判斷 <see cref="T:System.Collections.Generic.Dictionary`2" /> 是否包含特定值。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.Dictionary`2" /> 包含具有所指定值的項目則為 true，否則為 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中尋找的值。參考型別的值可以是 null。</param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Count">
      <summary>取得 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中所包含的索引鍵/值組數目。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 中所包含的索引鍵/值組數目。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
      <summary>傳回逐一查看 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> 結構。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Item(`0)">
      <summary>取得或設定與指定的索引鍵相關聯的值。</summary>
      <returns>與指定的索引鍵相關聯的值。如果找不到指定的索引鍵，則取得作業會擲回 <see cref="T:System.Collections.Generic.KeyNotFoundException" />，且設定作業會使用指定的索引鍵建立新元素。</returns>
      <param name="key">要取得或設定之值的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">會擷取屬性，且 <paramref name="key" /> 不存在於集合中。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Keys">
      <summary>取得集合，包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" />，包含 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 中的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
      <summary>移除 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中具有指定索引鍵的值。</summary>
      <returns>如果已成功找到並移除項目則為 true，否則為 false。如果在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中找不到 <paramref name="key" />，這個方法會傳回 false。</returns>
      <param name="key">要移除之元素的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>將指定的值加入具有指定索引鍵的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 結構，表示要加入至 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的索引鍵和值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyValuePair" /> 的索引鍵為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 中已存在具有相同索引鍵的項目。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>判斷 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定索引鍵和值。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找到 <paramref name="keyValuePair" />，則為 true，否則為 false。</returns>
      <param name="keyValuePair">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中尋找的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 結構。</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>從指定的陣列索引處開始，將 <see cref="T:System.Collections.Generic.ICollection`1" /> 的元素複製到型別 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的陣列。</summary>
      <param name="array">型別 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的一維陣列，是從 <see cref="T:System.Collections.Generic.ICollection`1" /> 複製過來之 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 元素的目的端。陣列必須具有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 等於或大於 <paramref name="array" /> 的長度。-或-來源 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的項目數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出字典是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的，則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>從字典移除索引鍵和值。</summary>
      <returns>如果成功找到並移除 <paramref name="keyValuePair" /> 表示的索引鍵和值則為 true，否則為 false。如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找不到 <paramref name="keyValuePair" />，這個方法會傳回 false。</returns>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 結構，表示要從 <see cref="T:System.Collections.Generic.Dictionary`2" /> 移除的索引鍵和值。</param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的索引鍵。</summary>
      <returns>型別 <paramref name="TKey" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的索引鍵。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>取得包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中值的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <returns>型別 <paramref name="TValue" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>取得集合，其中包含 <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> 的索引鍵。</summary>
      <returns>集合，其中包含 <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> 的索引鍵。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>取得集合，其中包含 <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> 的值。</summary>
      <returns>集合，其中包含 <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> 的值。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從指定的陣列索引處開始，將 <see cref="T:System.Collections.Generic.ICollection`1" /> 的元素複製到陣列。</summary>
      <param name="array">一維陣列，指出從 <see cref="T:System.Collections.Generic.ICollection`1" /> 複製過來的元素之目的端。陣列必須具有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 等於或大於 <paramref name="array" /> 的長度。-或-<paramref name="index" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-<paramref name="array" /> 沒有以零起始的索引。-或-來源 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的項目數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。-或-來源 <see cref="T:System.Collections.Generic.ICollection`1" /> 的型別無法自動轉換為目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出對 <see cref="T:System.Collections.ICollection" /> 的存取是否為同步 (安全執行緒)。</summary>
      <returns>如果 <see cref="T:System.Collections.ICollection" /> 的存取已同步處理 (執行緒安全) 則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>取得可用來對 <see cref="T:System.Collections.ICollection" /> 進行同步存取的物件。</summary>
      <returns>可用來對 <see cref="T:System.Collections.ICollection" /> 同步存取的物件。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>將指定的索引鍵和值加入字典。</summary>
      <param name="key">要用做索引鍵的物件。</param>
      <param name="value">要用做值的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 的型別無法指派給 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <paramref name="TKey" /> 索引鍵類型。-或-<paramref name="value" /> 是無法指派給 <paramref name="TValue" /> 的型別 (<see cref="T:System.Collections.Generic.Dictionary`2" /> 中值的型別)。-或-<see cref="T:System.Collections.Generic.Dictionary`2" /> 中已存在具有相同索引鍵的值。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IDictionary" /> 是否包含具有指定之索引鍵的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 包含具有所指定索引鍵的項目則為 true，否則為 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.IDictionary" /> 中尋找的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IDictionary" /> 大小是否固定。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 有固定的大小則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.IDictionary" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 是唯讀的，則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>取得或設定具有指定之索引鍵的值。</summary>
      <returns>與指定的索引鍵關聯的值，如果 <paramref name="key" /> 不在字典中，或 <paramref name="key" /> 的型別無法指派給 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <paramref name="TKey" /> 索引鍵型別，則為 null。</returns>
      <param name="key">要取得值的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">正在指定值，而且 <paramref name="key" /> 的型別無法指派給 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <paramref name="TKey" /> 索引鍵型別。-或-正在指定值，而且 <paramref name="value" /> 的型別無法指派給 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的 <paramref name="TValue" /> 實值型別。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
      <summary>取得 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 的索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.IDictionary" /> 移除包含指定索引鍵的元素。</summary>
      <param name="key">要移除之元素的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
      <summary>取得包含 <see cref="T:System.Collections.IDictionary" /> 中值的 <see cref="T:System.Collections.ICollection" />。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
      <summary>取得與指定索引鍵關聯的值。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.Dictionary`2" /> 包含具有所指定索引鍵的項目則為 true，否則為 false。</returns>
      <param name="key">要取得值的索引鍵。</param>
      <param name="value">當此方法傳回時，如果找到索引鍵，則包含與指定索引鍵關聯的值，否則為 <paramref name="value" /> 參數的型別預設值。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Values">
      <summary>取得集合，包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />，包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值。</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.Enumerator">
      <summary>列舉 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的項目。</summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉值目前位置的 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的項目。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.Dispose">
      <summary>釋放 <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext">
      <summary>將列舉值前移至 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的下一個項目。</summary>
      <returns>如果列舉程式成功地前移至下一個元素則為 true，如果列舉程式已超過集合的結尾，則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於字典中列舉程式目前位置的元素，做為 <see cref="T:System.Collections.DictionaryEntry" />。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>取得位於列舉程式目前位置之元素的索引鍵。</summary>
      <returns>位於字典中列舉程式目前位置之元素的索引鍵。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>取得位於列舉程式目前位置之元素的值。</summary>
      <returns>位於字典中列舉程式目前位置之元素的值。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於集合中列舉程式目前位置的元素，做為 <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>設定列舉程式至它的初始位置，這是在集合中第 1 個元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。 </exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection">
      <summary>表示 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的索引鍵集合。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 類別的新執行個體，反映指定 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的索引鍵。</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.Dictionary`2" />，其索引鍵反映在新 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>從指定的陣列索引處開始，複製 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 元素至現有一維 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 中的項目數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Count">
      <summary>取得 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 中所包含的元素數。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 中所包含的元素數。擷取這個屬性的值是 O(1) 運算。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator">
      <summary>傳回逐一查看 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 的 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>將項目加入至 <see cref="T:System.Collections.Generic.ICollection`1" />。此實作永遠都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要加入至 <see cref="T:System.Collections.Generic.ICollection`1" /> 的物件。</param>
      <exception cref="T:System.NotSupportedException">一律會擲回。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>移除 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的所有項目。此實作永遠都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">一律會擲回。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>判斷 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找到 <paramref name="item" />，則為 true，否則為 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中尋找的物件。</param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的，則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 的預設實作中，此屬性永遠會傳回 true。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>從 <see cref="T:System.Collections.Generic.ICollection`1" /> 移除第一次出現的特定物件。此實作永遠都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>如果已從 <see cref="T:System.Collections.Generic.ICollection`1" /> 成功移除 <paramref name="item" /> 則為 true，否則為 false。如果在原始的 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找不到 <paramref name="item" />，則這個方法也會傳回 false。</returns>
      <param name="item">要從 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除的物件。</param>
      <exception cref="T:System.NotSupportedException">一律會擲回。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回在集合中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Array" /> 索引開始，將 <see cref="T:System.Collections.ICollection" /> 的項目複製至 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-<paramref name="array" /> 沒有以零起始的索引。-或-來源 <see cref="T:System.Collections.ICollection" /> 中的元素數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。-或-來源 <see cref="T:System.Collections.ICollection" /> 的型別無法自動轉換為目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出對 <see cref="T:System.Collections.ICollection" /> 的存取是否為同步 (安全執行緒)。</summary>
      <returns>如果 <see cref="T:System.Collections.ICollection" /> 的存取已同步處理 (執行緒安全) 則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>取得可用來對 <see cref="T:System.Collections.ICollection" /> 進行同步存取的物件。</summary>
      <returns>可用來對 <see cref="T:System.Collections.ICollection" /> 同步存取的物件。在 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 的預設實作中，這個屬性永遠會傳回目前的執行個體。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回在集合中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator">
      <summary>列舉 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 的項目。</summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉值目前位置的 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 中的項目。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>釋放 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>將列舉值前移至 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 的下一個項目。</summary>
      <returns>如果列舉程式成功地前移至下一個元素則為 true，如果列舉程式已超過集合的結尾，則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉程式目前位置的集合中的元素。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>設定列舉程式至它的初始位置，這是在集合中第 1 個元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。 </exception>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection">
      <summary>表示 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值集合。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary>初始化 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 類別的新執行個體，反映指定 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值。</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.Dictionary`2" />，其值反映在新 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 中。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>從指定的陣列索引處開始，複製 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 元素至現有一維 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 中的項目數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Count">
      <summary>取得 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 中所包含的元素數。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 中所包含的項目數。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator">
      <summary>傳回逐一查看 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 的 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Add(`1)">
      <summary>將項目加入至 <see cref="T:System.Collections.Generic.ICollection`1" />。此實作永遠都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要加入至 <see cref="T:System.Collections.Generic.ICollection`1" /> 的物件。</param>
      <exception cref="T:System.NotSupportedException">一律會擲回。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>移除 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的所有項目。此實作永遠都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">一律會擲回。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Contains(`1)">
      <summary>判斷 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找到 <paramref name="item" />，則為 true，否則為 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中尋找的物件。</param>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的，則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 的預設實作中，此屬性永遠會傳回 true。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Remove(`1)">
      <summary>從 <see cref="T:System.Collections.Generic.ICollection`1" /> 移除第一次出現的特定物件。此實作永遠都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>如果已從 <see cref="T:System.Collections.Generic.ICollection`1" /> 成功移除 <paramref name="item" /> 則為 true，否則為 false。如果在原始的 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找不到 <paramref name="item" />，則這個方法也會傳回 false。</returns>
      <param name="item">要從 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除的物件。</param>
      <exception cref="T:System.NotSupportedException">一律會擲回。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回在集合中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Array" /> 索引開始，將 <see cref="T:System.Collections.ICollection" /> 的項目複製至 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-<paramref name="array" /> 沒有以零起始的索引。-或-來源 <see cref="T:System.Collections.ICollection" /> 中的元素數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。-或-來源 <see cref="T:System.Collections.ICollection" /> 的型別無法自動轉換為目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出對 <see cref="T:System.Collections.ICollection" /> 的存取是否為同步 (安全執行緒)。</summary>
      <returns>如果 <see cref="T:System.Collections.ICollection" /> 的存取已同步處理 (執行緒安全) 則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>取得可用來對 <see cref="T:System.Collections.ICollection" /> 進行同步存取的物件。</summary>
      <returns>可用來對 <see cref="T:System.Collections.ICollection" /> 同步存取的物件。在 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 的預設實作中，這個屬性永遠會傳回目前的執行個體。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回在集合中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator">
      <summary>列舉 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 的項目。</summary>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉值目前位置的 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 中的項目。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>釋放 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>將列舉值前移至 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 的下一個項目。</summary>
      <returns>如果列舉程式成功地前移至下一個元素則為 true，如果列舉程式已超過集合的結尾，則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉程式目前位置的集合中的元素。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>設定列舉程式至它的初始位置，這是在集合中第 1 個元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。 </exception>
    </member>
    <member name="T:System.Collections.Generic.EqualityComparer`1">
      <summary>提供基底類別 (Base Class) 用於 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型介面的實作。</summary>
      <typeparam name="T">要比較之物件的型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Collections.Generic.EqualityComparer`1.Default">
      <summary>傳回泛型引數指定之型別的預設相等比較子 (Comparer)。</summary>
      <returns>型別 <paramref name="T" /> 之 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 類別的預設執行個體。</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)">
      <summary>在衍生類別中覆寫時，判斷型別為 <paramref name="T" /> 的兩個物件是否相等。</summary>
      <returns>如果指定的物件相等則為 true，否則為 false。</returns>
      <param name="x">要比較的第 1 個物件。</param>
      <param name="y">要比較的第 2 個物件。</param>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)">
      <summary>在衍生類別中覆寫時，做為雜湊演算法和資料結構之指定物件的雜湊函式，例如雜湊表。</summary>
      <returns>指定物件的雜湊程式碼。</returns>
      <param name="obj">要取得其雜湊程式碼的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的型別是參考型別，而 <paramref name="obj" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <summary>判斷指定的物件是否相等。</summary>
      <returns>如果指定的物件相等則為 true，否則為 false。</returns>
      <param name="x">要比較的第 1 個物件。</param>
      <param name="y">要比較的第 2 個物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 或 <paramref name="y" /> 的型別無法轉型為型別 <paramref name="T" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <summary>傳回指定物件的雜湊程式碼。</summary>
      <returns>指定物件的雜湊程式碼。</returns>
      <param name="obj">要傳回雜湊程式碼的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的型別是參考型別，而 <paramref name="obj" /> 為 null。-或-<paramref name="obj" /> 的型別無法轉型為型別 <paramref name="T" />。</exception>
    </member>
    <member name="T:System.Collections.Generic.ICollection`1">
      <summary>定義管理泛型集合的方法。</summary>
      <typeparam name="T">集合中的元素型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Add(`0)">
      <summary>將項目加入至 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <param name="item">要加入至 <see cref="T:System.Collections.Generic.ICollection`1" /> 的物件。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Clear">
      <summary>移除 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的所有項目。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Contains(`0)">
      <summary>判斷 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找到 <paramref name="item" />，則為 true，否則為 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中尋找的物件。</param>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
      <summary>從特定的 <see cref="T:System.Array" /> 索引開始，將 <see cref="T:System.Collections.Generic.ICollection`1" /> 的項目複製至 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.ICollection`1" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-來源 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的項目數量大於從 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。-或-<paramref name="T" /> 型別無法自動轉換成目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.Count">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" /> 中所包含的元素數。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 中所包含的項目數。</returns>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的，則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Remove(`0)">
      <summary>從 <see cref="T:System.Collections.Generic.ICollection`1" /> 移除第一次出現的特定物件。</summary>
      <returns>如果已從 <see cref="T:System.Collections.Generic.ICollection`1" /> 成功移除 <paramref name="item" /> 則為 true，否則為 false。如果在原始 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找不到 <paramref name="item" />，這個方法也會傳回 false。</returns>
      <param name="item">要從 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除的物件。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的。</exception>
    </member>
    <member name="T:System.Collections.Generic.IComparer`1">
      <summary>定義型別會實作其以比較兩個物件的方法。</summary>
      <typeparam name="T">要比較之物件的型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)">
      <summary>比較兩個物件並傳回值，指出一個物件是小於、等於還是大於另一個物件。</summary>
      <returns>帶正負號的整數，表示 <paramref name="x" /> 和 <paramref name="y" /> 的相對值，如下表所示。Value狀況小於零<paramref name="x" /> 小於 <paramref name="y" />。零<paramref name="x" /> 等於 <paramref name="y" />。大於零<paramref name="x" /> 大於 <paramref name="y" />。</returns>
      <param name="x">要比較的第 1 個物件。</param>
      <param name="y">要比較的第 2 個物件。</param>
    </member>
    <member name="T:System.Collections.Generic.IDictionary`2">
      <summary>表示索引鍵/值組的泛型集合。</summary>
      <typeparam name="TKey">字典中之索引鍵的型別。</typeparam>
      <typeparam name="TValue">字典中之值的型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
      <summary>將具有提供索引鍵和值的元素加入至 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <param name="key">要做為要加入之元素索引鍵的物件。</param>
      <param name="value">物件，做為要加入之元素的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 中已存在具有相同索引鍵的項目。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
      <summary>判斷 <see cref="T:System.Collections.Generic.IDictionary`2" /> 是否包含具有指定之索引鍵的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.IDictionary`2" /> 包含具有此索引鍵的項目則為 true，否則為 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中尋找的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Item(`0)">
      <summary>取得或設定具有指定機碼的元素。</summary>
      <returns>具有所指定索引鍵的元素。</returns>
      <param name="key">要取得或設定之元素的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">屬性已擷取，並且找不到 <paramref name="key" />。</exception>
      <exception cref="T:System.NotSupportedException">屬性已設定且 <see cref="T:System.Collections.Generic.IDictionary`2" /> 為唯讀的。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Keys">
      <summary>取得 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
      <summary>從 <see cref="T:System.Collections.Generic.IDictionary`2" /> 移除包含指定索引鍵的元素。</summary>
      <returns>如果已成功移除元素則為 true，否則為 false。如果在原始的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中找不到 <paramref name="key" />，則這個方法也會傳回 false。</returns>
      <param name="key">要移除之元素的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 是唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
      <summary>取得與指定索引鍵關聯的值。</summary>
      <returns>如果實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的物件包含具有所指定索引鍵的項目則為 true，否則為 false。</returns>
      <param name="key">要取得值的索引鍵。</param>
      <param name="value">傳回此方法時，如果找到指定的索引鍵，則為與此索引鍵相關聯的值，否則為 <paramref name="value" /> 參數之型別的預設值。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Values">
      <summary>取得包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中值的 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />，包含實作 <see cref="T:System.Collections.Generic.IDictionary`2" /> 之物件中的值。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerable`1">
      <summary>公開支援指定型別集合上簡單逐一查看的列舉程式。</summary>
      <typeparam name="T">要列舉之物件的型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可以用來逐一查看集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerator`1">
      <summary>支援泛型集合上的簡單逐一查看。</summary>
      <typeparam name="T">要列舉之物件的型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IEnumerator`1.Current">
      <summary>取得集合中位於列舉程式目前位置的元素。</summary>
      <returns>位於列舉程式目前位置的集合中的元素。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEqualityComparer`1">
      <summary>定義支援物件之相等比較的方法。</summary>
      <typeparam name="T">要比較之物件的型別。This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)">
      <summary>判斷指定的物件是否相等。</summary>
      <returns>如果指定的物件相等則為 true，否則為 false。</returns>
      <param name="x">要比較之型別 <paramref name="T" /> 的第 1 個物件。</param>
      <param name="y">要比較之型別 <paramref name="T" /> 的第 2 個物件。</param>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)">
      <summary>傳回指定物件的雜湊程式碼。</summary>
      <returns>指定物件的雜湊程式碼。</returns>
      <param name="obj">要傳回雜湊程式碼的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的型別是參考型別，而 <paramref name="obj" /> 為 null。</exception>
    </member>
    <member name="T:System.Collections.Generic.IList`1">
      <summary>表示可以個別由索引存取之物件的集合。</summary>
      <typeparam name="T">清單中項目的型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IList`1.IndexOf(`0)">
      <summary>判斷 <see cref="T:System.Collections.Generic.IList`1" /> 中特定項目的索引。</summary>
      <returns>如果可在清單中找到，則為 <paramref name="item" /> 的索引；否則為 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.IList`1" /> 中尋找的物件。</param>
    </member>
    <member name="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)">
      <summary>將項目插入至 <see cref="T:System.Collections.Generic.IList`1" /> 的指定索引處。</summary>
      <param name="index">應插入 <paramref name="item" /> 以零為起始的索引。</param>
      <param name="item">要插入至 <see cref="T:System.Collections.Generic.IList`1" /> 的物件。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IList`1" /> 是唯讀的。</exception>
    </member>
    <member name="P:System.Collections.Generic.IList`1.Item(System.Int32)">
      <summary>取得或設定指定索引上的元素。</summary>
      <returns>位於指定索引的元素。</returns>
      <param name="index">要取得或設定之元素以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">屬性已設定且 <see cref="T:System.Collections.Generic.IList`1" /> 為唯讀的。</exception>
    </member>
    <member name="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)">
      <summary>移除所指定索引處的 <see cref="T:System.Collections.Generic.IList`1" /> 項目。</summary>
      <param name="index">要移除之項目以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IList`1" /> 是唯讀的。</exception>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyCollection`1">
      <summary>表示強型別、唯讀的項目集合。</summary>
      <typeparam name="T">元素的型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyCollection`1.Count">
      <summary>取得集合中的元素數目。</summary>
      <returns>集合中的元素數目。 </returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyDictionary`2">
      <summary>表示索引鍵/值組的泛型唯讀集合。</summary>
      <typeparam name="TKey">唯讀字典中索引鍵的型別。</typeparam>
      <typeparam name="TValue">唯讀字典中值的型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
      <summary>判斷唯讀字典是否包含具有指定之索引鍵的項目。</summary>
      <returns>如果唯讀字典包含具有所指定索引鍵的項目則為 true，否則為 false。</returns>
      <param name="key">要尋找的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
      <summary>在唯讀字典中取得具有所指定索引鍵的項目。</summary>
      <returns>在唯讀字典中具有所指定索引鍵的項目。</returns>
      <param name="key">要尋找的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">屬性已擷取，並且找不到 <paramref name="key" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys">
      <summary>取得可列舉的集合，其中包含唯讀字典中的索引鍵。</summary>
      <returns>可列舉的集合，其中包含唯讀字典中的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
      <summary>取得與指定之索引鍵相關聯的值。</summary>
      <returns>如果實作 <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> 的物件包含具有所指定索引鍵的項目則為 true，否則為 false。</returns>
      <param name="key">要尋找的索引鍵。</param>
      <param name="value">傳回此方法時，如果找到指定的索引鍵，則為與此索引鍵相關聯的值，否則為 <paramref name="value" /> 參數之型別的預設值。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Values">
      <summary>取得可列舉的集合，其中包含唯讀字典中的值。</summary>
      <returns>可列舉的集合，其中包含唯讀字典中的值。</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyList`1">
      <summary>表示可由索引存取之項目的唯讀集合。</summary>
      <typeparam name="T">唯讀清單中項目的型別。This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see [2678dc63-c7f9-4590-9ddc-0a4df684d42e].</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)">
      <summary>取得在唯讀清單中指定之索引處的項目。</summary>
      <returns>在唯讀清單中指定之索引處的項目。</returns>
      <param name="index">要取得之元素以零為起始的索引。</param>
    </member>
    <member name="T:System.Collections.Generic.KeyNotFoundException">
      <summary>當為存取集合中的元素所指定的索引鍵與集合中的任何索引鍵都不相符時，擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor">
      <summary>使用預設的屬性值來初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息，以及對於引發此例外之內部例外的參考來初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外。如果 <paramref name="innerException" /> 參數並非 null，即會在處理內部例外狀況的 catch 區塊中發生目前的例外狀況。</param>
    </member>
    <member name="T:System.Collections.Generic.KeyValuePair`2">
      <summary>定義可設定或擷取的索引鍵/值組。</summary>
      <typeparam name="TKey">索引鍵的型別。</typeparam>
      <typeparam name="TValue">值的型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)">
      <summary>使用指定的索引鍵和值來初始化 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 結構的新執行個體。</summary>
      <param name="key">在每個索引鍵/值組配對中定義的物件。</param>
      <param name="value">與 <paramref name="key" /> 關聯的定義。</param>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Key">
      <summary>取得索引鍵/值組中的索引鍵。</summary>
      <returns>
        <paramref name="TKey" />，其為 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.ToString">
      <summary>使用索引鍵和值的字串表示，傳回 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的字串表示。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的字串表示，包含索引鍵和值的字串表示。</returns>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Value">
      <summary>取得索引鍵/值組中的值。</summary>
      <returns>
        <paramref name="TValue" />，其為 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的值。 </returns>
    </member>
    <member name="T:System.Collections.Generic.List`1">
      <summary>表示可以依照索引存取的強型別物件清單。提供搜尋、排序和管理清單的方法。</summary>
      <typeparam name="T">清單中項目的型別。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.List`1" /> 類別的新執行個體，其為空白執行個體且具有預設的初始容量。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.List`1" /> 類別的新執行個體，其包含從指定之集合複製的元素，且具有容納複製之元素數目的足夠容量。</summary>
      <param name="collection">將其元素複製到新清單的來源集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Generic.List`1" /> 類別的新執行個體，其為空白執行個體且具有指定的初始容量。</summary>
      <param name="capacity">新清單一開始能夠儲存的元素數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於 0。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Add(`0)">
      <summary>將物件加入至 <see cref="T:System.Collections.Generic.List`1" /> 的結尾。</summary>
      <param name="item">要加入至 <see cref="T:System.Collections.Generic.List`1" /> 結尾的物件。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>將特定集合的元素加入至 <see cref="T:System.Collections.Generic.List`1" /> 的結尾。</summary>
      <param name="collection">集合，其元素應加入至 <see cref="T:System.Collections.Generic.List`1" /> 的結尾。集合本身不能是 null，但若型別 <paramref name="T" /> 是參考型別，則可包含 null 的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.AsReadOnly">
      <summary>傳回目前集合的唯讀 <see cref="T:System.Collections.Generic.IList`1" /> 包裝函式。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，做為目前 <see cref="T:System.Collections.Generic.List`1" /> 的唯讀包裝函式。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比較子在已經過排序之 <see cref="T:System.Collections.Generic.List`1" /> 內某段元素範圍搜尋指定的元素，並傳回該元素的索引 (從零開始起算)。</summary>
      <returns>如果有找到 <paramref name="item" />則為已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中 <paramref name="item" /> 之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="item" /> 的下一個元素索引之位元補數，或者，如果沒有更大的元素則為 <see cref="P:System.Collections.Generic.List`1.Count" /> 的位元補數。</returns>
      <param name="index">要搜尋範圍內以零為起始的索引。</param>
      <param name="count">搜尋範圍的長度。</param>
      <param name="item">要尋找的物件。參考型別的值可以是 null。</param>
      <param name="comparer">比較元素時所要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作，或是 null 表示使用預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。-或-<paramref name="count" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 並不表示 <see cref="T:System.Collections.Generic.List`1" /> 中的有效範圍。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，且預設比較子<see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面的實作或 <paramref name="T" /> 型別的 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0)">
      <summary>使用預設的比較子 (Comparer) 並傳回元素以零為起始的索引，來搜尋元素之整個排序的 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>如果有找到 <paramref name="item" />則為已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中 <paramref name="item" /> 之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="item" /> 的下一個元素索引之位元補數，或者，如果沒有更大的元素則為 <see cref="P:System.Collections.Generic.List`1.Count" /> 的位元補數。</returns>
      <param name="item">要尋找的物件。參考型別的值可以是 null。</param>
      <exception cref="T:System.InvalidOperationException">預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面的實作或 <paramref name="T" /> 型別的 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比較子並傳回元素以零為起始的索引，來搜尋元素之整個排序的 <see cref="T:System.Collections.Generic.List`1" />。</summary>
      <returns>如果有找到 <paramref name="item" />則為已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中 <paramref name="item" /> 之以零為起始的索引，否則便為負數，此負數為大於 <paramref name="item" /> 的下一個元素索引之位元補數，或者，如果沒有更大的元素則為 <see cref="P:System.Collections.Generic.List`1.Count" /> 的位元補數。</returns>
      <param name="item">要尋找的物件。參考型別的值可以是 null。</param>
      <param name="comparer">比較元素時所要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作。-或-null 表示使用預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，且預設比較子<see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面的實作或 <paramref name="T" /> 型別的 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Capacity">
      <summary>在不需要調整大小之下，取得或設定內部資料結構可以保存的元素總數。</summary>
      <returns>需要調整大小之前，<see cref="T:System.Collections.Generic.List`1" /> 可包含的元素數目。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.Generic.List`1.Capacity" /> 是設為小於 <see cref="P:System.Collections.Generic.List`1.Count" /> 的值。</exception>
      <exception cref="T:System.OutOfMemoryException">系統上沒有足夠的可用記憶體。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Clear">
      <summary>從 <see cref="T:System.Collections.Generic.List`1" /> 移除所有元素。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Contains(`0)">
      <summary>判斷某元素是否在 <see cref="T:System.Collections.Generic.List`1" /> 中。</summary>
      <returns>如果可以在 <see cref="T:System.Collections.Generic.List`1" /> 中找到 <paramref name="item" />則為 true，否則為 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>從目標陣列的指定索引處開始，將元素範圍從 <see cref="T:System.Collections.Generic.List`1" /> 複製到相容的一維陣列。</summary>
      <param name="index">來源 <see cref="T:System.Collections.Generic.List`1" /> 中以零為起始的索引，位於複製開始的位置。</param>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.List`1" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <param name="count">要複製的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。-或-<paramref name="arrayIndex" /> 小於 0。-或-<paramref name="count" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">從 <paramref name="index" /> 到來源 <see cref="T:System.Collections.Generic.List`1" /> 末尾的項目數目，超過從 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 末尾之間的可用空間。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[])">
      <summary>將整個 <see cref="T:System.Collections.Generic.List`1" /> 複製到相容的一維陣列，從目標陣列的開頭開始。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.List`1" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.Generic.List`1" /> 中的項目數目大於目的 <paramref name="array" /> 可包含的項目數目。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
      <summary>從目標陣列的指定索引處開始，將整個 <see cref="T:System.Collections.Generic.List`1" /> 複製到相容的一維陣列中。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.Generic.List`1" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.Generic.List`1" /> 中的項目數量大於從 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Count">
      <summary>取得在 <see cref="T:System.Collections.Generic.List`1" /> 中實際包含的元素數目。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" /> 中實際包含的元素數目。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
      <summary>判斷 <see cref="T:System.Collections.Generic.List`1" /> 是否包含符合指定之述詞 (Predicate) 所定義之條件的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.List`1" /> 包含的一個或多個元素符合指定之述詞所定義的條件則為 true，否則為 false。</returns>
      <param name="match">定義要搜尋元素之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回整個 <see cref="T:System.Collections.Generic.List`1" /> 內第一個相符的項目。</summary>
      <returns>第一個符合指定之述詞所定義的條件之元素 (如果找到的話)，否則為型別 <paramref name="T" /> 的預設值。</returns>
      <param name="match">定義要搜尋元素之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
      <summary>擷取符合指定之述詞所定義的條件之所有元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" />，其中包含符合指定之述詞所定義的條件之所有元素 (如果有找到的話)，否則為空的 <see cref="T:System.Collections.Generic.List`1" />。</returns>
      <param name="match">定義要搜尋元素之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回 <see cref="T:System.Collections.Generic.List`1" /> 中從指定之索引開始，且包含指定之元素數目的元素範圍內第一個符合項目之以零起始的索引。</summary>
      <returns>如果有找到，是第一個符合 <paramref name="match" /> 定義條件的元素，否則為 -1。</returns>
      <param name="startIndex">搜尋以零為起始的索引。</param>
      <param name="count">要在區段中搜尋的元素數目。</param>
      <param name="match">定義要搜尋元素之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍之外。-或-<paramref name="count" /> 小於 0。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 並未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效區段。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回 <see cref="T:System.Collections.Generic.List`1" /> 中從指定之索引延伸到最後一個元素的元素範圍內第一個符合項目之以零起始的索引。</summary>
      <returns>如果有找到，是第一個符合 <paramref name="match" /> 定義條件的元素，否則為 -1。</returns>
      <param name="startIndex">搜尋以零為起始的索引。</param>
      <param name="match">定義要搜尋元素之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回整個 <see cref="T:System.Collections.Generic.List`1" /> 內第一個相符項目之以零起始的索引。</summary>
      <returns>如果有找到，是第一個符合 <paramref name="match" /> 定義條件的元素，否則為 -1。</returns>
      <param name="match">定義要搜尋元素之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回整個 <see cref="T:System.Collections.Generic.List`1" /> 內最後一個相符的項目。</summary>
      <returns>最後一個符合指定之述詞所定義的條件之元素 (如果找到的話)，否則為型別 <paramref name="T" /> 的預設值。</returns>
      <param name="match">定義要搜尋元素之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回 <see cref="T:System.Collections.Generic.List`1" /> 中包含指定之元素數目，且結束於指定之索引的元素範圍內最後一個符合項目之以零起始的索引。</summary>
      <returns>如果有找到，是最後一個符合 <paramref name="match" /> 定義條件的元素，否則為 -1。</returns>
      <param name="startIndex">回溯搜尋以零為起始的索引。</param>
      <param name="count">要在區段中搜尋的元素數目。</param>
      <param name="match">定義要搜尋元素之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍之外。-或-<paramref name="count" /> 小於 0。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 並未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效區段。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回 <see cref="T:System.Collections.Generic.List`1" /> 中從第一個元素延伸到指定之索引的元素範圍內最後一個符合項目之以零起始的索引。</summary>
      <returns>如果有找到，是最後一個符合 <paramref name="match" /> 定義條件的元素，否則為 -1。</returns>
      <param name="startIndex">回溯搜尋以零為起始的索引。</param>
      <param name="match">定義要搜尋元素之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 在 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
      <summary>搜尋符合指定之述詞所定義的條件之元素，並傳回整個 <see cref="T:System.Collections.Generic.List`1" /> 內最後一個相符項目之以零起始的索引。</summary>
      <returns>如果有找到，是最後一個符合 <paramref name="match" /> 定義條件的元素，否則為 -1。</returns>
      <param name="match">定義要搜尋元素之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
      <summary>在 <see cref="T:System.Collections.Generic.List`1" /> 的每一個元素上執行指定之動作。</summary>
      <param name="action">要在 <see cref="T:System.Collections.Generic.List`1" /> 的每一個元素上執行的 <see cref="T:System.Action`1" /> 委派。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetEnumerator">
      <summary>傳回逐一查看 <see cref="T:System.Collections.Generic.List`1" /> 的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" /> 的 <see cref="T:System.Collections.Generic.List`1.Enumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
      <summary>為來源 <see cref="T:System.Collections.Generic.List`1" /> 中的元素範圍建立淺層複本。</summary>
      <returns>來源 <see cref="T:System.Collections.Generic.List`1" /> 中元素範圍的淺層複本。</returns>
      <param name="index">範圍起始處之以零為起始的 <see cref="T:System.Collections.Generic.List`1" /> 索引。</param>
      <param name="count">範圍中的元素數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。-或-<paramref name="count" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 並不表示 <see cref="T:System.Collections.Generic.List`1" /> 中項目的有效範圍。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0)">
      <summary>搜尋指定的物件，並傳回整個 <see cref="T:System.Collections.Generic.List`1" /> 中第 1 個相符項目之以零為起始的索引。</summary>
      <returns>如果有找到，則是在整個 <see cref="T:System.Collections.Generic.List`1" /> 內，<paramref name="item" /> 之第一個相符項目的以零起始的索引，否則為 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
      <summary>在 <see cref="T:System.Collections.Generic.List`1" /> 中從指定的索引開始到最後 1 個元素這段範圍內，搜尋指定的物件第一次出現的位置，並傳回其索引值 (索引以零為起始)。</summary>
      <returns>在 <see cref="T:System.Collections.Generic.List`1" /> 中從 <paramref name="index" /> 開始到最後 1 個元素這段範圍內，如果有找到指定的 <paramref name="item" /> 第一次出現的位置則為該位置的索引 (從零開始起算)，否則為 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。參考型別的值可以是 null。</param>
      <param name="index">搜尋以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>搜尋指定的物件，並傳回 <see cref="T:System.Collections.Generic.List`1" /> 中元素範圍內第 1 個事件以零為起始的索引，該範圍是從指定的索引開始，並包含指定的元素數目。</summary>
      <returns>在 <see cref="T:System.Collections.Generic.List`1" /> 中從 <paramref name="index" /> 開始且包含 <paramref name="count" /> 個元素的範圍內，如果有找到指定的 <paramref name="item" /> 第一次出現的位置則為該位置的索引 (從零開始起算)，否則為 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。參考型別的值可以是 null。</param>
      <param name="index">搜尋以零為起始的索引。</param>
      <param name="count">要在區段中搜尋的元素數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍之外。-或-<paramref name="count" /> 小於 0。-或-<paramref name="index" /> 和 <paramref name="count" /> 並未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效區段。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
      <summary>將項目插入 <see cref="T:System.Collections.Generic.List`1" /> 中指定的索引處。</summary>
      <param name="index">應插入 <paramref name="item" /> 以零為起始的索引。</param>
      <param name="item">要插入的物件。參考型別的值可以是 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。-或-<paramref name="index" /> 大於 <see cref="P:System.Collections.Generic.List`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>將集合的元素插入至位於指定索引的 <see cref="T:System.Collections.Generic.List`1" /> 中。</summary>
      <param name="index">應插入新元素處的以零為起始的索引。</param>
      <param name="collection">集合，其元素應插入至 <see cref="T:System.Collections.Generic.List`1" />。集合本身不能是 null，但若型別 <paramref name="T" /> 是參考型別，則可包含 null 的元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。-或-<paramref name="index" /> 大於 <see cref="P:System.Collections.Generic.List`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Item(System.Int32)">
      <summary>取得或設定指定索引上的元素。</summary>
      <returns>位於指定索引的元素。</returns>
      <param name="index">要取得或設定之元素以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。-或-<paramref name="index" /> 等於或大於 <see cref="P:System.Collections.Generic.List`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
      <summary>搜尋指定的物件，並傳回整個 <see cref="T:System.Collections.Generic.List`1" /> 中最後 1 個相符項目之以零為起始的索引。</summary>
      <returns>如果找到的話則為在整個 <see cref="T:System.Collections.Generic.List`1" /> 中 <paramref name="item" /> 的最後 1 個符合項目之以零為起始的索引，否則為 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
      <summary>在 <see cref="T:System.Collections.Generic.List`1" /> 中從第 1 個元素開始到指定的索引這段範圍內，搜尋指定的物件最後一次出現的位置，並傳回其索引值 (索引以零為起始)。</summary>
      <returns>在 <see cref="T:System.Collections.Generic.List`1" /> 中從第 1 個元素開始到 <paramref name="index" /> 這段範圍內，如果有找到指定的 <paramref name="item" /> 最後一次出現的位置則為該位置的索引 (從零開始起算)，否則為 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。參考型別的值可以是 null。</param>
      <param name="index">回溯搜尋以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>在 <see cref="T:System.Collections.Generic.List`1" /> 中包含指定個數元素且結尾位於指定索引的範圍內，搜尋指定的物件最後一次出現的位置，並傳回其索引值 (索引以零為起始)。</summary>
      <returns>在 <see cref="T:System.Collections.Generic.List`1" /> 中含有 <paramref name="count" /> 個項目且結尾位置為 <paramref name="index" /> 的範圍內，如果有找到指定的 <paramref name="item" /> 最後一次出現的位置則為該位置的索引 (索引以零為起始)，否則為 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。參考型別的值可以是 null。</param>
      <param name="index">回溯搜尋以零為起始的索引。</param>
      <param name="count">要在區段中搜尋的元素數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引範圍之外。-或-<paramref name="count" /> 小於 0。-或-<paramref name="index" /> 和 <paramref name="count" /> 並未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效區段。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Remove(`0)">
      <summary>從 <see cref="T:System.Collections.Generic.List`1" /> 移除第一次出現的特定物件。</summary>
      <returns>如果已成功移除 <paramref name="item" />則為 true，否則為 false。如果在 <see cref="T:System.Collections.Generic.List`1" /> 中找不到 <paramref name="item" />，這個方法也會傳回 false。</returns>
      <param name="item">要從 <see cref="T:System.Collections.Generic.List`1" /> 中移除的物件。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
      <summary>移除符合指定的述詞所定義之條件的所有項目。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" /> 中已移除的項目數。</returns>
      <param name="match">定義要移除元素之條件的 <see cref="T:System.Predicate`1" /> 委派。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.Generic.List`1" /> 中指定之索引處的元素。</summary>
      <param name="index">要移除之元素以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。-或-<paramref name="index" /> 等於或大於 <see cref="P:System.Collections.Generic.List`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
      <summary>從 <see cref="T:System.Collections.Generic.List`1" /> 移除的元素範圍。</summary>
      <param name="index">要移除之元素範圍內以零為起始的索引。</param>
      <param name="count">要移除的元素數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。-或-<paramref name="count" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 並不表示 <see cref="T:System.Collections.Generic.List`1" /> 中項目的有效範圍。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse">
      <summary>反向整個 <see cref="T:System.Collections.Generic.List`1" /> 中元素的順序。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
      <summary>反向指定範圍中元素的順序。</summary>
      <param name="index">要反向範圍內以零為起始的索引。</param>
      <param name="count">要反向範圍中的元素數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。-或-<paramref name="count" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 並不表示 <see cref="T:System.Collections.Generic.List`1" /> 中項目的有效範圍。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort">
      <summary>使用預設比較子來排序在整個 <see cref="T:System.Collections.Generic.List`1" /> 中的元素。</summary>
      <exception cref="T:System.InvalidOperationException">預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面的實作或 <paramref name="T" /> 型別的 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比較子來排序在整個 <see cref="T:System.Collections.Generic.List`1" /> 中的元素。</summary>
      <param name="comparer">比較元素時所要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作，或是 null 表示使用預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，且預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面的實作或 <paramref name="T" /> 型別的 <see cref="T:System.IComparable" /> 介面。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 的實作會在排序過程中造成錯誤。例如，在與本身的項目比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
      <summary>使用指定的 <see cref="T:System.Comparison`1" /> 來排序在整個 <see cref="T:System.Collections.Generic.List`1" /> 中的元素。</summary>
      <param name="comparison">比較元素時所要使用的 <see cref="T:System.Comparison`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparison" /> 的實作會在排序過程中造成錯誤。例如，在與本身的項目比較時，<paramref name="comparison" /> 可能不會傳回 0。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>使用指定的比較子對 <see cref="T:System.Collections.Generic.List`1" /> 中某段範圍內的元素進行排序。</summary>
      <param name="index">要排序範圍內以零為起始的索引。</param>
      <param name="count">要排序的範圍長度。</param>
      <param name="comparer">比較元素時所要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 實作，或是 null 表示使用預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。-或-<paramref name="count" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 並未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效範圍。-或-<paramref name="comparer" /> 的實作會在排序過程中造成錯誤。例如，在與本身的項目比較時，<paramref name="comparer" /> 可能不會傳回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 為 null，且預設比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型介面的實作或 <paramref name="T" /> 型別的 <see cref="T:System.IComparable" /> 介面。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.List`1" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>傳回在集合中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Array" /> 索引開始，將 <see cref="T:System.Collections.ICollection" /> 的項目複製至 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-<paramref name="array" /> 沒有以零起始的索引。-或-來源 <see cref="T:System.Collections.ICollection" /> 中的項目數量大於從 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。-或-來源 <see cref="T:System.Collections.ICollection" /> 的型別無法自動轉換為目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出對 <see cref="T:System.Collections.ICollection" /> 的存取是否為同步 (安全執行緒)。</summary>
      <returns>如果存取 <see cref="T:System.Collections.ICollection" /> 已同步處理 (執行緒安全)則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.List`1" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
      <summary>取得可用來對 <see cref="T:System.Collections.ICollection" /> 進行同步存取的物件。</summary>
      <returns>可用來對 <see cref="T:System.Collections.ICollection" /> 同步存取的物件。在 <see cref="T:System.Collections.Generic.List`1" /> 的預設實作中，這個屬性永遠會傳回目前的執行個體。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回在集合中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
      <summary>將項目加入至 <see cref="T:System.Collections.IList" />。</summary>
      <returns>新項目的插入位置。</returns>
      <param name="item">要加入至 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <returns>如果可以在 <see cref="T:System.Collections.IList" /> 中找到 <paramref name="item" />則為 true，否則為 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 中特定項目的索引。</summary>
      <returns>如果可在清單中找到則為 <paramref name="item" /> 的索引；否則為 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.IList" /> 中尋找的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>將項目插入至 <see cref="T:System.Collections.IList" /> 的指定索引處。</summary>
      <param name="index">應插入 <paramref name="item" /> 以零為起始的索引。</param>
      <param name="item">要插入至 <see cref="T:System.Collections.IList" /> 的物件。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 大小是否固定。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 有固定大小則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.List`1" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 是唯讀則為 true，否則為 false。在 <see cref="T:System.Collections.Generic.List`1" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
      <summary>取得或設定指定索引上的元素。</summary>
      <returns>位於指定索引的元素。</returns>
      <param name="index">要取得或設定之元素以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">屬性已設定，且 <paramref name="value" /> 具有無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.IList" /> 移除第一次出現的特定物件。</summary>
      <param name="item">要從 <see cref="T:System.Collections.IList" /> 中移除的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.ToArray">
      <summary>將 <see cref="T:System.Collections.Generic.List`1" /> 的元素複製到新的陣列。</summary>
      <returns>陣列，包含 <see cref="T:System.Collections.Generic.List`1" /> 的元素複本。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrimExcess">
      <summary>將容量設為 <see cref="T:System.Collections.Generic.List`1" /> 中元素的實際數目，如果該數目小於臨界值。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
      <summary>判斷 <see cref="T:System.Collections.Generic.List`1" /> 中的每一個項目是否符合指定之述詞所定義的條件。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.List`1" /> 中的每一個元素都符合指定之述詞所定義的條件則為 true，否則為 false。如果清單中沒有元素，則傳回值為 true。</returns>
      <param name="match">
        <see cref="T:System.Predicate`1" /> 委派，可定義檢查項目所根據的條件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 為 null。</exception>
    </member>
    <member name="T:System.Collections.Generic.List`1.Enumerator">
      <summary>列舉 <see cref="T:System.Collections.Generic.List`1" /> 的元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉值目前位置的 <see cref="T:System.Collections.Generic.List`1" /> 中的項目。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.Dispose">
      <summary>釋放 <see cref="T:System.Collections.Generic.List`1.Enumerator" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.MoveNext">
      <summary>將列舉值前移至 <see cref="T:System.Collections.Generic.List`1" /> 的下一個項目。</summary>
      <returns>如果列舉程式成功地前移至下一個元素則為 true，如果列舉程式已超過集合的結尾，則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>取得位於目前列舉程式位置上的元素。</summary>
      <returns>位於列舉值目前位置的 <see cref="T:System.Collections.Generic.List`1" /> 中的項目。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於集合的第 1 個項目之前，或最後 1 個項目之後。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>設定列舉程式至它的初始位置，這是在集合中第 1 個元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">在建立列舉程式之後，會修改集合。 </exception>
    </member>
    <member name="T:System.Collections.ObjectModel.Collection`1">
      <summary>提供泛型集合的基底類別。</summary>
      <typeparam name="T">集合中的元素型別。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 類別的新執行個體，此執行個體是空白的。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 類別的新執行個體，將其當做指定清單的包裝函式。</summary>
      <param name="list">由新的集合所包裝的清單。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
      <summary>將物件加入至 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的結尾。</summary>
      <param name="item">要加入至 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 結尾的物件。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Clear">
      <summary>從 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 移除所有元素。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.ClearItems">
      <summary>從 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 移除所有元素。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
      <summary>判斷某元素是否在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中。</summary>
      <returns>如果在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中找到 <paramref name="item" />，則為 true，否則為 false。</returns>
      <param name="item">要在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中尋找的物件。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
      <summary>從目標陣列的指定索引開始，複製整個 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 至相容的一維 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 等於或大於 <paramref name="array" /> 的長度。-或-<paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 元素的數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Count">
      <summary>取得在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中實際包含的元素數目。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中實際包含的元素數目。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
      <summary>傳回逐一查看 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
      <summary>搜尋指定的物件，並傳回整個 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中第 1 個相符項目之以零為起始的索引。</summary>
      <returns>如果有找到，則是在整個 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 內，<paramref name="item" /> 之第一個相符項目的以零起始的索引，否則為 -1。</returns>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
      <summary>將項目插入 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中指定的索引處。</summary>
      <param name="index">應插入 <paramref name="item" /> 以零為起始的索引。</param>
      <param name="item">要插入的物件。參考型別的值可以是 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。-或-<paramref name="index" /> 大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
      <summary>將項目插入 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中指定的索引處。</summary>
      <param name="index">應插入 <paramref name="item" /> 以零為起始的索引。</param>
      <param name="item">要插入的物件。參考型別的值可以是 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。-或-<paramref name="index" /> 大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
      <summary>取得或設定指定索引上的元素。</summary>
      <returns>位於指定索引的元素。</returns>
      <param name="index">要取得或設定之元素以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。-或-<paramref name="index" /> 等於或大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Items">
      <summary>取得包住 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的 <see cref="T:System.Collections.Generic.IList`1" /> 包裝函式。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> 周圍的 <see cref="T:System.Collections.Generic.IList`1" /> 包裝函式。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
      <summary>從 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 移除第一次出現的特定物件。</summary>
      <returns>如果已成功移除 <paramref name="item" /> 則為 true，否則為 false。如果在原始的 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中找不到 <paramref name="item" />，則這個方法也會傳回 false。</returns>
      <param name="item">要從 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中移除的物件。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中指定之索引處的元素。</summary>
      <param name="index">要移除之元素以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。-或-<paramref name="index" /> 等於或大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中指定之索引處的元素。</summary>
      <param name="index">要移除之元素以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。-或-<paramref name="index" /> 等於或大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
      <summary>取代指定之索引處的元素。</summary>
      <param name="index">要取代之元素以零為起始的索引。</param>
      <param name="item">指定之索引處的元素新值。參考型別的值可以是 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。-或-<paramref name="index" /> 大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，這個值表示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的，則為 true，否則為 false。在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Array" /> 索引開始，將 <see cref="T:System.Collections.ICollection" /> 的項目複製至 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-<paramref name="array" /> 沒有以零起始的索引。-或-來源 <see cref="T:System.Collections.ICollection" /> 中的元素數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。-或-來源 <see cref="T:System.Collections.ICollection" /> 的型別無法自動轉換為目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出對 <see cref="T:System.Collections.ICollection" /> 的存取是否為同步 (安全執行緒)。</summary>
      <returns>如果 <see cref="T:System.Collections.ICollection" /> 的存取已同步處理 (執行緒安全) 則為 true，否則為 false。在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
      <summary>取得可用來對 <see cref="T:System.Collections.ICollection" /> 進行同步存取的物件。</summary>
      <returns>可用來對 <see cref="T:System.Collections.ICollection" /> 同步存取的物件。在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的預設實作中，這個屬性永遠會傳回目前的執行個體。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回在集合中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)">
      <summary>將項目加入至 <see cref="T:System.Collections.IList" />。</summary>
      <returns>新項目的插入位置。</returns>
      <param name="value">要加入至 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到 <see cref="T:System.Object" /> 則為 true，否則為 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 中特定項目的索引。</summary>
      <returns>如果可在清單中找到，則為 <paramref name="value" /> 的索引；否則為 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>將項目插入至 <see cref="T:System.Collections.IList" /> 的指定索引處。</summary>
      <param name="index">應插入 <paramref name="value" /> 以零為起始的索引。</param>
      <param name="value">要插入至 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 大小是否固定。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 有固定的大小則為 true，否則為 false。在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的，則為 true，否則為 false。在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
      <summary>取得或設定指定索引上的元素。</summary>
      <returns>位於指定索引的元素。</returns>
      <param name="index">要取得或設定之元素以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">屬性已設定，且 <paramref name="value" /> 具有無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.IList" /> 移除第一次出現的特定物件。</summary>
      <param name="value">要從 <see cref="T:System.Collections.IList" /> 移除的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 屬於無法指派給 <see cref="T:System.Collections.IList" /> 的型別。</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.KeyedCollection`2">
      <summary>為內嵌在值之索引鍵的集合，提供抽象基底類別。</summary>
      <typeparam name="TKey">集合中的索引鍵型別。</typeparam>
      <typeparam name="TItem">集合中項目的型別。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 類別的新執行個體，此執行個體使用預設的等號比較子。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 類別的新執行個體，此執行個體使用指定的等號比較子。</summary>
      <param name="comparer">比較索引鍵時所要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型介面實作，或 null 表示為索引鍵型別使用預設等號比較子 (取自 <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />)。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 類別的新執行個體，此執行個體使用指定的等號比較子，並在超過指定的臨界值時，建立查閱字典。</summary>
      <param name="comparer">比較索引鍵時所要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型介面實作，或 null 表示為索引鍵型別使用預設等號比較子 (取自 <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />)。</param>
      <param name="dictionaryCreationThreshold">集合不必建立查閱字典就可以保存的元素數目 (當第一個項目加入後即建立查閱字典則為 0)，若指定不建立查閱字典則為 –1。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dictionaryCreationThreshold" /> 小於 -1。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
      <summary>變更查閱字典中與指定的元素相關的索引鍵。</summary>
      <param name="item">要變更索引鍵的元素。</param>
      <param name="newKey">
        <paramref name="item" /> 的新索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> 為 null。-或-<paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">找不到 <paramref name="item" />。-或-<paramref name="key" /> 已存在於 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
      <summary>從 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 移除所有元素。</summary>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
      <summary>取得用來判斷集合中索引鍵是否相等的泛型等號比較子。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型介面的實作，用來判斷集合中索引鍵是否相等。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
      <summary>判斷集合是否包含具有指定之索引鍵的元素。</summary>
      <returns>如果 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 包含具有所指定索引鍵的項目則為 true，否則為 false。</returns>
      <param name="key">要在 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中尋找的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
      <summary>取得 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 的查閱字典。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 的查閱字典，如果有的話，否則為 null。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
      <summary>在衍生類別中實作時，從指定的元素擷取索引鍵。</summary>
      <returns>指定之元素的索引鍵。</returns>
      <param name="item">要擷取索引鍵的來源元素。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
      <summary>將項目插入 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中指定的索引處。</summary>
      <param name="index">應插入 <paramref name="item" /> 以零為起始的索引。</param>
      <param name="item">要插入的物件。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於 0。-或-<paramref name="index" /> 大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
      <summary>取得具有指定索引鍵的項目。</summary>
      <returns>具有所指定索引鍵的元素。如果找不到具指定之索引鍵的元素，則會擲回例外狀況。</returns>
      <param name="key">要取得之元素的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">具有指定之索引鍵的元素不存在於集合中。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
      <summary>從 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 移除包含指定索引鍵的元素。</summary>
      <returns>如果已成功移除項目則為 true，否則為 false。如果在 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中找不到 <paramref name="key" />，這個方法也會傳回 false。</returns>
      <param name="key">要移除之元素的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 中指定之索引處的元素。</summary>
      <param name="index">要移除之元素的索引。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
      <summary>以指定的項目取代位於指定索引上的項目。</summary>
      <param name="index">要取代之項目以零為起始的索引。</param>
      <param name="item">新項目。</param>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyCollection`1">
      <summary>提供泛型唯讀集合的基底類別。</summary>
      <typeparam name="T">集合中的元素型別。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 類別的新執行個體，此執行個體是指定之清單周圍的唯讀包裝函式。</summary>
      <param name="list">要包裝的清單。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)">
      <summary>判斷某元素是否在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中。</summary>
      <returns>如果在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中找到 <paramref name="value" />，則為 true，否則為 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中尋找的物件。參考型別的值可以是 null。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
      <summary>從目標陣列的指定索引開始，複製整個 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 至相容的一維 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">來源 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 元素的數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count">
      <summary>取得 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 執行個體中包含的元素數目。</summary>
      <returns>包含在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 執行個體中的元素數目。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator">
      <summary>傳回逐一查看 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)">
      <summary>搜尋指定的物件，並傳回整個 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中第 1 個相符項目之以零為起始的索引。</summary>
      <returns>如果有找到，則是在整個 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 內，<paramref name="item" /> 之第一個相符項目的以零起始的索引，否則為 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.Generic.List`1" /> 中尋找的物件。參考型別的值可以是 null。</param>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)">
      <summary>取得指定索引的元素。</summary>
      <returns>位於指定索引的元素。</returns>
      <param name="index">要取得之元素以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。-或-<paramref name="index" /> 等於或大於 <see cref="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Items">
      <summary>傳回 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 所包裝的 <see cref="T:System.Collections.Generic.IList`1" />。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 所包裝的 <see cref="T:System.Collections.Generic.IList`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>將項目加入至 <see cref="T:System.Collections.Generic.ICollection`1" />。此實作永遠都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要加入至 <see cref="T:System.Collections.Generic.ICollection`1" /> 的物件。</param>
      <exception cref="T:System.NotSupportedException">一律會擲回。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>移除 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的所有項目。此實作永遠都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">一律會擲回。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.Generic.ICollection`1" /> 是唯讀的，則為 true，否則為 false。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的預設實作中，此屬性永遠會傳回 true。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>從 <see cref="T:System.Collections.Generic.ICollection`1" /> 移除第一次出現的特定物件。此實作永遠都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>如果已從 <see cref="T:System.Collections.Generic.ICollection`1" /> 成功移除 <paramref name="value" /> 則為 true，否則為 false。</returns>
      <param name="value">要從 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除的物件。</param>
      <exception cref="T:System.NotSupportedException">一律會擲回。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>將項目插入至 <see cref="T:System.Collections.Generic.IList`1" /> 的指定索引處。此實作永遠都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">應插入 <paramref name="value" /> 以零為起始的索引。</param>
      <param name="value">要插入至 <see cref="T:System.Collections.Generic.IList`1" /> 的物件。</param>
      <exception cref="T:System.NotSupportedException">一律會擲回。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>取得或設定指定索引上的元素。</summary>
      <returns>位於指定索引的元素。</returns>
      <param name="index">要取得或設定之元素以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">如果屬性已設定，則一律會擲回。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>移除所指定索引處的 <see cref="T:System.Collections.Generic.IList`1" /> 項目。此實作永遠都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除之項目以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException">一律會擲回。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Array" /> 索引開始，將 <see cref="T:System.Collections.ICollection" /> 的項目複製至 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從 <see cref="T:System.Collections.ICollection" /> 複製過來之元素的目的端。<see cref="T:System.Array" /> 必須有以零起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-<paramref name="array" /> 沒有以零起始的索引。-或-來源 <see cref="T:System.Collections.ICollection" /> 中的元素數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。-或-來源 <see cref="T:System.Collections.ICollection" /> 的型別無法自動轉換為目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出對 <see cref="T:System.Collections.ICollection" /> 的存取是否為同步 (安全執行緒)。</summary>
      <returns>如果 <see cref="T:System.Collections.ICollection" /> 的存取已同步處理 (執行緒安全) 則為 true，否則為 false。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的預設實作中，此屬性永遠會傳回 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>取得可用來對 <see cref="T:System.Collections.ICollection" /> 進行同步存取的物件。</summary>
      <returns>可用來對 <see cref="T:System.Collections.ICollection" /> 同步存取的物件。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的預設實作中，這個屬性永遠會傳回目前的執行個體。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回在集合中逐一查看的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>將項目加入至 <see cref="T:System.Collections.IList" />。此實作永遠都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>新項目的插入位置。</returns>
      <param name="value">要加入至 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">一律會擲回。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear">
      <summary>移除 <see cref="T:System.Collections.IList" /> 中的所有項目。此實作永遠都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">一律會擲回。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到 <see cref="T:System.Object" /> 則為 true，否則為 false。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 之型別不是為泛型型別參數 <paramref name="T" /> 所指定的型別。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IList" /> 中特定項目的索引。</summary>
      <returns>如果可在清單中找到，則為 <paramref name="value" /> 的索引；否則為 -1。</returns>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中尋找的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 之型別不是為泛型型別參數 <paramref name="T" /> 所指定的型別。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>將項目插入至 <see cref="T:System.Collections.IList" /> 的指定索引處。此實作永遠都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">應插入 <paramref name="value" /> 以零為起始的索引。</param>
      <param name="value">要插入至 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">一律會擲回。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 大小是否固定。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 有固定的大小則為 true，否則為 false。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的預設實作中，此屬性永遠會傳回 true。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.IList" /> 是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 是唯讀的，則為 true，否則為 false。在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的預設實作中，此屬性永遠會傳回 true。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>取得或設定指定索引上的元素。</summary>
      <returns>位於指定索引的元素。</returns>
      <param name="index">要取得之元素以零為起始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">如果屬性已設定，則一律會擲回。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>從 <see cref="T:System.Collections.IList" /> 移除第一次出現的特定物件。此實作永遠都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要從 <see cref="T:System.Collections.IList" /> 移除的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">一律會擲回。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除所指定索引處的 <see cref="T:System.Collections.IList" /> 項目。此實作永遠都會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除之項目以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException">一律會擲回。</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2">
      <summary>表示索引鍵/值組唯讀、泛型的集合。</summary>
      <typeparam name="TKey">字典中之索引鍵的型別。</typeparam>
      <typeparam name="TValue">字典中之值的型別。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> 類別的新執行個體，此執行個體是指定之字典周圍的包裝函式。</summary>
      <param name="dictionary">要包裝的字典。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ContainsKey(`0)">
      <summary>判斷字典是否包含具有指定之索引鍵的元素。</summary>
      <returns>如果字典包含具有所指定索引鍵的項目則為 true，否則為 false。</returns>
      <param name="key">要在字典中尋找的索引鍵。</param>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Count">
      <summary>取得字典中項目的數目。</summary>
      <returns>字典中項目的數目。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Dictionary">
      <summary>取得此 <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> 物件所包住的字典。</summary>
      <returns>此物件所包住的字典。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉程式。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Item(`0)">
      <summary>取得具有指定索引鍵的元素。</summary>
      <returns>具有所指定索引鍵的元素。</returns>
      <param name="key">要取得或設定之元素的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">屬性已擷取，並且找不到 <paramref name="key" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Keys">
      <summary>取得索引鍵，其中包含字典中的所有索引鍵。</summary>
      <returns>包含字典之索引鍵的索引鍵集合。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</summary>
      <param name="item">要加入字典的物件。</param>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{T}#Clear">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</summary>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>判斷字典是否包含特定值。</summary>
      <returns>如果在字典中找到 <paramref name="item" />，則為 true，否則為 false。</returns>
      <param name="item">要在字典中尋找的物件。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>從特定的陣列索引開始，將字典的元素複製到陣列。</summary>
      <param name="array">從字典中複製之元素的目的地的一維陣列。陣列必須具有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-來源字典中元素的數量大於從 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 結尾的可用空間。-或-<paramref name="T" /> 型別無法自動轉換成目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，指出字典是否為唯讀。</summary>
      <returns>所有情況下都是 true。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</summary>
      <returns>如果已從字典中成功移除 <paramref name="item" /> 則為 true，否則為 false。如果在原始字典中找不到 <paramref name="item" />，這個方法也會傳回 false。</returns>
      <param name="item">要從字典中移除的物件。</param>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</summary>
      <param name="key">要做為要加入之元素索引鍵的物件。</param>
      <param name="value">物件，做為要加入之元素的值。</param>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <summary>取得具有指定索引鍵的項目。</summary>
      <returns>具有所指定索引鍵的元素。</returns>
      <param name="key">要取得或設定之元素的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">屬性已擷取，並且找不到 <paramref name="key" />。</exception>
      <exception cref="T:System.NotSupportedException">屬性已設定。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>取得集合，其中包含字典的索引鍵。</summary>
      <returns>集合，其中包含實作 <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> 之物件的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</summary>
      <returns>如果已成功移除元素則為 true，否則為 false。如果在原始字典中找不到 <paramref name="item" />，這個方法也會傳回 false。</returns>
      <param name="key">要移除之元素的索引鍵。</param>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>取得含有字典中值的集合。</summary>
      <returns>集合，包含實作 <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> 之物件中的值。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>取得可列舉的集合，其中包含唯讀字典中的索引鍵。</summary>
      <returns>可列舉的集合，其中包含唯讀字典中的索引鍵。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>取得可列舉的集合，其中包含唯讀字典中的值。</summary>
      <returns>可列舉的集合，其中包含唯讀字典中的值。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的陣列索引開始，將字典的元素複製到陣列。</summary>
      <param name="array">從字典中複製之元素的目的地的一維陣列。陣列必須具有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-來源字典中元素的數量大於從 <paramref name="index" /> 到目的 <paramref name="array" /> 結尾的可用空間。-或- 來源字典的型別不能自動轉換成目的端 <paramref name="array" /> 的型別<paramref name="." /></exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出對字典的存取是否為同步的 (安全執行緒)。</summary>
      <returns>如果對字典的存取已同步處理 (安全執行緒) 則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>取得物件，可用來對字典進行同步存取。</summary>
      <returns>可用來對字典同步存取的物件。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</summary>
      <param name="key">要加入的元素的索引鍵。</param>
      <param name="value">要加入的元素值。</param>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Clear">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</summary>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>判斷字典是否包含具有指定之索引鍵的元素。</summary>
      <returns>如果字典包含具有所指定索引鍵的元素則為 true，否則為 false。</returns>
      <param name="key">要在字典中尋找的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>傳回字典的列舉程式。</summary>
      <returns>字典的列舉程式。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>取得值，指出字典大小是否固定。</summary>
      <returns>如果字典有固定的大小則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>取得值，指出字典是否為唯讀。</summary>
      <returns>所有情況下都是 true。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>取得具有指定索引鍵的元素。</summary>
      <returns>具有所指定索引鍵的元素。</returns>
      <param name="key">要取得之元素的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">屬性已設定。-或-屬性已設定，<paramref name="key" /> 不存在於集合中，而且字典具有固定大小。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Keys">
      <summary>取得集合，其中包含字典的索引鍵。</summary>
      <returns>集合，其中包含字典的索引鍵。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</summary>
      <param name="key">要移除之元素的索引鍵。</param>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Values">
      <summary>取得含有字典中值的集合。</summary>
      <returns>集合，其中包含字典中的所有值。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回在集合中逐一查看的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
      <summary>擷取與指定索引鍵關聯的值。</summary>
      <returns>如果實作 <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> 的物件包含具有所指定索引鍵的項目則為 true，否則為 false。</returns>
      <param name="key">將擷取其值的索引鍵。</param>
      <param name="value">傳回此方法時，如果找到指定的索引鍵，則為與此索引鍵相關聯的值，否則為 <paramref name="value" /> 參數之型別的預設值。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Values">
      <summary>取得含有字典中值的集合。</summary>
      <returns>集合，包含實作 <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> 之物件中的值。</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection">
      <summary>表示 <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> 物件的唯讀索引鍵集合。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>從特定的陣列索引開始，將集合的元素複製到陣列。</summary>
      <param name="array">為從集合中複製之元素的目的地的一維陣列。陣列必須具有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-來源集合中的項目個數超過從 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 末尾的可用空間。-或-<paramref name="T" /> 型別無法自動轉換成目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.Count">
      <summary>取得集合中的元素數目。</summary>
      <returns>集合中的項目數目。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</summary>
      <param name="item">要加入集合中的物件。</param>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</summary>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>判斷集合是否包含特定值。</summary>
      <returns>如果在集合中找到 <paramref name="item" />，則為 true，否則為 false。</returns>
      <param name="item">要在集合中尋找的物件。</param>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，該值指出集合是否是唯讀的。</summary>
      <returns>所有情況下都是 true。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</summary>
      <returns>如果已從集合中成功移除 <paramref name="item" /> 則為 true，否則為 false。如果在原始集合中找不到 <paramref name="item" />，這個方法也會傳回 false。</returns>
      <param name="item">要從集合中移除的物件。</param>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的陣列索引開始，將集合的元素複製到陣列。</summary>
      <param name="array">為從集合中複製之元素的目的地的一維陣列。陣列必須具有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-來源集合中的項目個數超過從 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 末尾的可用空間。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出對集合的存取是否為同步的 (安全執行緒)。</summary>
      <returns>如果對集合的存取已同步處理 (安全執行緒) 則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>取得物件，這個物件可用來同步化集合的存取。</summary>
      <returns>可用來同步存取集合的物件。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉程式。</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection">
      <summary>代表 <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> 物件之值的唯讀集合。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>從特定的陣列索引開始，將集合的元素複製到陣列。</summary>
      <param name="array">為從集合中複製之元素的目的地的一維陣列。陣列必須具有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-來源集合中的項目個數超過從 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 末尾的可用空間。-或-<paramref name="T" /> 型別無法自動轉換成目的 <paramref name="array" /> 的型別。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.Count">
      <summary>取得集合中的元素數目。</summary>
      <returns>集合中的項目數目。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉程式。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Add(`1)">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</summary>
      <param name="item">要加入集合中的物件。</param>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</summary>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Contains(`1)">
      <summary>判斷集合是否包含特定值。</summary>
      <returns>如果在集合中找到 <paramref name="item" />，則為 true，否則為 false。</returns>
      <param name="item">要在集合中尋找的物件。</param>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>取得值，該值指出集合是否是唯讀的。</summary>
      <returns>所有情況下都是 true。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{T}#Remove(`1)">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</summary>
      <returns>如果已從集合中成功移除 <paramref name="item" /> 則為 true，否則為 false。如果在原始集合中找不到 <paramref name="item" />，這個方法也會傳回 false。</returns>
      <param name="item">要從集合中移除的物件。</param>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的陣列索引開始，將集合的元素複製到陣列。</summary>
      <param name="array">為從集合中複製之元素的目的地的一維陣列。陣列必須具有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零為起始的索引，是複製開始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 為多維。-或-來源集合中的項目個數超過從 <paramref name="arrayIndex" /> 到目的 <paramref name="array" /> 末尾的可用空間。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出對集合的存取是否為同步的 (安全執行緒)。</summary>
      <returns>如果對集合的存取已同步處理 (安全執行緒) 則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>取得物件，這個物件可用來同步化集合的存取。</summary>
      <returns>可用來同步存取集合的物件。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉程式。</returns>
    </member>
    <member name="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
      <summary>指定用於雜湊檔案和產生強式名稱 (Strong Name) 的所有雜湊演算法。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.MD5">
      <summary>用來擷取 MD5 訊息摘要演算法的遮罩。MD5 是由 Rivest 於 1991 年所開發的。基本上，它是加強安全性的 MD4，雖然速度比 MD4 稍慢，但卻更加安全。演算法包含四個不同的步驟，與 MD4 設計的方法有些不同。訊息摘要大小，由於必須配合需求，因此是一樣的。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.None">
      <summary>指出沒有雜湊演算法的遮罩。如果您為多模組組件指定 None，Common Language Runtime 會預設成 SHA1 演算法，因為多模組組件需要產生雜湊。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1">
      <summary>用於擷取安全雜湊演算法 (Secure Hash Algorithm) 修訂版的遮罩，其修正在 SHA 中沒有發行的漏洞。</summary>
    </member>
    <member name="T:System.Configuration.Assemblies.AssemblyVersionCompatibility">
      <summary>定義不同型別的組件版本相容性。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameDomain">
      <summary>如果組件在相同的應用程式定義域中執行時，就無法與其他版本一起執行。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameMachine">
      <summary>如果組件在相同的電腦上執行，就無法與其他版本一起執行。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameProcess">
      <summary>如果組件在相同的處理序中執行，就無法與其他版本一起執行。</summary>
    </member>
    <member name="T:System.Diagnostics.ConditionalAttribute">
      <summary>指出編譯器 (Compiler) 應該忽略方法呼叫或屬性 (Attribute)，除非已定義指定的條件式編譯符號。</summary>
    </member>
    <member name="M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.ConditionalAttribute" /> 類別的新執行個體。</summary>
      <param name="conditionString">字串，指定與此屬性相關聯之區分大小寫的條件式編譯符號。</param>
    </member>
    <member name="P:System.Diagnostics.ConditionalAttribute.ConditionString">
      <summary>取得與 <see cref="T:System.Diagnostics.ConditionalAttribute" /> 屬性相關聯的條件式編譯符號。</summary>
      <returns>字串，指定與 <see cref="T:System.Diagnostics.ConditionalAttribute" /> 屬性相關聯之區分大小寫的條件式編譯符號。</returns>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute">
      <summary>修改 Runtime Just-In-Time (JIT) 偵錯的程式碼產生。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>用指定的 JIT (just-in-time) 編譯器追蹤與最佳化選項，初始化 <see cref="T:System.Diagnostics.DebuggableAttribute" /> 類別的新執行個體。</summary>
      <param name="isJITTrackingEnabled">true 可以啟用偵錯，否則為 false。</param>
      <param name="isJITOptimizerDisabled">true 可以停用執行的最佳化工具，否則為 false。</param>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)">
      <summary>用指定的 JIT (just-in-time) 編譯器偵錯模式，將 <see cref="T:System.Diagnostics.DebuggableAttribute" /> 類別的新執行個體初始化。</summary>
      <param name="modes">由各種列舉值經過逐一位元合併組成的結果，表示 JIT 編譯器的偵錯模式。</param>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute.DebuggingModes">
      <summary>指定 Just-In-Time (JIT) 編譯器的偵錯模式。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default">
      <summary>使用 Just-In-Time (JIT) 編譯器的預設行為，這些行為包括啟用最佳化設定、停用編輯後繼續支援，以及使用符號存放區的序列點 (如果有的話)。在 Windows Phone 中，一定會產生 JIT 追蹤資訊。如此偵錯工具可使 MSIL 的鏈結和它的對應機器碼相符，並追蹤儲存區域變數和函式引數的位置。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations">
      <summary>停用編譯器執行的最佳化，可讓您的輸出檔案變得更小、更快、更有效率。最佳化是在輸出檔案中程式碼重新排列所產生的結果，它可能會造成偵錯困難。一般來說，偵錯時應該停用最佳化。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.EnableEditAndContinue">
      <summary>啟用 [編輯後繼續]。此功能可以讓您在程式處於中斷模式時，變更您的原始程式碼。[編輯後繼續] 的功能與編譯器有相依性。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints">
      <summary>使用隱含式 MSIL 序列點，不是程式資料庫 (PDB) 序列點。符號資訊通常會為每個原始程式行包括至少一個 MSIL 位移。Just-In-Time (JIT) 編譯器要編譯方法時，會為應該保留的 MSIL 位移清單要求逐步分析服務。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None">
      <summary>在 Windows Phone 中，一定會產生 Just-In-Time (JIT) 追蹤資訊。此旗標效果與 <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default" /> 相同。</summary>
    </member>
    <member name="T:System.Diagnostics.Debugger">
      <summary>使用偵錯工具啟用通訊。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Diagnostics.Debugger.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Debugger" /> 類別的新執行個體。 </summary>
    </member>
    <member name="M:System.Diagnostics.Debugger.Break">
      <summary>表示已附加偵錯工具的中斷點。</summary>
    </member>
    <member name="P:System.Diagnostics.Debugger.IsAttached">
      <summary>取得值，指出偵錯工具是否附加至處理序。</summary>
      <returns>如果偵錯工具已附加為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Diagnostics.Debugger.IsLogging">
      <summary>檢查記錄是否由已附加偵錯工具啟用。</summary>
      <returns>如果已經附加偵錯工具，而且也已經開始記錄為 true，否則為 false。附加的偵錯工具就是 DbgManagedDebugger 登錄機碼中註冊的 Managed 偵錯工具。</returns>
    </member>
    <member name="M:System.Diagnostics.Debugger.Launch">
      <summary>啟動偵錯工具，並將其附加至處理序。</summary>
      <returns>如果啟動成功或偵錯工具已附加為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)">
      <summary>傳送已附加偵錯工具的訊息。</summary>
      <param name="level">訊息重要性的說明。</param>
      <param name="category">訊息的分類。參數限制為 256 個字元。超過字元限制的字串會被截斷。</param>
      <param name="message">要顯示的訊息。</param>
    </member>
    <member name="T:System.Diagnostics.DebuggerBrowsableAttribute">
      <summary>決定成員如何顯示在偵測工具變數視窗中。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerBrowsableAttribute.#ctor(System.Diagnostics.DebuggerBrowsableState)">
      <summary>初始化 <see cref="T:System.Diagnostics.DebuggerBrowsableAttribute" /> 類別的新執行個體。</summary>
      <param name="state">其中一個列舉值，指定顯示成員的方法。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="state" /> 不是其中一個 <see cref="T:System.Diagnostics.DebuggerBrowsableState" /> 值。</exception>
    </member>
    <member name="P:System.Diagnostics.DebuggerBrowsableAttribute.State">
      <summary>取得屬性的顯示狀態。</summary>
      <returns>其中一個列舉值。</returns>
    </member>
    <member name="T:System.Diagnostics.DebuggerBrowsableState">
      <summary>提供偵錯工具的顯示指示。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggerBrowsableState.Collapsed">
      <summary>元素會以摺疊的方式顯示。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggerBrowsableState.Never">
      <summary>元素永遠不會顯示。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggerBrowsableState.RootHidden">
      <summary>根元素 (Element) 不會顯示，然而，如果元素 (Element) 為項目 (Item) 陣列的集合，則會顯示子元素 (Element)。</summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerDisplayAttribute">
      <summary>決定類別或欄位如何在偵錯工具變數視窗中顯示。</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerDisplayAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.DebuggerDisplayAttribute" /> 類別的新執行個體。</summary>
      <param name="value">要顯示在型別執行個體之值欄中的字串。空字串 ("") 可以隱藏值資料行。</param>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Name">
      <summary>取得或設定顯示於偵錯工具變數視窗中的名稱。</summary>
      <returns>要顯示在偵錯工具變數視窗中的名稱。</returns>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Target">
      <summary>取得或設定屬性 (Attribute) 的目標型別。</summary>
      <returns>物件，辨識出屬性的目標型別。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.DebuggerDisplayAttribute.Target" /> 設為 null。</exception>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.TargetTypeName">
      <summary>取得或設定屬性 (Attribute) 的目標型別名稱。</summary>
      <returns>屬性 (Attribute) 的目標型別名稱。</returns>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Type">
      <summary>取得或設定要在偵錯工具變數視窗之型別資料行中顯示的字串。</summary>
      <returns>要在偵錯工具變數視窗之型別資料行中顯示的字串。</returns>
    </member>
    <member name="P:System.Diagnostics.DebuggerDisplayAttribute.Value">
      <summary>取得要在偵錯工具變數視窗之值資料行中顯示的字串。</summary>
      <returns>要在偵錯工具變數視窗之值資料行中顯示的字串。</returns>
    </member>
    <member name="T:System.Diagnostics.DebuggerHiddenAttribute">
      <summary>隱藏程式碼，不讓偵錯工具進入執行。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerHiddenAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.DebuggerHiddenAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerNonUserCodeAttribute">
      <summary>識別型別或成員，它們不是應用程式之使用者程式碼的一部分。</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerNonUserCodeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.DebuggerNonUserCodeAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerStepThroughAttribute">
      <summary>指出偵錯工具中逐步執行此程式碼，而不要進入程式碼。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerStepThroughAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.DebuggerStepThroughAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Diagnostics.DebuggerTypeProxyAttribute">
      <summary>指定型別的顯示 Proxy。</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggerTypeProxyAttribute.#ctor(System.String)">
      <summary>使用 Proxy 的型別名稱來初始化 <see cref="T:System.Diagnostics.DebuggerTypeProxyAttribute" /> 類別的新執行個體。</summary>
      <param name="typeName">Proxy 型別的名稱。</param>
    </member>
    <member name="M:System.Diagnostics.DebuggerTypeProxyAttribute.#ctor(System.Type)">
      <summary>使用 Proxy 的型別來初始化 <see cref="T:System.Diagnostics.DebuggerTypeProxyAttribute" /> 類別的新執行個體。</summary>
      <param name="type">Proxy 型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 null。</exception>
    </member>
    <member name="P:System.Diagnostics.DebuggerTypeProxyAttribute.ProxyTypeName">
      <summary>取得 Proxy 型別的名稱。</summary>
      <returns>Proxy 型別的名稱。</returns>
    </member>
    <member name="P:System.Diagnostics.DebuggerTypeProxyAttribute.Target">
      <summary>取得或設定屬性的目標型別。</summary>
      <returns>目標型別。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.DebuggerTypeProxyAttribute.Target" /> 設為 null。</exception>
    </member>
    <member name="P:System.Diagnostics.DebuggerTypeProxyAttribute.TargetTypeName">
      <summary>取得或設定屬性的目標型別名稱。</summary>
      <returns>目標型別的名稱。</returns>
    </member>
    <member name="T:System.Diagnostics.StackFrame">
      <summary>提供堆疊框架的相關資訊，表示目前執行緒的呼叫堆疊上的函式呼叫。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.StackFrame" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Boolean)">
      <summary>[安全性關鍵] 選擇性地擷取來源資訊，以初始化 <see cref="T:System.Diagnostics.StackFrame" /> 類別的新執行個體。</summary>
      <param name="fNeedFileInfo">true 可以擷取堆疊框架的檔案名稱、行號和欄數，否則為 false。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Diagnostics.StackFrame" /> 類別的新執行個體，而該類別對應於目前堆疊框架上方的框架。</summary>
      <param name="skipFrames">要略過的堆疊上的框架數。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32,System.Boolean)">
      <summary>[安全性關鍵] 選擇性地擷取來源資訊，以初始化 <see cref="T:System.Diagnostics.StackFrame" /> 類別的新執行個體，而該類別對應於目前堆疊框架上方的框架。</summary>
      <param name="skipFrames">要略過的堆疊上的框架數。</param>
      <param name="fNeedFileInfo">true 可以擷取堆疊框架的檔案名稱、行號和欄數，否則為 false。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.Diagnostics.StackFrame" /> 類別的新執行個體，而該類別只包含指定的檔名和行號。</summary>
      <param name="fileName">檔案名稱。</param>
      <param name="lineNumber">指定檔案中的行號。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Diagnostics.StackFrame" /> 類別的新執行個體，而該類別只包含指定的檔名、行號和欄號。</summary>
      <param name="fileName">檔案名稱。</param>
      <param name="lineNumber">指定檔案中的行號。</param>
      <param name="colNumber">指定檔案中的欄位數目。</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
      <summary>取得檔案中的欄位數目，含有正在執行的程式碼。這項資訊通常擷取自可執行檔的偵錯符號。</summary>
      <returns>檔案欄號；如果無法確定檔案欄號則為零。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
      <summary>取得檔案中的行號，含有正在執行的程式碼。這項資訊通常擷取自可執行檔的偵錯符號。</summary>
      <returns>檔案行號。-或- 如果無法確定檔案行號則為零。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
      <summary>[安全性關鍵] 取得檔案名稱，含有正在執行的程式碼。這項資訊通常擷取自可執行檔的偵錯符號。</summary>
      <returns>檔案名稱；如果無法確定檔案名稱，為 null 參考 (在 Visual Basic 中為 Nothing)。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
      <summary>為正在執行的方法取得從 Microsoft intermediate language (MSIL) 程式碼起始的位移。這項位移可能是大約值，這是根據 Just-In-Time 編譯器 (JIT Compiler) 是否產生偵錯程式碼而定。這項偵錯資訊的產生是由 <see cref="T:System.Diagnostics.DebuggableAttribute" /> 屬性所控制。</summary>
      <returns>從 MSIL 程式碼起始的位移，用於正在執行的方法。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
      <summary>取得框架正在執行的所在方法。</summary>
      <returns>框架正在執行的所在方法。</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetNativeOffset">
      <summary>為正在執行的方法取得從原生 (Native) Just-In-Time (JIT) 編譯程式碼起始的位移。這項偵錯資訊的產生是由 <see cref="T:System.Diagnostics.DebuggableAttribute" /> 類別所控制。</summary>
      <returns>從 JIT 編譯程式碼起始的位移，用於正在執行的方法。</returns>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
      <summary>當原生的 (Native) 或 Microsoft Intermediate Language (MSIL) 的位移不明時，定義傳回自 <see cref="M:System.Diagnostics.StackFrame.GetNativeOffset" /> 或 <see cref="M:System.Diagnostics.StackFrame.GetILOffset" /> 方法的值。此欄位為常數。</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
      <summary>建立堆疊框架的可讀取表示。</summary>
      <returns>堆疊框架的可讀取表示。</returns>
    </member>
    <member name="T:System.Diagnostics.StackTrace">
      <summary>表示堆疊追蹤，這是一或多個堆疊框架的已排序集合。</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor">
      <summary>從呼叫端的框架來初始化 <see cref="T:System.Diagnostics.StackTrace" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
      <summary>[安全性關鍵] 從呼叫端的框架來初始化 <see cref="T:System.Diagnostics.StackTrace" /> 類別的新執行個體，可以選擇性地擷取來源資訊。</summary>
      <param name="fNeedFileInfo">true 可以擷取檔案名稱、行號和欄數，否則為 false。</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
      <summary>初始化 <see cref="T:System.Diagnostics.StackTrace" /> 類別的新執行個體，此執行個體含有單一框架。</summary>
      <param name="frame">
        <see cref="T:System.Diagnostics.StackTrace" /> 物件應該含有的框架。</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
      <summary>使用指定的例外狀況物件來初始化 <see cref="T:System.Diagnostics.StackTrace" /> 類別的新執行個體。</summary>
      <param name="e">例外狀況物件，從其中建構堆疊追蹤。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 為 null。</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
      <summary>[安全性關鍵] 使用提供的例外狀況物件，以及選擇性地擷取來源資訊，來初始化 <see cref="T:System.Diagnostics.StackTrace" /> 類別的新執行個體。</summary>
      <param name="e">例外狀況物件，從其中建構堆疊追蹤。</param>
      <param name="fNeedFileInfo">true 可以擷取檔案名稱、行號和欄數，否則為 false。</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
      <summary>[安全性關鍵] 使用所指定的例外狀況物件初始化 <see cref="T:System.Diagnostics.StackTrace" /> 類別的新執行個體，並跳過指定數量的框架。</summary>
      <param name="e">例外狀況物件，從其中建構堆疊追蹤。</param>
      <param name="skipFrames">要開始追蹤的堆疊上的框架數。</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
      <summary>[安全性關鍵] 使用所指定的例外狀況物件將 <see cref="T:System.Diagnostics.StackTrace" /> 類別的新執行個體初始化，並跳過指定數量的框架，亦可選擇性擷取來源資訊。</summary>
      <param name="e">例外狀況物件，從其中建構堆疊追蹤。</param>
      <param name="skipFrames">要開始追蹤的堆疊上的框架數。</param>
      <param name="fNeedFileInfo">true 可以擷取檔案名稱、行號和欄數，否則為 false。</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
      <summary>[安全性關鍵] 從呼叫端的框架初始化 <see cref="T:System.Diagnostics.StackTrace" /> 類別的新執行個體，略過指定的框架數。</summary>
      <param name="skipFrames">要開始追蹤的堆疊上的框架數。</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
      <summary>[安全性關鍵] 使用呼叫端的框架初始化 <see cref="T:System.Diagnostics.StackTrace" /> 類別的新執行個體，並跳過指定數量的框架，亦可選擇性擷取來源資訊。</summary>
      <param name="skipFrames">要開始追蹤的堆疊上的框架數。</param>
      <param name="fNeedFileInfo">true 可以擷取檔案名稱、行號和欄數，否則為 false。</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Threading.Thread,System.Boolean)">
      <summary>[安全性關鍵] 為特定執行緒、並選擇性地擷取來源資訊，來初始化 <see cref="T:System.Diagnostics.StackTrace" /> 類別的新執行個體。</summary>
      <param name="targetThread">要求其堆疊追蹤的執行緒。</param>
      <param name="needFileInfo">true 可以擷取檔案名稱、行號和欄數，否則為 false。</param>
    </member>
    <member name="P:System.Diagnostics.StackTrace.FrameCount">
      <summary>取得堆疊追蹤中的框架數。</summary>
      <returns>堆疊追蹤中的框架數。</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
      <summary>取得指定的堆疊框架。</summary>
      <returns>指定的堆疊框架。</returns>
      <param name="index">要求的堆疊框架索引。</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrames">
      <summary>傳回目前堆疊追蹤內的所有堆疊框架的複本。</summary>
      <returns>陣列，表示堆疊追蹤中的函式呼叫。</returns>
    </member>
    <member name="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
      <summary>定義要從堆疊追蹤省略的方法數預設值。此欄位為常數。</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
      <summary>建立堆疊追蹤的可讀取表示。</summary>
      <returns>堆疊追蹤的可讀取表示。</returns>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute">
      <summary>隱藏對特定靜態分析工具規則違規的回報，並允許多重隱藏一個單一程式碼成品。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute" /> 類別的新執行個體，指定靜態分析工具的分類和分析規則的識別項。</summary>
      <param name="category">屬性的分類。</param>
      <param name="checkId">套用屬性的分析工具規則的識別項。</param>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Category">
      <summary>取得可識別屬性的分類的類別。</summary>
      <returns>辨識屬性的分類。</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.CheckId">
      <summary>取得隱藏之靜態分析工具規則的識別項。</summary>
      <returns>隱藏之靜態分析工具規則的識別項。</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Justification">
      <summary>取得或設定隱藏程式碼分析訊息的對齊。</summary>
      <returns>隱藏訊息的對齊。</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.MessageId">
      <summary>取得或設定在排除準則上展開的選擇性引數。</summary>
      <returns>包含已展開排除準則的字串。</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Scope">
      <summary>取得或設定與屬性相關的程式碼範圍。</summary>
      <returns>與屬性相關的程式碼範圍。</returns>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute.Target">
      <summary>取得或設定完整路徑，其表示屬性的目標。</summary>
      <returns>表示屬性目標的完整路徑。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.Contract">
      <summary>包含表示程式合約的靜態方法，例如前置條件、後置條件及物件非變異。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
      <summary>檢查條件，且如果條件為 false，則遵循已為分析器設定的擴大原則。</summary>
      <param name="condition">要測試的條件運算式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
      <summary>檢查條件。如果條件為 false，則遵循分析器所設定的擴大原則，並顯示指定的訊息。</summary>
      <param name="condition">要測試的條件運算式。</param>
      <param name="userMessage">當條件不符合時所顯示的訊息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
      <summary>指示程式碼分析工具假設指定的條件為 true，即使該條件無法以靜態方式證明永遠是 true 亦然。</summary>
      <param name="condition">要假設 true 的條件運算式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
      <summary>指示程式碼分析工具假設條件為 true，即使該條件無法以靜態方式證明永遠是 true 亦然，同時在假設失敗時顯示訊息。</summary>
      <param name="condition">要假設 true 的條件運算式。</param>
      <param name="userMessage">要在假設失敗時張貼的訊息。</param>
    </member>
    <member name="E:System.Diagnostics.Contracts.Contract.ContractFailed">
      <summary>當合約失敗時發生。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
      <summary>當方法的合約僅包含 if-then-throw 形式的前置條件時，標記合約區段的結尾。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
      <summary>指定封入方法或屬性的後置條件合約。</summary>
      <param name="condition">要測試的條件運算式。運算式可以包含 <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" />、<see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" /> 及 <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /> 值。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
      <summary>指定提供之結束條件的後置條件合約，以及在條件為 false 時所要顯示的訊息。</summary>
      <param name="condition">要測試的條件運算式。運算式可以包含 <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /> 及 <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" /> 值。</param>
      <param name="userMessage">當運算式不是 true 時所顯示的訊息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
      <summary>根據所提供的例外狀況和條件，針對封入的方法或屬性指定後置條件合約。</summary>
      <param name="condition">要測試的條件運算式。</param>
      <typeparam name="TException">例外狀況型別，其會叫用後置條件檢查。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
      <summary>針對封入方法或屬性來指定後置條件合約，和當條件是 false 時，根據所提供之例外狀況和條件來顯示的訊息。</summary>
      <param name="condition">要測試的條件運算式。</param>
      <param name="userMessage">當運算式是 false 時所顯示的訊息。</param>
      <typeparam name="TException">例外狀況型別，其會叫用後置條件檢查。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary>判斷元素集合內的元素是否出現在函式中。</summary>
      <returns>只有在 <paramref name="predicate" /> 為 <paramref name="collection" /> 中任何 <paramref name="T" /> 型別之元素傳回 true 時，才為 true。</returns>
      <param name="collection">集合，將從其中取出 <paramref name="T" /> 型別的元素以傳遞給 <paramref name="predicate" />。</param>
      <param name="predicate">要評估 <paramref name="collection" /> 中元素的函式。</param>
      <typeparam name="T">包含在 <paramref name="collection" /> 中的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary>判斷整數範圍內是否有任何整數使指定的測試成立。</summary>
      <returns>如果 <paramref name="predicate" /> 為從 <paramref name="fromInclusive" /> 開始到 <paramref name="toExclusive" /> - 1 的任何整數傳回 true，則為 true。</returns>
      <param name="fromInclusive">要傳遞至 <paramref name="predicate" /> 的第 1 個整數。</param>
      <param name="toExclusive">要傳遞至 <paramref name="predicate" /> 的最後 1 個整數加一。</param>
      <param name="predicate">要評估指定範圍內任何整數值的函式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="toExclusive " /> 小於 <paramref name="fromInclusive" />。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary>判斷集合內的所有元素是否都出現在函式中。</summary>
      <returns>只有在 <paramref name="predicate" /> 為 <paramref name="collection" /> 中所有 <paramref name="T" /> 型別之元素傳回 true 時，才為 true。</returns>
      <param name="collection">集合，將從其中取出 <paramref name="T" /> 型別的元素以傳遞給 <paramref name="predicate" />。</param>
      <param name="predicate">要評估 <paramref name="collection" /> 中所有元素是否存在的函式。</param>
      <typeparam name="T">包含在 <paramref name="collection" /> 中的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 或 <paramref name="predicate" /> 為 null。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary>判斷特定條件對於指定之範圍內的所有整數是否有效。</summary>
      <returns>如果 <paramref name="predicate" /> 為從 <paramref name="fromInclusive" /> 開始到 <paramref name="toExclusive" /> - 1 的所有整數傳回 true，則為 true。</returns>
      <param name="fromInclusive">要傳遞至 <paramref name="predicate" /> 的第 1 個整數。</param>
      <param name="toExclusive">要傳遞至 <paramref name="predicate" /> 的最後 1 個整數加一。</param>
      <param name="predicate">要評估指定範圍中整數是否存在的函式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="toExclusive " /> 小於 <paramref name="fromInclusive" />。</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
      <summary>指定封入類別的非變異合約。</summary>
      <param name="condition">要測試的條件運算式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
      <summary>指定封入類別的非變異合約，並在合約的條件失敗時顯示訊息。</summary>
      <param name="condition">要測試的條件運算式。</param>
      <param name="userMessage">當條件為 false 時所要顯示的訊息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
      <summary>表示其在方法或屬性開始時的值。</summary>
      <returns>在方法或屬性開始時之欄位或參數的值。</returns>
      <param name="value">要表示的值 (欄位或參數)。</param>
      <typeparam name="T">值的型別。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
      <summary>指定封入方法或屬性的前置條件合約，並在合約的條件失敗時擲回例外狀況。</summary>
      <param name="condition">要測試的條件運算式。</param>
      <typeparam name="TException">當條件為 false 時所要擲回的例外狀況。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
      <summary>指定封入方法或屬性的前置條件合約。</summary>
      <param name="condition">要測試的條件運算式。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
      <summary>指定封入方法或屬性的前置條件合約，並在合約的條件失敗時顯示訊息。</summary>
      <param name="condition">要測試的條件運算式。</param>
      <param name="userMessage">當條件為 false 時所要顯示的訊息。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
      <summary>指定封入方法或屬性的前置條件合約，並在合約的條件失敗時擲回包含所提供訊息的例外狀況。</summary>
      <param name="condition">要測試的條件運算式。</param>
      <param name="userMessage">當條件為 false 時所要顯示的訊息。</param>
      <typeparam name="TException">當條件為 false 時所要擲回的例外狀況。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
      <summary>表示方法或屬性的傳回值。</summary>
      <returns>封入方法或屬性的傳回值。</returns>
      <typeparam name="T">封入方法或屬性的傳回值型別。</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
      <summary>表示從方法傳回時的最後 (輸出) out 參數值。</summary>
      <returns>out 參數的輸出值。</returns>
      <param name="value">out 參數。</param>
      <typeparam name="T">out 參數的型別。</typeparam>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
      <summary>可讓您定義縮寫，代表可以使用的合約，以取代完整合約語法。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractAbbreviatorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
      <summary>啟用將舊版 if-then-throw 程式碼分構成個別的方法以重複使用，並提供對擲回的例外狀況和引數的完全控制。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
      <summary>指定不同的型別包含此型別的程式碼合約。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractClassAttribute" /> 類別的新執行個體。</summary>
      <param name="typeContainingContracts">型別，包含此型別的程式碼合約。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassAttribute.TypeContainingContracts">
      <summary>取得型別，此型別包含此型別的程式碼合約。</summary>
      <returns>型別，包含此型別的程式碼合約。 </returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
      <summary>指定類別是某個型別的合約。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassForAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractClassForAttribute" /> 類別的新執行個體，指定目前類別為其合約的型別。</summary>
      <param name="typeContractsAreFor">目前類別為其合約的型別。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassForAttribute.TypeContractsAreFor">
      <summary>取得型別，即其中要套用此程式碼合約的型別。</summary>
      <returns>其中要套用此程式碼合約的型別。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailedEventArgs">
      <summary>提供 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件的方法與資料。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary>提供 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件的資料。</summary>
      <param name="failureKind">一個列舉值，指定失敗的合約。</param>
      <param name="message">事件的訊息。</param>
      <param name="condition">事件的條件。</param>
      <param name="originalException">造成事件的例外狀況。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Condition">
      <summary>取得合約失敗的條件。</summary>
      <returns>失敗的條件。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind">
      <summary>取得失敗的合約類型。</summary>
      <returns>一個列舉值，指定失敗之合約的型別。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled">
      <summary>表示是否已處理 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件。</summary>
      <returns>如果已處理事件，則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Message">
      <summary>取得描述 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件的訊息。</summary>
      <returns>描述事件的訊息。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException">
      <summary>取得造成 <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> 事件的原始例外狀況。</summary>
      <returns>造成事件的例外狀況。</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled">
      <summary>[安全性關鍵] 將 <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled" /> 屬性設定為 true。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind">
      <summary>[安全性關鍵] 將 <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind" /> 屬性設定為 true。</summary>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind">
      <summary>指出是否應該套用程式碼合約擴大原則。</summary>
      <returns>true 以套用擴大原則；否則為 false。預設值為 true。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailureKind">
      <summary>指定失敗的合約型別。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assert">
      <summary>
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Assert" /> 合約失敗。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assume">
      <summary>
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Assume" /> 合約失敗。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Invariant">
      <summary>
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Invariant" /> 合約失敗。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Postcondition">
      <summary>
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Ensures" /> 合約失敗。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException">
      <summary>
        <see cref="Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow" /> 合約失敗。</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Precondition">
      <summary>
        <see cref="Overload:System.Diagnostics.Contracts.Contract.Requires" /> 合約失敗。</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
      <summary>將方法標示為類別的非變異方法。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractInvariantMethodAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
      <summary>可讓您在組件、型別或方法精細度上設定合約和工具選項。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>使用提供的類別、設定和啟用/停用值，初始化 <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> 類別的新執行個體。</summary>
      <param name="category">要設定的選項類別。</param>
      <param name="setting">選項設定。</param>
      <param name="enabled">true 以啟用選項；flase 以停用選項。</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.String)">
      <summary>使用提供的類別、設定和值，初始化 <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> 類別的新執行個體。</summary>
      <param name="category">要設定的選項類別。</param>
      <param name="setting">選項設定。</param>
      <param name="value">設定的值。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Category">
      <summary>取得選項的類別。</summary>
      <returns>選項的類別。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Enabled">
      <summary>判斷是否已啟用選項。</summary>
      <returns>如果選項已啟用，則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Setting">
      <summary>取得選項的設定。</summary>
      <returns>選項的設定。</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Value">
      <summary>取得選項的值。</summary>
      <returns>選項的值。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
      <summary>指定當欄位的可視性比方法還低時，可在方法合約中使用的欄位。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute" /> 類別的新執行個體。</summary>
      <param name="name">要套用至欄位的屬性名稱。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.Name">
      <summary>取得要套用至欄位的屬性名稱。</summary>
      <returns>要套用至欄位的屬性名稱。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
      <summary>指定組件是包含合約的參考組件。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
      <summary>識別沒有執行階段行為的成員。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
      <summary>指出分析工具不執行靜態驗證便假設組件、型別或成員的正確性。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractVerificationAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Diagnostics.Contracts.ContractVerificationAttribute" /> 類別的新執行個體。</summary>
      <param name="value">true 以要求驗證；否則為 false。</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractVerificationAttribute.Value">
      <summary>取得指出是否要驗證目標合約的值。</summary>
      <returns>如果需要驗證，則為 true；否則為 false。</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.PureAttribute">
      <summary>指出型別或方法是純正的，也就是它不會執行任何可見的狀態變更。</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.PureAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Contracts.PureAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
      <summary>表示符號存放區參考的文件。</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetCheckSum(System.Guid,System.Byte[])">
      <summary>設定總和檢查碼 (Checksum) 資訊。</summary>
      <param name="algorithmId">表示演算法 ID 的 GUID。</param>
      <param name="checkSum">總和檢查碼。</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetSource(System.Byte[])">
      <summary>在符號存放區中存放文件的未經處理來源。</summary>
      <param name="source">文件來源，表示為不帶正負號的位元組。 </param>
    </member>
    <member name="T:System.Globalization.Calendar">
      <summary>表示劃分的時間，例如週、月和年。</summary>
    </member>
    <member name="M:System.Globalization.Calendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.Calendar" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定日數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定日數加入指定 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要將日數加入的 <see cref="T:System.DateTime" />。</param>
      <param name="days">要加入的日數。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在此月曆支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="days" /> 不在 <see cref="T:System.DateTime" /> 傳回值支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定時數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定時數加入指定 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要將小時加入的 <see cref="T:System.DateTime" />。</param>
      <param name="hours">要加入的時數。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在此月曆支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="hours" /> 不在 <see cref="T:System.DateTime" /> 傳回值支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定毫秒數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定毫秒數加入指定 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要加入毫秒的 <see cref="T:System.DateTime" />。</param>
      <param name="milliseconds">要加入的毫秒數。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在此月曆支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="milliseconds" /> 不在 <see cref="T:System.DateTime" /> 傳回值支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定分鐘數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定分鐘數加入指定 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要將分鐘加入的 <see cref="T:System.DateTime" />。</param>
      <param name="minutes">要加入的分鐘數。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在此月曆支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minutes" /> 不在 <see cref="T:System.DateTime" /> 傳回值支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)">
      <summary>當在衍生類別中覆寫時，傳回與指定 <see cref="T:System.DateTime" /> 相差指定月數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的月數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要將月份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要加入的月數。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在此月曆支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 不在 <see cref="T:System.DateTime" /> 傳回值支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定秒數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定秒數加入指定 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要將秒鐘加入的 <see cref="T:System.DateTime" />。</param>
      <param name="seconds">要加入的秒數。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在此月曆支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="seconds" /> 不在 <see cref="T:System.DateTime" /> 傳回值支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定週數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的週數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要將週加入的 <see cref="T:System.DateTime" />。</param>
      <param name="weeks">要加入的週數。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在此月曆支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="weeks" /> 不在 <see cref="T:System.DateTime" /> 傳回值支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)">
      <summary>當在衍生類別中覆寫時，傳回與指定 <see cref="T:System.DateTime" /> 相差指定年數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的年數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要將年份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要加入的年數。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在此月曆支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> 不在 <see cref="T:System.DateTime" /> 傳回值支援的範圍內。</exception>
    </member>
    <member name="F:System.Globalization.Calendar.CurrentEra">
      <summary>表示目前曆法的目前紀元。</summary>
    </member>
    <member name="P:System.Globalization.Calendar.Eras">
      <summary>當在衍生類別中覆寫時，取得目前曆法中的紀元清單。</summary>
      <returns>整數陣列，表示目前曆法中的紀元。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)">
      <summary>當在衍生類別中覆寫時，傳回指定 <see cref="T:System.DateTime" /> 中月份的日期。</summary>
      <returns>正整數，表示 <paramref name="time" /> 參數中月份的日期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)">
      <summary>當在衍生類別中覆寫時，傳回指定 <see cref="T:System.DateTime" /> 中的星期。</summary>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，指出 <paramref name="time" /> 參數中一週的日期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)">
      <summary>當在衍生類別中覆寫時，傳回指定 <see cref="T:System.DateTime" /> 中年份的日期。</summary>
      <returns>正整數，表示 <paramref name="time" /> 參數中年份的日期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)">
      <summary>傳回目前紀元之指定月份和年份中的天數。</summary>
      <returns>在目前紀元中指定年份的指定月份中的日數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">正整數，表示月份。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，傳回指定月份、年份和紀元中的天數。</summary>
      <returns>在指定紀元的指定年份的指定月份中的日數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">正整數，表示月份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInYear(System.Int32)">
      <summary>傳回目前紀元之指定年份中的天數。</summary>
      <returns>在目前紀元的指定年份中的日數。</returns>
      <param name="year">整數，表示年份。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，傳回指定年份和紀元中的天數。</summary>
      <returns>在指定紀元的指定年份中的日數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetEra(System.DateTime)">
      <summary>當在衍生類別中覆寫時，傳回指定 <see cref="T:System.DateTime" /> 中的紀元。</summary>
      <returns>表示 <paramref name="time" /> 中紀元的整數。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetHour(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的小時值。</summary>
      <returns>從 0 至 23 的整數，表示 <paramref name="time" /> 中的小時。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <returns>正整數，指出在指定的年份及紀元中的閏月。-或-如果這個曆法不支援閏月，或 <paramref name="year" /> 和 <paramref name="era" /> 參數未指定閏年，則為零。</returns>
      <param name="year">一年。</param>
      <param name="era">一紀元。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的毫秒值。</summary>
      <returns>0 到 999 的雙精確度浮點數，表示 <paramref name="time" /> 參數中的毫秒。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMinute(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的分鐘值。</summary>
      <returns>從 0 至 59 的整數，表示 <paramref name="time" /> 中的分鐘。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonth(System.DateTime)">
      <summary>當在衍生類別中覆寫時，傳回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <returns>正整數，表示 <paramref name="time" /> 中的月份。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)">
      <summary>傳回目前紀元的指定年份中的月數。</summary>
      <returns>在目前紀元的指定年份中的月數。</returns>
      <param name="year">整數，表示年份。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>當在衍生類別中覆寫時，傳回指定紀元的指定年份中月數。</summary>
      <returns>在指定紀元的指定年份中的月數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetSecond(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的秒值。</summary>
      <returns>從 0 至 59 的整數，表示 <paramref name="time" /> 中的秒。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>傳回年份中的週，包含指定 <see cref="T:System.DateTime" /> 值中的日期。</summary>
      <returns>正整數，表示 <paramref name="time" /> 參數中日期所屬年份中的某週。</returns>
      <param name="time">日期和時間值。</param>
      <param name="rule">列舉值，定義日曆週。</param>
      <param name="firstDayOfWeek">
        <see cref="T:System.DayOfWeek" /> 值，指出週的第一天。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 早於 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 或晚於 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />。-或-<paramref name="firstDayOfWeek" /> 不是有效的 <see cref="T:System.DayOfWeek" /> 值。-或-<paramref name="rule" /> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetYear(System.DateTime)">
      <summary>當在衍生類別中覆寫時，傳回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <returns>表示 <paramref name="time" /> 中年份的整數。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)">
      <summary>判斷目前紀元中指定日期是否為閏日。</summary>
      <returns>如果指定日為閏日，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">正整數，表示月份。</param>
      <param name="day">表示日期的正整數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="day" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>當在衍生類別中覆寫時，判斷指定紀元中的指定日期是否為閏日。</summary>
      <returns>如果指定日為閏日，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">正整數，表示月份。</param>
      <param name="day">表示日期的正整數。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="day" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)">
      <summary>判斷目前紀元的指定年份中指定的月份是否為閏月。</summary>
      <returns>如果指定月為閏月，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">正整數，表示月份。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>當在衍生類別中覆寫時，判斷指定紀元的指定年份中指定的月份是否為閏月。</summary>
      <returns>如果指定月為閏月，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">正整數，表示月份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapYear(System.Int32)">
      <summary>判斷目前紀元中指定的年份是否為閏年。</summary>
      <returns>如果指定的年份為閏年，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>當在衍生類別中覆寫時，判斷指定紀元中指定的年份是否為閏年。</summary>
      <returns>如果指定的年份為閏年，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.Calendar.IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Globalization.Calendar" /> 物件是否為唯讀。</summary>
      <returns>如果此 <see cref="T:System.Globalization.Calendar" /> 物件是唯讀的，則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.Globalization.Calendar.MaxSupportedDateTime">
      <summary>取得受 <see cref="T:System.Globalization.Calendar" /> 物件所支援的最晚日期和時間。</summary>
      <returns>受此曆法所支援的最晚日期和時間。預設值為 <see cref="F:System.DateTime.MaxValue" />。</returns>
    </member>
    <member name="P:System.Globalization.Calendar.MinSupportedDateTime">
      <summary>取得受 <see cref="T:System.Globalization.Calendar" /> 物件所支援的最早日期和時間。</summary>
      <returns>受此曆法所支援的最早日期和時間。預設值為 <see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回設定為目前紀元中指定日期和時間的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">正整數，表示月份。</param>
      <param name="day">表示日期的正整數。</param>
      <param name="hour">從 0 到 23 的整數，表示小時。</param>
      <param name="minute">從 0 到 59 的整數，表示分鐘。</param>
      <param name="second">從 0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">從 0 到 999 的整數，表示毫秒。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="day" /> 在該曆法所支援的範圍之外。-或-<paramref name="hour" /> 小於零或大於 23。-或-<paramref name="minute" /> 小於零或大於 59。-或-<paramref name="second" /> 小於零或大於 59。-或-<paramref name="millisecond" /> 小於零或大於 999。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>當在衍生類別中覆寫時，傳回設定為指定紀元中指定的日期和時間的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">正整數，表示月份。</param>
      <param name="day">表示日期的正整數。</param>
      <param name="hour">從 0 到 23 的整數，表示小時。</param>
      <param name="minute">從 0 到 59 的整數，表示分鐘。</param>
      <param name="second">從 0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">從 0 到 999 的整數，表示毫秒。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="day" /> 在該曆法所支援的範圍之外。-或-<paramref name="hour" /> 小於零或大於 23。-或-<paramref name="minute" /> 小於零或大於 59。-或-<paramref name="second" /> 小於零或大於 59。-或-<paramref name="millisecond" /> 小於零或大於 999。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為 4 位數年份，方法是使用 <see cref="P:System.Globalization.Calendar.TwoDigitYearMax" /> 屬性以判斷適當的世紀。</summary>
      <returns>整數，包含 <paramref name="year" /> 的四位數表示。</returns>
      <param name="year">兩位數或四位數整數，表示要轉換的年份。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.Calendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Globalization.Calendar" /> 物件是唯讀。</exception>
    </member>
    <member name="T:System.Globalization.CalendarWeekRule">
      <summary>定義決定年份的第一週的各種規則 (Rule)。</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstDay">
      <summary>指出一年的第一週開始於該年的第一天，並結束於被指定為該週第一天的前一天。該值為 0。</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstFourDayWeek">
      <summary>指出一年的第一週有四天以上在被指定為該週的第一天之前。該值為 2。</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstFullWeek">
      <summary>指出一年的第一週開始於，一年的第一天當天或之後被指定為一週第一天的那天。該值為 1。</summary>
    </member>
    <member name="T:System.Globalization.CharUnicodeInfo">
      <summary>擷取關於 Unicode 字元的資訊。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)">
      <summary>取得與指定字元關聯的數值。</summary>
      <returns>與指定字元關聯的數值。-或-如果指定的字元不是數字字元，則為 -1。</returns>
      <param name="ch">要取得數值的 Unicode 字元。</param>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)">
      <summary>取得值，該值與指定字串之指定索引處的字元關聯。</summary>
      <returns>數值，該值與指定字串之指定索引處的字元關聯。-或-如果位於指定字串之指定索引處的字元不是數字字元，則為 -1。</returns>
      <param name="s">
        <see cref="T:System.String" />，包含要取得數值的 Unicode 字元。</param>
      <param name="index">要取得數值之 Unicode 字元的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在 <paramref name="s" /> 的有效索引範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)">
      <summary>取得指定之字元的 Unicode 分類。</summary>
      <returns>
        <see cref="T:System.Globalization.UnicodeCategory" /> 值，指出指定之字元的分類。</returns>
      <param name="ch">要取得 Unicode 分類的 Unicode 字元。</param>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)">
      <summary>取得字元的 Unicode 分類，其位於指定字串的指定索引處。</summary>
      <returns>
        <see cref="T:System.Globalization.UnicodeCategory" /> 值，指出位於指定字串之指定索引處的字元分類。</returns>
      <param name="s">
        <see cref="T:System.String" />，包含要取得 Unicode 分類的 Unicode 字元。</param>
      <param name="index">要取得 Unicode 分類之 Unicode 字元的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在 <paramref name="s" /> 的有效索引範圍之外。 </exception>
    </member>
    <member name="T:System.Globalization.CompareInfo">
      <summary>實作區分文化特性 (Culture) 的字串比較的一組方法。</summary>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>將一個字串的區段與另一個字串的區段相比較，並傳回整數，此整數表示兩者在排序次序中彼此的關聯性。</summary>
      <returns>整數，表示兩個字串在排序次序中的關聯性，如下所示：Value狀況零兩個字串相等。小於零<paramref name="string1" /> 的指定區段在 <paramref name="string2" /> 的指定區段之前。大於零<paramref name="string1" /> 的指定區段在 <paramref name="string2" /> 的指定區段之後。</returns>
      <param name="string1">要比較的第 1 個字串。</param>
      <param name="offset1">
        <paramref name="string1" /> 中要開始比較字元的以零為起始的索引。</param>
      <param name="length1">
        <paramref name="string1" /> 中要比較的連續字元數。</param>
      <param name="string2">要比較的第 2 個字串。</param>
      <param name="offset2">
        <paramref name="string2" /> 中要開始比較字元的以零為起始的索引。</param>
      <param name="length2">
        <paramref name="string2" /> 中要比較的連續字元數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> 或 <paramref name="length1" /> 或 <paramref name="offset2" /> 或 <paramref name="length2" /> 小於零。-或-<paramref name="offset1" /> 大於或等於 <paramref name="string1" /> 中的字元數。-或-<paramref name="offset2" /> 大於或等於 <paramref name="string2" /> 中的字元數。-或-<paramref name="length1" /> 大於從 <paramref name="offset1" /> 到 <paramref name="string1" /> 結尾的字元數。-或-<paramref name="length2" /> 大於從 <paramref name="offset2" /> 到 <paramref name="string2" /> 結尾的字元數。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，將一個字串的區段與另一個字串的區段相比較，並傳回整數，此整數表示兩者在排序次序中彼此的關聯性。</summary>
      <returns>整數，表示兩個字串在排序次序中的關聯性，如下所示：值狀況零兩個字串相等。小於零<paramref name="string1" /> 的指定區段小於 <paramref name="string2" /> 的指定區段。大於零<paramref name="string1" /> 的指定區段大於 <paramref name="string2" /> 的指定區段。</returns>
      <param name="string1">要比較的第 1 個字串。</param>
      <param name="offset1">
        <paramref name="string1" /> 中字元的以零為起始的索引，在要開始比較處。</param>
      <param name="length1">
        <paramref name="string1" /> 中要比較的連續字元數。</param>
      <param name="string2">要比較的第 2 個字串。</param>
      <param name="offset2">
        <paramref name="string2" /> 中字元的以零為起始的索引，在要開始比較處。</param>
      <param name="length2">
        <paramref name="string2" /> 中要比較的連續字元數。</param>
      <param name="options">
        <see cref="T:System.Globalization.CompareOptions" /> 值，其定義應如何比較 <paramref name="string1" /> 和 <paramref name="string2" />。<paramref name="options" /> 不是本身所使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 值，就是下列一或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> 和 <see cref="F:System.Globalization.CompareOptions.StringSort" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> 或 <paramref name="length1" /> 或 <paramref name="offset2" /> 或 <paramref name="length2" /> 小於零。-或-<paramref name="offset1" /> 大於或等於 <paramref name="string1" /> 中的字元數。-或-<paramref name="offset2" /> 大於或等於 <paramref name="string2" /> 中的字元數。-或-<paramref name="length1" /> 大於從 <paramref name="offset1" /> 到 <paramref name="string1" /> 結尾的字元數。-或-<paramref name="length2" /> 大於從 <paramref name="offset2" /> 到 <paramref name="string2" /> 結尾的字元數。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)">
      <summary>將字串的結尾區段與另一個字串的結尾區段相比較，並傳回整數，此整數表示兩者在排序次序中彼此的關聯性。</summary>
      <returns>整數，表示兩個字串在排序次序中的關聯性，如下所示：值狀況零兩個字串相等。小於零<paramref name="string1" /> 的指定區段小於 <paramref name="string2" /> 的指定區段。大於零<paramref name="string1" /> 的指定區段大於 <paramref name="string2" /> 的指定區段。</returns>
      <param name="string1">要比較的第 1 個字串。</param>
      <param name="offset1">
        <paramref name="string1" /> 中字元的以零為起始的索引，在要開始比較處。</param>
      <param name="string2">要比較的第 2 個字串。</param>
      <param name="offset2">
        <paramref name="string2" /> 中字元的以零為起始的索引，在要開始比較處。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> 或 <paramref name="offset2" /> 小於零。-或-<paramref name="offset1" /> 大於或等於 <paramref name="string1" /> 中的字元數。-或-<paramref name="offset2" /> 大於或等於 <paramref name="string2" /> 中的字元數。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，將一個字串的結尾區段與另一個字串的結尾區段相比較，並傳回整數，此整數表示兩者在排序次序中彼此的關聯性。</summary>
      <returns>整數，表示兩個字串在排序次序中的關聯性，如下所示：值狀況零兩個字串相等。小於零<paramref name="string1" /> 的指定區段小於 <paramref name="string2" /> 的指定區段。大於零<paramref name="string1" /> 的指定區段大於 <paramref name="string2" /> 的指定區段。</returns>
      <param name="string1">要比較的第 1 個字串。</param>
      <param name="offset1">
        <paramref name="string1" /> 中字元的以零為起始的索引，在要開始比較處。</param>
      <param name="string2">要比較的第 2 個字串。</param>
      <param name="offset2">
        <paramref name="string2" /> 中字元的以零為起始的索引，在要開始比較處。</param>
      <param name="options">
        <see cref="T:System.Globalization.CompareOptions" /> 值，其定義應如何比較 <paramref name="string1" /> 和 <paramref name="string2" />。<paramref name="options" /> 不是本身所使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 值，就是下列一或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> 和 <see cref="F:System.Globalization.CompareOptions.StringSort" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> 或 <paramref name="offset2" /> 小於零。-或-<paramref name="offset1" /> 大於或等於 <paramref name="string1" /> 中的字元數。-或-<paramref name="offset2" /> 大於或等於 <paramref name="string2" /> 中的字元數。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String)">
      <summary>比較兩個字串，並傳回整數，這個整數表示兩個字串在排序次序中彼此的關聯性。</summary>
      <returns>整數，表示兩個字串在排序次序中的關聯性，如下所示：值狀況零兩個字串相等。小於零<paramref name="string1" /> 在 <paramref name="string2" /> 之前。大於零<paramref name="string1" /> 在 <paramref name="string2" /> 之後。</returns>
      <param name="string1">要比較的第 1 個字串。</param>
      <param name="string2">要比較的第 2 個字串。</param>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值比較兩個字串，並傳回整數，此整數表示兩個字串在排序次序中彼此的關聯性。</summary>
      <returns>整數，表示兩個字串在排序次序中的關聯性，如下所示：值狀況零兩個字串相等。小於零<paramref name="string1" /> 小於 <paramref name="string2" />。大於零<paramref name="string1" /> 大於 <paramref name="string2" />。</returns>
      <param name="string1">要比較的第 1 個字串。</param>
      <param name="string2">要比較的第 2 個字串。</param>
      <param name="options">
        <see cref="T:System.Globalization.CompareOptions" /> 值，其定義應如何比較 <paramref name="string1" /> 和 <paramref name="string2" />。<paramref name="options" /> 不是本身所使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 值，就是下列一或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> 和 <see cref="F:System.Globalization.CompareOptions.StringSort" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Equals(System.Object)">
      <summary>判斷指定的物件是否等於目前的 <see cref="T:System.Globalization.CompareInfo" /> 物件。</summary>
      <returns>如果指定的物件等於目前的 <see cref="T:System.Globalization.CompareInfo" />，則為 true；否則為 false。</returns>
      <param name="value">要與目前 <see cref="T:System.Globalization.CompareInfo" /> 比較的物件。</param>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)">
      <summary>初始化新的 <see cref="T:System.Globalization.CompareInfo" /> 物件，此物件與具有所指定名稱的文化特性相關聯。</summary>
      <returns>新的 <see cref="T:System.Globalization.CompareInfo" /> 物件，與其相關聯的文化特性具有指定之識別項，並使用目前的 <see cref="T:System.Reflection.Assembly" /> 中的字串比較方法。</returns>
      <param name="name">表示文化特性名稱的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 為無效的文化特性名稱。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetHashCode">
      <summary>做為目前 <see cref="T:System.Globalization.CompareInfo" /> 的雜湊函式，用於雜湊演算法和資料結構，例如雜湊資料表。</summary>
      <returns>目前 <see cref="T:System.Globalization.CompareInfo" /> 的雜湊程式碼。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)">
      <summary>搜尋指定的字元，並傳回整個來源字串內第 1 個相符元素的以零為起始的索引。</summary>
      <returns>如果有找到，則是在整個 <paramref name="source" /> 內，<paramref name="value" /> 之第一個相符項目的以零起始的索引，否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的字元，並傳回整個來源字串內第 1 個相符元素的以零為起始的索引。</summary>
      <returns>如果有找到，則是在整個 <paramref name="source" /> 內，使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，找到 <paramref name="value" /> 第一次出現的以零為起始的索引，否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <param name="options">
        <see cref="T:System.Globalization.CompareOptions" /> 值，其定義應如何比較字串。<paramref name="options" /> 不是本身所使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 值，就是下列一或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的字元，並傳回第 1 個相符項目 (在來源字串中從指定索引延伸至字串結尾的區段內) 的以零為起始的索引。</summary>
      <returns>如果有找到，則是在 <paramref name="source" /> 的區段 (從 <paramref name="startIndex" /> 延伸至 <paramref name="source" /> 結尾) 內，使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，找到 <paramref name="value" /> 第一次出現的以零為起始的索引，否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <param name="startIndex">搜尋以零為起始的索引。</param>
      <param name="options">
        <see cref="T:System.Globalization.CompareOptions" /> 值，其定義應如何比較 <paramref name="source" /> 和 <paramref name="value" />。<paramref name="options" /> 不是本身所使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 值，就是下列一或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 不在 <paramref name="source" /> 的有效索引範圍內。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)">
      <summary>搜尋指定的字元，並傳回來源字串區段 (起始於指定索引並且含有指定的元素數) 內第 1 個相符元素的以零為起始的索引。</summary>
      <returns>如果有找到，則是在 <paramref name="source" /> 的區段 (開始於 <paramref name="startIndex" />，並包含 <paramref name="count" /> 所指定數目的元素) 內，<paramref name="value" /> 第一次出現的以零為起始的索引，否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <param name="startIndex">搜尋以零為起始的索引。</param>
      <param name="count">要在區段中搜尋的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 不在 <paramref name="source" /> 的有效索引範圍內。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="source" /> 中指定有效區段。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的字元，並傳回第 1 個相符元素 (在來源字串中起始於指定索引且含有指定元素數的區段內) 的以零為起始的索引。</summary>
      <returns>如果有找到，則是在 <paramref name="source" /> 的區段 (開始於 <paramref name="startIndex" />，並包含 <paramref name="count" /> 所指定數目的元素) 內，使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，找到 <paramref name="value" /> 第一次出現的以零為起始的索引，否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <param name="startIndex">搜尋以零為起始的索引。</param>
      <param name="count">要在區段中搜尋的元素數目。</param>
      <param name="options">
        <see cref="T:System.Globalization.CompareOptions" /> 值，其定義應如何比較 <paramref name="source" /> 和 <paramref name="value" />。<paramref name="options" /> 不是本身所使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 值，就是下列一或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 不在 <paramref name="source" /> 的有效索引範圍內。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="source" /> 中指定有效區段。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)">
      <summary>搜尋指定的子字串，並傳回來源字串內第 1 個相符元素的以零為起始的索引。</summary>
      <returns>如果有找到，則是在整個 <paramref name="source" /> 內，<paramref name="value" /> 之第一個相符項目的以零起始的索引；否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。-或-<paramref name="value" /> 為 null。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的子字串，並傳回整個來源字串內第 1 個相符元素的以零為起始的索引。</summary>
      <returns>如果有找到，則是在整個 <paramref name="source" /> 內，使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，找到 <paramref name="value" /> 第一次出現的以零為起始的索引；否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <param name="options">
        <see cref="T:System.Globalization.CompareOptions" /> 值，其定義應如何比較 <paramref name="source" /> 和 <paramref name="value" />。<paramref name="options" /> 不是本身所使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 值，就是下列一或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。-或-<paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的子字串，並傳回第 1 個相符項目 (在來源字串中從指定索引延伸至字串結尾的區段內) 的以零為起始的索引。</summary>
      <returns>如果有找到，則是在 <paramref name="source" /> 的區段 (從 <paramref name="startIndex" /> 延伸至 <paramref name="source" /> 結尾) 內，使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，找到 <paramref name="value" /> 第一次出現的以零為起始的索引；否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <param name="startIndex">搜尋以零為起始的索引。</param>
      <param name="options">
        <see cref="T:System.Globalization.CompareOptions" /> 值，其定義應如何比較 <paramref name="source" /> 和 <paramref name="value" />。<paramref name="options" /> 不是本身所使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 值，就是下列一或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。-或-<paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 不在 <paramref name="source" /> 的有效索引範圍內。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)">
      <summary>搜尋指定的子字串，並傳回來源字串的區段 (起始於指定索引且含有指定元素數) 內第 1 個相符項目以零為起始的索引。</summary>
      <returns>如果有找到，則是在 <paramref name="source" /> 的區段 (開始於 <paramref name="startIndex" />，並包含 <paramref name="count" /> 所指定數目的元素) 內，<paramref name="value" /> 第一次出現的以零為起始的索引；否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <param name="startIndex">搜尋以零為起始的索引。</param>
      <param name="count">要在區段中搜尋的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。-或-<paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 不在 <paramref name="source" /> 的有效索引範圍內。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="source" /> 中指定有效區段。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的子字串，並傳回第 1 個相符元素 (在來源字串中起始於指定索引且含有指定元素數的區段內) 的以零為起始的索引。</summary>
      <returns>如果有找到，則是在 <paramref name="source" /> 的區段 (開始於 <paramref name="startIndex" />，並包含 <paramref name="count" /> 所指定數目的元素) 內，使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，找到 <paramref name="value" /> 第一次出現的以零為起始的索引；否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <param name="startIndex">搜尋以零為起始的索引。</param>
      <param name="count">要在區段中搜尋的元素數目。</param>
      <param name="options">
        <see cref="T:System.Globalization.CompareOptions" /> 值，其定義應如何比較 <paramref name="source" /> 和 <paramref name="value" />。<paramref name="options" /> 不是本身所使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 值，就是下列一或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。-或-<paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 不在 <paramref name="source" /> 的有效索引範圍內。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="source" /> 中指定有效區段。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)">
      <summary>判斷指定的來源字串是否以指定字首開始。</summary>
      <returns>如果 <paramref name="prefix" /> 的長度小於或等於 <paramref name="source" /> 的長度，且 <paramref name="source" /> 是以 <paramref name="prefix" /> 開始，則為 true；否則為 false。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="prefix">要與 <paramref name="source" /> 的開頭比較的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。-或-<paramref name="prefix" /> 為 null。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，判斷指定的來源字串是否以指定字首開始。</summary>
      <returns>如果 <paramref name="prefix" /> 的長度小於或等於 <paramref name="source" /> 的長度，且 <paramref name="source" /> 是以 <paramref name="prefix" /> 開始，則為 true；否則為 false。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="prefix">要與 <paramref name="source" /> 的開頭比較的字串。</param>
      <param name="options">
        <see cref="T:System.Globalization.CompareOptions" /> 值，其定義應如何比較 <paramref name="source" /> 和 <paramref name="prefix" />。<paramref name="options" /> 不是本身所使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 值，就是下列一或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。-或-<paramref name="prefix" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)">
      <summary>判斷指定的來源字串是否以指定字尾結束。</summary>
      <returns>如果 <paramref name="suffix" /> 的長度小於或等於 <paramref name="source" /> 的長度，且 <paramref name="source" /> 是以 <paramref name="suffix" /> 結束，則為 true；否則為 false。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="suffix">要與 <paramref name="source" /> 的結尾比較的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。-或-<paramref name="suffix" /> 為 null。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，判斷指定的來源字串是否以指定字尾結束。</summary>
      <returns>如果 <paramref name="suffix" /> 的長度小於或等於 <paramref name="source" /> 的長度，且 <paramref name="source" /> 是以 <paramref name="suffix" /> 結束，則為 true；否則為 false。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="suffix">要與 <paramref name="source" /> 的結尾比較的字串。</param>
      <param name="options">
        <see cref="T:System.Globalization.CompareOptions" /> 值，其定義應如何比較 <paramref name="source" /> 和 <paramref name="suffix" />。<paramref name="options" /> 不是本身所使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 值，就是下列一或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。-或-<paramref name="suffix" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)">
      <summary>搜尋指定的字元，並傳回整個來源字串內最後 1 個相符元素的以零為起始的索引。</summary>
      <returns>如果有找到，則是在整個 <paramref name="source" /> 內，<paramref name="value" /> 最後一次出現的以零為起始的索引，否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的字元，並傳回整個來源字串內最後 1 個相符元素的以零為起始的索引。</summary>
      <returns>如果有找到，則是在整個 <paramref name="source" /> 內，使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，找到 <paramref name="value" /> 最後一次出現的以零為起始的索引，否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <param name="options">
        <see cref="T:System.Globalization.CompareOptions" /> 值，其定義應如何比較 <paramref name="source" /> 和 <paramref name="value" />。<paramref name="options" /> 不是本身所使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 值，就是下列一或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的字元，並傳回最後 1 個相符項目 (在來源字串中從字串開頭延伸至指定索引的區段內) 的以零為起始的索引。</summary>
      <returns>如果有找到，則是在 <paramref name="source" /> 的區段 (從 <paramref name="source" /> 的開頭延伸至 <paramref name="startIndex" />) 內，使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，找到 <paramref name="value" /> 最後一次出現的以零為起始的索引，否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <param name="startIndex">回溯搜尋以零為起始的索引。</param>
      <param name="options">
        <see cref="T:System.Globalization.CompareOptions" /> 值，其定義應如何比較 <paramref name="source" /> 和 <paramref name="value" />。<paramref name="options" /> 不是本身所使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 值，就是下列一或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 不在 <paramref name="source" /> 的有效索引範圍內。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)">
      <summary>搜尋指定的字元，並傳回最後 1 個相符項目 (在來源字串中含有指定元素數且結束於指定索引的區段內) 的以零為起始的索引。</summary>
      <returns>如果有找到，則是在 <paramref name="source" /> 的區段 (包含 <paramref name="count" /> 所指定數目的元素，且結束於 <paramref name="startIndex" />) 內，<paramref name="value" /> 最後一次出現的以零為起始的索引，否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <param name="startIndex">回溯搜尋以零為起始的起始索引。</param>
      <param name="count">要在區段中搜尋的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 不在 <paramref name="source" /> 的有效索引範圍內。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="source" /> 中指定有效區段。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的字元，並傳回最後 1 個相符項目 (在來源字串中含有指定元素數且結束於指定索引的區段內) 的以零為起始的索引。</summary>
      <returns>如果有找到，則是在 <paramref name="source" /> 的區段 (包含 <paramref name="count" /> 所指定數目的元素，且結束於 <paramref name="startIndex" />) 內，使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，找到 <paramref name="value" /> 最後一次出現的以零為起始的索引，否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字元。</param>
      <param name="startIndex">回溯搜尋以零為起始的起始索引。</param>
      <param name="count">要在區段中搜尋的元素數目。</param>
      <param name="options">
        <see cref="T:System.Globalization.CompareOptions" /> 值，其定義應如何比較 <paramref name="source" /> 和 <paramref name="value" />。<paramref name="options" /> 不是本身所使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 值，就是下列一或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 不在 <paramref name="source" /> 的有效索引範圍內。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="source" /> 中指定有效區段。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)">
      <summary>搜尋指定的子字串，並傳回整個來源字串中最後 1 個相符元素的以零為起始的索引。</summary>
      <returns>如果有找到，則是在整個 <paramref name="source" /> 內，<paramref name="value" /> 最後一次出現的以零為起始的索引；否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。-或-<paramref name="value" /> 為 null。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的子字串，並傳回整個來源字串內最後 1 個相符元素的以零為起始的索引。</summary>
      <returns>如果有找到，則是在整個 <paramref name="source" /> 內，使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，找到 <paramref name="value" /> 最後一次出現的以零為起始的索引；否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <param name="options">
        <see cref="T:System.Globalization.CompareOptions" /> 值，其定義應如何比較 <paramref name="source" /> 和 <paramref name="value" />。<paramref name="options" /> 不是本身所使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 值，就是下列一或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。-或-<paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的子字串，並傳回在來源字串的區段 (從字串開頭延伸至指定索引) 內最後 1 個相符元素的以零為起始的索引。</summary>
      <returns>如果有找到，則是在 <paramref name="source" /> 的區段 (從 <paramref name="source" /> 的開頭延伸至 <paramref name="startIndex" />) 內，使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，找到 <paramref name="value" /> 最後一次出現的以零為起始的索引；否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <param name="startIndex">回溯搜尋以零為起始的起始索引。</param>
      <param name="options">
        <see cref="T:System.Globalization.CompareOptions" /> 值，其定義應如何比較 <paramref name="source" /> 和 <paramref name="value" />。<paramref name="options" /> 不是本身所使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 值，就是下列一或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。-或-<paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 不在 <paramref name="source" /> 的有效索引範圍內。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)">
      <summary>搜尋指定的子字串，並傳回最後 1 個相符項目 (在來源字串中含有指定元素數且結束於指定索引的區段內) 的以零為起始的索引。</summary>
      <returns>如果有找到，則是在 <paramref name="source" /> 的區段 (包含 <paramref name="count" /> 所指定數目的元素，且結束於 <paramref name="startIndex" />) 內，<paramref name="value" /> 最後一次出現的以零為起始的索引；否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <param name="startIndex">回溯搜尋以零為起始的起始索引。</param>
      <param name="count">要在區段中搜尋的元素數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。-或-<paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 不在 <paramref name="source" /> 的有效索引範圍內。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="source" /> 中指定有效區段。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定 <see cref="T:System.Globalization.CompareOptions" /> 值，搜尋指定的子字串，並傳回最後 1 個相符項目 (在來源字串中含有指定元素數且結束於指定索引的區段內) 的以零為起始的索引。</summary>
      <returns>如果有找到，則是在 <paramref name="source" /> 的區段 (包含 <paramref name="count" /> 所指定數目的元素，且結束於 <paramref name="startIndex" />) 內，使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，找到 <paramref name="value" /> 最後一次出現的以零為起始的索引；否則為 -1。</returns>
      <param name="source">要搜尋的字串。</param>
      <param name="value">要在 <paramref name="source" /> 內尋找的字串。</param>
      <param name="startIndex">回溯搜尋以零為起始的起始索引。</param>
      <param name="count">要在區段中搜尋的元素數目。</param>
      <param name="options">
        <see cref="T:System.Globalization.CompareOptions" /> 值，其定義應如何比較 <paramref name="source" /> 和 <paramref name="value" />。<paramref name="options" /> 不是本身所使用的 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 值，就是下列一或多個值的位元組合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 null。-或-<paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 不在 <paramref name="source" /> 的有效索引範圍內。-或-<paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="source" /> 中指定有效區段。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含無效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="P:System.Globalization.CompareInfo.Name">
      <summary>取得由此 <see cref="T:System.Globalization.CompareInfo" /> 物件進行排序作業所使用之文化特性的名稱。</summary>
      <returns>文化特性的名稱。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.ToString">
      <summary>傳回表示目前 <see cref="T:System.Globalization.CompareInfo" /> 的字串。</summary>
      <returns>字串，表示目前 <see cref="T:System.Globalization.CompareInfo" />。</returns>
    </member>
    <member name="T:System.Globalization.CompareOptions">
      <summary>定義與字串比較方法一起使用的選項。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreCase">
      <summary>指出字串比較必須忽略大小寫。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreKanaType">
      <summary>指出字串比較必須忽略假名類型。假名類型意指日文平假名和片假名字元，表示日本語言中的語音。平假名用於本土日文的語句和字詞，而片假名則用於自其他語言引進的字詞，例如「computer」或「Internet」。平假名和片假名都可以用來表達語音。如果選取此值，就會將表示一個語音的平假名字元視為等於表示相同語音的片假名字元。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreNonSpace">
      <summary>指出字串比較必須忽略無間距的組合字元，例如變音符號。Unicode Standard 將組合的字元定義為與基底字元結合以產生新字元的字元。無間距的組合字元在呈現時本身並不佔用間距位置。如需非間距組合字元的詳細資訊，請參閱 Unicode 首頁中的「Unicode 標準」(英文)。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreSymbols">
      <summary>指出字串比較必須忽略符號，例如空白字元、標點符號、貨幣符號、百分比符號、數學符號、＆ 符號等等。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreWidth">
      <summary>指出字串比較必須忽略字元寬度。例如，日文片假名字元可以書寫為全型或半型。如果選取此值，則片假名字元會書寫為全型並視為等同於以半型書寫的相同字元。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.None">
      <summary>指出字串比較的預設選項設定值。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.Ordinal">
      <summary>指出字串比較必須使用各個字元的 Unicode 值，這是快速的比較但不區分文化特性。以「U+xxxx」開始的字串的順序比以「U+yyyy」開始的字串優先，如果 xxxx 小於 yyyy 的話。此值無法與其他 <see cref="T:System.Globalization.CompareOptions" /> 值搭配使用，而且必須單獨使用。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.OrdinalIgnoreCase">
      <summary>字串比較必須忽略大小寫，然後執行序數比較。這項技術等於使用非變異文化特性將字串轉換為大寫，然後在結果上執行序數比較。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.StringSort">
      <summary>指出字串比較必須使用字串排序演算法。在字串排序中，連字號 (-)、所有格符號 (') 以及其他非英數字元的順序會比英數字元優先。</summary>
    </member>
    <member name="T:System.Globalization.CultureInfo">
      <summary>提供特定文化特性 (Culture) 的相關資訊。提供的資訊包括文化特性的名稱、書寫系統、使用的曆法、數字和日期使用的格式，以及排序字串的順序。</summary>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.String)">
      <summary>根據名稱所指定的文化特性來初始化 <see cref="T:System.Globalization.CultureInfo" /> 類別的新執行個體。</summary>
      <param name="name">預先定義文化特性名稱或現有 <see cref="T:System.Globalization.CultureInfo" /> 物件的 <see cref="P:System.Globalization.CultureInfo.Name" /> 屬性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">在 Windows 系統上，<paramref name="name" /> 不是有效的文化特性名稱。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.Calendar">
      <summary>取得文化特性使用的預設曆法。</summary>
      <returns>物件，表示文化特性所使用的預設曆法。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.Clone">
      <summary>建立目前 <see cref="T:System.Globalization.CultureInfo" /> 物件的複本。</summary>
      <returns>目前 <see cref="T:System.Globalization.CultureInfo" /> 物件的複本。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CompareInfo">
      <summary>取得 <see cref="T:System.Globalization.CompareInfo" /> 物件，其定義應如何比較文化特性的字串。</summary>
      <returns>物件，定義如何比較文化特性的字串。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CurrentCulture">
      <summary>取得 <see cref="T:System.Globalization.CultureInfo" /> 物件，表示目前執行緒使用的文化特性。</summary>
      <returns>物件，表示目前執行緒使用的文化特性。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CurrentUICulture">
      <summary>取得 <see cref="T:System.Globalization.CultureInfo" /> 物件，表示資源管理員用於執行階段查詢特定文化特性資源的目前文化特性。</summary>
      <returns>物件，表示資源管理員用於執行階段查詢特定文化特性資源的目前文化特性。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.DateTimeFormat">
      <summary>取得或設定 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件，此物件會定義用來將日期和時間轉換為字串的適當文化特性格式。</summary>
      <returns>物件，定義用來將日期和時間轉換為字串的適當文化特性格式。</returns>
      <exception cref="T:System.ArgumentNullException">屬性設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> 屬性或任何 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 屬性已設定，而且 <see cref="T:System.Globalization.CultureInfo" /> 是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture">
      <summary>取得或設定目前應用程式定義域中執行緒的預設文化特性。</summary>
      <returns>目前應用程式定義域中執行緒的預設文化特性，或者，如果目前系統文化特性為應用程式定義域中的預設執行緒文化特性，則為 null。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture">
      <summary>取得或設定目前應用程式定義域中執行緒的預設 UI 文化特性。</summary>
      <returns>目前應用程式定義域中執行緒的預設 UI 文化特性，或者，如果目前系統 UI 文化特性為應用程式定義域中的預設執行緒 UI 文化特性，則為 null。</returns>
      <exception cref="T:System.ArgumentException">在設定作業中，<see cref="P:System.Globalization.CultureInfo.Name" /> 屬性值無效。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.DisplayName">
      <summary>在 .NET Framework 當地語系化版本的語言中，取得 "language (country/region)" 格式的文化特性名稱。</summary>
      <returns>.NET Framework 當地語系化版本的語言中 "language (country/region)" 格式的文化特性名稱，其中 language 為語言的完整名稱，而 country/region 為國家或地區的完整名稱。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.EnglishName">
      <summary>取得以英文表示，且格式為 "language (country/region)" 的文化特性名稱。</summary>
      <returns>使用英文，且格式為 "language (country/region)" 的文化特性名稱，其中，language 為語系的完整名稱，而 country/region 為國家或地區的完整名稱。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.Equals(System.Object)">
      <summary>判斷指定的物件與此 <see cref="T:System.Globalization.CultureInfo" /> 物件是否有相同的文化特性。</summary>
      <returns>如果 <paramref name="value" /> 的文化特性與目前 <see cref="T:System.Globalization.CultureInfo" /> 的文化特性相同，則為 true；否則為 false。</returns>
      <param name="value">要與此 <see cref="T:System.Globalization.CultureInfo" /> 物件比較的物件。</param>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetFormat(System.Type)">
      <summary>取得定義如何格式化指定型別的物件。</summary>
      <returns>如果 <paramref name="formatType" /> 為表示 <see cref="T:System.Globalization.NumberFormatInfo" /> 類別的 <see cref="T:System.Type" /> 物件，則為 <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> 屬性的值。這個值是 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件，包含這個 <see cref="T:System.Globalization.CultureInfo" /> 物件的數字格式資訊。-或-如果 <paramref name="formatType" /> 為表示 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 類別的 <see cref="T:System.Type" /> 物件，則為 <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> 屬性的值。這個值是 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件，包含這個 <see cref="T:System.Globalization.CultureInfo" /> 物件的日期和時間格式資訊。-或-如果 <paramref name="formatType" /> 為任何其他物件，則為 null。</returns>
      <param name="formatType">要為其取得格式物件的型別。此方法只支援 <see cref="T:System.Globalization.NumberFormatInfo" /> 和 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 型別。</param>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetHashCode">
      <summary>做為目前 <see cref="T:System.Globalization.CultureInfo" /> 的雜湊函式，適合於雜湊演算法和資料結構 (如雜湊資料表)。</summary>
      <returns>目前 <see cref="T:System.Globalization.CultureInfo" /> 的雜湊程式碼。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.InvariantCulture">
      <summary>取得與文化特性無關的 (不變的) <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <returns>與文化特性無關的 (不變的) <see cref="T:System.Globalization.CultureInfo" />。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.IsNeutralCulture">
      <summary>取得值，指出目前 <see cref="T:System.Globalization.CultureInfo" /> 物件是否表示中性文化特性。</summary>
      <returns>如果目前 <see cref="T:System.Globalization.CultureInfo" /> 物件表示中性文化特性，則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.IsReadOnly">
      <summary>取得值，指出目前 <see cref="T:System.Globalization.CultureInfo" /> 物件是否為唯讀。</summary>
      <returns>如果目前的 <see cref="T:System.Globalization.CultureInfo" /> 物件是唯讀的，則為 true；否則為 false。預設值為 false。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.Name">
      <summary>取得 "languagecode-country/regioncode" 格式的文化特性名稱。</summary>
      <returns>"languagecode-country/regioncode" 格式的文化特性名稱，其中，languagecode 為衍生自 ISO 639-1 的兩個小寫字母代碼，而 country/regioncode 為衍生自 ISO 3166 的兩個大寫字母代碼。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.NativeName">
      <summary>取得文化特性設定為要顯示的文化特性原生名稱，由語言、國家/地區和選擇性字集組成。</summary>
      <returns>文化特性原生名稱，由語言的完整限定名稱、國家/地區的完整限定名稱和選擇性字集組成。這種格式會在 <see cref="T:System.Globalization.CultureInfo" /> 類別的描述中討論。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.NumberFormat">
      <summary>取得或設定 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件，此物件會定義用來將數字、貨幣值和百分比轉換為字串的適當文化特性格式。</summary>
      <returns>物件，定義用來輸出數字、貨幣值和百分比的適當文化特性格式。</returns>
      <exception cref="T:System.ArgumentNullException">屬性正被設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> 屬性或任何 <see cref="T:System.Globalization.NumberFormatInfo" /> 屬性正在設定，而且 <see cref="T:System.Globalization.CultureInfo" /> 是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.OptionalCalendars">
      <summary>取得此文化特性可使用的曆法清單。</summary>
      <returns>陣列，表示此 <see cref="T:System.Globalization.CultureInfo" /> 物件所表示之文化特性可使用的曆法。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.Parent">
      <summary>取得 <see cref="T:System.Globalization.CultureInfo" />，表示目前 <see cref="T:System.Globalization.CultureInfo" /> 的父文化特性。</summary>
      <returns>
        <see cref="T:System.Globalization.CultureInfo" />，表示目前 <see cref="T:System.Globalization.CultureInfo" /> 的父文化特性。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)">
      <summary>傳回指定之 <see cref="T:System.Globalization.CultureInfo" /> 物件的唯讀包裝函式。</summary>
      <returns>
        <paramref name="ci" /> 的唯讀 <see cref="T:System.Globalization.CultureInfo" /> 包裝函式。</returns>
      <param name="ci">要包裝的 <see cref="T:System.Globalization.CultureInfo" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ci" /> 為 null。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.TextInfo">
      <summary>取得 <see cref="T:System.Globalization.TextInfo" /> 物件，定義與文化特性相關的書寫系統。</summary>
      <returns>
        <see cref="T:System.Globalization.TextInfo" /> 物件，定義與文化特性相關的書寫系統。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ToString">
      <summary>傳回包含目前 <see cref="T:System.Globalization.CultureInfo" /> 物件名稱的字串，其格式為 "languagecode-country/regioncode"。</summary>
      <returns>包含目前 <see cref="T:System.Globalization.CultureInfo" /> 名稱的字串。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName">
      <summary>取得目前 <see cref="T:System.Globalization.CultureInfo" /> 的語言的 ISO 639-1 兩個字母代碼。</summary>
      <returns>目前 <see cref="T:System.Globalization.CultureInfo" /> 物件之語言的 ISO 639-1 兩個字母代碼。</returns>
    </member>
    <member name="T:System.Globalization.CultureNotFoundException">
      <summary>當方法嘗試建構本機系統上沒有的文化特性時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor">
      <summary>使用系統提供的訊息來初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">解釋此例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和導致此例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">解釋此例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，即會在處理內部例外狀況的 catch 區塊中發生目前的例外狀況。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String)">
      <summary>使用指定的錯誤訊息和造成此例外狀況的參數名稱來初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 類別的新執行個體。</summary>
      <param name="paramName">造成目前例外狀況的參數名稱。</param>
      <param name="message">解釋此例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的錯誤訊息、無效的文化特性名稱和造成此例外狀況的內部例外狀況的參考來初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">解釋此例外狀況原因的錯誤訊息。</param>
      <param name="invalidCultureName">找不到的文化特性名稱。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，即會在處理內部例外狀況的 catch 區塊中發生目前的例外狀況。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String,System.String)">
      <summary>使用指定的錯誤訊息、無效的文化特性名稱和造成此例外狀況的參數名稱來初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 類別的新執行個體。</summary>
      <param name="paramName">造成目前例外狀況的參數名稱。</param>
      <param name="invalidCultureName">找不到的文化特性名稱。</param>
      <param name="message">解釋此例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="P:System.Globalization.CultureNotFoundException.InvalidCultureName">
      <summary>取得找不到的文化特性名稱。</summary>
      <returns>無效的文化特性名稱。</returns>
    </member>
    <member name="P:System.Globalization.CultureNotFoundException.Message">
      <summary>取得說明例外狀況原因的錯誤訊息。</summary>
      <returns>描述例外狀況之詳細資料的文字字串。</returns>
    </member>
    <member name="T:System.Globalization.DateTimeFormatInfo">
      <summary>定義 <see cref="T:System.DateTime" /> 值如何依據文化特性 (Culture) 來格式化和顯示。</summary>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.#ctor">
      <summary>初始化與文化特性無關的 (不因文化特性而異) <see cref="T:System.Globalization.DateTimeFormatInfo" /> 類別的可寫入新執行個體。</summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames">
      <summary>取得或設定包含特定文化特性之星期縮寫名稱的一維陣列 (型別為 <see cref="T:System.String" />)。</summary>
      <returns>包含特定文化特性之星期縮寫名稱的一維陣列 (型別為 <see cref="T:System.String" />)。<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的陣列包含 "Sun"、"Mon"、"Tue"、"Wed"、"Thu"、"Fri" 和 "Sat"。</returns>
      <exception cref="T:System.ArgumentNullException">已嘗試將屬性設定為 null。</exception>
      <exception cref="T:System.ArgumentException">嘗試將屬性設定為多維度陣列或長度不是剛好為 7 的一維陣列。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames">
      <summary>取得或設定字串陣列，此陣列包含與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的縮寫月份名稱。</summary>
      <returns>縮寫月份名稱的字串陣列。</returns>
      <exception cref="T:System.ArgumentException">在 set 作業中，陣列式多維的，或者長度不是剛好為 13。</exception>
      <exception cref="T:System.ArgumentNullException">在設定的作業中，數值陣列或數值陣列的其中一個元素為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames">
      <summary>取得或設定包含特定文化特性之月份縮寫名稱的一維字串陣列。</summary>
      <returns>具有 13 個元素的一維字串陣列，包含特定文化特性之月份縮寫名稱。若為 12 月制曆法，陣列的第 13 個元素為空字串。<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的陣列包含 "Jan"、"Feb"、"Mar"、"Apr"、"May"、"Jun"、"Jul"、"Aug"、"Sep"、"Oct"、"Nov"、"Dec" 和 ""。</returns>
      <exception cref="T:System.ArgumentNullException">已嘗試將屬性設定為 null。</exception>
      <exception cref="T:System.ArgumentException">嘗試將屬性設定為多維度陣列或長度不是剛好為 13 的一維陣列。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AMDesignator">
      <summary>取得或設定 "ante meridiem" (正午以前) 小時的字串指示項。</summary>
      <returns>"ante meridiem" (正午以前) 小時的字串指示項。<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的預設值為 "AM"。</returns>
      <exception cref="T:System.ArgumentNullException">已嘗試將屬性設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.Calendar">
      <summary>取得或設定目前文化特性所使用的曆法。</summary>
      <returns>
        <see cref="T:System.Globalization.Calendar" />，指出目前文化特性所使用的曆法。<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的預設值為 <see cref="T:System.Globalization.GregorianCalendar" />。</returns>
      <exception cref="T:System.ArgumentNullException">已嘗試將屬性設定為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">嘗試將屬性設定為對目前文化特性無效的 <see cref="T:System.Globalization.Calendar" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.CalendarWeekRule">
      <summary>取得或設定數值，指定要使用哪一個規則 (Rule) 來決定一年中的第 1 個日曆週。</summary>
      <returns>
        <see cref="T:System.Globalization.CalendarWeekRule" /> 值，決定一年中的第 1 個日曆週。<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的預設值為 <see cref="F:System.Globalization.CalendarWeekRule.FirstDay" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">嘗試將屬性設定為無效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.Clone">
      <summary>建立 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件的淺層複製。</summary>
      <returns>從原始 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件複製的新 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.CurrentInfo">
      <summary>取得唯讀的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件，此物件表示目前文化特性的日期和時間格式資訊。</summary>
      <returns>唯讀 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件，根據的是目前執行緒的 <see cref="T:System.Globalization.CultureInfo" /> 物件。其等同於擷取 CultureInfo.CurrentCulture.DateTimeFormat 屬性所傳回的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.DayNames">
      <summary>取得或設定包含特定文化特性之星期完整限定名稱的一維陣列 (型別為 <see cref="T:System.String" />)。</summary>
      <returns>包含特定文化特性之星期完整限定名稱的一維陣列 (型別為 <see cref="T:System.String" />)。<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的陣列包含 "Sunday"、"Monday"、"Tuesday"、"Wednesday"、"Thursday"、"Friday" 和 "Saturday"。</returns>
      <exception cref="T:System.ArgumentNullException">已嘗試將屬性設定為 null。</exception>
      <exception cref="T:System.ArgumentException">嘗試將屬性設定為多維度陣列或長度不是剛好為 7 的一維陣列。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek">
      <summary>取得或設定週的第一天。</summary>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，指出週的第一天。<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的預設值為 <see cref="F:System.DayOfWeek.Sunday" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">嘗試將屬性設定為無效的 <see cref="T:System.DayOfWeek" /> 值。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern">
      <summary>取得或設定完整日期和完整時間值的自訂格式字串，此字串與 "F" 標準日期和時間格式字串相關聯。</summary>
      <returns>完整日期和完整時間值的自訂格式字串，此字串與 "F" 標準日期和時間格式字串相關聯。</returns>
      <exception cref="T:System.ArgumentNullException">已嘗試將屬性設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)">
      <summary>根據與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的文化特性，傳回一星期內指定某一天的文化特性特有縮寫名稱。</summary>
      <returns>
        <paramref name="dayofweek" /> 所表示的星期的特定文化特性之縮寫名稱。</returns>
      <param name="dayofweek">
        <see cref="T:System.DayOfWeek" /> 值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dayofweek" /> 不是有效的 <see cref="T:System.DayOfWeek" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)">
      <summary>如果縮寫存在的話，傳回含有指定紀元縮寫名稱的字串。</summary>
      <returns>如果縮寫存在的話，則為含有指定紀元縮寫名稱的字串，或是如果縮寫不存在，則為含有紀元完整限定名稱的字串。</returns>
      <param name="era">表示紀元的整數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不表示 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 屬性所指定曆法的有效紀元。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)">
      <summary>根據與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的文化特性，傳回指定月份的文化特性特有縮寫名稱。</summary>
      <returns>
        <paramref name="month" /> 所表示月份的特定文化特性之縮寫名稱。</returns>
      <param name="month">從 1 到 13 的整數，表示要擷取的月份名稱。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> 小於 1 或大於 13。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)">
      <summary>根據與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的文化特性，傳回一星期內指定某一天的文化特性特有完整名稱。</summary>
      <returns>
        <paramref name="dayofweek" /> 所指出星期的特定文化特性之完整名稱。</returns>
      <param name="dayofweek">
        <see cref="T:System.DayOfWeek" /> 值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dayofweek" /> 不是有效的 <see cref="T:System.DayOfWeek" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)">
      <summary>傳回表示指定之紀元名稱的整數。</summary>
      <returns>如果 <paramref name="eraName" /> 有效，則為表示紀元的整數，否則為 -1。</returns>
      <param name="eraName">含有紀元名稱的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eraName" /> 為 null。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)">
      <summary>傳回含有指定紀元名稱的字串。</summary>
      <returns>含有紀元名稱的字串。</returns>
      <param name="era">表示紀元的整數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不表示 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 屬性所指定曆法的有效紀元。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)">
      <summary>傳回指定型別的物件，以提供 <see cref="T:System.DateTime" /> 格式服務。</summary>
      <returns>如果 <paramref name="formatType" /> 的型別為 <see cref="T:System.Globalization.DateTimeFormatInfo" />，則為目前的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件；否則為 null。</returns>
      <param name="formatType">需要的格式服務的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider)">
      <summary>傳回與所指定 <see cref="T:System.IFormatProvider" /> 相關聯的 <see cref="T:System.Globalization.DateTimeFormatInfo" />。</summary>
      <returns>與指定 <see cref="T:System.IFormatProvider" /> 相關的 <see cref="T:System.Globalization.DateTimeFormatInfo" />。</returns>
      <param name="provider">可取得 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 的 <see cref="T:System.IFormatProvider" />。-或-null 以取得 <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" />。</param>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)">
      <summary>根據與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的文化特性，傳回指定月份的文化特性特有完整名稱。</summary>
      <returns>
        <paramref name="month" /> 所表示月份的特定文化特性之完整名稱。</returns>
      <param name="month">從 1 到 13 的整數，表示要擷取的月份名稱。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> 小於 1 或大於 13。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.InvariantInfo">
      <summary>取得與文化特性無關的 (不變的) 預設的唯讀 <see cref="T:System.Globalization.DateTimeFormatInfo" />。</summary>
      <returns>與文化特性無關 (非變異) 的預設唯讀 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件。此物件與 CultureInfo.InvariantCulture.DateTimeFormat 屬性所傳回的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件相同。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的，則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.LongDatePattern">
      <summary>取得或設定完整日期值的自訂格式字串，此字串與 "D" 標準日期和時間格式字串相關聯。</summary>
      <returns>完整日期值的自訂格式字串，此字串與 "D" 標準格式字串相關聯。</returns>
      <exception cref="T:System.ArgumentNullException">已嘗試將屬性設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.LongTimePattern">
      <summary>取得或設定完整時間值的自訂格式字串，此字串與 "T" 標準格式字串相關聯。</summary>
      <returns>完整時間值的自訂格式字串，此字串與 "T" 標準格式字串相關聯。</returns>
      <exception cref="T:System.ArgumentNullException">已嘗試將屬性設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern">
      <summary>取得或設定月日值的自訂格式字串，此字串與 "m" 和 "M" 標準日期和時間格式字串相關聯。</summary>
      <returns>月日值的自訂格式字串，此字串與 "m" 和 "M" 標準格式字串相關聯。</returns>
      <exception cref="T:System.ArgumentNullException">已嘗試將屬性設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames">
      <summary>取得或設定字串陣列，此陣列包含與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的月份名稱。</summary>
      <returns>月份名稱的字串陣列。</returns>
      <exception cref="T:System.ArgumentException">在 set 作業中，陣列式多維的，或者長度不是剛好為 13。</exception>
      <exception cref="T:System.ArgumentNullException">在設定作業中，陣列或陣列的其中一個元素為 null。</exception>
      <exception cref="T:System.InvalidOperationException">在設定作業中，目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthNames">
      <summary>取得或設定包含特定文化特性之月份完整限定名稱的一維陣列 (型別為 <see cref="T:System.String" />)。</summary>
      <returns>包含特定文化特性之月份完整限定名稱的一維陣列 (型別為 <see cref="T:System.String" />)。在 12 月制曆法中，陣列的第 13 個元素為空字串。<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的陣列包含 "January"、"February"、"March"、"April"、"May"、"June"、"July"、"August"、"September"、"October"、"November"、"December" 和 ""。</returns>
      <exception cref="T:System.ArgumentNullException">已嘗試將屬性設定為 null。</exception>
      <exception cref="T:System.ArgumentException">嘗試將屬性設定為多維度陣列或長度不是剛好為 13 的一維陣列。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.PMDesignator">
      <summary>取得或設定 "post meridiem" (正午以後) 小時的字串指示項。</summary>
      <returns>"post meridiem" (正午以後) 小時的字串指示項。<see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的預設值為 "PM"。</returns>
      <exception cref="T:System.ArgumentNullException">已嘗試將屬性設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)">
      <summary>傳回唯讀的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 包裝函式。</summary>
      <returns>
        <paramref name="dtfi" /> 的唯讀 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 包裝函式。</returns>
      <param name="dtfi">要包裝的 <see cref="T:System.Globalization.DateTimeFormatInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dtfi" /> 為 null。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern">
      <summary>取得自訂日期和時間格式字串，此字串是根據網際網路工程任務推動小組 (Internet Engineering Task Force，IETF) 要求建議 (RFC) 1123 規格，並與 "r" 和 "R" 標準格式字串相關聯。</summary>
      <returns>根據 IETF RFC 1123 規格的自訂日期和時間格式字串。此字串是非變異，即不因文化特性而異。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern">
      <summary>取得或設定簡短日期值的自訂日期和時間格式字串，此字串與 "d" 標準格式字串相關聯。</summary>
      <returns>簡短日期值的自訂格式字串，此字串與 "d" 標準格式字串相關聯。</returns>
      <exception cref="T:System.ArgumentNullException">已嘗試將屬性設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortestDayNames">
      <summary>取得或設定字串陣列，此陣列包含與目前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件關聯的最短唯一縮寫日名稱。</summary>
      <returns>日名稱的字串陣列。</returns>
      <exception cref="T:System.ArgumentException">嘗試將屬性設定為多維度陣列或長度不是剛好為 7 的一維陣列。</exception>
      <exception cref="T:System.ArgumentNullException">在設定的作業中，數值陣列或數值陣列的其中一個元素為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern">
      <summary>取得或設定簡短時間值的自訂日期和時間格式字串，此字串與 "t" 標準格式字串相關聯。</summary>
      <returns>簡短時間值的自訂格式字串，此字串與 "t" 標準格式字串相關聯。</returns>
      <exception cref="T:System.ArgumentNullException">已嘗試將屬性設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern">
      <summary>取得可排序日期和時間值的自訂日期和時間格式字串，此字串與 "s" 標準格式字串相關聯。</summary>
      <returns>可排序日期和時間值的自訂格式字串，此字串與 "s" 標準格式字串相關聯。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern">
      <summary>取得通用可排序日期和時間值的自訂日期和時間格式字串，此字串與 "u" 標準格式字串相關聯。</summary>
      <returns>通用可排序日期和時間值的自訂格式字串，此字串與 "u" 標準格式字串相關聯。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern">
      <summary>取得或設定年月值的自訂日期和時間格式字串，此字串與 "y" 和 "Y" 標準格式字串相關聯。</summary>
      <returns>年月值的自訂格式字串，此字串與 "y" 和 "Y" 格式字串相關聯。</returns>
      <exception cref="T:System.ArgumentNullException">已嘗試將屬性設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件是唯讀的。 </exception>
    </member>
    <member name="T:System.Globalization.DateTimeStyles">
      <summary>定義格式化選項，這些格式化選項會為多個 <see cref="T:System.DateTime" /> 和 <see cref="T:System.DateTimeOffset" /> 剖析方法自訂字串剖析。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AdjustToUniversal">
      <summary>日期和時間會以 Coordinated Universal Time (UTC) 表示。如果輸入字串表示當地時間 (透過時區規範或 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />)，則日期和時間會從當地時區轉換成 UTC。如果輸入字串表示 UTC 時間 (透過時區規範或 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />)，則不會進行轉換。如果輸入字串不是表示當地或 UTC 時間，則不會進行轉換，而且產生的 <see cref="P:System.DateTime.Kind" /> 屬性是 <see cref="F:System.DateTimeKind.Unspecified" />。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowInnerWhite">
      <summary>除非字串中間的額外空白字元出現在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中，否則必須在剖析期間忽略這些空白字元。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowLeadingWhite">
      <summary>除非前置空白字元出現在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中，否則必須在剖析期間忽略這些空白字元。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowTrailingWhite">
      <summary>除非結尾空白字元出現在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中，否則必須在剖析期間忽略這些空白字元。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces">
      <summary>除非字串中任意位置的額外空白字元出現在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中，否則必須在剖析期間忽略這些空白字元。此值是 <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" /> 值的組合。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeLocal">
      <summary>如果未在剖析字串中指定時區，則會假設字串是表示當地時間。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeUniversal">
      <summary>如果未在剖析字串中指定時區，則會假設字串是表示 UTC。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault">
      <summary>如果受剖析字串只含時間而未含日期，則剖析方法會假設為西曆日期，其中年 = 1、月 = 1 而日 = 1。如果未使用此值，則假設為目前日期。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.None">
      <summary>必須使用預設格式化選項。此值表示 <see cref="M:System.DateTime.Parse(System.String)" />、<see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" /> 和 <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" /> 的預設樣式。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.RoundtripKind">
      <summary>如果剖析作業針對包含時區資訊的字串使用 <see cref="T:System.DateTime" /> 方法，則會嘗試防止轉換為 <see cref="T:System.DateTime" /> 區域數值，而其 <see cref="P:System.DateTime.Kind" /> 屬性設定為 <see cref="F:System.DateTimeKind.Local" />。對於 <see cref="T:System.DateTimeOffset" /> 值，此旗標沒有任何效果。</summary>
    </member>
    <member name="T:System.Globalization.GregorianCalendar">
      <summary>表示西曆。</summary>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.#ctor">
      <summary>使用預設的 <see cref="T:System.Globalization.GregorianCalendarTypes" /> 值初始化 <see cref="T:System.Globalization.GregorianCalendar" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)">
      <summary>使用指定的 <see cref="T:System.Globalization.GregorianCalendarTypes" /> 值初始化 <see cref="T:System.Globalization.GregorianCalendar" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.Globalization.GregorianCalendarTypes" /> 值，指出要建立曆法的哪個語言版本。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="type" /> 不是 <see cref="T:System.Globalization.GregorianCalendarTypes" /> 列舉的成員。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定月數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的月數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要將月份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要加入的月數。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小於 -120000。-或-<paramref name="months" /> 大於 120000。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定年數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的年數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要將年份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要加入的年數。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
    </member>
    <member name="F:System.Globalization.GregorianCalendar.ADEra">
      <summary>表示目前的紀元。此欄位為常數。</summary>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.CalendarType">
      <summary>取得或設定 <see cref="T:System.Globalization.GregorianCalendarTypes" /> 值，指出目前 <see cref="T:System.Globalization.GregorianCalendar" /> 的語言版本。</summary>
      <returns>
        <see cref="T:System.Globalization.GregorianCalendarTypes" /> 值，指出目前 <see cref="T:System.Globalization.GregorianCalendar" /> 的語言版本。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">設定作業中指派的值並非 <see cref="T:System.Globalization.GregorianCalendarTypes" /> 列舉的成員。</exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.Eras">
      <summary>取得 <see cref="T:System.Globalization.GregorianCalendar" /> 中的紀元清單。</summary>
      <returns>整數陣列，表示 <see cref="T:System.Globalization.GregorianCalendar" /> 中的紀元。</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中月份的日期。</summary>
      <returns>從 1 到 31 的整數，表示 <paramref name="time" /> 中月份的日期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的星期。</summary>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，指出 <paramref name="time" /> 中的星期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份日期。</summary>
      <returns>從 1 到 366 的整數，表示 <paramref name="time" /> 中年份的日期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份的指定月份中的日數。</summary>
      <returns>在指定紀元的指定年份的指定月份中的日數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 在該曆法所支援的範圍之外。-或-<paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的日數。</summary>
      <returns>在指定紀元的指定年份中的日數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 在該曆法所支援的範圍之外。-或-<paramref name="year" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetEra(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 值的紀元。</summary>
      <returns>表示 <paramref name="time" /> 之紀元的整數。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <returns>一律是 0，因為西曆不認得閏月。</returns>
      <param name="year">一年。</param>
      <param name="era">一紀元。指定 <see cref="F:System.Globalization.GregorianCalendar.ADEra" /> 或 GregorianCalendar.Eras[Calendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於西曆 1 年或大於西曆 9999 年。-或-<paramref name="era" /> 不是 <see cref="F:System.Globalization.GregorianCalendar.ADEra" /> 或 <see cref="F:System.Globalization.Calendar.CurrentEra" />。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <returns>從 1 到 12 的整數，表示 <paramref name="time" /> 中的月份。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的月數。</summary>
      <returns>在指定紀元的指定年份中的月數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 在該曆法所支援的範圍之外。-或-<paramref name="year" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <returns>表示 <paramref name="time" /> 中年份的整數。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的日期是否為閏日。</summary>
      <returns>如果指定日為閏日，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 在該曆法所支援的範圍之外。-或-<paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="day" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元的指定年份中指定的月份是否為閏月。</summary>
      <returns>此方法一律傳回 false，除非被衍生類別 (Derived Class) 所覆寫。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 在該曆法所支援的範圍之外。-或-<paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的年份是否為閏年。</summary>
      <returns>如果指定的年份為閏年，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 在該曆法所支援的範圍之外。-或-<paramref name="year" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.MaxSupportedDateTime">
      <summary>取得受 <see cref="T:System.Globalization.GregorianCalendar" /> 型別所支援的最晚日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.GregorianCalendar" /> 型別所支援的最晚日期和時間，即為西元 9999 年 12 月 31 日的最後一刻，相當於 <see cref="F:System.DateTime.MaxValue" />。</returns>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.MinSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.GregorianCalendar" /> 型別所支援的最早日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.GregorianCalendar" /> 型別所支援的最早日期和時間，即為西元 0001 年 1 月 1 日的第一時間，相當於 <see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元中設定為指定日期和時間的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="hour">從 0 到 23 的整數，表示小時。</param>
      <param name="minute">從 0 到 59 的整數，表示分鐘。</param>
      <param name="second">從 0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">從 0 到 999 的整數，表示毫秒。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 在該曆法所支援的範圍之外。-或-<paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="day" /> 在該曆法所支援的範圍之外。-或-<paramref name="hour" /> 小於零或大於 23。-或-<paramref name="minute" /> 小於零或大於 59。-或-<paramref name="second" /> 小於零或大於 59。-或-<paramref name="millisecond" /> 小於零或大於 999。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為 4 位數年份，方法是使用 <see cref="P:System.Globalization.GregorianCalendar.TwoDigitYearMax" /> 屬性以判斷適當的世紀。</summary>
      <returns>整數，包含 <paramref name="year" /> 的四位數表示。</returns>
      <param name="year">兩位數或四位數整數，表示要轉換的年份。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中，指定的值小於 99。-或-在設定作業中，指定的值大於 9999。</exception>
    </member>
    <member name="T:System.Globalization.GregorianCalendarTypes">
      <summary>定義西曆的各種語言版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.Arabic">
      <summary>參考西曆的阿拉伯版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.Localized">
      <summary>參考西曆的當地語系化版本，並根據使用 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 物件的 <see cref="T:System.Globalization.CultureInfo" /> 物件的語言。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.MiddleEastFrench">
      <summary>參考西曆的中東法文版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.TransliteratedEnglish">
      <summary>參考西曆的音譯英文版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.TransliteratedFrench">
      <summary>參考西曆的音譯法文版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.USEnglish">
      <summary>參考西曆的美國英文版本。</summary>
    </member>
    <member name="T:System.Globalization.HebrewCalendar">
      <summary>表示希伯來曆。</summary>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.HebrewCalendar" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定月數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的月數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要將 <paramref name="months" /> 加入的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要加入的月數。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小於 -120,000 或大於 120,000。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定年數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的年數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要將 <paramref name="years" /> 加入的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要加入的年數。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.Eras">
      <summary>取得 <see cref="T:System.Globalization.HebrewCalendar" /> 中的紀元清單。</summary>
      <returns>整數陣列，表示 <see cref="T:System.Globalization.HebrewCalendar" /> 型別中的紀元。傳回值一律是包含一個與 <see cref="F:System.Globalization.Calendar.CurrentEra" /> 相等元素的陣列。</returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中月份的日期。</summary>
      <returns>從 1 到 30 的整數，表示指定 <see cref="T:System.DateTime" /> 中月份的日期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的星期。</summary>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，指出指定 <see cref="T:System.DateTime" /> 中的星期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份日期。</summary>
      <returns>從 1 到 385 的整數，表示指定 <see cref="T:System.DateTime" /> 中的年份日期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 早於西曆 1583 年 9 月 17 日，或大於 <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime" />。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份的指定月份中的日數。</summary>
      <returns>在指定紀元的指定年份的指定月份中的日數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 13 的整數，表示月份。</param>
      <param name="era">整數，表示紀元。指定 Calendar.Eras[Calendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 在目前 <see cref="T:System.Globalization.HebrewCalendar" /> 物件支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的日數。</summary>
      <returns>在指定紀元的指定年份中的日數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。指定 Calendar.Eras[Calendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 在目前 <see cref="T:System.Globalization.HebrewCalendar" /> 物件支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetEra(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 值的紀元。</summary>
      <returns>整數，表示指定之 <see cref="T:System.DateTime" /> 值的紀元。傳回值永遠都會是 <see cref="F:System.Globalization.Calendar.CurrentEra" />。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <returns>正整數，指出在指定的年份及紀元中的閏月。如果 <paramref name="year" /> 和 <paramref name="era" /> 參數指定閏年，則傳回值是 7，但如果不是閏年，則傳回 0。</returns>
      <param name="year">一年。</param>
      <param name="era">一紀元。指定 Calendar.Eras[Calendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不是 <see cref="F:System.Globalization.Calendar.CurrentEra" />。-或-<paramref name="year" /> 小於希伯來曆法 5343 年或大於希伯來曆法 5999 年。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <returns>從 1 到 13 的整數，表示指定 <see cref="T:System.DateTime" /> 中的月份。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 小於 <see cref="P:System.Globalization.HebrewCalendar.MinSupportedDateTime" /> 或大於 <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime" />。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的月數。</summary>
      <returns>在指定紀元的指定年份中的月數。一般年份的傳回值為 12，閏年則為 13。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。指定 Calendar.Eras[Calendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 在目前 <see cref="T:System.Globalization.HebrewCalendar" /> 物件支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetYear(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 值中的年份。</summary>
      <returns>整數，表示指定之 <see cref="T:System.DateTime" /> 值中的年份。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 在目前 <see cref="T:System.Globalization.HebrewCalendar" /> 物件所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的日期是否為閏日。</summary>
      <returns>如果指定日為閏日，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 13 的整數，表示月份。</param>
      <param name="day">從 1 到 30 的整數，表示日期。</param>
      <param name="era">整數，表示紀元。指定 Calendar.Eras[Calendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" /> 或 <paramref name="era" /> 在此曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元的指定年份中指定的月份是否為閏月。</summary>
      <returns>如果指定月為閏月，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 13 的整數，表示月份。</param>
      <param name="era">整數，表示紀元。指定 Calendar.Eras[Calendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 在此日曆支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的年份是否為閏年。</summary>
      <returns>如果指定的年份為閏年，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。指定 Calendar.Eras[Calendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 在此日曆所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime">
      <summary>取得受 <see cref="T:System.Globalization.HebrewCalendar" /> 型別所支援的最晚日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.HebrewCalendar" /> 型別所支援的最晚日期和時間，相當於西曆中之西元 2239 年 29 月 9 日的最後一刻。</returns>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.MinSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.HebrewCalendar" /> 型別所支援的最早日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.HebrewCalendar" /> 型別所支援的最早日期和時間，相當於西曆中之西元 1583 年 1 月 1 日的第一時間。</returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元中設定為指定日期和時間的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 13 的整數，表示月份。</param>
      <param name="day">從 1 到 30 的整數，表示日期。</param>
      <param name="hour">從 0 到 23 的整數，表示小時。</param>
      <param name="minute">從 0 到 59 的整數，表示分鐘。</param>
      <param name="second">從 0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">從 0 到 999 的整數，表示毫秒。</param>
      <param name="era">整數，表示紀元。指定 Calendar.Eras[Calendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" /> 或 <paramref name="era" /> 在目前 <see cref="T:System.Globalization.HebrewCalendar" /> 物件所支援的範圍之外。-或-<paramref name="hour" /> 小於 0 或大於 23。-或-<paramref name="minute" /> 小於 0 或大於 59。-或-<paramref name="second" /> 小於 0 或大於 59。-或-<paramref name="millisecond" /> 小於 0 或大於 999。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為 4 位數年份，方法是使用 <see cref="P:System.Globalization.HebrewCalendar.TwoDigitYearMax" /> 屬性以判斷適當的世紀。</summary>
      <returns>如果 <paramref name="year" /> 參數是 2 位數年份，則傳回值為對應的 4 位數年份。如果 <paramref name="year" /> 參數是 4 位數年份，則傳回值會是未變更的 <paramref name="year" /> 參數。</returns>
      <param name="year">2 位數年份從 0 到 99，或 4 位數希伯來曆年份從 5343 到 5999。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 0。-或-<paramref name="year" /> 小於 <see cref="P:System.Globalization.HebrewCalendar.MinSupportedDateTime" /> 或大於 <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime" />。</exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Globalization.HebrewCalendar" /> 物件是唯讀。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">設定作業時，希伯來曆的年份值小於 5343 但不是 90，或是年份值大於 5999。 </exception>
    </member>
    <member name="T:System.Globalization.HijriCalendar">
      <summary>表示回曆。</summary>
    </member>
    <member name="M:System.Globalization.HijriCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.HijriCalendar" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.HijriCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定月數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的月數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要加入月份的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要加入的月數。</param>
      <exception cref="T:System.ArgumentException">結果為 <see cref="T:System.DateTime" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小於 -120000。-或-<paramref name="months" /> 大於 120000。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定年數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的年數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要加入年份的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要加入的年數。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.Eras">
      <summary>取得 <see cref="T:System.Globalization.HijriCalendar" /> 中的紀元清單。</summary>
      <returns>整數陣列，表示 <see cref="T:System.Globalization.HijriCalendar" /> 中的紀元。</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中月份的日期。</summary>
      <returns>從 1 到 30 的整數，表示指定 <see cref="T:System.DateTime" /> 中月份的日期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfWeek(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的星期。</summary>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，指出指定 <see cref="T:System.DateTime" /> 中的星期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份日期。</summary>
      <returns>從 1 到 355 的整數，表示指定 <see cref="T:System.DateTime" /> 中的年份日期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>傳回指定年份和紀元之指定月份中的天數。</summary>
      <returns>在指定紀元的指定年份的指定月份中的日數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 在這個日曆所支援的範圍之外。-或-<paramref name="year" /> 在這個日曆所支援的範圍之外。-或-<paramref name="month" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>傳回指定年份和紀元中的天數。</summary>
      <returns>指定年份和紀元中的天數。平年有 354 天，而閏年有 355 天。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 在此日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetEra(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 值的紀元。</summary>
      <returns>整數，表示指定之 <see cref="T:System.DateTime" /> 值的紀元。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <returns>一律是 0，因為 <see cref="T:System.Globalization.HijriCalendar" /> 型別不支援閏月。</returns>
      <param name="year">一年。</param>
      <param name="era">一紀元。指定 <see cref="F:System.Globalization.Calendar.CurrentEra" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於回曆 1 年，或大於 9666 年。-或-<paramref name="era" /> 不是 <see cref="F:System.Globalization.Calendar.CurrentEra" />。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <returns>從 1 到 12 的整數，表示指定 <see cref="T:System.DateTime" /> 中的月份。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>傳回指定年份和紀元中的月數。</summary>
      <returns>指定年份和紀元中的月數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 在這個日曆所支援的範圍之外。-或-<paramref name="year" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <returns>整數，表示指定 <see cref="T:System.DateTime" /> 中的年份。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="P:System.Globalization.HijriCalendar.HijriAdjustment">
      <summary>取得或設定要在曆法中加減的日數，因應 Ramadan 始末之間的變動和各國家/區域之間的日期差距。</summary>
      <returns>從 -2 至 2 的整數，表示要在曆法中加減的日數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性正要設定為無效的值。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定的日期是否為閏日。</summary>
      <returns>如果指定日為閏日，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 30 的整數，表示日期。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 在這個日曆所支援的範圍之外。-或-<paramref name="year" /> 在這個日曆所支援的範圍之外。-或-<paramref name="month" /> 在這個日曆所支援的範圍之外。-或-<paramref name="day" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定年份和紀元中的指定月份是否為閏月。</summary>
      <returns>此方法一律會傳回 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 在這個日曆所支援的範圍之外。-或-<paramref name="year" /> 在這個日曆所支援的範圍之外。-或-<paramref name="month" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的年份是否為閏年。</summary>
      <returns>如果指定的年份為閏年，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 在這個日曆所支援的範圍之外。-或-<paramref name="year" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.MaxSupportedDateTime">
      <summary>取得受此曆法所支援的最晚日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.HijriCalendar" /> 型別所支援的最晚日期和時間，相當於西曆中的 9999 C.E. 12 月 31 日的最後一刻。</returns>
    </member>
    <member name="P:System.Globalization.HijriCalendar.MinSupportedDateTime">
      <summary>取得受此曆法所支援的最早日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.HijriCalendar" /> 型別支援的最早日期和時間，相當於西曆中的 622 年 6 月 18 日的第一時間。</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回 <see cref="T:System.DateTime" />，其設定為指定日期、時間和紀元。</summary>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 30 的整數，表示日期。</param>
      <param name="hour">從 0 到 23 的整數，表示小時。</param>
      <param name="minute">從 0 到 59 的整數，表示分鐘。</param>
      <param name="second">從 0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">從 0 到 999 的整數，表示毫秒。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 在這個日曆所支援的範圍之外。-或-<paramref name="year" /> 在這個日曆所支援的範圍之外。-或-<paramref name="month" /> 在這個日曆所支援的範圍之外。-或-<paramref name="day" /> 在這個日曆所支援的範圍之外。-或-<paramref name="hour" /> 小於零或大於 23。-或-<paramref name="minute" /> 小於零或大於 59。-或-<paramref name="second" /> 小於零或大於 59。-或-<paramref name="millisecond" /> 小於零或大於 999。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為 4 位數年份，方法是使用 <see cref="P:System.Globalization.HijriCalendar.TwoDigitYearMax" /> 屬性以判斷適當的世紀。</summary>
      <returns>整數，包含 <paramref name="year" /> 的四位數表示。</returns>
      <param name="year">兩位數或四位數整數，表示要轉換的年份。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.InvalidOperationException">此曆法是唯讀的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">設定作業中的值小於 100 或大於 9666。</exception>
    </member>
    <member name="T:System.Globalization.JapaneseCalendar">
      <summary>表示日本曆法。</summary>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.JapaneseCalendar" /> 類別的新執行個體。</summary>
      <exception cref="T:System.TypeInitializationException">與此 <see cref="T:System.Globalization.JapaneseCalendar" /> 物件相對應的 ja-JP <see cref="T:System.Globalization.CultureInfo" /> 物件無法初始化。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定月數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的月數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要將月份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要加入的月數。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小於 -120000。-或-<paramref name="months" /> 大於 120000。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定年數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的年數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要將年份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要加入的年數。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 在 <see cref="T:System.Globalization.JapaneseCalendar" /> 型別支援的範圍之外。-或-<paramref name="years" /> 小於 -10,000 或大於 10,000。</exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.Eras">
      <summary>取得 <see cref="T:System.Globalization.JapaneseCalendar" /> 中的紀元清單。</summary>
      <returns>整數陣列，表示 <see cref="T:System.Globalization.JapaneseCalendar" /> 中的紀元。</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中月份的日期。</summary>
      <returns>從 1 到 31 的整數，表示指定 <see cref="T:System.DateTime" /> 中月份的日期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的星期。</summary>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，指出指定 <see cref="T:System.DateTime" /> 中的星期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份日期。</summary>
      <returns>從 1 到 366 的整數，表示指定 <see cref="T:System.DateTime" /> 中的年份日期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份的指定月份中的日數。</summary>
      <returns>在指定紀元的指定年份的指定月份中的日數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的日數。</summary>
      <returns>在指定紀元的指定年份中的日數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 值的紀元。</summary>
      <returns>整數，表示指定之 <see cref="T:System.DateTime" /> 值的紀元。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <returns>傳回值永遠都會是 0，因為 <see cref="T:System.Globalization.JapaneseCalendar" /> 型別不支援閏月的概念。</returns>
      <param name="year">一年。</param>
      <param name="era">一紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 在 <see cref="T:System.Globalization.JapaneseCalendar" /> 型別支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <returns>從 1 到 12 的整數，表示指定 <see cref="T:System.DateTime" /> 中的月份。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的月數。</summary>
      <returns>傳回值一律是 12。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>傳回年份中的週，包含指定 <see cref="T:System.DateTime" /> 中的日期。</summary>
      <returns>從 1 起始的整數，表示 <paramref name="time" /> 參數中日期所屬年份中的某週。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <param name="rule">其中一個 <see cref="T:System.Globalization.CalendarWeekRule" /> 值，可定義行事曆週。</param>
      <param name="firstDayOfWeek">其中一個 <see cref="T:System.DayOfWeek" /> 值，指出一週的第一天。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 或 <paramref name="firstDayOfWeek" /> 在日曆支援的範圍之外。-或-<paramref name="rule" /> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <returns>整數，表示指定 <see cref="T:System.DateTime" /> 中的年份。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的日期是否為閏日。</summary>
      <returns>如果指定日為閏日，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="day" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元的指定年份中指定的月份是否為閏月。</summary>
      <returns>此方法一律傳回 false，除非被衍生類別 (Derived Class) 所覆寫。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的年份是否為閏年。</summary>
      <returns>如果指定的年份為閏年，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.MaxSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.JapaneseCalendar" /> 類別所支援的最晚日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.JapaneseCalendar" /> 型別所支援的最晚日期和時間，相當於西曆中的 9999 C.E. 12 月 31 日的最後一刻。</returns>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.MinSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.JapaneseCalendar" /> 類別所支援的最早日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.JapaneseCalendar" /> 型別支援的最早日期和時間，等於西曆中之西元 1868 年 1 月 1 日的第一時間。 </returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元中設定為指定日期和時間的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="hour">從 0 到 23 的整數，表示小時。</param>
      <param name="minute">從 0 到 59 的整數，表示分鐘。</param>
      <param name="second">從 0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">從 0 到 999 的整數，表示毫秒。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="day" /> 在該曆法所支援的範圍之外。-或-<paramref name="hour" /> 小於零或大於 23。-或-<paramref name="minute" /> 小於零或大於 59。-或-<paramref name="second" /> 小於零或大於 59。-或-<paramref name="millisecond" /> 小於零或大於 999。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為 4 位數年份，方法是使用 <see cref="P:System.Globalization.JapaneseCalendar.TwoDigitYearMax" /> 屬性以判斷適當的世紀。</summary>
      <returns>整數，包含 <paramref name="year" /> 的四位數表示。</returns>
      <param name="year">表示要轉換年份的整數 (通常是兩位數)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中，指定的值小於 99。-或-在設定作業中，指定的值大於 8011。</exception>
    </member>
    <member name="T:System.Globalization.KoreanCalendar">
      <summary>表示韓國曆法。</summary>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.KoreanCalendar" /> 類別的新執行個體。</summary>
      <exception cref="T:System.TypeInitializationException">與此 <see cref="T:System.Globalization.KoreanCalendar" /> 物件相對應的 ko-KR <see cref="T:System.Globalization.CultureInfo" /> 物件無法初始化。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定月數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的月數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要將月份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要加入的月數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小於 -120000。-或-<paramref name="months" /> 大於 120000。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定年數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的年數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要將年份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要加入的年數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> 或 <paramref name="time" /> 超出範圍。</exception>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.Eras">
      <summary>取得 <see cref="T:System.Globalization.KoreanCalendar" /> 中的紀元清單。</summary>
      <returns>整數陣列，表示 <see cref="T:System.Globalization.KoreanCalendar" /> 中的紀元。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中月份的日期。</summary>
      <returns>從 1 到 31 的整數，表示指定 <see cref="T:System.DateTime" /> 中月份的日期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfWeek(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的星期。</summary>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，指出指定 <see cref="T:System.DateTime" /> 中的星期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份日期。</summary>
      <returns>從 1 到 366 的整數，表示指定 <see cref="T:System.DateTime" /> 中的年份日期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份的指定月份中的日數。</summary>
      <returns>在指定紀元的指定年份的指定月份中的日數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的日數。</summary>
      <returns>在指定紀元的指定年份中的日數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetEra(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 值的紀元。</summary>
      <returns>表示 <paramref name="time" /> 之紀元的整數。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <returns>傳回值永遠都會是 0，因為 <see cref="T:System.Globalization.KoreanCalendar" /> 類別不支援閏月。</returns>
      <param name="year">一年。</param>
      <param name="era">一紀元。</param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <returns>從 1 到 12 的整數，表示指定 <see cref="T:System.DateTime" /> 中的月份。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的月數。</summary>
      <returns>在指定紀元的指定年份中的月數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>傳回年份中的週，包含指定 <see cref="T:System.DateTime" /> 中的日期。</summary>
      <returns>從 1 起始的整數，表示 <paramref name="time" /> 參數中日期所屬年份中的某週。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <param name="rule">其中一個 <see cref="T:System.Globalization.CalendarWeekRule" /> 值，可定義行事曆週。</param>
      <param name="firstDayOfWeek">其中一個 <see cref="T:System.DayOfWeek" /> 值，指出一週的第一天。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 或 <paramref name="firstDayOfWeek" /> 在日曆支援的範圍之外。-或-<paramref name="rule" /> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <returns>整數，表示指定 <see cref="T:System.DateTime" /> 中的年份。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的日期是否為閏日。</summary>
      <returns>如果指定日為閏日，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="day" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元的指定年份中指定的月份是否為閏月。</summary>
      <returns>此方法一律傳回 false，除非被衍生類別 (Derived Class) 所覆寫。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的年份是否為閏年。</summary>
      <returns>如果指定的年份為閏年，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="F:System.Globalization.KoreanCalendar.KoreanEra">
      <summary>表示目前的紀元。此欄位為常數。</summary>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.MaxSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.KoreanCalendar" /> 類別所支援的最晚日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.KoreanCalendar" /> 類別支援的最新日期和時間，相當於西曆中的西元 9999 年 12 月 31 日的最後一刻。</returns>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.MinSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.KoreanCalendar" /> 類別所支援的最早日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.KoreanCalendar" /> 類別支援的最早日期和時間，等於西曆中之西元 0001 年 1 月 1 日的第一時間。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元中設定為指定日期和時間的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="hour">從 0 到 23 的整數，表示小時。</param>
      <param name="minute">從 0 到 59 的整數，表示分鐘。</param>
      <param name="second">從 0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">從 0 到 999 的整數，表示毫秒。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="day" /> 在該曆法所支援的範圍之外。-或-<paramref name="hour" /> 小於零或大於 23。-或-<paramref name="minute" /> 小於零或大於 59。-或-<paramref name="second" /> 小於零或大於 59。-或-<paramref name="millisecond" /> 小於零或大於 999。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為 4 位數年份，方法是使用 <see cref="P:System.Globalization.KoreanCalendar.TwoDigitYearMax" /> 屬性以判斷適當的世紀。</summary>
      <returns>整數，包含 <paramref name="year" /> 的四位數表示。</returns>
      <param name="year">兩位數或四位數整數，表示要轉換的年份。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中，指定的值小於 99。-或-在設定作業中，指定的值大於 12332。</exception>
    </member>
    <member name="T:System.Globalization.NumberFormatInfo">
      <summary>依據文化特性 (Culture) 定義格式化和顯示數值的方式。</summary>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.#ctor">
      <summary>初始化與文化特性無關的 (不因文化特性而異) <see cref="T:System.Globalization.NumberFormatInfo" /> 類別的可寫入新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.Clone">
      <summary>建立 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件的淺層複製。</summary>
      <returns>從原始 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件複製的新 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件。</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits">
      <summary>取得或設定要在貨幣值中使用的小數位數。</summary>
      <returns>指出要在貨幣值中使用的小數位數。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 2。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性正設定為小於 0 或大於 99 的值。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator">
      <summary>取得或設定要做為貨幣值中小數分隔符號的字串。</summary>
      <returns>取得或設定要做為貨幣值中小數分隔符號的字串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "."。</returns>
      <exception cref="T:System.ArgumentNullException">屬性正被設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
      <exception cref="T:System.ArgumentException">屬性正設定為空字串。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator">
      <summary>取得或設定分隔貨幣值中小數點左邊數字群組的字串。</summary>
      <returns>取得或設定分隔貨幣值中小數點左邊數字群組的字串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 ","。</returns>
      <exception cref="T:System.ArgumentNullException">屬性正被設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes">
      <summary>取得或設定貨幣值內小數點左邊數字的各個群組中的位數。</summary>
      <returns>取得或設定貨幣值內小數點左邊數字的各個群組中的位數。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為一個只含有一個元素 (已設定為 3) 的一維陣列。</returns>
      <exception cref="T:System.ArgumentNullException">屬性正被設定為 null。</exception>
      <exception cref="T:System.ArgumentException">屬性正被設定，且陣列包含小於 0 或大於 9 的項目。-或-屬性正被設定，且陣列包含設定為 0 的項目 (最後項目以外的)。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern">
      <summary>取得或設定負數貨幣值的格式模式。</summary>
      <returns>取得或設定負數貨幣值的格式模式。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 0，表示 "($n)"，其中 "$" 為 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />，且 <paramref name="n" /> 為數值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性正設定為小於 0 或大於 15 的值。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern">
      <summary>取得或設定正數貨幣值的格式模式。</summary>
      <returns>取得或設定正數貨幣值的格式模式。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 0，表示 "$n"；其中，"$" 為 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />，而 <paramref name="n" /> 為數值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性正設定為小於 0 或大於 3 的值。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencySymbol">
      <summary>取得或設定要做為貨幣符號的字串。</summary>
      <returns>取得或設定要做為貨幣符號的字串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "¤"。</returns>
      <exception cref="T:System.ArgumentNullException">屬性正被設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrentInfo">
      <summary>取得唯讀的 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件，此物件包含目前文化特性的數字格式資訊。</summary>
      <returns>唯讀 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件，根據的是目前執行緒的 <see cref="T:System.Globalization.CultureInfo" /> 物件。</returns>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)">
      <summary>取得指定之型別的物件，以提供數字格式化服務。</summary>
      <returns>如果 <paramref name="formatType" /> 為 <see cref="T:System.Globalization.NumberFormatInfo" /> 型別的物件，則為目前的 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件，否則為 null。</returns>
      <param name="formatType">需要的格式服務的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)">
      <summary>取得與所指定 <see cref="T:System.IFormatProvider" /> 物件相關聯的 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件。</summary>
      <returns>與指定之 <see cref="T:System.IFormatProvider" /> 物件關聯的 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件。</returns>
      <param name="formatProvider">用來取得 <see cref="T:System.Globalization.NumberFormatInfo" /> 的 <see cref="T:System.IFormatProvider" /> 物件。-或-null 以取得 <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" /> 物件。</param>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.InvariantInfo">
      <summary>取得與文化特性無關 (非變異) 的預設唯讀 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件。</summary>
      <returns>與文化特性無關 (非變異) 的預設唯讀 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件。</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是否為唯讀。</summary>
      <returns>如果 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的，則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NaNSymbol">
      <summary>取得或設定表示 IEEE NaN (Not a Number) 值的字串。</summary>
      <returns>取得或設定表示 IEEE NaN (Not a Number) 值的字串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "NaN"。</returns>
      <exception cref="T:System.ArgumentNullException">屬性正被設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol">
      <summary>取得或設定表示負無限大的字串。</summary>
      <returns>字串，表示負無限大。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "-Infinity"。</returns>
      <exception cref="T:System.ArgumentNullException">屬性正被設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NegativeSign">
      <summary>取得或設定指出數字為負數的字串。</summary>
      <returns>指出數字為負數的字串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "-"。</returns>
      <exception cref="T:System.ArgumentNullException">屬性正被設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits">
      <summary>取得或設定要在數值中使用的小數位數。</summary>
      <returns>指出要在貨幣值中使用的小數位數。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 2。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性正設定為小於 0 或大於 99 的值。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，且 <see cref="T:System.Globalization.NumberFormatInfo" /> 是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator">
      <summary>取得或設定要做為數值中小數分隔符號的字串。</summary>
      <returns>取得或設定要做為數值中小數分隔符號的字串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "."。</returns>
      <exception cref="T:System.ArgumentNullException">屬性正被設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
      <exception cref="T:System.ArgumentException">屬性正設定為空字串。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator">
      <summary>取得或設定分隔數值中小數點左邊數字群組的字串。</summary>
      <returns>取得或設定分隔數值中小數點左邊數字群組的字串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 ","。</returns>
      <exception cref="T:System.ArgumentNullException">屬性正被設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSizes">
      <summary>取得或設定數值內小數點左邊數字的各個群組中的位數。</summary>
      <returns>取得或設定數值內小數點左邊數字的各個群組中的位數。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為一個只含有一個元素 (已設定為 3) 的一維陣列。</returns>
      <exception cref="T:System.ArgumentNullException">屬性正被設定為 null。</exception>
      <exception cref="T:System.ArgumentException">屬性正被設定，且陣列包含小於 0 或大於 9 的項目。-或-屬性正被設定，且陣列包含設定為 0 的項目 (最後項目以外的)。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberNegativePattern">
      <summary>取得或設定負數值的格式模式。</summary>
      <returns>取得或設定負數值的格式模式。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 1，表示 "-n"；其中，<paramref name="n" /> 為數值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性正設定為小於 0 或大於 4 的值。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits">
      <summary>取得或設定要在百分比值中使用的小數位數。</summary>
      <returns>指出要在貨幣值中使用的小數位數。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 2。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性正設定為小於 0 或大於 99 的值。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator">
      <summary>取得或設定要做為百分比值中小數分隔符號的字串。</summary>
      <returns>取得或設定要做為百分比值中小數分隔符號的字串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "."。</returns>
      <exception cref="T:System.ArgumentNullException">屬性正被設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
      <exception cref="T:System.ArgumentException">屬性正設定為空字串。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator">
      <summary>取得或設定百分比值中小數點左邊數字群組的字串。</summary>
      <returns>取得或設定字串分隔百分比值中小數點左邊數字群組的字串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 ","。</returns>
      <exception cref="T:System.ArgumentNullException">屬性正被設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentGroupSizes">
      <summary>取得或設定百分比值內小數點左邊數字的各個群組中的位數。</summary>
      <returns>取得或設定百分比值內小數點左邊數字的各個群組中的位數。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為一個只含有一個元素 (已設定為 3) 的一維陣列。</returns>
      <exception cref="T:System.ArgumentNullException">屬性正被設定為 null。</exception>
      <exception cref="T:System.ArgumentException">屬性正被設定，且陣列包含小於 0 或大於 9 的項目。-或-屬性正被設定，且陣列包含設定為 0 的項目 (最後項目以外的)。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentNegativePattern">
      <summary>取得或設定負數百分比值的格式模式。</summary>
      <returns>取得或設定負數百分比值的格式模式。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 0，表示 "-n %"；其中，"%" 為 <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />，而 <paramref name="n" /> 為數值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性正設定為小於 0 或大於 11 的值。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentPositivePattern">
      <summary>取得或設定正數百分比值的格式模式。</summary>
      <returns>正數百分比值的格式模式。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 0，表示了 "n %"，其中 "%" 為 <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />，而 <paramref name="n" /> 為一個數字。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">屬性正設定為小於 0 或大於 3 的值。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentSymbol">
      <summary>取得或設定要當做百分比符號的字串。</summary>
      <returns>要當做百分比符號的字串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "%"。</returns>
      <exception cref="T:System.ArgumentNullException">屬性正被設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PerMilleSymbol">
      <summary>取得或設定要當做千分之一符號的字串。</summary>
      <returns>要當做是千分之一符號的字串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "‰"，也就是 Unicode 字元 U+2030。</returns>
      <exception cref="T:System.ArgumentNullException">屬性正被設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol">
      <summary>取得或設定表示正無限大的字串。</summary>
      <returns>表示正無限大的字串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "Infinity" (無限大)。</returns>
      <exception cref="T:System.ArgumentNullException">屬性正被設定為 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PositiveSign">
      <summary>取得或設定用來表示相關數字為正數的字串。</summary>
      <returns>用來表示相關數字為正數的字串。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的預設值為 "+"。</returns>
      <exception cref="T:System.ArgumentNullException">在設定的作業中，要指派給屬性的值是 null。</exception>
      <exception cref="T:System.InvalidOperationException">正在設定屬性，而且 <see cref="T:System.Globalization.NumberFormatInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)">
      <summary>傳回唯讀的 <see cref="T:System.Globalization.NumberFormatInfo" /> 包裝函式。</summary>
      <returns>
        <paramref name="nfi" /> 的唯讀 <see cref="T:System.Globalization.NumberFormatInfo" /> 包裝函式。</returns>
      <param name="nfi">要包裝的 <see cref="T:System.Globalization.NumberFormatInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nfi" /> 為 null。 </exception>
    </member>
    <member name="T:System.Globalization.NumberStyles">
      <summary>決定數值字串引數中允許的樣式，這些引數是傳遞給整數及浮點數值型別的 Parse 方法。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowCurrencySymbol">
      <summary>表示數值字串可以包含貨幣符號。有效貨幣符號由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> 屬性來決定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowDecimalPoint">
      <summary>指出數值字串可以有小數點。如果 <see cref="T:System.Globalization.NumberStyles" /> 值包括 <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> 旗標，且剖析的字串包括貨幣符號，則有效的小數點字元由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" /> 屬性決定。否則，小數分隔符號字元由 <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" /> 屬性決定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowExponent">
      <summary>指出數值字串可以採用指數標記法。AllowExponent 旗標允許剖析的字串包含指數，也就是開頭為 "E" 或 "e" 字元，後面是選擇性正號或負號，最後是整數。換句話說，它能成功剖析 nnnExx、nnnE+xx 和 nnnE-xx 形式的字串。在有效數字或尾數中不允許小數分隔符號或正負號。若要在剖析的字串中允許這些元素，請使用 <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> 旗標，或使用包含這些個別旗標的元素樣式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowHexSpecifier">
      <summary>指出數值字串會表示十六進位值。有效十六進位值包括數值位數 0-9 和十六進位位數 A-F 和 a-f。使用此樣式剖析的字串不可在前端加上 "0x" 或 "&amp;h"。以 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 樣式剖析的字串永遠解譯為十六進位值。可與 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 結合的旗標僅限 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />。<see cref="T:System.Globalization.NumberStyles" /> 列舉包括由這三個旗標組成的複合樣式 <see cref="F:System.Globalization.NumberStyles.HexNumber" />。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingSign">
      <summary>指出數值字串可以有前置正負號。有效的前端正負號字元由 <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> 和 <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> 屬性決定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingWhite">
      <summary>表示剖析的字串中可以出現前端空白字元。有效空白字元具有 Unicode 值 U+0009、U+000A、U+000B、U+000C、U+000D 和 U+0020。請注意，這是可讓 <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 方法傳回 true 的字元子集。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowParentheses">
      <summary>指出數值字串可以有一對括住數字的括弧。括號表示要剖析的字串表示負數。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowThousands">
      <summary>表示數值字串可以有群組分隔符號，例如，隔開百位與千位的符號。如果 <see cref="T:System.Globalization.NumberStyles" /> 值包括 <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> 旗標，且要剖析的字串包括貨幣符號，則有效的群組分隔符號字元由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" /> 屬性決定，且每一組的位數由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" /> 屬性決定。否則，有效的群組分隔符號字元由 <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" /> 屬性決定，且每一組的位數由 <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" /> 屬性決定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingSign">
      <summary>指出數值字串可以有尾端正負號。有效的尾端正負號字元由 <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> 和 <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> 屬性決定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingWhite">
      <summary>表示剖析的字串中可以出現尾端空白字元。有效空白字元具有 Unicode 值 U+0009、U+000A、U+000B、U+000C、U+000D 和 U+0020。請注意，這是可讓 <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 方法傳回 true 的字元子集。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Any">
      <summary>指出使用除了 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 之外的所有樣式。這是複合的數字樣式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Currency">
      <summary>指出使用除了 <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 以外的所有樣式。這是複合的數字樣式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Float">
      <summary>表示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> 樣式。這是複合的數字樣式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.HexNumber">
      <summary>表示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> 及 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 樣式。這是複合的數字樣式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Integer">
      <summary>表示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> 及 <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> 樣式。這是複合的數字樣式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.None">
      <summary>表示剖析的字串中不可出現樣式元素，例如前端或尾端空白、千位分隔符號或小數分隔符號。要剖析的字串只能包含完整十進位數字。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Number">
      <summary>表示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> 及 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 樣式。這是複合的數字樣式。</summary>
    </member>
    <member name="T:System.Globalization.RegionInfo">
      <summary>包含關於國家/地區的資訊。</summary>
    </member>
    <member name="M:System.Globalization.RegionInfo.#ctor(System.String)">
      <summary>根據完整的文化特性名稱，針對特定國家/地區初始化 <see cref="T:System.Globalization.RegionInfo" /> 類別的新執行個體。</summary>
      <param name="name">字串，含有特定文化特性的完整文化特性名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 為國家/地區名稱。-或-<paramref name="name" /> 為中性文化特性的名稱。-或-<paramref name="name" /> 不是有效的文化特性名稱。</exception>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrencySymbol">
      <summary>取得與國家/地區相關的貨幣符號。</summary>
      <returns>與國家/地區相關的貨幣符號。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrentRegion">
      <summary>取得 <see cref="T:System.Globalization.RegionInfo" />，表示目前執行緒所使用的國家/地區。</summary>
      <returns>
        <see cref="T:System.Globalization.RegionInfo" />，表示目前執行緒所使用的國家/地區。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.DisplayName">
      <summary>以 .NET Framework 當地語系化版本的語言，取得國家/地區的完整名稱。</summary>
      <returns>.NET Framework 當地語系化版本語言之國家/地區的完整名稱。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.EnglishName">
      <summary>取得國家/地區的完整英文名稱。</summary>
      <returns>國家/地區的完整英文名稱。</returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.Equals(System.Object)">
      <summary>判斷指定物件與目前 <see cref="T:System.Globalization.RegionInfo" /> 物件是否相同。</summary>
      <returns>如果 <paramref name="value" /> 參數是 <see cref="T:System.Globalization.RegionInfo" /> 物件，而且其 <see cref="P:System.Globalization.RegionInfo.Name" /> 屬性同於目前 <see cref="T:System.Globalization.RegionInfo" /> 物件的 <see cref="P:System.Globalization.RegionInfo.Name" /> 屬性，則為 true；否則為 false。</returns>
      <param name="value">要與目前 <see cref="T:System.Globalization.RegionInfo" /> 比較的物件。</param>
    </member>
    <member name="M:System.Globalization.RegionInfo.GetHashCode">
      <summary>做為目前 <see cref="T:System.Globalization.RegionInfo" /> 的雜湊函式，適合於雜湊演算法和資料結構 (如雜湊資料表)。</summary>
      <returns>目前 <see cref="T:System.Globalization.RegionInfo" /> 的雜湊程式碼。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.IsMetric">
      <summary>取得值，指出國家/地區是否使用公制系統為度量。</summary>
      <returns>如果國家/地區使用公制系統為度量，則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.ISOCurrencySymbol">
      <summary>取得與國家/地區相關的三個字元的 ISO 4217 貨幣符號。</summary>
      <returns>與國家/地區相關的三個字元的 ISO 4217 貨幣符號。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.Name">
      <summary>取得目前 <see cref="T:System.Globalization.RegionInfo" /> 物件的名稱或 ISO 3166 兩個字母國家/地區代碼。</summary>
      <returns>由 <see cref="M:System.Globalization.RegionInfo.#ctor(System.String)" /> 建構函式的 <paramref name="name" /> 參數所指定的值。傳回值是以大寫表示。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.NativeName">
      <summary>取得國家/地區的名稱 (以國家/地區的母語格式表示)。</summary>
      <returns>國家/地區的原生名稱 (以與 ISO 3166 國家/地區碼相關聯的語言格式表示)。</returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.ToString">
      <summary>傳回字串，包含針對目前 <see cref="T:System.Globalization.RegionInfo" /> 所指定的文化特性名稱或 ISO 3166 兩個字母國家/地區代碼。</summary>
      <returns>字串，包含針對目前 <see cref="T:System.Globalization.RegionInfo" /> 定義的文化特性名稱或 ISO 3166 兩個字母國家/地區代碼。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.TwoLetterISORegionName">
      <summary>取得國家/地區定義於 ISO 3166 中的兩個字母代碼。</summary>
      <returns>國家/地區定義於 ISO 3166 中的兩個字母代碼。</returns>
    </member>
    <member name="T:System.Globalization.StringInfo">
      <summary>提供將字串分隔為文字元素並逐一查看那些文字元素的功能。</summary>
    </member>
    <member name="M:System.Globalization.StringInfo.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.StringInfo" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.StringInfo.#ctor(System.String)">
      <summary>將 <see cref="T:System.Globalization.StringInfo" /> 類別的新執行個體 (Instance) 初始化為指定的字串。</summary>
      <param name="value">用來初始化此 <see cref="T:System.Globalization.StringInfo" /> 物件的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.Equals(System.Object)">
      <summary>指出目前 <see cref="T:System.Globalization.StringInfo" /> 物件是否等於指定的物件。</summary>
      <returns>如果 <paramref name="value" /> 參數是 <see cref="T:System.Globalization.StringInfo" /> 物件，而且其 <see cref="P:System.Globalization.StringInfo.String" /> 屬性等於此 <see cref="T:System.Globalization.StringInfo" /> 物件的 <see cref="P:System.Globalization.StringInfo.String" /> 屬性，則為 true；否則為 false。</returns>
      <param name="value">物件。</param>
    </member>
    <member name="M:System.Globalization.StringInfo.GetHashCode">
      <summary>計算目前 <see cref="T:System.Globalization.StringInfo" /> 物件值的雜湊程式碼。</summary>
      <returns>以此 <see cref="T:System.Globalization.StringInfo" /> 物件的字串值為基礎的 32 位元帶正負號的整數 (Signed Integer) 的雜湊程式碼。</returns>
    </member>
    <member name="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
      <summary>取得指定字串中的第 1 個文字元素。</summary>
      <returns>含有指定字串中第 1 個文字元素的字串。</returns>
      <param name="str">要從其中取得文字元素的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 null。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
      <summary>取得在指定字串中指定索引處的文字元素。</summary>
      <returns>含有指定字串中指定索引處的文字元素的字串。</returns>
      <param name="str">要從其中取得文字元素的字串。</param>
      <param name="index">文字元素開始處的以零為起始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不在 <paramref name="str" /> 的有效索引範圍內。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
      <summary>傳回可以逐一查看整個字串文字元素的列舉程式。</summary>
      <returns>整個字串的 <see cref="T:System.Globalization.TextElementEnumerator" />。</returns>
      <param name="str">要逐一查看的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 null。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
      <summary>傳回可以從指定索引處開始來逐一查看字串文字元素的列舉程式。</summary>
      <returns>起始於 <paramref name="index" /> 之字串的 <see cref="T:System.Globalization.TextElementEnumerator" />。</returns>
      <param name="str">要逐一查看的字串。</param>
      <param name="index">要從該處開始逐一查看之以零為起始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不在 <paramref name="str" /> 的有效索引範圍內。</exception>
    </member>
    <member name="P:System.Globalization.StringInfo.LengthInTextElements">
      <summary>取得目前 <see cref="T:System.Globalization.StringInfo" /> 物件中的文字元素數目。</summary>
      <returns>此 <see cref="T:System.Globalization.StringInfo" /> 物件中的基底字元、Surrogate 字組和組合字元序列的數目。</returns>
    </member>
    <member name="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
      <summary>傳回所指定字串內各個基底字元、高 Surrogate 或控制字元的索引。</summary>
      <returns>整數陣列，包含所指定字串內各個基底字元、高 Surrogate 或控制字元的以零為起始的索引。</returns>
      <param name="str">要搜尋的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 null。</exception>
    </member>
    <member name="P:System.Globalization.StringInfo.String">
      <summary>取得或設定目前 <see cref="T:System.Globalization.StringInfo" /> 物件的值。</summary>
      <returns>做為目前 <see cref="T:System.Globalization.StringInfo" /> 物件值的字串。</returns>
      <exception cref="T:System.ArgumentNullException">設定作業中的值是 null。</exception>
    </member>
    <member name="T:System.Globalization.TaiwanCalendar">
      <summary>台灣曆法。</summary>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.TaiwanCalendar" /> 類別的新執行個體。</summary>
      <exception cref="T:System.TypeInitializationException">由於缺少文化特性資訊，無法初始化 <see cref="T:System.Globalization.TaiwanCalendar" /> 物件。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定月數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的月數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要將月份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要加入的月數。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小於 -120000。-或-<paramref name="months" /> 大於 120000。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定年數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的年數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要將年份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要加入的年數。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.Eras">
      <summary>取得 <see cref="T:System.Globalization.TaiwanCalendar" /> 中的紀元清單。</summary>
      <returns>陣列，由值一律是目前紀元的單一元素組成。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中月份的日期。</summary>
      <returns>從 1 到 31 的整數，表示指定 <see cref="T:System.DateTime" /> 中月份的日期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的星期。</summary>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，指出指定 <see cref="T:System.DateTime" /> 中的星期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份日期。</summary>
      <returns>從 1 到 366 的整數，表示指定 <see cref="T:System.DateTime" /> 中的年份日期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份的指定月份中的日數。</summary>
      <returns>在指定紀元的指定年份的指定月份中的日數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的日數。</summary>
      <returns>在指定紀元的指定年份中的日數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetEra(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的紀元。</summary>
      <returns>整數，表示指定 <see cref="T:System.DateTime" /> 中的紀元。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <returns>傳回值永遠都會是 0，因為 <see cref="T:System.Globalization.TaiwanCalendar" /> 類別不支援閏月的概念。</returns>
      <param name="year">一年。</param>
      <param name="era">一紀元。</param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <returns>從 1 到 12 的整數，表示指定 <see cref="T:System.DateTime" /> 中的月份。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的月數。</summary>
      <returns>在指定紀元的指定年份中的月數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>傳回年份中的週，包含指定 <see cref="T:System.DateTime" /> 中的日期。</summary>
      <returns>正整數，表示 <paramref name="time" /> 參數中日期所屬年份中的某週。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <param name="rule">其中一個 <see cref="T:System.Globalization.CalendarWeekRule" /> 值，可定義行事曆週。</param>
      <param name="firstDayOfWeek">其中一個 <see cref="T:System.DayOfWeek" /> 值，指出一週的第一天。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 或 <paramref name="firstDayOfWeek" /> 在日曆支援的範圍之外。-或-<paramref name="rule" /> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <returns>整數，表示指定 <see cref="T:System.DateTime" /> 中的年份。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的日期是否為閏日。</summary>
      <returns>如果指定日為閏日，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="day" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元的指定年份中指定的月份是否為閏月。</summary>
      <returns>此方法一律傳回 false，除非被衍生類別 (Derived Class) 所覆寫。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的年份是否為閏年。</summary>
      <returns>如果指定的年份為閏年，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.MaxSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.TaiwanCalendar" /> 類別所支援的最晚日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.TaiwanCalendar" /> 類別支援的最新日期和時間，相當於西曆中的西元 9999 年 12 月 31 日的最後一刻。</returns>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.MinSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.TaiwanCalendar" /> 類別所支援的最早日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.TaiwanCalendar" /> 類別支援的最早日期和時間，等於西曆中之西元 1912 年 1 月 1 日的第一時間。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元中設定為指定日期和時間的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="hour">從 0 到 23 的整數，表示小時。</param>
      <param name="minute">從 0 到 59 的整數，表示分鐘。</param>
      <param name="second">從 0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">從 0 到 999 的整數，表示毫秒。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="day" /> 在該曆法所支援的範圍之外。-或-<paramref name="hour" /> 小於零或大於 23。-或-<paramref name="minute" /> 小於零或大於 59。-或-<paramref name="second" /> 小於零或大於 59。-或-<paramref name="millisecond" /> 小於零或大於 999。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為 4 位數年份，方法是使用 <see cref="P:System.Globalization.TaiwanCalendar.TwoDigitYearMax" /> 屬性以判斷適當的世紀。</summary>
      <returns>整數，包含 <paramref name="year" /> 的四位數表示。</returns>
      <param name="year">兩位數或四位數整數，表示要轉換的年份。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中指定的值小於 99。-或-在設定作業中指定的值大於 MaxSupportedDateTime.Year。</exception>
      <exception cref="T:System.InvalidOperationException">在設定作業中，目前執行個體是唯讀的。</exception>
    </member>
    <member name="T:System.Globalization.TextElementEnumerator">
      <summary>列舉字串的文字元素。</summary>
    </member>
    <member name="P:System.Globalization.TextElementEnumerator.Current">
      <summary>取得字串中目前的文字元素。</summary>
      <returns>含有字串中目前文字元素的物件。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於字串的第 1 個文字元素之前，或最後 1 個文字元素之後。</exception>
    </member>
    <member name="P:System.Globalization.TextElementEnumerator.ElementIndex">
      <summary>取得列舉程式目前所位在的文字元素的索引。</summary>
      <returns>列舉程式目前所位在的文字元素的索引。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於字串的第 1 個文字元素之前，或最後 1 個文字元素之後。</exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.GetTextElement">
      <summary>取得字串中目前的文字元素。</summary>
      <returns>含有正被讀取字串中的目前文字元素的新字串。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式位於字串的第 1 個文字元素之前，或最後 1 個文字元素之後。</exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.MoveNext">
      <summary>將列舉程式前移至字串的下一個文字元素。</summary>
      <returns>如果列舉程式成功地前移至下一個文字元素，則為 true；如果列舉值已經傳遞字串的結尾，則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">列舉程式建立之後，字串會跟著修改。</exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.Reset">
      <summary>設定列舉程式至它的初始位置，這是在字串中第 1 個文字元素之前。</summary>
    </member>
    <member name="T:System.Globalization.TextInfo">
      <summary>定義屬性和行為，例如書寫系統所特有的大小寫。</summary>
    </member>
    <member name="P:System.Globalization.TextInfo.CultureName">
      <summary>取得文化特性的名稱，此文化特性與目前 <see cref="T:System.Globalization.TextInfo" /> 物件關聯。</summary>
      <returns>文化特性的名稱。</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.Equals(System.Object)">
      <summary>判斷指定的物件是否表示與目前 <see cref="T:System.Globalization.TextInfo" /> 物件相同的書寫系統。</summary>
      <returns>如果 <paramref name="obj" /> 表示與目前 <see cref="T:System.Globalization.TextInfo" /> 相同的書寫系統，則為 true；否則為 false。</returns>
      <param name="obj">要與目前 <see cref="T:System.Globalization.TextInfo" /> 比較的物件。</param>
    </member>
    <member name="M:System.Globalization.TextInfo.GetHashCode">
      <summary>做為目前 <see cref="T:System.Globalization.TextInfo" /> 物件的雜湊函式，適用於雜湊演算法和資料結構，例如雜湊表。</summary>
      <returns>目前 <see cref="T:System.Globalization.TextInfo" /> 的雜湊程式碼。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.IsReadOnly">
      <summary>取得值，指出目前 <see cref="T:System.Globalization.TextInfo" /> 物件是否為唯讀。</summary>
      <returns>如果目前的 <see cref="T:System.Globalization.TextInfo" /> 物件是唯讀的，則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.ListSeparator">
      <summary>取得或設定清單中分隔項目的字串。</summary>
      <returns>在清單中分隔項目的字串。</returns>
      <exception cref="T:System.ArgumentNullException">設定作業中的值是 null。</exception>
      <exception cref="T:System.InvalidOperationException">在設定作業中，目前 <see cref="T:System.Globalization.TextInfo" /> 物件是唯讀的。</exception>
    </member>
    <member name="M:System.Globalization.TextInfo.ToLower(System.Char)">
      <summary>轉換指定字元為小寫。</summary>
      <returns>轉換為小寫的指定字元。</returns>
      <param name="c">要轉換為小寫的字元。</param>
    </member>
    <member name="M:System.Globalization.TextInfo.ToLower(System.String)">
      <summary>轉換指定字串為小寫。</summary>
      <returns>轉換為小寫的指定字串。</returns>
      <param name="str">要轉換為小寫的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 null。</exception>
    </member>
    <member name="M:System.Globalization.TextInfo.ToString">
      <summary>傳回表示目前 <see cref="T:System.Globalization.TextInfo" /> 的字串。</summary>
      <returns>字串，表示目前 <see cref="T:System.Globalization.TextInfo" />。</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ToUpper(System.Char)">
      <summary>轉換指定字元為大寫。</summary>
      <returns>轉換為大寫的指定字元。</returns>
      <param name="c">要轉換為大寫的字元。</param>
    </member>
    <member name="M:System.Globalization.TextInfo.ToUpper(System.String)">
      <summary>轉換指定字串為大寫。</summary>
      <returns>轉換為大寫的指定字串。</returns>
      <param name="str">要轉換為大寫的字元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 null。</exception>
    </member>
    <member name="T:System.Globalization.ThaiBuddhistCalendar">
      <summary>表示泰國佛教曆法。</summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定月數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的月數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要將月份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要加入的月數。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小於 -120000。-或-<paramref name="months" /> 大於 120000。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>傳回與指定 <see cref="T:System.DateTime" /> 相差指定年數的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，由將指定的年數加入指定的 <see cref="T:System.DateTime" /> 所產生。</returns>
      <param name="time">要將年份加入的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要加入的年數。</param>
      <exception cref="T:System.ArgumentException">產生的 <see cref="T:System.DateTime" /> 在支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.Eras">
      <summary>取得 <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> 類別中的紀元清單。</summary>
      <returns>陣列，由值一律是目前紀元的單一元素組成。</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中月份的日期。</summary>
      <returns>從 1 到 31 的整數，表示指定 <see cref="T:System.DateTime" /> 中月份的日期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfWeek(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的星期。</summary>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值，指出指定 <see cref="T:System.DateTime" /> 中的星期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份日期。</summary>
      <returns>從 1 到 366 的整數，表示指定 <see cref="T:System.DateTime" /> 中的年份日期。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份的指定月份中的日數。</summary>
      <returns>在指定紀元的指定年份的指定月份中的日數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的日數。</summary>
      <returns>在指定紀元的指定年份中的日數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetEra(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 值的紀元。</summary>
      <returns>表示 <paramref name="time" /> 之紀元的整數。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <returns>傳回值永遠都會是 0，因為 <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> 類別不支援閏月的概念。</returns>
      <param name="year">一年。</param>
      <param name="era">一紀元。</param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetMonth(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <returns>從 1 到 12 的整數，表示指定 <see cref="T:System.DateTime" /> 中的月份。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>傳回在指定紀元的指定年份中的月數。</summary>
      <returns>在指定紀元的指定年份中的月數。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>傳回年份中的週，包含指定 <see cref="T:System.DateTime" /> 中的日期。</summary>
      <returns>從 1 起始的正整數，表示 <paramref name="time" /> 參數中日期所屬年份中的某週。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
      <param name="rule">其中一個 <see cref="T:System.Globalization.CalendarWeekRule" /> 值，可定義行事曆週。</param>
      <param name="firstDayOfWeek">其中一個 <see cref="T:System.DayOfWeek" /> 值，指出一週的第一天。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 或 <paramref name="firstDayOfWeek" /> 在日曆支援的範圍之外。-或-<paramref name="rule" /> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetYear(System.DateTime)">
      <summary>傳回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <returns>整數，表示指定 <see cref="T:System.DateTime" /> 中的年份。</returns>
      <param name="time">要讀取的 <see cref="T:System.DateTime" />。</param>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的日期是否為閏日。</summary>
      <returns>如果指定日為閏日，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="day" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定紀元的指定年份中指定的月份是否為閏月。</summary>
      <returns>此方法一律傳回 false，除非被衍生類別 (Derived Class) 所覆寫。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的年份是否為閏年。</summary>
      <returns>如果指定的年份為閏年，則為 true；否則為 false。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.MaxSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> 類別所支援的最晚日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> 類別支援的最新日期和時間，相當於西曆中的西元 9999 年 12 月 31 日的最後一刻。</returns>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.MinSupportedDateTime">
      <summary>取得 <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> 類別所支援的最早日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> 類別支援的最早日期和時間，等於西曆中之西元 0001 年 1 月 1 日的第一時間。</returns>
    </member>
    <member name="F:System.Globalization.ThaiBuddhistCalendar.ThaiBuddhistEra">
      <summary>表示目前的紀元。此欄位為常數。</summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回在指定紀元中設定為指定日期和時間的 <see cref="T:System.DateTime" />。</summary>
      <returns>
        <see cref="T:System.DateTime" />，設定為目前紀元中指定的日期和時間。</returns>
      <param name="year">整數，表示年份。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">從 1 到 31 的整數，表示日期。</param>
      <param name="hour">從 0 到 23 的整數，表示小時。</param>
      <param name="minute">從 0 到 59 的整數，表示分鐘。</param>
      <param name="second">從 0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">從 0 到 999 的整數，表示毫秒。</param>
      <param name="era">整數，表示紀元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。-或-<paramref name="month" /> 在該曆法所支援的範圍之外。-或-<paramref name="day" /> 在該曆法所支援的範圍之外。-或-<paramref name="hour" /> 小於零或大於 23。-或-<paramref name="minute" /> 小於零或大於 59。-或-<paramref name="second" /> 小於零或大於 59。-或-<paramref name="millisecond" /> 小於零或大於 999。-或-<paramref name="era" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為 4 位數年份，方法是使用 <see cref="P:System.Globalization.ThaiBuddhistCalendar.TwoDigitYearMax" /> 屬性以判斷適當的世紀。</summary>
      <returns>整數，包含 <paramref name="year" /> 的四位數表示。</returns>
      <param name="year">兩位數或四位數整數，表示要轉換的年份。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在該曆法所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中，指定的值小於 99。-或-在設定作業中，指定的值大於 10542。</exception>
    </member>
    <member name="T:System.Globalization.TimeSpanStyles">
      <summary>定義格式化選項，這些格式化選項自訂 <see cref="Overload:System.TimeSpan.ParseExact" /> 和 <see cref="Overload:System.TimeSpan.TryParseExact" /> 方法的字串剖析。</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.AssumeNegative">
      <summary>指出一律將輸入解譯為負時間間隔。</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.None">
      <summary>表示只有在負號存在時，才將輸入解譯為負時間間隔。</summary>
    </member>
    <member name="T:System.Globalization.UmAlQuraCalendar">
      <summary>表示沙烏地阿拉伯回教 (Um Al Qura) 曆法。</summary>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>計算與指定初始日期相差指定月數的日期。</summary>
      <returns>由 <paramref name="months" /> 參數指定的月數加入至由 <paramref name="time" /> 參數指定的日期所產生的日期。</returns>
      <param name="time">要在其中加入月份的日期。<see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別只支援從 04/30/1900 00.00.00 (西曆日期) 到 05/13/2029 23:59:59 (西曆日期) 之間的日期。</param>
      <param name="months">要加入的正或負月數。</param>
      <exception cref="T:System.ArgumentException">產生的日期不在 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別支援的範圍內。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小於 -120,000 或大於 120,000。-或-<paramref name="time" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>計算與指定初始日期相差指定年份的日期。</summary>
      <returns>由 <paramref name="years" /> 參數指定的年數加入至由 <paramref name="time" /> 參數指定的日期所產生的日期。</returns>
      <param name="time">要在其中加入年份的日期。</param>
      <param name="years">要加入的正或負年份。</param>
      <exception cref="T:System.ArgumentException">產生的日期不在 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別支援的範圍內。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> 小於 -10,000 或大於 10,000。-或-<paramref name="time" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.Eras">
      <summary>取得目前 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 支援的紀元清單。</summary>
      <returns>陣列，由值為 <see cref="F:System.Globalization.Calendar.CurrentEra" /> 的單一元素組成。</returns>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfMonth(System.DateTime)">
      <summary>計算指定的日期發生在月份中的哪一天。</summary>
      <returns>1 到 30 的整數，表示 <paramref name="time" /> 參數所指定月份的日期。</returns>
      <param name="time">要讀取的日期。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfWeek(System.DateTime)">
      <summary>計算指定的日期發生在一週中的哪一天。</summary>
      <returns>
        <paramref name="time" /> 參數指定的星期。</returns>
      <param name="time">要讀取的日期。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfYear(System.DateTime)">
      <summary>計算指定的日期發生在一年中的哪一天。</summary>
      <returns>1 到 355 的整數，表示 <paramref name="time" /> 參數所指定之年份的日期。</returns>
      <param name="time">要讀取的日期。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的指定月份中的天數。</summary>
      <returns>指定的年份與紀元中指定月份的天數。一般年份的傳回值為 29，閏年則為 30。</returns>
      <param name="year">一年。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">一紀元。指定 UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 不在 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>計算指定紀元的指定年份中的天數。</summary>
      <returns>指定年份和紀元中的天數。平年有 354 天，而閏年有 355 天。</returns>
      <param name="year">一年。</param>
      <param name="era">一紀元。指定 UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 不在 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetEra(System.DateTime)">
      <summary>傳回指定之 <see cref="T:System.DateTime" /> 值的紀元。</summary>
      <returns>永遠都傳回 <see cref="F:System.Globalization.Calendar.CurrentEra" /> 值。</returns>
      <param name="time">要讀取的日期。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>計算指定年份和紀元的閏月。</summary>
      <returns>一律是 0，因為 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別不支援閏月的概念。</returns>
      <param name="year">一年。</param>
      <param name="era">一紀元。指定 UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小於 1318 或大於 1450。-或-<paramref name="era" /> 不是 UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetMonth(System.DateTime)">
      <summary>計算指定日期發生的月份。</summary>
      <returns>1 到 12 的整數，表示 <paramref name="time" /> 參數所指定日期的月份。</returns>
      <param name="time">要讀取的日期。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>計算指定紀元的指定年份中的月數。</summary>
      <returns>一律是 12。</returns>
      <param name="year">一年。</param>
      <param name="era">一紀元。指定 UmAlQuaraCalendar.Eras[UmAlQuraCalendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在這個日曆所支援的範圍之外。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="era" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetYear(System.DateTime)">
      <summary>計算由所指定 <see cref="T:System.DateTime" /> 表示的日期年份。</summary>
      <returns>整數，表示 <paramref name="time" /> 參數所指定的年份。</returns>
      <param name="time">要讀取的日期。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定的日期是否為閏日。</summary>
      <returns>一律是 false，因為 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別不支援閏日的概念。</returns>
      <param name="year">一年。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">1 到 30 的整數，表示日期。</param>
      <param name="era">一紀元。指定 UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" /> 或 <paramref name="era" /> 不在 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>判斷指定年份和紀元中的指定月份是否為閏月。</summary>
      <returns>一律是 false，因為 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別不支援閏月。</returns>
      <param name="year">一年。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="era">一紀元。指定 UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 不在 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別支援的範圍內。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>判斷指定紀元中指定的年份是否為閏年。</summary>
      <returns>如果指定的年份為閏年，則為 true；否則為 false。</returns>
      <param name="year">一年。</param>
      <param name="era">一紀元。指定 UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 不在 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別支援的範圍內。</exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.MaxSupportedDateTime">
      <summary>取得受此曆法所支援的最晚日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別支援的最晚日期和時間，相當於西曆中的西元 2029 年 5 月 13 日的最後一刻。</returns>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.MinSupportedDateTime">
      <summary>取得受此曆法所支援的最早日期和時間。</summary>
      <returns>
        <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別支援的最早日期和時間，相當於西曆中的西元 1900 年 4 月 30 日的第一時間。</returns>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>傳回 <see cref="T:System.DateTime" />，其設定為指定日期、時間和紀元。</summary>
      <returns>物件，其設定為目前紀元中指定的日期和時間。</returns>
      <param name="year">一年。</param>
      <param name="month">從 1 到 12 的整數，表示月份。</param>
      <param name="day">1 到 29 的整數，表示日期。</param>
      <param name="hour">0 到 23 的整數，表示小時。</param>
      <param name="minute">0 到 59 的整數，表示分鐘。</param>
      <param name="second">0 到 59 的整數，表示秒鐘。</param>
      <param name="millisecond">0 到 999 的整數，表示毫秒。</param>
      <param name="era">一紀元。指定 UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" /> 或 <paramref name="era" /> 不在 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 類別支援的範圍內。-或-<paramref name="hour" /> 小於零或大於 23。-或-<paramref name="minute" /> 小於零或大於 59。-或-<paramref name="second" /> 小於零或大於 59。-或-<paramref name="millisecond" /> 小於零或大於 999。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.ToFourDigitYear(System.Int32)">
      <summary>將指定的年份轉換為 4 位數年份，方法是使用 <see cref="P:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax" /> 屬性以判斷適當的世紀。</summary>
      <returns>如果 <paramref name="year" /> 參數是 2 位數年份，則傳回值為對應的 4 位數年份。如果 <paramref name="year" /> 參數是 4 位數年份，則傳回值會是未變更的 <paramref name="year" /> 參數。</returns>
      <param name="year">從 0 到 99 的 2 位數年份，或是從 1318 到 1450 的 4 位數 Um Al Qura 曆年份。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 在這個日曆所支援的範圍之外。</exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax">
      <summary>取得或設定以二位數年份表示時，該 100 年範圍的最後一年。</summary>
      <returns>以二位數年份表示時，該 100 年範圍的最後一年。</returns>
      <exception cref="T:System.InvalidOperationException">此曆法是唯讀的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">在設定作業中，Um Al Qura 曆法的年份值小於 1318 但不是 99，或大於 1450。</exception>
    </member>
    <member name="T:System.Globalization.UnicodeCategory">
      <summary>定義字元的 Unicode 分類。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ClosePunctuation">
      <summary>指出字元為成對標點符號標記的其中一個結束字元，例如括弧、方括弧和大括號。由 Unicode 名稱 "Pe" (Punctuation, close) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ConnectorPunctuation">
      <summary>指出字元為可連接兩個字元的連接子標點符號。由 Unicode 名稱 "Pc" (Punctuation, connector) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Control">
      <summary>指出字元為控制碼，其 Unicode 值為 U+007F 或在 U+0000 至 U+001F 或 U+0080 至 U+009F 的範圍中。由 Unicode 名稱 "Cc" (Other, control) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.CurrencySymbol">
      <summary>指出字元為貨幣符號。由 Unicode 名稱 "Sc" (Symbol, currency) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.DashPunctuation">
      <summary>指出字元為破折號或連字號。由 Unicode 名稱 "Pd" (Punctuation, dash) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.DecimalDigitNumber">
      <summary>指出字元為十進位數字，即範圍 0 到 9。由 Unicode 名稱 "Nd" (number, decimal digit) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.EnclosingMark">
      <summary>指出字元為含括標記，是包圍直到基底字元以前 (含) 所有字元的非間距組合字元。由 Unicode 名稱 "Me" (Mark, enclosing) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.FinalQuotePunctuation">
      <summary>指出字元為結束或終結引號。由 Unicode 名稱 "Pf" (Punctuation, final quote) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Format">
      <summary>指出字元為格式字元，一般不會呈現，但會影響文字的配置或文字處理的作業。由 Unicode 名稱 "Cf" (Other, format) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.InitialQuotePunctuation">
      <summary>指出字元為開頭或啟始引號。由 Unicode 名稱 "Pi" (Punctuation, initial quote) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LetterNumber">
      <summary>指出字元是以字母 (而非十進位數字) 表示的數字 (例如，表示五的羅馬數字為 "V")。指出器 (Indicator) 是透過 Unicode 名稱 "Nl" (number, letter) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LineSeparator">
      <summary>指出字元要用來分隔文字行。由 Unicode 名稱 "Zl" (Separator, line) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LowercaseLetter">
      <summary>指出字元為小寫字母。由 Unicode 名稱 "Ll" (Letter, lowercase) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.MathSymbol">
      <summary>指出字元是數學符號 (如 "+" 或 "= ")。由 Unicode 名稱 "Sm" (Symbol, math) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ModifierLetter">
      <summary>指出字元為修飾詞字母，是獨立式的間距字元，會指示前面字母的修飾。由 Unicode 名稱 "Lm" (Letter, modifier) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ModifierSymbol">
      <summary>指出字元是修飾詞 (Modifier) 符號，它表示周圍字元的修飾。例如，分數斜線指示左邊的數字為分子，而右邊的數字為分母。指出器是透過 Unicode 名稱 "Sk" (symbol, modifier) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.NonSpacingMark">
      <summary>指出字元為非間距字元，它會指示基底字元的修飾。由 Unicode 名稱 "Mn" (Mark, nonspacing) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OpenPunctuation">
      <summary>指出字元為成對標點符號標記的其中一個開頭字元，例如括弧、方括弧和大括號。由 Unicode 名稱 "Ps" (Punctuation, open) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherLetter">
      <summary>指出字元為不是大寫字母、小寫字母、首字大寫字母或修飾詞字母的字母。由 Unicode 名稱 "Lo" (Letter, other) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherNotAssigned">
      <summary>指出字元沒有指派給任何 Unicode 分類。由 Unicode 名稱 "Cn" (Other, not assigned) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherNumber">
      <summary>指出字元為既不是十進位數字也不是字母數字的數字 (例如，分數 1/2)。指示器是透過 Unicode 名稱 "No" (number, other) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherPunctuation">
      <summary>指出字元為不是連接子標點符號、破折號標點符號、開始標點符號、結束標點符號、啟始引號標點符號或終結引號標點符號的標點符號。由 Unicode 名稱 "Po" (Punctuation, other) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherSymbol">
      <summary>指出字元為不是數學符號、貨幣符號或修飾詞符號的符號。由 Unicode 名稱 "So" (Symbol, other) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ParagraphSeparator">
      <summary>指出字元要用來分隔段落。由 Unicode 名稱 "Zp" (Separator, paragraph) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.PrivateUse">
      <summary>指出字元為私人使用字元，其 Unicode 值在 U+E000 至 U+F8FF 的範圍中。由 Unicode 名稱 "Co" (Other, private use) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.SpaceSeparator">
      <summary>指出字元為泛空白字元，它沒有圖像 (Glyph)，但也不是控制或格式字元。由 Unicode 名稱 "Zs" (Separator, space) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.SpacingCombiningMark">
      <summary>指出字元為間距字元，它會指示基底字元的修飾，並影響那個基底字元的圖像寬度。由 Unicode 名稱 "Mc" (Mark, spacing combining) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Surrogate">
      <summary>指出字元為高 Surrogate 或低 Surrogate。Surrogate 代碼的值在 U+D800 至 U+DFFF 的範圍。由 Unicode 名稱 "Cs" (Other, surrogate) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.TitlecaseLetter">
      <summary>指出字元為首字大寫字母。由 Unicode 名稱 "Lt" (Letter, titlecase) 表示。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.UppercaseLetter">
      <summary>指出字元為大寫字母。由 Unicode 名稱 "Lu" (Letter, uppercase) 表示。</summary>
    </member>
    <member name="T:System.IO.BinaryReader">
      <summary>以特定的編碼方式，將基本資料型別當做二進位值讀取。</summary>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream)">
      <summary>根據提供的資料流並使用 <see cref="T:System.Text.UTF8Encoding" />來初始化 <see cref="T:System.IO.BinaryReader" /> 類別的新執行個體。</summary>
      <param name="input">輸入資料流。</param>
      <exception cref="T:System.ArgumentNullException">資料流為 null。</exception>
      <exception cref="T:System.ArgumentException">資料流不支援讀取，或資料流已經關閉。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>根據提供的資料流和特定的字元編碼方式來初始化 <see cref="T:System.IO.BinaryReader" /> 類別的新執行個體。</summary>
      <param name="input">輸入資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <exception cref="T:System.ArgumentException">資料流不支援讀取，或資料流已經關閉。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="encoding" /> 為 null。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>根據提供的資料流、特定的字元編碼，以及用來指定是否保持資料流開啟的值來初始化 <see cref="T:System.IO.BinaryReader" /> 類別的新執行個體。</summary>
      <param name="input">輸入資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="leaveOpen">true 以將資料流保持開啟狀態；否則為 false。</param>
      <exception cref="T:System.ArgumentException">資料流不支援讀取，或資料流已經關閉。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="encoding" /> 為 null。 </exception>
    </member>
    <member name="P:System.IO.BinaryReader.BaseStream">
      <summary>將存取方式公開給 <see cref="T:System.IO.BinaryReader" /> 的基礎資料流。</summary>
      <returns>與 BinaryReader 相關聯的基礎資料流。</returns>
    </member>
    <member name="M:System.IO.BinaryReader.Close">
      <summary>關閉目前的讀取器 (Reader) 和基礎資料流。</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose">
      <summary>將 <see cref="T:System.IO.BinaryReader" /> 類別目前的執行個體所使用的資源釋出。</summary>
    </member>
    <member name="M:System.IO.BinaryReader.Dispose(System.Boolean)">
      <summary>由 <see cref="M:System.IO.BinaryReader.Dispose" /> 方法和完成項呼叫，以釋放 <see cref="T:System.IO.BinaryReader" /> 類別的目前執行個體所使用的 Managed 和 Unmanaged 資源。</summary>
      <param name="disposing">true 以釋放 Managed 和 Unmanaged 資源；false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.IO.BinaryReader.FillBuffer(System.Int32)">
      <summary>將從資料流讀取的指定位元組數目填入內部緩衝區。</summary>
      <param name="numBytes">要讀取的位元組數。</param>
      <exception cref="T:System.IO.EndOfStreamException">在 <paramref name="numBytes" /> 可讀取之前到達資料流末端。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">所要求的 <paramref name="numBytes" /> 大於內部緩衝區大小。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.PeekChar">
      <summary>傳回下一個可用字元，而不前移位元組或字元的位置。</summary>
      <returns>下一個可用的字元；如果沒有更多字元可供使用或資料流不支援搜尋，則為 -1。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read">
      <summary>按照所使用的 Encoding 和從資料流讀取的特定字元，自基礎資料流讀取字元，並將資料流中目前的位置往前移。</summary>
      <returns>輸入資料流的下一個字元；如果目前沒有字元可供使用，則為 -1。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>以 <paramref name="index" /> 做為位元組陣列的起始點，自資料流讀取 <paramref name="count" /> 個位元組。</summary>
      <returns>讀入 <paramref name="buffer" /> 的字元數。如果沒有足夠的位元組數，這可能會小於要求的位元組數；如果已到達資料流末端，則可能為零。</returns>
      <param name="buffer">要讀取資料的緩衝區。</param>
      <param name="index">開始讀取資料到緩衝區的緩衝區起始點。</param>
      <param name="count">要讀取的字元數。</param>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>以 <paramref name="index" /> 做為字元陣列的起始點，自資料流讀取 <paramref name="count" /> 個字元。</summary>
      <returns>讀入緩衝區的字元總數。如果目前沒有足夠的位元組數，這可能會小於要求的位元組數；如果已到達資料流末端，則可能為零。</returns>
      <param name="buffer">要讀取資料的緩衝區。</param>
      <param name="index">開始讀取資料到緩衝區的緩衝區起始點。</param>
      <param name="count">要讀取的字元數。</param>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.Read7BitEncodedInt">
      <summary>以壓縮格式讀取 32 位元整數。</summary>
      <returns>壓縮格式的 32 位元整數。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.FormatException">資料流已損毀。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBoolean">
      <summary>自目前資料流讀取 Boolean 值，並將資料流中目前的位置往前移一個位元組。</summary>
      <returns>如果位元組為非零值 (Nonzero)，則為 true；否則為 false。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadByte">
      <summary>自目前資料流讀取下一個位元組，並將資料流中目前的位置往前移一個位元組。</summary>
      <returns>自目前資料流讀取的下一個位元組。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadBytes(System.Int32)">
      <summary>自目前資料流讀取 <paramref name="count" /> 個位元組到位元組陣列，並將目前位置往前移 <paramref name="count" /> 個位元組。</summary>
      <returns>位元組陣列，含有自基礎資料流讀取的資料。如果已到達資料流末端，這可能會小於要求的位元組數。</returns>
      <param name="count">要讀取的位元組數。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 為負值。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChar">
      <summary>按照所使用的 Encoding 和從資料流讀取的特定字元，自目前資料流讀取下一個字元，並將資料流中目前的位置往前移。</summary>
      <returns>自目前資料流讀取的字元。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ArgumentException">讀取到 Surrogate 字元。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadChars(System.Int32)">
      <summary>按照所使用的 Encoding 和從資料流讀取的特定字元，自目前資料流讀取 <paramref name="count" /> 個字元，再將資料傳回字元陣列，並將目前位置往前移。</summary>
      <returns>字元陣列，含有從基礎資料流讀取的資料。如果已到達資料流末端，這可能會小於要求的字元數。</returns>
      <param name="count">要讀取的字元數。</param>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 為負值。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDecimal">
      <summary>自目前資料流讀取十進位值，並將資料流的目前位置前移十六個位元組。</summary>
      <returns>自目前資料流讀取的十進位值。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadDouble">
      <summary>自目前資料流讀取 8 位元組浮點數值，並將資料流目前位置前移八個位元組。</summary>
      <returns>自目前資料流讀取的 8 位元組浮點數值。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt16">
      <summary>自目前資料流讀取 2 位元組帶正負號的整數 (Signed Integer)，並將資料流目前位置前移兩個位元組。</summary>
      <returns>自目前資料流讀取的 2 位元組帶正負號的整數。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt32">
      <summary>自目前資料流讀取 4 位元組帶正負號的整數，並將資料流目前位置前移四個位元組。</summary>
      <returns>自目前資料流讀取的 4 位元組帶正負號的整數。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadInt64">
      <summary>自目前資料流讀取 8 位元組帶正負號的整數 (Signed Integer)，並將資料流目前位置前移八個位元組。</summary>
      <returns>自目前資料流讀取的 8 位元組帶正負號的整數。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSByte">
      <summary>自資料流讀取帶正負號的位元組，並將資料流目前位置前移一個位元組。</summary>
      <returns>自資料流讀取的帶正負號的位元組。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadSingle">
      <summary>自目前資料流讀取 4 位元組浮點數值，並將資料流目前位置前移四個位元組。</summary>
      <returns>自目前資料流讀取的 4 位元組浮點數值。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadString">
      <summary>自目前資料流讀取字串。字串會以長度為前置字元，每次以七位元編碼為一整數。</summary>
      <returns>讀取的字串。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt16">
      <summary>以位元組由小到大的編碼方式自目前資料流讀取 2 位元組不帶正負號的整數 (Unsigned Integer)，並將資料流目前位置前移兩個位元組。</summary>
      <returns>自此資料流讀取的 2 位元組不帶正負號的整數。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt32">
      <summary>自目前資料流讀取 4 位元組不帶正負號的整數，並將資料流目前位置前移四個位元組。</summary>
      <returns>自此資料流讀取的 4 位元組不帶正負號的整數。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryReader.ReadUInt64">
      <summary>自目前資料流讀取 8 位元組不帶正負號的整數，並將資料流目前位置前移八個位元組。</summary>
      <returns>自此資料流讀取 8 位元組不帶正負號的整數。</returns>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="T:System.IO.BinaryWriter">
      <summary>以二進位方式將基本型別 (Primitive Type) 寫入資料流，並支援以特定編碼方式寫入字串。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor">
      <summary>初始化 <see cref="T:System.IO.BinaryWriter" /> 類別的新執行個體，其將寫入資料流。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream)">
      <summary>根據提供的資料流並使用 UTF-8 做為字串的編碼方式來初始化 <see cref="T:System.IO.BinaryWriter" /> 類別的新執行個體。</summary>
      <param name="output">輸出資料流。</param>
      <exception cref="T:System.ArgumentException">資料流不支援寫入，或資料流已經關閉。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 為 null。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>根據提供的資料流和特定的字元編碼方式來初始化 <see cref="T:System.IO.BinaryWriter" /> 類別的新執行個體。</summary>
      <param name="output">輸出資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <exception cref="T:System.ArgumentException">資料流不支援寫入，或資料流已經關閉。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 或 <paramref name="encoding" /> 為 null。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>根據提供的資料流、特定的字元編碼，以及用來指定是否保持資料流開啟的值來初始化 <see cref="T:System.IO.BinaryWriter" /> 類別的新執行個體。</summary>
      <param name="output">輸出資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="leaveOpen">true 以將資料流保持開啟狀態；否則為 false。</param>
      <exception cref="T:System.ArgumentException">資料流不支援寫入，或資料流已經關閉。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 或 <paramref name="encoding" /> 為 null。 </exception>
    </member>
    <member name="P:System.IO.BinaryWriter.BaseStream">
      <summary>取得 <see cref="T:System.IO.BinaryWriter" /> 的基礎資料流。</summary>
      <returns>與 BinaryWriter 相關聯的基礎資料流。</returns>
    </member>
    <member name="M:System.IO.BinaryWriter.Close">
      <summary>關閉目前 <see cref="T:System.IO.BinaryWriter" /> 和基礎資料流。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose">
      <summary>將 <see cref="T:System.IO.BinaryWriter" /> 類別目前的執行個體所使用的資源釋出。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Dispose(System.Boolean)">
      <summary>由 <see cref="M:System.IO.BinaryWriter.Dispose" /> 方法和完成項呼叫，以釋放 <see cref="T:System.IO.BinaryWriter" /> 類別的目前執行個體所使用的 Managed 和 Unmanaged 資源。</summary>
      <param name="disposing">true 以釋放 Managed 和 Unmanaged 資源；false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.IO.BinaryWriter.Flush">
      <summary>清除目前寫入器 (Writer) 的所有緩衝區，並造成任何緩衝資料都寫入基礎裝置。</summary>
    </member>
    <member name="F:System.IO.BinaryWriter.Null">
      <summary>指定沒有備份存放區的 <see cref="T:System.IO.BinaryWriter" />。</summary>
    </member>
    <member name="F:System.IO.BinaryWriter.OutStream">
      <summary>容納基礎資料流。</summary>
    </member>
    <member name="M:System.IO.BinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
      <summary>設定目前資料流位置。</summary>
      <returns>目前資料流的位置。</returns>
      <param name="offset">相對於 <paramref name="origin" /> 的位元組位移。</param>
      <param name="origin">
        <see cref="T:System.IO.SeekOrigin" /> 的欄位，指出要取得新位置的參考點。</param>
      <exception cref="T:System.IO.IOException">檔案指標已移至無效的位置。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.IO.SeekOrigin" /> 值是無效的。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Boolean)">
      <summary>寫入一位元組的 Boolean 值至目前資料流，其中 0 表示 false，1 表示 true。</summary>
      <param name="value">要寫入的 Boolean 值 (0 或 1)。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte)">
      <summary>將不帶正負號 (Unsigned) 位元組寫入目前資料流，並將資料流位置前移一個位元組。</summary>
      <param name="value">要寫入的不帶正負號位元組。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[])">
      <summary>將位元組陣列寫入基礎資料流。</summary>
      <param name="buffer">含有要寫入之資料的位元組陣列。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>將一個區域的位元組陣列寫入目前資料流。</summary>
      <param name="buffer">含有要寫入之資料的位元組陣列。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入的起始點。</param>
      <param name="count">要寫入的位元組數。</param>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char)">
      <summary>將 Unicode 字元寫入至目前資料流，並按照所使用的 Encoding 和寫入資料流的特定字元，將資料流中目前的位置往前移。</summary>
      <param name="ch">非 Surrogate，要寫入的 Unicode 字元。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ch" /> 是單一 Surrogate 字元。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[])">
      <summary>將字元陣列寫入至目前資料流，並按照所使用的 Encoding 和寫入資料流的特定字元，將資料流中目前的位置往前移。</summary>
      <param name="chars">含有要寫入之資料的字元陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>將字元陣列中的一區段寫入至目前的資料流，並按照所使用的 Encoding 和可能為寫入資料流的特定字元，將資料流中目前的位置往前移。</summary>
      <param name="chars">含有要寫入之資料的字元陣列。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入的起始點。</param>
      <param name="count">要寫入的字元數。</param>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Decimal)">
      <summary>將十進位值寫入目前的資料流，並將資料流位置往前移十六個位元組。</summary>
      <param name="value">要寫入的十進位值。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Double)">
      <summary>將八位元組浮點數值寫入目前資料流，並將資料流目前位置前移八個位元組。</summary>
      <param name="value">要寫入的八位元組浮點數值。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int16)">
      <summary>將二位元組帶正負號的整數 (Signed Integer) 寫入目前資料流，並將資料流目前位置前移兩個位元組。</summary>
      <param name="value">要寫入的二位元組帶正負號的整數值。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int32)">
      <summary>將四位元組帶正負號的整數寫入目前資料流，並將資料流目前位置前移四個位元組。</summary>
      <param name="value">要寫入的四位元組帶正負號的整數。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Int64)">
      <summary>將八位元組不帶正負號的整數值寫入目前資料流，並將資料流目前位置前移八個位元組。</summary>
      <param name="value">要寫入的八位元組不帶正負號的整數值。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.SByte)">
      <summary>將帶正負號 (Signed) 位元組寫入目前資料流，並將資料流位置前移一個位元組。</summary>
      <param name="value">要寫入的帶正負號位元組。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.Single)">
      <summary>將四位元組浮點數 (Floating-Point) 值寫入目前資料流，並將資料流目前位置前移四個位元組。</summary>
      <param name="value">要寫入的四位元組浮點數值。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.String)">
      <summary>將有長度前置字元的字串以目前 <see cref="T:System.IO.BinaryWriter" /> 的編碼方式寫入此資料流，並按照所使用的編碼方式和寫入資料流的特定字元，將資料流中目前的位置往前移。</summary>
      <param name="value">要寫入的值。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt16)">
      <summary>將二位元組不帶正負號的整數寫入目前資料流，並將資料流目前位置前移兩個位元組。</summary>
      <param name="value">要寫入的二位元組不帶正負號的整數。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt32)">
      <summary>將四位元組不帶正負號的整數寫入目前資料流，並將資料流目前位置前移四個位元組。</summary>
      <param name="value">要寫入的四位元組不帶正負號的整數。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write(System.UInt64)">
      <summary>將八位元組不帶正負號的整數值寫入目前資料流，並將資料流目前位置前移八個位元組。</summary>
      <param name="value">要寫入的八位元組不帶正負號的整數值。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.BinaryWriter.Write7BitEncodedInt(System.Int32)">
      <summary>以壓縮格式寫入 32 位元整數。</summary>
      <param name="value">要寫入的 32 位元整數。</param>
      <exception cref="T:System.IO.EndOfStreamException">已到達資料流的末端。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">已關閉資料流。</exception>
    </member>
    <member name="T:System.IO.Directory">
      <summary>公開建立、移動和全面列舉目錄和子目錄的靜態方法。無法繼承此類別。</summary>
    </member>
    <member name="M:System.IO.Directory.CreateDirectory(System.String)">
      <summary>依照 <paramref name="path" /> 的指定建立所有目錄和子目錄。</summary>
      <returns>如 <paramref name="path" /> 所指定的 <see cref="T:System.IO.DirectoryInfo" />。</returns>
      <param name="path">要建立的目錄路徑。</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 指定的目錄為唯讀。</exception>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元。-或-<paramref name="path" /> 含有前置的冒號字元 (:)，或僅含有冒號字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 個字元，而檔案名稱必須小於 260 個字元。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 包含冒號字元 (:)，此字元不屬於磁碟機標籤 ("C:\") 的一部分。</exception>
    </member>
    <member name="M:System.IO.Directory.Delete(System.String)">
      <summary>從指定的路徑刪除空目錄。</summary>
      <param name="path">要移除的空目錄名稱。此目錄必須為可寫入的或空的。</param>
      <exception cref="T:System.IO.IOException">具有 <paramref name="path" /> 所指定之相同名稱和位置的檔案已存在。-或-此目錄是應用程式目前的工作目錄。-或-<paramref name="path" /> 指定的目錄不是空的。-或-此目錄具有開啟控制代碼，而且作業系統是 Windows XP 或先前的版本。此開啟控制代碼可能是列舉目錄和檔案所產生。</exception>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 個字元，而檔案名稱必須小於 260 個字元。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑不存在或找不到該路徑。-或-指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
    </member>
    <member name="M:System.IO.Directory.Delete(System.String,System.Boolean)">
      <summary>刪除指定目錄，並且若有指示的話，刪除目錄中的任何子目錄和檔案。</summary>
      <param name="path">要移除的目錄名稱。</param>
      <param name="recursive">true 以移除 <paramref name="path" /> 中的目錄、子目錄和檔案；否則為 false。</param>
      <exception cref="T:System.IO.IOException">具有 <paramref name="path" /> 所指定之相同名稱和位置的檔案已存在。-或-<paramref name="path" /> 所指定的目錄是唯讀的，或者 <paramref name="recursive" /> 是 false 而且 <paramref name="path" /> 不是空目錄。-或-此目錄是應用程式目前的工作目錄。-或-此目錄或其中一個檔案具有開啟控制代碼，而且作業系統是 Windows XP 或先前的版本。此開啟控制代碼可能是列舉目錄和檔案所產生。</exception>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 個字元，而檔案名稱必須小於 260 個字元。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑不存在或找不到該路徑。-或-指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
    </member>
    <member name="M:System.IO.Directory.Exists(System.String)">
      <summary>判斷指定路徑是否參考磁碟上的現有目錄。</summary>
      <returns>如果 <paramref name="path" /> 參考現有目錄則為 true；否則為 false。</returns>
      <param name="path">要測試的路徑。</param>
    </member>
    <member name="M:System.IO.Directory.GetCreationTime(System.String)">
      <summary>取得目錄的建立日期和時間。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 結構，設定為指定目錄的建立日期和時間。此值是以本地時間表示。</returns>
      <param name="path">目錄的路徑。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 個字元，而檔案名稱必須小於 260 個字元。</exception>
    </member>
    <member name="M:System.IO.Directory.GetCurrentDirectory">
      <summary>取得應用程式的目前工作目錄。</summary>
      <returns>含有目前工作目錄路徑的字串。</returns>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.NotSupportedException">作業系統是沒有目前目錄功能的 Windows CE。</exception>
    </member>
    <member name="M:System.IO.Directory.GetDirectories(System.String)">
      <summary>取得指定目錄中的子目錄名稱 (包括路徑)。</summary>
      <returns>String 型別的陣列，含有 <paramref name="path" /> 中子目錄的名稱。</returns>
      <param name="path">其子目錄名稱陣列已傳回的路徑。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 個字元，而檔案名稱必須小於 260 個字元。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 為檔案名稱。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
    </member>
    <member name="M:System.IO.Directory.GetDirectories(System.String,System.String)">
      <summary>取得目錄的陣列 (包含其路徑)，這些目錄符合目前目錄中指定的搜尋模式。</summary>
      <returns>符合搜尋模式的目錄的 String 陣列。</returns>
      <param name="path">要搜尋的路徑。</param>
      <param name="searchPattern">要比對 <paramref name="path" /> 中檔案名稱的搜尋字串。此參數不能以兩個句號 ("..") 當做結尾或是含有後面緊接著 <see cref="F:System.IO.Path.DirectorySeparatorChar" /> 或 <see cref="F:System.IO.Path.AltDirectorySeparatorChar" /> 的兩個句號 ("..")。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元。-或-<paramref name="searchPattern" /> 不包含有效模式。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="searchPattern" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 個字元，而檔案名稱必須小於 260 個字元。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 為檔案名稱。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
    </member>
    <member name="M:System.IO.Directory.GetDirectoryRoot(System.String)">
      <summary>傳回指定路徑的磁碟區資訊、根目錄資訊或兩者。</summary>
      <returns>含有指定路徑的磁碟區資訊、根目錄資訊或兩者的字串。</returns>
      <param name="path">檔案或目錄的路徑。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 個字元，而檔案名稱必須小於 260 個字元。</exception>
    </member>
    <member name="M:System.IO.Directory.GetFiles(System.String)">
      <summary>傳回指定目錄中檔案的名稱。</summary>
      <returns>指定目錄中檔案名稱的 String 陣列。</returns>
      <param name="path">要從中擷取檔案的來源目錄。</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 為檔案名稱。</exception>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 個字元，而檔案名稱必須小於 260 個字元。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
    </member>
    <member name="M:System.IO.Directory.GetFiles(System.String,System.String)">
      <summary>傳回指定目錄 (符合指定搜尋模式) 中檔案的名稱。</summary>
      <returns>含有指定目錄 (符合指定搜尋模式) 中檔案的名稱的 String 陣列。</returns>
      <param name="path">要搜尋的目錄。</param>
      <param name="searchPattern">要比對 <paramref name="path" /> 中檔案名稱的搜尋字串。此參數不能以兩個句號 (..) 當做結尾或是含有後面緊接著 <see cref="F:System.IO.Path.DirectorySeparatorChar" /> 或 <see cref="F:System.IO.Path.AltDirectorySeparatorChar" /> 的兩個句號 (..)，也不能含有任何字元。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元。-或-<paramref name="searchPattern" /> 不包含有效模式。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="searchPattern" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 個字元，而檔案名稱必須小於 260 個字元。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
    </member>
    <member name="M:System.IO.Directory.GetFileSystemEntries(System.String)">
      <summary>傳回指定目錄中所有檔案和子目錄的名稱。</summary>
      <returns>含有指定目錄中檔案系統項目的名稱的 String 陣列。</returns>
      <param name="path">其檔案和子目錄名稱已傳回的目錄。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 個字元，而檔案名稱必須小於 260 個字元。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 為檔案名稱。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
    </member>
    <member name="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String)">
      <summary>傳回符合指定搜尋準則的檔案系統項目的陣列。</summary>
      <returns>符合搜尋準則的檔案系統項目的 String 陣列。</returns>
      <param name="path">要被搜尋的路徑。</param>
      <param name="searchPattern">要比對 <paramref name="path" /> 中檔案名稱的搜尋字串。<paramref name="searchPattern" /> 參數不能以兩個句號 ("..") 當做結尾或是含有後面緊接著 <see cref="F:System.IO.Path.DirectorySeparatorChar" /> 或 <see cref="F:System.IO.Path.AltDirectorySeparatorChar" /> 的兩個句號 ("..")。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元。-或-<paramref name="searchPattern" /> 不包含有效模式。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="searchPattern" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 個字元，而檔案名稱必須小於 260 個字元。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 為檔案名稱。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
    </member>
    <member name="M:System.IO.Directory.GetLastAccessTime(System.String)">
      <summary>傳回指定檔案或目錄上次被存取的日期和時間。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 結構，設定為指定檔案或目錄上次被存取的日期和時間。此值是以本地時間表示。</returns>
      <param name="path">要取得其存取日期和時間資訊的檔案或目錄。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 個字元，而檔案名稱必須小於 260 個字元。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 參數的格式無效。</exception>
    </member>
    <member name="M:System.IO.Directory.GetLastWriteTime(System.String)">
      <summary>傳回指定檔案或目錄上次被寫入的日期和時間。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 結構，設定為指定檔案或目錄上次被寫入的日期和時間。此值是以本地時間表示。</returns>
      <param name="path">要取得其修改日期和時間資訊的檔案或目錄。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 個字元，而檔案名稱必須小於 260 個字元。</exception>
    </member>
    <member name="M:System.IO.Directory.Move(System.String,System.String)">
      <summary>移動檔案或目錄和其內容到新位置。</summary>
      <param name="sourceDirName">要移動的檔案或目錄的路徑。</param>
      <param name="destDirName">
        <paramref name="sourceDirName" /> 的新位置的路徑。如果 <paramref name="sourceDirName" /> 是檔案，則 <paramref name="destDirName" /> 也必須是檔案名稱。</param>
      <exception cref="T:System.IO.IOException">已嘗試將目錄移動到不同磁碟區。-或-<paramref name="destDirName" /> 已經存在。-或-<paramref name="sourceDirName" /> 和 <paramref name="destDirName" /> 參數參考到相同檔案或目錄。</exception>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceDirName" /> 或 <paramref name="destDirName" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceDirName" /> 或 <paramref name="destDirName" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 個字元，而檔案名稱必須小於 260 個字元。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">由 <paramref name="sourceDirName" /> 指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
    </member>
    <member name="M:System.IO.Directory.SetCurrentDirectory(System.String)">
      <summary>[安全性關鍵] 將應用程式的目前工作目錄設定為指定目錄。</summary>
      <param name="path">設定為目前工作目錄的路徑。</param>
    </member>
    <member name="T:System.IO.DirectoryInfo">
      <summary>公開建立、移動和全面列舉目錄和子目錄的執行個體 (Instance) 方法。無法繼承此類別。</summary>
    </member>
    <member name="M:System.IO.DirectoryInfo.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.IO.DirectoryInfo" /> 類別的新執行個體。</summary>
      <param name="path">字串，指定用來建立 DirectoryInfo 的路徑。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 含有無效的字元，例如 "、&amp;lt;、&amp;gt; 或 |。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。指定的路徑或檔案名稱 (或兩者都) 過長。</exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.Create">
      <summary>建立目錄</summary>
      <exception cref="T:System.IO.IOException">無法建立目錄。</exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.CreateSubdirectory(System.String)">
      <summary>在指定路徑上建立子目錄。</summary>
      <returns>
        <paramref name="path" /> 中指定的最後 1 個目錄。</returns>
      <param name="path">指定的路徑。不能是不同的磁碟區或通用命名慣例 (UNC) 名稱。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 沒有指定有效的檔案路徑，或者是含有無效的 DirectoryInfo 字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位在未對應的磁碟上。</exception>
      <exception cref="T:System.IO.IOException">無法建立子目錄-或-檔案或目錄已經擁有 <paramref name="path" /> 指定的名稱。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。指定的路徑或檔案名稱 (或兩者都) 過長。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端不具有建立目錄的程式碼存取權限。-或-呼叫端不具有程式碼存取權限，無法讀取由傳回之 <see cref="T:System.IO.DirectoryInfo" /> 物件描述的目錄。這會在 <paramref name="path" /> 參數描述現有目錄時發生。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 包含冒號字元 (:)，此字元不屬於磁碟機標籤 ("C:\") 的一部分。</exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.Delete">
      <summary>如果這個 <see cref="T:System.IO.DirectoryInfo" /> 是空的，則將它刪除。</summary>
      <exception cref="T:System.IO.IOException">目錄不是空的。-或-此目錄是應用程式目前的工作目錄。-或-此目錄具有開啟控制代碼，而且作業系統是 Windows XP 或先前的版本。此開啟控制代碼可能是列舉目錄和檔案所產生。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">這個 <see cref="T:System.IO.DirectoryInfo" /> 物件描述的目錄不存在，或找不到該目錄。</exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.Delete(System.Boolean)">
      <summary>刪除 <see cref="T:System.IO.DirectoryInfo" /> 的這個執行個體，指定是否刪除子目錄和檔案。</summary>
      <param name="recursive">true 以刪除這個目錄、其子目錄及所有檔案；否則為 false。</param>
      <exception cref="T:System.IO.IOException">目錄是唯讀的。-或-目錄包含一個或多個檔案或子目錄，並且 <paramref name="recursive" /> 是 false。-或-此目錄是應用程式目前的工作目錄。-或-此目錄或其中一個檔案具有開啟控制代碼，而且作業系統是 Windows XP 或先前的版本。此開啟控制代碼可能是列舉目錄和檔案所產生。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
    </member>
    <member name="P:System.IO.DirectoryInfo.Exists">
      <summary>取得值，指出目錄是否存在。</summary>
      <returns>如果目錄存在，則為 true；否則為 false。</returns>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetDirectories">
      <summary>傳回目前目錄的子目錄。</summary>
      <returns>
        <see cref="T:System.IO.DirectoryInfo" /> 物件的陣列。</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">封裝在 DirectoryInfo 物件中的路徑無效，例如位在未對應的磁碟上。</exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetDirectories(System.String)">
      <summary>傳回在目前 <see cref="T:System.IO.DirectoryInfo" /> 中，符合指定的搜尋準則的目錄陣列。</summary>
      <returns>DirectoryInfo 型別的陣列，符合 <paramref name="searchPattern" />。</returns>
      <param name="searchPattern">搜尋字串 (例如 "System*")，用來搜尋所有以 "System" 這個字開始的目錄。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern" /> 為 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">封裝在 DirectoryInfo 物件中的路徑無效，例如位在未對應的磁碟上。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFiles">
      <summary>從目前的目錄傳回檔案清單。</summary>
      <returns>型別為 <see cref="T:System.IO.FileInfo" /> 的陣列。</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">路徑無效，例如位在未對應的磁碟上。</exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFiles(System.String)">
      <summary>從目前目錄傳回符合指定之 <paramref name="searchPattern" /> 的檔案清單。</summary>
      <returns>型別為 <see cref="T:System.IO.FileInfo" /> 的陣列。</returns>
      <param name="searchPattern">搜尋字串，例如 "*.txt"。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern" /> 為 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">路徑無效，例如位在未對應的磁碟上。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFileSystemInfos">
      <summary>傳回強型別 <see cref="T:System.IO.FileSystemInfo" /> 項目的陣列，表示目錄中的所有檔案和子目錄。</summary>
      <returns>強型別 (Strongly Typed) <see cref="T:System.IO.FileSystemInfo" /> 元素的陣列。</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">路徑無效，例如位在未對應的磁碟上。</exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.GetFileSystemInfos(System.String)">
      <summary>擷取強型別 <see cref="T:System.IO.FileSystemInfo" /> 物件的陣列，表示符合指定搜尋準則的檔案和子目錄。</summary>
      <returns>強型別 FileSystemInfo 物件的陣列，符合搜尋準則。</returns>
      <param name="searchPattern">搜尋字串 (例如 "System*")，用來搜尋所有以 "System" 這個字開始的目錄。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern" /> 為 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位在未對應的磁碟上。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.MoveTo(System.String)">
      <summary>移動 <see cref="T:System.IO.DirectoryInfo" /> 執行個體和其內容至新的路徑。</summary>
      <param name="destDirName">要將此目錄移至的目的名稱和路徑。目的端不可以是另一個磁碟區，或者是名稱完全相同的目錄。它可以是您要將此目錄加入做為子目錄的現有目錄。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destDirName" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destDirName" /> 為空字串 ("")。</exception>
      <exception cref="T:System.IO.IOException">已嘗試將目錄移動到不同磁碟區。-或-<paramref name="destDirName" /> 已經存在。-或-您未取得存取此路徑的授權。-或-正在移動的目錄與目的目錄具有相同名稱。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">找不到目的目錄。</exception>
    </member>
    <member name="P:System.IO.DirectoryInfo.Name">
      <summary>取得此 <see cref="T:System.IO.DirectoryInfo" /> 執行個體的名稱。</summary>
      <returns>目錄名稱。</returns>
    </member>
    <member name="P:System.IO.DirectoryInfo.Parent">
      <summary>取得指定子目錄的父代 (Parent) 目錄。</summary>
      <returns>父代目錄，或 null (如果路徑是 Null 或者檔案路徑代表根目錄，例如 "\"、"C:" 或 * "\\server\share")。</returns>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
    </member>
    <member name="P:System.IO.DirectoryInfo.Root">
      <summary>取得路徑的根目錄 (Root) 部分。</summary>
      <returns>
        <see cref="T:System.IO.DirectoryInfo" /> 物件，表示路徑的根目錄。</returns>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。 </exception>
    </member>
    <member name="M:System.IO.DirectoryInfo.ToString">
      <summary>傳回已由使用者傳遞的原始路徑。</summary>
      <returns>傳回已由使用者傳遞的原始路徑。</returns>
    </member>
    <member name="T:System.IO.DirectoryNotFoundException">
      <summary>找不到檔案或目錄的一部分時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.IO.DirectoryNotFoundException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String)">
      <summary>使用設為 <paramref name="message" /> 的訊息字串來初始化 <see cref="T:System.IO.DirectoryNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。<paramref name="message" /> 的內容必須能讓人了解。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.IO.DirectoryNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，即會在處理內部例外狀況的 catch 區塊中發生目前的例外狀況。 </param>
    </member>
    <member name="T:System.IO.EndOfStreamException">
      <summary>嘗試超過資料流末端進行讀取時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor">
      <summary>使用將其訊息字串設定為系統提供的訊息來初始化 <see cref="T:System.IO.EndOfStreamException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String)">
      <summary>使用其訊息字串設定為 <paramref name="message" /> 和其 HRESULT 設定為 COR_E_ENDOFSTREAM來初始化 <see cref="T:System.IO.EndOfStreamException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的字串。<paramref name="message" /> 的內容必須能讓人了解。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.IO.EndOfStreamException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.IO.EndOfStreamException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的字串。<paramref name="message" /> 的內容必須能讓人了解。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，即會在處理內部例外狀況的 catch 區塊中發生目前的例外狀況。 </param>
    </member>
    <member name="T:System.IO.File">
      <summary>提供建立、複製、刪除、移動和開啟檔案的靜態方法，並協助 <see cref="T:System.IO.FileStream" /> 物件的建立。</summary>
    </member>
    <member name="M:System.IO.File.AppendText(System.String)">
      <summary>建立會附加 UTF-8 編碼的文字至現有檔案的 <see cref="T:System.IO.StreamWriter" />。</summary>
      <returns>將 UTF-8 編碼的文字附加至現有檔案的 StreamWriter。</returns>
      <param name="path">要附加至檔案的路徑。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元 (如 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 所定義)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 的格式無效。</exception>
    </member>
    <member name="M:System.IO.File.Copy(System.String,System.String)">
      <summary>複製現有的檔案到新的檔案。不允許覆寫相同名稱的檔案。</summary>
      <param name="sourceFileName">要複製的檔案。</param>
      <param name="destFileName">目的檔案的名稱。這不可以是目錄或現有檔案。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName" /> 或 <paramref name="destFileName" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元 (如 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 所定義)。-或-<paramref name="sourceFileName" /> 或 <paramref name="destFileName" /> 指定目錄。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName" /> 或 <paramref name="destFileName" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="sourceFileName" /> 或 <paramref name="destFileName" /> 中指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="sourceFileName" />。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="destFileName" /> 存在。-或-發生 I/O 錯誤。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="sourceFileName" /> 或 <paramref name="destFileName" /> 的格式無效。</exception>
    </member>
    <member name="M:System.IO.File.Copy(System.String,System.String,System.Boolean)">
      <summary>複製現有的檔案到新的檔案。允許覆寫相同名稱的檔案。</summary>
      <param name="sourceFileName">要複製的檔案。</param>
      <param name="destFileName">目的檔案的名稱。這不得作為目錄。</param>
      <param name="overwrite">如果可以覆寫目的地檔案，則為 true；否則為 false。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName" /> 或 <paramref name="destFileName" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元 (如 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 所定義)。-或-<paramref name="sourceFileName" /> 或 <paramref name="destFileName" /> 指定目錄。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName" /> 或 <paramref name="destFileName" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="sourceFileName" /> 或 <paramref name="destFileName" /> 中指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="sourceFileName" />。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="destFileName" /> 為唯讀，或 <paramref name="destFileName" /> 存在而且 <paramref name="overwrite" /> 為 false。-或-發生 I/O 錯誤。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="sourceFileName" /> 或 <paramref name="destFileName" /> 的格式無效。</exception>
    </member>
    <member name="M:System.IO.File.Create(System.String)">
      <summary>在指定的路徑中建立或覆寫檔案。</summary>
      <returns>
        <see cref="T:System.IO.FileStream" />，提供在 <paramref name="path" /> 中指定之檔案的讀取/寫入存取。</returns>
      <param name="path">要建立的檔案路徑和名稱。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。-或-<paramref name="path" /> 指定了唯讀的檔案。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元 (如 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 所定義)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.IO.IOException">建立檔案時發生 I/O 錯誤。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 的格式無效。</exception>
    </member>
    <member name="M:System.IO.File.Create(System.String,System.Int32)">
      <summary>建立或覆寫指定檔案。</summary>
      <returns>具有指定之緩衝區大小的 <see cref="T:System.IO.FileStream" />，提供在 <paramref name="path" /> 中指定之檔案的讀取/寫入存取。</returns>
      <param name="path">檔案的名稱。</param>
      <param name="bufferSize">用來緩衝檔案的讀取和寫入的位元組數。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。-或-<paramref name="path" /> 指定了唯讀的檔案。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元 (如 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 所定義)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.IO.IOException">建立檔案時發生 I/O 錯誤。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 的格式無效。</exception>
    </member>
    <member name="M:System.IO.File.CreateText(System.String)">
      <summary>建立或開啟用以寫入 UTF-8 編碼文字的檔案。</summary>
      <returns>
        <see cref="T:System.IO.StreamWriter" />，使用 UTF-8 編碼方式寫入指定檔案。</returns>
      <param name="path">要被開啟來寫入的檔案。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元 (如 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 所定義)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 的格式無效。</exception>
    </member>
    <member name="M:System.IO.File.Delete(System.String)">
      <summary>刪除指定的檔案。例外狀況不會被擲回，如果指定檔案不存在的話。</summary>
      <param name="path">要刪除的檔案的名稱。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元 (如 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 所定義)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.IO.IOException">指定檔案在使用中。-或-此檔案具有開啟控制代碼，而且作業系統是 Windows XP 或先前的版本。此開啟控制代碼可能是列舉目錄和檔案所產生。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 的格式無效。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。-或-<paramref name="path" /> 是目錄。-或-<paramref name="path" /> 指定了唯讀的檔案。</exception>
    </member>
    <member name="M:System.IO.File.Exists(System.String)">
      <summary>判斷指定的檔案是否存在。</summary>
      <returns>如果呼叫端擁有必要的使用權限而且 <paramref name="path" /> 含有現有檔案的名稱，則為 true；否則為 false。如果 <paramref name="path" /> 是 null、無效路徑或長度為零的字串，則這個方法也會傳回 false。如果呼叫端沒有充足使用權限來讀取指定檔案，沒有例外狀況會擲回，並且不論 <paramref name="path" /> 是否存在，方法都將傳回 false。</returns>
      <param name="path">要檢查的檔案。</param>
    </member>
    <member name="M:System.IO.File.GetCreationTime(System.String)">
      <summary>傳回指定檔案或目錄的建立日期和時間。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 結構，設定為指定檔案或目錄的建立日期和時間。此值是以本地時間表示。</returns>
      <param name="path">要取得其建立日期和時間資訊的檔案或目錄。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元 (如 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 所定義)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 的格式無效。</exception>
    </member>
    <member name="M:System.IO.File.GetLastAccessTime(System.String)">
      <summary>傳回指定檔案或目錄上次被存取的日期和時間。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 結構，設定為指定檔案或目錄上次被存取的日期和時間。此值是以本地時間表示。</returns>
      <param name="path">要取得其存取日期和時間資訊的檔案或目錄。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元 (如 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 所定義)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 的格式無效。</exception>
    </member>
    <member name="M:System.IO.File.GetLastWriteTime(System.String)">
      <summary>傳回指定檔案或目錄上次被寫入的日期和時間。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 結構，設定為指定檔案或目錄上次被寫入的日期和時間。此值是以本地時間表示。</returns>
      <param name="path">要取得其寫入日期和時間資訊的檔案或目錄。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元 (如 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 所定義)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 的格式無效。</exception>
    </member>
    <member name="M:System.IO.File.Move(System.String,System.String)">
      <summary>移動指定的檔案至新的位置，提供指定新檔名的選項。</summary>
      <param name="sourceFileName">要移動的檔案名稱。</param>
      <param name="destFileName">檔案的新路徑。</param>
      <exception cref="T:System.IO.IOException">目的檔案已經存在。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName" /> 或 <paramref name="destFileName" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName" /> 或 <paramref name="destFileName" /> 是長度為零的字串、只含有空白字元，或含有一個或多個無效的字元 (如 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 所定義)。</exception>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="sourceFileName" />。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="sourceFileName" /> 或 <paramref name="destFileName" /> 中指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="sourceFileName" /> 或 <paramref name="destFileName" /> 的格式無效。</exception>
    </member>
    <member name="M:System.IO.File.Open(System.String,System.IO.FileMode)">
      <summary>在指定路徑上以讀取/寫入存取來開啟 <see cref="T:System.IO.FileStream" />。</summary>
      <returns>在指定模式和路徑中開啟的 <see cref="T:System.IO.FileStream" />，具有讀取/寫入存取而且不共用。</returns>
      <param name="path">要開啟的檔案。</param>
      <param name="mode">
        <see cref="T:System.IO.FileMode" /> 值，指定是否要建立檔案 (如果它不存在的話)，和決定現有檔案的內容是否要保留或覆寫。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元 (如 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 所定義)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.IO.IOException">開啟檔案時發生 I/O 錯誤。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> 指定了唯讀的檔案。-或-這個作業在目前平台不受支援。-或-<paramref name="path" /> 指定了目錄。-或-呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 指定了無效值。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到在 <paramref name="path" /> 中指定的檔案。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 的格式無效。</exception>
    </member>
    <member name="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>在指定路徑上以指定模式和存取來開啟 <see cref="T:System.IO.FileStream" />。</summary>
      <returns>不共用的 <see cref="T:System.IO.FileStream" />，提供對指定檔案 (具有指定模式和存取) 的存取。</returns>
      <param name="path">要開啟的檔案。</param>
      <param name="mode">
        <see cref="T:System.IO.FileMode" /> 值，指定是否要建立檔案 (如果它不存在的話)，和決定現有檔案的內容是否要保留或覆寫。</param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 值，指定可以在檔案上執行的作業。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元 (如 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 所定義)。-或-<paramref name="access" /> 指定的是 Read，而 <paramref name="mode" /> 指定的是 Create、CreateNew、Truncate 或 Append。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.IO.IOException">開啟檔案時發生 I/O 錯誤。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> 指定了唯讀的檔案，而 <paramref name="access" /> 不是 Read。-或-<paramref name="path" /> 指定了目錄。-或-呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 或 <paramref name="access" /> 指定了無效值。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到在 <paramref name="path" /> 中指定的檔案。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 的格式無效。</exception>
    </member>
    <member name="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>在指定路徑上開啟 <see cref="T:System.IO.FileStream" />，假定它具有讀取、寫入或讀取/寫入存取的指定模式和指定的共用選項。</summary>
      <returns>在指定路徑上開啟 <see cref="T:System.IO.FileStream" />，假定它具有讀取、寫入或讀取/寫入存取的指定模式和指定的共用選項。</returns>
      <param name="path">要開啟的檔案。</param>
      <param name="mode">
        <see cref="T:System.IO.FileMode" /> 值，指定是否要建立檔案 (如果它不存在的話)，和決定現有檔案的內容是否要保留或覆寫。</param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 值，指定可以在檔案上執行的作業。</param>
      <param name="share">
        <see cref="T:System.IO.FileShare" /> 值，指定其他執行緒對檔案擁有的存取類型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元 (如 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 所定義)。-或-<paramref name="access" /> 指定的是 Read，而 <paramref name="mode" /> 指定的是 Create、CreateNew、Truncate 或 Append。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.IO.IOException">開啟檔案時發生 I/O 錯誤。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> 指定了唯讀的檔案，而 <paramref name="access" /> 不是 Read。-或-<paramref name="path" /> 指定了目錄。-或-呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" />、<paramref name="access" /> 或 <paramref name="share" /> 指定了無效值。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到在 <paramref name="path" /> 中指定的檔案。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 的格式無效。</exception>
    </member>
    <member name="M:System.IO.File.OpenRead(System.String)">
      <summary>開啟現有檔案來讀取。</summary>
      <returns>指定路徑上的唯讀 <see cref="T:System.IO.FileStream" />。</returns>
      <param name="path">要被開啟來讀取的檔案。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元 (如 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 所定義)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> 指定了目錄。-或-呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到在 <paramref name="path" /> 中指定的檔案。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 的格式無效。</exception>
    </member>
    <member name="M:System.IO.File.OpenText(System.String)">
      <summary>開啟現有 UTF-8 編碼的文字檔來讀取。</summary>
      <returns>指定路徑上的 <see cref="T:System.IO.StreamReader" />。</returns>
      <param name="path">要被開啟來讀取的檔案。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元 (如 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 所定義)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到在 <paramref name="path" /> 中指定的檔案。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 的格式無效。</exception>
    </member>
    <member name="M:System.IO.File.OpenWrite(System.String)">
      <summary>開啟現有檔案來寫入。</summary>
      <returns>在指定之路徑上具有 <see cref="F:System.IO.FileAccess.Write" /> 存取權的非共用 <see cref="T:System.IO.FileStream" /> 物件。</returns>
      <param name="path">要被開啟來寫入的檔案。</param>
      <exception cref="T:System.UnauthorizedAccessException">呼叫端沒有所要求的使用權限。-或-<paramref name="path" /> 指定為唯讀檔案或目錄。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含空白字元，或包含一個或多個無效的字元 (如 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 所定義)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到在 <paramref name="path" /> 中指定的檔案。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 的格式無效。</exception>
    </member>
    <member name="M:System.IO.File.SetAttributes(System.String,System.IO.FileAttributes)">
      <summary>[安全性關鍵] 在指定路徑上設定檔案的指定 <see cref="T:System.IO.FileAttributes" />。</summary>
      <param name="path">檔案的路徑。</param>
      <param name="fileAttributes">列舉值的位元組合。</param>
    </member>
    <member name="T:System.IO.FileAccess">
      <summary>定義檔案的讀取、寫入，或讀/寫存取權限的常數。</summary>
    </member>
    <member name="F:System.IO.FileAccess.Read">
      <summary>檔案的讀取權限。資料可以從檔案讀取。與 Write 結合以取得讀/寫權。</summary>
    </member>
    <member name="F:System.IO.FileAccess.ReadWrite">
      <summary>讀取和寫入檔案的存取權限。資料可以寫入檔案和從檔案讀取。</summary>
    </member>
    <member name="F:System.IO.FileAccess.Write">
      <summary>寫入檔案的存取權限。資料可以寫入檔案。與 Read 結合以取得讀/寫權。</summary>
    </member>
    <member name="T:System.IO.FileAttributes">
      <summary>提供檔案和目錄的屬性 (Attribute)。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Archive">
      <summary>檔案的保存 (Archive) 狀態。應用程式使用此屬性標記檔案來進行備份或移除。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Compressed">
      <summary>檔案是壓縮過的。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Device">
      <summary>保留供將來使用。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Directory">
      <summary>檔案是一個目錄。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Encrypted">
      <summary>檔案或目錄是加密過的。對檔案而言，這表示檔案中的所有資料都被加密。對於目錄而言，這表示加密 (Encryption) 是新建檔案和目錄的預設值。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Hidden">
      <summary>檔案是隱藏的，因此不會包括在一般目錄的清單內。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Normal">
      <summary>檔案是正常的，並且沒有其他屬性設定。此屬性只有在單獨使用時是有效的。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.NotContentIndexed">
      <summary>檔案不會由作業系統的內容索引服務進行索引。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Offline">
      <summary>檔案是離線的。檔案資料不是直接可供使用的。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.ReadOnly">
      <summary>檔案是唯讀的。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.ReparsePoint">
      <summary>檔案包含重新剖析的位置，它是與檔案或目錄有關聯的使用者定義的區塊。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.SparseFile">
      <summary>檔案是疏鬆檔案。疏鬆檔案基本上為其資料幾乎為零值的大型檔案。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.System">
      <summary>檔案是系統檔案。檔案為作業系統的一部分，或為作業系統所專用。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Temporary">
      <summary>檔案是暫時的。檔案系統嘗試將所有資料保留於記憶體以備快速存取，而非將資料清除回存於大量儲存裝置。當不再需要時，暫存檔應該由應用程式刪除。</summary>
    </member>
    <member name="T:System.IO.FileInfo">
      <summary>提供建立、複製、刪除、移動和開啟檔案的執行個體 (Instance) 方法，並協助 <see cref="T:System.IO.FileStream" /> 物件的建立。無法繼承此類別。</summary>
    </member>
    <member name="M:System.IO.FileInfo.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.IO.FileInfo" /> 類別的新執行個體，以做為檔案路徑的包裝函式。</summary>
      <param name="fileName">新檔案的完整限定名稱，或者相對的檔名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 為 null。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">檔案名稱是空的，只含有泛空白字元 (White Space)，或者含有無效的字元。</exception>
      <exception cref="T:System.UnauthorizedAccessException">存取 <paramref name="fileName" /> 遭拒。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="fileName" /> 在字串的中間包含一個冒號 (:)。</exception>
    </member>
    <member name="M:System.IO.FileInfo.AppendText">
      <summary>建立將文字附加在 <see cref="T:System.IO.FileInfo" /> 的這個執行個體所表示之檔案的 <see cref="T:System.IO.StreamWriter" />。</summary>
      <returns>新的 StreamWriter。</returns>
    </member>
    <member name="M:System.IO.FileInfo.CopyTo(System.String)">
      <summary>複製現有的檔案到新的檔案，不允許覆寫現有的檔案。</summary>
      <returns>有完整路徑的新檔案。</returns>
      <param name="destFileName">要複製到的新檔案名稱。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destFileName" /> 是空的，只含有泛空白字元，或者含有無效的字元。</exception>
      <exception cref="T:System.IO.IOException">發生錯誤，或者目的檔案已經存在。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destFileName" /> 為 null。</exception>
      <exception cref="T:System.UnauthorizedAccessException">傳入目錄路徑，或者檔案正要移至不同的磁碟。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="destFileName" /> 中指定的目錄不存在。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destFileName" /> 在字串的中間包含一個冒號 (:)。</exception>
    </member>
    <member name="M:System.IO.FileInfo.CopyTo(System.String,System.Boolean)">
      <summary>複製現有的檔案到新檔案，允許覆寫現有的檔案。</summary>
      <returns>新檔案，或現有檔案的覆寫 (如果 <paramref name="overwrite" /> 為 true)。如果檔案存在，而且 <paramref name="overwrite" /> 是 false，則會擲回 <see cref="T:System.IO.IOException" />。</returns>
      <param name="destFileName">要複製到的新檔案名稱。</param>
      <param name="overwrite">true 以允許覆寫現有的檔案；否則為 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destFileName" /> 是空的，只含有泛空白字元，或者含有無效的字元。</exception>
      <exception cref="T:System.IO.IOException">發生錯誤，或者目的檔案已經存在，而且 <paramref name="overwrite" /> 為 false。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destFileName" /> 為 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="destFileName" /> 中指定的目錄不存在。</exception>
      <exception cref="T:System.UnauthorizedAccessException">傳入目錄路徑，或者檔案正要移至不同的磁碟。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destFileName" /> 在字串的中間包含一個冒號 (:)。</exception>
    </member>
    <member name="M:System.IO.FileInfo.Create">
      <summary>建立檔案。</summary>
      <returns>新檔案。</returns>
    </member>
    <member name="M:System.IO.FileInfo.CreateText">
      <summary>建立寫入新文字檔的 <see cref="T:System.IO.StreamWriter" />。</summary>
      <returns>新的 StreamWriter。</returns>
      <exception cref="T:System.UnauthorizedAccessException">檔案名稱是個目錄。</exception>
      <exception cref="T:System.IO.IOException">磁碟是唯讀的。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
    </member>
    <member name="M:System.IO.FileInfo.Delete">
      <summary>永遠地刪除檔案</summary>
      <exception cref="T:System.IO.IOException">目標檔案是開啟的，或者記憶體映射的電腦執行的是 Microsoft Windows NT。-或-此檔案具有開啟控制代碼，而且作業系統是 Windows XP 或先前的版本。此開啟控制代碼可能是列舉目錄和檔案所產生。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">路徑是個目錄。</exception>
    </member>
    <member name="P:System.IO.FileInfo.Directory">
      <summary>取得父代 (Parent) 目錄的執行個體。</summary>
      <returns>
        <see cref="T:System.IO.DirectoryInfo" /> 物件，表示此檔案的父目錄。</returns>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位在未對應的磁碟上。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
    </member>
    <member name="P:System.IO.FileInfo.DirectoryName">
      <summary>取得表示目錄完整路徑的字串。</summary>
      <returns>字串，表示目錄的完整路徑。</returns>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentNullException">為目錄名稱傳入 null。</exception>
    </member>
    <member name="P:System.IO.FileInfo.Exists">
      <summary>取得值，指出檔案是否存在。</summary>
      <returns>如果檔案存在，則為 true；如果檔案不存在或者檔案是目錄，則為 false。</returns>
    </member>
    <member name="P:System.IO.FileInfo.Length">
      <summary>取得目前檔案的大小，以位元組為單位。</summary>
      <returns>目前檔案的大小，以位元組為單位。</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh" /> 不能更新檔案或目錄的狀態。</exception>
      <exception cref="T:System.IO.FileNotFoundException">檔案不存在。-或-呼叫目錄的 Length 屬性。</exception>
    </member>
    <member name="M:System.IO.FileInfo.MoveTo(System.String)">
      <summary>移動指定的檔案至新的位置，提供指定新檔名的選項。</summary>
      <param name="destFileName">要將檔案移至的路徑，可以指定不同的檔名。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如目的檔案已經存在，或者目的裝置未就緒。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destFileName" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="destFileName" /> 是空的，只含有泛空白字元，或者含有無效的字元。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="destFileName" /> 是唯讀的或者是目錄。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位在未對應的磁碟上。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destFileName" /> 在字串的中間包含一個冒號 (:)。</exception>
    </member>
    <member name="P:System.IO.FileInfo.Name">
      <summary>取得檔案的名稱。</summary>
      <returns>檔案的名稱。</returns>
    </member>
    <member name="M:System.IO.FileInfo.Open(System.IO.FileMode)">
      <summary>使用指定模式來開啟檔案。</summary>
      <returns>以指定模式開啟的檔案，其使用讀取/寫入存取且為不共用。</returns>
      <param name="mode">
        <see cref="T:System.IO.FileMode" /> 常數，指定要在其中開啟檔案的模式 (例如，Open 或 Append)。</param>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
      <exception cref="T:System.UnauthorizedAccessException">檔案是唯讀的或者是目錄。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位在未對應的磁碟上。</exception>
      <exception cref="T:System.IO.IOException">檔案已經開啟。</exception>
    </member>
    <member name="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
      <summary>使用讀取、寫入或讀取/寫入存取，並以指定模式來開啟檔案。</summary>
      <returns>
        <see cref="T:System.IO.FileStream" /> 物件，開啟於指定模式和存取中，且為不共用。</returns>
      <param name="mode">
        <see cref="T:System.IO.FileMode" /> 常數，指定要在其中開啟檔案的模式 (例如，Open 或 Append)。</param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 常數，指定是否以 Read、Write 或 ReadWrite 檔案存取權來開啟檔案。</param>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是空的，或者只含有泛空白字元。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
      <exception cref="T:System.ArgumentNullException">一個或多個引數為 null。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> 是唯讀的或者是目錄。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位在未對應的磁碟上。</exception>
      <exception cref="T:System.IO.IOException">檔案已經開啟。</exception>
    </member>
    <member name="M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>使用讀取、寫入或讀取/寫入存取和指定的共用選項，將檔案開啟於指定模式中。</summary>
      <returns>
        <see cref="T:System.IO.FileStream" /> 物件，以指定的模式、存取和共用選項開啟。</returns>
      <param name="mode">
        <see cref="T:System.IO.FileMode" /> 常數，指定要在其中開啟檔案的模式 (例如，Open 或 Append)。</param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 常數，指定是否以 Read、Write 或 ReadWrite 檔案存取權來開啟檔案。</param>
      <param name="share">
        <see cref="T:System.IO.FileShare" /> 常數，指定其他 FileStream 物件對此檔案的存取類型。</param>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是空的，或者只含有泛空白字元。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
      <exception cref="T:System.ArgumentNullException">一個或多個引數為 null。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> 是唯讀的或者是目錄。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位在未對應的磁碟上。</exception>
      <exception cref="T:System.IO.IOException">檔案已經開啟。</exception>
    </member>
    <member name="M:System.IO.FileInfo.OpenRead">
      <summary>建立唯讀的 <see cref="T:System.IO.FileStream" />。</summary>
      <returns>唯讀的新 <see cref="T:System.IO.FileStream" /> 物件。</returns>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> 是唯讀的或者是目錄。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位在未對應的磁碟上。</exception>
      <exception cref="T:System.IO.IOException">檔案已經開啟。</exception>
    </member>
    <member name="M:System.IO.FileInfo.OpenText">
      <summary>以 UTF8 編碼建立 <see cref="T:System.IO.StreamReader" /> 來讀取現有的文字檔。</summary>
      <returns>具有 StreamReader 編碼方式的新 StreamReader。</returns>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> 是唯讀的或者是目錄。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位在未對應的磁碟上。</exception>
    </member>
    <member name="M:System.IO.FileInfo.OpenWrite">
      <summary>建立唯寫的 <see cref="T:System.IO.FileStream" />。</summary>
      <returns>唯寫且不共用的新 <see cref="T:System.IO.FileStream" /> 物件。</returns>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> 是唯讀的或者是目錄。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位在未對應的磁碟上。</exception>
    </member>
    <member name="M:System.IO.FileInfo.ToString">
      <summary>將路徑當做字串傳回。</summary>
      <returns>表示路徑的字串。</returns>
    </member>
    <member name="T:System.IO.FileLoadException">
      <summary>找到 Managed 組件但是無法載入時，所擲回的例外狀況。</summary>
    </member>
    <member name="P:System.IO.FileLoadException.Data">
      <summary>取得由索引鍵/值組所組成的集合，提供關於此例外狀況的額外使用者定義資訊。</summary>
      <returns>實作 <see cref="T:System.Collections.IDictionary" /> 介面的物件，含有由使用者定義之索引鍵/值組所組成的集合。預設值為空集合。</returns>
    </member>
    <member name="P:System.IO.FileLoadException.Message">
      <summary>取得造成此例外狀況的錯誤訊息和檔案名稱。</summary>
      <returns>字串，包含造成此例外狀況的錯誤訊息和檔案名稱。</returns>
    </member>
    <member name="M:System.IO.FileLoadException.ToString">
      <summary>傳回目前例外狀況的完整限定名稱、可能的錯誤訊息、內部例外的名稱和堆疊追蹤。</summary>
      <returns>字串，包含此例外狀況的完整限定名稱、可能的錯誤訊息、內部例外的名稱和堆疊追蹤 (視使用哪個 <see cref="T:System.IO.FileLoadException" /> 建構函式而定)。</returns>
    </member>
    <member name="T:System.IO.FileMode">
      <summary>指定作業系統應該如何開啟檔案。</summary>
    </member>
    <member name="F:System.IO.FileMode.Append">
      <summary>在檔案存在時開啟它並搜尋至檔案末端，或建立新檔案。<see cref="F:System.IO.FileMode.Append" /> 只能與 <see cref="F:System.IO.FileAccess.Write" /> 一起使用。嘗試搜尋到檔案結尾前的位置將會擲回 <see cref="T:System.IO.IOException" />，而且任何讀取嘗試都會失敗並擲回 <see cref="T:System.NotSupportedException" />。</summary>
    </member>
    <member name="F:System.IO.FileMode.Create">
      <summary>指定作業系統應該建立新檔案。如果檔案已經存在，將覆寫此檔案。<see cref="F:System.IO.FileMode.Create" /> 等於要求檔案不存在時使用 <see cref="F:System.IO.FileMode.CreateNew" />，否則使用 <see cref="F:System.IO.FileMode.Truncate" />。</summary>
    </member>
    <member name="F:System.IO.FileMode.CreateNew">
      <summary>指定作業系統應該建立新檔案。</summary>
    </member>
    <member name="F:System.IO.FileMode.Open">
      <summary>指定作業系統應該開啟現有的檔案。能否順利開啟檔案，取決於 <see cref="T:System.IO.FileAccess" /> 指定的值。如果檔案不存在，會擲回 <see cref="T:System.IO.FileNotFoundException" />。</summary>
    </member>
    <member name="F:System.IO.FileMode.OpenOrCreate">
      <summary>指定作業系統，如果檔案存在應該開啟檔案，否則，應該建立新的檔案。</summary>
    </member>
    <member name="F:System.IO.FileMode.Truncate">
      <summary>指定作業系統應該開啟現有的檔案。一旦開啟，應該截斷檔案使其大小為零個位元組。 </summary>
    </member>
    <member name="T:System.IO.FileNotFoundException">
      <summary>嘗試存取不存在的檔案失敗時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor">
      <summary>使用將其訊息字串設定為系統提供的訊息來初始化 <see cref="T:System.IO.FileNotFoundException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String)">
      <summary>使用設為 <paramref name="message" /> 的訊息字串來初始化 <see cref="T:System.IO.FileNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤的描述。<paramref name="message" /> 的內容必須能讓人了解。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.IO.FileNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤的描述。<paramref name="message" /> 的內容必須能讓人了解。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，即會在處理內部例外狀況的 catch 區塊中發生目前的例外狀況。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String)">
      <summary>使用其訊息字串設定為 <paramref name="message" />、指定找不到的檔案名稱和其 HRESULT 設定為 COR_E_FILENOTFOUND，初始化 <see cref="T:System.IO.FileNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤的描述。<paramref name="message" /> 的內容必須能讓人了解。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
      <param name="fileName">檔案的完整名稱，其具有無效的影像。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.IO.FileNotFoundException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="fileName">檔案的完整名稱，其具有無效的影像。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，即會在處理內部例外狀況的 catch 區塊中發生目前的例外狀況。</param>
    </member>
    <member name="P:System.IO.FileNotFoundException.FileName">
      <summary>取得找不到的檔案名稱。</summary>
      <returns>檔案名稱，或 null (如果沒有傳遞檔案名稱給這個執行個體的建構函式)。</returns>
    </member>
    <member name="P:System.IO.FileNotFoundException.Message"></member>
    <member name="M:System.IO.FileNotFoundException.ToString">
      <summary>傳回此例外狀況的完整限定名稱、可能的錯誤訊息、內部例外的名稱和堆疊追蹤。</summary>
      <returns>字串，包含此例外狀況的完整限定名稱、可能的錯誤訊息、內部例外的名稱和堆疊追蹤。</returns>
    </member>
    <member name="T:System.IO.FileShare">
      <summary>包含常數，用來控制其他 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件對於相同檔案可以用的存取方式。</summary>
    </member>
    <member name="F:System.IO.FileShare.Delete">
      <summary>允許後續刪除檔案。</summary>
    </member>
    <member name="F:System.IO.FileShare.Inheritable">
      <summary>使檔案控制代碼 (File Handle) 可由子處理序 (Process) 來繼承。</summary>
    </member>
    <member name="F:System.IO.FileShare.None">
      <summary>拒絕共用目前檔案。任何 (由此處理序或其他處理序) 開啟檔案的要求將會失敗，直到關閉檔案。</summary>
    </member>
    <member name="F:System.IO.FileShare.Read">
      <summary>允許後序開啟檔案進行讀取。如果未指定此旗標，任何 (由此處理序或其他處理序) 開啟檔案進行讀取的要求將會失敗，直到關閉檔案。</summary>
    </member>
    <member name="F:System.IO.FileShare.ReadWrite">
      <summary>允許後序開啟檔案進行讀取或寫入。如果未指定此旗標，任何要開啟檔案以進行讀取或寫入的要求 (由此處理序或其他處理序) 將會失敗，直到關閉檔案。</summary>
    </member>
    <member name="F:System.IO.FileShare.Write">
      <summary>允許後序開啟檔案進行寫入。如果未指定此旗標，任何 (由此處理序或其他處理序) 開啟檔案進行寫入的要求將會失敗，直到關閉檔案。 </summary>
    </member>
    <member name="T:System.IO.FileStream">
      <summary>公開檔案 <see cref="T:System.IO.Stream" />，同時支援同步及非同步的 (Asynchronous) 讀取和寫入作業。</summary>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
      <summary>使用指定的路徑和建立模式來初始化 <see cref="T:System.IO.FileStream" /> 類別的新執行個體。</summary>
      <param name="path">目前 FileStream 物件將會封裝之檔案的相對或絕對路徑。</param>
      <param name="mode">
        <see cref="T:System.IO.FileMode" /> 常數，判斷如何開啟或建立檔案。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")、只包含空白字元，或包含一或多個無效的字元。-或-<paramref name="path" /> 是指非檔案裝置，例如 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 是指非檔案裝置，例如非 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案，例如，當 <paramref name="mode" /> 為 FileMode.Truncate 或 FileMode.Open，而且 <paramref name="path" /> 指定的檔案不存在的時候。檔案必須已在這些模式中存在。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如指定 FileMode.CreateNew，而且 <paramref name="path" /> 指定的檔案已經存在。-或-已關閉資料流。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位在未對應的磁碟上。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含無效的值。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>使用指定路徑、建立模式和讀取/寫入使用權限，來初始化 <see cref="T:System.IO.FileStream" /> 類別的新執行個體。</summary>
      <param name="path">目前 FileStream 物件將會封裝之檔案的相對或絕對路徑。</param>
      <param name="mode">
        <see cref="T:System.IO.FileMode" /> 常數，判斷如何開啟或建立檔案。</param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 常數，決定 FileStream 物件存取檔案的方式。這將取得 FileStream 物件的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 屬性。如果 <paramref name="path" /> 指定了磁碟檔案，則 <see cref="P:System.IO.FileStream.CanSeek" /> 為 true。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")、只包含空白字元，或包含一或多個無效的字元。-或-<paramref name="path" /> 是指非檔案裝置，例如 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 是指非檔案裝置，例如非 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")、只包含空白字元，或包含一或多個無效的字元。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案，例如，當 <paramref name="mode" /> 為 FileMode.Truncate 或 FileMode.Open，而且 <paramref name="path" /> 指定的檔案不存在的時候。檔案必須已在這些模式中存在。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如指定 FileMode.CreateNew，而且 <paramref name="path" /> 指定的檔案已經存在。-或-已關閉資料流。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位在未對應的磁碟上。</exception>
      <exception cref="T:System.UnauthorizedAccessException">指定之 <paramref name="path" /> 的作業系統不允許所要求的 <paramref name="access" />，例如，當 <paramref name="access" /> 為 Write 或 ReadWrite，且檔案或目錄設定為唯讀存取時。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含無效的值。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>使用指定路徑、建立模式、讀取/寫入使用權限和共用使用權限，來初始化 <see cref="T:System.IO.FileStream" /> 類別的新執行個體。</summary>
      <param name="path">目前 FileStream 物件將會封裝之檔案的相對或絕對路徑。</param>
      <param name="mode">
        <see cref="T:System.IO.FileMode" /> 常數，判斷如何開啟或建立檔案。</param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 常數，決定 FileStream 物件存取檔案的方式。這將取得 FileStream 物件的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 屬性。如果 <paramref name="path" /> 指定了磁碟檔案，則 <see cref="P:System.IO.FileStream.CanSeek" /> 為 true。</param>
      <param name="share">
        <see cref="T:System.IO.FileShare" /> 常數，判斷處理序將如何共用檔案。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")、只包含空白字元，或包含一或多個無效的字元。-或-<paramref name="path" /> 是指非檔案裝置，例如 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 是指非檔案裝置，例如非 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")、只包含空白字元，或包含一或多個無效的字元。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案，例如，當 <paramref name="mode" /> 為 FileMode.Truncate 或 FileMode.Open，而且 <paramref name="path" /> 指定的檔案不存在的時候。檔案必須已在這些模式中存在。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如指定 FileMode.CreateNew，而且 <paramref name="path" /> 指定的檔案已經存在。-或-系統執行的是 Windows 98 或 Windows 98 Second Edition，而且 <paramref name="share" /> 設定為 FileShare.Delete。-或-已關閉資料流。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位在未對應的磁碟上。</exception>
      <exception cref="T:System.UnauthorizedAccessException">指定之 <paramref name="path" /> 的作業系統不允許所要求的 <paramref name="access" />，例如，當 <paramref name="access" /> 為 Write 或 ReadWrite，且檔案或目錄設定為唯讀存取時。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含無效的值。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
      <summary>使用指定路徑、建立模式、讀取/寫入與共用使用權限、緩衝區大小，來初始化 <see cref="T:System.IO.FileStream" /> 類別的新執行個體。</summary>
      <param name="path">目前 FileStream 物件將會封裝之檔案的相對或絕對路徑。</param>
      <param name="mode">
        <see cref="T:System.IO.FileMode" /> 常數，判斷如何開啟或建立檔案。</param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 常數，決定 FileStream 物件存取檔案的方式。這將取得 FileStream 物件的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 屬性。如果 <paramref name="path" /> 指定了磁碟檔案，則 <see cref="P:System.IO.FileStream.CanSeek" /> 為 true。</param>
      <param name="share">
        <see cref="T:System.IO.FileShare" /> 常數，判斷處理序將如何共用檔案。</param>
      <param name="bufferSize">大於零的 <see cref="T:System.Int32" /> 正值，指出緩衝區大小。如果是一到八之間的 <paramref name="bufferSize" /> 值，實際的緩衝區大小會設定為八個位元組。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")、只包含空白字元，或包含一或多個無效的字元。-或-<paramref name="path" /> 是指非檔案裝置，例如 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 是指非檔案裝置，例如非 NTFS 環境中的 "con:"、"com1:"、"lpt1:" 等。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")、只包含空白字元，或包含一或多個無效的字元。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 為負值或零。-或-<paramref name="mode" />、<paramref name="access" /> 或 <paramref name="share" /> 包含無效值。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案，例如，當 <paramref name="mode" /> 為 FileMode.Truncate 或 FileMode.Open，而且 <paramref name="path" /> 指定的檔案不存在的時候。檔案必須已在這些模式中存在。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如指定 FileMode.CreateNew，而且 <paramref name="path" /> 指定的檔案已經存在。-或-系統執行的是 Windows 98 或 Windows 98 Second Edition，而且 <paramref name="share" /> 設定為 FileShare.Delete。-或-已關閉資料流。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位在未對應的磁碟上。</exception>
      <exception cref="T:System.UnauthorizedAccessException">指定之 <paramref name="path" /> 的作業系統不允許所要求的 <paramref name="access" />，例如，當 <paramref name="access" /> 為 Write 或 ReadWrite，且檔案或目錄設定為唯讀存取時。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
    </member>
    <member name="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>開始非同步的讀取。</summary>
      <returns>參考非同步讀取的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="array">要讀取資料的緩衝區。</param>
      <param name="offset">在 <paramref name="array" /> 中要開始讀取的位元組位移。</param>
      <param name="numBytes">要讀取的最大位元組數。</param>
      <param name="userCallback">在非同步讀取作業完成時所呼叫的方法。</param>
      <param name="stateObject">使用者所提供的物件，其可以從其他要求中區分出此特定非同步讀取的要求。</param>
      <exception cref="T:System.ArgumentException">陣列長度減去 <paramref name="offset" /> 小於 <paramref name="numBytes" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="numBytes" /> 為負值。</exception>
      <exception cref="T:System.IO.IOException">嘗試超過檔案結尾進行非同步讀取。</exception>
    </member>
    <member name="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>開始非同步的寫入。</summary>
      <returns>參考非同步寫入的 <see cref="T:System.IAsyncResult" />。</returns>
      <param name="array">包含要寫入至目前資料流之資料的緩衝區。</param>
      <param name="offset">
        <paramref name="array" /> 中以零為起始的位元組位移，用來開始將位元組複製到目前的資料流。</param>
      <param name="numBytes">寫入的最大位元組數。</param>
      <param name="userCallback">在非同步寫入作業完成時所呼叫的方法。</param>
      <param name="stateObject">使用者所提供的物件，其可以從其他要求中區分出此特定非同步寫入的要求。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 長度減 <paramref name="offset" /> 小於 <paramref name="numBytes" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="numBytes" /> 為負值。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="P:System.IO.FileStream.CanRead">
      <summary>取得值，指出目前資料流是否支援讀取。</summary>
      <returns>如果資料流支援讀取，則為 true；如果資料流關閉或以唯寫存取開啟，則為 false。</returns>
    </member>
    <member name="P:System.IO.FileStream.CanSeek">
      <summary>取得值，指出目前資料流是否支援搜尋。</summary>
      <returns>如果資料流支援搜尋，則為 true；如果資料流關閉或如果 FileStream 是從作業系統控制代碼 (例如管道或主控台的輸出) 建構，則為 false。</returns>
    </member>
    <member name="P:System.IO.FileStream.CanWrite">
      <summary>取得值，指出目前資料流是否支援寫入。</summary>
      <returns>如果資料流支援寫入，則為 true；如果資料流關閉或以唯讀存取開啟，則為 false。</returns>
    </member>
    <member name="M:System.IO.FileStream.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.FileStream" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 以釋放 Managed 和 Unmanaged 資源；false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
      <summary>等候暫止的非同步讀取來完成。</summary>
      <returns>自資料流讀取的位元組數，在 0 和您所要求的位元組數目之間。在資料流末端資料流只傳回 0，否則，他們應該停止直到至少有 1 位元組可用。</returns>
      <param name="asyncResult">要等候的暫止非同步要求的參考。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">這個 <see cref="T:System.IAsyncResult" /> 物件不是藉由呼叫這個類別上的 <see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 來建立的。</exception>
      <exception cref="T:System.InvalidOperationException">多次呼叫 <see cref="M:System.IO.FileStream.EndRead(System.IAsyncResult)" />。</exception>
      <exception cref="T:System.IO.IOException">此資料流已關閉或是發生內部錯誤。</exception>
    </member>
    <member name="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
      <summary>結束非同步寫入，並封鎖直到 I/O 作業完成。</summary>
      <param name="asyncResult">暫止的非同步 I/O 要求。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">這個 <see cref="T:System.IAsyncResult" /> 物件不是藉由呼叫這個類別上的 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 來建立的。</exception>
      <exception cref="T:System.InvalidOperationException">多次呼叫 <see cref="M:System.IO.FileStream.EndWrite(System.IAsyncResult)" />。</exception>
      <exception cref="T:System.IO.IOException">此資料流已關閉或是發生內部錯誤。</exception>
    </member>
    <member name="M:System.IO.FileStream.Finalize">
      <summary>確認釋出資源，並在記憶體回收行程再利用 FileStream 時執行其他清除作業。</summary>
    </member>
    <member name="M:System.IO.FileStream.Flush">
      <summary>清除此資料流的所有緩衝區，並讓所有緩衝資料全部寫入檔案系統。</summary>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.FileStream.Flush(System.Boolean)">
      <summary>清除這個資料流的緩衝區並讓任何緩衝的資料寫入檔案，並清除所有中介檔案緩衝區。</summary>
      <param name="flushToDisk">true 以清除所有中介檔案緩衝區；否則為 false。</param>
    </member>
    <member name="P:System.IO.FileStream.Length">
      <summary>取得資料流的位元組長度。</summary>
      <returns>表示資料流位元組長度的長數值。</returns>
      <exception cref="T:System.NotSupportedException">此資料流的 <see cref="P:System.IO.FileStream.CanSeek" /> 為 false。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如檔案已經關閉。</exception>
    </member>
    <member name="P:System.IO.FileStream.Name">
      <summary>取得傳遞給建構函式的檔案資料流名稱。</summary>
      <returns>字串，為檔案資料流名稱。</returns>
    </member>
    <member name="P:System.IO.FileStream.Position">
      <summary>取得或設定這個資料流的目前位置。</summary>
      <returns>此資料流的目前位置。</returns>
      <exception cref="T:System.NotSupportedException">資料流不支援搜尋。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。-或-位置設定為非常大的值，超出 Windows 98 (含) 以前版本中資料流的末端。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">嘗試將位置設定為負值。</exception>
      <exception cref="T:System.IO.EndOfStreamException">嘗試搜尋超出資料流長度 (不支援此)。</exception>
    </member>
    <member name="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>從資料流讀取位元組區塊，並將資料寫入指定緩衝區。</summary>
      <returns>緩衝區所讀取的總位元組數。如果目前無法提供那麼多的位元組數目，則此數目可能小於所要求的位元組數；如果已經到達資料流末端，則為零。</returns>
      <param name="array">當此方法傳回時，包含其值介於 <paramref name="offset" /> 和 (<paramref name="offset" /> + <paramref name="count" /> - 1<paramref name=")" /> 之間的指定位元組陣列，這些值會由從目前來源讀取的位元組取代。</param>
      <param name="offset">要在其中放置讀取位元組之 <paramref name="array" /> 的位元組位移。</param>
      <param name="count">要讀取的最大位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援讀取。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 描述 <paramref name="array" /> 中的無效範圍。</exception>
      <exception cref="T:System.ObjectDisposedException">在資料流關閉後，會呼叫方法。</exception>
    </member>
    <member name="M:System.IO.FileStream.ReadByte">
      <summary>從檔案讀取一個位元組，並將讀取位置前移一個位元組。</summary>
      <returns>轉換為 <see cref="T:System.Int32" /> 的位元組，如果已經到達資料流的末端，則為 -1。</returns>
      <exception cref="T:System.NotSupportedException">目前資料流不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的資料流已經關閉。</exception>
    </member>
    <member name="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>設定此資料流的目前位置為指定的數值。</summary>
      <returns>資料流中的新位置。</returns>
      <param name="offset">相對於 <paramref name="origin" /> 的搜尋起點。</param>
      <param name="origin">使用 <see cref="T:System.IO.SeekOrigin" /> 型別的值，指定開頭、結尾或目前位置做為 <paramref name="origin" /> 的參考點。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援搜尋，例如 FileStream 若是從管道或主控台輸出所建構。</exception>
      <exception cref="T:System.ArgumentException">嘗試在資料流的開頭之前搜尋。</exception>
      <exception cref="T:System.ObjectDisposedException">在資料流關閉後，會呼叫方法。</exception>
    </member>
    <member name="M:System.IO.FileStream.SetLength(System.Int64)">
      <summary>設定此資料流長度為指定的數值。</summary>
      <param name="value">資料流的新長度。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入和搜尋。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">嘗試將 <paramref name="value" /> 參數設定為小於 0。</exception>
    </member>
    <member name="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>使用緩衝區的資料，將位元組區塊寫入此資料流。</summary>
      <param name="array">包含要寫入至資料流之資料的緩衝區。</param>
      <param name="offset">
        <paramref name="array" /> 中以零為起始的位元組位移，用來開始將位元組複製到目前的資料流。</param>
      <param name="count">寫入目前資料流的位元組數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 描述 <paramref name="array" /> 中的無效範圍。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。-或-其他執行緒可能導致作業系統之檔案控制代碼的位置發生非預期的變更。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.NotSupportedException">目前的資料流執行個體不支援寫入。</exception>
    </member>
    <member name="M:System.IO.FileStream.WriteByte(System.Byte)">
      <summary>寫入一個位元組到檔案資料流中的目前位置。</summary>
      <param name="value">要寫入至資料流的位元組。</param>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。</exception>
    </member>
    <member name="T:System.IO.FileSystemInfo">
      <summary>為 <see cref="T:System.IO.FileInfo" /> 和 <see cref="T:System.IO.DirectoryInfo" /> 物件提供基底類別。</summary>
    </member>
    <member name="M:System.IO.FileSystemInfo.#ctor">
      <summary>[安全性關鍵] 初始化 <see cref="T:System.IO.FileSystemInfo" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.IO.FileSystemInfo.Attributes">
      <summary>取得或設定目前 <see cref="T:System.IO.FileSystemInfo" /> 的 <see cref="T:System.IO.FileAttributes" />。</summary>
      <returns>目前 <see cref="T:System.IO.FileSystemInfo" /> 的 <see cref="T:System.IO.FileAttributes" />。</returns>
      <exception cref="T:System.IO.FileNotFoundException">指定的檔案不存在。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位在未對應的磁碟上。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentException">呼叫端嘗試設定無效的檔案屬性 (Attribute)。</exception>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh" /> 無法初始化資料。</exception>
    </member>
    <member name="P:System.IO.FileSystemInfo.CreationTime">
      <summary>取得或設定目前 <see cref="T:System.IO.FileSystemInfo" /> 物件的建立時間。</summary>
      <returns>目前的 <see cref="T:System.IO.FileSystemInfo" /> 物件的建立日期和時間。</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh" /> 無法初始化資料。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位在未對應的磁碟上。</exception>
      <exception cref="T:System.PlatformNotSupportedException">目前的作業系統不是 Microsoft Windows NT (含) 以後版本。</exception>
    </member>
    <member name="M:System.IO.FileSystemInfo.Delete">
      <summary>刪除檔案或目錄。</summary>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效，例如位在未對應的磁碟上。-或-此檔案或目錄具有開啟控制代碼，而且作業系統是 Windows XP 或先前的版本。此開啟控制代碼可能是列舉目錄和檔案所產生。</exception>
    </member>
    <member name="P:System.IO.FileSystemInfo.Exists">
      <summary>取得值，指出檔案或目錄是否存在。</summary>
      <returns>如果檔案或目錄存在，則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.IO.FileSystemInfo.Extension">
      <summary>取得字串，表示檔案的副檔名部分。</summary>
      <returns>字串，含有 <see cref="T:System.IO.FileSystemInfo" /> 副檔名。</returns>
    </member>
    <member name="P:System.IO.FileSystemInfo.FullName">
      <summary>取得目錄或檔案的完整路徑。</summary>
      <returns>含有完整路徑的字串。</returns>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
    </member>
    <member name="F:System.IO.FileSystemInfo.FullPath">
      <summary>表示目錄或檔案的完整路徑。</summary>
    </member>
    <member name="P:System.IO.FileSystemInfo.LastAccessTime">
      <summary>取得或設定上次存取目前檔案或目錄的時間。</summary>
      <returns>上次存取目前檔案或目錄的時間。</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh" /> 無法初始化資料。</exception>
      <exception cref="T:System.PlatformNotSupportedException">目前的作業系統不是 Microsoft Windows NT (含) 以後版本。</exception>
    </member>
    <member name="P:System.IO.FileSystemInfo.LastWriteTime">
      <summary>取得或設定上次寫入目前檔案或目錄的時間。</summary>
      <returns>上次寫入目前檔案的時間。</returns>
      <exception cref="T:System.IO.IOException">
        <see cref="M:System.IO.FileSystemInfo.Refresh" /> 無法初始化資料。</exception>
      <exception cref="T:System.PlatformNotSupportedException">目前的作業系統不是 Microsoft Windows NT (含) 以後版本。</exception>
    </member>
    <member name="P:System.IO.FileSystemInfo.Name">
      <summary>對於檔案，取得檔案的名稱。對於目錄，如果有階層架構，則是取得階層架構中最後 1 個目錄的名稱。否則，Name 屬性會取得目錄的名稱。</summary>
      <returns>字串，可以是父代 (Parent) 目錄的名稱、階層架構中最後 1 個目錄的名稱，或者包括副檔名在內的檔案名稱。</returns>
    </member>
    <member name="F:System.IO.FileSystemInfo.OriginalPath">
      <summary>使用者指定的相對或絕對的原始路徑。</summary>
    </member>
    <member name="M:System.IO.FileSystemInfo.Refresh">
      <summary>重新整理物件的狀態。</summary>
      <exception cref="T:System.IO.IOException">裝置 (例如，磁碟機) 未就緒。 </exception>
    </member>
    <member name="T:System.IO.IOException">
      <summary>當 I/O 錯誤發生時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.IO.IOException.#ctor">
      <summary>使用其訊息字串設定為空字串 ("")、其 HRESULT 設定為 COR_E_IO 和其內部例外設定為 null 參考來初始化 <see cref="T:System.IO.IOException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String)">
      <summary>使用其訊息字串設定為 <paramref name="message" />、其 HRESULT 設定為 COR_E_IO 和其內部例外設定為 null，初始化 <see cref="T:System.IO.IOException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。<paramref name="message" /> 的內容必須能讓人了解。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.IO.IOException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，即會在處理內部例外狀況的 catch 區塊中發生目前的例外狀況。</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Int32)">
      <summary>使用其訊息字串設定為 <paramref name="message" /> 和其使用者定義的 HRESULT，初始化 <see cref="T:System.IO.IOException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。<paramref name="message" /> 的內容必須能讓人了解。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
      <param name="hresult">識別已發生錯誤的整數。</param>
    </member>
    <member name="T:System.IO.MemoryStream">
      <summary>建立支援的存放區為記憶體的資料流。</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor">
      <summary>使用初始化為零的可擴展容量來初始化 <see cref="T:System.IO.MemoryStream" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[])">
      <summary>根據指定的位元組陣列來初始化 <see cref="T:System.IO.MemoryStream" /> 類別之不可調整大小的執行個體。</summary>
      <param name="buffer">用於建立目前資料流之不帶正負號位元組的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Boolean)">
      <summary>根據具有指定的 <see cref="P:System.IO.MemoryStream.CanWrite" /> 屬性設定之位元組陣列，來初始化 <see cref="T:System.IO.MemoryStream" /> 類別之新的不可調整大小的執行個體。</summary>
      <param name="buffer">用於建立此資料流之不帶正負號位元組的陣列。</param>
      <param name="writable">
        <see cref="P:System.IO.MemoryStream.CanWrite" /> 屬性的設定值，判斷資料流是否支援寫入。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>根據位元組陣列的指定區域 (索引)，來初始化 <see cref="T:System.IO.MemoryStream" /> 類別之新的不可調整大小的執行個體。</summary>
      <param name="buffer">用於建立此資料流之不帶正負號位元組的陣列。</param>
      <param name="index">
        <paramref name="buffer" /> 中資料流開始處的索引。</param>
      <param name="count">資料流的長度，以位元組為單位。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>根據位元組陣列的指定區域 (且該區域使用依指定所設定的 <see cref="P:System.IO.MemoryStream.CanWrite" /> 屬性)，來初始化 <see cref="T:System.IO.MemoryStream" /> 類別之新的不可調整大小的執行個體。</summary>
      <param name="buffer">用於建立此資料流之不帶正負號位元組的陣列。</param>
      <param name="index">
        <paramref name="buffer" /> 中資料流開始處的索引。</param>
      <param name="count">資料流的長度，以位元組為單位。</param>
      <param name="writable">
        <see cref="P:System.IO.MemoryStream.CanWrite" /> 屬性的設定值，判斷資料流是否支援寫入。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負數。</exception>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>根據指定的位元組陣列區域 (且該區域使用依指定所設定的 <see cref="P:System.IO.MemoryStream.CanWrite" /> 屬性和依指定所設定的呼叫 <see cref="M:System.IO.MemoryStream.GetBuffer" /> 的能力)，來初始化 <see cref="T:System.IO.MemoryStream" /> 類別的新執行個體。</summary>
      <param name="buffer">用於建立此資料流之不帶正負號位元組的陣列。</param>
      <param name="index">
        <paramref name="buffer" /> 中資料流開始處的索引。</param>
      <param name="count">資料流的長度，以位元組為單位。</param>
      <param name="writable">
        <see cref="P:System.IO.MemoryStream.CanWrite" /> 屬性的設定值，判斷資料流是否支援寫入。</param>
      <param name="publiclyVisible">true 以啟用 <see cref="M:System.IO.MemoryStream.GetBuffer" />，它會傳回建立資料流的未簽署位元組陣列為 true；否則為 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.#ctor(System.Int32)">
      <summary>使用初始化為指定的可擴展容量來初始化 <see cref="T:System.IO.MemoryStream" /> 類別的新執行個體。</summary>
      <param name="capacity">內部陣列的初始大小，以位元組為單位。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 為負值。</exception>
    </member>
    <member name="P:System.IO.MemoryStream.CanRead">
      <summary>取得值，指出目前資料流是否支援讀取。</summary>
      <returns>如果資料流已開啟，則為 true。</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanSeek">
      <summary>取得值，指出目前資料流是否支援搜尋。</summary>
      <returns>如果資料流已開啟，則為 true。</returns>
    </member>
    <member name="P:System.IO.MemoryStream.CanWrite">
      <summary>取得值，指出目前資料流是否支援寫入。</summary>
      <returns>如果資料流支援寫入則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.IO.MemoryStream.Capacity">
      <summary>取得或設定配置給此資料流的位元組數目。</summary>
      <returns>資料流緩衝區可使用部分的長度。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">設定的容量為負數或小於資料流目前的長度。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的資料流已經關閉。</exception>
      <exception cref="T:System.NotSupportedException">在無法修改容量的資料流上叫用 set。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.MemoryStream" /> 類別使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 以釋放 Managed 和 Unmanaged 資源；false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.IO.MemoryStream.Flush">
      <summary>覆寫 <see cref="M:System.IO.Stream.Flush" />，以致於不執行任何動作。</summary>
    </member>
    <member name="M:System.IO.MemoryStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>以非同步方式清除這個資料流的所有緩衝區，並監視取消要求。</summary>
      <returns>表示非同步清除作業的工作。</returns>
      <param name="cancellationToken">要監視取消要求的語彙基元。</param>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.GetBuffer">
      <summary>傳回用於建立此資料流之不帶正負號位元組的陣列。</summary>
      <returns>位元組陣列 (建立此資料流的來源) 或基礎陣列 (如果沒有在目前執行個體的建構期間將位元組陣列提供給 <see cref="T:System.IO.MemoryStream" /> 建構函式)。</returns>
      <exception cref="T:System.UnauthorizedAccessException">MemoryStream 執行個體沒有使用公開可見的緩衝區來建立。</exception>
    </member>
    <member name="P:System.IO.MemoryStream.Length">
      <summary>取得資料流的長度，以位元組為單位。</summary>
      <returns>資料流的長度，以位元組為單位。</returns>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="P:System.IO.MemoryStream.Position">
      <summary>取得或設定資料流中目前的位置。</summary>
      <returns>在資料流的目前位置。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">位置設為負數值或大於 <see cref="F:System.Int32.MaxValue" /> 的值。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>從目前的資料流讀取位元組區塊，並將資料寫入緩衝區。</summary>
      <returns>寫入至緩衝區的總位元組數。如果目前無法提供那麼多的位元組數目，則此數目可能小於所要求的位元組數目，或如果在讀取任何資料之前已經到達資料流末端，則為零。</returns>
      <param name="buffer">當此方法返回時，會包含具有介於 <paramref name="offset" /> 和 (<paramref name="offset" /> + <paramref name="count" /> - 1) 之值的指定位元組陣列，該值是由讀取自目前資料流的字元所取代。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零起始的位元組位移，從此位置開始儲存目前資料流的資料。</param>
      <param name="count">要讀取的最大位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">緩衝區的長度減去 <paramref name="offset" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的資料流執行個體已關閉。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>以非同步的方式自目前資料流讀取一連串的位元組、依讀取的位元組數將資料流中的位置往前移，並監視取消要求。</summary>
      <returns>表示非同步讀取作業的工作。<paramref name="TResult" /> 參數的值包含讀入緩衝區的位元組總數。如果目前可用的位元組數目小於所要求的數目，則結果值可能小於所要求的位元組數目，或如果已到達資料流尾端，則它可以為 0 (零)。</returns>
      <param name="buffer">寫入資料的緩衝區。</param>
      <param name="offset">
        <paramref name="buffer" /> 中要開始從資料流寫入資料的位元組位移。</param>
      <param name="count">要讀取的最大位元組數。</param>
      <param name="cancellationToken">要監視取消要求的語彙基元。預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區的長度。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
      <exception cref="T:System.InvalidOperationException">資料流目前正由先前的讀取作業使用。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.ReadByte">
      <summary>從目前的資料流讀取位元組。</summary>
      <returns>轉型為 <see cref="T:System.Int32" /> 的位元組；如果已經到達資料流的末端，則為 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的資料流執行個體已關閉。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>將目前資料流中的位置設定為指定的數值。</summary>
      <returns>資料流中的新位置，是組合初始的參考點和位移計算出來的。</returns>
      <param name="offset">資料流中的新位置。這是相對於 <paramref name="loc" /> 參數，並且可能是正數或負數。</param>
      <param name="loc">
        <see cref="T:System.IO.SeekOrigin" /> 型別的值，做為搜尋參考點。</param>
      <exception cref="T:System.IO.IOException">在資料流開頭之前嘗試搜尋。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">有無效的 SeekOrigin。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的資料流執行個體已關閉。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.SetLength(System.Int64)">
      <summary>將目前資料流的長度設定為指定的數值。</summary>
      <param name="value">要設定長度的數值。</param>
      <exception cref="T:System.NotSupportedException">目前的資料流不是可調整大小的，並且 <paramref name="value" /> 大於目前的容量。-或-目前的資料流不支援寫入。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 為負，或大於 <see cref="T:System.IO.MemoryStream" /> 的最大長度，最大長度是 (<see cref="F:System.Int32.MaxValue" /> - 原點)，原點是資料流開始的基礎緩衝區索引。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.ToArray">
      <summary>不論 <see cref="P:System.IO.MemoryStream.Position" /> 屬性為何，將資料流內容寫入位元組陣列。</summary>
      <returns>新的位元組陣列。</returns>
    </member>
    <member name="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>使用從緩衝區讀取的資料，將位元組區塊寫入目前的資料流。</summary>
      <param name="buffer">寫入資料的來源緩衝區。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零為起始的位元組位移，用來開始將位元組複製到目前的資料流。</param>
      <param name="count">寫入的最大位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。如需詳細資訊，請參閱<see cref="P:System.IO.Stream.CanWrite" />。-或-和 <paramref name="count" /> 位元組相比，目前的位置更接近資料流末端，並且容量無法修改。</exception>
      <exception cref="T:System.ArgumentException">緩衝區的長度減去 <paramref name="offset" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負數。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的資料流執行個體已關閉。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>以非同步方式寫入一連串位元組至目前的資料流，依寫入的位元組數將此資料流中目前的位置往前移，並監視取消要求。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="buffer">寫入資料的來源緩衝區。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零為起始的位元組位移，用來開始將位元組複製到資料流。</param>
      <param name="count">寫入的最大位元組數。</param>
      <param name="cancellationToken">要監視取消要求的語彙基元。預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區的長度。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
      <exception cref="T:System.InvalidOperationException">資料流目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteByte(System.Byte)">
      <summary>寫入位元組至資料流目前位置。</summary>
      <param name="value">要寫入的位元組。</param>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。如需詳細資訊，請參閱<see cref="P:System.IO.Stream.CanWrite" />。-或-目前的位置在資料流結尾，並且無法修改容量。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的資料流已經關閉。</exception>
    </member>
    <member name="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
      <summary>將此記憶體資料流的整個內容寫入另一個資料流。</summary>
      <param name="stream">要寫入此記憶體資料流的資料流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的資料流或目標資料流已經關閉。</exception>
    </member>
    <member name="T:System.IO.Path">
      <summary>執行含有檔案或目錄路徑資訊的 <see cref="T:System.String" /> 執行個體 (Instance) 上的作業。這些作業是以跨平台方式來執行的。</summary>
    </member>
    <member name="F:System.IO.Path.AltDirectorySeparatorChar">
      <summary>提供平台特定替代字元，用來在反映階層式檔案系統組織的路徑字串中分隔目錄層級。</summary>
    </member>
    <member name="M:System.IO.Path.ChangeExtension(System.String,System.String)">
      <summary>變更路徑字串的副檔名。</summary>
      <returns>含有修改過的路徑資訊的字串。在 Windows 型桌面平台上，如果 <paramref name="path" /> 為 null 或空字串 ("")，則路徑資訊則不經修改而傳回。如果 <paramref name="extension" /> 為 null，傳回的字串則含有已移除其副檔名的指定路徑。如果 <paramref name="path" /> 沒有副檔名，並且 <paramref name="extension" /> 不為 null，則傳回的路徑字串包含附加至 <paramref name="path" /> 結尾的 <paramref name="extension" />。</returns>
      <param name="path">要修改的路徑資訊。路徑不可以含有定義於 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 的任何一個字元。</param>
      <param name="extension">新副檔名 (有前置句號)。指定 null 以從 <paramref name="path" /> 移除現有副檔名。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 含有定義於 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中的一或多個無效字元。</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String,System.String)">
      <summary>結合兩個路徑字串。</summary>
      <returns>含有組合路徑的字串。如果指定的其中一個路徑是長度為零的字串，此方法會傳回其他路徑。如果 <paramref name="path2" /> 含有絕對路徑，此方法將傳回 <paramref name="path2" />。</returns>
      <param name="path1">第 1 個路徑。</param>
      <param name="path2">第 2 個路徑。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path1" /> 或 <paramref name="path2" /> 含有 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定義的一個或多個無效字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path1" /> 或 <paramref name="path2" /> 為 null。</exception>
    </member>
    <member name="M:System.IO.Path.Combine(System.String[])">
      <summary>將一個字串陣列合併為單一路徑。</summary>
      <returns>包含組合路徑的字串。</returns>
      <param name="paths">路徑中各部分的陣列。</param>
      <exception cref="T:System.ArgumentException">陣列中的一個字串包含在 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定義的一個或多個無效字元。</exception>
      <exception cref="T:System.ArgumentNullException">陣列中的一個字串為 null。 </exception>
    </member>
    <member name="F:System.IO.Path.DirectorySeparatorChar">
      <summary>提供平台特定字元，用來在反映階層式檔案系統組織的路徑字串中分隔目錄層級。</summary>
    </member>
    <member name="M:System.IO.Path.GetDirectoryName(System.String)">
      <summary>傳回指定路徑字串的目錄資訊。</summary>
      <returns>含有 <paramref name="path" /> 目錄資訊的字串，或 null (如果 <paramref name="path" /> 表示根目錄或 null)。如果 <paramref name="path" /> 不包含目錄資訊，則傳回 <see cref="F:System.String.Empty" />。</returns>
      <param name="path">檔案或目錄的路徑。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 參數包含無效字元、是空的，或是僅包含泛空白字元 (White Space)。</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> 參數大於系統定義的最大長度。</exception>
    </member>
    <member name="M:System.IO.Path.GetExtension(System.String)">
      <summary>傳回指定路徑字串的副檔名。</summary>
      <returns>
        <see cref="T:System.String" />，含有指定路徑的副檔名 (包括 ".")、null 或 <see cref="F:System.String.Empty" />。如果 <paramref name="path" /> 是 null，則 GetExtension 會傳回 null。如果 <paramref name="path" /> 沒有副檔名資訊，則 GetExtension 會傳回 Empty.。</returns>
      <param name="path">要自其中取得副檔名的路徑字串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 含有定義於 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中的一或多個無效字元。</exception>
    </member>
    <member name="M:System.IO.Path.GetFileName(System.String)">
      <summary>傳回指定路徑字串的檔案名稱和副檔名。</summary>
      <returns>
        <see cref="T:System.String" />，由 <paramref name="path" /> 中最後目錄字元之後的字元所組成。如果 <paramref name="path" /> 的最後字元是目錄或磁碟區分隔符號字元，此方法會傳回 <see cref="F:System.String.Empty" />。如果 <paramref name="path" /> 為 null，則此方法會傳回 null。</returns>
      <param name="path">要從其中取得檔案名稱和副檔名的路徑字串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 含有定義於 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中的一或多個無效字元。</exception>
    </member>
    <member name="M:System.IO.Path.GetFileNameWithoutExtension(System.String)">
      <summary>傳回沒有副檔名的指定路徑字串的檔案名稱。</summary>
      <returns>
        <see cref="T:System.String" />，含有 <see cref="M:System.IO.Path.GetFileName(System.String)" /> 傳回的字串，但不包含最後的句號 (.) 以及其後的所有字元。</returns>
      <param name="path">檔案的路徑。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 含有定義於 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中的一或多個無效字元。</exception>
    </member>
    <member name="M:System.IO.Path.GetFullPath(System.String)">
      <summary>傳回指定路徑字串的絕對路徑。</summary>
      <returns>含有 <paramref name="path" /> 的完整限定位置的字串，例如 "rootdir\MyFile.txt"。</returns>
      <param name="path">要為其取得絕對路徑資訊的檔案或目錄。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是長度為零的字串、只包含泛空白字元，或包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中定義的一或多個無效字元。-或-系統可能不會擷取絕對路徑。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
    </member>
    <member name="M:System.IO.Path.GetInvalidFileNameChars">
      <summary>取得陣列，該陣列包含檔案名稱中不允許的字元。</summary>
      <returns>陣列，該陣列包含檔案名稱中不允許的字元。</returns>
    </member>
    <member name="M:System.IO.Path.GetInvalidPathChars">
      <summary>取得陣列，該陣列包含路徑名稱中不允許的字元。</summary>
      <returns>陣列，該陣列包含路徑名稱中不允許的字元。</returns>
    </member>
    <member name="M:System.IO.Path.GetPathRoot(System.String)">
      <summary>取得指定路徑的根目錄資訊。</summary>
      <returns>字串，含有 <paramref name="path" /> 的根目錄 (例如 "rootdir")，或 null (如果 <paramref name="path" /> 為 null)，或空字串 (如果 <paramref name="path" /> 不包含根目錄資訊)。</returns>
      <param name="path">要從其中取得根目錄資訊的路徑。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 含有定義於 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中的一或多個無效字元。-或-<see cref="F:System.String.Empty" /> 被傳遞給 <paramref name="path" />。</exception>
    </member>
    <member name="M:System.IO.Path.GetRandomFileName">
      <summary>傳回隨機資料夾名稱或檔案名稱。</summary>
      <returns>隨機資料夾名稱或檔案名稱。</returns>
    </member>
    <member name="M:System.IO.Path.GetTempFileName">
      <summary>在磁碟上建立具命之零位元組的唯一暫存檔案，然後傳回該檔案的完整路徑。</summary>
      <returns>
        <see cref="T:System.String" />，包含暫存檔案的完整路徑。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如沒有可用的唯一暫存檔案名稱。-或-這個方法無法建立暫存檔案。</exception>
    </member>
    <member name="M:System.IO.Path.GetTempPath">
      <summary>傳回目前系統的暫時資料夾的路徑。</summary>
      <returns>
        <see cref="T:System.String" />，含有暫時目錄的路徑資訊。</returns>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
    </member>
    <member name="M:System.IO.Path.HasExtension(System.String)">
      <summary>判斷路徑是否包括副檔名。</summary>
      <returns>如果路徑中接在最後目錄分隔符號 (\\ 或 /) 或磁碟區分隔符號 (:) 之後的字元含有後面跟著一個或多個字元的句號 (.)，則為 true；否則為 false。</returns>
      <param name="path">要在其中搜尋副檔名的路徑。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 含有定義於 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中的一或多個無效字元。</exception>
    </member>
    <member name="M:System.IO.Path.IsPathRooted(System.String)">
      <summary>取得一個值，指示指定的路徑字串是否包含根。</summary>
      <returns>如果 <paramref name="path" /> 包含根目錄，則為 true；否則為 false。</returns>
      <param name="path">要測試的路徑。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 含有定義於 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 中的一或多個無效字元。</exception>
    </member>
    <member name="F:System.IO.Path.PathSeparator">
      <summary>平台特定分隔符號字元，用來分隔環境變數中的路徑字串。</summary>
    </member>
    <member name="F:System.IO.Path.VolumeSeparatorChar">
      <summary>提供平台特定磁碟區分隔符號字元。</summary>
    </member>
    <member name="T:System.IO.PathTooLongException">
      <summary>在路徑名稱或檔案名稱的長度大於系統定義的最大長度時，會擲回此例外狀況。</summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor">
      <summary>初始化 <see cref="T:System.IO.PathTooLongException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String)">
      <summary>使用其訊息字串設定為 <paramref name="message" /> 和其 HRESULT 設定為 COR_E_PATHTOOLONG來初始化 <see cref="T:System.IO.PathTooLongException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。<paramref name="message" /> 的內容必須能讓人了解。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.IO.PathTooLongException" /> 類別的新執行個體。</summary>
      <param name="message">描述錯誤的 <see cref="T:System.String" />。<paramref name="message" /> 的內容必須能讓人了解。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，即會在處理內部例外狀況的 catch 區塊中發生目前的例外狀況。</param>
    </member>
    <member name="T:System.IO.SeekOrigin">
      <summary>提供欄位，此欄位表示用於搜尋的資料流參考點。</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.Begin">
      <summary>指定資料流的開端。</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.Current">
      <summary>指定資料流中的目前位置。</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.End">
      <summary>指定資料流的末端。</summary>
    </member>
    <member name="T:System.IO.Stream">
      <summary>提供位元組順序的一般觀點。</summary>
    </member>
    <member name="M:System.IO.Stream.#ctor">
      <summary>初始化 <see cref="T:System.IO.Stream" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>開始非同步的讀取作業。</summary>
      <returns>
        <see cref="T:System.IAsyncResult" />，表示可能還在擱置中的非同步讀取。</returns>
      <param name="buffer">讀取資料的緩衝區。</param>
      <param name="offset">開始寫入自資料流讀取資料的 <paramref name="buffer" /> 位元組位移 (Offset)。</param>
      <param name="count">要讀取的最大位元組數。</param>
      <param name="callback">選擇性的非同步回呼，在讀取完成時呼叫。</param>
      <param name="state">使用者所提供的物件，其可以從其他要求中區分出此特定非同步讀取的要求。</param>
      <exception cref="T:System.IO.IOException">嘗試超越資料流結尾的非同步讀取，或發生磁碟錯誤。</exception>
      <exception cref="T:System.ArgumentException">一或多個引數無效。</exception>
      <exception cref="T:System.ObjectDisposedException">在資料流關閉後，會呼叫方法。</exception>
      <exception cref="T:System.NotSupportedException">目前的 Stream 實作不支援讀取作業。</exception>
    </member>
    <member name="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>開始非同步的寫入作業。</summary>
      <returns>IAsyncResult，表示可能還在擱置中的非同步寫入。</returns>
      <param name="buffer">寫入資料的來源緩衝區。</param>
      <param name="offset">
        <paramref name="buffer" /> 中要開始寫入之處的位元組位移 (Offset)。</param>
      <param name="count">寫入的最大位元組數。</param>
      <param name="callback">選擇性的非同步回呼，在寫入完成時呼叫。</param>
      <param name="state">使用者所提供的物件，其可以從其他要求中區分出此特定非同步寫入的要求。</param>
      <exception cref="T:System.IO.IOException">嘗試超出資料流結尾的非同步寫入，或發生磁碟錯誤。</exception>
      <exception cref="T:System.ArgumentException">一或多個引數無效。</exception>
      <exception cref="T:System.ObjectDisposedException">在資料流關閉後，會呼叫方法。</exception>
      <exception cref="T:System.NotSupportedException">目前的 Stream 實作不支援寫入作業。</exception>
    </member>
    <member name="P:System.IO.Stream.CanRead">
      <summary>在衍生類別中覆寫時，取得值，指出目前的資料流是否支援讀取。</summary>
      <returns>如果資料流支援讀取，則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.IO.Stream.CanSeek">
      <summary>在衍生類別中覆寫時，取得值，指出目前的資料流是否支援搜尋。</summary>
      <returns>如果資料流支援搜尋，則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.IO.Stream.CanTimeout">
      <summary>取得值，該值判斷目前的資料流是否可以逾時。</summary>
      <returns>值，判斷目前的資料流是否可以逾時。</returns>
    </member>
    <member name="P:System.IO.Stream.CanWrite">
      <summary>在衍生類別中覆寫時，取得值，指出目前的資料流是否支援寫入。</summary>
      <returns>如果資料流支援寫入則為 true；否則為 false。</returns>
    </member>
    <member name="M:System.IO.Stream.Close">
      <summary>關閉目前資料流和釋放與目前資料流相關聯的任何資源 (例如通訊端和檔案控制代碼)。</summary>
    </member>
    <member name="M:System.IO.Stream.CopyTo(System.IO.Stream)">
      <summary>從目前資料流讀取所有位元組，並將其寫入目的資料流中。</summary>
      <param name="destination">資料流，其將包含目前資料流的內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">目前資料流不支援讀取。-或-<paramref name="destination" /> 不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException">目前資料流或 <paramref name="destination" /> 已經在呼叫 <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> 方法之前關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
      <summary>使用指定緩衝區大小，從目前資料流讀取所有位元組，並將其寫入目的資料流中。</summary>
      <param name="destination">資料流，其將包含目前資料流的內容。</param>
      <param name="bufferSize">緩衝區的大小。此值必須大於零。預設大小為 4096。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 為負值或零。</exception>
      <exception cref="T:System.NotSupportedException">目前資料流不支援讀取。-或-<paramref name="destination" /> 不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException">目前資料流或 <paramref name="destination" /> 已經在呼叫 <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> 方法之前關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
      <summary>以非同步方式從目前資料流讀取位元組，並將其寫入至另一個資料流。</summary>
      <returns>表示非同步複製作業的工作。</returns>
      <param name="destination">目前資料流的內容要複製至的資料流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的資料流或目的地資料流已處置。</exception>
      <exception cref="T:System.NotSupportedException">目前的資料流不支援讀取，或目的地資料流不支援寫入。</exception>
    </member>
    <member name="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
      <summary>使用指定的緩衝區大小，以非同步方式從目前資料流讀取位元組，並將其寫入至另一個資料流。</summary>
      <returns>表示非同步複製作業的工作。</returns>
      <param name="destination">目前資料流的內容要複製至的資料流。</param>
      <param name="bufferSize">緩衝區的大小 (位元組)。此值必須大於零。預設大小為 4096。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> 為負值或零。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的資料流或目的地資料流已處置。</exception>
      <exception cref="T:System.NotSupportedException">目前的資料流不支援讀取，或目的地資料流不支援寫入。</exception>
    </member>
    <member name="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>使用指定的緩衝區大小和取消語彙基元，以非同步方式從目前資料流讀取位元組，並將其寫入至另一個資料流。</summary>
      <returns>表示非同步複製作業的工作。</returns>
      <param name="destination">目前資料流的內容要複製至的資料流。</param>
      <param name="bufferSize">緩衝區的大小 (位元組)。此值必須大於零。預設大小為 4096。</param>
      <param name="cancellationToken">要監視取消要求的語彙基元。預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> 為負值或零。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的資料流或目的地資料流已處置。</exception>
      <exception cref="T:System.NotSupportedException">目前的資料流不支援讀取，或目的地資料流不支援寫入。</exception>
    </member>
    <member name="M:System.IO.Stream.Dispose">
      <summary>釋放 <see cref="T:System.IO.Stream" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.IO.Stream.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.Stream" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 以釋放 Managed 和 Unmanaged 資源；false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.IO.Stream.EndRead(System.IAsyncResult)">
      <summary>等候暫止的非同步讀取來完成。</summary>
      <returns>從資料流讀取的位元組數，位於零 (0) 和您所要求的位元組數之間。資料流只在資料流結尾傳回零 (0)，否則，它們應該封鎖，直到至少有一個位元組可用為止。</returns>
      <param name="asyncResult">要完成的擱置中的非同步要求的參考。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 不是源自目前資料流上的 <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.IO.IOException">此資料流已關閉或是發生內部錯誤。</exception>
    </member>
    <member name="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
      <summary>結束非同步的寫入作業。</summary>
      <param name="asyncResult">未處理的非同步 I/O 要求的參考。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 不是源自目前資料流上的 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.IO.IOException">此資料流已關閉或是發生內部錯誤。</exception>
    </member>
    <member name="M:System.IO.Stream.Flush">
      <summary>當在衍生類別中覆寫時，會清除此資料流的所有緩衝區，並造成任何緩衝資料都寫入基礎裝置。</summary>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.Stream.FlushAsync">
      <summary>以非同步方式清除這個資料流的所有緩衝區，並造成任何緩衝資料都寫入基礎裝置。</summary>
      <returns>表示非同步清除作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
    </member>
    <member name="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
      <summary>以非同步方式清除這個資料流的所有緩衝區、造成任何緩衝資料都寫入基礎裝置，並監視取消要求。</summary>
      <returns>表示非同步清除作業的工作。</returns>
      <param name="cancellationToken">要監視取消要求的語彙基元。預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
    </member>
    <member name="P:System.IO.Stream.Length">
      <summary>在衍生類別中覆寫時，取得資料流的長度 (以位元組為單位)。</summary>
      <returns>表示資料流位元組長度的長數值。</returns>
      <exception cref="T:System.NotSupportedException">衍生自 Stream 的類別不支援搜尋。</exception>
      <exception cref="T:System.ObjectDisposedException">在資料流關閉後，會呼叫方法。</exception>
    </member>
    <member name="F:System.IO.Stream.Null">
      <summary>沒有備份存放區的 Stream。</summary>
    </member>
    <member name="P:System.IO.Stream.Position">
      <summary>在衍生類別中覆寫時，取得或設定在目前資料流的位置。</summary>
      <returns>在資料流的目前位置。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援搜尋。</exception>
      <exception cref="T:System.ObjectDisposedException">在資料流關閉後，會呼叫方法。</exception>
    </member>
    <member name="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>當在衍生類別中覆寫時，自目前資料流讀取一連串的位元組，並依所讀取的位元組數目進階資料流中的位置。</summary>
      <returns>緩衝區所讀取的總位元組數。如果目前無法取得足夠的位元組，則此數目可能小於所要求的位元組數，如果已經到達資料流末端，則為零 (0)。</returns>
      <param name="buffer">位元組陣列。當此方法返回時，緩衝區會包含具有介於 <paramref name="offset" /> 和 (<paramref name="offset" /> + <paramref name="count" />) 值的指定位元組陣列，由從目前來源讀取的位元組所取代。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零為起始的位元組位移，用來開始儲存讀取自目前資料流的資料。</param>
      <param name="count">自目前資料流讀取的最大位元組數。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區的長度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException">在資料流關閉後，會呼叫方法。</exception>
    </member>
    <member name="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>以非同步方式從目前的資料流讀取一連串位元組，並依讀取的位元組數將資料流中的位置往前移。</summary>
      <returns>表示非同步讀取作業的工作。<paramref name="TResult" /> 參數的值包含讀入緩衝區的位元組總數。如果目前可用的位元組數目小於所要求的數目，則結果值可能小於所要求的位元組數目，或如果已到達資料流尾端，則它可以為 0 (零)。</returns>
      <param name="buffer">寫入資料的緩衝區。</param>
      <param name="offset">
        <paramref name="buffer" /> 中要開始從資料流寫入資料的位元組位移。</param>
      <param name="count">要讀取的最大位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區的長度。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
      <exception cref="T:System.InvalidOperationException">資料流目前正由先前的讀取作業使用。</exception>
    </member>
    <member name="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>以非同步的方式自目前資料流讀取一連串的位元組、依讀取的位元組數將資料流中的位置往前移，並監視取消要求。</summary>
      <returns>表示非同步讀取作業的工作。<paramref name="TResult" /> 參數的值包含讀入緩衝區的位元組總數。如果目前可用的位元組數目小於所要求的數目，則結果值可能小於所要求的位元組數目，或如果已到達資料流尾端，則它可以為 0 (零)。</returns>
      <param name="buffer">寫入資料的緩衝區。</param>
      <param name="offset">
        <paramref name="buffer" /> 中要開始從資料流寫入資料的位元組位移。</param>
      <param name="count">要讀取的最大位元組數。</param>
      <param name="cancellationToken">要監視取消要求的語彙基元。預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區的長度。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
      <exception cref="T:System.InvalidOperationException">資料流目前正由先前的讀取作業使用。</exception>
    </member>
    <member name="M:System.IO.Stream.ReadByte">
      <summary>從資料流讀取一個位元組，並將資料流的位置推進一個位元組；如果在資料流末端，則傳回 -1。</summary>
      <returns>轉型為 Int32 的不帶正負號位元組，或者，如果在資料流結尾，則為 -1。</returns>
      <exception cref="T:System.NotSupportedException">資料流不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException">在資料流關閉後，會呼叫方法。</exception>
    </member>
    <member name="P:System.IO.Stream.ReadTimeout">
      <summary>取得或設定值 (以毫秒為單位)，該值決定在逾時前資料流將嘗試讀取多長時間。</summary>
      <returns>值 (以毫秒為單位)，該值決定在逾時前資料流將嘗試讀取多長時間。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IO.Stream.ReadTimeout" /> 方法必須擲回 <see cref="T:System.InvalidOperationException" />。</exception>
    </member>
    <member name="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>在衍生類別中覆寫時，設定在目前資料流的位置。</summary>
      <returns>目前資料流的新位置。</returns>
      <param name="offset">相對於 <paramref name="origin" /> 參數的位元組位移。</param>
      <param name="origin">指出用以取得新位置參考點之 <see cref="T:System.IO.SeekOrigin" /> 型別的值。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援搜尋，例如資料流為管道或主控台 (Console) 輸出所建構。</exception>
      <exception cref="T:System.ObjectDisposedException">在資料流關閉後，會呼叫方法。</exception>
    </member>
    <member name="M:System.IO.Stream.SetLength(System.Int64)">
      <summary>在衍生類別中覆寫時，設定目前資料流的長度。</summary>
      <param name="value">目前資料流所需位元組長度。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入和搜尋，例如，如果資料流是從管道或主控台 (Console) 輸出所建構。</exception>
      <exception cref="T:System.ObjectDisposedException">在資料流關閉後，會呼叫方法。</exception>
    </member>
    <member name="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，將一連串的位元組寫入目前的資料流，並且由此資料流中目前的位置前移寫入的位元組數目。</summary>
      <param name="buffer">位元組陣列。此方法從 <paramref name="buffer" /> 複製 <paramref name="count" /> 位元組到目前資料流。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零為起始的位元組位移，用來開始將位元組複製到目前的資料流。</param>
      <param name="count">寫入目前資料流的位元組數目。</param>
    </member>
    <member name="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>以非同步方式將一連串位元組寫入至目前的資料流，並依寫入的位元組數將此資料流中目前的位置往前移。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="buffer">寫入資料的來源緩衝區。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零為起始的位元組位移，用來開始將位元組複製到資料流。</param>
      <param name="count">寫入的最大位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區的長度。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
      <exception cref="T:System.InvalidOperationException">資料流目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>以非同步方式寫入一連串位元組至目前的資料流，依寫入的位元組數將此資料流中目前的位置往前移，並監視取消要求。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="buffer">寫入資料的來源緩衝區。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零為起始的位元組位移，用來開始將位元組複製到資料流。</param>
      <param name="count">寫入的最大位元組數。</param>
      <param name="cancellationToken">要監視取消要求的語彙基元。預設值為 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於緩衝區的長度。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
      <exception cref="T:System.InvalidOperationException">資料流目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.Stream.WriteByte(System.Byte)">
      <summary>寫入一個位元組至資料流的目前位置，並將資料流位置推進一個位元組。</summary>
      <param name="value">寫入資料流的位元組。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入，或資料流已經關閉。</exception>
      <exception cref="T:System.ObjectDisposedException">在資料流關閉後，會呼叫方法。</exception>
    </member>
    <member name="P:System.IO.Stream.WriteTimeout">
      <summary>取得或設定值 (以毫秒為單位)，該值決定在逾時前資料流將嘗試寫入多長時間。</summary>
      <returns>值 (以毫秒為單位)，該值決定在逾時前資料流將嘗試寫入多長時間。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IO.Stream.WriteTimeout" /> 方法必須擲回 <see cref="T:System.InvalidOperationException" />。</exception>
    </member>
    <member name="T:System.IO.StreamReader">
      <summary>實作以特定的編碼方式自位元組資料流讀取字元的 <see cref="T:System.IO.TextReader" />。</summary>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream)">
      <summary>為指定的資料流來初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="stream">要讀取的資料流。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支援讀取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 為 null。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)">
      <summary>使用指定的位元組順序標記偵測選項，針對指定的資料流初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="stream">要讀取的資料流。</param>
      <param name="detectEncodingFromByteOrderMarks">true 以尋找檔案開頭的位元組順序標記；否則為 false 以使用 <see cref="P:System.Text.Encoding.UTF8" /> 編碼。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支援讀取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 為 null。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>使用指定的字元編碼方式，針對指定的資料流初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="stream">要讀取的資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支援讀取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 為 null。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>使用指定的字元編碼方式和位元組順序標記偵測選項，為指定的資料流初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="stream">要讀取的資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="detectEncodingFromByteOrderMarks">true 以尋找檔案開頭的位元組順序標記；否則為 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不支援讀取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 為 null。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>使用指定的字元編碼方式、位元組順序標記偵測選項和緩衝區大小，為指定的資料流初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="stream">要讀取的資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="detectEncodingFromByteOrderMarks">true 以尋找檔案開頭的位元組順序標記；否則為 false。</param>
      <param name="bufferSize">最小緩衝區大小。</param>
      <exception cref="T:System.ArgumentException">資料流不支援讀取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 小於或等於零。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)">
      <summary>使用指定的字元編碼、位元組順序標記偵測選項、緩衝區大小，以及用來指定是否保持資料流開啟的值，為指定的資料流初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="stream">要讀取的資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="detectEncodingFromByteOrderMarks">true 以尋找檔案開頭的位元組順序標記；否則為 false。</param>
      <param name="bufferSize">最小緩衝區大小。</param>
      <param name="leaveOpen">true 以將資料流保持開啟狀態；否則為 false。</param>
      <exception cref="T:System.ArgumentException">資料流不支援讀取。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 小於或等於零。 </exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String)">
      <summary>為指定的檔名初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="path">要讀取的完整檔案路徑。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含檔案名稱、目錄名稱或磁碟標籤的不正確或無效語法。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Boolean)">
      <summary>使用指定的位元組順序標記偵測選項，為指定的檔案名稱初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="path">要讀取的完整檔案路徑。</param>
      <param name="detectEncodingFromByteOrderMarks">true 以尋找檔案開頭的位元組順序標記；否則為 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含檔案名稱、目錄名稱或磁碟標籤的不正確或無效語法。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding)">
      <summary>使用指定的字元編碼，為指定的檔案名稱初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="path">要讀取的完整檔案路徑。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="encoding" /> 為 null。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 包含檔案名稱、目錄名稱或磁碟標籤的不正確或無效語法。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean)">
      <summary>使用指定的字元編碼和位元組順序標記偵測選項，為指定的檔案名稱初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="path">要讀取的完整檔案路徑。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="detectEncodingFromByteOrderMarks">true 以尋找檔案開頭的位元組順序標記；否則為 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="encoding" /> 為 null。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 包含檔案名稱、目錄名稱或磁碟標籤的不正確或無效語法。</exception>
    </member>
    <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
      <summary>使用指定的字元編碼、位元組順序標記偵測選項和緩衝區大小，為指定的檔案名稱初始化 <see cref="T:System.IO.StreamReader" /> 類別的新執行個體。</summary>
      <param name="path">要讀取的完整檔案路徑。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="detectEncodingFromByteOrderMarks">true 以尋找檔案開頭的位元組順序標記；否則為 false。</param>
      <param name="bufferSize">最小緩衝區大小，使用 16 位元字元的數字。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="encoding" /> 為 null。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到檔案。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 包含檔案名稱、目錄名稱或磁碟標籤的不正確或無效語法。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> 小於或等於零。</exception>
    </member>
    <member name="P:System.IO.StreamReader.BaseStream">
      <summary>傳回基礎資料流。</summary>
      <returns>基礎資料流。</returns>
    </member>
    <member name="M:System.IO.StreamReader.Close">
      <summary>關閉 <see cref="T:System.IO.StreamReader" /> 物件和基礎資料流，並釋放任何與讀取器 (Reader) 相關聯的系統資源。</summary>
    </member>
    <member name="P:System.IO.StreamReader.CurrentEncoding">
      <summary>取得目前 <see cref="T:System.IO.StreamReader" /> 物件使用的目前字元編碼方式。</summary>
      <returns>目前讀取器所使用的字元編碼方式。在第一次呼叫 <see cref="T:System.IO.StreamReader" /> 的任何 <see cref="Overload:System.IO.StreamReader.Read" /> 方法之後其值可能不同，因為編碼方式的自動偵測要等到第一次呼叫 <see cref="Overload:System.IO.StreamReader.Read" /> 方法時才動作。</returns>
    </member>
    <member name="M:System.IO.StreamReader.DiscardBufferedData">
      <summary>清除內部緩衝區。</summary>
    </member>
    <member name="M:System.IO.StreamReader.Dispose(System.Boolean)">
      <summary>關閉基礎資料流、釋放 <see cref="T:System.IO.StreamReader" /> 所使用的 Unmanaged 資源，以及選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 以釋放 Managed 和 Unmanaged 資源；false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="P:System.IO.StreamReader.EndOfStream">
      <summary>取得表示現行資料流位置是否在資料流結尾的值。</summary>
      <returns>如果現行資料流位置在資料流的結尾，則為 true；false。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置基礎資料流。</exception>
    </member>
    <member name="F:System.IO.StreamReader.Null">
      <summary>空資料流周圍的 <see cref="T:System.IO.StreamReader" /> 物件。</summary>
    </member>
    <member name="M:System.IO.StreamReader.Peek">
      <summary>傳回下一個可供使用的字元，但不使用它。</summary>
      <returns>整數，表示要讀取的下一個字元，如果沒有更多字元可供使用或資料流不支援搜尋，則為 -1。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read">
      <summary>自輸入資料流讀取下一個字元，並將字元位置前移一個字元。</summary>
      <returns>來自輸入資料流的下一個字元會以 <see cref="T:System.Int32" /> 物件來表示；如果不再有可以使用的字元，則以 -1 表示。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>從目前的資料流讀取最多 <paramref name="count" /> 個字元到 <paramref name="buffer" /> 中，從 <paramref name="index" /> 開始。</summary>
      <returns>已讀取字元數，或為 0 (如果處於資料流末端而無資料讀取)。數目將小於或等於 <paramref name="count" /> 參數，取決於資料流裡是否有資料可供使用。</returns>
      <param name="buffer">當此方法返回時，會包含具有介於 <paramref name="index" /> 和 (<paramref name="index " /> + <paramref name="count" /> - 1) 之值的指定字元陣列，該值是由讀取自目前來源的字元所取代。</param>
      <param name="index">要開始寫入的 <paramref name="buffer" /> 的索引。</param>
      <param name="count">要讀取的最大字元數。</param>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤，例如資料流已經關閉。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式從目前的資料流讀取指定數目上限的字元，並從指定的位置開始將資料寫入緩衝區。</summary>
      <returns>表示非同步讀取作業的工作。<paramref name="TResult" /> 參數的值包含讀入緩衝區的位元組總數。如果目前可用的位元組數目小於所要求的數目，則結果值可能小於所要求的位元組數目，或如果已到達資料流尾端，則它可以為 0 (零)。</returns>
      <param name="buffer">當此方法返回時，會包含具有介於 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之值的指定字元陣列，該值是由讀取自目前來源的字元所取代。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入處的位置。</param>
      <param name="count">要讀取的最大字元數。如果在指定的字元數目寫入緩衝區之前到達資料流結尾，則方法會返回。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的總和大於緩衝區的長度。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
      <exception cref="T:System.InvalidOperationException">讀取器目前正由先前的讀取作業使用。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>從目前的資料流讀取指定數目上限的字元，並從指定的位置開始將資料寫入緩衝區。</summary>
      <returns>已經讀取的字元數目。數目將小於或等於 <paramref name="count" />，取決於是否已經讀取所有輸入字元。</returns>
      <param name="buffer">當這個方法返回時，會包含具有介於 <paramref name="index" /> 和 (<paramref name="index + count - 1" />) 的值之指定字元陣列，這個值是由從目前來源讀取的字元所取代。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入處的位置。</param>
      <param name="count">要讀取的最大字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.StreamReader" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式從目前的資料流讀取指定數目上限的字元，並從指定的位置開始將資料寫入緩衝區。</summary>
      <returns>表示非同步讀取作業的工作。<paramref name="TResult" /> 參數的值包含讀入緩衝區的位元組總數。如果目前可用的位元組數目小於所要求的數目，則結果值可能小於所要求的位元組數目，或如果已到達資料流尾端，則它可以為 0 (零)。</returns>
      <param name="buffer">當此方法返回時，會包含具有介於 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之值的指定字元陣列，該值是由讀取自目前來源的字元所取代。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入處的位置。</param>
      <param name="count">要讀取的最大字元數。如果在指定的字元數目寫入緩衝區之前到達資料流結尾，則方法會返回。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的總和大於緩衝區的長度。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
      <exception cref="T:System.InvalidOperationException">讀取器目前正由先前的讀取作業使用。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadLine">
      <summary>自目前資料流讀取一行字元，並將資料以字串傳回。</summary>
      <returns>輸入資料流的下一行，或 null (如果已到達輸入資料流末端)。</returns>
      <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體來為傳回的字串配置緩衝區。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadLineAsync">
      <summary>以非同步方式自目前資料流讀取一行字元，並將資料以字串傳回。</summary>
      <returns>表示非同步讀取作業的工作。<paramref name="TResult" /> 參數的值包含來自資料流的下一行，或為 null (如果已讀取所有字元)。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">下一行中的字元數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
      <exception cref="T:System.InvalidOperationException">讀取器目前正由先前的讀取作業使用。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEnd">
      <summary>從目前位置到資料流末端來讀取資料流。</summary>
      <returns>資料流從目前位置到末端的其餘字串。如果目前位置位於資料流末端，則傳回空字串 ("")。</returns>
      <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體來為傳回的字串配置緩衝區。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.StreamReader.ReadToEndAsync">
      <summary>以非同步方式讀取從目前位置到資料流結尾的所有字元，並將它們以字串傳回。</summary>
      <returns>表示非同步讀取作業的工作。<paramref name="TResult" /> 參數的值包含一個字串，其具有從目前位置到資料流結尾的字元。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">字元數目大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
      <exception cref="T:System.InvalidOperationException">讀取器目前正由先前的讀取作業使用。</exception>
    </member>
    <member name="T:System.IO.StreamWriter">
      <summary>實作以特定的編碼方式將字元寫入位元組資料流的 <see cref="T:System.IO.TextWriter" />。</summary>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream)">
      <summary>使用 UTF-8 編碼方式和預設的緩衝區大小，針對指定的資料流初始化 <see cref="T:System.IO.StreamWriter" /> 類別的新執行個體。</summary>
      <param name="stream">要寫入的資料流。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可寫入。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 為 null。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>使用預設編碼方式和緩衝區大小，為指定的資料流初始化 <see cref="T:System.IO.StreamWriter" /> 類別的新執行個體。</summary>
      <param name="stream">要寫入的資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可寫入。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
      <summary>使用預設編碼方式和緩衝區大小，為指定的資料流初始化 <see cref="T:System.IO.StreamWriter" /> 類別的新執行個體。</summary>
      <param name="stream">要寫入的資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="bufferSize">緩衝區大小。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可寫入。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
      <summary>使用指定的編碼、緩衝區大小，以及用來指定是否保持資料流開啟的值，為指定的資料流初始化 <see cref="T:System.IO.StreamWriter" /> 類別的新執行個體。</summary>
      <param name="stream">要寫入的資料流。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="bufferSize">緩衝區大小。</param>
      <param name="leaveOpen">true 以將資料流保持開啟狀態；否則為 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 或 <paramref name="encoding" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可寫入。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String)">
      <summary>使用預設編碼方式和緩衝區大小，為指定路徑上的指定檔案初始化 <see cref="T:System.IO.StreamWriter" /> 類別的新執行個體。</summary>
      <param name="path">要寫入的完整檔案路徑。<paramref name="path" /> 可以是檔案名稱。</param>
      <exception cref="T:System.UnauthorizedAccessException">存取遭拒。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")。-或-<paramref name="path" /> 包含系統裝置的名稱 (com1、com2 等等)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含檔案名稱、目錄名稱或磁碟標籤語法的不正確或無效語法。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean)">
      <summary>使用預設編碼方式和緩衝區大小，為指定路徑上的指定檔案初始化 <see cref="T:System.IO.StreamWriter" /> 類別的新執行個體。如果檔案存在，可以將它寫入或附加。如果檔案不存在，此建構函式會建立新的檔案。</summary>
      <param name="path">要寫入的完整檔案路徑。</param>
      <param name="append">true 以附加資料到現有檔案；false 以覆寫現有檔案。如果指定的檔案不存在，則不論此參數的值為何，都會建立新檔案。</param>
      <exception cref="T:System.UnauthorizedAccessException">存取遭拒。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是空的。-或-<paramref name="path" /> 包含系統裝置的名稱 (com1、com2 等等)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含檔案名稱、目錄名稱或磁碟標籤語法的不正確或無效語法。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
      <summary>使用預設編碼方式和緩衝區大小，為指定路徑上的指定檔案初始化 <see cref="T:System.IO.StreamWriter" /> 類別的新執行個體。如果檔案存在，可以將它寫入或附加。如果檔案不存在，此建構函式會建立新的檔案。</summary>
      <param name="path">要寫入的完整檔案路徑。</param>
      <param name="append">true 以附加資料到現有檔案；false 以覆寫現有檔案。如果指定的檔案不存在，則不論此參數的值為何，都會建立新檔案。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <exception cref="T:System.UnauthorizedAccessException">存取遭拒。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是空的。-或-<paramref name="path" /> 包含系統裝置的名稱 (com1、com2 等等)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含檔案名稱、目錄名稱或磁碟標籤語法的不正確或無效語法。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
      <summary>使用預設編碼方式和緩衝區大小，為指定路徑上的指定檔案初始化 <see cref="T:System.IO.StreamWriter" /> 類別的新執行個體。如果檔案存在，可以將它寫入或附加。如果檔案不存在，此建構函式會建立新的檔案。</summary>
      <param name="path">要寫入的完整檔案路徑。</param>
      <param name="append">決定資料是否可附加至檔案。如果檔案存在且 <paramref name="append" /> 是 false，則會覆寫該檔案。如果檔案存在且 <paramref name="append" /> 是 true，則會附加資料至該檔案。否則，會建立新的檔案。</param>
      <param name="encoding">要使用的字元編碼。</param>
      <param name="bufferSize">緩衝區大小。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 為空字串 ("")。-或-<paramref name="path" /> 包含系統裝置的名稱 (com1、com2 等等)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 或 <paramref name="encoding" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 為負值。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="path" /> 包含檔案名稱、目錄名稱或磁碟標籤語法的不正確或無效語法。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有所要求的使用權限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">存取遭拒。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路徑無效 (例如，位於未對應的磁碟上)。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路徑、檔案名稱或兩者都超過系統定義的最大長度。例如：在 Windows 平台上，路徑必須小於 248 字元，而檔案名稱必須小於 260 字元。</exception>
    </member>
    <member name="P:System.IO.StreamWriter.AutoFlush">
      <summary>取得或設定值，指出 <see cref="T:System.IO.StreamWriter" /> 在每次呼叫 <see cref="M:System.IO.StreamWriter.Write(System.Char)" /> 之後，是否要將其緩衝區清除到基礎資料流。</summary>
      <returns>true 以強制 <see cref="T:System.IO.StreamWriter" /> 清除其緩衝區；否則為 false。</returns>
    </member>
    <member name="P:System.IO.StreamWriter.BaseStream">
      <summary>取得以備份存放區作介面的基礎資料流。</summary>
      <returns>此 StreamWriter 正在寫入的資料流。</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Close">
      <summary>關閉目前的 StreamWriter 物件和基礎資料流。</summary>
      <exception cref="T:System.Text.EncoderFallbackException">目前的編碼不支援顯示 Unicode Surrogate 字組的其中一半。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.StreamWriter" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 以釋放 Managed 和 Unmanaged 資源；false 則僅釋放 Unmanaged 資源。</param>
      <exception cref="T:System.Text.EncoderFallbackException">目前的編碼不支援顯示 Unicode Surrogate 字組的其中一半。</exception>
    </member>
    <member name="P:System.IO.StreamWriter.Encoding">
      <summary>取得寫入輸出的 <see cref="T:System.Text.Encoding" />。</summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> (在目前執行個體的建構函式中指定)；如果未指定編碼方式，則為 <see cref="T:System.Text.UTF8Encoding" />。</returns>
    </member>
    <member name="M:System.IO.StreamWriter.Flush">
      <summary>清除目前寫入器 (Writer) 的所有緩衝區，並且造成任何緩衝資料都寫入基礎資料流。</summary>
      <exception cref="T:System.ObjectDisposedException">目前寫入器已關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">目前的編碼不支援顯示 Unicode Surrogate 字組的其中一半。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.FlushAsync">
      <summary>以非同步方式清除此資料流的所有緩衝區，並造成任何緩衝資料都寫入基礎裝置。</summary>
      <returns>表示非同步清除作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
    </member>
    <member name="F:System.IO.StreamWriter.Null">
      <summary>提供 StreamWriter，但不包含可寫入但無法讀取的備份存放區。</summary>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char)">
      <summary>將一個字元寫入資料流。</summary>
      <param name="value">要寫入至文字資料流的字元。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 為 True，或 <see cref="T:System.IO.StreamWriter" /> 緩衝區已滿，且目前的寫入器已經關閉。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 為 True，或 <see cref="T:System.IO.StreamWriter" /> 緩衝區已滿，且因為 <see cref="T:System.IO.StreamWriter" /> 是在資料流緩衝區的結尾，所以該緩衝區的內容無法寫入至基礎的固定大小資料流。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[])">
      <summary>將字元陣列寫入資料流。</summary>
      <param name="buffer">含有要寫入之資料的字元陣列。如果 <paramref name="buffer" /> 是 null，則不會寫入任何資料。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 為 True，或 <see cref="T:System.IO.StreamWriter" /> 緩衝區已滿，且目前的寫入器已經關閉。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 為 True，或 <see cref="T:System.IO.StreamWriter" /> 緩衝區已滿，且因為 <see cref="T:System.IO.StreamWriter" /> 是在資料流緩衝區的結尾，所以該緩衝區的內容無法寫入至基礎的固定大小資料流。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>將字元子陣列寫入資料流。</summary>
      <param name="buffer">含有要寫入之資料的字元陣列。</param>
      <param name="index">要開始寫入的 <paramref name="buffer" /> 的索引。</param>
      <param name="count">自 <paramref name="buffer" /> 讀取的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 為 True，或 <see cref="T:System.IO.StreamWriter" /> 緩衝區已滿，且目前的寫入器已經關閉。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 為 True，或 <see cref="T:System.IO.StreamWriter" /> 緩衝區已滿，且因為 <see cref="T:System.IO.StreamWriter" /> 是在資料流緩衝區的結尾，所以該緩衝區的內容無法寫入至基礎的固定大小資料流。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.Write(System.String)">
      <summary>將字串寫入資料流。</summary>
      <param name="value">要寫入資料流的字串。如果 <paramref name="value" /> 是 null，則不會寫入任何資料。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 為 True，或 <see cref="T:System.IO.StreamWriter" /> 緩衝區已滿，且目前的寫入器已經關閉。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.IO.StreamWriter.AutoFlush" /> 為 True，或 <see cref="T:System.IO.StreamWriter" /> 緩衝區已滿，且因為 <see cref="T:System.IO.StreamWriter" /> 是在資料流緩衝區的結尾，所以該緩衝區的內容無法寫入至基礎的固定大小資料流。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.Char)">
      <summary>以非同步方式將字元寫入至資料流。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="value">要寫入資料流中的字元。</param>
      <exception cref="T:System.ObjectDisposedException">已處置資料流寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">資料流寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式將字元子陣列寫入至資料流。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="buffer">含有要寫入之資料的字元陣列。</param>
      <param name="index">緩衝區中要開始讀取資料的字元位置。</param>
      <param name="count">要寫入的最大字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加上 <paramref name="count" /> 大於緩衝區長度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">資料流寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteAsync(System.String)">
      <summary>以非同步方式將字串寫入至資料流。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="value">要寫入資料流的字串。如果 <paramref name="value" /> 是 null，則不會寫入任何資料。</param>
      <exception cref="T:System.ObjectDisposedException">已處置資料流寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">資料流寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync">
      <summary>以非同步方式將行結束字元寫入至資料流。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置資料流寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">資料流寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.Char)">
      <summary>以非同步方式將後面跟著行結束字元的字元寫入至資料流。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="value">要寫入資料流中的字元。</param>
      <exception cref="T:System.ObjectDisposedException">已處置資料流寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">資料流寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式將後面跟著行結束字元的字元子陣列寫入至資料流。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="buffer">資料寫入來源的字元陣列。</param>
      <param name="index">緩衝區中要開始讀取資料的字元位置。</param>
      <param name="count">要寫入的最大字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加上 <paramref name="count" /> 大於緩衝區長度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">資料流寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.StreamWriter.WriteLineAsync(System.String)">
      <summary>以非同步方式將後面跟著行結束字元的字串寫入至資料流。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="value">要寫入的字串。如果值為 null，僅會寫入行結束字元。</param>
      <exception cref="T:System.ObjectDisposedException">已處置資料流寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">資料流寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="T:System.IO.StringReader">
      <summary>實作讀取字串的 <see cref="T:System.IO.TextReader" />。</summary>
    </member>
    <member name="M:System.IO.StringReader.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.IO.StringReader" /> 類別的新執行個體，此執行個體會從指定的字串讀取。</summary>
      <param name="s">
        <see cref="T:System.IO.StringReader" /> 應該初始化的目的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 參數為 null。</exception>
    </member>
    <member name="M:System.IO.StringReader.Close">
      <summary>關閉 <see cref="T:System.IO.StringReader" />。</summary>
    </member>
    <member name="M:System.IO.StringReader.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.StringReader" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 以釋放 Managed 和 Unmanaged 資源；false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.IO.StringReader.Peek">
      <summary>傳回下一個可供使用的字元，但不使用它。</summary>
      <returns>整數，表示要讀取的下一個字元，如果沒有更多字元可供使用或資料流不支援搜尋，則為 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的讀取器已關閉。</exception>
    </member>
    <member name="M:System.IO.StringReader.Read">
      <summary>自輸入字串讀取下一個字元，並將字元位置前移一個字元。</summary>
      <returns>基礎字串的下一個字元；如果不再有字元可供使用，則為 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的讀取器已關閉。</exception>
    </member>
    <member name="M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>自輸入字串讀取字元區塊，並將字元位置前移 <paramref name="count" /> 個字元。</summary>
      <returns>讀入緩衝區的字元總數。如果目前無法提供那麼多的字元數，則此數目可能小於所要求的字元數，或如果已經到達基礎字串的末端，則為零。</returns>
      <param name="buffer">當此方法返回時，會包含具有介於 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之值的指定字元陣列，該值是由讀取自目前來源的字元所取代。</param>
      <param name="index">緩衝區中的起始索引。</param>
      <param name="count">要讀取的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的讀取器已關閉。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式從目前的字串讀取指定數目上限的字元，並從指定的位置開始將資料寫入緩衝區。</summary>
      <returns>表示非同步讀取作業的工作。<paramref name="TResult" /> 參數的值包含讀入緩衝區的位元組總數。如果目前可用的位元組數目小於所要求的數目，則結果值可能小於所要求的位元組數目，或如果已到達字串結尾，則它可以為 0 (零)。</returns>
      <param name="buffer">當此方法返回時，會包含具有介於 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之值的指定字元陣列，該值是由讀取自目前來源的字元所取代。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入處的位置。</param>
      <param name="count">要讀取的最大字元數。如果在指定的字元數目寫入緩衝區之前到達字串結尾，則方法會返回。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的總和大於緩衝區的長度。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置字串讀取器。</exception>
      <exception cref="T:System.InvalidOperationException">讀取器目前正由先前的讀取作業使用。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式從目前的字串讀取指定數目上限的字元，並從指定的位置開始將資料寫入緩衝區。</summary>
      <returns>表示非同步讀取作業的工作。<paramref name="TResult" /> 參數的值包含讀入緩衝區的位元組總數。如果目前可用的位元組數目小於所要求的數目，則結果值可能小於所要求的位元組數目，或如果已到達字串結尾，則它可以為 0 (零)。</returns>
      <param name="buffer">當此方法傳回時，會包含具有介於 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之間的值的指定字元陣列，以從目前來源讀取的字元取代。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入處的位置。</param>
      <param name="count">要讀取的最大字元數。如果在指定的字元數目寫入緩衝區之前到達字串結尾，則方法會返回。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的總和大於緩衝區的長度。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置字串讀取器。</exception>
      <exception cref="T:System.InvalidOperationException">讀取器目前正由先前的讀取作業使用。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadLine">
      <summary>讀取基礎字串中的一行。</summary>
      <returns>基礎字串的下一行，或為 null (如果已到達基礎字串的結尾)。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的讀取器已關閉。</exception>
      <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體來為傳回的字串配置緩衝區。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadLineAsync">
      <summary>以非同步方式自目前字串讀取一行字元，並將資料以字串傳回。</summary>
      <returns>表示非同步讀取作業的工作。<paramref name="TResult" /> 參數的值包含來自字串讀取器的下一行，或為 null (如果已讀取所有字元)。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">下一行中的字元數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置字串讀取器。</exception>
      <exception cref="T:System.InvalidOperationException">讀取器目前正由先前的讀取作業使用。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEnd">
      <summary>從整個資料流或從目前的位置至資料流的結尾，讀取資料流做為字串。</summary>
      <returns>基礎字串從目前位置至結尾的內容。</returns>
      <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體來為傳回的字串配置緩衝區。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的讀取器已關閉。</exception>
    </member>
    <member name="M:System.IO.StringReader.ReadToEndAsync">
      <summary>以非同步方式讀取從目前位置到讀取器結尾的所有字元，並將它們以單一字串傳回。</summary>
      <returns>表示非同步讀取作業的工作。<paramref name="TResult" /> 參數的值包含一個字串，其具有從目前位置到字串結尾的字元。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">字元數目大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置字串讀取器。</exception>
      <exception cref="T:System.InvalidOperationException">讀取器目前正由先前的讀取作業使用。 </exception>
    </member>
    <member name="T:System.IO.StringWriter">
      <summary>實作 <see cref="T:System.IO.TextWriter" /> 以便將資訊寫入字串。資訊儲存在基礎 <see cref="T:System.Text.StringBuilder" /> 中。</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor">
      <summary>初始化 <see cref="T:System.IO.StringWriter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.IFormatProvider)">
      <summary>使用指定的控制項格式來初始化 <see cref="T:System.IO.StringWriter" /> 類別的新執行個體。</summary>
      <param name="formatProvider">控制格式的 <see cref="T:System.IFormatProvider" /> 物件。</param>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder)">
      <summary>初始化 <see cref="T:System.IO.StringWriter" /> 類別的新執行個體，此執行個體可寫入至指定的 <see cref="T:System.Text.StringBuilder" />。</summary>
      <param name="sb">要寫入至其中的 StringBuilder。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> 為 null。</exception>
    </member>
    <member name="M:System.IO.StringWriter.#ctor(System.Text.StringBuilder,System.IFormatProvider)">
      <summary>初始化 <see cref="T:System.IO.StringWriter" /> 類別的新執行個體，此執行個體會寫入至指定的 <see cref="T:System.Text.StringBuilder" />，並且具有指定的格式提供者。</summary>
      <param name="sb">要寫入至其中的 StringBuilder。</param>
      <param name="formatProvider">控制格式的 <see cref="T:System.IFormatProvider" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sb" /> 為 null。</exception>
    </member>
    <member name="M:System.IO.StringWriter.Close">
      <summary>關閉目前 <see cref="T:System.IO.StringWriter" /> 和基礎資料流。</summary>
    </member>
    <member name="M:System.IO.StringWriter.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.StringWriter" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 以釋放 Managed 和 Unmanaged 資源；false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="P:System.IO.StringWriter.Encoding">
      <summary>取得寫入輸出的 <see cref="T:System.Text.Encoding" />。</summary>
      <returns>寫入輸出的 Encoding。</returns>
    </member>
    <member name="M:System.IO.StringWriter.FlushAsync">
      <summary>以非同步方式清除目前寫入器的所有緩衝區，並造成任何緩衝資料都寫入基礎裝置。</summary>
      <returns>表示非同步清除作業的工作。</returns>
    </member>
    <member name="M:System.IO.StringWriter.GetStringBuilder">
      <summary>傳回基礎 <see cref="T:System.Text.StringBuilder" />。</summary>
      <returns>基礎 StringBuilder。</returns>
    </member>
    <member name="M:System.IO.StringWriter.ToString">
      <summary>傳回字串，包含被寫入至目前 StringWriter 的字元。</summary>
      <returns>字串，包含被寫入至目前 StringWriter 的字元。</returns>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char)">
      <summary>將字元寫入至此 StringWriter 的執行個體。</summary>
      <param name="value">要寫入的字元。</param>
      <exception cref="T:System.ObjectDisposedException">寫入器已關閉。</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>將字元陣列的指定區域寫入至此 StringWriter 的執行個體。</summary>
      <param name="buffer">讀取資料的來源字元陣列。</param>
      <param name="index">從 <paramref name="buffer" /> 開始讀取的索引。</param>
      <param name="count">要寫入的最大字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">(<paramref name="index" /> + <paramref name="count" />)&gt; <paramref name="buffer" />. Length。</exception>
      <exception cref="T:System.ObjectDisposedException">寫入器已關閉。</exception>
    </member>
    <member name="M:System.IO.StringWriter.Write(System.String)">
      <summary>將字串寫入至此 StringWriter 執行個體。</summary>
      <param name="value">要寫入的字串。</param>
      <exception cref="T:System.ObjectDisposedException">寫入器已關閉。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Char)">
      <summary>以非同步方式將字元寫入至字串。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="value">要寫入至字串的字元。</param>
      <exception cref="T:System.ObjectDisposedException">已處置字串寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">字串寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式將字元子陣列寫入至字串。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="buffer">資料寫入來源的字元陣列。</param>
      <param name="index">緩衝區中要開始讀取資料的位置。</param>
      <param name="count">要寫入的最大字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加上 <paramref name="count" /> 大於緩衝區長度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置字串寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">字串寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteAsync(System.String)">
      <summary>以非同步方式將字串寫入至目前的字串。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="value">要寫入的字串。如果 <paramref name="value" /> 為 null，不寫入任何字串至文字資料流。</param>
      <exception cref="T:System.ObjectDisposedException">已處置字串寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">字串寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Char)">
      <summary>以非同步方式將後面跟著行結束字元的字元寫入至字串。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="value">要寫入至字串的字元。</param>
      <exception cref="T:System.ObjectDisposedException">已處置字串寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">字串寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式將後面跟著行結束字元的字元子陣列寫入至字串。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="buffer">資料寫入來源的字元陣列。</param>
      <param name="index">緩衝區中要開始讀取資料的位置。</param>
      <param name="count">要寫入的最大字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加上 <paramref name="count" /> 大於緩衝區長度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置字串寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">字串寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.StringWriter.WriteLineAsync(System.String)">
      <summary>以非同步方式將後面跟著行結束字元的字串寫入至目前的字串。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="value">要寫入的字串。如果值為 null，僅會寫入行結束字元。</param>
      <exception cref="T:System.ObjectDisposedException">已處置字串寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">字串寫入器目前正由先前的寫入作業使用。 </exception>
    </member>
    <member name="T:System.IO.TextReader">
      <summary>表示可以讀取一連串連續字元的讀取器 (Reader)。</summary>
    </member>
    <member name="M:System.IO.TextReader.#ctor">
      <summary>初始化 <see cref="T:System.IO.TextReader" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.TextReader.Close">
      <summary>關閉 <see cref="T:System.IO.TextReader" />，並釋放任何與 TextReader 相關聯的系統資源。</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose">
      <summary>釋放由 <see cref="T:System.IO.TextReader" /> 物件使用的所有資源。</summary>
    </member>
    <member name="M:System.IO.TextReader.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.TextReader" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 以釋放 Managed 和 Unmanaged 資源；false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="F:System.IO.TextReader.Null">
      <summary>提供未讀取資料的 TextReader。</summary>
    </member>
    <member name="M:System.IO.TextReader.Peek">
      <summary>讀取下一個字元，而不會變更讀取器或字元來源的狀態。傳回下一個可用字元，而不會實際從輸入資料流中讀取。</summary>
      <returns>整數，表示要讀取的下一個字元，如果沒有更多字元可供使用或資料流不支援搜尋，則為 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextReader.Read">
      <summary>自輸入資料流讀取下一個字元，並將字元位置前移一個字元。</summary>
      <returns>輸入資料流的下一個字元；如果不再有字元可供使用，則為 -1。預設實作會傳回 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
      <summary>從目前的資料流讀取 <paramref name="count" /> 字元的最大值，並自 <paramref name="index" /> 處開始將資料寫入 <paramref name="buffer" />。</summary>
      <returns>已經讀取的字元數目。數目將小於或等於 <paramref name="count" />，取決於資料是否在資料流裡可供使用。如果不再有剩下字元可供讀取時呼叫，此方法傳回零值。</returns>
      <param name="buffer">當此方法返回時，會包含具有介於 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之值的指定字元陣列，該值是由讀取自目前來源的字元所取代。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入處的位置。</param>
      <param name="count">要讀取的最大字元數。如果 <paramref name="count" /> 個字元讀入 <paramref name="buffer" /> 之前，便到達資料流末端，則目前的方法會返回。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式從目前的文字讀取器讀取指定數目上限的字元，並從指定的位置開始將資料寫入緩衝區。</summary>
      <returns>表示非同步讀取作業的工作。<paramref name="TResult" /> 參數的值包含讀入緩衝區的位元組總數。如果目前可用的位元組數目小於所要求的數目，則結果值可能小於所要求的位元組數目，或如果已到達文字結尾，則它可以為 0 (零)。</returns>
      <param name="buffer">當此方法返回時，會包含具有介於 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之值的指定字元陣列，該值是由讀取自目前來源的字元所取代。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入處的位置。</param>
      <param name="count">要讀取的最大字元數。如果在指定的字元數目寫入緩衝區之前到達文字結尾，則目前方法會返回。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的總和大於緩衝區的長度。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置文字讀取器。</exception>
      <exception cref="T:System.InvalidOperationException">讀取器目前正由先前的讀取作業使用。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
      <summary>從目前的資料流讀取 <paramref name="count" /> 字元的最大值，並自 <paramref name="index" /> 處開始將資料寫入 <paramref name="buffer" />。</summary>
      <returns>基礎資料流的位置會按照讀入 <paramref name="buffer" /> 的字元數目向前移。已經讀取的字元數目。數目將小於或等於 <paramref name="count" />，取決於是否已經讀取所有輸入字元。</returns>
      <param name="buffer">當此方法返回時，此參數會包含具有介於 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> -1) 之值的指定字元陣列，該值是由讀取自目前來源的字元所取代。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入的位置。</param>
      <param name="count">要讀取的最大字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式從目前的文字讀取器讀取指定數目上限的字元，並從指定的位置開始將資料寫入緩衝區。</summary>
      <returns>表示非同步讀取作業的工作。<paramref name="TResult" /> 參數的值包含讀入緩衝區的位元組總數。如果目前可用的位元組數目小於所要求的數目，則結果值可能小於所要求的位元組數目，或如果已到達文字結尾，則它可以為 0 (零)。</returns>
      <param name="buffer">當此方法傳回時，會包含具有介於 <paramref name="index" /> 和 (<paramref name="index" /> + <paramref name="count" /> - 1) 之間的值的指定字元陣列，以從目前來源讀取的字元取代。</param>
      <param name="index">
        <paramref name="buffer" /> 中要開始寫入處的位置。</param>
      <param name="count">要讀取的最大字元數。如果在指定的字元數目寫入緩衝區之前到達文字結尾，則目前方法會返回。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="count" /> 的總和大於緩衝區的長度。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置文字讀取器。</exception>
      <exception cref="T:System.InvalidOperationException">讀取器目前正由先前的讀取作業使用。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadLine">
      <summary>自目前資料流讀取一行字元，並將資料以字串傳回。</summary>
      <returns>輸入資料流的下一行，或者，如果所有字元都被讀取，則為 null。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體來為傳回的字串配置緩衝區。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 已經關閉。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">下一行中的字元數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadLineAsync">
      <summary>以非同步方式讀取一行字元，並將資料以字串傳回。</summary>
      <returns>表示非同步讀取作業的工作。<paramref name="TResult" /> 參數的值包含來自文字讀取器的下一行，或為 null (如果已讀取所有字元)。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">下一行中的字元數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置文字讀取器。</exception>
      <exception cref="T:System.InvalidOperationException">讀取器目前正由先前的讀取作業使用。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEnd">
      <summary>讀取從目前位置到 TextReader 結尾的所有字元，並將它們以字串傳回。</summary>
      <returns>字串，含有從目前位置到 TextReader 結尾的所有字元。</returns>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextReader" /> 已經關閉。</exception>
      <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體來為傳回的字串配置緩衝區。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">下一行中的字元數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.IO.TextReader.ReadToEndAsync">
      <summary>以非同步方式讀取從目前位置到文字讀取器結尾的所有字元，並將它們以字串傳回。</summary>
      <returns>表示非同步讀取作業的工作。<paramref name="TResult" /> 參數的值包含一個字串，其具有從目前位置到文字讀取器結尾的字元。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">字元數目大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置文字讀取器。</exception>
      <exception cref="T:System.InvalidOperationException">讀取器目前正由先前的讀取作業使用。</exception>
    </member>
    <member name="T:System.IO.TextWriter">
      <summary>表示可以寫入一連串連續字元的寫入器。此類別為 abstract。</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor">
      <summary>初始化 <see cref="T:System.IO.TextWriter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.TextWriter.#ctor(System.IFormatProvider)">
      <summary>使用指定的格式提供者來初始化 <see cref="T:System.IO.TextWriter" /> 類別的新執行個體。</summary>
      <param name="formatProvider">控制格式的 <see cref="T:System.IFormatProvider" /> 物件。</param>
    </member>
    <member name="M:System.IO.TextWriter.Close">
      <summary>關閉目前寫入器和釋放任何與寫入器相關聯的系統資源。</summary>
    </member>
    <member name="F:System.IO.TextWriter.CoreNewLine">
      <summary>儲存此 TextWriter 所使用的新行字元。</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose">
      <summary>釋放由 <see cref="T:System.IO.TextWriter" /> 物件使用的所有資源。</summary>
    </member>
    <member name="M:System.IO.TextWriter.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.TextWriter" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 以釋放 Managed 和 Unmanaged 資源；false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="P:System.IO.TextWriter.Encoding">
      <summary>當在衍生類別中覆寫該屬性時，傳回用於寫入輸出的 <see cref="T:System.Text.Encoding" />。</summary>
      <returns>寫入輸出的 Encoding。</returns>
    </member>
    <member name="M:System.IO.TextWriter.Flush">
      <summary>清除目前寫入器 (Writer) 的所有緩衝區，並造成任何緩衝資料都寫入基礎裝置。</summary>
    </member>
    <member name="M:System.IO.TextWriter.FlushAsync">
      <summary>以非同步方式清除目前寫入器的所有緩衝區，並造成任何緩衝資料都寫入基礎裝置。</summary>
      <returns>表示非同步清除作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置文字寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">寫入器目前正由先前的寫入作業使用。 </exception>
    </member>
    <member name="P:System.IO.TextWriter.FormatProvider">
      <summary>取得控制格式的物件。</summary>
      <returns>特定文化特性的 <see cref="T:System.IFormatProvider" /> 物件，或者目前文化特性的格式 (如果未指定其他文化特性)。</returns>
    </member>
    <member name="P:System.IO.TextWriter.NewLine">
      <summary>取得或設定目前 TextWriter 所使用的行結束字元字串。</summary>
      <returns>目前 TextWriter 的行結束字元字串。</returns>
    </member>
    <member name="F:System.IO.TextWriter.Null">
      <summary>提供 TextWriter，但不包含可寫入但無法讀取的備份存放區。</summary>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Boolean)">
      <summary>將 Boolean 值的文字表示寫入至文字資料流。</summary>
      <param name="value">要寫入的 Boolean。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char)">
      <summary>將字元寫入文字資料流。</summary>
      <param name="value">要寫入至文字資料流的字元。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[])">
      <summary>將字元陣列寫入文字資料流。</summary>
      <param name="buffer">要寫入至文字資料流的字元陣列。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>將字元的子陣列寫入至文字資料流。</summary>
      <param name="buffer">資料寫入來源的字元陣列。</param>
      <param name="index">緩衝區中的起始索引。</param>
      <param name="count">要寫入的字元數。</param>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Decimal)">
      <summary>將十進位值的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的十進位值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Double)">
      <summary>將 8 位元組浮點數值的文字表示寫入至文字資料流。</summary>
      <param name="value">要寫入的 8 位元組浮點數值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int32)">
      <summary>將 4 位元組帶正負號的整數 (Signed Integer) 文字表示寫入至文字資料流。</summary>
      <param name="value">要寫入的 4 位元組帶正負號的整數。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Int64)">
      <summary>將 8 位元組帶正負號的整數的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的 8 位元組帶正負號的整數。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Object)">
      <summary>呼叫該物件的 ToString，將物件的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的物件。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.Single)">
      <summary>將 4 位元組浮點數值的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的 4 位元組浮點數值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String)">
      <summary>將字串寫入文字資料流。</summary>
      <param name="value">要寫入的字串。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object)">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object)" /> 一樣的語意寫出格式化字串。</summary>
      <param name="format">格式化字串。</param>
      <param name="arg0">要寫入至格式化字串的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.FormatException">格式中的格式規格無效。-或-用來指示要被格式化之引數的數目小於零，或者大於或等於要被格式化的所提供物件的數目。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object)" /> 一樣的語意寫出格式化字串。</summary>
      <param name="format">格式化字串。</param>
      <param name="arg0">要寫入至格式化字串的物件。</param>
      <param name="arg1">要寫入至格式化字串的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.FormatException">格式中的格式規格無效。-或-用來指示要被格式化之引數的數目小於零，或者大於或等於要被格式化的所提供物件的數目。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.String,System.Object[])">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object)" /> 一樣的語意寫出格式化字串。</summary>
      <param name="format">格式化字串。</param>
      <param name="arg">要寫入至格式化字串的物件陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 或 <paramref name="arg" /> 為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.FormatException">格式中的格式規格無效。-或-數值，表示要被格式化之引數小於零，或者大於或等於 <paramref name="arg" />。Length。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt32)">
      <summary>將 4 位元組不帶正負號的整數 (Unsigned Integer) 文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的 4 位元組不帶正負號的整數。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.Write(System.UInt64)">
      <summary>將 8 位元組不帶正負號的整數的文字表示寫入文字資料流。</summary>
      <param name="value">要寫入的 8 位元組不帶正負號的整數。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char)">
      <summary>以非同步方式將字元寫入至文字字串或資料流。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="value">要寫入至文字資料流的字元。</param>
      <exception cref="T:System.ObjectDisposedException">已處置文字寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">文字寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char[])">
      <summary>以非同步方式將字元陣列寫入至文字字串或資料流。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="buffer">要寫入至文字資料流的字元陣列。如果 <paramref name="buffer" /> 是 null，則不會寫入任何資料。</param>
      <exception cref="T:System.ObjectDisposedException">已處置文字寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">文字寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式將字元子陣列寫入至文字字串或資料流。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="buffer">資料寫入來源的字元陣列。</param>
      <param name="index">緩衝區中要開始擷取資料的字元位置。</param>
      <param name="count">要寫入的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加上 <paramref name="count" /> 大於緩衝區長度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置文字寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">文字寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteAsync(System.String)">
      <summary>以非同步方式將字串寫入文字字串或資料流。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="value">要寫入的字串。如果 <paramref name="value" /> 為 null，不寫入任何字串至文字資料流。</param>
      <exception cref="T:System.ObjectDisposedException">已處置文字寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">文字寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine">
      <summary>將行結束字元寫入至文字資料流。</summary>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Boolean)">
      <summary>將後面跟著行結束字元的 Boolean 的文字表示法寫入至文字資料流。</summary>
      <param name="value">要寫入的 Boolean。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char)">
      <summary>撰寫一個字元，並加上行結束字元到文字資料流。</summary>
      <param name="value">要寫入至文字資料流的字元。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[])">
      <summary>撰寫字元陣列，並加上行結束字元到文字資料流。</summary>
      <param name="buffer">資料讀取來源的字元陣列。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>撰寫字元子陣列，並加上行結束字元到文字資料流。</summary>
      <param name="buffer">資料讀取來源的字元陣列。</param>
      <param name="index">要開始讀取的 <paramref name="buffer" /> 的索引。</param>
      <param name="count">要寫入的最大字元數。</param>
      <exception cref="T:System.ArgumentException">緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Decimal)">
      <summary>撰寫十進位值的文字表示，並加上行結束字元到文字資料流。</summary>
      <param name="value">要寫入的十進位值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Double)">
      <summary>將 8 位元組浮點數值的文字表示加上行結束字元，寫入至文字資料流。</summary>
      <param name="value">要寫入的 8 位元組浮點數值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int32)">
      <summary>撰寫 4 位元組帶正負號整數的文字表示，並加上行結束字元到文字資料流。</summary>
      <param name="value">要寫入的 4 位元組帶正負號的整數。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Int64)">
      <summary>撰寫 8 位元組帶正負號整數的文字表示，並加上行結束字元到文字資料流。</summary>
      <param name="value">要寫入的 8 位元組帶正負號的整數。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Object)">
      <summary>透過呼叫這個物件上的 ToString，將該物件後面跟著行結束字元的文字表示法寫入至文字資料流。</summary>
      <param name="value">要寫入的物件。如果 <paramref name="value" /> 為 null，則只會寫入行終止字元。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.Single)">
      <summary>將 4 位元組浮點數值的文字表示加上行結束字元，寫入至文字資料流。</summary>
      <param name="value">要寫入的 4 位元組浮點數值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String)">
      <summary>撰寫一個字串，並加上行結束字元到文字資料流。</summary>
      <param name="value">要寫入的字串。如果 <paramref name="value" /> 為 null，則只會寫入行終止字元。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object)">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object)" /> 一樣的語意寫出格式化字串和新行。</summary>
      <param name="format">格式化字串。</param>
      <param name="arg0">要寫入至格式化字串的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.FormatException">格式中的格式規格無效。-或-用來指示要被格式化之引數的數目小於零，或者大於或等於要被格式化的所提供物件的數目。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object)" /> 一樣的語意寫出格式化字串和新行。</summary>
      <param name="format">格式化字串。</param>
      <param name="arg0">要寫入格式字串 (Format String) 的物件。</param>
      <param name="arg1">要寫入格式字串 (Format String) 的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.FormatException">格式中的格式規格無效。-或-用來指示要被格式化之引數的數目小於零，或者大於或等於要被格式化的所提供物件的數目。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.String,System.Object[])">
      <summary>使用與 <see cref="M:System.String.Format(System.String,System.Object)" /> 一樣的語意寫出格式化字串和新行。</summary>
      <param name="format">格式化字串。</param>
      <param name="arg">要寫入至格式字串的物件陣列。</param>
      <exception cref="T:System.ArgumentNullException">傳入的字串或物件為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.FormatException">格式中的格式規格無效。-或-用來指示要被格式化之引數的數目小於零，或者大於或等於 arg.Length。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt32)">
      <summary>撰寫 4 位元組不帶正負號整數的文字表示，並加上行結束字元到文字資料流。</summary>
      <param name="value">要寫入的 4 位元組不帶正負號的整數。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLine(System.UInt64)">
      <summary>撰寫 8 位元組不帶正負號整數的文字表示，並加上行結束字元到文字資料流。</summary>
      <param name="value">要寫入的 8 位元組不帶正負號的整數。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.TextWriter" /> 已經關閉。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync">
      <summary>以非同步方式行結束字元寫入至文字字串或資料流。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置文字寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">文字寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char)">
      <summary>以非同步方式將後面跟著行結束字元的資料寫入至文字字串或資料流。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="value">要寫入至文字資料流的字元。</param>
      <exception cref="T:System.ObjectDisposedException">已處置文字寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">文字寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char[])">
      <summary>以非同步方式將後面跟著行結束字元的字元陣列寫入至文字字串或資料流。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="buffer">要寫入至文字資料流的字元陣列。如果字元陣列是 null，則只有行結束字元會被寫入。</param>
      <exception cref="T:System.ObjectDisposedException">已處置文字寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">文字寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)">
      <summary>以非同步方式將後面跟著行結束字元的字元子陣列寫入至文字字串或資料流。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="buffer">資料寫入來源的字元陣列。</param>
      <param name="index">緩衝區中要開始擷取資料的字元位置。</param>
      <param name="count">要寫入的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加上 <paramref name="count" /> 大於緩衝區長度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置文字寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">文字寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="M:System.IO.TextWriter.WriteLineAsync(System.String)">
      <summary>以非同步方式將後面跟著行結束字元的子串寫入至文字字串或資料流。</summary>
      <returns>表示非同步寫入作業的工作。</returns>
      <param name="value">要寫入的字串。如果值為 null，僅會寫入行結束字元。</param>
      <exception cref="T:System.ObjectDisposedException">已處置文字寫入器。</exception>
      <exception cref="T:System.InvalidOperationException">文字寫入器目前正由先前的寫入作業使用。</exception>
    </member>
    <member name="T:System.IO.UnmanagedMemoryStream">
      <summary>從 Managed 程式碼對 Unmanaged 記憶體區塊提供存取。</summary>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanRead">
      <summary>取得值，指出資料流是否支援讀取。</summary>
      <returns>如果物件由具有 <paramref name="access" /> 參數且不包括讀取資料流的建構函式建立，或者如果資料流關閉，則為 false；否則為 true。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanSeek">
      <summary>取得值，指出資料流是否支援搜尋。</summary>
      <returns>如果資料流已關閉，則為 false；否則為 true。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanWrite">
      <summary>取得值，指出資料流是否支援寫入。</summary>
      <returns>如果物件由具有 <paramref name="access" /> 參數值且支援寫入的建構函式，或由不具有參數的建構函式建立，或者如果該資料流已關閉，則為 false；否則為 true。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Capacity">
      <summary>取得資料流長度 (大小) 或指派給資料流的記憶體總量 (容量)。</summary>
      <returns>資料流的大小或容量。</returns>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.UnmanagedMemoryStream" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 以釋放 Managed 和 Unmanaged 資源；false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Flush">
      <summary>覆寫 <see cref="M:System.IO.Stream.Flush" /> 方法，以便不執行任何動作。</summary>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Length">
      <summary>取得資料流中資料的長度。</summary>
      <returns>資料流中資料的長度。</returns>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Position">
      <summary>取得或設定資料流中目前的位置。</summary>
      <returns>在資料流中的目前位置。</returns>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">位置設為小於零的值，或位置大於 <see cref="F:System.Int32.MaxValue" />，或加入目前的指標時導致溢位。</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.PositionPointer">
      <summary>[安全性關鍵] 依據資料流中的目前位置，取得或設定資料流的位元組指標。</summary>
      <returns>位元組指標。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>將指定的位元組數讀入指定的陣列。</summary>
      <returns>緩衝區所讀取的總位元組數。如果目前無法取得足夠的位元組，則此數目可能小於所要求的位元組數，如果已經到達資料流末端，則為零 (0)。</returns>
      <param name="buffer">此方法返回時，會包含具有介於 <paramref name="offset" /> 和 (<paramref name="offset" /> + <paramref name="count" /> - 1) 值的指定位元組陣列，這些值由從目前來源讀取的位元組取代。這個參數會以未初始化的狀態傳遞。</param>
      <param name="offset">
        <paramref name="buffer" /> 中以零為起始的位元組位移，用來開始儲存讀取自目前資料流的資料。</param>
      <param name="count">自目前資料流讀取的最大位元組數。</param>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.NotSupportedException">基礎記憶體不支援讀取。-或-<see cref="P:System.IO.UnmanagedMemoryStream.CanRead" /> 屬性設為 false。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 參數設為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 參數小於零。-或-<paramref name="count" /> 參數小於零。</exception>
      <exception cref="T:System.ArgumentException">緩衝區陣列的長度減去 <paramref name="offset" /> 參數，小於 <paramref name="count" /> 參數。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadByte">
      <summary>從資料流讀取一個位元組，並將資料流的位置推進一個位元組；如果在資料流結尾，則傳回 -1。</summary>
      <returns>轉型為 <see cref="T:System.Int32" /> 物件的不帶正負號位元組；如果在資料流結尾，則為 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.NotSupportedException">基礎記憶體不支援讀取。-或-目前位置位於資料流結尾。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>將目前資料流的目前位置設為指定值。</summary>
      <returns>資料流中的新位置。</returns>
      <param name="offset">相對於 <paramref name="origin" /> 的搜尋起點。</param>
      <param name="loc">使用 <see cref="T:System.IO.SeekOrigin" /> 型別的值，指定開頭、結尾或目前位置做為 <paramref name="origin" /> 的參考點。</param>
      <exception cref="T:System.IO.IOException">嘗試進行資料流開端前的搜尋。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 值大於資料流的大小上限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="loc" /> 無效。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
      <summary>將資料流長度設為指定值。</summary>
      <param name="value">資料流的長度。</param>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.NotSupportedException">基礎記憶體不支援寫入。-或-嘗試進行資料流寫入，且 <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> 屬性為 false。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的 <paramref name="value" /> 超過資料流容量。-或-指定的 <paramref name="value" /> 為負數。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>使用緩衝區的資料，將位元組區塊寫入目前的資料流。</summary>
      <param name="buffer">從中複製位元組至目前資料流的位元組陣列。</param>
      <param name="offset">在此要開始複製位元組到目前資料流的緩衝區中位移。</param>
      <param name="count">要寫入目前資料流的位元組數目。</param>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.NotSupportedException">基礎記憶體不支援寫入。-或-嘗試進行資料流寫入，且 <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> 屬性為 false。-或-<paramref name="count" /> 值大於資料流容量。-或-位置位於資料流容量結尾。</exception>
      <exception cref="T:System.IO.IOException">發生 I/O 錯誤。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">其中一個指定的參數小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 參數減去 <paramref name="buffer" /> 參數的長度小於 <paramref name="count" /> 參數。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 參數為 null。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
      <summary>寫入一個位元組到檔案資料流中的目前位置。</summary>
      <param name="value">寫入至資料流的位元組值。</param>
      <exception cref="T:System.ObjectDisposedException">已關閉資料流。</exception>
      <exception cref="T:System.NotSupportedException">基礎記憶體不支援寫入。-或-嘗試進行資料流寫入，且 <see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> 屬性為 false。-或-目前位置位於資料流容量的結尾。</exception>
      <exception cref="T:System.IO.IOException">所提供的 <paramref name="value" /> 導致資料流超出最大容量。</exception>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageException">
      <summary>隔離儲存區 (Isolated Storage) 中的作業失敗時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageException.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 null，即會在處理內部例外狀況的 catch 區塊中發生目前的例外狀況。 </param>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageFile">
      <summary>表示含有檔案和目錄的隔離儲存區 (Isolated Storage)。</summary>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFile.AvailableFreeSpace">
      <summary>取得值，指出隔離儲存區的可用空間量。</summary>
      <returns>隔離儲存區的可用空間，以位元組為單位。</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置隔離儲存區。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.CopyFile(System.String,System.String)">
      <summary>複製現有的檔案到新的檔案。</summary>
      <param name="sourceFileName">要複製的檔案名稱。</param>
      <param name="destinationFileName">目的檔案的名稱。這不可以是目錄或現有檔案。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName " /> 或 <paramref name=" destinationFileName " /> 是長度為零的字串，只包含空白字元，或包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法所定義的一個或多個不正確字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName " /> 或 <paramref name=" destinationFileName " /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">已關閉隔離儲存區。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置隔離儲存區。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="sourceFileName " />。</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。-或-<paramref name="destinationFileName" /> 存在。-或-發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.CopyFile(System.String,System.String,System.Boolean)">
      <summary>複製現有的檔案到新檔案，並選擇性地覆寫現有的檔案。</summary>
      <param name="sourceFileName">要複製的檔案名稱。</param>
      <param name="destinationFileName">目的檔案的名稱。這不得作為目錄。</param>
      <param name="overwrite">如果可以覆寫目的地檔案則為 true；否則為 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName " /> 或 <paramref name=" destinationFileName " /> 是長度為零的字串，只包含空白字元，或包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法所定義的一個或多個不正確字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName " /> 或 <paramref name=" destinationFileName " /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">已關閉隔離儲存區。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置隔離儲存區。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="sourceFileName " />。</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。-或-發生 I/O 錯誤。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.CreateDirectory(System.String)">
      <summary>在隔離儲存區範圍內建立目錄。</summary>
      <param name="dir">要在隔離儲存區內建立的目錄相對路徑。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除儲存區。-或-無法建立目錄。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dir" /> 的格式錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">目錄路徑為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置儲存區。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.CreateFile(System.String)">
      <summary>在隔離儲存區中建立檔案。</summary>
      <returns>新的隔離 storage 檔案。</returns>
      <param name="path">要在隔離儲存區中建立的檔案相對路徑。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 的格式不正確。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> 中的目錄不存在。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置隔離儲存區。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.DeleteDirectory(System.String)">
      <summary>刪除隔離儲存區範圍內的目錄。</summary>
      <param name="dir">要在隔離儲存區範圍內刪除的目錄相對路徑。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除儲存區。-或-無法刪除目錄。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dir" /> 的格式錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">目錄路徑為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置儲存區。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.DeleteFile(System.String)">
      <summary>刪除隔離儲存區內的檔案。</summary>
      <param name="file">要在隔離儲存區內刪除的檔案相對路徑。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除儲存區。-或-無法刪除檔案。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="file" /> 的格式錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="file" /> 為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置儲存區。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.DirectoryExists(System.String)">
      <summary>判斷指定路徑是否參考隔離儲存區中的現有目錄。</summary>
      <returns>如果 <paramref name="path" /> 參考隔離儲存區中的現有目錄，而且不是 null，則為 true；否則為 false。</returns>
      <param name="path">要測試的路徑。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置隔離儲存區。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.Dispose">
      <summary>釋放 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.FileExists(System.String)">
      <summary>判斷指定路徑是否參考隔離儲存區中的現有檔案。</summary>
      <returns>如果 <paramref name="path" /> 參考隔離儲存區中的現有檔案，而且不是 null，則為 true；否則為 false。</returns>
      <param name="path">要測試的路徑和檔案名稱。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置隔離儲存區。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetCreationTime(System.String)">
      <summary>傳回指定之檔案或目錄的建立日期和時間。</summary>
      <returns>指定之檔案或目錄建立的日期和時間。此值是以本地時間表示。</returns>
      <param name="path">要取得其建立日期和時間資訊的檔案或目錄之路徑。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path " /> 是長度為零的字串，只包含空白字元，或包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法所定義的一個或多個不正確字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path " /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">已關閉隔離儲存區。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置隔離儲存區。</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames">
      <summary>列舉隔離儲存區根目錄中的目錄。</summary>
      <returns>隔離儲存區根目錄中的目錄的相對路徑陣列。長度為零的陣列指定根目錄中沒有目錄。</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置隔離儲存區。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetDirectoryNames(System.String)">
      <summary>列舉隔離儲存區範圍中符合指定模式的目錄。</summary>
      <returns>目錄相對路徑的 <see cref="T:System.Array" />，這些隔離儲存區範圍中的目錄與 <paramref name="searchPattern" /> 相符。長度為零的陣列指定沒有符合的目錄。</returns>
      <param name="searchPattern">搜尋模式。支援單一字元 ("?") 和多字元 ("*") 的萬用字元。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern" /> 的格式錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern" /> 為 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">找不到 <paramref name="searchPattern" /> 的一部分。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置儲存區。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames">
      <summary>取得隔離儲存區根目錄中的檔案名稱。</summary>
      <returns>隔離儲存區根目錄中的檔案的相對路徑陣列。長度為零的陣列指定根目錄中沒有檔案。</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置隔離儲存區。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetFileNames(System.String)">
      <summary>列舉隔離儲存區範圍中符合指定模式的檔案。</summary>
      <returns>檔案的相對路徑的 <see cref="T:System.Array" />，這些隔離儲存區範圍中的檔案與 <paramref name="searchPattern" /> 相符。長度為零的陣列指定沒有符合的檔案。</returns>
      <param name="searchPattern">搜尋模式。支援單一字元 ("?") 和多字元 ("*") 的萬用字元。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchPattern" /> 的格式錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchPattern" /> 為 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">找不到 <paramref name="searchPattern" /> 的一部分。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置儲存區。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetLastAccessTime(System.String)">
      <summary>傳回指定之檔案或目錄上次被存取的日期和時間。</summary>
      <returns>指定之檔案或目錄上次被存取的日期和時間。此值是以本地時間表示。</returns>
      <param name="path">要取得其上次存取日期和時間資訊的檔案或目錄之路徑。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path " /> 是長度為零的字串，只包含空白字元，或包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法所定義的一個或多個不正確字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path " /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">已關閉隔離儲存區。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置隔離儲存區。</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetLastWriteTime(System.String)">
      <summary>傳回指定之檔案或目錄上次被寫入的日期和時間。</summary>
      <returns>指定之檔案或目錄上次被寫入的日期和時間。此值是以本地時間表示。</returns>
      <param name="path">要取得其上次寫入日期和時間資訊的檔案或目錄之路徑。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path " /> 是長度為零的字串，只包含空白字元，或包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法所定義的一個或多個不正確字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path " /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">已關閉隔離儲存區。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置隔離儲存區。</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForApplication">
      <summary>取得使用者範圍隔離儲存區，用於從虛擬主機網域呼叫的應用程式。</summary>
      <returns>隔離儲存區檔案，此檔案對應於以虛擬主機網域中應用程式之識別為基礎的隔離儲存區範圍。</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">儲存區的群組配額設定為零。-或-儲存區已移除但無法重新建立，因為另一個處理序正在使用目錄或檔案。-或-隔離儲存區已停用。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo(System.Int64)">
      <summary>讓應用程式明確要求更大的配額大小 (以位元組為單位)。</summary>
      <returns>如果使用者接受新配額則為 true；否則為 false。</returns>
      <param name="newQuotaSize">要求的大小，以位元組為單位。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newQuotaSize" /> 小於零-或-<paramref name="newQuotaSize" /> 小於或等於 <see cref="P:System.IO.IsolatedStorage.IsolatedStorageFile.Quota" /> 屬性值。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置隔離儲存區。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newQuotaSize" /> 無效。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.MoveDirectory(System.String,System.String)">
      <summary>移動指定的目錄和其內容到新位置。</summary>
      <param name="sourceDirectoryName">要移動的目錄名稱。</param>
      <param name="destinationDirectoryName">
        <paramref name="sourceDirectoryName" /> 的新位置的路徑。這不可以是現有目錄的路徑。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName " /> 或 <paramref name=" destinationFileName " /> 是長度為零的字串，只包含空白字元，或包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法所定義的一個或多個不正確字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName " /> 或 <paramref name=" destinationFileName " /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">已關閉隔離儲存區。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置隔離儲存區。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="sourceDirectoryName" /> 不存在。</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。-或-<paramref name="destinationDirectoryName" /> 已經存在。-或-<paramref name="sourceDirectoryName" /> 和 <paramref name="destinationDirectoryName" /> 參考相同的目錄。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.MoveFile(System.String,System.String)">
      <summary>移動指定的檔案至新的位置，並選擇性地讓您指定新檔名。</summary>
      <param name="sourceFileName">要移動的檔案名稱。</param>
      <param name="destinationFileName">檔案的新位置的路徑。如果包含檔名，已移動的檔案會具有該名稱。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceFileName " /> 或 <paramref name=" destinationFileName " /> 是長度為零的字串，只包含空白字元，或包含 <see cref="M:System.IO.Path.GetInvalidPathChars" /> 方法所定義的一個或多個不正確字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceFileName " /> 或 <paramref name=" destinationFileName " /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">已關閉隔離儲存區。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置隔離儲存區。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="sourceFileName" />。</exception>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.OpenFile(System.String,System.IO.FileMode)">
      <summary>使用指定模式來開啟檔案。</summary>
      <returns>以指定模式開啟的檔案，其使用讀取/寫入存取且為不共用。</returns>
      <param name="path">隔離儲存區中的檔案的相對路徑。</param>
      <param name="mode">用來開啟檔案的模式。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 的格式不正確。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> 中的目錄不存在。</exception>
      <exception cref="T:System.IO.FileNotFoundException">沒有找到檔案，將 <paramref name="mode" /> 設定為 <see cref="M:System.IO.FileInfo.Open(System.IO.FileMode)" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置隔離儲存區。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>以指定的模式和指定的檔案存取來開啟檔案。</summary>
      <returns>以指定模式和存取所開啟且不共用的檔案。</returns>
      <param name="path">隔離儲存區中的檔案的相對路徑。</param>
      <param name="mode">用來開啟檔案的模式。</param>
      <param name="access">用來開啟檔案的存取類型。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 的格式不正確。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> 中的目錄不存在。</exception>
      <exception cref="T:System.IO.FileNotFoundException">沒有找到檔案，將 <paramref name="mode" /> 設定為 <see cref="M:System.IO.FileInfo.Open(System.IO.FileMode)" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置隔離儲存區。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>使用讀取、寫入或讀取/寫入存取和指定的共用選項，將檔案開啟於指定模式中。</summary>
      <returns>以指定的模式、存取和共用選項開啟的檔案。</returns>
      <param name="path">隔離儲存區中的檔案的相對路徑。</param>
      <param name="mode">用來開啟檔案的模式。</param>
      <param name="access">用來開啟檔案的存取類型。</param>
      <param name="share">其他 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件對此檔案所擁有的存取類型。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 的格式不正確。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 為 null。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="path" /> 中的目錄不存在。</exception>
      <exception cref="T:System.IO.FileNotFoundException">沒有找到檔案，將 <paramref name="mode" /> 設定為 <see cref="M:System.IO.FileInfo.Open(System.IO.FileMode)" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置隔離儲存區。</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFile.Quota">
      <summary>取得值，指出隔離儲存區的最大可用空間量。</summary>
      <returns>隔離儲存區空間的限制，以位元組為單位。</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置隔離儲存區。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFile.Remove">
      <summary>移除隔離儲存區範圍和所有內容。</summary>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">隔離存放區不能刪除。</exception>
    </member>
    <member name="T:System.IO.IsolatedStorage.IsolatedStorageFileStream">
      <summary>公開隔離儲存區 (Isolated Storage) 中的檔案。</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)">
      <summary>初始化 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 類別的新執行個體，此執行個體可以在 <paramref name="isf" /> 所指定之 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> 的內容中，用指定的 <paramref name="mode" />，存取以 <paramref name="path" /> 所指定的檔案，方式則是使用指定的檔案 <paramref name="access" />，以及使用 <paramref name="share" /> 所指定的檔案共用模式。</summary>
      <param name="path">隔離儲存區中的檔案的相對路徑。</param>
      <param name="mode">其中一個 <see cref="T:System.IO.FileMode" /> 值。</param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 值的位元組合。</param>
      <param name="share">
        <see cref="T:System.IO.FileShare" /> 值的位元組合。</param>
      <param name="isf">
        <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />，要在其中開啟 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
        <paramref name="isf" /> 已經處置。-或-<paramref name="path" /> 的格式錯誤。-或-<paramref name="path" /> 為 null。-或-<paramref name="isf" /> 為 null。-或-<paramref name="path" /> 中的目錄不存在。-或-沒有找到檔案，將 <paramref name="mode" /> 設定為 <see cref="F:System.IO.FileMode.Open" />。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)">
      <summary>在 <paramref name="isf" /> 所指定的 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> 之內容中初始化 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 類別的新執行個體，此執行個體可以用指定的 <paramref name="mode" />，使用指定的檔案 <paramref name="access" /> 存取以 <paramref name="path" /> 所指定的檔案。</summary>
      <param name="path">隔離儲存區中的檔案的相對路徑。</param>
      <param name="mode">其中一個 <see cref="T:System.IO.FileMode" /> 值。</param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 值的位元組合。</param>
      <param name="isf">
        <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />，要在其中開啟 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
        <paramref name="isf" /> 已經處置。-或-<paramref name="path" /> 的格式錯誤。-或-<paramref name="path" /> 為 null。-或-<paramref name="isf" /> 為 null。-或-<paramref name="path" /> 中的目錄不存在。-或-沒有找到檔案，將 <paramref name="mode" /> 設定為 <see cref="F:System.IO.FileMode.Open" />。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)">
      <summary>初始化 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 類別的新執行個體，此執行個體可以在 <paramref name="isf" /> 所指定之 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" /> 的內容中，用指定的 <paramref name="mode" />，存取 <paramref name="path" /> 所指定的檔案。</summary>
      <param name="path">隔離儲存區中的檔案的相對路徑。</param>
      <param name="mode">其中一個 <see cref="T:System.IO.FileMode" /> 值。</param>
      <param name="isf">
        <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile" />，要在其中開啟 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" />。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">
        <paramref name="isf" /> 已經處置。-或-<paramref name="path" /> 的格式錯誤。-或-<paramref name="path" /> 為 null。-或-<paramref name="isf" /> 為 null。-或-<paramref name="path" /> 中的目錄不存在。-或-沒有找到檔案，將 <paramref name="mode" /> 設定為 <see cref="F:System.IO.FileMode.Open" />。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>開始非同步的讀取。</summary>
      <returns>
        <see cref="T:System.IAsyncResult" /> 物件，表示可能還在暫止中的非同步 (Asynchronous) 讀取。此 <see cref="T:System.IAsyncResult" /> 必須傳遞給此資料流的 <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(System.IAsyncResult)" /> 方法，以判斷有多少位元組被讀取。若要做到這點，可以使用與呼叫 <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 相同的程式碼，或者在傳遞至 <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 的回呼中做到。</returns>
      <param name="buffer">要讀取資料的緩衝區。</param>
      <param name="offset">在 <paramref name="buffer" /> 中要開始讀取的位元組位移。</param>
      <param name="numBytes">要讀取的最大位元組數。</param>
      <param name="userCallback">在完成非同步讀取作業 ( (Asynchronous Read Operation)) 時呼叫的方法。此參數是一個選擇性項目。</param>
      <param name="stateObject">非同步讀取的狀態。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 長度減去位移小於 <paramref name="numBytes" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="numBytes" /> 為負值。</exception>
      <exception cref="T:System.IO.IOException">嘗試超過檔案結尾進行非同步讀取。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>開始非同步的寫入。</summary>
      <returns>
        <see cref="T:System.IAsyncResult" />，表示可能還在暫止中的非同步寫入。此 <see cref="T:System.IAsyncResult" /> 必須傳遞給資料流的 <see cref="M:System.IO.Stream.EndWrite(System.IAsyncResult)" /> 方法，以確保寫入完成，然後適當地釋放資源。若要做到這點，可以使用與呼叫 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 相同的程式碼，或者在傳遞至 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 的回呼中做到。</returns>
      <param name="buffer">寫入資料的緩衝區。</param>
      <param name="offset">開始寫入 <paramref name="buffer" /> 的位元組位移。</param>
      <param name="numBytes">寫入的最大位元組數。</param>
      <param name="userCallback">在完成非同步寫入作業 (Asynchronous Write Operation) 時呼叫的方法。此參數是一個選擇性項目。</param>
      <param name="stateObject">非同步寫入的狀態。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 長度減去位移小於 <paramref name="numBytes" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="numBytes" /> 為負值。</exception>
      <exception cref="T:System.IO.IOException">嘗試超過檔案結尾進行非同步讀取。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead">
      <summary>取得布林值，指出是否可讀取檔案。</summary>
      <returns>如果可以讀取 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek">
      <summary>取得布林值，指出是否支援搜尋作業。</summary>
      <returns>如果 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件支援搜尋作業則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite">
      <summary>取得布林值，指出您是否可以寫入檔案。</summary>
      <returns>如果可以寫入 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件則為 true；否則為 false。</returns>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 可以釋放 Managed 和 Unmanaged 資源，false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(System.IAsyncResult)">
      <summary>結束擱置的非同步讀取要求。</summary>
      <returns>自資料流讀取的位元組數，在零和您所要求的位元組數目之間。資料流只會在資料流的結尾處傳回零。否則，它們會阻擋，直到至少有一個位元組為止。</returns>
      <param name="asyncResult">此資料流已關閉或是發生內部錯誤。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 不是藉由呼叫此類別上的 <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 來建立的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">多次呼叫 <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndRead(System.IAsyncResult)" />。</exception>
      <exception cref="T:System.IO.IOException">此資料流已關閉或是發生內部錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite(System.IAsyncResult)">
      <summary>結束非同步的寫入。</summary>
      <param name="asyncResult">要結束的暫止的非同步 I/O 要求。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 不是藉由呼叫此類別上的 <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 來建立的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">多次呼叫 <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.EndWrite(System.IAsyncResult)" />。</exception>
      <exception cref="T:System.IO.IOException">此資料流已關閉或是發生內部錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush">
      <summary>以緩衝區目前狀態更新檔案，並接著清除緩衝區。</summary>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush(System.Boolean)">
      <summary>清除這個資料流的緩衝區並讓任何緩衝的資料寫入檔案，並清除所有中介檔案緩衝區。</summary>
      <param name="flushToDisk">true 可以清除所有中介檔案緩衝區；否則為 false。</param>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Length">
      <summary>取得 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件的長度。</summary>
      <returns>
        <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件的長度，以位元組為單位。</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Name">
      <summary>[安全性關鍵] 取得用來建立 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 的執行個體的檔案名稱。</summary>
      <returns>與此資料流相關聯之檔案的名稱。</returns>
    </member>
    <member name="P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Position">
      <summary>取得或設定目前 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件目前的位置。</summary>
      <returns>此 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件的目前位置。</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">位置不能設定為負數。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置隔離儲存區。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>將位元組從目前緩衝的 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件複製到陣列。</summary>
      <returns>
        <paramref name="buffer" /> 中讀取的位元組總數。如果目前無法提供那麼多的位元組數目，則此數目可能小於所要求的位元組數，或如果已經到達資料流結尾，則為零。</returns>
      <param name="buffer">要讀取的緩衝區。</param>
      <param name="offset">開始寫入緩衝區的位移。</param>
      <param name="count">要讀取的最大位元組數。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 描述的緩衝區範圍無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.IO.IOException">此資料流已關閉或是發生內部錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte">
      <summary>從隔離儲存區中 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件讀取一個位元組。</summary>
      <returns>從隔離儲存區檔案讀取的 8 位元不帶正負號的整數 (Unsigned Integer) 值。</returns>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.NotSupportedException">目前資料流不支援讀取。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>將此 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件的目前位置設定為指定的值。</summary>
      <returns>
        <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件中的新位置。</returns>
      <param name="offset">
        <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件的新位置。</param>
      <param name="origin">其中一個 <see cref="T:System.IO.SeekOrigin" /> 值。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="origin " />必須是其中一個 SeekOrigin 值。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援搜尋。</exception>
      <exception cref="T:System.IO.IOException">此資料流已關閉或是發生內部錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)">
      <summary>將此 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件的長度設定為指定的 <paramref name="value" />。</summary>
      <param name="value">
        <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件的新長度。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">嘗試將 value 參數設定為小於 0。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入和搜尋。</exception>
      <exception cref="T:System.IO.IOException">此資料流已關閉或是發生內部錯誤。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>使用讀取自位元組陣列的資料，將位元組區塊寫入 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件。</summary>
      <param name="buffer">要寫入的緩衝區。</param>
      <param name="offset">要從其起始的緩衝區位元組位移。</param>
      <param name="count">寫入的最大位元組數。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-寫入的嘗試超出 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件的配額。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 描述的 <paramref name="buffer" /> 範圍無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 為負值。</exception>
      <exception cref="T:System.IO.IOException">此資料流已關閉或是發生內部錯誤。-或-其他執行緒可能導致作業系統之檔案控制代碼的位置發生非預期的變更。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
    </member>
    <member name="M:System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)">
      <summary>將單一位元組寫入 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件。</summary>
      <param name="value">要寫入隔離儲存區檔案的位元組值。</param>
      <exception cref="T:System.IO.IsolatedStorage.IsolatedStorageException">已移除隔離儲存區。-或-寫入的嘗試超出 <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream" /> 物件的配額。-或-隔離儲存區已停用。</exception>
      <exception cref="T:System.NotSupportedException">資料流不支援寫入。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置資料流。</exception>
    </member>
    <member name="T:System.Reflection.AmbiguousMatchException">
      <summary>當繫結至成員時所傳回的例外狀況 (Exception) 會產生一個以上符合繫結準則的成員。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor">
      <summary>使用設定為 null 的空訊息字串和根本原因例外狀況，來初始化<see cref="T:System.Reflection.AmbiguousMatchException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor(System.String)">
      <summary>使用在該類別中設定為指定訊息的訊息字串，以及設定為 null 的根本原因例外狀況，來初始化 <see cref="T:System.Reflection.AmbiguousMatchException" /> 類別的新執行個體。</summary>
      <param name="message">字串，表示擲回此例外狀況的原因。</param>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.Reflection.AmbiguousMatchException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Reflection.Assembly">
      <summary>表示組件 (Assembly)，此組件是可重複使用、可控制版本和自我描述的 Common Language Runtime 應用程式建置區塊。</summary>
    </member>
    <member name="M:System.Reflection.Assembly.CreateInstance(System.String)">
      <summary>從此組件找出指定型別，並使用系統啟動項，利用區分大小寫的搜尋，建立它的執行個體。</summary>
      <returns>
        <see cref="T:System.Object" /> 的執行個體，表示型別；其文化特性、引數、繫結器和啟動屬性設為 null，且 <see cref="T:System.Reflection.BindingFlags" /> 設為 Public 或 Instance，或是 null (如果找不到 <paramref name="typeName" />)。</returns>
      <param name="typeName">要尋找之型別的 <see cref="P:System.Type.FullName" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> 是空白字串 ("") 或是以 null 字元開頭的字串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 null。</exception>
      <exception cref="T:System.MissingMethodException">未找到符合的建構函式。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="typeName" /> 所需的相依組件。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="typeName" /> 需要的相依組件已找到，但是無法載入。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="typeName" /> 需要相依組件，但是這個檔案不是有效的組件。-或-<paramref name="typeName" /> 需要的相依組件是針對比目前載入之版本還新的執行階段版本所編譯。</exception>
      <exception cref="T:System.MemberAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此方法。</exception>
    </member>
    <member name="P:System.Reflection.Assembly.CustomAttributes">
      <summary>取得包含這個組件之自訂屬性的集合。</summary>
      <returns>包含這個組件之自訂屬性的集合。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.DefinedTypes">
      <summary>取得在這個組件中定義之型別的集合。</summary>
      <returns>在這個組件中定義之型別的集合。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.EntryPoint">
      <summary>取得此組件的進入點。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件，表示這個組件的進入點。如果找不到進入點 (例如，組件是 DLL)，則傳回 null。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.Equals(System.Object)">
      <summary>判斷此組件和指定的物件是否相等。</summary>
      <returns>如果 <paramref name="o" /> 等於這個執行個體，為 true，否則為 false。</returns>
      <param name="o">要與此執行個體相互比較的物件。</param>
    </member>
    <member name="P:System.Reflection.Assembly.ExportedTypes">
      <summary>取得在這個組件中定義的公用型別集合，而這些型別在組件外部是可見的。</summary>
      <returns>在這個組件中定義的公用型別集合，而這些型別在組件外部是可見的。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.FullName">
      <summary>取得組件的顯示名稱。</summary>
      <returns>組件的顯示名稱。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetCallingAssembly">
      <summary>傳回方法的 <see cref="T:System.Reflection.Assembly" />，其叫用目前執行的方法。</summary>
      <returns>方法的 Assembly 物件，其叫用目前執行的方法。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)">
      <summary>取得此組件的所有自訂屬性。</summary>
      <returns>Object 型別的陣列，包含這個組件的自訂屬性。</returns>
      <param name="inherit">
        <see cref="T:System.Reflection.Assembly" /> 型別的物件會忽略這個引數。</param>
      <exception cref="T:System.MemberAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此方法。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>取得此組件由型別所指定的自訂屬性。</summary>
      <returns>Object 型別的陣列，包含這個組件由 <paramref name="attributeType" /> 指定的自訂屬性。</returns>
      <param name="attributeType">
        <see cref="T:System.Type" />，要為其傳回自訂屬性。</param>
      <param name="inherit">
        <see cref="T:System.Reflection.Assembly" /> 型別的物件會忽略這個引數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是執行階段型別。</exception>
      <exception cref="T:System.MemberAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此方法。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetExecutingAssembly">
      <summary>取得組件，其中含有目前正在執行的程式碼。</summary>
      <returns>
        <see cref="T:System.Reflection.Assembly" />，表示組件，其中包含目前正在執行的程式碼。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetExportedTypes">
      <summary>取得在此組件中定義的型別，而這些型別在組件外部是可見的。</summary>
      <returns>Type 物件的陣列，表示在這個組件中定義的型別，而這些型別在組件外部是可見的。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetHashCode">
      <summary>傳回此執行個體的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)">
      <summary>傳回指定資源已保存方式的資訊。</summary>
      <returns>物件，其中會填入有關資源拓撲的資訊，如果找不到資源，為 null。</returns>
      <param name="resourceName">區分大小寫的資源名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceName" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="resourceName" /> 參數為空字串 ("")。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceNames">
      <summary>傳回此組件中的所有資源名稱。</summary>
      <returns>陣列，包含所有資源的名稱。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)">
      <summary>載入來自此組件的指定資訊清單資源。</summary>
      <returns>表示資訊清單資源的 <see cref="T:System.IO.Stream" />；如果編譯期間沒有指定資源，或是呼叫端看不到資源，為 null。</returns>
      <param name="name">所要求的資訊清單資源的區分大小寫名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 參數為空字串 ("")。</exception>
      <exception cref="T:System.IO.FileLoadException">檔案，找到時無法載入。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="name" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 不是有效的組件。</exception>
      <exception cref="T:System.MemberAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此方法。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)">
      <summary>從此組件載入指定資訊清單資源，由指定型別的命名空間限定範圍。</summary>
      <returns>表示資訊清單資源的 <see cref="T:System.IO.Stream" />；如果編譯期間沒有指定資源，或是呼叫端看不到資源，為 null。</returns>
      <param name="type">型別，其命名空間是用來限定資訊清單資源名稱的範圍。</param>
      <param name="name">所要求的資訊清單資源的區分大小寫名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 參數為空字串 ("")。</exception>
      <exception cref="T:System.IO.FileLoadException">檔案，找到時無法載入。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="name" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 不是有效的組件。</exception>
      <exception cref="T:System.MemberAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此方法。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetModules">
      <summary>取得所有屬於此組件的模組。</summary>
      <returns>模組陣列。</returns>
      <exception cref="T:System.IO.FileNotFoundException">要載入的模組未指定檔案副檔名。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetName">
      <summary>[安全性關鍵] 取得這個組件的 <see cref="T:System.Reflection.AssemblyName" />。</summary>
      <returns>這個組件的 <see cref="T:System.Reflection.AssemblyName" />。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetName(System.Boolean)">
      <summary>[安全性關鍵] 取得這個組件的 <see cref="T:System.Reflection.AssemblyName" />，並設定 <paramref name="copiedName" /> 所指定的程式碼基底。</summary>
      <returns>這個組件的 <see cref="T:System.Reflection.AssemblyName" />。</returns>
      <param name="copiedName">若要將 <see cref="P:System.Reflection.Assembly.CodeBase" /> 設定為組件陰影複製以後的位置，為 true；若要將 <see cref="P:System.Reflection.Assembly.CodeBase" /> 設定為原始位置，則為 false。</param>
    </member>
    <member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary>取得指定文化特性的附屬組件。</summary>
      <returns>指定的附屬組件。</returns>
      <param name="culture">指定的文化特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 null。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到組件。</exception>
      <exception cref="T:System.IO.FileLoadException">找到具有相符檔名的附屬組件，但 CultureInfo 與所指定者不符。</exception>
      <exception cref="T:System.BadImageFormatException">此附屬組件不是有效的組件。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary>取得指定文化特性的附屬組件指定版本。</summary>
      <returns>指定的附屬組件。</returns>
      <param name="culture">指定的文化特性。</param>
      <param name="version">附屬組件的版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 null。</exception>
      <exception cref="T:System.IO.FileLoadException">找到具有相符檔名的附屬組件，但 CultureInfo 或版本與所指定者不符。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到組件。</exception>
      <exception cref="T:System.BadImageFormatException">此附屬組件不是有效的組件。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String)">
      <summary>取得具有組件執行個體中指定名稱的 <see cref="T:System.Type" /> 物件。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示指定的類別，如果找不到類別，則為 null。</returns>
      <param name="name">型別的完整限定名稱。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 都是無效的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="name" /> 所需的相依組件。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="name" /> 需要的相依組件已找到，但是無法載入。-或-目前的組件已載入到僅限反映的內容中，而且 <paramref name="name" /> 需要有尚未預先載入的相依組件。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 需要相依組件，但是這個檔案不是有效的組件。-或-<paramref name="name" /> 需要的相依組件是針對比目前載入之版本還新的執行階段版本所編譯。</exception>
      <exception cref="T:System.MemberAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此方法。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String,System.Boolean)">
      <summary>取得具有組件執行個體中指定之名稱的 <see cref="T:System.Type" /> 物件，並在找不到型別時選擇性地擲回例外狀況。</summary>
      <returns>表示指定之類別的 <see cref="T:System.Type" /> 物件。</returns>
      <param name="name">型別的完整限定名稱。</param>
      <param name="throwOnError">true 表示找不到該型別時擲回例外狀況，false 則表示傳回 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 都是無效的。-或-<paramref name="name" /> 的長度超過 1024 個字元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 為 true，而且找不到該型別。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="name" /> 所需的相依組件。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="name" /> 需要的相依組件已找到，但是無法載入。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 需要相依組件，但是這個檔案不是有效的組件。-或-<paramref name="name" /> 需要的相依組件是針對比目前載入之版本還新的執行階段版本所編譯。</exception>
      <exception cref="T:System.MemberAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此方法。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetTypes">
      <summary>取得定義於此組件中的型別。</summary>
      <returns>
        <see cref="T:System.Type" /> 型別的陣列，包含在這個組件中定義之所有型別的物件。</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">組件包含一或多種無法載入的型別。此例外狀況之 <see cref="P:System.Reflection.ReflectionTypeLoadException.Types" /> 屬性傳回的陣列對於每一種已載入的型別包含 <see cref="T:System.Type" /> 物件，對於每一種無法載入的型別包含 null，而 <see cref="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions" /> 屬性則對於每一種無法載入之型別包含例外狀況。</exception>
      <exception cref="T:System.MemberAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此方法。</exception>
    </member>
    <member name="P:System.Reflection.Assembly.ImageRuntimeVersion">
      <summary>取得字串，表示儲存在含有資訊清單之檔案中的 Common Language Runtime (CLR) 版本。</summary>
      <returns>字串，表示 CLR 版本的資料夾名稱。這不是完整的路徑。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)">
      <summary>指出是否已將指定的屬性套用至組件。</summary>
      <returns>如果已將屬性套用至組件，為 true，否則為 false。</returns>
      <param name="attributeType">此組件中要加以檢查的屬性 <see cref="T:System.Type" />。</param>
      <param name="inherit">此型別的物件會忽略此引數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 使用無效的型別。</exception>
    </member>
    <member name="P:System.Reflection.Assembly.IsDynamic">
      <summary>取得值，指出目前組件是否使用反映發出在目前處理序中動態產生。</summary>
      <returns>如果目前組件是在目前處理序中動態產生，為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)">
      <summary>[安全性關鍵] 載入組件，指定其 <see cref="T:System.Reflection.AssemblyName" />。</summary>
      <returns>載入的組件。</returns>
      <param name="assemblyRef">
        <see cref="T:System.Reflection.AssemblyName" /> 物件，描述要載入的組件。</param>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.String)">
      <summary>載入組件，其名稱指定為完整格式。</summary>
      <returns>載入的組件。</returns>
      <param name="assemblyString">組件名稱的完整格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyString" /> 是長度為零的字串。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyString" /> 找不到。</exception>
      <exception cref="T:System.IO.FileLoadException">檔案，找到時無法載入。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> 不是有效的組件。-或-<paramref name="assemblyString" /> 已編譯為適用於更新的 Common Language Runtime 版本，而非目前所執行的版本。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFrom(System.String)">
      <summary>[安全性關鍵] 載入組件，指定其檔案名稱或路徑。</summary>
      <returns>載入的組件。</returns>
      <param name="assemblyFile">檔案的名稱或路徑，包含組件的資訊清單。</param>
    </member>
    <member name="P:System.Reflection.Assembly.ManifestModule">
      <summary>取得包含目前組件之資訊清單的模組。</summary>
      <returns>
        <see cref="T:System.Reflection.Module" /> 物件，表示包含組件之資訊清單的模組。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.Modules">
      <summary>取得包含這個組件中之模組的集合。</summary>
      <returns>包含這個組件中之模組的集合。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.ToString">
      <summary>傳回組件的完整限定名稱，也稱為顯示名稱。</summary>
      <returns>組件的完整名稱或類別名稱 (如果無法判斷組件的完整名稱)。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyAlgorithmIdAttribute">
      <summary>指定要雜湊組件中所有檔案的演算法。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyAlgorithmIdAttribute.#ctor(System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>使用其中一個 <see cref="T:System.Reflection.AssemblyAlgorithmIdAttribute" /> 成員表示雜湊演算法，以指定的雜湊演算法初始化 <see cref="T:System.Configuration.Assemblies.AssemblyHashAlgorithm" /> 類別新執行個體。</summary>
      <param name="algorithmId">AssemblyHashAlgorithm 的成員，表示雜湊演算法。</param>
    </member>
    <member name="M:System.Reflection.AssemblyAlgorithmIdAttribute.#ctor(System.UInt32)">
      <summary>使用不帶正負號的整數 (Unsigned Integer) 表示雜湊演算法，以指定的雜湊演算法初始化 <see cref="T:System.Reflection.AssemblyAlgorithmIdAttribute" /> 類別新執行個體。</summary>
      <param name="algorithmId">不帶正負號的整數，表示雜湊演算法。</param>
    </member>
    <member name="P:System.Reflection.AssemblyAlgorithmIdAttribute.AlgorithmId">
      <summary>取得組件資訊清單內容的雜湊演算法。</summary>
      <returns>不帶正負號的整數，表示組件雜湊演算法。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCompanyAttribute">
      <summary>定義組件資訊清單 (Assembly Manifest) 的公司名稱自訂屬性 (Attribute)。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyCompanyAttribute" /> 類別的新執行個體。</summary>
      <param name="company">公司名稱資訊。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCompanyAttribute.Company">
      <summary>取得公司名稱資訊。</summary>
      <returns>字串，包含公司名稱。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyConfigurationAttribute">
      <summary>指定組件的組建組態，例如正式版本或偵錯。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyConfigurationAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyConfigurationAttribute" /> 類別的新執行個體。</summary>
      <param name="configuration">組件組態。</param>
    </member>
    <member name="P:System.Reflection.AssemblyConfigurationAttribute.Configuration">
      <summary>取得組件組態資訊。</summary>
      <returns>字串，包含組件組態資訊。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyContentType">
      <summary>提供組件所包含的程式碼型別的相關資訊。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyContentType.Default">
      <summary>組件包含 .NET Framework 程式碼。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyContentType.WindowsRuntime">
      <summary>組件包含  程式碼。</summary>
    </member>
    <member name="T:System.Reflection.AssemblyCopyrightAttribute">
      <summary>定義組件資訊清單 (Assembly Manifest) 的著作權自訂屬性 (Attribute)。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCopyrightAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyCopyrightAttribute" /> 類別的新執行個體。</summary>
      <param name="copyright">著作權資訊。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCopyrightAttribute.Copyright">
      <summary>取得著作權資訊。</summary>
      <returns>字串，包含著作權資訊。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCultureAttribute">
      <summary>指定組件所支援的文化特性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCultureAttribute.#ctor(System.String)">
      <summary>以使用屬性的組件所支援的文化特性來初始化 <see cref="T:System.Reflection.AssemblyCultureAttribute" /> 類別的新執行個體。</summary>
      <param name="culture">文化特性，由使用屬性的組件所支援。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCultureAttribute.Culture">
      <summary>取得使用屬性的組件所支援的文化特性。</summary>
      <returns>字串，含有所支援的文化特性的名稱。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDefaultAliasAttribute">
      <summary>定義組件資訊清單 (Assembly Manifest) 的易記預設別名 (Alias)。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDefaultAliasAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyDefaultAliasAttribute" /> 類別的新執行個體。</summary>
      <param name="defaultAlias">組件預設別名資訊。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDefaultAliasAttribute.DefaultAlias">
      <summary>取得預設別名資訊。</summary>
      <returns>字串，包含預設別名資訊。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDelaySignAttribute">
      <summary>指定建立組件 (Assembly) 時不要完整簽署。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDelaySignAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyDelaySignAttribute" /> 類別的新執行個體。</summary>
      <param name="delaySign">如果啟動這個屬性所表示的功能，則為 true；否則為 false。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDelaySignAttribute.DelaySign">
      <summary>取得值，指出屬性的狀態。</summary>
      <returns>如果這個組件已經建置為延遲簽署為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDescriptionAttribute">
      <summary>提供組件的文字描述。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDescriptionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyDescriptionAttribute" /> 類別的新執行個體。</summary>
      <param name="description">組件描述。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDescriptionAttribute.Description">
      <summary>取得組件描述資訊。</summary>
      <returns>字串，包含組件描述。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFileVersionAttribute">
      <summary>指出編譯器使用 Win32 檔案版本資源的指定版本號碼。Win32 檔案版本不需要與組件的版本號碼相同。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFileVersionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyFileVersionAttribute" /> 類別的新執行個體，指定檔案版本。</summary>
      <param name="version">檔案版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 為 null。</exception>
    </member>
    <member name="P:System.Reflection.AssemblyFileVersionAttribute.Version">
      <summary>取得 Win32 檔案版本資源名稱。</summary>
      <returns>字串，包含檔案版本資源名稱。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFlagsAttribute">
      <summary>為組件指定 <see cref="T:System.Reflection.AssemblyNameFlags" /> 旗標的位元組合，描述 Just-In-Time (JIT) 編譯器選項、組件是否可重定目標，以及組件是否具有完整或 Token 化的公開金鑰。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)">
      <summary>使用指定的 <see cref="T:System.Reflection.AssemblyNameFlags" /> 旗標組合，來初始化 <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> 類別的新執行個體。</summary>
      <param name="assemblyFlags">
        <see cref="T:System.Reflection.AssemblyNameFlags" /> 旗標的位元組合，表示 Just-In-Time (JIT) 編譯器選項、壽命、組件是否可重定目標，以及組件是否具有完整或 Token 化的公開金鑰。</param>
    </member>
    <member name="P:System.Reflection.AssemblyFlagsAttribute.AssemblyFlags">
      <summary>取得整數值，指出 <see cref="T:System.Reflection.AssemblyNameFlags" /> 旗標的組合，而這些旗標是在建立此屬性執行個體時所指定。</summary>
      <returns>整數值，表示 <see cref="T:System.Reflection.AssemblyNameFlags" /> 旗標的位元組合。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyInformationalVersionAttribute">
      <summary>定義組件資訊清單 (Assembly Manifest) 其他的版本資訊。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" /> 類別的新執行個體。</summary>
      <param name="informationalVersion">組件版本資訊。</param>
    </member>
    <member name="P:System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion">
      <summary>取得版本資訊。</summary>
      <returns>字串，包含版本資訊。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyFileAttribute">
      <summary>指定檔案的名稱，該檔案包含用來產生強式名稱 (Strong Name) 的金鑰組 (Key Pair)。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)">
      <summary>使用檔案名稱來初始化 AssemblyKeyFileAttribute 類別的新執行個體，該檔案包含金鑰組，用來產生使用屬性之組件的強式名稱。</summary>
      <param name="keyFile">包含金鑰組的檔案名稱。</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyFileAttribute.KeyFile">
      <summary>取得檔案的名稱，該檔案包含金鑰組，用來產生使用屬性之組件的強式名稱。</summary>
      <returns>字串，含有包含金鑰組的檔案名稱。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyNameAttribute">
      <summary>指定 CSP 內金鑰容器 (Container) 的名稱，該容器包含用來產生強式名稱的金鑰組 (Key Pair)。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)">
      <summary>使用容器名稱來初始化 <see cref="T:System.Reflection.AssemblyKeyNameAttribute" /> 類別的新執行個體，該容器包含金鑰組，用來產生使用屬性之組件的強式名稱。</summary>
      <param name="keyName">包含金鑰組的容器名稱。</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyNameAttribute.KeyName">
      <summary>取得容器的名稱，該容器包含金鑰組，用來產生使用屬性之組件的強式名稱。</summary>
      <returns>字串，包含具有相關金鑰組之容器的名稱。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyMetadataAttribute">
      <summary>為裝飾的組件定義一對索引鍵/值中繼資料。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyMetadataAttribute.#ctor(System.String,System.String)">
      <summary>使用指定的中繼資料索引鍵和值，初始化 <see cref="T:System.Reflection.AssemblyMetadataAttribute" /> 類別的新執行個體。</summary>
      <param name="key">中繼資料索引鍵。</param>
      <param name="value">中繼資料值。</param>
    </member>
    <member name="P:System.Reflection.AssemblyMetadataAttribute.Key">
      <summary>取得中繼資料索引鍵。</summary>
      <returns>中繼資料索引鍵。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyMetadataAttribute.Value">
      <summary>取得中繼資料值。</summary>
      <returns>中繼資料值。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyName">
      <summary>完整描述組件的唯一識別。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyName.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyName" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyName.#ctor(System.String)">
      <summary>使用指定的顯示名稱來初始化 <see cref="T:System.Reflection.AssemblyName" /> 類別的新執行個體。</summary>
      <param name="assemblyName">組件的顯示名稱，如同 <see cref="P:System.Reflection.AssemblyName.FullName" /> 屬性傳回。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" /> 是長度為零的字串。</exception>
      <exception cref="T:System.IO.FileLoadException">找不到或無法載入參考的組件。</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.Clone">
      <summary>製作這個 AssemblyName 物件的複本。</summary>
      <returns>物件，是這個 AssemblyName 物件的複本。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.CodeBase">
      <summary>[安全性關鍵] 取得或設定做為 URL 之組件的位置。</summary>
      <returns>字串，是組件的 URL 位置。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.ContentType">
      <summary>取得或設定值，這個值表示組件應該包含哪種型別的內容。</summary>
      <returns>表示組件應該包含哪種型別的內容之值。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.CultureInfo">
      <summary>取得或設定組件所支援的文化特性。</summary>
      <returns>組件所支援的文化特性。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.CultureName">
      <summary>取得或設定與此組件相關聯之文化特性的名稱。</summary>
      <returns>文化特性名稱。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Flags">
      <summary>取得或設定組件的屬性。</summary>
      <returns>組件的屬性。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.FullName">
      <summary>取得組件的完整限定名稱，也稱為顯示名稱。</summary>
      <returns>字串，為組件的完整限定名稱 (顯示名稱)。</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetPublicKey">
      <summary>取得識別組件的公開金鑰。</summary>
      <returns>組件的公開金鑰。</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetPublicKeyToken">
      <summary>取得公開金鑰語彙基元，即是用於應用程式或組件簽名的公開金鑰 SHA-1 雜湊的最後 8 位元組。</summary>
      <returns>公開金鑰語彙基元。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.HashAlgorithm">
      <summary>取得或設定組件資訊清單 (Assembly Manifest) 所使用的雜湊演算法。</summary>
      <returns>組件資訊清單所使用的雜湊演算法。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Name">
      <summary>取得或設定組件的簡單名稱。這通常 (但不一定) 是組件之資訊清單檔的檔名 (不含其副檔名)。</summary>
      <returns>組件的簡單名稱。</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
      <summary>傳回值，此值表示載入器是否會將兩個組件名稱解析為相同的組件。</summary>
      <returns>如果載入器會將 <paramref name="definition" /> 與 <paramref name="reference" /> 解析成相同的組件，為 true，否則為 false。</returns>
      <param name="reference">參考組件名稱。</param>
      <param name="definition">要與參考組件比較的組件名稱。</param>
    </member>
    <member name="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
      <summary>設定識別組件的公開金鑰。</summary>
      <param name="publicKey">位元組陣列，包含組件的公開金鑰。</param>
    </member>
    <member name="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
      <summary>設定公開金鑰語彙基元，即是用於簽署應用程式或組件之公開金鑰 SHA-1 雜湊的最後 8 個位元組。</summary>
      <param name="publicKeyToken">位元組陣列，包含組件的公開金鑰語彙基元。</param>
    </member>
    <member name="M:System.Reflection.AssemblyName.ToString">
      <summary>傳回組件的完整限定名稱，也稱為顯示名稱。</summary>
      <returns>組件的完整名稱或類別名稱 (如果無法判斷組件的完整名稱)。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Version">
      <summary>取得或設定組件的主要、次要、組建和修訂編號。</summary>
      <returns>組件的主要、次要、組建和修訂編號。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.VersionCompatibility">
      <summary>取得或設定與組件和其他組件相容性相關的資訊。</summary>
      <returns>有關組件和其他組件相容性的資訊。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameFlags">
      <summary>提供有關 <see cref="T:System.Reflection.Assembly" /> 參考的資訊。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.EnableJITcompileOptimizer">
      <summary>指定已停用組件的 Just-In-Time (JIT) 編譯器最佳化。這與成員名稱所表示的意義剛好相反。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.EnableJITcompileTracking">
      <summary>指定已啟用組件的 Just-In-Time (JIT) 編譯器 (Compiler) 追蹤 (Tracking)。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.None">
      <summary>指定沒有旗標作用中。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.PublicKey">
      <summary>指定公開金鑰是由完整公開金鑰而非公開金鑰語彙基元 (Token) 所形成。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.Retargetable">
      <summary>指定組件可以在執行階段重定成不同發行者 (Publisher) 的組件。</summary>
    </member>
    <member name="T:System.Reflection.AssemblyProductAttribute">
      <summary>定義組件資訊清單 (Assembly Manifest) 的產品名稱自訂屬性 (Attribute)。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyProductAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyProductAttribute" /> 類別的新執行個體。</summary>
      <param name="product">產品名稱資訊。</param>
    </member>
    <member name="P:System.Reflection.AssemblyProductAttribute.Product">
      <summary>取得產品名稱資訊。</summary>
      <returns>字串，包含產品名稱。</returns>
    </member>
    <member name="T:System.Reflection.AssemblySignatureKeyAttribute">
      <summary>從更舊、 更簡單的強式名稱金鑰移轉到較大的金鑰，其具有更強的雜湊演算法。</summary>
    </member>
    <member name="M:System.Reflection.AssemblySignatureKeyAttribute.#ctor(System.String,System.String)">
      <summary>使用指定的公開金鑰及副署，來建立 <see cref="T:System.Reflection.AssemblySignatureKeyAttribute" /> 類別的新執行個體。</summary>
      <param name="publicKey">公用或識別金鑰。</param>
      <param name="countersignature">副署，其為強式名稱金鑰的簽章金鑰部分。</param>
    </member>
    <member name="P:System.Reflection.AssemblySignatureKeyAttribute.Countersignature">
      <summary>取得這個組件的強式名稱的副署。</summary>
      <returns>此簽章金鑰的副署。</returns>
    </member>
    <member name="P:System.Reflection.AssemblySignatureKeyAttribute.PublicKey">
      <summary>取得強式名稱用來簽署組件的公開金鑰。</summary>
      <returns>這個組件的公開金鑰。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTitleAttribute">
      <summary>指定組件的說明。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTitleAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyTitleAttribute" /> 類別的新執行個體。</summary>
      <param name="title">組件標題。</param>
    </member>
    <member name="P:System.Reflection.AssemblyTitleAttribute.Title">
      <summary>取得組件標題資訊。</summary>
      <returns>字串，包含組件標題。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTrademarkAttribute">
      <summary>定義組件資訊清單 (Assembly Manifest) 的商標自訂屬性 (Attribute)。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTrademarkAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyTrademarkAttribute" /> 類別的新執行個體。</summary>
      <param name="trademark">商標資訊。</param>
    </member>
    <member name="P:System.Reflection.AssemblyTrademarkAttribute.Trademark">
      <summary>取得商標資訊。</summary>
      <returns>String，包含商標資訊。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyVersionAttribute">
      <summary>指定使用屬性之組件的版本。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyVersionAttribute.#ctor(System.String)">
      <summary>以使用屬性之組件的版本號碼，來初始化 AssemblyVersionAttribute 類別的新執行個體。</summary>
      <param name="version">使用屬性之組件的版本號碼。</param>
    </member>
    <member name="P:System.Reflection.AssemblyVersionAttribute.Version">
      <summary>取得使用屬性之組件的版本號碼。</summary>
      <returns>字串，包含組件的版本號碼。</returns>
    </member>
    <member name="T:System.Reflection.Binder">
      <summary>從候選者清單中選取成員，並執行型別轉換，從實質引數 (Actual Argument) 型別轉換成型式引數 (Formal Argument) 型別。</summary>
    </member>
    <member name="M:System.Reflection.Binder.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.Binder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
      <summary>根據指定的條件，從一組指定的欄位中選取欄位。</summary>
      <returns>符合的欄位。</returns>
      <param name="bindingAttr">
        <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
      <param name="match">可能相符的欄位集合。例如，當 <see cref="Overload:System.Type.InvokeMember" /> 使用 <see cref="T:System.Reflection.Binder" /> 物件時，這個參數就會指定已由反映判定為可能相符的欄位集合，通常是因為這些欄位具有正確的成員名稱。<see cref="P:System.Type.DefaultBinder" /> 所提供的預設實作會變更此陣列的順序。</param>
      <param name="value">用來尋找相符欄位的欄位值。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 的執行個體，用來控制強制型轉型別的繫結器實作中資料型別的強制型轉。如果 <paramref name="culture" /> 為 null，就會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。附註   例如，如果繫結器實作允許您將字串值強制型轉為數值，則將表示 1000 的 String 轉換成 Double 值時，您就必須指定這個參數，因為 1000 在不同的文化特性中有不同的表示方式。預設的繫結器不會處理這種字串強制型轉。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">如果是預設繫結器，<paramref name="bindingAttr" /> 會包含 <see cref="F:System.Reflection.BindingFlags.SetField" />，而且 <paramref name="match" /> 會包含同樣都與 <paramref name="value" /> 相符的多個欄位。例如，<paramref name="value" /> 會包含實作 IMyClass 介面的 MyClass 物件，而 <paramref name="match" /> 包含一個 MyClass 型別的欄位和一個 IMyClass 型別的欄位。</exception>
      <exception cref="T:System.MissingFieldException">如果是預設繫結器，<paramref name="bindingAttr" /> 會包含 <see cref="F:System.Reflection.BindingFlags.SetField" />，而 <paramref name="match" /> 不包含可接受 <paramref name="value" /> 的任何欄位。</exception>
      <exception cref="T:System.NullReferenceException">如果是預設繫結器，<paramref name="bindingAttr" /> 會包含 <see cref="F:System.Reflection.BindingFlags.SetField" />，而 <paramref name="match" /> 是 null 或空白陣列。-或-<paramref name="bindingAttr" /> 包含 <see cref="F:System.Reflection.BindingFlags.SetField" />，而 <paramref name="value" /> 為 null。</exception>
    </member>
    <member name="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
      <summary>根據提供的引數，從一組指定的方法中選取要叫用 (Invoke) 的方法。</summary>
      <returns>符合的方法。</returns>
      <param name="bindingAttr">
        <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
      <param name="match">可能相符的方法集合。例如，當 <see cref="Overload:System.Type.InvokeMember" /> 使用 <see cref="T:System.Reflection.Binder" /> 物件時，這個參數就會指定已由反映判定為可能相符的方法集合，通常是因為這些方法具有正確的成員名稱。<see cref="P:System.Type.DefaultBinder" /> 所提供的預設實作會變更此陣列的順序。</param>
      <param name="args">傳入的引數。繫結器可能會變更此陣列中的引數順序；例如，如果使用 <paramref name="names" /> 參數來指定位置順序以外的其他順序，預設繫結器就會變更引數的順序。如果繫結器實作強制型轉了引數型別 (Argument Type)，引數的型別和值也可能會變更。</param>
      <param name="modifiers">參數修飾詞的陣列，啟用繫結以使用型別已被修改的參數簽章。預設繫結器實作時並不會使用此參數。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 的執行個體，用來控制強制型轉型別的繫結器實作中資料型別的強制型轉。如果 <paramref name="culture" /> 為 null，就會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。附註   例如，如果繫結器實作允許您將字串值強制型轉為數值，則將表示 1000 的 String 轉換成 Double 值時，您就必須指定這個參數，因為 1000 在不同的文化特性中有不同的表示方式。預設的繫結器不會處理這種字串強制型轉。</param>
      <param name="names">如果比對時必須考慮參數名稱，便為參數名稱；如果只將引數視為單純的位置引數，為 null。例如，如果位置順序中並未提供引數，您就必須使用參數名稱。</param>
      <param name="state">在此方法傳回之後，<paramref name="state" /> 就會包含繫結器提供的物件，用以記錄引數重新調整順序。繫結器會建立此物件，而且也是此物件的唯一使用者。如果 BindToMethod 傳回時 <paramref name="state" /> 不是 null，而且您想要將 <paramref name="args" /> 還原成原來的順序，使您可以擷取 ref 參數 (在 Visual Basic 中為 ByRef 參數) 的值，就必須將 <paramref name="state" /> 傳遞至 <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /> 方法。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">如果是預設繫結器，<paramref name="match" /> 將包含同樣都與 <paramref name="args" /> 相符的多個方法。例如，<paramref name="args" /> 會包含一個實作 IMyClass 介面的 MyClass 物件，而 <paramref name="match" /> 包含一個採用 MyClass 的方法和一個採用 IMyClass 的方法。</exception>
      <exception cref="T:System.MissingMethodException">如果是預設繫結器，<paramref name="match" /> 不會包含可以接受 <paramref name="args" /> 中提供之引數的方法。</exception>
      <exception cref="T:System.ArgumentException">如果是預設繫結器，<paramref name="match" /> 會是 null 或空白陣列。</exception>
    </member>
    <member name="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
      <summary>將指定的 Object 型別變更為指定的 Type。</summary>
      <returns>物件，包含做為新型別的指定值。</returns>
      <param name="value">要變更為新 Type 的物件。</param>
      <param name="type">
        <paramref name="value" /> 將要變成的新 Type。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 的執行個體，用來控制資料型別的強制型轉。如果 <paramref name="culture" /> 為 null，就會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。附註   例如，將表示 1000 的 String 轉換成 Double 值時必須使用這個參數，因為 1000 在不同的文化特性中有不同的表示方式。</param>
    </member>
    <member name="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
      <summary>在從 <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" /> 傳回時，當 <paramref name="args" /> 引數來自 BindToMethod 時，將還原為本來的狀態。</summary>
      <param name="args">傳入的實質引數。引數的型別和值都可以被變更。</param>
      <param name="state">繫結器提供的物件，記錄引數重新調整順序。</param>
    </member>
    <member name="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
      <summary>根據引數型別，從一組指定的方法中選取方法。</summary>
      <returns>符合的方法，如果找到的話，否則為 null。</returns>
      <param name="bindingAttr">
        <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
      <param name="match">可能相符的方法集合。例如，當 <see cref="Overload:System.Type.InvokeMember" /> 使用 <see cref="T:System.Reflection.Binder" /> 物件時，這個參數就會指定已由反映判定為可能相符的方法集合，通常是因為這些方法具有正確的成員名稱。<see cref="P:System.Type.DefaultBinder" /> 所提供的預設實作會變更此陣列的順序。</param>
      <param name="types">用來尋找相符方法的參數型別。</param>
      <param name="modifiers">參數修飾詞的陣列，啟用繫結以使用型別已被修改的參數簽章。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">如果是預設繫結器，<paramref name="match" /> 將包含同樣都與 <paramref name="types" /> 所描述之參數型別相符的多個方法。例如，<paramref name="types" /> 中的陣列會包含 MyClass 的 <see cref="T:System.Type" /> 物件，而 <paramref name="match" /> 中的陣列則包含可取得 MyClass 之基底類別的方法，以及可取得 MyClass 所實作之介面的方法。</exception>
      <exception cref="T:System.ArgumentException">如果是預設繫結器，<paramref name="match" /> 會是 null 或空白陣列。-或-<paramref name="types" /> 的一個項目衍生自 <see cref="T:System.Type" />，但不是 RuntimeType 型別。</exception>
    </member>
    <member name="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>根據指定的條件，從一組指定的屬性中選取屬性。</summary>
      <returns>符合的屬性。</returns>
      <param name="bindingAttr">
        <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
      <param name="match">可能相符的屬性集合。例如，當 <see cref="Overload:System.Type.InvokeMember" /> 使用 <see cref="T:System.Reflection.Binder" /> 物件時，這個參數就會指定已由反映判定為可能相符的屬性集合，通常是因為這些屬性具有正確的成員名稱。<see cref="P:System.Type.DefaultBinder" /> 所提供的預設實作會變更此陣列的順序。</param>
      <param name="returnType">相符屬性必須有的傳回值。</param>
      <param name="indexes">要被搜尋的索引屬性型別。用於索引屬性，像是類別的索引子。</param>
      <param name="modifiers">參數修飾詞的陣列，啟用繫結以使用型別已被修改的參數簽章。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">如果是預設繫結器，<paramref name="match" /> 將包含同樣都與 <paramref name="returnType" /> 和 <paramref name="indexes" /> 相符的多個屬性。</exception>
      <exception cref="T:System.ArgumentException">如果是預設繫結器，<paramref name="match" /> 會是 null 或空白陣列。</exception>
    </member>
    <member name="T:System.Reflection.BindingFlags">
      <summary>指定控制繫結的旗標和由反映為引導的成員和型別搜尋方式。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.CreateInstance">
      <summary>反映應該建立指定型別的執行個體。此旗標會呼叫符合指定引數的建構函式。所提供的成員名稱會忽略。如果沒有指定查詢的類型，則會套用 (Instance | Public)。不可能呼叫型別初始設定式。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.DeclaredOnly">
      <summary>應該只考慮在所提供型別階層層級宣告的成員。不考慮繼承成員。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Default">
      <summary>沒有繫結旗標。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.ExactBinding">
      <summary>所提供引數型別必須確實符合對應的型式參數型別。如果呼叫端提供非 null 的 Binder 物件，則反映會擲回例外狀況，因為那表示呼叫端正在提供會選擇適當方法的 BindToXXX 實作。預設繫結器會忽略此旗標，而自訂繫結器則可實作此旗標的語意 (Semantics)。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.FlattenHierarchy">
      <summary>應該傳回在階層之上的 Public 成員和受保護的靜態 (Static) 成員。不會傳回繼承類別中的私用靜態成員。靜態成員包括欄位、方法、事件和屬性。巢狀型別 (Nested Type) 不會傳回。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.GetField">
      <summary>應該傳回所指定欄位的值。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.GetProperty">
      <summary>應該傳回所指定屬性的值。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.IgnoreCase">
      <summary>繫結時不考慮成員名稱的大小寫。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.IgnoreReturn">
      <summary>用於 COM Interop 以指定成員的傳回值可忽略。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Instance">
      <summary>應該在搜尋中包含執行個體成員。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.InvokeMethod">
      <summary>待叫用方法。這不能是建構函式或型別初始設定式。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.NonPublic">
      <summary>應該在搜尋中包含 non-public 成員。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.OptionalParamBinding">
      <summary>對於其參數計數會符合所提供引數的數目，應該傳回成員集。此繫結旗標用於具有預設值參數的方法和具有變數引數 Varargs 的方法。此旗標應該只與 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 方法搭配使用。具有預設值的參數只能使用在省略尾端引數的呼叫中。它們必須是最後的引數。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Public">
      <summary>應該在搜尋中包含 public 成員。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.PutDispProperty">
      <summary>應該叫用 COM 物件上的 PROPPUT 成員。PROPPUT 會指定使用實值的屬性設定函式。如果屬性同時具有 PROPPUT 和 PROPPUTREF，而且必須區分呼叫哪一個，則使用 PutDispProperty。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.PutRefDispProperty">
      <summary>應該叫用 COM 物件上的 PROPPUTREF 成員。PROPPUTREF 會指定使用參考而非實值的屬性設定函式。如果屬性同時具有 PROPPUT 和 PROPPUTREF，而且必須區分呼叫哪一個，則使用 PutRefDispProperty。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SetField">
      <summary>應該設定所指定欄位的值。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SetProperty">
      <summary>應該設定所指定屬性的值。對於 COM 屬性來說，指定此繫結旗標等同於指定 PutDispProperty 和 PutRefDispProperty。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Static">
      <summary>應該在搜尋中包含靜態成員。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SuppressChangeType">
      <summary>尚未實作。</summary>
    </member>
    <member name="T:System.Reflection.CallingConventions">
      <summary>定義方法的有效呼叫慣例 (Calling Convention)。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Any">
      <summary>指定可能會使用 Standard 或 VarArgs 呼叫慣例。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.ExplicitThis">
      <summary>指定簽章為函式指標簽章，表示呼叫執行個體或虛擬方法 (非 static 方法)。如果設定 ExplicitThis，也必須設定 HasThis。傳遞至呼叫方法的第一個引數仍是 this 指標，但第一個引數的型別目前未知。因此，描述 this 指標之型別 (或類別) 的語彙基元會明確地儲存到它的中繼資料 (Metadata) 簽章中。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.HasThis">
      <summary>指定執行個體或虛擬方法 (非靜態的方法)。在執行階段期間，呼叫的方法傳遞指標至目標物件做為它的第一個引數 (this 指標)。儲存在中繼資料的簽章並不包含這第 1 個引數的型別，因為已知方法，而且其擁有人類別可以從中繼資料找到。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Standard">
      <summary>指定如同 Common Language Runtime 所判斷的預設呼叫慣例。靜態方法要使用此呼叫慣例。若為執行個體或虛擬方法，則需使用 HasThis。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.VarArgs">
      <summary>指定有變數引數之方法的呼叫慣例。</summary>
    </member>
    <member name="T:System.Reflection.ConstructorInfo">
      <summary>探索類別建構函式的屬性 (Attribute)，並提供建構函式中繼資料 (Metadata) 的存取。</summary>
    </member>
    <member name="F:System.Reflection.ConstructorInfo.ConstructorName">
      <summary>表示類別建構函式方法儲存在中繼資料時的名稱。此名稱永遠是「.ctor」。此欄位為唯讀的。</summary>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Equals(System.Object)">
      <summary>傳回值，指出執行個體是否等於指定的物件。</summary>
      <returns>如果 <paramref name="obj" /> 和這個執行個體具有相同的型別和值，為 true，否則為 false。</returns>
      <param name="obj">要與這個執行個體比較的物件，或 null。</param>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.GetHashCode">
      <summary>傳回此執行個體的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])">
      <summary>利用指定的引數叫用目前的建構函式。</summary>
      <returns>與建構函式關聯之類別的執行個體。</returns>
      <param name="parameters">值的陣列，其符合此建構函式的參數數目、順序和型別 (在預設繫結器的條件約束下)。如果這個建構函式不需要參數，則會傳遞 null 或沒有任何元素的陣列，例如 new Object[] {} (在 Visual Basic 中為 New Object() {})。此陣列中沒有明確以值初始化的任何物件，都將含有該物件型別的預設值。對參考型別元素而言，此值為 null。對實值型別元素而言，此值為 0、0.0 或 false 是依特定元素型別而定。</param>
      <exception cref="T:System.MemberAccessException">類別是抽象的。-或-建構函式是類別初始設定式。</exception>
      <exception cref="T:System.MethodAccessException">建構函式為私用或受到保護。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 陣列沒有包含符合這個建構函式所接受型別的值。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用的建構函式擲回例外狀況。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">傳遞的參數數目錯誤。</exception>
      <exception cref="T:System.NotSupportedException">不支援建立 <see cref="T:System.TypedReference" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 型別。</exception>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>在衍生類別中實作時，使用指定的引數叫用目前的建構函式，以便利用指定的繫結器與文化特性驗證引數型別。</summary>
      <returns>與建構函式關聯之類別的執行個體。</returns>
      <param name="invokeAttr">其中一個列舉值，其指定繫結類型。</param>
      <param name="binder">定義一組屬性的物件，並使用反映來啟用繫結、引數型別的強制型轉和成員引動過程。如果 <paramref name="binder" /> 為 null，就會使用 <see cref="P:System.Type.DefaultBinder" />。</param>
      <param name="parameters">Object 型別的陣列，用於比對在 <paramref name="binder" /> 的限制下，這個建構函式的數字、順序和參數的型別。如果這個建構函式不需要參數，請傳遞 null 或包含零個元素的陣列；例如，new Object[] {} (在 Visual Basic 中為 New Object() {})。此陣列中沒有明確以值初始化的任何物件，都將含有該物件型別的預設值。對參考型別元素而言，此值為 null。對實值型別元素而言，此值為 0、0.0 或 false 是依特定元素型別而定。</param>
      <param name="culture">用來控制型別之強制型轉的物件。如果這是 null，則會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 陣列沒有包含符合這個建構函式所接受型別的值，在 <paramref name="binder" /> 的條件約束下。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用的建構函式擲回例外狀況。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">傳遞的參數數目錯誤。</exception>
      <exception cref="T:System.NotSupportedException">不支援建立 <see cref="T:System.TypedReference" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 型別。</exception>
      <exception cref="T:System.MemberAccessException">類別是抽象的。-或-建構函式是類別初始設定式。</exception>
      <exception cref="T:System.MethodAccessException">建構函式為私用或受到保護。</exception>
    </member>
    <member name="P:System.Reflection.ConstructorInfo.MemberType">
      <summary>取得 <see cref="T:System.Reflection.MemberTypes" /> 值，指出此成員為建構函式。</summary>
      <returns>表示此成員是建構函式的值。</returns>
    </member>
    <member name="F:System.Reflection.ConstructorInfo.TypeConstructorName">
      <summary>表示型別建構函式方法儲存在中繼資料時的名稱。此名稱永遠是「.cctor」。此屬性是唯讀的。</summary>
    </member>
    <member name="T:System.Reflection.CustomAttributeData">
      <summary>提供組件 (Assembly)、模組、型別、成員和參數 (已載入僅限反映的內容) 之自訂屬性 (Attribute) 資料的存取。</summary>
    </member>
    <member name="P:System.Reflection.CustomAttributeData.AttributeType">
      <summary>取得屬性的型別。</summary>
      <returns>屬性的型別。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeData.ConstructorArguments">
      <summary>取得針對 <see cref="T:System.Reflection.CustomAttributeData" /> 物件所表示之屬性執行個體而指定的位置引數清單。</summary>
      <returns>結構集合，表示針對自訂屬性執行個體所指定的位置引數。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeData.NamedArguments">
      <summary>取得針對 <see cref="T:System.Reflection.CustomAttributeData" /> 物件所表示之屬性執行個體而指定的具名引數清單。</summary>
      <returns>結構集合，表示針對自訂屬性執行個體所指定的具名引數。</returns>
    </member>
    <member name="T:System.Reflection.CustomAttributeExtensions">
      <summary>包含用於擷取自訂屬性的靜態方法。</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)">
      <summary>擷取套用至指定組件的指定型別的自訂屬性。</summary>
      <returns>符合 <paramref name="T" /> 的自訂屬性，或者如果找不到這種屬性，則為 null。</returns>
      <param name="element">要檢查的組件。</param>
      <typeparam name="T">所要搜尋之屬性的型別。</typeparam>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
      <summary>擷取套用至指定組件的指定型別的自訂屬性。</summary>
      <returns>符合 <paramref name="attributeType" /> 的自訂屬性，或者如果找不到這種屬性，則為 null。</returns>
      <param name="element">要檢查的組件。</param>
      <param name="attributeType">所要搜尋之屬性的型別。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)">
      <summary>擷取套用至指定成員的指定型別的自訂屬性。</summary>
      <returns>符合 <paramref name="T" /> 的自訂屬性，或者如果找不到這種屬性，則為 null。</returns>
      <param name="element">要檢查的成員。</param>
      <typeparam name="T">所要搜尋之屬性的型別。</typeparam>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
      <summary>擷取套用至指定成員的指定型別的自訂屬性，並選擇性地檢查該成員的祖系。</summary>
      <returns>符合 <paramref name="T" /> 的自訂屬性，或者如果找不到這種屬性，則為 null。</returns>
      <param name="element">要檢查的成員。</param>
      <param name="inherit">true 以檢查 <paramref name="element" /> 的祖系；否則為 false。</param>
      <typeparam name="T">所要搜尋之屬性的型別。</typeparam>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
      <summary>擷取套用至指定成員的指定型別的自訂屬性。</summary>
      <returns>符合 <paramref name="attributeType" /> 的自訂屬性，或者如果找不到這種屬性，則為 null。</returns>
      <param name="element">要檢查的成員。</param>
      <param name="attributeType">所要搜尋之屬性的型別。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>擷取套用至指定成員的指定型別的自訂屬性，並選擇性地檢查該成員的祖系。</summary>
      <returns>符合 <paramref name="attributeType" /> 的自訂屬性，或者如果找不到這種屬性，則為 null。</returns>
      <param name="element">要檢查的成員。</param>
      <param name="attributeType">所要搜尋之屬性的型別。</param>
      <param name="inherit">true 以檢查 <paramref name="element" /> 的祖系；否則為 false。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)">
      <summary>擷取套用至指定參數的指定模組的自訂屬性。</summary>
      <returns>符合 <paramref name="T" /> 的自訂屬性，或者如果找不到這種屬性，則為 null。</returns>
      <param name="element">要檢查的模組。</param>
      <typeparam name="T">所要搜尋之屬性的型別。</typeparam>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)">
      <summary>擷取套用至指定參數的指定模組的自訂屬性。</summary>
      <returns>符合 <paramref name="attributeType" /> 的自訂屬性，或者如果找不到這種屬性，則為 null。</returns>
      <param name="element">要檢查的模組。</param>
      <param name="attributeType">所要搜尋之屬性的型別。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo)">
      <summary>擷取套用至指定參數的指定型別的自訂屬性。</summary>
      <returns>符合 <paramref name="T" /> 的自訂屬性，或者如果找不到這種屬性，則為 null。</returns>
      <param name="element">要檢查的參數。</param>
      <typeparam name="T">所要搜尋之屬性的型別。</typeparam>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>擷取套用至指定參數的指定型別的自訂屬性，並選擇性地檢查該參數的祖系。</summary>
      <returns>符合 <paramref name="T" /> 的自訂屬性，或者如果找不到這種屬性，則為 null。</returns>
      <param name="element">要檢查的參數。</param>
      <param name="inherit">true 以檢查 <paramref name="element" /> 的祖系；否則為 false。</param>
      <typeparam name="T">所要搜尋之屬性的型別。</typeparam>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
      <summary>擷取套用至指定參數的指定型別的自訂屬性。</summary>
      <returns>符合 <paramref name="attributeType" /> 的自訂屬性，或者如果找不到這種屬性，則為 null。</returns>
      <param name="element">要檢查的參數。</param>
      <param name="attributeType">所要搜尋之屬性的型別。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>擷取套用至指定參數的指定型別的自訂屬性，並選擇性地檢查該參數的祖系。</summary>
      <returns>符合 <paramref name="attributeType" /> 的自訂屬性，或者如果找不到這種屬性，則為 null。</returns>
      <param name="element">要檢查的參數。</param>
      <param name="attributeType">所要搜尋之屬性的型別。</param>
      <param name="inherit">true 以檢查 <paramref name="element" /> 的祖系；否則為 false。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)">
      <summary>擷取套用至指定組件的指定型別的自訂屬性集合。</summary>
      <returns>套用至 <paramref name="element" /> 並符合 <paramref name="T" /> 的自訂屬性集合，或者如果不存在這類自訂屬性，則為空集合。</returns>
      <param name="element">要檢查的組件。</param>
      <typeparam name="T">所要搜尋之屬性的型別。</typeparam>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)">
      <summary>擷取套用至指定組件的自訂屬性集合。</summary>
      <returns>套用至 <paramref name="element" /> 的自訂屬性集合，或者如果不存在這類自訂屬性，則為空集合。</returns>
      <param name="element">要檢查的組件。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
      <summary>擷取套用至指定組件的指定型別的自訂屬性集合。</summary>
      <returns>套用至 <paramref name="element" /> 並符合 <paramref name="attributeType" /> 的自訂屬性集合，或者如果不存在這類自訂屬性，則為空集合。</returns>
      <param name="element">要檢查的組件。</param>
      <param name="attributeType">所要搜尋之屬性的型別。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)">
      <summary>擷取套用至指定成員的自訂屬性集合。</summary>
      <returns>套用至 <paramref name="element" /> 的自訂屬性集合，或者如果不存在這類自訂屬性，則為空集合。</returns>
      <param name="element">要檢查的成員。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)">
      <summary>擷取套用至指定成員的指定型別的自訂屬性集合。</summary>
      <returns>套用至 <paramref name="element" /> 並符合 <paramref name="T" /> 的自訂屬性集合，或者如果不存在這類自訂屬性，則為空集合。</returns>
      <param name="element">要檢查的成員。</param>
      <typeparam name="T">所要搜尋之屬性的型別。</typeparam>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
      <summary>擷取套用至指定成員的指定型別的自訂屬性集合，並選擇性地檢查該成員的祖系。</summary>
      <returns>套用至 <paramref name="element" /> 並符合 <paramref name="T" /> 的自訂屬性集合，或者如果不存在這類自訂屬性，則為空集合。</returns>
      <param name="element">要檢查的成員。</param>
      <param name="inherit">true 以檢查 <paramref name="element" /> 的祖系；否則為 false。</param>
      <typeparam name="T">所要搜尋之屬性的型別。</typeparam>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
      <summary>擷取套用至指定成員的自訂屬性集合，並選擇性地檢查該成員的祖系。</summary>
      <returns>套用至符合指定準則的 <paramref name="element" /> 的自訂屬性集合，或者如果不存在這類自訂屬性，則為空集合。</returns>
      <param name="element">要檢查的成員。</param>
      <param name="inherit">true 以檢查 <paramref name="element" /> 的祖系；否則為 false。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
      <summary>擷取套用至指定成員的指定型別的自訂屬性集合。</summary>
      <returns>套用至 <paramref name="element" /> 並符合 <paramref name="attributeType" /> 的自訂屬性集合，或者如果不存在這類自訂屬性，則為空集合。</returns>
      <param name="element">要檢查的成員。</param>
      <param name="attributeType">所要搜尋之屬性的型別。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>擷取套用至指定成員的指定型別的自訂屬性集合，並選擇性地檢查該成員的祖系。</summary>
      <returns>套用至 <paramref name="element" /> 並符合 <paramref name="attributeType" /> 的自訂屬性集合，或者如果不存在這類自訂屬性，則為空集合。</returns>
      <param name="element">要檢查的成員。</param>
      <param name="attributeType">所要搜尋之屬性的型別。</param>
      <param name="inherit">true 以檢查 <paramref name="element" /> 的祖系；否則為 false。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)">
      <summary>擷取套用至指定模組的自訂屬性集合。</summary>
      <returns>套用至 <paramref name="element" /> 的自訂屬性集合，或者如果不存在這類自訂屬性，則為空集合。</returns>
      <param name="element">要檢查的模組。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)">
      <summary>擷取套用至指定模組的指定型別的自訂屬性集合。</summary>
      <returns>套用至 <paramref name="element" /> 並符合 <paramref name="T" /> 的自訂屬性集合，或者如果不存在這類自訂屬性，則為空集合。</returns>
      <param name="element">要檢查的模組。</param>
      <typeparam name="T">所要搜尋之屬性的型別。</typeparam>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)">
      <summary>擷取套用至指定模組的指定型別的自訂屬性集合。</summary>
      <returns>套用至 <paramref name="element" /> 並符合 <paramref name="attributeType" /> 的自訂屬性集合，或者如果不存在這類自訂屬性，則為空集合。</returns>
      <param name="element">要檢查的模組。</param>
      <param name="attributeType">所要搜尋之屬性的型別。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <summary>擷取套用至指定參數的自訂屬性集合。</summary>
      <returns>套用至 <paramref name="element" /> 的自訂屬性集合，或者如果不存在這類自訂屬性，則為空集合。</returns>
      <param name="element">要檢查的參數。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo)">
      <summary>擷取套用至指定參數的指定型別的自訂屬性集合。</summary>
      <returns>套用至 <paramref name="element" /> 並符合 <paramref name="T" /> 的自訂屬性集合，或者如果不存在這類自訂屬性，則為空集合。</returns>
      <param name="element">要檢查的參數。</param>
      <typeparam name="T">所要搜尋之屬性的型別。</typeparam>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>擷取套用至指定參數的自訂屬性集合，並選擇性地檢查該參數的祖系。</summary>
      <returns>套用至 <paramref name="element" /> 的自訂屬性集合，或者如果不存在這類自訂屬性，則為空集合。</returns>
      <param name="element">要檢查的參數。</param>
      <param name="inherit">true 以檢查 <paramref name="element" /> 的祖系；否則為 false。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>擷取套用至指定參數的指定型別的自訂屬性集合，並選擇性地檢查該參數的祖系。</summary>
      <returns>套用至 <paramref name="element" /> 並符合 <paramref name="T" /> 的自訂屬性集合，或者如果不存在這類自訂屬性，則為空集合。</returns>
      <param name="element">要檢查的參數。</param>
      <param name="inherit">true 以檢查 <paramref name="element" /> 的祖系；否則為 false。</param>
      <typeparam name="T">所要搜尋之屬性的型別。</typeparam>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
      <summary>擷取套用至指定參數的指定型別的自訂屬性集合。</summary>
      <returns>套用至 <paramref name="element" /> 並符合 <paramref name="attributeType" /> 的自訂屬性集合，或者如果不存在這類自訂屬性，則為空集合。</returns>
      <param name="element">要檢查的參數。</param>
      <param name="attributeType">所要搜尋之屬性的型別。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>擷取套用至指定參數的指定型別的自訂屬性集合，並選擇性地檢查該參數的祖系。</summary>
      <returns>套用至 <paramref name="element" /> 並符合 <paramref name="attributeType" /> 的自訂屬性集合，或者如果不存在這類自訂屬性，則為空集合。</returns>
      <param name="element">要檢查的參數。</param>
      <param name="attributeType">所要搜尋之屬性的型別。</param>
      <param name="inherit">true 以檢查 <paramref name="element" /> 的祖系；否則為 false。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)">
      <summary>指出指定型別的自訂屬性是否套用至指定組件。</summary>
      <returns>如果指定型別的屬性套用至 <paramref name="element" />，則為 true；否則為 false。</returns>
      <param name="element">要檢查的組件。</param>
      <param name="attributeType">要搜尋的屬性型別。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)">
      <summary>指出指定型別的自訂屬性是否套用至指定成員。</summary>
      <returns>如果指定型別的屬性套用至 <paramref name="element" />，則為 true；否則為 false。</returns>
      <param name="element">要檢查的成員。</param>
      <param name="attributeType">所要搜尋之屬性的型別。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>指出指定型別的自訂屬性是否套用至指定成員，而且可選擇性地套用至其祖系。</summary>
      <returns>如果指定型別的屬性套用至 <paramref name="element" />，則為 true；否則為 false。</returns>
      <param name="element">要檢查的成員。</param>
      <param name="attributeType">要搜尋的屬性型別。</param>
      <param name="inherit">true 以檢查 <paramref name="element" /> 的祖系；否則為 false。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)">
      <summary>指出指定型別的自訂屬性是否套用至指定模組。</summary>
      <returns>如果指定型別的屬性套用至 <paramref name="element" /> 則為 true；否則為 false。</returns>
      <param name="element">要檢查的模組。</param>
      <param name="attributeType">所要搜尋之屬性的型別。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type)">
      <summary>指出指定型別的自訂屬性是否套用至指定參數。</summary>
      <returns>如果指定型別的屬性套用至 <paramref name="element" />，則為 true；否則為 false。</returns>
      <param name="element">要檢查的參數。</param>
      <param name="attributeType">所要搜尋之屬性的型別。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>指出指定型別的自訂屬性是否套用至指定參數，而且可選擇性地套用至其祖系。</summary>
      <returns>如果指定型別的屬性套用至 <paramref name="element" />，則為 true；否則為 false。</returns>
      <param name="element">要檢查的參數。</param>
      <param name="attributeType">所要搜尋之屬性的型別。</param>
      <param name="inherit">true 以檢查 <paramref name="element" /> 的祖系；否則為 false。</param>
    </member>
    <member name="T:System.Reflection.CustomAttributeFormatException">
      <summary>自訂屬性 (Attribute) 的二進位格式無效時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.Reflection.CustomAttributeFormatException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.String)">
      <summary>使用指定的訊息來初始化 <see cref="T:System.Reflection.CustomAttributeFormatException" /> 類別的新執行個體。</summary>
      <param name="message">訊息，表示擲回此例外狀況的原因。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.Reflection.CustomAttributeFormatException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Reflection.CustomAttributeNamedArgument">
      <summary>表示在僅限反映的內容中自訂屬性 (Attribute) 的具名引數。</summary>
    </member>
    <member name="P:System.Reflection.CustomAttributeNamedArgument.IsField">
      <summary>取得一值，指出具名引數是否為欄位。</summary>
      <returns>如果具名引數為欄位則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeNamedArgument.MemberName">
      <summary>取得將用來設定具名引數的屬性成員名稱。</summary>
      <returns>將用來設定具名引數的屬性成員名稱。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeNamedArgument.TypedValue">
      <summary>取得 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 結構，此結構可用來取得目前具名引數的型別和值。</summary>
      <returns>結構，此結構可用來取得目前具名引數的型別和值。</returns>
    </member>
    <member name="T:System.Reflection.CustomAttributeTypedArgument">
      <summary>表示在僅限反映的內容中自訂屬性 (Attribute) 的引數，或是陣列引數的元素。</summary>
    </member>
    <member name="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType">
      <summary>取得引數或陣列引數元素的型別。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示引數或陣列元素的型別。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeTypedArgument.Value">
      <summary>針對簡單引數或陣列引數元素取得引數的值；針對陣列引數取得值集合。</summary>
      <returns>表示引數值或元素值的物件，或表示陣列型別引數值之 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 物件的泛型 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="T:System.Reflection.DefaultMemberAttribute">
      <summary>定義 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 所使用之預設成員的型別成員。</summary>
    </member>
    <member name="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.DefaultMemberAttribute" /> 類別的新執行個體。</summary>
      <param name="memberName">String，包含要叫用的成員名稱。這可能是建構函式、方法、屬性或欄位。叫用成員時，必須指定適合的引動過程屬性。類別的預設成員可以藉由將空 String 傳遞為成員名稱的方式來指定。型別的預設成員使用 DefaultMemberAttribute 自訂屬性來標記，或以一般方式在 COM 中標記。</param>
    </member>
    <member name="P:System.Reflection.DefaultMemberAttribute.MemberName">
      <summary>從屬性取得名稱。</summary>
      <returns>表示成員名稱的字串。</returns>
    </member>
    <member name="T:System.Reflection.EventAttributes">
      <summary>指定事件的屬性 (Attribute)。</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.None">
      <summary>指定事件沒有屬性。</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.ReservedMask">
      <summary>指定保留的旗標僅供 Common Language Runtime 使用。</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.RTSpecialName">
      <summary>指定 Common Language Runtime 應該檢查名稱編碼方式。</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.SpecialName">
      <summary>指定由名稱所描述事件的特殊性。</summary>
    </member>
    <member name="T:System.Reflection.EventInfo">
      <summary>探索事件的屬性 (Attribute) 並提供事件中繼資料 (Metadata) 的存取。</summary>
    </member>
    <member name="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>在事件來源中加入事件處理常式。</summary>
      <param name="target">事件的來源。</param>
      <param name="handler">當目標引發事件時，封裝要被叫用的方法。</param>
      <exception cref="T:System.InvalidOperationException">此事件沒有公用 add 存取子。</exception>
      <exception cref="T:System.ArgumentException">傳入的處理常式無法使用。</exception>
      <exception cref="T:System.Reflection.TargetException">
        <paramref name="target" /> 參數為 null，而且事件不是靜態的。-或-<see cref="T:System.Reflection.EventInfo" /> 未在目標上宣告。</exception>
      <exception cref="T:System.MemberAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.AddMethod">
      <summary>取得事件之 <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> 方法的 <see cref="T:System.Reflection.MethodInfo" /> 物件，包括 non-public 方法。</summary>
      <returns>
        <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> 方法的 <see cref="T:System.Reflection.MethodInfo" /> 物件。</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.Attributes">
      <summary>取得此事件的屬性。</summary>
      <returns>此事件的屬性。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.Equals(System.Object)">
      <summary>傳回值，指出執行個體是否等於指定的物件。</summary>
      <returns>如果 <paramref name="obj" /> 和這個執行個體具有相同的型別和值，為 true，否則為 false。</returns>
      <param name="obj">要與這個執行個體比較的物件，或 null。</param>
    </member>
    <member name="P:System.Reflection.EventInfo.EventHandlerType">
      <summary>取得與這個事件相關之目前的事件處理常式委派之 Type 物件。</summary>
      <returns>委派事件處理常式。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetAddMethod">
      <summary>傳回用於將事件處理常式委派加入事件來源的方法。</summary>
      <returns>用來將事件處理常式委派加入事件來源的方法，如果方法不是 public，為 null。</returns>
      <exception cref="T:System.MemberAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
      <summary>當在衍生類別中覆寫時，會傳回用於將事件處理常式委派新增到事件來源的方法，並且指定是否於目前事件為 non-public 時傳回方法。</summary>
      <returns>用來將事件處理常式委派加入事件來源的方法，如果 <paramref name="nonPublic" /> 為 false 且方法不是 public，為 null。</returns>
      <param name="nonPublic">如果是 non-public，true 表示要傳回方法，否則為 false。</param>
      <exception cref="T:System.MemberAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetHashCode">
      <summary>傳回此執行個體的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRaiseMethod">
      <summary>傳回當引發事件時所呼叫的方法。</summary>
      <returns>當引發事件時所呼叫的方法。</returns>
      <exception cref="T:System.MemberAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
      <summary>當在衍生類別中覆寫時，會傳回引發事件時所呼叫的方法，並指定是否要傳回 non-public 方法。</summary>
      <returns>當引發事件時所呼叫的方法。</returns>
      <param name="nonPublic">如果可以傳回非公用方法，為 true；否則為 false。</param>
      <exception cref="T:System.MemberAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRemoveMethod">
      <summary>會傳回用來將事件處理常式委派從事件來源移除的方法。</summary>
      <returns>用來將事件處理常式委派自事件來源移除的方法，如果方法不是 public，為 null。</returns>
      <exception cref="T:System.MemberAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
      <summary>當在衍生類別中覆寫時，指定否要傳回 non-public 方法，擷取 <see cref="T:System.Reflection.MethodInfo" /> 物件以便移除事件的方法。</summary>
      <returns>用來將事件處理常式委派自事件來源移除的方法，如果 <paramref name="nonPublic" /> 為 false 且方法不是 public，為 null。</returns>
      <param name="nonPublic">如果目前事件為 non-public 時，true 表示要傳回方法，否則為 false。</param>
      <exception cref="T:System.MemberAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.IsMulticast">
      <summary>取得值，指出事件是否為多點傳送。</summary>
      <returns>如果委派為多點傳送委派的執行個體，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.IsSpecialName">
      <summary>取得值，指出 <see cref="T:System.Reflection.EventInfo" /> 是否具有特殊意義的名稱。</summary>
      <returns>如果這個事件具有特殊名稱，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.MemberType">
      <summary>取得 <see cref="T:System.Reflection.MemberTypes" /> 值，指出此成員為事件。</summary>
      <returns>指出此成員為事件的值。</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.RaiseMethod">
      <summary>取得引發事件時所呼叫的方法，包括 non-public 方法。</summary>
      <returns>當引發事件時所呼叫的方法。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>從事件來源移除事件處理常式。</summary>
      <param name="target">事件的來源。</param>
      <param name="handler">要從事件來源中取消連結的委派。</param>
      <exception cref="T:System.InvalidOperationException">此事件沒有公用 remove 存取子。</exception>
      <exception cref="T:System.ArgumentException">傳入的處理常式無法使用。</exception>
      <exception cref="T:System.Reflection.TargetException">
        <paramref name="target" /> 參數為 null，而且事件不是靜態的。-或-<see cref="T:System.Reflection.EventInfo" /> 未在目標上宣告。</exception>
      <exception cref="T:System.MemberAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.RemoveMethod">
      <summary>取得 MethodInfo 物件，可用以移除事件的方法，包括 non-public 方法。</summary>
      <returns>MethodInfo 物件，可用以移除事件的方法。</returns>
    </member>
    <member name="T:System.Reflection.FieldAttributes">
      <summary>指定欄位的屬性。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Assembly">
      <summary>該欄位在整個組件中都可以存取。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamANDAssem">
      <summary>欄位只能由此組件中的子型別存取。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Family">
      <summary>欄位只能由型別和子型別存取。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamORAssem">
      <summary>欄位可以在任何地方和整個組件中由子型別存取。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FieldAccessMask">
      <summary>指定特定欄位的存取層級。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasDefault">
      <summary>欄位有預設值。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldMarshal">
      <summary>欄位有封送處理資訊。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldRVA">
      <summary>此欄位有相對的虛擬位址 (RVA)。RVA 為目前影像中方法主體的位置，就像相對於影像檔所在位置的開始位址。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.InitOnly">
      <summary>欄位只有被初始化且在初始化後無法被寫入。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Literal">
      <summary>欄位的值為編譯時期常數 (靜態或早期繫結)。對其進行設定的任何嘗試都會擲回 <see cref="T:System.FieldAccessException" />。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.NotSerialized">
      <summary>當型別為遠端時，欄位不必序列化。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PinvokeImpl">
      <summary>保留的。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Private">
      <summary>欄位只能由父型別存取。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PrivateScope">
      <summary>此欄位不可以被參考。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Public">
      <summary>欄位可以讓能見到此範圍的任何成員存取。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.ReservedMask">
      <summary>保留的。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.RTSpecialName">
      <summary>Common Language Runtime (內部中繼資料 API) 應檢查名稱編碼方式。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.SpecialName">
      <summary>指定特殊欄位，具有描述欄位是如何特殊的名稱。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Static">
      <summary>表示定義型別的欄位，不然它就是一個執行個體。</summary>
    </member>
    <member name="T:System.Reflection.FieldInfo">
      <summary>探索欄位屬性 (Attribute) 並提供欄位中繼資料 (Metadata) 的存取。</summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.Attributes">
      <summary>取得與此欄位關聯的屬性。</summary>
      <returns>此欄位的屬性。</returns>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.Equals(System.Object)">
      <summary>傳回值，指出執行個體是否等於指定的物件。</summary>
      <returns>如果 <paramref name="obj" /> 和這個執行個體具有相同的型別和值，為 true，否則為 false。</returns>
      <param name="obj">要與這個執行個體比較的物件，或 null。</param>
    </member>
    <member name="P:System.Reflection.FieldInfo.FieldHandle">
      <summary>取得欄位內部中繼資料表示的控制代碼。</summary>
      <returns>欄位內部中繼資料表示的控制代碼。</returns>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.FieldType">
      <summary>取得此欄位物件的型別。</summary>
      <returns>此欄位物件的型別。</returns>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
      <summary>取得指定的控制代碼所表示之欄位的 <see cref="T:System.Reflection.FieldInfo" />。</summary>
      <returns>
        <paramref name="handle" /> 所指定的欄位。</returns>
      <param name="handle">結構，包含欄位內部中繼資料表示的控制代碼。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 都是無效的。</exception>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary>針對指定的泛型型別，取得指定的控制代碼所表示之欄位的 <see cref="T:System.Reflection.FieldInfo" />。</summary>
      <returns>在 <paramref name="declaringType" /> 所指定的泛型型別中，<paramref name="handle" /> 所指定的欄位。</returns>
      <param name="handle">結構，包含欄位內部中繼資料表示的控制代碼。</param>
      <param name="declaringType">結構，包含定義欄位之泛型型別的控制代碼。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 無效。-或-<paramref name="declaringType" /> 與 <paramref name="handle" /> 不相容。例如，<paramref name="declaringType" /> 是泛型型別定義的執行階段型別控制代碼，而且 <paramref name="handle" /> 來自建構的型別。請參閱「備註」。</exception>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetHashCode">
      <summary>傳回此執行個體的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetRawConstantValue">
      <summary>根據編譯器，傳回與欄位相關聯的常值。</summary>
      <returns>與欄位相關聯的常值。如果常值是元素值為零的類別型別，則傳回值會是 null。</returns>
      <exception cref="T:System.InvalidOperationException">Unmanaged 中繼資料中的常數資料表不包含目前屬性的常數值。</exception>
      <exception cref="T:System.FormatException">值的型別不是 Common Language Specification (CLS) 允許的其中一個型別。(請參閱 ECMA Partition II 規格)。</exception>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetValue(System.Object)">
      <summary>在衍生類別中覆寫時，傳回由指定物件支援的欄位值。</summary>
      <returns>物件，含有此執行個體所反映的欄位值。</returns>
      <param name="obj">將會傳回欄位值的物件。</param>
      <exception cref="T:System.Reflection.TargetException">欄位為非靜態且 <paramref name="obj" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">欄位標記為常值，但是該欄位並沒有接受其中一個常值型別。</exception>
      <exception cref="T:System.FieldAccessException">無法存取欄位。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 的類別既未宣告也未繼承方法。</exception>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsAssembly">
      <summary>取得值，指出 <see cref="F:System.Reflection.FieldAttributes.Assembly" /> 是否描述此欄位的潛在可視性；亦即，最多只有相同組件 (Assembly) 中的其他型別可以看見該欄位，組件外部的衍生型別 (Derived Type) 則看不見它。</summary>
      <returns>如果 <see cref="F:System.Reflection.FieldAttributes.Assembly" /> 已精確描述這個欄位的可視性，為 true，否則為 false。</returns>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamily">
      <summary>取得值，指出 <see cref="F:System.Reflection.FieldAttributes.Family" /> 是否描述此欄位的可視性；亦即，您只能在其類別和衍生類別內看見該欄位。</summary>
      <returns>如果 <see cref="F:System.Reflection.FieldAttributes.Family" /> 已精確描述此欄位的存取權限，為 true，否則為 false。</returns>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
      <summary>取得值，指出 <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /> 是否描述此欄位的可視性；亦即，只有當該衍生類別位於相同的組件時，才能存取該欄位。</summary>
      <returns>如果 <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /> 已精確描述這個欄位的存取權限，為 true，否則為 false。</returns>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
      <summary>取得值，指出 <see cref="F:System.Reflection.FieldAttributes.FamORAssem" /> 是否描述此欄位的潛在可視性；亦即，任何位置的衍生類別以及相同組件中的類別都可以存取該欄位。</summary>
      <returns>如果 <see cref="F:System.Reflection.FieldAttributes.FamORAssem" /> 已精確描述這個欄位的存取權限，為 true，否則為 false。</returns>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsInitOnly">
      <summary>取得值，指出欄位是否只能在建構函式主體中設定。</summary>
      <returns>如果欄位已設定 InitOnly 屬性，為 true，否則為 false。</returns>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsLiteral">
      <summary>取得值，指出值是否在編譯時期被寫入並且無法變更。</summary>
      <returns>如果欄位已設定 Literal 屬性，為 true，否則為 false。</returns>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsNotSerialized">
      <summary>取得值，這個值表示這個欄位是否有 NotSerialized 屬性。</summary>
      <returns>如果欄位已設定 <see cref="F:System.Reflection.FieldAttributes.NotSerialized" /> 屬性，為 true，否則為 false。</returns>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPinvokeImpl">
      <summary>取得值，這個值表示對應的 PinvokeImpl 屬性是否在 <see cref="T:System.Reflection.FieldAttributes" /> 中設定。</summary>
      <returns>如果欄位已設定 <see cref="F:System.Reflection.FieldAttributes.PinvokeImpl" /> 屬性，為 true，否則為 false。</returns>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPrivate">
      <summary>取得值，指出欄位是否為私用的。</summary>
      <returns>如果欄位是私用的，為 true，否則為 false。</returns>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPublic">
      <summary>取得值，指出欄位是否為 public。</summary>
      <returns>如果欄位是公用的，為 true，否則為 false。</returns>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSpecialName">
      <summary>取得值，指出欄位是否具有特殊意義的名稱。</summary>
      <returns>如果欄位已設定 <see cref="F:System.Reflection.FieldAttributes.SpecialName" /> 屬性，為 true，否則為 false。</returns>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsStatic">
      <summary>取得值，這個值表示欄位是否為 static (在 Visual Basic 中為 Shared)。</summary>
      <returns>如果欄位是 static，為 true，否則為 false。</returns>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.MemberType">
      <summary>取得值，指出此成員是欄位。</summary>
      <returns>值，指出此成員是欄位。</returns>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
      <summary>設定由指定之物件支援的欄位值。</summary>
      <param name="obj">將要設定欄位值的物件。</param>
      <param name="value">要指派給欄位的值。</param>
      <exception cref="T:System.FieldAccessException">無法存取欄位。</exception>
      <exception cref="T:System.Reflection.TargetException">
        <paramref name="obj" /> 參數為 null，且該欄位是執行個體欄位。</exception>
      <exception cref="T:System.ArgumentException">物件上沒有這個欄位。-或-<paramref name="value" /> 參數無法轉換並儲存在欄位中。</exception>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>在衍生類別中覆寫時，使用指定的型別轉換條件約束來設定欄位值。</summary>
      <param name="obj">將要設定欄位值的物件。</param>
      <param name="value">要指派給欄位的值。</param>
      <param name="invokeAttr">所需的繫結型別。</param>
      <param name="binder">物件，讓此欄位繫結至 <paramref name="obj" />，並讓 <paramref name="value" /> 強制型轉為 <see cref="P:System.Reflection.FieldInfo.FieldType" />。如果 <paramref name="binder" /> 為 null，則會使用 <see cref="P:System.Type.DefaultBinder" />。</param>
      <param name="culture">文化特性，控制 <paramref name="obj" /> 強制型轉為 <see cref="P:System.Reflection.FieldInfo.FieldType" />。</param>
      <exception cref="T:System.FieldAccessException">無法存取欄位。</exception>
      <exception cref="T:System.Reflection.TargetException">
        <paramref name="obj" /> 參數為 null，且該欄位是執行個體欄位。</exception>
      <exception cref="T:System.ArgumentException">物件上沒有這個欄位。-或-<paramref name="value" /> 參數無法轉換並儲存在欄位中。</exception>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="T:System.Reflection.GenericParameterAttributes">
      <summary>描述泛型型別或方法之泛型型別參數的條件約束。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.Contravariant">
      <summary>泛型型別參數是 Contravariant。Contravariant 型別參數可以在方法簽章中以參數型別顯示。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.Covariant">
      <summary>泛型型別參數是 Covariant。Covariant 型別參數可以顯示為方法的結果型別、唯讀欄位的型別、宣告的基底型別或實作介面。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint">
      <summary>僅當一個型別具有無參數的建構函式時，才可以取代泛型型別參數。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.None">
      <summary>沒有特殊旗標。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint">
      <summary>僅當一個型別為值型別 (Value Type) 且不為 null 時，才可以取代泛型型別參數。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint">
      <summary>僅當一個型別為參考型別時，才可以取代泛型型別參數。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.SpecialConstraintMask">
      <summary>選取所有特殊條件約束旗標的組合。此值是使用邏輯 OR 合併下列旗標的結果：<see cref="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint" />、<see cref="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint" /> 和 <see cref="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint" />。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.VarianceMask">
      <summary>選取所有變異數旗標的組合。此值是使用邏輯 OR 合併下列旗標的結果：<see cref="F:System.Reflection.GenericParameterAttributes.Contravariant" /> 和 <see cref="F:System.Reflection.GenericParameterAttributes.Covariant" />。</summary>
    </member>
    <member name="T:System.Reflection.ICustomAttributeProvider">
      <summary>提供自訂屬性 (Attribute) 給支援它們的反映物件。</summary>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)">
      <summary>傳回在此成員上定義的所有自訂屬性的陣列 (除了具名屬性以外)，如果沒有自訂屬性，則傳回空陣列。</summary>
      <returns>表示自訂屬性的物件陣列，或空陣列。</returns>
      <param name="inherit">當 true 時，查閱繼承自訂屬性的階層鍊結。</param>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">在此成員上定義了一個以上 <paramref name="attributeType" /> 型別的屬性。</exception>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>傳回在此成員上定義且由型別所識別的自訂屬性陣列，如果沒有該型別的自訂屬性，則傳回空陣列。</summary>
      <returns>表示自訂屬性的物件陣列，或空陣列。</returns>
      <param name="attributeType">自訂屬性的型別。</param>
      <param name="inherit">當 true 時，查閱繼承自訂屬性的階層鍊結。</param>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">在此成員上定義了一個以上 <paramref name="attributeType" /> 型別的屬性。</exception>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)">
      <summary>指出在此成員上是否定義了一個以上的 <paramref name="attributeType" /> 執行個體。</summary>
      <returns>如果在此成員上定義 <paramref name="attributeType" />，為 true，否則為 false。</returns>
      <param name="attributeType">自訂屬性的型別。</param>
      <param name="inherit">當 true 時，查閱繼承自訂屬性的階層鍊結。</param>
    </member>
    <member name="T:System.Reflection.InterfaceMapping">
      <summary>將介面的對應擷取到實作該介面的類別上的實質方法中。</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.InterfaceMethods">
      <summary>顯示在介面上定義的方法。</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.InterfaceType">
      <summary>顯示表示介面的型別。</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.TargetMethods">
      <summary>顯示實作介面的方法。</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.TargetType">
      <summary>表示用於建立介面對應的型別。</summary>
    </member>
    <member name="T:System.Reflection.IntrospectionExtensions">
      <summary>包含用於轉換 <see cref="T:System.Type" /> 物件的方法。</summary>
    </member>
    <member name="M:System.Reflection.IntrospectionExtensions.GetTypeInfo(System.Type)">
      <summary>傳回指定型別的 <see cref="T:System.Reflection.TypeInfo" /> 表示法。</summary>
      <returns>轉換的物件。</returns>
      <param name="type">要轉換的型別。</param>
    </member>
    <member name="T:System.Reflection.IReflect">
      <summary>與 IDispatch 介面交互操作。</summary>
    </member>
    <member name="M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>傳回對應至指定之欄位和繫結端旗標的 <see cref="T:System.Reflection.FieldInfo" /> 物件。</summary>
      <returns>A <see cref="T:System.Reflection.FieldInfo" /> object 物件，包含符合 <paramref name="bindingAttr" />中所指定搜尋條件約束的具名物件欄位資訊。</returns>
      <param name="name">要尋找的欄位名稱。</param>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">物件使用相同名稱實作多重欄位。</exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)">
      <summary>傳回 <see cref="T:System.Reflection.FieldInfo" /> 物件陣列，對應至目前類別的所有欄位。</summary>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 物件陣列，包含符合 <paramref name="bindingAttr" /> 中所指定搜尋條件約束的這個反映物件所有欄位資訊。</returns>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
    </member>
    <member name="M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>擷取 <see cref="T:System.Reflection.MemberInfo" /> 物件陣列，對應於所有 public 成員或所有符合指定名稱的成員。</summary>
      <returns>符合 <paramref name="name" /> 參數的 <see cref="T:System.Reflection.MemberInfo" /> 物件陣列。</returns>
      <param name="name">要尋找的成員名稱。</param>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
    </member>
    <member name="M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)">
      <summary>擷取 <see cref="T:System.Reflection.MemberInfo" /> 物件陣列，對應至所有 public 成員或所有目前類別的成員。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件陣列，包含這個反映物件的所有成員資訊。</returns>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>擷取 <see cref="T:System.Reflection.MethodInfo" /> 物件，對應至所指定搜尋條件約束下的指定方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />物件，包含方法資訊，並且符合是根據 <paramref name="bindingAttr" /> 中所指定的方法名稱和搜尋條件約束。</returns>
      <param name="name">要尋找的成員名稱。</param>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">物件使用相同名稱實作多重方法。</exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>使用 <see cref="T:System.Type" /> 陣列從多載方法中選擇，擷取對應於指定方法的 <see cref="T:System.Reflection.MethodInfo" /> 物件。</summary>
      <returns>要求方法，符合所有指定參數。</returns>
      <param name="name">要尋找的成員名稱。</param>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
      <param name="binder">實作 <see cref="T:System.Reflection.Binder" /> 的物件，包含與此方法相關聯的屬性。</param>
      <param name="types">陣列，用來在多載方法中選擇。</param>
      <param name="modifiers">參數修飾詞陣列，用來使用其中型別已修改的參數簽章來進行繫結工作。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">物件使用相同名稱實作多重方法。</exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)">
      <summary>使用所有 public 方法或所有目前類別的方法，擷取 <see cref="T:System.Reflection.MethodInfo" /> 物件陣列。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件陣列，包含為符合 <paramref name="bindingAttr" /> 中所指定搜尋條件約束的這個反映物件定義的所有方法。</returns>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)">
      <summary>擷取 <see cref="T:System.Reflection.PropertyInfo" /> 物件陣列，對應於所有 public 屬性或所有目前類別的屬性。</summary>
      <returns>所有屬性的 <see cref="T:System.Reflection.PropertyInfo" /> 物件陣列，定義於反映物件上。</returns>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>擷取 <see cref="T:System.Reflection.PropertyInfo" /> 物件，對應於指定搜尋條件約束下的指定屬性。</summary>
      <returns>所找到屬性的 <see cref="T:System.Reflection.PropertyInfo" /> 物件 (符合 <paramref name="bindingAttr" /> 中所指定的搜尋條件約束) 或 null (如果未找到屬性)。</returns>
      <param name="name">要尋找的屬性名稱。</param>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">物件使用相同名稱實作多重欄位。</exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>擷取 <see cref="T:System.Reflection.PropertyInfo" /> 物件，對應至具有指定之搜尋條件約束的指定屬性。</summary>
      <returns>
        <see cref="T:System.Reflection.PropertyInfo" /> 物件 (用於所找到的屬性，如果在此反映物件中找到具有指定名稱的屬性) 或 null (如果找不到屬性)。</returns>
      <param name="name">要尋找的成員名稱。</param>
      <param name="bindingAttr">繫結屬性，用來控制搜尋。</param>
      <param name="binder">實作 <see cref="T:System.Reflection.Binder" /> 的物件，包含與此方法相關聯的屬性。</param>
      <param name="returnType">屬性的型別。</param>
      <param name="types">陣列，用來在具有相同名稱的多載方法中選擇。</param>
      <param name="modifiers">陣列，用來選擇參數修飾詞。</param>
    </member>
    <member name="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>叫用指定成員。</summary>
      <returns>指定成員。</returns>
      <param name="name">要尋找的成員名稱。</param>
      <param name="invokeAttr">其中一個 <see cref="T:System.Reflection.BindingFlags" /> 引動過程屬性。<paramref name="invokeAttr" /> 參數可能是建構函式、方法、屬性或欄位。必須指定適當的引動過程屬性。藉由將空字串 ("") 傳遞為成員名稱的方式，叫用類別的預設成員。</param>
      <param name="binder">其中一個 <see cref="T:System.Reflection.BindingFlags" /> 位元旗標。實作 <see cref="T:System.Reflection.Binder" />，包含與這個方法相關聯的屬性。</param>
      <param name="target">要在其上叫用指定成員的物件。對於靜態成員來說，會忽略此參數。</param>
      <param name="args">物件陣列，包含要叫用的成員參數的數目、順序和型別。如果沒有參數，則這是空陣列。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 物件陣列。這個參數和 <paramref name="args" />參數具有相同的長度，表示中繼資料中被叫用成員的引數屬性。參數可以具有下列屬性：pdIn、pdOut、pdRetval、pdOptional 及 pdHasDefault。這些分別表示 [In]、[Out]、[retval]、[optional] 和預設參數。這些屬性是由各種互通性 (Interoperability) 服務所使用。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 的執行個體，用於管理型別的強制型轉。例如，<paramref name="culture" /> 要將表示 1000 的 String 轉換為 Double 值時，因為 1000 的表示方式會因不同文化特性而有所不同。如果參數為 null，則會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="namedParameters">參數的 String 陣列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> 為 <see cref="F:System.Reflection.BindingFlags.CreateInstance" />，並且也設定其他位元旗標。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> 不是 <see cref="F:System.Reflection.BindingFlags.CreateInstance" />，而且 <paramref name="name" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> 不是來自 <see cref="T:System.Reflection.BindingFlags" /> 的引動過程屬性。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> 會為屬性或欄位指定 get 和 set。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> 會指定欄位 set 和 Invoke 方法。<paramref name="args" /> 則提供給欄位 get。</exception>
      <exception cref="T:System.ArgumentException">為欄位 set 指定一個以上的引數。</exception>
      <exception cref="T:System.MissingFieldException">找不到欄位或屬性。</exception>
      <exception cref="T:System.MissingMethodException">找不到方法。</exception>
      <exception cref="T:System.MethodAccessException">目前被叫用的成員無法由呼叫端存取。-或-目前被叫用的成員或是包含成員的型別，具有 <see cref="T:System.Security.SecurityCriticalAttribute" /> 屬性。</exception>
    </member>
    <member name="P:System.Reflection.IReflect.UnderlyingSystemType">
      <summary>取得基礎型別，表示 <see cref="T:System.Reflection.IReflect" /> 物件。</summary>
      <returns>表示 <see cref="T:System.Reflection.IReflect" /> 物件的基礎型別。</returns>
    </member>
    <member name="T:System.Reflection.IReflectableType">
      <summary>表示您可以反映的型別。</summary>
    </member>
    <member name="M:System.Reflection.IReflectableType.GetTypeInfo">
      <summary>擷取表示此型別的物件。</summary>
      <returns>表示此型別的物件。</returns>
    </member>
    <member name="T:System.Reflection.LocalVariableInfo">
      <summary>探索區域變數的屬性 (Attribute)，並提供區域變數中繼資料 (Metadata) 的存取。</summary>
    </member>
    <member name="M:System.Reflection.LocalVariableInfo.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.LocalVariableInfo" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.IsPinned">
      <summary>取得 <see cref="T:System.Boolean" /> 值，指出是否在記憶體中 Pin 區域變數所參考的物件。</summary>
      <returns>如果在記憶體中 Pin 變數所參考的物件為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.LocalIndex">
      <summary>取得方法主體內區域變數的索引。</summary>
      <returns>整數值，指出方法主體內區域變數的宣告順序。</returns>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.LocalType">
      <summary>取得區域變數的型別。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示區域變數的型別。</returns>
    </member>
    <member name="M:System.Reflection.LocalVariableInfo.ToString">
      <summary>傳回描述區域變數的使用者可讀字串。</summary>
      <returns>字串，其中顯示區域變數的相關資訊，包括型別名稱、索引以及 Pin 狀態。</returns>
    </member>
    <member name="T:System.Reflection.ManifestResourceInfo">
      <summary>提供對資訊清單 (Manifest) 資源的存取，資訊清單資源就是描述應用程式相依性的 XML 檔案。</summary>
    </member>
    <member name="M:System.Reflection.ManifestResourceInfo.#ctor(System.Reflection.Assembly,System.String,System.Reflection.ResourceLocation)">
      <summary>針對指定之組件和檔案所包含以及有指定之位置的資源，初始化 <see cref="T:System.Reflection.ManifestResourceInfo" /> 類別的新執行個體。</summary>
      <param name="containingAssembly">包含資訊清單資源的組件。</param>
      <param name="containingFileName">含有資訊清單資源的檔名 (如果該檔案與資訊清單檔不同)。</param>
      <param name="resourceLocation">列舉值的位元組合，提供關於資訊清單資源的位置資訊。 </param>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.FileName">
      <summary>如果與資訊清單檔不同時，取得含有資訊清單資源的檔名。</summary>
      <returns>資訊清單資源的檔名。</returns>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.ReferencedAssembly">
      <summary>為資訊清單資源取得包含組件。</summary>
      <returns>資訊清單資源的包含組件。</returns>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.ResourceLocation">
      <summary>取得資訊清單資源的位置。</summary>
      <returns>
        <see cref="T:System.Reflection.ResourceLocation" /> 旗標的位元組合，表示資源清單資源的位置。</returns>
    </member>
    <member name="T:System.Reflection.MemberFilter">
      <summary>表示用來篩選表示 <see cref="T:System.Reflection.MemberInfo" /> 物件陣列中成員清單的委派。</summary>
      <returns>將成員包含於篩選的清單中，為 true；否則為 false。</returns>
      <param name="m">篩選條件套用的 <see cref="T:System.Reflection.MemberInfo" /> 物件。</param>
      <param name="filterCriteria">用來篩選清單的任意物件。</param>
    </member>
    <member name="T:System.Reflection.MemberInfo">
      <summary>取得成員的屬性 (Attribute) 相關資訊，並提供成員中繼資料 (Metadata) 的存取。</summary>
    </member>
    <member name="P:System.Reflection.MemberInfo.CustomAttributes">
      <summary>取得包含這個成員之自訂屬性的集合。</summary>
      <returns>包含這個成員之自訂屬性的集合。</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.DeclaringType">
      <summary>取得宣告此成員的類別。</summary>
      <returns>宣告這個成員之類別的 Type 物件。</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.Equals(System.Object)">
      <summary>傳回值，指出執行個體是否等於指定的物件。</summary>
      <returns>如果 <paramref name="obj" /> 和這個執行個體具有相同的型別和值，為 true，否則為 false。</returns>
      <param name="obj">要與這個執行個體比較的物件，或 null。</param>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
      <summary>在衍生類別中覆寫時，傳回套用至此成員之所有自訂屬性的陣列。</summary>
      <returns>包含套用至此成員之所有自訂屬性的陣列，如果沒有定義屬性，為包含零個元素的陣列。</returns>
      <param name="inherit">true 表示要搜尋這個成員的繼承鏈結以尋找屬性，否則為 false。對於屬性和事件來說，會忽略此參數。請參閱「備註」一節。</param>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>在衍生類別中覆寫時，傳回套用至此成員且由 <see cref="T:System.Type" /> 所識別之自訂屬性的陣列。</summary>
      <returns>套用至此成員之自訂屬性的陣列，如果沒有套用可指派給 <paramref name="attributeType" /> 的屬性，為包含零個元素的陣列。</returns>
      <param name="attributeType">所要搜尋之屬性的型別。只傳回能夠指派給此型別的屬性。</param>
      <param name="inherit">true 表示要搜尋這個成員的繼承鏈結以尋找屬性，否則為 false。對於屬性和事件來說，會忽略此參數。請參閱「備註」一節。</param>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 null。</exception>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetHashCode">
      <summary>傳回此執行個體的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
      <summary>在衍生類別中覆寫時，表示是否已有一或多個具有指定型別或其衍生型別的屬性套用至此成員。</summary>
      <returns>如果已有 <paramref name="attributeType" /> 或其任何衍生型別的一或多個執行個體套用至這個成員，為 true，否則為 false。</returns>
      <param name="attributeType">要搜尋的自訂屬性型別。搜尋包括衍生類型。</param>
      <param name="inherit">true 表示要搜尋這個成員的繼承鏈結以尋找屬性，否則為 false。對於屬性和事件來說，會忽略此參數。請參閱「備註」一節。</param>
    </member>
    <member name="P:System.Reflection.MemberInfo.MemberType">
      <summary>在衍生類別中覆寫時，取得 <see cref="T:System.Reflection.MemberTypes" /> 值，指出成員的型別，如方法、建構函式、事件等等。</summary>
      <returns>成員的型別。</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.MetadataToken">
      <summary>取得可識別中繼資料元素的值。</summary>
      <returns>此值與 <see cref="P:System.Reflection.MemberInfo.Module" /> 結合後，是唯一能識別中繼資料元素。</returns>
      <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Reflection.MemberInfo" /> 表示陣列型別上其項目型別為尚未完成之動態型別的陣列方法，例如 Address。若要在這種情況下取得中繼資料語彙基元，請將 <see cref="T:System.Reflection.MemberInfo" /> 物件傳遞至 <see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /> 方法；或使用 <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> 方法直接取得語彙字元，而不要先使用 <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> 方法取得 <see cref="T:System.Reflection.MethodInfo" />。</exception>
    </member>
    <member name="P:System.Reflection.MemberInfo.Module">
      <summary>取得用於定義型別的模組，該型別宣告以目前 <see cref="T:System.Reflection.MemberInfo" /> 表示的成員。</summary>
      <returns>用於定義型別的 <see cref="T:System.Reflection.Module" />，該型別宣告以目前 <see cref="T:System.Reflection.MemberInfo" /> 表示的成員。</returns>
      <exception cref="T:System.NotImplementedException">未實作此方法。</exception>
    </member>
    <member name="P:System.Reflection.MemberInfo.Name">
      <summary>取得目前成員的名稱。</summary>
      <returns>此成員的名稱。</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.ReflectedType">
      <summary>取得類別物件，是用來取得這個 MemberInfo 的執行個體。</summary>
      <returns>MemberInfo 物件，用來取得此型別物件。</returns>
    </member>
    <member name="T:System.Reflection.MemberTypes">
      <summary>將定義為 MemberInfo 衍生類別的每一個成員型別標記起來。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.All">
      <summary>指定所有成員型別 (Member Type)。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Constructor">
      <summary>指定成員為建構函式，表示 <see cref="T:System.Reflection.ConstructorInfo" /> 成員。0x01 的十六進位值。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Custom">
      <summary>指定成員為自訂成員型別。0x40 的十六進位值。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Event">
      <summary>指定成員為事件，表示 <see cref="T:System.Reflection.EventInfo" /> 成員。0x02 的十六進位值。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Field">
      <summary>指定成員為欄位，表示 <see cref="T:System.Reflection.FieldInfo" /> 成員。0x04 的十六進位值。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Method">
      <summary>指定成員為方法，表示 <see cref="T:System.Reflection.MethodInfo" /> 成員。0x08 的十六進位值。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.NestedType">
      <summary>指定成員為巢狀型別 (Nested Type)，擴充 <see cref="T:System.Reflection.MemberInfo" />。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Property">
      <summary>指定成員為巢狀型別，表示 <see cref="T:System.Reflection.PropertyInfo" /> 成員。0x10 的十六進位值。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.TypeInfo">
      <summary>指定成員為型別，表示 <see cref="F:System.Reflection.MemberTypes.TypeInfo" /> 成員。0x20 的十六進位值。</summary>
    </member>
    <member name="T:System.Reflection.MethodAttributes">
      <summary>指定方法屬性 (Attribute) 的旗標。這些旗標都被定義在 corhdr.h 檔案中。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Abstract">
      <summary>指出類別不提供此方法的實作。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Assembly">
      <summary>指出此組件的任何類別可存取該方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.CheckAccessOnOverride">
      <summary>指出方法只有在它也是可存取時才可以被覆寫。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamANDAssem">
      <summary>指出該方法只能讓此型別的成員，以及此型別在此組件中的衍生型別存取。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Family">
      <summary>指出只有此類別和其衍生類別的成員可以存取該方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamORAssem">
      <summary>指出任何位置的衍生類別以及組件中的任何類別都可存取該方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Final">
      <summary>指出此方法不能被覆寫。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HasSecurity">
      <summary>指出方法具有與它相關的安全性。保留旗標僅供執行階段使用。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HideBySig">
      <summary>指出方法依名稱和簽章隱藏；否則只依名稱隱藏。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.MemberAccessMask">
      <summary>擷取存取範圍資訊。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.NewSlot">
      <summary>指出方法永遠取得 vtable 中的新位置。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PinvokeImpl">
      <summary>指出方法實作經由 PInvoke (平台引動服務) 轉遞。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Private">
      <summary>指出此方法只能讓目前的類別存取。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PrivateScope">
      <summary>指出成員不能被參考。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Public">
      <summary>指出此物件所在範圍內的任何物件可存取該方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RequireSecObject">
      <summary>指出方法呼叫含有安全程式碼的另一個方法。保留旗標僅供執行階段使用。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.ReservedMask">
      <summary>指出保留旗標僅供執行階段使用。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.ReuseSlot">
      <summary>指出方法將重新使用 vtable 中的現有位置。這是預設行為。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RTSpecialName">
      <summary>指出 Common Language Runtime 檢查名稱編碼方式。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.SpecialName">
      <summary>指出方法是特殊方法。該名稱描述此方法是如何特殊。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Static">
      <summary>指出方法是定義在型別上；否則就是定義在每個執行個體 (Instance) 上。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.UnmanagedExport">
      <summary>指出 Managed 方法由 Thunk 匯出到 Unmanaged 程式碼。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Virtual">
      <summary>指出方法是 virtual。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.VtableLayoutMask">
      <summary>擷取 vtable 屬性。</summary>
    </member>
    <member name="T:System.Reflection.MethodBase">
      <summary>提供有關方法和建構函式的資訊。</summary>
    </member>
    <member name="P:System.Reflection.MethodBase.Attributes">
      <summary>取得與此方法相關的屬性 (Attribute)。</summary>
      <returns>方法的屬性。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.CallingConvention">
      <summary>取得值，指出此方法的呼叫慣例。</summary>
      <returns>此方法的呼叫慣例。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.ContainsGenericParameters">
      <summary>取得值，指出泛型方法是否包含未指派的泛型型別參數。</summary>
      <returns>如果目前的 <see cref="T:System.Reflection.MethodBase" /> 物件表示包含未指派泛型型別參數的泛型方法，為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.Equals(System.Object)">
      <summary>傳回值，指出執行個體是否等於指定的物件。</summary>
      <returns>如果 <paramref name="obj" /> 和這個執行個體具有相同的型別和值，為 true，否則為 false。</returns>
      <param name="obj">要與這個執行個體比較的物件，或 null。</param>
    </member>
    <member name="M:System.Reflection.MethodBase.GetCurrentMethod">
      <summary>傳回表示目前正在執行方法的 <see cref="T:System.Reflection.MethodBase" /> 物件。</summary>
      <returns>目前正在執行的方法。</returns>
      <exception cref="T:System.Reflection.TargetException">此成員是以晚期繫結機制叫用的。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetGenericArguments">
      <summary>傳回 <see cref="T:System.Type" /> 物件的陣列，這些物件表示泛型方法的型別引數，或泛型方法定義的型別參數。</summary>
      <returns>陣列，包含泛型方法的型別引數，或泛型方法定義的型別參數。如果目前的方法不是泛型方法，則會傳回空白陣列。</returns>
      <exception cref="T:System.NotSupportedException">目前的物件為 <see cref="T:System.Reflection.ConstructorInfo" />。不支援泛型建構函式。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetHashCode">
      <summary>傳回此執行個體的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)">
      <summary>針對指定的控制代碼所表示的方法，取得方法資訊。</summary>
      <returns>
        <paramref name="handle" /> 所表示的方法。</returns>
      <param name="handle">方法的控制代碼。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 都是無效的。</exception>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary>針對指定的泛型型別，取得指定的控制代碼所表示的建構函式或方法。</summary>
      <returns>在 <paramref name="declaringType" /> 所指定的泛型型別中，<paramref name="handle" /> 所指定的方法或建構函式。</returns>
      <param name="handle">建構函式或方法之內部中繼資料表示的控制代碼。</param>
      <param name="declaringType">定義建構函式或方法之泛型型別的控制代碼。</param>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 都是無效的。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodImplementationFlags">
      <summary>當在衍生類別中覆寫時，傳回 <see cref="T:System.Reflection.MethodImplAttributes" /> 旗標。</summary>
      <returns>方法實作旗標。</returns>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetParameters">
      <summary>在衍生類別中覆寫時，取得此方法或建構函式的參數。</summary>
      <returns>陣列，包含此方法或建構函式的參數。</returns>
      <exception cref="T:System.MethodAccessException">會透過 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 之類的機制以晚期繫結叫用此成員。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])">
      <summary>使用指定的參數，叫用目前執行個體所表示的方法或建構函式。</summary>
      <returns>所叫用方法的傳回值，如果是建構函式，為 null。Caution:也可以修改 <paramref name="parameters" /> 陣列的元素，這些元素表示以 ref 或 out 關鍵字宣告的參數。</returns>
      <param name="obj">物件，要在其上叫用方法或建構函式。如果方法是靜態 (Static)，則忽略此引數。如果建構函式為靜態，則此引數必須為 null 或定義該建構函式之類別的執行個體。</param>
      <param name="parameters">叫用方法或建構函式的引數清單。這是物件陣列，具有與要叫用的方法或建構函式的參數相同的數目、順序和型別。如果沒有參數存在，<paramref name="parameters" /> 應該是 null。如果這個執行個體表示的方法或建構函式採用 ref 參數 (在 Visual Basic 中為 ByRef)，則該參數就不需要有特殊屬性，就能夠以這個函式叫用方法或建構函式。此陣列中沒有明確以值初始化的任何物件，都將含有該物件型別的預設值。對參考型別元素而言，此值為 null。對實值型別元素而言，此值為 0、0.0 或 false 是依特定元素型別而定。</param>
      <exception cref="T:System.Reflection.TargetException">
        <paramref name="obj" /> 參數為 null，而且方法不是靜態的。-或-這個方法未由 <paramref name="obj" /> 的類別宣告或繼承。-或-已叫用靜態建構函式，而且 <paramref name="obj" /> 既不是 null，也不是宣告建構函式之類別的執行個體。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 陣列的項目與這個執行個體反映之方法或建構函式的簽章不相符。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用的方法或建構函式擲回例外狀況。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="parameters" /> 陣列沒有正確的引數數目。</exception>
      <exception cref="T:System.MethodAccessException">方法或建構函式無法存取。</exception>
      <exception cref="T:System.InvalidOperationException">宣告方法的型別是開放式泛型型別。也就是說，<see cref="P:System.Type.ContainsGenericParameters" /> 屬性會針對宣告型別傳回 true。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>在衍生類別中覆寫時，需使用指定的參數叫用反映的方法或建構函式。</summary>
      <returns>所叫用方法的傳回值，如果是建構函式，為 null，如果方法的傳回型別為 void，為 null。Caution:也可以修改 <paramref name="parameters" /> 陣列的元素，這些元素表示以 ref 或 out 關鍵字宣告的參數。</returns>
      <param name="obj">物件，要在其上叫用方法或建構函式。如果方法是靜態 (Static)，則忽略此引數。如果建構函式為靜態 (Static)，這個引數必須是 null 或定義建構函式之類別的執行個體。</param>
      <param name="invokeAttr">由零或來自 <see cref="T:System.Reflection.BindingFlags" /> 的多個位元旗標組成的位元遮罩。如果 <paramref name="binder" /> 為 null，則指派給這個參數的值為 <see cref="F:System.Reflection.BindingFlags.Default" />，因此，不論您傳入什麼都會忽略。</param>
      <param name="binder">透過反映來啟用繫結、引數型別的強制、成員的引動過程，以及擷取 <see cref="T:System.Reflection.MemberInfo" /> 物件的物件。如果 <paramref name="binder" /> 為 null，則會使用預設繫結器。</param>
      <param name="parameters">叫用方法或建構函式的引數清單。這是物件陣列，具有與要叫用的方法或建構函式的參數相同的數目、順序和型別。如果沒有參數，這應該是 null。如果此執行個體表示的方法或建構函式採用 ByRef 參數，則該參數就不需要有特殊屬性，就能夠以此函式叫用方法或建構函式。此陣列中沒有明確以值初始化的任何物件，都將含有該物件型別的預設值。對參考型別元素而言，此值為 null。對實值型別元素而言，此值為 0、0.0 或 false 是依特定元素型別而定。</param>
      <param name="culture">用來管理型別之強制型轉的文化特性資訊。如果這是 null，則會使用目前執行緒的 CultureInfo(例如，需要此參數，才能將表示為 1000 的 String 轉換為 Double 值，因為 1000 在不同文化特性中有不同的表示方式)。</param>
      <exception cref="T:System.Reflection.TargetException">
        <paramref name="obj" /> 參數為 null，而且方法不是靜態的。-或-這個方法未由 <paramref name="obj" /> 的類別宣告或繼承。-或-已叫用靜態建構函式，而且 <paramref name="obj" /> 既不是 null，也不是宣告建構函式之類別的執行個體。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 參數的型別與這個執行個體反映的方法或建構函式的簽章不相符。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="parameters" /> 陣列沒有正確的引數數目。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用的方法或建構函式擲回例外狀況。</exception>
      <exception cref="T:System.MethodAccessException">方法或建構函式無法存取。</exception>
      <exception cref="T:System.InvalidOperationException">宣告方法的型別是開放式泛型型別。也就是說，<see cref="P:System.Type.ContainsGenericParameters" /> 屬性會針對宣告型別傳回 true。</exception>
    </member>
    <member name="P:System.Reflection.MethodBase.IsAbstract">
      <summary>取得值，這個值表示方法是否為抽象 (在 Visual Basic 中為 MustInherit)。</summary>
      <returns>如果方法是抽象，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsAssembly">
      <summary>取得值，指出 <see cref="F:System.Reflection.MethodAttributes.Assembly" /> 是否描述此方法或建構函式的潛在可視性；亦即，最多只有相同組件 (Assembly) 中的其他型別可以看見該方法或建構函式，組件外部的衍生型別 (Derived Type) 則看不見它們。</summary>
      <returns>如果 <see cref="F:System.Reflection.MethodAttributes.Assembly" /> 已精確描述這個方法或建構函式的可視性，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsConstructor">
      <summary>取得值，指出方法是否為建構函式。</summary>
      <returns>如果這個方法是由 <see cref="T:System.Reflection.ConstructorInfo" /> 物件所表示的建構函式 (請參閱＜註解＞中有關 <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> 物件的備註)，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamily">
      <summary>取得值，指出 <see cref="F:System.Reflection.MethodAttributes.Family" /> 是否描述此方法或建構函式的可視性；亦即，您只能在其類別和衍生類別內看見該方法或建構函式。</summary>
      <returns>如果 <see cref="F:System.Reflection.MethodAttributes.Family" /> 已精確描述這個方法或建構函式的存取權限，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamilyAndAssembly">
      <summary>取得值，指出 <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" /> 是否描述此方法或建構函式的可視性；亦即，只有當衍生類別位於相同的組件時，才能呼叫該方法或建構函式。</summary>
      <returns>如果 <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" /> 已精確描述這個方法或建構函式的存取權限，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamilyOrAssembly">
      <summary>取得值，指出 <see cref="F:System.Reflection.MethodAttributes.FamORAssem" /> 是否描述此方法或建構函式的潛在可視性；亦即，任何位置的衍生類別以及相同組件中的類別都可以呼叫該方法或建構函式。</summary>
      <returns>如果 <see cref="F:System.Reflection.MethodAttributes.FamORAssem" /> 已精確描述這個方法或建構函式的存取權限，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFinal">
      <summary>取得值，這個值表示此方法是否為 final (在 Visual Basic 中為 NotOverridable)。</summary>
      <returns>如果這個方法為 final，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsGenericMethod">
      <summary>取得值，指出方法是否為泛型。</summary>
      <returns>如果目前的 <see cref="T:System.Reflection.MethodBase" /> 表示泛型方法，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsGenericMethodDefinition">
      <summary>取得值，指出方法是否為泛型方法定義。</summary>
      <returns>如果目前的 <see cref="T:System.Reflection.MethodBase" /> 物件表示泛型方法的定義，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsHideBySig">
      <summary>取得值，指出是否只有簽章完全一樣的同類成員隱藏於衍生類別中。</summary>
      <returns>如果成員是根據簽章而隱藏，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsPrivate">
      <summary>取得值，指出此成員是否為私用的。</summary>
      <returns>如果對這個方法的存取限於類別的其他成員，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsPublic">
      <summary>取得值，指出這是否為 public 方法。</summary>
      <returns>如果這個方法為 public 方法，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSpecialName">
      <summary>取得值，指出此方法是否有特別的名稱。</summary>
      <returns>如果這個方法有特別的名稱，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsStatic">
      <summary>取得值，指出方法是否為 static (在 Visual Basic 中為 Shared)。</summary>
      <returns>如果方法為 static，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsVirtual">
      <summary>取得值，指出方法是否為 virtual (在 Visual Basic 中為 Overridable)。</summary>
      <returns>如果方法為 virtual，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.MethodHandle">
      <summary>取得方法內部中繼資料 (Metadata) 表示的控制代碼。</summary>
      <returns>方法的執行階段控制代碼。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.MethodImplementationFlags">
      <summary>取得 <see cref="T:System.Reflection.MethodImplAttributes" /> 旗標，這個旗標會指定方法實作的屬性。</summary>
      <returns>方法實作旗標。</returns>
    </member>
    <member name="T:System.Reflection.MethodImplAttributes">
      <summary>指定方法實作 (Implementation) 的屬性旗標。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.AggressiveInlining">
      <summary>指定應該盡可能內嵌方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.CodeTypeMask">
      <summary>指定程式碼型別的相關旗標。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.ForwardRef">
      <summary>指定未定義的方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.IL">
      <summary>指定方法實作是採用 Microsoft Intermediate Language (MSIL)。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.InternalCall">
      <summary>指定內部呼叫。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Managed">
      <summary>指定方法實做為 Managed。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.ManagedMask">
      <summary>指定程式碼是 Managed 或 Unmanaged 程式碼。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.MaxMethodImplVal">
      <summary>指定範圍檢查值。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Native">
      <summary>指定方法實作是原生 (Native) 的。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.NoInlining">
      <summary>指出方法不能是內嵌的 (Inline)。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.NoOptimization">
      <summary>指定在進行可能的程式碼產生問題的偵誤時，方法不會透過 Just-In-Time (JIT) 編譯器進行最佳化。 </summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.OPTIL">
      <summary>指定方法實作是採用最佳化中繼語言 (OPTIL)。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.PreserveSig">
      <summary>指定方法簽章正如所宣告的方式匯出。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Runtime">
      <summary>指定方法實作是由執行階段所提供。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Synchronized">
      <summary>指定方法是通過主體的單一執行緒。靜態方法 (在 Visual Basic 中為 Shared 方法) 會鎖定型別，而執行個體方法則會鎖定執行個體。您也可以基於此目的來使用 C# lock 陳述式或 Visual Basic Lock 函式。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Unmanaged">
      <summary>指定方法實做為 Unmanaged。</summary>
    </member>
    <member name="T:System.Reflection.MethodInfo">
      <summary>探索方法的屬性 (Attribute) 並提供方法中繼資料 (Metadata) 的存取。</summary>
    </member>
    <member name="M:System.Reflection.MethodInfo.CreateDelegate(System.Type)">
      <summary>從這個方法建立指定型別的委派。</summary>
      <returns>這個方法的委派。</returns>
      <param name="delegateType">要建立的委派型別。</param>
    </member>
    <member name="M:System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)">
      <summary>從這個方法利用指定的目標來建立指定型別的委派。</summary>
      <returns>這個方法的委派。</returns>
      <param name="delegateType">要建立的委派型別。</param>
      <param name="target">委派的目標物件。</param>
    </member>
    <member name="M:System.Reflection.MethodInfo.Equals(System.Object)">
      <summary>傳回值，指出執行個體是否等於指定的物件。</summary>
      <returns>如果 <paramref name="obj" /> 和這個執行個體具有相同的型別和值，為 true，否則為 false。</returns>
      <param name="obj">要與這個執行個體比較的物件，或 null。</param>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetBaseDefinition">
      <summary>在衍生類別中覆寫時，為直接或間接基底類別 (也就是第一次宣告此執行個體所表示之方法的地方) 中的方法傳回 MethodInfo 物件。</summary>
      <returns>這個方法首次實作的 MethodInfo 物件。</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetGenericArguments">
      <summary>傳回 <see cref="T:System.Type" /> 物件的陣列，這些物件表示泛型方法的型別引數，或泛型方法定義的型別參數。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件的陣列，這些物件表示泛型方法的型別引數，或泛型方法定義的型別參數。如果目前的方法不是泛型方法，則會傳回空白陣列。</returns>
      <exception cref="T:System.NotSupportedException">不支援此方法。</exception>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
      <summary>傳回表示泛型方法定義的 <see cref="T:System.Reflection.MethodInfo" /> 物件，利用此泛型方法定義就可以建構出目前的方法。</summary>
      <returns>表示泛型方法定義的 <see cref="T:System.Reflection.MethodInfo" /> 物件，利用此泛型方法定義就可以建構出目前的方法。</returns>
      <exception cref="T:System.InvalidOperationException">目前的方法不是泛型方法。也就是，<see cref="P:System.Reflection.MethodInfo.IsGenericMethod" /> 會傳回 false。</exception>
      <exception cref="T:System.NotSupportedException">不支援此方法。</exception>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetHashCode">
      <summary>傳回此執行個體的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
      <summary>用型別陣列的元素取代目前泛型方法定義的型別參數，並傳回表示所得結果建構方法的 <see cref="T:System.Reflection.MethodInfo" /> 物件。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 物件，表示用 <paramref name="typeArguments" /> 的元素取代目前泛型方法定義之型別參數所得到的建構方法。</returns>
      <param name="typeArguments">型別陣列，用來取代目前泛型方法定義的型別參數。</param>
      <exception cref="T:System.InvalidOperationException">目前的 <see cref="T:System.Reflection.MethodInfo" /> 並非表示泛型方法定義。也就是，<see cref="P:System.Reflection.MethodInfo.IsGenericMethodDefinition" /> 會傳回 false。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> 為 null。-或-<paramref name="typeArguments" /> 的任何項目是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArguments" /> 中的項目數目與目前泛型方法定義中的型別參數數目不同。-或-<paramref name="typeArguments" /> 中的項目無法滿足針對目前泛型方法定義之對應型別參數所指定的條件約束。</exception>
      <exception cref="T:System.NotSupportedException">不支援此方法。</exception>
    </member>
    <member name="P:System.Reflection.MethodInfo.MemberType">
      <summary>取得 <see cref="T:System.Reflection.MemberTypes" /> 值，指出此成員為方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberTypes" /> 值，指出此成員為方法。</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnParameter">
      <summary>取得 <see cref="T:System.Reflection.ParameterInfo" /> 物件，其中含有方法之傳回型別的相關資訊，例如傳回型別是否含有自訂修飾詞 (Modifier)。</summary>
      <returns>
        <see cref="T:System.Reflection.ParameterInfo" /> 物件，含有傳回型別的相關資訊。</returns>
      <exception cref="T:System.NotImplementedException">未實作此方法。</exception>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnType">
      <summary>取得此方法的傳回型別 (Return Type)。</summary>
      <returns>此方法的傳回型別。</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes">
      <summary>取得傳回型別的自訂屬性。</summary>
      <returns>ICustomAttributeProvider 物件，表示傳回型別的自訂屬性。</returns>
    </member>
    <member name="T:System.Reflection.Missing">
      <summary>表示遺漏的 <see cref="T:System.Object" />。無法繼承此類別。</summary>
    </member>
    <member name="F:System.Reflection.Missing.Value">
      <summary>表示 <see cref="T:System.Reflection.Missing" /> 類別的唯一執行個體。</summary>
    </member>
    <member name="T:System.Reflection.Module">
      <summary>在模組上執行反映。</summary>
    </member>
    <member name="P:System.Reflection.Module.Assembly">
      <summary>取得此 <see cref="T:System.Reflection.Module" /> 執行個體的合適 <see cref="T:System.Reflection.Assembly" />。</summary>
      <returns>Assembly 物件。</returns>
    </member>
    <member name="P:System.Reflection.Module.CustomAttributes">
      <summary>取得包含這個模組之自訂屬性的集合。</summary>
      <returns>包含這個模組之自訂屬性的集合。</returns>
    </member>
    <member name="M:System.Reflection.Module.Equals(System.Object)">
      <summary>判斷此模組和指定的物件是否相等。</summary>
      <returns>如果 <paramref name="o" /> 等於這個執行個體，則為 true，否則為 false。</returns>
      <param name="o">要與此執行個體相互比較的物件。</param>
    </member>
    <member name="P:System.Reflection.Module.FullyQualifiedName">
      <summary>[安全性關鍵] 取得表示這個模組完整名稱和路徑的字串。</summary>
      <returns>完整限定的模組名稱。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributes(System.Boolean)">
      <summary>傳回所有自訂屬性。</summary>
      <returns>包含所有自訂屬性的陣列。</returns>
      <param name="inherit">此型別的物件會忽略此引數。</param>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>傳回指定之型別的自訂屬性。</summary>
      <returns>陣列，包含指定之型別的所有自訂屬性。</returns>
      <param name="attributeType">要取得的屬性型別。</param>
      <param name="inherit">此型別的物件會忽略此引數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是由執行階段提供的 <see cref="T:System.Type" /> 物件。例如，<paramref name="attributeType" /> 是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetField(System.String)">
      <summary>傳回具有指定之名稱的全域欄位。</summary>
      <returns>具有指定之名稱的全域欄位，如果欄位不存在，則為 null。</returns>
      <param name="name">全域欄位的名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>傳回具有指定之名稱和繫結屬性的全域欄位。</summary>
      <returns>具有指定之名稱和繫結屬性的全域欄位，如果欄位不存在，則為 null。</returns>
      <param name="name">全域欄位的名稱。</param>
      <param name="bindingAttr">用來控制搜尋的旗標。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetFields">
      <summary>傳回在模組上定義的全域欄位。</summary>
      <returns>陣列，包含在模組上定義的全域欄位，但如果沒有任何全域欄位，則會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetFields(System.Reflection.BindingFlags)">
      <summary>傳回在模組上定義而且符合指定之繫結旗標的全域欄位。</summary>
      <returns>陣列，包含在模組上定義而且符合指定之繫結旗標的全域欄位，但如果沒有任何全域欄位符合繫結旗標，則會傳回空陣列。</returns>
      <param name="bindingFlags">限制搜尋之列舉值的位元組合。</param>
    </member>
    <member name="M:System.Reflection.Module.GetHashCode">
      <summary>傳回此執行個體的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String)">
      <summary>傳回具有指定之名稱的全域方法。</summary>
      <returns>具有指定之名稱的全域方法，如果方法不存在，則為 null。</returns>
      <param name="name">方法名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">有一個以上的全域方法符合 <paramref name="name" />。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>傳回具有指定之名稱、繫結資訊、呼叫慣例和參數型別與修飾詞的全域方法。</summary>
      <returns>符合指定之準則的全域方法，如果這類方法不存在，則為 null。</returns>
      <param name="name">方法名稱。</param>
      <param name="bindingAttr">用來控制搜尋的旗標。</param>
      <param name="binder">執行多載解析和型別強制型轉的物件，或 null，表示使用 <see cref="P:System.Type.DefaultBinder" />。</param>
      <param name="callConvention">方法的呼叫慣例。</param>
      <param name="types">要搜尋的參數型別。</param>
      <param name="modifiers">參數修飾詞陣列，用來使用其中型別已修改的參數簽章來進行繫結工作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null、<paramref name="types" /> 為 null，或 <paramref name="types" /> 的項目為 null。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">有一個以上的全域方法符合指定的準則。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String,System.Type[])">
      <summary>傳回符合指定之名稱和參數型別的全域方法。</summary>
      <returns>符合指定之準則的全域方法，如果這類方法不存在，則為 null。</returns>
      <param name="name">方法名稱。</param>
      <param name="types">要搜尋的參數型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null、<paramref name="types" /> 為 null，或 <paramref name="types" /> 的項目為 null。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">有一個以上的全域方法符合指定的準則。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>在衍生類別中，提供 <see cref="M:System.Reflection.Module.GetMethod(System.String)" /> 方法多載的實作。</summary>
      <returns>符合指定之準則的全域方法，如果這類方法不存在，則為 null。</returns>
      <param name="name">方法名稱。</param>
      <param name="bindingAttr">用來控制搜尋的旗標。</param>
      <param name="binder">執行多載解析和型別強制型轉的物件，null 表示使用 <see cref="P:System.Type.DefaultBinder" />。</param>
      <param name="callConvention">方法的呼叫慣例。</param>
      <param name="types">要搜尋的參數型別。</param>
      <param name="modifiers">參數修飾詞陣列，用來使用其中型別已修改的參數簽章來進行繫結工作。</param>
      <exception cref="T:System.Reflection.AmbiguousMatchException">有一個以上的全域方法符合指定的準則。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null、<paramref name="types" /> 為 null，或 <paramref name="types" /> 的項目為 null。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethods">
      <summary>傳回在模組上定義的全域方法。</summary>
      <returns>陣列，包含在模組上定義的全域方法，但如果沒有任何全域方法，則會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)">
      <summary>傳回在模組上定義而且符合指定之繫結旗標的全域方法。</summary>
      <returns>陣列，包含在模組上定義而且符合指定之繫結旗標的全域方法，但如果沒有任何全域方法符合繫結旗標，則會傳回空陣列。</returns>
      <param name="bindingFlags">限制搜尋之列舉值的位元組合。</param>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String)">
      <summary>傳回指定型別，執行區分大小寫的搜尋。</summary>
      <returns>如果指定的型別位於此模組中，則為該型別，否則為 null。</returns>
      <param name="className">要尋找的型別名稱。名稱必須是具有命名空間的完整限定名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> 為 null。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用類別初始設定式，並擲回例外狀況。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> 是長度為零的字串。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="className" /> 所需的相依組件。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="className" /> 需要的相依組件已找到，但是無法載入。-或-目前的組件已載入到僅限反映的內容中，而且 <paramref name="className" /> 需要有尚未預先載入的相依組件。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="className" /> 需要相依組件，但是這個檔案不是有效的組件。-或-<paramref name="className" /> 需要的相依組件是針對比目前載入之版本還新的執行階段版本所編譯。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String,System.Boolean)">
      <summary>傳回指定的型別，使用指定的區分大小寫搜尋模組。</summary>
      <returns>如果指定的型別位於此模組中，則為該型別，否則為 null。</returns>
      <param name="className">要尋找的型別名稱。名稱必須是具有命名空間的完整限定名稱。</param>
      <param name="ignoreCase">true 表示要執行不區分大小寫的搜尋，否則為 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> 為 null。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用類別初始設定式，並擲回例外狀況。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> 是長度為零的字串。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="className" /> 所需的相依組件。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="className" /> 需要的相依組件已找到，但是無法載入。-或-目前的組件已載入到僅限反映的內容中，而且 <paramref name="className" /> 需要有尚未預先載入的相依組件。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="className" /> 需要相依組件，但是這個檔案不是有效的組件。-或-<paramref name="className" /> 需要的相依組件是針對比目前載入之版本還新的執行階段版本所編譯。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>傳回指定的型別，並指定是否要對模組進行區分大小寫的搜尋，以及是否要在找不到型別時擲回例外狀況。</summary>
      <returns>如果此模組中已宣告指定的型別，則為該型別，否則為 null。</returns>
      <param name="className">要尋找的型別名稱。名稱必須是具有命名空間的完整限定名稱。</param>
      <param name="throwOnError">true 表示找不到該型別時擲回例外狀況，而 false 則表示傳回 null。</param>
      <param name="ignoreCase">true 表示要執行不區分大小寫的搜尋，否則為 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> 為 null。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用類別初始設定式，並擲回例外狀況。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> 是長度為零的字串。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 為 true，而且找不到該型別。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="className" /> 所需的相依組件。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="className" /> 需要的相依組件已找到，但是無法載入。-或-目前的組件已載入到僅限反映的內容中，而且 <paramref name="className" /> 需要有尚未預先載入的相依組件。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="className" /> 需要相依組件，但是這個檔案不是有效的組件。-或-<paramref name="className" /> 需要的相依組件是針對比目前載入之版本還新的執行階段版本所編譯。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetTypes">
      <summary>傳回在此模組中定義的所有型別。</summary>
      <returns>陣列，含有在此執行個體反映的模組中定義的型別。</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">無法載入模組中的一個或多個類別。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
    </member>
    <member name="M:System.Reflection.Module.IsDefined(System.Type,System.Boolean)">
      <summary>判斷指定的屬性型別是否套用至此模組。</summary>
      <returns>如果有一或多個 <paramref name="attributeType" /> 的執行個體套用至這個成員，則為 true，否則為 false。</returns>
      <param name="attributeType">要搜尋的自訂屬性型別。</param>
      <param name="inherit">此型別的物件會忽略此引數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是由執行階段提供的 <see cref="T:System.Type" /> 物件。例如，<paramref name="attributeType" /> 是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件。</exception>
    </member>
    <member name="P:System.Reflection.Module.MetadataToken">
      <summary>取得語彙基元，可識別中繼資料中的模組。</summary>
      <returns>整數語彙基元，可識別中繼資料中的目前模組。</returns>
    </member>
    <member name="P:System.Reflection.Module.Name">
      <summary>取得模組的名稱 (路徑已移除)。</summary>
      <returns>沒有路徑的模組名稱。</returns>
    </member>
    <member name="M:System.Reflection.Module.ResolveMethod(System.Int32)">
      <summary>傳回指定之中繼資料語彙基元所識別的方法或建構函式。</summary>
      <returns>指定之中繼資料語彙基元所識別的方法或建構函式。</returns>
      <param name="metadataToken">識別模組內方法或建構函式的中繼資料語彙基元。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 在目前模組的範圍中不是方法或建構函式的語彙基元。-或-<paramref name="metadataToken" /> 是 MethodSpec，其簽章包含項目型別 var (泛型型別的型別參數) 或 mvar (泛型方法的型別參數)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])">
      <summary>以指定之泛型型別參數所定義的內容，傳回指定之中繼資料語彙基元所識別的方法或建構函式。</summary>
      <returns>指定之中繼資料語彙基元和泛型引數所識別的方法。</returns>
      <param name="metadataToken">識別模組內方法或建構函式的中繼資料語彙基元。</param>
      <param name="genericTypeArguments">陣列，包含語彙基元在範圍中型別的泛型型別引數，如果該型別不是泛型，則為null。</param>
      <param name="genericMethodArguments">陣列，包含語彙基元在範圍中方法的泛型型別引數，如果該方法不是泛型，則為 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 在目前模組的範圍中不是方法或建構函式的語彙基元。-或-<paramref name="metadataToken" /> 是 MethodSpec，其簽章包含項目型別 var (泛型型別的型別參數) 或 mvar (泛型方法的型別參數)，而且沒有為 <paramref name="genericTypeArguments" /> 和 <paramref name="genericMethodArguments" /> 提供必要的泛型型別引數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveString(System.Int32)">
      <summary>傳回指定之中繼資料語彙基元所識別的字串。</summary>
      <returns>中繼資料字串堆積中的字串值。</returns>
      <param name="metadataToken">中繼資料語彙基元，可識別模組字串堆積中的字串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 在目前的模組範圍中不是字串的語彙基元。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveType(System.Int32)">
      <summary>傳回指定之中繼資料語彙基元所識別的型別。</summary>
      <returns>指定之中繼資料語彙基元所識別的型別。</returns>
      <param name="metadataToken">識別模組內型別的中繼資料語彙基元。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 在目前模組的範圍中不是型別的語彙基元。-或-<paramref name="metadataToken" /> 是 TypeSpec，其簽章包含項目型別 var (泛型型別的型別參數) 或 mvar (泛型方法的型別參數)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])">
      <summary>以指定之泛型型別參數所定義的內容，傳回指定之中繼資料語彙基元所識別的型別。</summary>
      <returns>指定之中繼資料語彙基元和泛型引數所識別的型別。</returns>
      <param name="metadataToken">識別模組內型別的中繼資料語彙基元。</param>
      <param name="genericTypeArguments">陣列，包含語彙基元在範圍中型別的泛型型別引數，如果該型別不是泛型，則為null。</param>
      <param name="genericMethodArguments">陣列，包含語彙基元在範圍中方法的泛型型別引數，如果該方法不是泛型，則為 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 在目前模組的範圍中不是型別的語彙基元。-或-<paramref name="metadataToken" /> 是 TypeSpec，其簽章包含項目型別 var (泛型型別的型別參數) 或 mvar (泛型方法的型別參數)，而且沒有為 <paramref name="genericTypeArguments" /> 和 <paramref name="genericMethodArguments" /> 提供必要的泛型型別引數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.Module.ToString">
      <summary>傳回模組名稱。</summary>
      <returns>此模組的名稱。</returns>
    </member>
    <member name="T:System.Reflection.ParameterAttributes">
      <summary>定義屬性 (Attribute)，其可能與參數有關聯。這些都被定義在 CorHdr.h 中。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasDefault">
      <summary>指定此參數具有預設值。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasFieldMarshal">
      <summary>指定參數具有欄位封送處理 (Marshaling) 資訊。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.In">
      <summary>指定參數為輸入參數。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Lcid">
      <summary>指定參數為地區設定識別項。不支援。出現在 Windows Phone 中。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.None">
      <summary>指定沒有參數屬性。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Optional">
      <summary>指定參數為選擇項。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Out">
      <summary>指定參數為輸出參數。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Reserved3">
      <summary>保留的。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Reserved4">
      <summary>保留的。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.ReservedMask">
      <summary>指定參數為保留的。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Retval">
      <summary>指定參數為傳回值。</summary>
    </member>
    <member name="T:System.Reflection.ParameterInfo">
      <summary>探索參數屬性 (Attribute) 並提供對參數中繼資料 (Metadata) 的存取。</summary>
    </member>
    <member name="M:System.Reflection.ParameterInfo.#ctor">
      <summary>初始化 ParameterInfo 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Attributes">
      <summary>取得此參數的屬性。</summary>
      <returns>此參數的屬性。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.CustomAttributes">
      <summary>取得包含這個參數之自訂屬性的集合。</summary>
      <returns>包含這個參數之自訂屬性的集合。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.DefaultValue">
      <summary>取得參數的預設值 (如果有的話)。</summary>
      <returns>參數的預設值，如果參數沒有預設值，為 <see cref="F:System.DBNull.Value" />。</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
      <summary>取得在此參數上所定義的所有自訂屬性。</summary>
      <returns>包含套用至此參數之所有自訂屬性的陣列。</returns>
      <param name="inherit">此型別的物件會忽略此參數。請參閱＜備註＞。</param>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>取得套用至此參數之指定型別及其衍生型別的自訂屬性。</summary>
      <returns>陣列，包含在此參數上所定義且屬於指定之型別或其任何子型別的所有自訂屬性。</returns>
      <param name="attributeType">依型別識別的自訂屬性。</param>
      <param name="inherit">此型別的物件會忽略此參數。請參閱＜備註＞。</param>
      <exception cref="T:System.ArgumentException">此型別必須是基礎執行階段系統所提供的型別。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="P:System.Reflection.ParameterInfo.HasDefaultValue">
      <summary>取得值，這個值表示這個參數是否有預設值。</summary>
      <returns>如果這個參數有預設值，為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
      <summary>判斷是否已有指定之型別或其衍生型別的自訂屬性套用至此參數。</summary>
      <returns>如果已有 <paramref name="attributeType" /> 或其衍生型別的一或多個執行個體套用至這個參數，為 true，否則為 false。</returns>
      <param name="attributeType">要搜尋的型別。</param>
      <param name="inherit">此型別的物件會忽略此參數。請參閱＜備註＞。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是由 Common Language Runtime 提供的 <see cref="T:System.Type" /> 物件。</exception>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsIn">
      <summary>取得值，指出這是否為輸入參數。</summary>
      <returns>如果參數為輸入參數，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsOptional">
      <summary>取得值，指出此參數是否為選擇項。</summary>
      <returns>如果參數為選擇項，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsOut">
      <summary>取得值，指出這是否為輸出參數。</summary>
      <returns>如果參數是輸出參數，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsRetval">
      <summary>取得值，指出這是否為 Retval 參數。</summary>
      <returns>如果參數為 Retval，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Member">
      <summary>取得定義參數所在的成員。</summary>
      <returns>定義參數所在的成員。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.MetadataToken">
      <summary>取得值，識別中繼資料中的此參數。</summary>
      <returns>語彙基元，與模組組合後，可以唯一識別中繼資料中的此參數。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Name">
      <summary>取得參數的名稱。</summary>
      <returns>此參數的簡單名稱。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.ParameterType">
      <summary>取得此參數的型別。</summary>
      <returns>此參數的型別。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Position">
      <summary>取得型式參數清單中以零為起始的參數位置。</summary>
      <returns>在參數清單中此參數佔用的位置。</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.ToString">
      <summary>取得以字串表示的參數型別和名稱。</summary>
      <returns>參數的型別和名稱。</returns>
    </member>
    <member name="T:System.Reflection.ParameterModifier">
      <summary>將修飾詞 (Modifier) 附加至參數，如此繫結才能使用已經修改過型別的參數簽章。</summary>
    </member>
    <member name="M:System.Reflection.ParameterModifier.#ctor(System.Int32)">
      <summary>初始化表示指定參數數目之 <see cref="T:System.Reflection.ParameterModifier" /> 結構的新執行個體。</summary>
      <param name="parameterCount">參數的數目。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterCount" /> 為負值。</exception>
    </member>
    <member name="P:System.Reflection.ParameterModifier.Item(System.Int32)">
      <summary>取得或設定數值，指定目前的 <see cref="T:System.Reflection.ParameterModifier" /> 是否應該修改位在指定索引位置的參數。</summary>
      <returns>如果這個 <see cref="T:System.Reflection.ParameterModifier" /> 應該修改位於此索引位置的參數為 true，否則為 false。</returns>
      <param name="index">參數的索引位置，正在檢查或設定參數的修改狀態。</param>
    </member>
    <member name="T:System.Reflection.PropertyAttributes">
      <summary>定義屬性 (Attribute)，其可能與屬性 (Property) 有關聯。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.HasDefault">
      <summary>指定屬性具有預設值。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.None">
      <summary>指定沒有屬性 (Attribute) 與屬性 (Property) 有關。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved2">
      <summary>保留的。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved3">
      <summary>保留的。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved4">
      <summary>保留的。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.ReservedMask">
      <summary>指定保留旗標僅供執行階段使用。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.RTSpecialName">
      <summary>指定中繼資料 (Metadata) 內部 API 檢查名稱編碼方式。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.SpecialName">
      <summary>指定屬性為特殊屬性，具有描述屬性是如何特殊的名稱。</summary>
    </member>
    <member name="T:System.Reflection.PropertyInfo">
      <summary>探索屬性 (Property) 的屬性 (Attribute)，並提供屬性中繼資料 (Metadata) 的存取。</summary>
    </member>
    <member name="P:System.Reflection.PropertyInfo.Attributes">
      <summary>取得此屬性 (Property) 的屬性 (Attribute)。</summary>
      <returns>此屬性 (Property) 的屬性 (Attribute)。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.CanRead">
      <summary>取得值，指出是否可讀取屬性。</summary>
      <returns>如果可讀取這個屬性，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.CanWrite">
      <summary>取得值，指出是否可寫入至屬性。</summary>
      <returns>如果可寫入至屬性，為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.Equals(System.Object)">
      <summary>傳回值，指出執行個體是否等於指定的物件。</summary>
      <returns>如果 <paramref name="obj" /> 和這個執行個體具有相同的型別和值，為 true，否則為 false。</returns>
      <param name="obj">要與這個執行個體比較的物件，或 null。</param>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetAccessors">
      <summary>傳回陣列，其元素會反映公用的 get、set 和目前執行個體所反映的屬性其他存取子。</summary>
      <returns>陣列，包含公用的 get、set 和目前執行個體所反映之屬性的其他存取子 (如果找到存取子的話)，否則，這個方法會傳回元素為零 (0) 的陣列。</returns>
      <exception cref="T:System.MethodAccessException">應用程式程式碼會利用方法 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />，嘗試存取這個成員的晚期繫結。 </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
      <summary>傳回陣列，其元素會反映 public (和 non-public，如果指定的話) get、set 和目前執行個體所反映的屬性其他存取子。</summary>
      <returns>陣列，包含 get、set 和目前執行個體所反映的屬性其他存取子。如果 <paramref name="nonPublic" /> 為 true，這個陣列會包含 public 和 non-public 的存取子。如果 <paramref name="nonPublic" /> 為 false，則這個陣列只包含 public 的存取子。如果沒有找到具有指定可視性的存取子，則此方法會傳回元素為 0 (零) 的陣列。</returns>
      <param name="nonPublic">true 以包括 non-public 存取子，否則為 false。 </param>
      <exception cref="T:System.MethodAccessException">應用程式程式碼會利用方法 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />，嘗試存取這個成員的晚期繫結。 </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetConstantValue">
      <summary>使用編譯器傳回與屬性相關聯的常值。 </summary>
      <returns>與屬性相關聯的常值。如果常值是元素值為零的類別型別，則傳回值會是 null。</returns>
      <exception cref="T:System.InvalidOperationException">Unmanaged 中繼資料中的常數資料表不包含目前屬性的常數值。</exception>
      <exception cref="T:System.FormatException">值的型別不是 Common Language Specification (CLS) 允許的其中一個型別。請參閱「標準 ECMA-335 - Common Language Infrastructure (CLI) 規格， Partition II」。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetGetMethod">
      <summary>傳回這個屬性的 public get 存取子。</summary>
      <returns>如果 get 存取子存在且為 public，為此屬性的 public get 存取子，否則為 null。</returns>
      <exception cref="T:System.MethodAccessException">應用程式程式碼會利用方法 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />，嘗試存取這個成員的晚期繫結。 </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
      <summary>在衍生類別中覆寫時，傳回這個屬性的 public 或 non-public get 存取子。</summary>
      <returns>如果 <paramref name="nonPublic" /> 為 true，為這個屬性的 get 存取子。如果 <paramref name="nonPublic" /> 為 false 且 get 存取子為 non-public，或者如果 <paramref name="nonPublic" /> 為 true 但沒有任何 get 存取子存在，就會傳回 null。</returns>
      <param name="nonPublic">true 表示要傳回 non-public 存取子，否則為 false。 </param>
      <exception cref="T:System.MethodAccessException">應用程式程式碼會利用方法 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />，嘗試存取這個成員的晚期繫結。 </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetHashCode">
      <summary>傳回此執行個體的雜湊程式碼。</summary>
      <returns>32 位元帶正負號的整數雜湊程式碼。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetIndexParameters">
      <summary>當在衍生類別中覆寫時，傳回屬性的所有索引參數的陣列。</summary>
      <returns>陣列，包含索引的參數。如果屬性未編製索引，則陣列沒有元素 (零個)。</returns>
      <exception cref="T:System.MethodAccessException">應用程式程式碼會利用方法 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />，嘗試存取這個成員的晚期繫結。 </exception>
    </member>
    <member name="P:System.Reflection.PropertyInfo.GetMethod">
      <summary>取得這個屬性的 get 存取子。</summary>
      <returns>這個屬性的 get 存取子。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetRawConstantValue">
      <summary>使用編譯器傳回與屬性相關聯的常值。 </summary>
      <returns>與屬性相關聯的常值。如果常值是元素值為零的類別型別，則傳回值會是 null。</returns>
      <exception cref="T:System.InvalidOperationException">Unmanaged 中繼資料中的常數資料表不包含目前屬性的常數值。</exception>
      <exception cref="T:System.FormatException">值的型別不是 Common Language Specification (CLS) 允許的其中一個型別。請參閱「標準 ECMA-335 - Common Language Infrastructure (CLI) 規格， Partition II」。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetSetMethod">
      <summary>傳回這個屬性的 public set 存取子。</summary>
      <returns>如果 set 存取子存在且為 public，為這個屬性的 set 存取子，否則為 null。</returns>
      <exception cref="T:System.MethodAccessException">應用程式程式碼會利用方法 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />，嘗試存取這個成員的晚期繫結。 </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
      <summary>在衍生類別中覆寫時，傳回這個屬性的 set存取子。</summary>
      <returns>Value 狀況 這個屬性的 set 存取子。 set 存取子為 public。-或- <paramref name="nonPublic" /> 為 true 且有 set 存取子存在。null<paramref name="nonPublic" /> 為 false 且 set 存取子為 non-public。-或- 因為屬性是唯讀，沒有 set 存取子。 </returns>
      <param name="nonPublic">true 以傳回 non-public 存取子；否則為 false。 </param>
      <exception cref="T:System.MethodAccessException">應用程式程式碼會利用方法 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />，嘗試存取這個成員的晚期繫結。 </exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
      <summary>傳回指定之物件的屬性值。</summary>
      <returns>指定之物件的屬性值。</returns>
      <param name="obj">其屬性值將被傳回的物件。</param>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
      <summary>傳回屬性值，使用索引屬性的選擇性索引值。</summary>
      <returns>
        <paramref name="obj" /> 參數所指定物件的屬性值。</returns>
      <param name="obj">其屬性值將被傳回的物件。 </param>
      <param name="index">索引屬性的選擇性索引值。非索引屬性的這個值應為 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 陣列未包含所需引數的型別。-或- 找不到屬性的 get 存取子。 </exception>
      <exception cref="T:System.Reflection.TargetException">物件不符合目標型別，或者屬性是執行個體屬性，但 <paramref name="obj" /> 為 null。 </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="index" /> 中參數的數目不符合已編索引的屬性所採用的參數數目。 </exception>
      <exception cref="T:System.MethodAccessException">呼叫端無法存取屬性。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">擷取屬性值時發生錯誤。例如，為索引屬性指定的索引值超出了範圍。<see cref="P:System.Exception.InnerException" /> 屬性會指出錯誤的原因。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>在衍生類別中覆寫時，傳回具有指定繫結、索引和 <see cref="T:System.Globalization.CultureInfo" /> 的屬性值。</summary>
      <returns>
        <paramref name="obj" /> 參數所指定物件的屬性值。</returns>
      <param name="obj">其屬性值將被傳回的物件。 </param>
      <param name="invokeAttr">引動過程屬性。這必須是 BindingFlags 的位元旗標：InvokeMethod、CreateInstance、Static、GetField、SetField、GetProperty 或 SetProperty。必須指定適當的引動過程屬性。如果要叫用靜態 (Static) 成員，則必須設定 BindingFlags 的 Static 的旗標。</param>
      <param name="binder">物件，經由反映來啟用繫結、引數型別的強制型轉、成員的引動過程和 MemberInfo 物件的擷取。如果 <paramref name="binder" /> 為 null，則會使用預設繫結器。</param>
      <param name="index">索引屬性的選擇性索引值。非索引屬性的這個值應為 null。</param>
      <param name="culture">資源要當地語系化的文化特性。請注意，如果並未為此文化特性將資源當地語系化，則將在搜尋相符項目時持續呼叫 CultureInfo.Parent 方法。如果這個值為 null，就會從 CultureInfo.CurrentUICulture 屬性取得 CultureInfo。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 陣列未包含所需引數的型別。-或- 找不到屬性的 get 存取子。 </exception>
      <exception cref="T:System.Reflection.TargetException">物件不符合目標型別，或者屬性是執行個體屬性，但 <paramref name="obj" /> 為 null。 </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="index" /> 中參數的數目不符合已編索引的屬性所採用的參數數目。 </exception>
      <exception cref="T:System.MethodAccessException">呼叫端無法存取屬性。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">擷取屬性值時發生錯誤。例如，為索引屬性指定的索引值超出了範圍。<see cref="P:System.Exception.InnerException" /> 屬性會指出錯誤的原因。</exception>
    </member>
    <member name="P:System.Reflection.PropertyInfo.IsSpecialName">
      <summary>取得值，指出屬性名稱是否會被編譯器辨識為特殊名稱。</summary>
      <returns>如果這個屬性有特殊名稱，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.MemberType">
      <summary>取得 <see cref="T:System.Reflection.MemberTypes" /> 值，指出此成員為屬性。</summary>
      <returns>值，指出此成員為屬性。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.PropertyType">
      <summary>取得此屬性的型別。</summary>
      <returns>此屬性的型別。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.SetMethod">
      <summary>取得這個屬性的 set 存取子。</summary>
      <returns>這個屬性的 set 存取子。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
      <summary>設定指定之物件的屬性值。</summary>
      <param name="obj">將設定其屬性值的物件。</param>
      <param name="value">新的屬性值。</param>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
      <summary>使用索引屬性的選擇性索引值，在指定的物件上設定屬性值。</summary>
      <param name="obj">將設定其屬性值的物件。 </param>
      <param name="value">此屬性的新值。 </param>
      <param name="index">索引屬性的選擇性索引值。非索引屬性的這個值應為 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 陣列未包含所需引數的型別。-或- 找不到屬性的 set 存取子。 </exception>
      <exception cref="T:System.Reflection.TargetException">物件不符合目標型別，或者屬性是執行個體屬性，但 <paramref name="obj" /> 為 null。 </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="index" /> 中參數的數目不符合已編索引的屬性所採用的參數數目。 </exception>
      <exception cref="T:System.MethodAccessException">呼叫端無法存取屬性。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">設定屬性值時發生錯誤。例如，為索引屬性指定的索引值超出了範圍。<see cref="P:System.Exception.InnerException" /> 屬性會指出錯誤的原因。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>在衍生類別中覆寫時，根據指定的繫結條件約束、繫結器和文化特性，將指定之物件的屬性值設定為指定值。</summary>
      <param name="obj">將設定其屬性值的物件。 </param>
      <param name="value">此屬性的新值。 </param>
      <param name="invokeAttr">引動過程屬性。這必須是 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：InvokeMethod、CreateInstance、Static、GetField、SetField、GetProperty 或 SetProperty。必須指定適當的引動過程屬性。如果要叫用靜態 (Static) 成員，則必須設定 BindingFlags 的 Static 的旗標。</param>
      <param name="binder">透過反映來啟用繫結、引數型別的強制、成員的引動過程，以及擷取 <see cref="T:System.Reflection.MemberInfo" /> 物件的物件。如果 <paramref name="binder" /> 為 null，則會使用預設繫結器。</param>
      <param name="index">索引屬性的選擇性索引值。非索引屬性的這個值應為 null。</param>
      <param name="culture">資源要當地語系化的文化特性。請注意，如果並未為此文化特性將資源當地語系化，則將在搜尋相符項目時持續呼叫 CultureInfo.Parent 方法。如果這個值為 null，就會從 CultureInfo.CurrentUICulture 屬性取得 CultureInfo。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 陣列未包含所需引數的型別。-或- 找不到屬性的 set 存取子。 </exception>
      <exception cref="T:System.Reflection.TargetException">物件不符合目標型別，或者屬性是執行個體屬性，但 <paramref name="obj" /> 為 null。 </exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="index" /> 中參數的數目不符合已編索引的屬性所採用的參數數目。 </exception>
      <exception cref="T:System.MethodAccessException">呼叫端無法存取屬性。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">設定屬性值時發生錯誤。例如，為索引屬性指定的索引值超出了範圍。<see cref="P:System.Exception.InnerException" /> 屬性會指出錯誤的原因。</exception>
    </member>
    <member name="T:System.Reflection.ReflectionContext">
      <summary>代表可提供反映物件的內容。</summary>
    </member>
    <member name="M:System.Reflection.ReflectionContext.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.ReflectionContext" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.ReflectionContext.GetTypeForObject(System.Object)">
      <summary>取得指定物件型別在此反映內容中的表示法。</summary>
      <returns>物件，表示指定物件的型別。</returns>
      <param name="value">要表示的物件。</param>
    </member>
    <member name="M:System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)">
      <summary>取得組件在此反映內容中的表示法，而此組件是由來自另一個反映內容的物件所表示。</summary>
      <returns>組件在此反映內容中的表示法。</returns>
      <param name="assembly">組件在此內容中表示的外部表示法。</param>
    </member>
    <member name="M:System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)">
      <summary>取得型別在此反映內容中的表示法，而此型別是由來自另一個反映內容的物件所表示。</summary>
      <returns>型別在此反映內容中的表示法。</returns>
      <param name="type">型別在此內容中表示的外部表示法。</param>
    </member>
    <member name="T:System.Reflection.ReflectionTypeLoadException">
      <summary>如果無法載入模組中的任何類別時，由 <see cref="M:System.Reflection.Module.GetTypes" /> 方法所擲回的例外狀況。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[])">
      <summary>使用指定類別和它們的相關例外狀況，來初始化 <see cref="T:System.Reflection.ReflectionTypeLoadException" /> 類別的新執行個體。</summary>
      <param name="classes">Type 型別的陣列，包含在模組中定義並且載入的類別。這個陣列可以包含 Null 參考 (在 Visual Basic 中為 Nothing) 值。</param>
      <param name="exceptions">Exception 型別的陣列，包含由類別載入器所擲回的例外狀況。<paramref name="classes" /> 陣列中的 Null 參考 (在 Visual Basic 中為 Nothing) 值會與這個 <paramref name="exceptions" /> 陣列中的例外狀況對齊。</param>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[],System.String)">
      <summary>使用指定的類別、它們的相關例外狀況及例外狀況描述，來初始化 <see cref="T:System.Reflection.ReflectionTypeLoadException" /> 類別的新執行個體。</summary>
      <param name="classes">Type 型別的陣列，包含在模組中定義並且載入的類別。這個陣列可以包含 Null 參考 (在 Visual Basic 中為 Nothing) 值。</param>
      <param name="exceptions">Exception 型別的陣列，包含由類別載入器所擲回的例外狀況。<paramref name="classes" /> 陣列中的 Null 參考 (在 Visual Basic 中為 Nothing) 值會與這個 <paramref name="exceptions" /> 陣列中的例外狀況對齊。</param>
      <param name="message">String，描述擲回例外狀況原因。 </param>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions">
      <summary>取得由類別載入器所擲回的例外狀況之陣列。</summary>
      <returns>Exception 型別的陣列，包含由類別載入器所擲回的例外狀況。這個執行個體的 <paramref name="classes" /> 陣列中的 Null 值會與這個陣列中的例外狀況對齊。</returns>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.Types">
      <summary>取得在模組中定義並且載入的類別之陣列。</summary>
      <returns>Type 型別的陣列，包含在模組中定義並且載入的類別。此陣列可能包含一些 null 值。</returns>
    </member>
    <member name="T:System.Reflection.ResourceAttributes">
      <summary>指定資訊清單資源的屬性 (Attribute)。</summary>
    </member>
    <member name="F:System.Reflection.ResourceAttributes.Private">
      <summary>用來擷取私用 (Private) 資訊清單資源的遮罩。</summary>
    </member>
    <member name="F:System.Reflection.ResourceAttributes.Public">
      <summary>用來擷取公用 (Public) 資訊清單資源的遮罩。</summary>
    </member>
    <member name="T:System.Reflection.ResourceLocation">
      <summary>指定資源位置。</summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.ContainedInAnotherAssembly">
      <summary>指定資源是被包含在另一個組件中。</summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.ContainedInManifestFile">
      <summary>指定資源是被包含在資訊清單檔中。</summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.Embedded">
      <summary>指定內嵌 (也就是非連結) 的資源。</summary>
    </member>
    <member name="T:System.Reflection.RuntimeReflectionExtensions">
      <summary>提供在執行階段擷取型別相關資訊的方法。</summary>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)">
      <summary>取得物件，其表示指定的委派所表示的方法。</summary>
      <returns>表示方法的物件。</returns>
      <param name="del">要檢查的委派。</param>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)">
      <summary>擷取一個物件，其表示第一次宣告方法的直接或間接基底類別上指定的方法。</summary>
      <returns>物件，表示指定的方法對基底類別的初始宣告。</returns>
      <param name="method">要擷取相關資訊的方法。</param>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvent(System.Type,System.String)">
      <summary>擷取表示所指定事件的物件。</summary>
      <returns>物件，表示指定的事件，或者如果找不到事件，則為 null。</returns>
      <param name="type">包含事件的型別。</param>
      <param name="name">事件的名稱。</param>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents(System.Type)">
      <summary>擷取集合，其表示所有定義在指定型別的事件。</summary>
      <returns>指定型別的事件集合。</returns>
      <param name="type">包含事件的型別。</param>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeField(System.Type,System.String)">
      <summary>擷取一個表示指定欄位的物件。</summary>
      <returns>物件，表示指定的欄位，或者如果找不到欄位，則為 null。</returns>
      <param name="type">包含欄位的型別。</param>
      <param name="name">欄位名稱。</param>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeFields(System.Type)">
      <summary>擷取集合，其表示所有定義在指定型別的欄位。</summary>
      <returns>指定型別的欄位集合。</returns>
      <param name="type">包含欄位的型別。</param>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)">
      <summary>傳回指定型別與指定介面的介面對應。</summary>
      <returns>物件，表示指定介面與型別的介面對應。</returns>
      <param name="typeInfo">要擷取對應的型別。</param>
      <param name="interfaceType">要擷取對應的介面。</param>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type,System.String,System.Type[])">
      <summary>擷取一個表示指定方法的物件。</summary>
      <returns>物件，表示指定的方法，或者如果找不到方法，則為 null。</returns>
      <param name="type">包含方法的型別。</param>
      <param name="name">方法名稱。</param>
      <param name="parameters">包含方法參數的陣列。</param>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethods(System.Type)">
      <summary>擷取集合，其表示所有定義在指定型別的方法。</summary>
      <returns>指定型別的方法集合。</returns>
      <param name="type">包含方法的型別。</param>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties(System.Type)">
      <summary>擷取集合，其表示所有定義在指定型別的屬性。</summary>
      <returns>指定型別的屬性集合。</returns>
      <param name="type">包含屬性的型別。</param>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(System.Type,System.String)">
      <summary>擷取一個表示指定屬性的物件。</summary>
      <returns>物件，表示指定的屬性，或者如果找不到屬性，則為 null。</returns>
      <param name="type">包含屬性的型別。</param>
      <param name="name">屬性的名稱。</param>
    </member>
    <member name="T:System.Reflection.TargetException">
      <summary>表示嘗試叫用 (Invoke) 無效的目標時所擲回的例外狀況。</summary>
    </member>
    <member name="T:System.Reflection.TargetInvocationException">
      <summary>透過反映叫用的方法所擲回的例外狀況。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)">
      <summary>使用造成此例外狀況原因的內部例外參考來初始化 <see cref="T:System.Reflection.TargetInvocationException" /> 類別的新執行個體。</summary>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.Reflection.TargetInvocationException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 null，則目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Reflection.TargetParameterCountException">
      <summary>當引動過程的參數數目不符合所預期的數目時，就會擲回例外狀況。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor">
      <summary>使用空訊息字串和例外狀況的根本原因，來初始化 <see cref="T:System.Reflection.TargetParameterCountException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor(System.String)">
      <summary>使用其訊息字串設為指定的訊息和根本原因例外狀況，來初始化 <see cref="T:System.Reflection.TargetParameterCountException" /> 類別的新執行個體。</summary>
      <param name="message">String，描述擲回這個例外狀況的原因。</param>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.Reflection.TargetParameterCountException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 null 參考，目前的例外狀況會在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Reflection.TypeAttributes">
      <summary>指定型別屬性 (Attribute)。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Abstract">
      <summary>指定此型別為 abstract。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AnsiClass">
      <summary>LPTSTR 被解譯為 ANSI。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoClass">
      <summary>LPTSTR 會自動被解譯。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoLayout">
      <summary>指定類別欄位會由 Common Language Runtime 自動配置。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.BeforeFieldInit">
      <summary>指定呼叫型別的靜態 (Static) 方法時不要強制系統將型別初始化。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Class">
      <summary>指定此型別為類別。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ClassSemanticsMask">
      <summary>指定類別語意 (Semantics) 資訊；目前的類別為依照上下文而定的 (否則為變動的)。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.CustomFormatClass">
      <summary>LPSTR 是利用部分實作特定的方式進行解譯，這可能會擲回 <see cref="T:System.NotSupportedException" />。在 Microsoft 的 .NET Framework 實作中未使用。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.CustomFormatMask">
      <summary>用於擷取機器碼互通性的非標準編碼資訊。未指定這些 2 位元值的含義。在 Microsoft 的 .NET Framework 實作中未使用。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ExplicitLayout">
      <summary>指定類別欄位配置於指定位移 (Offset)。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.HasSecurity">
      <summary>型別具有關聯的安全性。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Import">
      <summary>指定類別或介面從其他的模組匯入。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Interface">
      <summary>指定此型別為介面。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.LayoutMask">
      <summary>指定類別配置資訊。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedAssembly">
      <summary>指定類別是使用組件 (Assembly) 可視性所產生的巢狀，因此只能藉由組件中的方法存取。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamANDAssem">
      <summary>指定類別是使用組件和家族可視性所產生的巢狀，因此只能藉由在家族和組件交集中的方法存取。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamily">
      <summary>指定類別是使用家族可視性所產生的巢狀，因此只能藉由其型別和任何子型別中的方法存取。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamORAssem">
      <summary>指定類別是使用家族或組件可視性所產生的巢狀，因此只能藉由在家族和組件聯集中的方法存取。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPrivate">
      <summary>指定類別是使用私用 (Private) 可視性所產生的巢狀。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPublic">
      <summary>指定類別是使用公用 (Public) 可視性所產生的巢狀。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NotPublic">
      <summary>指定類別不是 public。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Public">
      <summary>指定類別是 public。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ReservedMask">
      <summary>保留供執行階段使用的屬性。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.RTSpecialName">
      <summary>執行階段應該檢查名稱編碼方式。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Sealed">
      <summary>指定類別為固定的，並且無法擴充。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SequentialLayout">
      <summary>指定類別欄位會循序配置，依照欄位發出至中繼資料 (Metadata) 的順序。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Serializable">
      <summary>指定類別可以序列化。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SpecialName">
      <summary>指定類別在名稱所表示的方法中為特殊的。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.StringFormatMask">
      <summary>用來擷取機器碼互通性 (Interoperability) 的字串資訊。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.UnicodeClass">
      <summary>LPTSTR 被解譯為 UNICODE。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.VisibilityMask">
      <summary>指定型別可視性資訊。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.WindowsRuntime">
      <summary>指定  型別。</summary>
    </member>
    <member name="T:System.Reflection.TypeDelegator">
      <summary>包裝 Type 物件，並將所有方法委派給該 Type。</summary>
    </member>
    <member name="M:System.Reflection.TypeDelegator.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.Reflection.TypeDelegator" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.TypeDelegator.#ctor(System.Type)">
      <summary>指定封裝執行個體來初始化 <see cref="T:System.Reflection.TypeDelegator" /> 類別的新執行個體。</summary>
      <param name="delegatingType">
        <see cref="T:System.Type" /> 類別的執行個體，會封裝對物件方法的呼叫。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegatingType" /> 為 null。</exception>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Assembly">
      <summary>取得實作型別的組件 (assembly)。</summary>
      <returns>
        <see cref="T:System.Reflection.Assembly" /> 物件，表示實作型別的組件。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.AssemblyQualifiedName">
      <summary>取得組件的完整限定名稱。</summary>
      <returns>String，包含組件的完整名稱。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.BaseType">
      <summary>取得目前型別的基底型別 (Base Type)。</summary>
      <returns>型別的基底型別。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.FullName">
      <summary>取得實作型別的完整限定名稱。</summary>
      <returns>String，包含型別的完整名稱。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetAttributeFlagsImpl">
      <summary>取得指派給 TypeDelegator 的屬性。</summary>
      <returns>TypeAttributes 物件，表示實作屬性旗標。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>取得實作 TypeDelegator 的建構函式。</summary>
      <returns>方法的 ConstructorInfo 物件 (符合指定的準則)，或為 null (如果找不到符合的)。</returns>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <param name="binder">使用反映來啟用繫結、引數型別的強制、成員的引動過程，以及擷取 MemberInfo 物件的物件。如果 <paramref name="binder" /> 為 null，則會使用預設繫結器。</param>
      <param name="callConvention">呼叫慣例。</param>
      <param name="types">Type 型別的陣列，包含參數數目、順序和型別的清單。型別不能是 null，請使用適當的 GetMethod 方法或空白陣列來搜尋沒有參數的方法。</param>
      <param name="modifiers">ParameterModifier 型別的陣列擁有的長度與 <paramref name="types" /> 陣列相同，其元素表示與要取得方法之參數相關的屬性。　</param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
      <summary>傳回 <see cref="T:System.Reflection.ConstructorInfo" /> 物件的陣列，表示為型別定義的建構函式，該型別由目前的 <see cref="T:System.Reflection.TypeDelegator" /> 所包裝。</summary>
      <returns>ConstructorInfo 型別的陣列，包含為這個類別定義的指定建構函式。如果沒有定義建構函式，則會傳回空白陣列。依據指定參數的值而定，只有 public 建構函式，或者 public 和 non-public 建構函式會被傳回。</returns>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)">
      <summary>傳回為此型別定義的所有自訂屬性，指定是否搜尋型別的繼承 (Inheritance) 鏈結。</summary>
      <returns>物件的陣列包含為此型別定義的所有自訂屬性。</returns>
      <param name="inherit">指定是否搜尋此型別的繼承鏈結以尋找屬性。</param>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>傳回由型別識別的自訂屬性陣列。</summary>
      <returns>物件的陣列包含此型別中定義的自訂屬性，而這些屬性符合 <paramref name="attributeType" /> 參數，指定是否搜尋型別的繼承鏈結，或是如果此型別上沒有定義自訂屬性，為 null。</returns>
      <param name="attributeType">由型別識別的自訂屬性陣列。</param>
      <param name="inherit">指定是否搜尋此型別的繼承鏈結以尋找屬性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.TypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetElementType">
      <summary>傳回物件的 <see cref="T:System.Type" />，由目前陣列、指標或 ByRef 所包含或參考。</summary>
      <returns>物件的 <see cref="T:System.Type" /> (由目前的陣列、指標或 ByRef 所包含或參考)，或為 null (如果目前的 <see cref="T:System.Type" /> 不是陣列、指標或 ByRef)。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>傳回指定的事件。</summary>
      <returns>
        <see cref="T:System.Reflection.EventInfo" /> 物件，表示由具有指定名稱的這個型別所宣告或繼承的事件。如果找不到這類事件，則此方法會傳回 null。</returns>
      <param name="name">要取得的事件名稱。</param>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvents">
      <summary>傳回 <see cref="T:System.Reflection.EventInfo" /> 物件陣列，表示由目前的 TypeDelegator 所宣告或繼承的所有 public 事件。</summary>
      <returns>傳回 EventInfo 型別的陣列，包含由目前型別所宣告或繼承的所有事件。如果沒有任何事件，則會傳回空白陣列。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)">
      <summary>傳回 <paramref name="bindingAttr" /> 中所指定的事件，由目前的 TypeDelegator 所宣告或繼承。</summary>
      <returns>EventInfo 型別的陣列，包含 <paramref name="bindingAttr" /> 中指定的事件。如果沒有任何事件，則會傳回空白陣列。</returns>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>傳回 <see cref="T:System.Reflection.FieldInfo" /> 物件，表示具有指定名稱的欄位。</summary>
      <returns>FieldInfo 物件，表示這個 TypeDelegator 以指定名稱宣告或繼承的欄位。如果找不到這類欄位，則會傳回 null。</returns>
      <param name="name">要尋找的欄位名稱。</param>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
      <summary>傳回 <see cref="T:System.Reflection.FieldInfo" /> 物件的陣列，表示為型別定義的資料欄位，該型別由目前的 <see cref="T:System.Reflection.TypeDelegator" /> 所包裝。</summary>
      <returns>FieldInfo 型別的陣列，包含由目前的 TypeDelegator 宣告或繼承的欄位。如果沒有符合的欄位，則傳回空白陣列。</returns>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
      <summary>傳回由型別實作的指定介面，該型別由目前的 <see cref="T:System.Reflection.TypeDelegator" /> 所包裝。</summary>
      <returns>Type 物件，表示目前類別 (具有與指定名稱相符的完整名稱) 所實作 (直接或間接) 的介面。如果找不到名稱相符的介面，則傳回 null。</returns>
      <param name="name">由目前類別所實作之介面的完整名稱。</param>
      <param name="ignoreCase">如果忽略大小寫，為 true，否則為 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)">
      <summary>傳回指定介面型別的介面對應。</summary>
      <returns>
        <see cref="T:System.Reflection.InterfaceMapping" /> 物件，表示 <paramref name="interfaceType" /> 的介面對應。</returns>
      <param name="interfaceType">要擷取對應的介面的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterfaces">
      <summary>傳回在目前類別和其基底類別 (Base Class) 上實作的所有介面。</summary>
      <returns>Type 型別的陣列，包含在目前類別和其基底類別上實作的所有介面。如果未定義任何介面，則傳回空白陣列。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>傳回成員 (屬性、方法、建構函式、欄位、事件和巢狀型別 (Nested Type))，由指定的 <paramref name="name" />、<paramref name="type" /> 和 <paramref name="bindingAttr" /> 所指定。</summary>
      <returns>MemberInfo 型別的陣列，包含符合指定準則之目前類別和其基底類別的所有成員。</returns>
      <param name="name">要取得的成員名稱。</param>
      <param name="type">位元遮罩，會影響搜尋的進行方式。這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <param name="bindingAttr">要取得的成員型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
      <summary>傳回由 <paramref name="bindingAttr" /> 所指定的成員。</summary>
      <returns>MemberInfo 型別的陣列，包含符合 <paramref name="bindingAttr" /> 篩選條件之目前類別和其基底類別的所有成員。</returns>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>使用指定的繫結條件約束和指定的呼叫慣例，來搜尋指定的方法，而該方法的參數符合指定的引數型別和修飾詞。</summary>
      <returns>實作方法的 MethodInfoInfo 物件 (符合指定的準則)，或為 null (如果找不到符合的)。</returns>
      <param name="name">方法名稱。</param>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <param name="binder">使用反映來啟用繫結、引數型別的強制、成員的引動過程，以及擷取 MemberInfo 物件的物件。如果 <paramref name="binder" /> 為 null，則會使用預設繫結器。</param>
      <param name="callConvention">呼叫慣例。</param>
      <param name="types">Type 型別的陣列包含參數數目、順序和型別的清單。型別不能是 null，請使用適當的 GetMethod 方法或空白陣列來搜尋沒有參數的方法。</param>
      <param name="modifiers">ParameterModifier 型別的陣列擁有的長度與 <paramref name="types" /> 陣列相同，其元素表示與要取得方法之參數相關的屬性。　</param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)">
      <summary>傳回 <see cref="T:System.Reflection.MethodInfo" /> 物件的陣列，表示型別的指定方法，該型別由目前的 <see cref="T:System.Reflection.TypeDelegator" /> 所包裝。</summary>
      <returns>MethodInfo 物件的陣列，表示在這個 TypeDelegator 上定義的方法。</returns>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>傳回巢狀型別，由 <paramref name="name" /> 和 <paramref name="bindingAttr" /> 中所指定，而且由目前的 <see cref="T:System.Reflection.TypeDelegator" /> 表示之型別所宣告或繼承。</summary>
      <returns>Type 物件，表示巢狀型別。</returns>
      <param name="name">巢狀型別的名稱。</param>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>傳回型別 (由目前的 <see cref="T:System.Reflection.TypeDelegator" /> 所包裝) 所宣告或繼承指定在 <paramref name="bindingAttr" /> 中的巢狀型別。</summary>
      <returns>Type 型別的陣列，包含巢狀型別。</returns>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)">
      <summary>傳回 <see cref="T:System.Reflection.PropertyInfo" /> 物件的陣列，表示型別的屬性，該型別由目前的 <see cref="T:System.Reflection.TypeDelegator" /> 所包裝。</summary>
      <returns>PropertyInfo 物件的陣列，表示在此 TypeDelegator 上定義的屬性。</returns>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>在衍生類別中覆寫時，使用指定的繫結條件約束搜尋指定的屬性，而該屬性的參數符合指定的引數型別和修飾詞的建構函式。</summary>
      <returns>屬性的 <see cref="T:System.Reflection.PropertyInfo" /> 物件 (符合指定的準則)，或為 Null (如果找不到符合的)。</returns>
      <param name="name">要取得的屬性。</param>
      <param name="bindingAttr">位元遮罩，會影響搜尋的進行方式。這個值是零或來自 <see cref="T:System.Reflection.BindingFlags" /> 多個位元旗標的組合。</param>
      <param name="binder">物件，經由反映來啟用繫結、引數型別的強制型轉、成員的引動過程和 MemberInfo 物件的擷取。如果 <paramref name="binder" /> 為 null，則會使用預設繫結器。請參閱 <see cref="T:System.Reflection.Binder" />。</param>
      <param name="returnType">屬性的傳回型別。</param>
      <param name="types">參數型別的清單。表示參數數目、順序和型別的清單。型別不能是 Null，請使用適當的 GetMethod 方法或空白陣列以搜尋沒有參數的方法。</param>
      <param name="modifiers">與具有元素型別相同長度的陣列，這些元素表示與要取得方法之參數相關的屬性。</param>
    </member>
    <member name="P:System.Reflection.TypeDelegator.GUID">
      <summary>取得實作型別的 GUID (全域唯一識別項)。</summary>
      <returns>GUID。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.HasElementTypeImpl">
      <summary>取得值，指出目前 <see cref="T:System.Type" /> 是否內含或參考其他型別，也就是說，目前 <see cref="T:System.Type" /> 是否為陣列、指標或 ByRef。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是陣列、指標或 ByRef，為  true，否則為 false。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>叫用 (Invoke) 指定的成員。在指定繫結器和引動過程屬性的條件約束下，要叫用的方法必須是可存取的，並提供與指定引數清單最特定的符合項目。</summary>
      <returns>表示叫用的成員之傳回值的 Object。</returns>
      <param name="name">要叫用的成員名稱。這可能是建構函式、方法、屬性或欄位。如果傳遞的是空字串 ("")，則會叫用預設成員。</param>
      <param name="invokeAttr">引動過程屬性。這必須是下列其中一個 <see cref="T:System.Reflection.BindingFlags" />：InvokeMethod、CreateInstance、Static、GetField、SetField、GetProperty 或 SetProperty。必須指定適當的引動過程屬性。如果要叫用靜態 (Static) 成員，則必須設定 Static 旗標。</param>
      <param name="binder">物件，經由反映來啟用繫結、引數型別的強制型轉、成員的引動過程和 MemberInfo 物件的擷取。如果 <paramref name="binder" /> 為 null，則會使用預設繫結器。請參閱 <see cref="T:System.Reflection.Binder" />。</param>
      <param name="target">要在其上叫用指定成員的物件。</param>
      <param name="args">Object 型別的陣列，包含要叫用的成員參數的數目、順序和型別。如果 <paramref name="args" /> 包含未初始化的 Object，則會被視為具有預設繫結器的空字串，可被擴大為 0、0.0 或字串。</param>
      <param name="modifiers">與 <paramref name="args" /> 長度相同的 ParameterModifer 型別陣列，與元素一起時，表示與要叫用之成員引數相關的屬性。參數在成員的簽章中具有與其相關聯的屬性。針對 ByRef 要使用 ParameterModifer.ByRef，而 None 則要使用 ParameterModifer.None。預設繫結器確實與這些相符。屬性 (例如 In 和 InOut) 不會用於繫結中，且可以使用 ParameterInfo 來檢視。</param>
      <param name="culture">CultureInfo 的執行個體，用於管理型別的強制型轉。例如，要將表示 1000 的字串轉換為 Double 值時，這是必要的，因為 1000 的表示方式會因不同文化特性而有所不同。如果 <paramref name="culture" /> 為 null，則會使用目前執行緒的 CultureInfo 的 CultureInfo。</param>
      <param name="namedParameters">String 型別陣列，包含從元素零開始即與 <paramref name="args" /> 陣列完全相符的參數名稱。陣列中不能有空白位置。如果 <paramref name="args" />。Length 大於 <paramref name="namedParameters" />。Length，則會依序填入其餘的參數。</param>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsArrayImpl">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為陣列。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是陣列，為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsByRefImpl">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否以傳址方式傳遞。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是以傳址方式傳遞，為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsCOMObjectImpl">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為 COM 物件。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是 COM 物件，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.IsConstructedGenericType">
      <summary>取得值，這個值指出這個物件是否表示建構的泛型型別。</summary>
      <returns>如果這個物件表示建構的泛型型別，為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
      <summary>指出由 <paramref name="attributeType" /> 識別的自訂屬性是否定義。</summary>
      <returns>如果由 <paramref name="attributeType" /> 所識別的自訂屬性已定義，為 true，否則為 false。</returns>
      <param name="attributeType">指定是否搜尋此型別的繼承鏈結以尋找屬性。</param>
      <param name="inherit">由型別識別的自訂屬性陣列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 為 null。</exception>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">無法載入自訂屬性型別。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsPointerImpl">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為指標。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是指標，為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsPrimitiveImpl">
      <summary>取得值，指出 <see cref="T:System.Type" /> 是否為其中一個基本型別 (Primitive Type)。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是其中一個基本型別，為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsValueTypeImpl">
      <summary>取得值，指出型別是否為值型別 (Value Type)，也就是說，不是類別或介面。</summary>
      <returns>如果型別為值型別，為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.MetadataToken">
      <summary>取得值，用於識別中繼資料 (Metadata) 中的此實體 (Entity)。</summary>
      <returns>此值與模組結合後，是唯一能識別中繼資料中的實體。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Module">
      <summary>取得包含實作型別的模組。</summary>
      <returns>
        <see cref="T:System.Reflection.Module" /> 物件，表示實作型別的模組。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Name">
      <summary>取得實作型別的名稱 (路徑已移除)。</summary>
      <returns>String，包含型別的不完整名稱。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Namespace">
      <summary>取得實作型別的命名空間。</summary>
      <returns>String，包含型別的命名空間。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.TypeHandle">
      <summary>取得實作型別的內部中繼資料表示的控制代碼。</summary>
      <returns>RuntimeTypeHandle 物件。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.UnderlyingSystemType">
      <summary>取得表示實作型別的基礎 <see cref="T:System.Type" />。</summary>
      <returns>基礎型別。</returns>
    </member>
    <member name="T:System.Reflection.TypeInfo">
      <summary>表示下列型別的型別宣告：類別型別、介面型別、陣列型別、值型別、列舉型別、型別參數、泛型型別定義，以及開放式或封閉式的建構泛型型別。</summary>
    </member>
    <member name="M:System.Reflection.TypeInfo.AsType">
      <summary>傳回目前型別做為 <see cref="T:System.Type" />。</summary>
      <returns>目前的型別。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredConstructors">
      <summary>取得目前型別所宣告的建構函式集合。</summary>
      <returns>目前型別所宣告的建構函式集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredEvents">
      <summary>取得目前型別所定義的事件集合。</summary>
      <returns>目前型別所定義的事件集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredFields">
      <summary>取得目前型別所定義的欄位集合。</summary>
      <returns>目前型別所定義的欄位集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredMembers">
      <summary>取得目前型別所定義的成員集合。</summary>
      <returns>目前型別所定義的成員集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredMethods">
      <summary>取得目前型別所定義的方法集合。</summary>
      <returns>目前型別所定義的方法集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredNestedTypes">
      <summary>取得目前型別所定義的巢狀型別集合。</summary>
      <returns>目前型別所定義的巢狀型別集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredProperties">
      <summary>取得目前型別所定義的屬性集合。</summary>
      <returns>目前型別所定義的屬性集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.GenericTypeParameters">
      <summary>取得目前型別的泛型參數陣列。</summary>
      <returns>陣列，包含目前型別的泛型參數。</returns>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredEvent(System.String)">
      <summary>傳回物件，其表示目前型別所宣告的指定公用事件。</summary>
      <returns>物件，表示指定的事件 (如果找到)；否則為 null。</returns>
      <param name="name">事件的名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredField(System.String)">
      <summary>傳回物件，其表示目前型別所宣告的指定公用欄位。</summary>
      <returns>物件，表示指定的欄位 (如果找到)；否則為 null。</returns>
      <param name="name">欄位名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredMethod(System.String)">
      <summary>傳回物件，其表示目前型別所宣告的指定公用方法。</summary>
      <returns>表示指定方法的物件 (如果找到)；否則為 null。</returns>
      <param name="name">方法名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredMethods(System.String)">
      <summary>傳回集合，其包含符合指定名稱的目前型別上所宣告的所有公用方法。</summary>
      <returns>集合，包含符合 <paramref name="name" /> 的方法。</returns>
      <param name="name">要搜尋的方法名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)">
      <summary>傳回物件，其表示目前型別所宣告的指定公用巢狀型別。</summary>
      <returns>物件，表示指定的巢狀型別 (如果找到)；否則為 null。</returns>
      <param name="name">巢狀型別的名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredProperty(System.String)">
      <summary>傳回物件，其表示目前型別所宣告的指定公用屬性。</summary>
      <returns>物件，表示指定的屬性 (如果找到)；否則為 null。</returns>
      <param name="name">屬性的名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
    </member>
    <member name="P:System.Reflection.TypeInfo.ImplementedInterfaces">
      <summary>取得目前型別所實作的介面集合。</summary>
      <returns>目前型別所實作的介面集合。</returns>
    </member>
    <member name="M:System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)">
      <summary>傳回一值，指出指定的型別是否可以指派給目前的型別。</summary>
      <returns>如果指定的型別可以指派給這個型別，則為 true；否則為 false。</returns>
      <param name="typeInfo">要檢查的型別。</param>
    </member>
    <member name="M:System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo">
      <summary>傳回目前型別的表示法做為 <see cref="T:System.Reflection.TypeInfo" />物件。</summary>
      <returns>目前型別的參考。</returns>
    </member>
    <member name="T:System.Reflection.Emit.CustomAttributeBuilder">
      <summary>以可以附加到要發出之型別或成員的形式，表示自訂屬性。</summary>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[])">
      <summary>初始化 CustomAttributeBuilder 類別的新執行個體，該類別指定了自訂屬性的建構函式和建構函式的引數。</summary>
      <param name="con">自訂屬性的建構函式。</param>
      <param name="constructorArgs">自訂屬性建構函式的引數。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="con" /> 為靜態或私用。-或-所提供引數數目不符合由建構函式呼叫慣例所要求的建構函式參數數目。-或-所提供引數型別不符合建構函式中所宣告的參數型別。-或-提供的引數是 <see cref="T:System.String" /> 或 <see cref="T:System.Type" /> 以外的參考型別。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 或 <paramref name="constructorArgs" /> 為 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary>初始化 CustomAttributeBuilder 類別的新執行個體，該類別指定了自訂屬性的建構函式、建構函式的引數，以及一組命名的欄位/值配對。</summary>
      <param name="con">自訂屬性的建構函式。</param>
      <param name="constructorArgs">自訂屬性建構函式的引數。</param>
      <param name="namedFields">自訂屬性的具名欄位。</param>
      <param name="fieldValues">自訂屬性的具名欄位值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="namedFields" /> 和 <paramref name="fieldValues" /> 陣列的長度不同。-或-<paramref name="con" /> 為靜態或私用。-或-所提供引數數目不符合由建構函式呼叫慣例所要求的建構函式參數數目。-或-所提供引數型別不符合建構函式中所宣告的參數型別。-或-欄位值型別不符合具名欄位型別。-或-欄位不屬於做為建構函式的相同類別或基底類別。-或-提供的引數或具名欄位是 <see cref="T:System.String" /> 或 <see cref="T:System.Type" /> 以外的參考型別。</exception>
      <exception cref="T:System.ArgumentNullException">其中一個參數為 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[])">
      <summary>初始化 CustomAttributeBuilder 類別的新執行個體，該類別指定了自訂屬性的建構函式、建構函式的引數，以及一組命名的屬性或值配對。</summary>
      <param name="con">自訂屬性的建構函式。</param>
      <param name="constructorArgs">自訂屬性建構函式的引數。</param>
      <param name="namedProperties">自訂屬性 (Attribute) 的具名屬性 (Property)。</param>
      <param name="propertyValues">自訂屬性 (Attribute) 的具名屬性 (Property) 值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="namedProperties" /> 和 <paramref name="propertyValues" /> 陣列的長度不同。-或-<paramref name="con" /> 為靜態或私用。-或-所提供引數數目不符合由建構函式呼叫慣例所要求的建構函式參數數目。-或-所提供引數型別不符合建構函式中所宣告的參數型別。-或-屬性值型別不符合具名屬性型別。-或-屬性不具有 Setter 方法。-或-屬性不屬於做為建構函式的相同類別或基底類別。-或-提供的引數或具名屬性是 <see cref="T:System.String" /> 或 <see cref="T:System.Type" /> 以外的參考型別。</exception>
      <exception cref="T:System.ArgumentNullException">其中一個參數為 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])">
      <summary>初始化 CustomAttributeBuilder 類別的新執行個體，該類別指定了自訂屬性的建構函式、建構函式的引數、一組命名的屬性或值配對，以及一組命名的欄位或值配對。</summary>
      <param name="con">自訂屬性的建構函式。</param>
      <param name="constructorArgs">自訂屬性建構函式的引數。</param>
      <param name="namedProperties">自訂屬性 (Attribute) 的具名屬性 (Property)。</param>
      <param name="propertyValues">自訂屬性 (Attribute) 的具名屬性 (Property) 值。</param>
      <param name="namedFields">自訂屬性的具名欄位。</param>
      <param name="fieldValues">自訂屬性的具名欄位值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="namedProperties" /> 和 <paramref name="propertyValues" /> 陣列的長度不同。-或-<paramref name="namedFields" /> 和 <paramref name="fieldValues" /> 陣列的長度不同。-或-<paramref name="con" /> 為靜態或私用。-或-所提供引數數目不符合由建構函式呼叫慣例所要求的建構函式參數數目。-或-所提供引數型別不符合建構函式中所宣告的參數型別。-或-屬性值型別不符合具名屬性型別。-或-欄位值型別不符合對應欄位型別的型別。-或-屬性不具有 Setter。-或-屬性或欄位不屬於做為建構函式的相同類別或基底類別。-或-提供的引數、具名屬性或具名欄位是 <see cref="T:System.String" /> 或 <see cref="T:System.Type" /> 以外的參考型別。</exception>
      <exception cref="T:System.ArgumentNullException">其中一個參數為 null。 </exception>
    </member>
    <member name="T:System.Reflection.Emit.DynamicMethod">
      <summary>定義及表示可以編譯、執行和捨棄的動態方法。捨棄的方法可被記憶體回收。</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>[安全性關鍵] 為模組建立全域的動態方法，指定方法名稱、屬性、呼叫慣例、傳回型別、參數型別、模組，以及是否應當略過動態方法的 Microsoft intermediate language (MSIL) 所存取型別與成員的 Just-In-Time (JIT) 可視性檢查。</summary>
      <param name="name">動態方法的名稱。這個名稱可以是零長度的字串，但不能是 null。</param>
      <param name="attributes">
        <see cref="T:System.Reflection.MethodAttributes" /> 值的位元組合，指定動態方法的屬性。允許的唯一組合是 <see cref="F:System.Reflection.MethodAttributes.Public" /> 和 <see cref="F:System.Reflection.MethodAttributes.Static" />。</param>
      <param name="callingConvention">動態方法的呼叫慣例。必須是 <see cref="F:System.Reflection.CallingConventions.Standard" />。</param>
      <param name="returnType">指定動態方法之傳回型別的 <see cref="T:System.Type" /> 物件，如果方法沒有任何傳回型別，為 null。 </param>
      <param name="parameterTypes">指定動態方法之參數型別的 <see cref="T:System.Type" /> 物件陣列，如果方法沒有任何參數則為 null。 </param>
      <param name="m">
        <see cref="T:System.Reflection.Module" />，表示動態方法在邏輯上與其相關聯的模組。 </param>
      <param name="skipVisibility">true 表示略過動態方法的 MSIL 所存取型別和成員的 JIT 可視性檢查，否則為 false。 </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>[安全性關鍵] 建立動態方法，指定方法名稱、屬性、呼叫慣例、傳回型別、參數型別、與動態方法在邏輯上相關聯的型別，以及是否應略過動態方法的 Microsoft intermediate language (MSIL) 所存取型別和成員的 Just-In-Time (JIT) 可視性檢查。</summary>
      <param name="name">動態方法的名稱。這個名稱可以是零長度的字串，但不能是 null。</param>
      <param name="attributes">
        <see cref="T:System.Reflection.MethodAttributes" /> 值的位元組合，指定動態方法的屬性。允許的唯一組合是 <see cref="F:System.Reflection.MethodAttributes.Public" /> 和 <see cref="F:System.Reflection.MethodAttributes.Static" />。</param>
      <param name="callingConvention">動態方法的呼叫慣例。必須是 <see cref="F:System.Reflection.CallingConventions.Standard" />。</param>
      <param name="returnType">指定動態方法之傳回型別的 <see cref="T:System.Type" /> 物件，如果方法沒有任何傳回型別，為 null。 </param>
      <param name="parameterTypes">指定動態方法之參數型別的 <see cref="T:System.Type" /> 物件陣列，如果方法沒有任何參數則為 null。</param>
      <param name="owner">動態方法在邏輯上與其相關聯的 <see cref="T:System.Type" />。動態方法可以存取型別的所有成員。</param>
      <param name="skipVisibility">true 表示略過動態方法之 MSIL 存取的型別和成員的 JIT 可見度檢查，否則為 false。</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
      <summary>建立匿名裝載動態方法，指定方法名稱、傳回型別及參數型別。 </summary>
      <param name="name">動態方法的名稱。這個名稱可以是零長度的字串，但不能是 null。</param>
      <param name="returnType">指定動態方法之傳回型別的 <see cref="T:System.Type" /> 物件，如果方法沒有任何傳回型別，為 null。 </param>
      <param name="parameterTypes">指定動態方法之參數型別的 <see cref="T:System.Type" /> 物件陣列，如果方法沒有任何參數則為 null。 </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> 的一個項目是 null 或 <see cref="T:System.Void" />。 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 是 <see cref="P:System.Type.IsByRef" /> 傳回 true 的型別。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
      <summary>建立匿名裝載動態方法，指定方法名稱、傳回型別、參數型別，以及是否應略過動態方法之 Microsoft Intermediate Language (MSIL) 存取的型別和成員的 Just-In-Time (JIT) 可見度檢查。</summary>
      <param name="name">動態方法的名稱。這個名稱可以是零長度的字串，但不能是 null。</param>
      <param name="returnType">指定動態方法之傳回型別的 <see cref="T:System.Type" /> 物件，如果方法沒有任何傳回型別，為 null。</param>
      <param name="parameterTypes">指定動態方法之參數型別的 <see cref="T:System.Type" /> 物件陣列，如果方法沒有任何參數則為 null。 </param>
      <param name="restrictedSkipVisibility">true 表示略過動態方法的 MSIL 所存取型別和成員的 JIT 可視性檢查，否則為 false。 </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
      <summary>[安全性關鍵] 為模組建立全域的動態方法，指定方法名稱、傳回型別、參數型別和模組。</summary>
      <param name="name">動態方法的名稱。這個名稱可以是零長度的字串，但不能是 null。</param>
      <param name="returnType">指定動態方法之傳回型別的 <see cref="T:System.Type" /> 物件，如果方法沒有任何傳回型別，為 null。 </param>
      <param name="parameterTypes">指定動態方法之參數型別的 <see cref="T:System.Type" /> 物件陣列，如果方法沒有任何參數則為 null。 </param>
      <param name="m">
        <see cref="T:System.Reflection.Module" />，表示動態方法在邏輯上與其相關聯的模組。 </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>[安全性關鍵] 為模組建立全域的動態方法，指定方法名稱、傳回型別、參數型別、模組，以及是否應當略過動態方法的 Microsoft intermediate language (MSIL) 所存取型別與成員的 Just-In-Time (JIT) 可視性檢查。</summary>
      <param name="name">動態方法的名稱。這個名稱可以是零長度的字串，但不能是 null。</param>
      <param name="returnType">指定動態方法之傳回型別的 <see cref="T:System.Type" /> 物件，如果方法沒有任何傳回型別，為 null。 </param>
      <param name="parameterTypes">指定動態方法之參數型別的 <see cref="T:System.Type" /> 物件陣列，如果方法沒有任何參數則為 null。 </param>
      <param name="m">
        <see cref="T:System.Reflection.Module" />，表示動態方法在邏輯上與其相關聯的模組。 </param>
      <param name="skipVisibility">true 表示略過動態方法的 MSIL 所存取型別和成員的 JIT 可見性檢查。 </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
      <summary>[安全性關鍵] 建立動態方法，指定方法名稱、傳回型別、參數型別和動態方法在邏輯上與其相關聯的型別。</summary>
      <param name="name">動態方法的名稱。這個名稱可以是零長度的字串，但不能是 null。</param>
      <param name="returnType">指定動態方法之傳回型別的 <see cref="T:System.Type" /> 物件，如果方法沒有任何傳回型別，為 null。 </param>
      <param name="parameterTypes">指定動態方法之參數型別的 <see cref="T:System.Type" /> 物件陣列，如果方法沒有任何參數則為 null。</param>
      <param name="owner">動態方法在邏輯上與其相關聯的 <see cref="T:System.Type" />。動態方法可以存取型別的所有成員。</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>[安全性關鍵] 建立動態方法，指定方法名稱、傳回型別、參數型別、與動態方法以邏輯方式相關聯的型別，以及是否應略過動態方法的 Microsoft intermediate language (MSIL) 所存取型別和成員的 Just-In-Time (JIT) 可視性檢查。</summary>
      <param name="name">動態方法的名稱。這個名稱可以是零長度的字串，但不能是 null。</param>
      <param name="returnType">指定動態方法之傳回型別的 <see cref="T:System.Type" /> 物件，如果方法沒有任何傳回型別，為 null。 </param>
      <param name="parameterTypes">指定動態方法之參數型別的 <see cref="T:System.Type" /> 物件陣列，如果方法沒有任何參數則為 null。</param>
      <param name="owner">動態方法在邏輯上與其相關聯的 <see cref="T:System.Type" />。動態方法可以存取型別的所有成員。</param>
      <param name="skipVisibility">true 表示略過動態方法的 MSIL 所存取型別和成員的 JIT 可視性檢查，否則為 false。 </param>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Attributes">
      <summary>取得建立動態方法時指定的屬性。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodAttributes" /> 值的位元組合，表示方法的屬性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
      <summary>取得建立動態方法時指定的呼叫慣例。</summary>
      <returns>其中一個 <see cref="T:System.Reflection.CallingConventions" /> 值，表示方法的呼叫慣例。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
      <summary>完成動態方法，並且建立指定型別的委派，其可用於執行動態方法。 </summary>
      <returns>指定型別的委派，可用於執行動態方法。</returns>
      <param name="delegateType">簽章與動態方法相符的委派型別。 </param>
      <exception cref="T:System.InvalidOperationException">動態方法沒有方法主體。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> 的參數數目錯誤或參數型別錯誤。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
      <summary>完成動態方法，並建立可用於執行該動態方法的委派，同時指定委派型別和委派繫結至的物件。</summary>
      <returns>指定型別的委派，可用於執行具有指定目標物件的動態方法。</returns>
      <param name="delegateType">簽章與動態方法相符的委派型別，不包含第 1 個參數。</param>
      <param name="target">委派繫結至的物件。必須與動態方法的第 1 個參數型別相同。</param>
      <exception cref="T:System.InvalidOperationException">動態方法沒有方法主體。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 與動態方法的第一個參數型別不同，無法指派給該型別。-或-<paramref name="delegateType" /> 的參數數目錯誤或參數型別錯誤。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
      <summary>取得宣告方法的型別，對於動態方法而言一律是 null。</summary>
      <returns>永遠為 null。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>定義動態方法的參數。</summary>
      <returns>永遠傳回 null。</returns>
      <param name="position">參數清單中的參數位置。參數的索引開頭以數字 1 表示第 1 個參數。</param>
      <param name="attributes">
        <see cref="T:System.Reflection.ParameterAttributes" /> 值的位元組合，指定參數的屬性。 </param>
      <param name="parameterName">參數名稱。名稱可以是長度為零的字串。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">方法不具有參數。-或- <paramref name="position" /> 小於 0。-或- <paramref name="position" /> 大於方法之參數的數目。 </exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
      <summary>傳回方法的基底實作。</summary>
      <returns>方法的基底實作。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
      <summary>傳回為方法定義的所有自訂屬性。</summary>
      <returns>物件的陣列，表示方法的所有自訂屬性。</returns>
      <param name="inherit">true 表示要搜尋方法的繼承鏈結以尋找自訂屬性，false 表示只檢查目前的方法。 </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>傳回已套用至方法之指定型別的自訂屬性。</summary>
      <returns>物件陣列，表示此方法的屬性屬於 <paramref name="attributeType" /> 型別或衍生自 <paramref name="attributeType" /> 型別。</returns>
      <param name="attributeType">
        <see cref="T:System.Type" />，表示要傳回之自訂屬性的型別。 </param>
      <param name="inherit">true 表示要搜尋方法的繼承鏈結以尋找自訂屬性，false 表示只檢查目前的方法。 </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
      <summary>傳回此方法的 Microsoft intermediate language (MSIL) 產生器，且預設 MSIL 資料流大小為 64 個位元組。</summary>
      <returns>方法的 <see cref="T:System.Reflection.Emit.ILGenerator" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
      <summary>傳回此方法的 Microsoft intermediate language (MSIL) 產生器，且使用指定的 MSIL 資料流大小。</summary>
      <returns>方法的 <see cref="T:System.Reflection.Emit.ILGenerator" /> 物件，具有指定的 MSIL 資料流大小。</returns>
      <param name="streamSize">MSIL 緩衝區的大小，以位元組為單位。 </param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
      <summary>傳回方法的實作旗標。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodImplAttributes" /> 值的位元組合，表示方法的實作旗標。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetParameters">
      <summary>傳回動態方法的參數。</summary>
      <returns>
        <see cref="T:System.Reflection.ParameterInfo" /> 物件的陣列，表示動態方法的參數。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.InitLocals">
      <summary>取得或設定值，指出方法中的區域變數是否以零為起始。 </summary>
      <returns>如果方法中的區域變數以零起始，為 true，否則為 false。預設值為 true。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>使用指定的文化特性資訊，在指定繫結器 (Binder) 的條件約束下，以指定的參數叫用動態方法。</summary>
      <returns>
        <see cref="T:System.Object" />，包含叫用方法的傳回值。</returns>
      <param name="obj">由於此參數是靜態的 (Static)，因此會動態方法忽略它們。指定 null。</param>
      <param name="invokeAttr">
        <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
      <param name="binder">透過反映來啟用繫結、引數型別的強制、成員的引動過程，以及擷取 <see cref="T:System.Reflection.MemberInfo" /> 物件的 <see cref="T:System.Reflection.Binder" /> 物件。如果 <paramref name="binder" /> 為 null，則會使用預設繫結器。如需詳細資訊，請參閱 <see cref="T:System.Reflection.Binder" />。</param>
      <param name="parameters">引數清單。這是與要叫用的方法參數具有相同數目、順序和型別的引數陣列。如果沒有參數，則這個參數應該是 null。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 的執行個體，用來控制型別的強制型轉。如果這是 null，則會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。例如，必須有這個資訊，才能將表示 1000 的 <see cref="T:System.String" /> 正確地轉換為 <see cref="T:System.Double" /> 值，因為 1000 在不同文化特性中有不同的表示方式。</param>
      <exception cref="T:System.NotSupportedException">不支援 <see cref="F:System.Reflection.CallingConventions.VarArgs" /> 呼叫慣例。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="parameters" /> 中的項目數不符合動態方法中的參數數目。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 之一個或多個項目的型別不符合動態方法的對應參數型別。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">動態方法是與模組相關聯，不是匿名裝載，而且建構時 <paramref name="skipVisibility" /> 設為 false，但是動態方法會存取不是 public 或 internal (在 Visual Basic 中為 Friend) 的成員。-或-動態方法是匿名裝載，且建構時 <paramref name="skipVisibility" /> 設為 false，但是它會存取不是 public 的成員。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
      <summary>指出指定的自訂屬性型別是否已定義。</summary>
      <returns>如果指定的自訂屬性型別已定義，為 true，否則為 false。</returns>
      <param name="attributeType">
        <see cref="T:System.Type" />，表示要搜尋之自訂屬性的型別。</param>
      <param name="inherit">true 表示要搜尋方法的繼承鏈結以尋找自訂屬性，false 表示只檢查目前的方法。</param>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
      <summary>不支援動態方法。</summary>
      <returns>不支援動態方法。</returns>
      <exception cref="T:System.InvalidOperationException">不適用於動態方法。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Module">
      <summary>取得動態方法在邏輯上與其相關聯的模組。</summary>
      <returns>目前的動態方法與其相關聯的 <see cref="T:System.Reflection.Module" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Name">
      <summary>取得動態方法的名稱。</summary>
      <returns>方法的簡單名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
      <summary>取得類別，用於反映中以取得方法。</summary>
      <returns>永遠為 null。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
      <summary>取得動態方法的傳回參數。</summary>
      <returns>永遠為 null。 </returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnType">
      <summary>取得動態方法之傳回值的型別。</summary>
      <returns>表示目前方法之傳回值型別的 <see cref="T:System.Type" />，如果方法沒有任何傳回型別，為 <see cref="T:System.Void" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
      <summary>取得動態方法之傳回型別的自訂屬性。</summary>
      <returns>
        <see cref="T:System.Reflection.ICustomAttributeProvider" />，表示動態方法之傳回型別的自訂屬性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.ToString">
      <summary>傳回方法的簽章，以字串表示。</summary>
      <returns>表示方法簽章的字串。</returns>
    </member>
    <member name="T:System.Reflection.Emit.FlowControl">
      <summary>描述指令如何變更控制流程。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Branch">
      <summary>分支指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Break">
      <summary>中斷指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Call">
      <summary>呼叫指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Cond_Branch">
      <summary>條件分支指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Meta">
      <summary>提供後續指令的相關資訊。例如，Reflection.Emit.Opcodes 的 Unaligned 指令具有 FlowControl.Meta，並指定後續指標指令可能未配置。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Next">
      <summary>一般控制流程。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Return">
      <summary>返回指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Throw">
      <summary>例外狀況 (Exception) 擲回指令。</summary>
    </member>
    <member name="T:System.Reflection.Emit.ILGenerator">
      <summary>產生 Microsoft Intermediate Language (MSIL) 指令。</summary>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)">
      <summary>開始 Catch 區塊。</summary>
      <param name="exceptionType">攔截到的例外狀況型別。</param>
      <exception cref="T:System.ArgumentException">Catch 區塊在經過篩選的例外狀況內。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptionType" /> 為 null，而例外狀況篩選條件區塊未傳回值，以表示應執行 finally 區塊，直到找到此 catch 區塊為止。</exception>
      <exception cref="T:System.NotSupportedException">產生的 Microsoft Intermediate Language (MSIL) 目前並不在例外狀況區塊中。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock">
      <summary>為篩選的例外狀況開始例外狀況區塊。</summary>
      <exception cref="T:System.NotSupportedException">產生的 Microsoft Intermediate Language (MSIL) 目前並不在例外狀況區塊中。-或-這個 <see cref="T:System.Reflection.Emit.ILGenerator" /> 屬於 <see cref="T:System.Reflection.Emit.DynamicMethod" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock">
      <summary>為非篩選的例外狀況開始例外狀況區塊。</summary>
      <returns>區塊結尾的標籤 (Label)。這樣可以讓您留在正確的地方執行 finally 區塊，或者完成試驗動作。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFaultBlock">
      <summary>在 Microsoft Intermediate Language (MSIL) 資料流上開始例外狀況錯誤區塊。</summary>
      <exception cref="T:System.NotSupportedException">產生的 MSIL 目前並不在例外狀況區塊中。-或-這個 <see cref="T:System.Reflection.Emit.ILGenerator" /> 屬於 <see cref="T:System.Reflection.Emit.DynamicMethod" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock">
      <summary>在 Microsoft Intermediate Language (MSIL) 指令資料流中開始 finally 區塊。</summary>
      <exception cref="T:System.NotSupportedException">產生的 MSIL 目前並不在例外狀況區塊中。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.BeginScope">
      <summary>開始語彙範圍 (Lexical Scope)。</summary>
      <exception cref="T:System.NotSupportedException">這個 <see cref="T:System.Reflection.Emit.ILGenerator" /> 屬於 <see cref="T:System.Reflection.Emit.DynamicMethod" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)">
      <summary>宣告指定型別的區域變數。</summary>
      <returns>宣告的區域變數。</returns>
      <param name="localType">區域變數的型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localType" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">包含型別已由 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法建立。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)">
      <summary>宣告指定型別的區域變數，選擇性 Pin 變數所參考的物件。</summary>
      <returns>區域變數。</returns>
      <param name="localType">區域變數的型別。</param>
      <param name="pinned">若要 Pin 記憶體中的物件，為 true，否則為 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localType" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">包含型別已由 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法建立。-或-封入方法的方法主體已由 <see cref="M:System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" /> 方法建立。</exception>
      <exception cref="T:System.NotSupportedException">這個 <see cref="T:System.Reflection.Emit.ILGenerator" /> 相關聯的方法不是由 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 代表。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.DefineLabel">
      <summary>宣告新的標籤。</summary>
      <returns>新標籤，可以做為分支的語彙基元 (Token)。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)">
      <summary>放置指定的指令到指令資料流中。</summary>
      <param name="opcode">Microsoft Intermediate Language (MSIL) 指令，要放置到資料流中。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)">
      <summary>放置指定的指令和字元引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</summary>
      <param name="opcode">MSIL 指令，要放置到資料流中。</param>
      <param name="arg">字元引數，緊接指令之後立即被推入資料流。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)">
      <summary>放置指定的指令和數值引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</summary>
      <param name="opcode">MSIL 指令，要放置到資料流中。</param>
      <param name="arg">數字引數，緊接指令之後立即被推入資料流。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)">
      <summary>放置指定的指令和數值引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</summary>
      <param name="opcode">MSIL 指令，要發出到資料流中。</param>
      <param name="arg">Int 引數，緊接指令之後立即被推入資料流。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)">
      <summary>放置指定的指令和數值引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</summary>
      <param name="opcode">MSIL 指令，要放置到資料流中。</param>
      <param name="arg">數字引數，緊接指令之後立即被推入資料流。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)">
      <summary>放置指定的指令和數值引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</summary>
      <param name="opcode">MSIL 指令，要放置到資料流中。</param>
      <param name="arg">數字引數，緊接指令之後立即被推入資料流。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)">
      <summary>放置指定建構函式的指定指令和中繼資料 (Metadata) 語彙基元到指令的 Microsoft Intermediate Language (MSIL) 資料流中。</summary>
      <param name="opcode">MSIL 指令，要發出到資料流中。</param>
      <param name="con">
        <paramref name="opcode" /> 的目標建構函式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 為 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)">
      <summary>放置指定的指令到 Microsoft Intermediate Language (MSIL) 資料流中，並留下空間，以便在完成修復時加入標籤。</summary>
      <param name="opcode">MSIL 指令，要發出到資料流中。</param>
      <param name="label">要分支的目標標籤。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])">
      <summary>放置指定的指令到 Microsoft Intermediate Language (MSIL) 資料流中，並留下空間，以便在完成修復時加入標籤。</summary>
      <param name="opcode">MSIL 指令，要發出到資料流中。</param>
      <param name="labels">形成跳躍表格之標籤物件的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="labels" /> 為 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)">
      <summary>放置指定的指令到 Microsoft Intermediate Language (MSIL) 資料流，然後放置指定區域變數的索引。</summary>
      <param name="opcode">MSIL 指令，要發出到資料流中。</param>
      <param name="local">區域變數。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="local" /> 參數的父方法與這個 <see cref="T:System.Reflection.Emit.ILGenerator" /> 的相關聯方法不相符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="local" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="opcode" /> 是單一位元組的指令，而 <paramref name="local" /> 表示索引大於 Byte.MaxValue 的區域變數。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)">
      <summary>放置指定的指令和簽章語彙基元到指令的 Microsoft Intermediate Language (MSIL) 資料流。</summary>
      <param name="opcode">MSIL 指令，要發出到資料流中。</param>
      <param name="signature">Helper，用來建構簽章語彙基元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signature" /> 為 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)">
      <summary>放置指定欄位的指定指令和中繼資料語彙基元到指令的 Microsoft Intermediate Language (MSIL) 資料流中。</summary>
      <param name="opcode">MSIL 指令，要發出到資料流中。</param>
      <param name="field">
        <paramref name="opcode" /> 的目標欄位。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)">
      <summary>放置指定的指令到 Microsoft Intermediate Language (MSIL) 資料流，然後放置指定方法的中繼資料語彙基元。</summary>
      <param name="opcode">MSIL 指令，要發出到資料流中。</param>
      <param name="meth">
        <paramref name="opcode" /> 的目標方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="meth" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="meth" /> 是泛型方法，其 <see cref="P:System.Reflection.MethodInfo.IsGenericMethodDefinition" /> 屬性為 false。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)">
      <summary>放置指定的指令和字元引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</summary>
      <param name="opcode">MSIL 指令，要放置到資料流中。</param>
      <param name="arg">字元引數，緊接指令之後立即被推入資料流。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)">
      <summary>放置指定的指令和數值引數到指令的 Microsoft Intermediate Language (MSIL) 資料流。</summary>
      <param name="opcode">MSIL 指令，要放置到資料流中。</param>
      <param name="arg">Single 引數，緊接指令之後立即被推入資料流。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)">
      <summary>放置指定的指令到 Microsoft Intermediate Language (MSIL) 資料流，然後放置指定字串的中繼資料語彙基元。</summary>
      <param name="opcode">MSIL 指令，要發出到資料流中。</param>
      <param name="str">
        <paramref name="opcode" /> 的目標字串。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)">
      <summary>放置指定的指令到 Microsoft Intermediate Language (MSIL) 資料流，然後放置指定型別的中繼資料語彙基元。</summary>
      <param name="opcode">MSIL 指令，要放置到資料流中。</param>
      <param name="cls">
        <paramref name="opcode" /> 的目標型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cls" /> 為 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])">
      <summary>將 call 或 callvirt 指令放入 Microsoft Intermediate Language (MSIL) 資料流，以呼叫 varargs 方法。</summary>
      <param name="opcode">MSIL 指令，要發出到資料流中。必須是 <see cref="F:System.Reflection.Emit.OpCodes.Call" />、<see cref="F:System.Reflection.Emit.OpCodes.Callvirt" /> 或 <see cref="F:System.Reflection.Emit.OpCodes.Newobj" />。</param>
      <param name="methodInfo">要呼叫的 varargs 方法。</param>
      <param name="optionalParameterTypes">如果方法是 varargs 方法，為選擇性引數的型別，否則為 null。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="opcode" /> 沒有指定方法呼叫。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="methodInfo" /> 為 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])">
      <summary>指定間接呼叫的 Managed 呼叫慣例，將 <see cref="F:System.Reflection.Emit.OpCodes.Calli" /> 指令放置到 Microsoft Intermediate Language (MSIL) 資料流中。</summary>
      <param name="opcode">MSIL 指令，要發出到資料流中。必須是 <see cref="F:System.Reflection.Emit.OpCodes.Calli" />。</param>
      <param name="callingConvention">要使用的 Managed 呼叫慣例。</param>
      <param name="returnType">結果的 <see cref="T:System.Type" />。</param>
      <param name="parameterTypes">指令需要的參數型別。</param>
      <param name="optionalParameterTypes">varargs 呼叫的選用參數型別。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="optionalParameterTypes" /> 不是 null，但是 <paramref name="callingConvention" /> 沒有包含 <see cref="F:System.Reflection.CallingConventions.VarArgs" /> 旗標。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)">
      <summary>發出以指定的區域變數呼叫 <see cref="Overload:System.Console.WriteLine" /> 所需的 Microsoft Intermediate Language (MSIL)。</summary>
      <param name="localBuilder">區域變數，其值要寫入主控台。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localBuilder" /> 的型別是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 或 <see cref="T:System.Reflection.Emit.EnumBuilder" />，不支援這些型別。-或-沒有任何 <see cref="Overload:System.Console.WriteLine" /> 的多載可以接受 <paramref name="localBuilder" /> 的型別。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localBuilder" /> 為 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)">
      <summary>發出以指定欄位呼叫 <see cref="Overload:System.Console.WriteLine" /> 所需的 Microsoft Intermediate Language (MSIL)。</summary>
      <param name="fld">欄位，其值要寫入主控台 (Console)。</param>
      <exception cref="T:System.ArgumentException">沒有可接受指定欄位之型別的 <see cref="Overload:System.Console.WriteLine" /> 方法的多載。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fld" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">欄位的型別為 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 或 <see cref="T:System.Reflection.Emit.EnumBuilder" />，不支援這些型別。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)">
      <summary>發出 Microsoft Intermediate Language (MSIL)，以字串呼叫 <see cref="Overload:System.Console.WriteLine" />。</summary>
      <param name="value">要列印的字串。</param>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndExceptionBlock">
      <summary>結束例外狀況區塊。</summary>
      <exception cref="T:System.InvalidOperationException">結束例外狀況區塊發生於程式碼資料流中未預期的地方。</exception>
      <exception cref="T:System.NotSupportedException">產生的 Microsoft Intermediate Language (MSIL) 目前並不在例外狀況區塊中。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.EndScope">
      <summary>結束語彙範圍。</summary>
      <exception cref="T:System.NotSupportedException">這個 <see cref="T:System.Reflection.Emit.ILGenerator" /> 屬於 <see cref="T:System.Reflection.Emit.DynamicMethod" />。</exception>
    </member>
    <member name="P:System.Reflection.Emit.ILGenerator.ILOffset">
      <summary>在由 <see cref="T:System.Reflection.Emit.ILGenerator" /> 發出的 Microsoft intermediate language (MSIL) 資料流中，取得目前位移 (以位元組為單位)。</summary>
      <returns>MSIL 資料流的位移，下一個指令將在此位置發出。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)">
      <summary>以指定標籤來標示 Microsoft Intermediate Language (MSIL) 資料流的目前位置。</summary>
      <param name="loc">要設定索引的標籤。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="loc" /> 表示標籤陣列中的無效索引。-或-<paramref name="loc" /> 的索引已經定義。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>標記 Microsoft Intermediate Language (MSIL) 資料流中的序列點。</summary>
      <param name="document">文件，要為其定義序列點。</param>
      <param name="startLine">行，序列點開始處。</param>
      <param name="startColumn">行中的欄，序列點開始處。</param>
      <param name="endLine">行，序列點結束處。</param>
      <param name="endColumn">行中的欄，序列點結束處。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startLine" /> 或 <paramref name="endLine" /> &lt;= 0。</exception>
      <exception cref="T:System.NotSupportedException">這個 <see cref="T:System.Reflection.Emit.ILGenerator" /> 屬於 <see cref="T:System.Reflection.Emit.DynamicMethod" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)">
      <summary>發出擲回例外狀況的指令。</summary>
      <param name="excType">要擲回的例外狀況型別的類別。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="excType" /> 不是 <see cref="T:System.Exception" /> 類別或 <see cref="T:System.Exception" /> 衍生類別。-或-型別沒有預設的建構函式。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="excType" /> 為 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)">
      <summary>指定要用來評估區域變數的命名空間 (Namespace)，並注意目前作用的語彙範圍。</summary>
      <param name="usingNamespace">用來評估區域變數的命名空間，並注意目前作用的語彙範圍</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="usingNamespace" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="usingNamespace" /> 為 null。</exception>
      <exception cref="T:System.NotSupportedException">這個 <see cref="T:System.Reflection.Emit.ILGenerator" /> 屬於 <see cref="T:System.Reflection.Emit.DynamicMethod" />。</exception>
    </member>
    <member name="T:System.Reflection.Emit.Label">
      <summary>表示指令資料流中的標籤。Label 會與 <see cref="T:System.Reflection.Emit.ILGenerator" /> 類別搭配使用。</summary>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Object)">
      <summary>檢查指定物件是否為 Label 的執行個體，並且與這個執行個體相等。</summary>
      <returns>如果 <paramref name="obj" /> 是 Label 的執行個體，並且與此物件相等，則會傳回 true，否則會傳回 false。</returns>
      <param name="obj">要與這個 Label 執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label)">
      <summary>指出目前的執行個體和指定的 <see cref="T:System.Reflection.Emit.Label" /> 是否相等。</summary>
      <returns>如果 <paramref name="obj" /> 的值等於目前執行個體的值，為 true，否則為 false。</returns>
      <param name="obj">要與目前執行個體相比較的 <see cref="T:System.Reflection.Emit.Label" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.Label.GetHashCode">
      <summary>產生此執行個體的雜湊程式碼。</summary>
      <returns>傳回此執行個體的雜湊程式碼。</returns>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary>指出兩個 <see cref="T:System.Reflection.Emit.Label" /> 結構是否相等。</summary>
      <returns>如果 <paramref name="a" /> 等於 <paramref name="b" />，為 true，否則為 false。</returns>
      <param name="a">要比較的 <see cref="T:System.Reflection.Emit.Label" />。<paramref name="b" />。</param>
      <param name="b">要比較的 <see cref="T:System.Reflection.Emit.Label" />。<paramref name="a" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label,System.Reflection.Emit.Label)">
      <summary>指出兩個 <see cref="T:System.Reflection.Emit.Label" /> 結構是否不相等。</summary>
      <returns>如果 <paramref name="a" /> 不等於 <paramref name="b" />，為 true，否則為 false。</returns>
      <param name="a">要比較的 <see cref="T:System.Reflection.Emit.Label" />。<paramref name="b" />。</param>
      <param name="b">要比較的 <see cref="T:System.Reflection.Emit.Label" />。<paramref name="a" />。</param>
    </member>
    <member name="T:System.Reflection.Emit.LocalBuilder">
      <summary>表示方法或建構函式 (Constructor) 中的區域變數。</summary>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.IsPinned">
      <summary>取得值，指出是否在記憶體中 Pin 區域變數參考的物件。</summary>
      <returns>如果在記憶體中 Pin 區域變數參考的物件為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalIndex">
      <summary>取得方法主體內區域變數之以零為起始的索引。</summary>
      <returns>整數值，指出方法主體內區域變數的宣告順序。</returns>
    </member>
    <member name="P:System.Reflection.Emit.LocalBuilder.LocalType">
      <summary>取得區域變數的型別。</summary>
      <returns>區域變數的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String)">
      <summary>設定此區域變數的名稱。</summary>
      <param name="name">區域變數的名稱。</param>
      <exception cref="T:System.InvalidOperationException">已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含的型別。-或-沒有為包含的模組定義符號寫入器。</exception>
      <exception cref="T:System.NotSupportedException">此區域是定義於動態方法中，而不是動態型別的方法中。</exception>
    </member>
    <member name="M:System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(System.String,System.Int32,System.Int32)">
      <summary>設定此區域變數的名稱和語彙範圍 (Lexical Scope)。</summary>
      <param name="name">區域變數的名稱。</param>
      <param name="startOffset">區域變數語彙範圍的起始位移 (Offset)。</param>
      <param name="endOffset">區域變數語彙範圍的結束位移。</param>
      <exception cref="T:System.InvalidOperationException">已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含的型別。-或-沒有為包含的模組定義符號寫入器。</exception>
      <exception cref="T:System.NotSupportedException">此區域是定義於動態方法中，而不是動態型別的方法中。</exception>
    </member>
    <member name="T:System.Reflection.Emit.OpCode">
      <summary>描述 Microsoft Intermediate Language (MSIL) 指令。</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Object)">
      <summary>測試指定物件是否等於這個 Opcode。</summary>
      <returns>如果 <paramref name="obj" /> 是 Opcode 的執行個體，並等於這個物件則為 true，否則為 false。</returns>
      <param name="obj">要與此物件比較的物件。</param>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)">
      <summary>指出目前的執行個體和指定的 <see cref="T:System.Reflection.Emit.OpCode" /> 是否相等。</summary>
      <returns>如果 <paramref name="obj" /> 的值等於目前執行個體的值，為 true，否則為 false。</returns>
      <param name="obj">要與目前執行個體相比較的 <see cref="T:System.Reflection.Emit.OpCode" />。</param>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.FlowControl">
      <summary>Microsoft Intermediate Language (MSIL) 指令的流量控制 (Flow Control) 特性。</summary>
      <returns>唯讀。流程控制的型別。</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.GetHashCode">
      <summary>傳回這個 Opcode 的已產生雜湊程式碼。</summary>
      <returns>傳回此執行個體的雜湊程式碼。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Name">
      <summary>Microsoft Intermediate Language (MSIL) 指令的名稱。</summary>
      <returns>唯讀。MSIL 指令的名稱。</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary>指出兩個 <see cref="T:System.Reflection.Emit.OpCode" /> 結構是否相等。</summary>
      <returns>如果 <paramref name="a" /> 等於 <paramref name="b" />，為 true，否則為 false。</returns>
      <param name="a">要比較的 <see cref="T:System.Reflection.Emit.OpCode" />。<paramref name="b" />。</param>
      <param name="b">要比較的 <see cref="T:System.Reflection.Emit.OpCode" />。<paramref name="a" />。</param>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary>指出兩個 <see cref="T:System.Reflection.Emit.OpCode" /> 結構是否不相等。</summary>
      <returns>如果 <paramref name="a" /> 不等於 <paramref name="b" />，為 true，否則為 false。</returns>
      <param name="a">要比較的 <see cref="T:System.Reflection.Emit.OpCode" />。<paramref name="b" />。</param>
      <param name="b">要比較的 <see cref="T:System.Reflection.Emit.OpCode" />。<paramref name="a" />。</param>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OpCodeType">
      <summary>Microsoft Intermediate Language (MSIL) 指令的型別。</summary>
      <returns>唯讀。Microsoft Intermediate Language (MSIL) 指令的型別。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OperandType">
      <summary>Microsoft Intermediate Language (MSIL) 指令的運算元型別。</summary>
      <returns>唯讀。MSIL 指令的運算元型別。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Size">
      <summary>Microsoft Intermediate Language (MSIL) 指令的大小。</summary>
      <returns>唯讀。MSIL 指令的大小。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPop">
      <summary>Microsoft Intermediate Language (MSIL) 指令如何從堆疊中取出。</summary>
      <returns>唯讀。MSIL 指令從堆疊中取出的方式。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPush">
      <summary>Microsoft Intermediate Language (MSIL) 指令如何將運算元推入至堆疊。</summary>
      <returns>唯讀。MSIL 指令將運算元推入至堆疊的方式。</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.ToString">
      <summary>傳回這個 Opcode 以做為 <see cref="T:System.String" />。</summary>
      <returns>傳回 <see cref="T:System.String" />，包含這個 Opcode 的名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Value">
      <summary>Microsoft Intermediate Language (MSIL) 指令的即時運算元值。</summary>
      <returns>唯讀。MSIL 指令的即時運算元值。</returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCodes">
      <summary>提供 Microsoft Intermediate Language (MSIL) 指令的欄位表示，以用於 <see cref="T:System.Reflection.Emit.ILGenerator" /> 類別成員 (例如 <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />) 的發出。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add">
      <summary>相加兩個值，並將結果推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf">
      <summary>相加兩個整數、執行溢位檢查，並將結果推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un">
      <summary>相加兩個不帶正負號的整數 (Unsigned Integer) 值、執行溢位檢查，並將結果推入評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.And">
      <summary>計算兩個值的位元 AND 運算，並將結果推入評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Arglist">
      <summary>將 Unmanaged 指標傳回目前方法的引數清單。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq">
      <summary>如果兩個值相等，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq_S">
      <summary>如果兩個值相等，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge">
      <summary>如果第 1 個值大於或等於第 2 個值，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_S">
      <summary>如果第 1 個值大於或等於第 2 個值，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un">
      <summary>當比較不帶正負號的整數值或未按順序的浮點值時，如果第 1 個值大於第 2 個值，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un_S">
      <summary>當比較不帶正負號的整數值或未按順序的浮點值時，如果第 1 個值大於第 2 個值，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt">
      <summary>如果第 1 個值大於第 2 個值，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_S">
      <summary>如果第 1 個值大於第 2 個值，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un">
      <summary>當比較不帶正負號的整數值或未按順序的浮點值時，如果第 1 個值大於第 2 個值，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un_S">
      <summary>當比較不帶正負號的整數值或未按順序的浮點值時，如果第 1 個值大於第 2 個值，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble">
      <summary>如果第 1 個值小於或等於第 2 個值，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_S">
      <summary>如果第 1 個值小於或等於第 2 個值，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un">
      <summary>當比較不帶正負號的整數值或未按順序的浮點值時，如果第 1 個值小於或等於第 2 個值，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un_S">
      <summary>當比較不帶正負號的整數值或未按順序的浮點值時，如果第 1 個值小於或等於第 2 個值，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt">
      <summary>如果第 1 個值小於第 2 個值，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_S">
      <summary>如果第 1 個值小於第 2 個值，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un">
      <summary>當比較不帶正負號的整數值或未按順序的浮點值時，如果第 1 個值小於第 2 個值，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un_S">
      <summary>當比較不帶正負號的整數值或未按順序的浮點值時，如果第 1 個值小於第 2 個值，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un">
      <summary>當兩個不帶正負號的整數值或未按順序的浮點值不相等時，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un_S">
      <summary>當兩個不帶正負號的整數值或未按順序的浮點值不相等時，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Box">
      <summary>將實值型別轉換成物件參考 (型別 O)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br">
      <summary>無條件地將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br_S">
      <summary>無條件地將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Break">
      <summary>以訊號指示 Common Language Infrastructure (CLI) 向偵錯工具告知已經過中斷點。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse">
      <summary>如果 <paramref name="value" /> 為 false、Null 參考 (在 Visual Basic 中為 Nothing) 或零，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse_S">
      <summary>如果 <paramref name="value" /> 為 false、Null 參考或零，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue">
      <summary>如果 <paramref name="value" /> 為 true、非 Null 或非零，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue_S">
      <summary>如果 <paramref name="value" /> 為 true、非 Null 或非零，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Call">
      <summary>呼叫傳遞的方法描述項所指示的方法。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Calli">
      <summary>以呼叫慣例所描述的引數，呼叫在評估堆疊上指示的方法 (做為進入點的指標)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Callvirt">
      <summary>在物件上呼叫晚期繫結方法，將傳回值推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Castclass">
      <summary>嘗試將參考所傳遞的物件轉型為指定的類別。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ceq">
      <summary>比較兩個值。如果它們相等，則將整數值 1 (int32) 推入至評估堆疊，否則會將 0 (int32) 推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt">
      <summary>比較兩個值。如果第一個值大於第二個值，則將整數值 1 (int32) 推入至評估堆疊，否則會將 0 (int32) 推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt_Un">
      <summary>比較兩個沒有正負號或未排序的值。如果第一個值大於第二個值，則將整數值 1 (int32) 推入至評估堆疊，否則會將 0 (int32) 推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ckfinite">
      <summary>如果值非有限數值，則擲回 <see cref="T:System.ArithmeticException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt">
      <summary>比較兩個值。如果第一個值小於第二個值，則將整數值 1 (int32) 推入至評估堆疊，否則會將 0 (int32) 推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt_Un">
      <summary>比較不帶正負號或未按順序的值 <paramref name="value1" /> 和 <paramref name="value2" />。如果 <paramref name="value1" /> 小於 <paramref name="value2" />，則將整數值 1 (int32) 推入至評估堆疊，否則會將 0 (int32) 推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Constrained">
      <summary>限制其上可進行虛擬方法呼叫的型別。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I">
      <summary>將評估堆疊頂端的值轉換成 native int。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I1">
      <summary>將評估堆疊頂端的值轉換成 int8，然後將它擴充 (填補) 到 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I2">
      <summary>將評估堆疊頂端的值轉換成 int16，然後將它擴充 (填補) 到 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I4">
      <summary>將評估堆疊頂端的值轉換成 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I8">
      <summary>將評估堆疊頂端的值轉換成 int64。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I">
      <summary>將評估堆疊頂端帶正負號的值轉換成帶正負號的 native int，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成帶正負號的 native int，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1">
      <summary>將評估堆疊頂端帶正負號的值轉換成帶正負號的 int8，並將它擴充到 int32，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成帶正負號的 int8，並將它擴充到 int32，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2">
      <summary>將評估堆疊頂端帶正負號的值轉換成帶正負號的 int16，並將它擴充到 int32，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成帶正負號的 int16，並將它擴充到 int32，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4">
      <summary>將評估堆疊頂端帶正負號的值轉換成帶正負號的 int32，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成帶正負號的 int32，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8">
      <summary>將評估堆疊頂端帶正負號的值轉換成帶正負號的 int64，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成帶正負號的 int64，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U">
      <summary>將評估堆疊頂端帶正負號的值轉換成 unsigned native int，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成 unsigned native int，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1">
      <summary>將評估堆疊頂端帶正負號的值轉換成 unsigned int8，並將它擴充到 int32，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成 unsigned int8，並將它擴充到 int32，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2">
      <summary>將評估堆疊頂端帶正負號的值轉換成 unsigned int16，並將它擴充到 int32，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成 unsigned int16，並將它擴充到 int32，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4">
      <summary>將評估堆疊頂端帶正負號的值轉換成 unsigned int32，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成 unsigned int32，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8">
      <summary>將評估堆疊頂端帶正負號的值轉換成 unsigned int64，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成 unsigned int64，在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R_Un">
      <summary>將評估堆疊頂端不帶正負號的整數值轉換成 float32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R4">
      <summary>將評估堆疊頂端的值轉換成 float32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R8">
      <summary>將評估堆疊頂端的值轉換成 float64。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U">
      <summary>將評估堆疊頂端的值轉換成 unsigned native int，並將它擴充到 native int。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U1">
      <summary>將評估堆疊頂端的值轉換成 unsigned int8，並將它擴充到 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U2">
      <summary>將評估堆疊頂端的值轉換成 unsigned int16，並將它擴充到 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U4">
      <summary>將評估堆疊頂端的值轉換成 unsigned int32，並將它擴充到 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U8">
      <summary>將評估堆疊頂端的值轉換成 unsigned int64，並將它擴充到 int64。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpblk">
      <summary>將指定的數值位元組數從來源位址複製到目的位址。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpobj">
      <summary>將位於物件位址上的實值型別 (型別 &amp;、* 或 native int) 複製到目的物件的位址 (型別 &amp;、* 或 native int)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div">
      <summary>除以兩個值，並將做為浮點 (型 F) 或商 (型別 int32) 的結果推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div_Un">
      <summary>除以兩個不帶正負號的整數值，並將結果 (int32) 推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Dup">
      <summary>複製評估堆疊上目前最頂端的值，然後將複製推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfilter">
      <summary>將控制權從例外狀況的 filter 子句傳回 Common Language Infrastructure (CLI) 例外處理常式。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfinally">
      <summary>將控制權從例外狀況區塊的 fault 或 finally 子句傳回 Common Language Infrastructure (CLI) 例外處理常式。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initblk">
      <summary>將指定位址上的指定記憶體區塊初始化為指定的大小和初始值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initobj">
      <summary>將位於指定位址之值型別的各個欄位來初始化為適當之基本型別的 null 參考或 0。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Isinst">
      <summary>測試物件參考 (型別 O) 是否為特定類別的執行個體。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Jmp">
      <summary>結束目前方法，並跳至指定的方法。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg">
      <summary>載入引數 (為指定的索引值所參考) 至堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_0">
      <summary>載入位於索引 0 的引數至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_1">
      <summary>載入位於索引 1 的引數至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_2">
      <summary>載入位於索引 2 的引數至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_3">
      <summary>載入位於索引 3 的引數至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_S">
      <summary>載入引數 (為指定的簡短形式索引所參考) 至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga">
      <summary>載入引數位址至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga_S">
      <summary>以簡短形式，載入引數位址至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4">
      <summary>推入型別 int32 的提供值至評估堆疊做為 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_0">
      <summary>將整數值 0 推入至評估堆疊做為 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_1">
      <summary>將整數值 1 推入至評估堆疊做為 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_2">
      <summary>將整數值 2 推入至評估堆疊做為 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_3">
      <summary>將整數值 3 推入至評估堆疊做為 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_4">
      <summary>將整數值 4 推入至評估堆疊做為 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_5">
      <summary>將整數值 5 推入至評估堆疊做為 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_6">
      <summary>將整數值 6 推入至評估堆疊做為 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_7">
      <summary>將整數值 7 推入至評估堆疊做為 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_8">
      <summary>將整數值 8 推入至評估堆疊做為 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1">
      <summary>將整數值 -1 推入至評估堆疊做為 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_S">
      <summary>將提供的 int8 值推入至評估堆疊做為 int32 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I8">
      <summary>將型別 int64 的提供值推入至評估堆疊做為 int64。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R4">
      <summary>將型別 float32 的提供值推入至評估堆疊做為型別 F (浮點數)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R8">
      <summary>將型別 float64 的提供值推入至評估堆疊做為型別 F (浮點數)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem">
      <summary>將位於指定之陣列索引處的元素當做指令中指定的型別載入至評估堆疊的頂端。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I">
      <summary>以位於指定之陣列索引的型別 native int，將元素載入至評估堆疊的頂端，做為 native int。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I1">
      <summary>以位於指定之陣列索引的型別 int8，將元素載入至評估堆疊的頂端，做為 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I2">
      <summary>以位於指定之陣列索引的型別 int16，將元素載入至評估堆疊的頂端，做為 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I4">
      <summary>以位於指定之陣列索引的型別 int32，將元素載入至評估堆疊的頂端，做為 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I8">
      <summary>以位於指定之陣列索引的型別 int64，將元素載入至評估堆疊的頂端，做為 int64。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R4">
      <summary>以位於指定之陣列索引的型別 float32，將元素載入至評估堆疊的頂端，做為型別 F (浮點數)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R8">
      <summary>以位於指定之陣列索引的型別 float64，將元素載入至評估堆疊的頂端，做為型別 F (浮點數)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_Ref">
      <summary>將包含位於指定的陣列索引中的物件參考元素載入至評估堆疊的頂端，做為型別 O (物件參考)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U1">
      <summary>以位於指定之陣列索引的型別 unsigned int8，將元素載入至堆疊的頂端，做為 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U2">
      <summary>以位於指定之陣列索引的型別 unsigned int16，將元素載入至堆疊的頂端，做為 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U4">
      <summary>以位於指定之陣列索引的型別 unsigned int32，將元素載入至堆疊的頂端，做為 int32。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelema">
      <summary>將位於指定陣列索引中的陣列元素位址載入至評估堆疊的頂端，做為型別 &amp; (Managed 指標)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldfld">
      <summary>尋找物件中的欄位值，該值的參考目前位於評估堆疊中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldflda">
      <summary>尋找物件中的欄位位址，該位址的參考目前位於評估堆疊中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldftn">
      <summary>將實作特定方法之機器碼的 Unmanaged 指標 (型別 native int) 推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I">
      <summary>將 native int 型別的值做為 native int 間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I1">
      <summary>將 int8 型別的值做為 int32 間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I2">
      <summary>將 int16 型別的值做為 int32 間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I4">
      <summary>將 int32 型別的值做為 int32 間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I8">
      <summary>將 int64 型別的值做為 int64 間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R4">
      <summary>將 float32 型別的值做為型別 F (浮點數)，間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R8">
      <summary>將 float64 型別的值做為型別 F (浮點數)，間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_Ref">
      <summary>將物件參考做為型別 O (物件參考)，間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U1">
      <summary>將 unsigned int8 型別的值做為 int32 間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U2">
      <summary>將 unsigned int16 型別的值做為 int32 間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U4">
      <summary>將 unsigned int32 型別的值做為 int32 間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldlen">
      <summary>推入以零為起始的一維陣列的元素數至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc">
      <summary>載入位於指定索引的區域變數至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_0">
      <summary>將位於索引 0 的區域變數載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_1">
      <summary>將位於索引 1 的區域變數載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_2">
      <summary>將位於索引 2 的區域變數載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_3">
      <summary>將位於索引 3 的區域變數載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_S">
      <summary>載入位於指定索引的區域變數至評估堆疊 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca">
      <summary>載入位於指定索引的區域變數位址至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca_S">
      <summary>載入位於指定索引的區域變數位址至評估堆疊 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldnull">
      <summary>將 Null 參考 (型別 O) 推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldobj">
      <summary>複製位址所指向的值型別物件到評估堆疊的頂端。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsfld">
      <summary>推入靜態欄位的值至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsflda">
      <summary>推入靜態欄位的位址至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldstr">
      <summary>推入新的物件參考至儲存於中繼資料的字串常值 (String Literal)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldtoken">
      <summary>轉換中繼資料語彙基元成它的執行階段表示，並將它推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldvirtftn">
      <summary>將實作與指定的物件相關聯的特定虛擬方法之機器碼的 Unmanaged 指標 (型別 native int) 推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave">
      <summary>結束程式碼的保護區，無條件地將控制權傳輸至特定的目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave_S">
      <summary>結束程式碼的保護區，無條件地將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Localloc">
      <summary>從區域動態記憶體集區中配置某些數量的位元組，並將第一個配置的位元組的位址 (暫時性指標，型別 *) 推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mkrefany">
      <summary>將特定型別的執行個體之型別參考推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul">
      <summary>將兩個值相乘，並將結果推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf">
      <summary>將兩個整數值相乘、執行溢位檢查，並將結果推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un">
      <summary>將兩個不帶正負號的整數值相乘、執行溢位檢查，再將結果推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Neg">
      <summary>將值變成相反值，並將結果推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newarr">
      <summary>將新的以零為起始一維陣列 (其元素屬於特定型別) 的物件參考推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newobj">
      <summary>建立實值型別的新物件或新執行個體，將物件參考 (型別 O) 推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Nop">
      <summary>如果已完成修補 Opcode，則填滿空間。雖然會耗用處理循環，卻不會執行任何有意義的運算。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Not">
      <summary>計算堆疊頂端的整數值的位元補數 (Complement)，並將結果當做相同型別來推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Or">
      <summary>計算堆疊頂端兩個整數值的位元補數，並將結果推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Pop">
      <summary>目前在評估堆疊頂端移除值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix1">
      <summary>這是保留的指示。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix2">
      <summary>這是保留的指示。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix3">
      <summary>這是保留的指示。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix4">
      <summary>這是保留的指示。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix5">
      <summary>這是保留的指示。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix6">
      <summary>這是保留的指示。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix7">
      <summary>這是保留的指示。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefixref">
      <summary>這是保留的指示。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Readonly">
      <summary>指定後續陣列位址作業在執行階段不執行任何型別檢查，且會傳回限制其變動性的 Managed 指標。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanytype">
      <summary>擷取內嵌於具型別參考中的型別語彙基元。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanyval">
      <summary>擷取內嵌於型別參考中的位址 (型別 &amp;)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem">
      <summary>將兩個值相除，並將餘數推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem_Un">
      <summary>將兩個不帶正負號的值相除，並將餘數推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ret">
      <summary>從目前方法傳回，將被呼叫端評估堆疊的傳回值 (如果有的話) 推入至呼叫端的評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rethrow">
      <summary>重新擲回目前的例外狀況。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shl">
      <summary>將整數值向左移 (使用零) 指定的位元數，將結果推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr">
      <summary>將整數值 (使用正負號) 向右移指定的位元數，將結果推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr_Un">
      <summary>將不帶正負號的整數值 (使用零) 向右移指定的位元數，將結果推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sizeof">
      <summary>將所提供值型別的大小推入至評估堆疊 (以位元組為單位)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg">
      <summary>在指定索引的引數槽中將值存放在評估堆疊的頂端。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg_S">
      <summary>在指定索引 (簡短形式) 的引數位置中將值儲存於評估堆疊的頂端。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem">
      <summary>使用評估堆疊上的值 (其型別在指令中指定)，取代在指定之索引處的陣列元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I">
      <summary>使用評估堆疊上的 native int 值，取代在指定之索引處的陣列元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I1">
      <summary>使用評估堆疊上的 int8 值，取代在指定之索引處的陣列元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I2">
      <summary>使用評估堆疊上的 int16 值，取代在指定之索引處的陣列元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I4">
      <summary>使用評估堆疊上的 int32 值，取代在指定之索引處的陣列元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I8">
      <summary>使用評估堆疊上的 int64 值，取代在指定之索引處的陣列元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R4">
      <summary>使用評估堆疊上的 float32 值，取代在指定之索引處的陣列元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R8">
      <summary>使用評估堆疊上的 float64 值，取代在指定之索引處的陣列元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_Ref">
      <summary>使用在評估堆疊上的物件參考值 (型別 O)，取代在指定索引的陣列元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stfld">
      <summary>以新值取代儲存在物件參考或指標的欄位中的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I">
      <summary>於所提供的位址儲存 native int 型別的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I1">
      <summary>於所提供的位址儲存 int8 型別的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I2">
      <summary>於所提供的位址儲存 int16 型別的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I4">
      <summary>於所提供的位址儲存 int32型別的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I8">
      <summary>於所提供的位址儲存 int64 型別的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R4">
      <summary>於所提供的位址儲存 float32 型別的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R8">
      <summary>於所提供的位址儲存 float64 型別的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_Ref">
      <summary>在所提供的位址儲存物件參考值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc">
      <summary>從評估堆疊的頂端取出目前值，並將它存放在指定索引的區域變數清單中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_0">
      <summary>從評估堆疊的頂端取出目前值，並將它存放在索引 0 的區域變數清單中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_1">
      <summary>從評估堆疊的頂端取出目前值，並將它存放在索引 1 的區域變數清單中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_2">
      <summary>從評估堆疊的頂端取出目前值，並將它存放在索引 2 的區域變數清單中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_3">
      <summary>從評估堆疊的頂端取出目前值，並將它存放在索引 3 的區域變數清單中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_S">
      <summary>從評估堆疊的頂端取出目前值，並將它存放在 <paramref name="index" /> (簡短形式) 的區域變數清單中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stobj">
      <summary>從評估堆疊複製指定型別的值到所提供的記憶體位址。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stsfld">
      <summary>以來自評估堆疊的值取代靜態欄位的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub">
      <summary>將另一個值減去某一個值，並將結果推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf">
      <summary>將另一個值減去某一個值、執行溢位檢查，並將結果推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un">
      <summary>將另一個不帶正負號的值減去某一個不帶正負號的值、執行溢位檢查，並將結果推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Switch">
      <summary>實作跳躍表格。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Tailcall">
      <summary>執行後置的方法呼叫指令 (例如目前方法的堆疊框架) 會在執行實際的呼叫指令之前移除。</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)">
      <summary>如果提供的 Opcode 採用單一位元組引數，則傳回 True 或 False。</summary>
      <returns>True 或 false。</returns>
      <param name="inst">Opcode 物件的執行個體。</param>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Throw">
      <summary>擲回目前位於評估堆疊的例外狀況物件。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unaligned">
      <summary>表示目前位於評估堆疊頂端的位置可能未對齊緊接 ldind、stind、ldfld、stfld、ldobj、stobj、initblk 或 cpblk 指示。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox">
      <summary>將值型別的 boxed 表示轉換成它的 unboxed 形式。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox_Any">
      <summary>將指令中指定之型別的 boxed 表示轉換成其 unboxed 形式。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Volatile">
      <summary>指定目前在評估堆疊頂端的位址可能是 volatile，並且無法快取讀取該位置的結果，或者無法隱藏存放該位置的多個存放區。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Xor">
      <summary>計算評估堆疊頂端兩個值的位元 XOR，將結果推入至評估堆疊。</summary>
    </member>
    <member name="T:System.Reflection.Emit.OpCodeType">
      <summary>描述 Microsoft Intermediate Language (MSIL) 指令的型別。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Macro">
      <summary>這些是 Microsoft Intermediate Language (MSIL) 指令，做為其他 MSIL 指令的同義字。例如，ldarg.0 表示 ldarg 指令具有值為 0 的引數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Nternal">
      <summary>描述保留的 Microsoft Intermediate Language (MSIL) 指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Objmodel">
      <summary>描述 Microsoft Intermediate Language (MSIL) 指令，應用於物件。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Prefix">
      <summary>描述會修改下列指令行為的前置詞指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Primitive">
      <summary>描述內建指令。</summary>
    </member>
    <member name="T:System.Reflection.Emit.OperandType">
      <summary>描述 Microsoft Intermediate Language (MSIL) 指令的運算元型別。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineBrTarget">
      <summary>運算元為 32 位元的整數分支目標。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineField">
      <summary>運算元為 32 位元中繼資料語彙基元。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI">
      <summary>運算元為 32 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI8">
      <summary>運算元為 64 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineMethod">
      <summary>運算元為 32 位元中繼資料語彙基元。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineNone">
      <summary>沒有運算元。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineR">
      <summary>運算元為 64 位元 IEEE 浮點數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSig">
      <summary>運算元為 32 位元中繼資料簽章語彙基元。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineString">
      <summary>運算元為 32 位元中繼資料字串語彙基元。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSwitch">
      <summary>運算元為切換指令的 32 位元整數引數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineTok">
      <summary>運算元為 FieldRef、MethodRef 或 TypeRef 語彙基元。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineType">
      <summary>運算元為 32 位元中繼資料語彙基元。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineVar">
      <summary>運算元為包含區域變數或引數順序的 16 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineBrTarget">
      <summary>運算元為 8 位元的整數分支目標。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineI">
      <summary>運算元為 8 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineR">
      <summary>運算元為 32 位元 IEEE 浮點數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineVar">
      <summary>運算元為包含區域變數或引數順序的 8 位元整數。</summary>
    </member>
    <member name="T:System.Reflection.Emit.PackingSize">
      <summary>指定兩個因數其中之一，可在封送處型別時決定欄位的記憶體對齊 (Alignment)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size1">
      <summary>封裝大小為 1 位元組。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size128">
      <summary>封裝大小為 128 位元組。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size16">
      <summary>封裝大小為 16 位元組。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size2">
      <summary>封裝大小為 2 位元組。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size32">
      <summary>封裝大小為 32 位元組。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size4">
      <summary>封裝大小為 4 位元組。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size64">
      <summary>封裝大小為 64 位元組。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size8">
      <summary>封裝大小為 8 位元組。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Unspecified">
      <summary>封裝大小未指定。</summary>
    </member>
    <member name="T:System.Reflection.Emit.ParameterBuilder">
      <summary>建立或關聯參數資訊。</summary>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Attributes">
      <summary>取得此參數的屬性。</summary>
      <returns>唯讀。擷取此參數的屬性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsIn">
      <summary>取得值，指出這是否為輸入參數。</summary>
      <returns>擷取這是否為輸入參數。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOptional">
      <summary>取得值，指出此參數是否為選擇項。</summary>
      <returns>指出此參數是否為選擇項的值。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.IsOut">
      <summary>取得值，指出此參數是否為輸出參數。</summary>
      <returns>擷取此參數是否為輸出參數。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Name">
      <summary>取得此參數的名稱。</summary>
      <returns>此參數的名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ParameterBuilder.Position">
      <summary>取得此參數的簽章位置。</summary>
      <returns>此參數的簽章位置。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)">
      <summary>設定參數的預設值。</summary>
      <param name="defaultValue">此參數的預設值。</param>
      <exception cref="T:System.ArgumentException">參數不是其中一個支援的型別。-或-<paramref name="defaultValue" /> 的型別與參數的型別不符。-或-參數的型別是 <see cref="T:System.Object" /> 或其他參考型別，<paramref name="defaultValue" /> 不是 null，而值不能指派給參考型別。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>使用指定的自訂屬性 BLOB (二進位大型物件) 來設定自訂屬性。</summary>
      <param name="con">自訂屬性的建構函式。</param>
      <param name="binaryAttribute">表示屬性的位元組 BLOB。</param>
    </member>
    <member name="M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>使用自訂屬性產生器來設定自訂屬性。</summary>
      <param name="customBuilder">用來定義自訂屬性的 Helper 類別的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 為 null。 </exception>
    </member>
    <member name="T:System.Reflection.Emit.SignatureHelper">
      <summary>提供建置簽章的方法。</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)">
      <summary>加入引數至簽章。</summary>
      <param name="clsArgument">引數型別。</param>
      <exception cref="T:System.ArgumentException">簽章已經完成。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clsArgument" /> 為 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)">
      <summary>將指定之型別的引數加入簽章，指定是否要 Pin 該引數。</summary>
      <param name="argument">引數型別。</param>
      <param name="pinned">如果引數固定則為 true；否則為 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 為 null。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])">
      <summary>使用指定的自訂修飾詞，將引數加入簽章。</summary>
      <param name="argument">引數型別。</param>
      <param name="requiredCustomModifiers">型別的陣列，表示引數的必要自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。如果引數沒有必要的自訂修飾詞，請指定 null。</param>
      <param name="optionalCustomModifiers">型別的陣列，表示引數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。如果引數沒有選擇性自訂修飾詞，請指定 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> 為 null。-或-<paramref name="requiredCustomModifiers" /> 或 <paramref name="optionalCustomModifiers" /> 的一個項目是 null。</exception>
      <exception cref="T:System.ArgumentException">簽章已經完成。-或-其中一個指定的自訂修飾詞為陣列型別。-或-其中一個指定的自訂修飾詞為開放泛型型別。也就是說，自訂修飾詞的 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性為 true。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])">
      <summary>使用指定的自訂修飾詞，將引數集合加入簽章。</summary>
      <param name="arguments">要加入的引數型別。</param>
      <param name="requiredCustomModifiers">型別陣列的陣列。每一個型別陣列都表示對應引數的必要自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。如果特定引數沒有必要的自訂修飾詞，請指定 null，而不要指定型別的陣列。如果沒有任何引數具有必要的自訂修飾詞，請指定 null，而不要指定陣列的陣列。</param>
      <param name="optionalCustomModifiers">型別陣列的陣列。每一個型別陣列都表示對應引數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。如果特定引數沒有選用的自訂修飾詞，請指定 null，而不要指定型別的陣列。如果沒有任何引數具有選用的自訂修飾詞，請指定 null，而不要指定陣列的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="arguments" /> 的項目是 null。-或-其中一個指定的自訂修飾詞為 null。(不過，您可以為任何引數的自訂修飾詞陣列指定 null。)</exception>
      <exception cref="T:System.ArgumentException">簽章已經完成。-或-其中一個指定的自訂修飾詞為陣列型別。-或-其中一個指定的自訂修飾詞為開放泛型型別。也就是說，自訂修飾詞的 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性為 true。-或-<paramref name="requiredCustomModifiers" /> 或 <paramref name="optionalCustomModifiers" /> 的大小不等於 <paramref name="arguments" /> 的大小。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.AddSentinel">
      <summary>標記 vararg 固定部分的結尾。只有在呼叫端正在建立 vararg 簽章呼叫站台時，這才會使用。</summary>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)">
      <summary>檢查此執行個體是否等於指定物件。</summary>
      <returns>如果指定物件為 SignatureHelper，並且表示相同簽章，則為 true；否則為 false。</returns>
      <param name="obj">應該與此執行個體比較的物件。</param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)">
      <summary>傳回欄位的簽章 Helper。</summary>
      <returns>欄位的 SignatureHelper 物件。</returns>
      <param name="mod">動態模組，包含要求 SignatureHelper 的欄位。</param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetHashCode">
      <summary>建立並傳回此執行個體的雜湊程式碼。</summary>
      <returns>根據名稱傳回雜湊程式碼。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper">
      <summary>傳回區域變數的簽章 Helper。</summary>
      <returns>區域變數的 <see cref="T:System.Reflection.Emit.SignatureHelper" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)">
      <summary>傳回區域變數的簽章 Helper。</summary>
      <returns>區域變數的 SignatureHelper 物件。</returns>
      <param name="mod">動態模組，包含要求 SignatureHelper 的區域變數。</param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)">
      <summary>傳回方法的簽章 Helper，其會指定方法的呼叫慣例和傳回型別。</summary>
      <returns>方法的 SignatureHelper 物件。</returns>
      <param name="callingConvention">方法的呼叫慣例。</param>
      <param name="returnType">方法的傳回型別，或者，如果是 Void 傳回型別，則為 null (Visual Basic 中的 Sub 程序)。</param>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)">
      <summary>傳回方法的簽章 Helper，其指定方法模組、呼叫慣例和傳回型別。</summary>
      <returns>方法的 SignatureHelper 物件。</returns>
      <param name="mod">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />，包含要求 SignatureHelper 的方法。</param>
      <param name="callingConvention">方法的呼叫慣例。</param>
      <param name="returnType">方法的傳回型別，或者，如果是 Void 傳回型別，則為 null (Visual Basic 中的 Sub 程序)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary>傳回方法的簽章 Helper，該方法具有標準的呼叫慣例、指定的方法模組、傳回型別和引數型別。</summary>
      <returns>方法的 SignatureHelper 物件。</returns>
      <param name="mod">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />，包含要求 SignatureHelper 的方法。</param>
      <param name="returnType">方法的傳回型別，或者，如果是 Void 傳回型別，則為 null (Visual Basic 中的 Sub 程序)。</param>
      <param name="parameterTypes">方法的引數型別，或者，如果方法沒有引數，則為 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> 為 null。-或-<paramref name="parameterTypes" /> 的項目是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>以指定的動態模組 (其中包含屬性、呼叫慣例、屬性型別、屬性引數以及傳回型別與引數的自訂修飾詞)，傳回屬性的簽章 Helper。</summary>
      <returns>屬性的 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 物件。</returns>
      <param name="mod">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />，包含要求 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 的屬性。</param>
      <param name="callingConvention">屬性存取子的呼叫慣例。</param>
      <param name="returnType">屬性型別。</param>
      <param name="requiredReturnTypeCustomModifiers">型別的陣列，表示傳回型別的必要自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。如果傳回型別沒有必要的自訂修飾詞，請指定 null。</param>
      <param name="optionalReturnTypeCustomModifiers">型別的陣列，表示傳回型別的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。如果傳回型別沒有選擇性自訂修飾詞，請指定 null。</param>
      <param name="parameterTypes">屬性的引數型別，或者，如果屬性沒有引數，則為 null。</param>
      <param name="requiredParameterTypeCustomModifiers">型別陣列的陣列。每一個型別陣列都表示屬性之對應引數的必要自訂修飾詞。如果特定引數沒有必要的自訂修飾詞，請指定 null，而不要指定型別的陣列。如果屬性沒有引數，或者沒有任何引數具有必要的自訂修飾詞，請指定 null，而不要指定陣列的陣列。</param>
      <param name="optionalParameterTypeCustomModifiers">型別陣列的陣列。每一個型別陣列都表示屬性之對應引數的選擇性自訂修飾詞。如果特定引數沒有選用的自訂修飾詞，請指定 null，而不要指定型別的陣列。如果屬性沒有引數，或者沒有任何引數具有選用的自訂修飾詞，請指定 null，而不要指定陣列的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> 為 null。-或-<paramref name="parameterTypes" /> 的項目是 null。-或-其中一個指定的自訂修飾詞為 null。(不過，您可以為任何引數的自訂修飾詞陣列指定 null。)</exception>
      <exception cref="T:System.ArgumentException">簽章已經完成。-或-<paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。-或-其中一個指定的自訂修飾詞為陣列型別。-或-其中一個指定的自訂修飾詞為開放泛型型別。也就是說，自訂修飾詞的 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性為 true。-或-<paramref name="requiredParameterTypeCustomModifiers" /> 或 <paramref name="optionalParameterTypeCustomModifiers" /> 的大小不等於 <paramref name="parameterTypes" /> 的大小。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])">
      <summary>指定包含屬性、屬性型別和屬性引數的動態模組後，傳回屬性的簽章 Helper。</summary>
      <returns>屬性的 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 物件。</returns>
      <param name="mod">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />，包含要求 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 的屬性。</param>
      <param name="returnType">屬性型別。</param>
      <param name="parameterTypes">引數型別，或者，如果屬性沒有引數，則為 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> 為 null。-或-<paramref name="parameterTypes" /> 的項目是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>指定包含屬性、屬性型別、屬性引數和傳回型別與引數之自訂修飾詞的動態模組後，傳回屬性的簽章 Helper。</summary>
      <returns>屬性的 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 物件。</returns>
      <param name="mod">
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />，包含要求 <see cref="T:System.Reflection.Emit.SignatureHelper" /> 的屬性。</param>
      <param name="returnType">屬性型別。</param>
      <param name="requiredReturnTypeCustomModifiers">型別的陣列，表示傳回型別的必要自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。如果傳回型別沒有必要的自訂修飾詞，請指定 null。</param>
      <param name="optionalReturnTypeCustomModifiers">型別的陣列，表示傳回型別的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。如果傳回型別沒有選擇性自訂修飾詞，請指定 null。</param>
      <param name="parameterTypes">屬性的引數型別，或者，如果屬性沒有引數，則為 null。</param>
      <param name="requiredParameterTypeCustomModifiers">型別陣列的陣列。每一個型別陣列都表示屬性之對應引數的必要自訂修飾詞。如果特定引數沒有必要的自訂修飾詞，請指定 null，而不要指定型別的陣列。如果屬性沒有引數，或者沒有任何引數具有必要的自訂修飾詞，請指定 null，而不要指定陣列的陣列。</param>
      <param name="optionalParameterTypeCustomModifiers">型別陣列的陣列。每一個型別陣列都表示屬性之對應引數的選擇性自訂修飾詞。如果特定引數沒有選用的自訂修飾詞，請指定 null，而不要指定型別的陣列。如果屬性沒有引數，或者沒有任何引數具有選用的自訂修飾詞，請指定 null，而不要指定陣列的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mod" /> 為 null。-或-<paramref name="parameterTypes" /> 的項目是 null。-或-其中一個指定的自訂修飾詞為 null。(不過，您可以為任何引數的自訂修飾詞陣列指定 null。)</exception>
      <exception cref="T:System.ArgumentException">簽章已經完成。-或-<paramref name="mod" /> 不是 <see cref="T:System.Reflection.Emit.ModuleBuilder" />。-或-其中一個指定的自訂修飾詞為陣列型別。-或-其中一個指定的自訂修飾詞為開放泛型型別。也就是說，自訂修飾詞的 <see cref="P:System.Type.ContainsGenericParameters" /> 屬性為 true。-或-<paramref name="requiredParameterTypeCustomModifiers" /> 或 <paramref name="optionalParameterTypeCustomModifiers" /> 的大小不等於 <paramref name="parameterTypes" /> 的大小。</exception>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.GetSignature">
      <summary>加入結尾語彙基元 (Token) 至簽章，並將簽章標記為已完成，如此其他語彙基元便無法再加入。</summary>
      <returns>傳回構成完整簽章的位元組陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.SignatureHelper.ToString">
      <summary>傳回表示簽章引數的字串。</summary>
      <returns>傳回表示此簽章之引數的字串。</returns>
    </member>
    <member name="T:System.Reflection.Emit.StackBehaviour">
      <summary>描述如何將值推入至堆疊或從堆疊取出。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop0">
      <summary>沒有值從堆疊取出。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1">
      <summary>從堆疊取出一個值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1_pop1">
      <summary>從第 1 個運算元的堆疊取出一個值，並從第 2 個運算元的堆疊取出一個值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi">
      <summary>從堆疊取出 32 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_pop1">
      <summary>從第 1 個運算元堆疊取出 32 位元整數，並從第 2 個運算元堆疊取出值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi">
      <summary>從第 1 個運算元堆疊取出 32 位元整數，並從第 2 個運算元堆疊取出 32 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi_popi">
      <summary>從第 1 個運算元堆疊取出 32 位元整數，從第 2 個運算元堆疊取出 32 位元整數，並從第三運算元堆疊取出 32 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi8">
      <summary>從第 1 個運算元堆疊取出 32 位元整數，並從第 2 個運算元堆疊取出 64 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr4">
      <summary>從第 1 個運算元堆疊取出 32 位元整數，並從第 2 個運算元堆疊取出 32 位元浮點數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr8">
      <summary>從第 1 個運算元堆疊取出 32 位元整數，並從第 2 個運算元堆疊取出 64 位元浮點數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref">
      <summary>從堆疊取出參考。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_pop1">
      <summary>從第 1 個運算元堆疊取出參考，並從第 2 個運算元堆疊取出值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi">
      <summary>從第 1 個運算元堆疊取出參考，並從第 2 個運算元堆疊取出 32 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_pop1">
      <summary>從第 1 個運算元堆疊取出參考，從第 2 個運算元堆疊取出值，並從第 3 個運算元堆疊取出 32 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi">
      <summary>從第 1 個運算元堆疊取出參考，從第 2 個運算元堆疊取出值，並從第 3 個運算元堆疊取出值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi8">
      <summary>從第 1 個運算元堆疊取出參考，從第 2 個運算元堆疊取出值，並從第 3 個運算元堆疊取出 64 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr4">
      <summary>從第 1 個運算元堆疊取出參考，從第 2 個運算元堆疊取出值，並從第 3 個運算元堆疊取出 32 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr8">
      <summary>從第 1 個運算元堆疊取出參考，從第 2 個運算元堆疊取出值，並從第 3 個運算元堆疊取出 64 位元浮點數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popref">
      <summary>從第 1 個運算元堆疊取出參考，從第 2 個運算元堆疊取出值，並從第 3 個運算元堆疊取出參考。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push0">
      <summary>沒有推入至堆疊的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1">
      <summary>推入一個值至堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1_push1">
      <summary>推入一個值至第 1 個運算元堆疊，並推入一個值至第 2 個運算元堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi">
      <summary>推入 32 位元整數至堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi8">
      <summary>推入 64 位元整數至堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr4">
      <summary>推入 32 位元浮點數至堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr8">
      <summary>推入 64 位元浮點數至堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushref">
      <summary>推入參考至堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpop">
      <summary>從堆疊取出變數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpush">
      <summary>推入變數至堆疊。</summary>
    </member>
    <member name="T:System.Resources.IResourceReader">
      <summary>提供從資源檔讀取資料的基本功能。</summary>
    </member>
    <member name="M:System.Resources.IResourceReader.Close">
      <summary>在釋放與資源讀取器相關的任何資源之後，關閉資源讀取器。</summary>
    </member>
    <member name="M:System.Resources.IResourceReader.GetEnumerator">
      <summary>傳回此讀取器資源的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</summary>
      <returns>此讀取器資源的字典列舉程式。</returns>
    </member>
    <member name="T:System.Resources.MissingManifestResourceException">
      <summary>如果主要組件沒有包含中性文化特性 (Culture) 的資源，而該資源因為遺漏適當的附屬組件而成為必要時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.Resources.MissingManifestResourceException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息來初始化 <see cref="T:System.Resources.MissingManifestResourceException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Resources.MissingManifestResourceException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.Resources.MissingManifestResourceException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數並非 null，則目前的例外狀況是在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Resources.NeutralResourcesLanguageAttribute">
      <summary>將組件的中性文化特性告知 <see cref="T:System.Resources.ResourceManager" />。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Resources.NeutralResourcesLanguageAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> 類別的新執行個體。</summary>
      <param name="cultureName">寫入目前組件的中性資源所用文化特性的名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cultureName" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Resources.NeutralResourcesLanguageAttribute.#ctor(System.String,System.Resources.UltimateResourceFallbackLocation)">
      <summary>使用指定的最終資源後援位置來初始化 <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> 類別的新執行個體。</summary>
      <param name="cultureName">寫入目前組件的中性資源所用文化特性的名稱。</param>
      <param name="location">一個列舉值，指出要從中擷取中性後援資源的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cultureName" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="location" /> 不是 <see cref="T:System.Resources.UltimateResourceFallbackLocation" /> 的成員。</exception>
    </member>
    <member name="P:System.Resources.NeutralResourcesLanguageAttribute.CultureName">
      <summary>取得文化特性名稱。</summary>
      <returns>主要組件的預設文化特性的名稱。</returns>
    </member>
    <member name="P:System.Resources.NeutralResourcesLanguageAttribute.Location">
      <summary>取得 <see cref="T:System.Resources.ResourceManager" /> 類別的位置，可用於透過 URI 後援程序擷取中性資源，如[087cfcba-5029-472f-a064-e4be5c3192c7]所述。</summary>
      <returns>一個列舉值，指出要從中擷取中性資源的位置 (主要組件或附屬組件)。</returns>
    </member>
    <member name="T:System.Resources.ResourceManager">
      <summary>提供在執行階段對特定文化特性資源的方便存取。</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor">
      <summary>使用預設值，初始化 <see cref="T:System.Resources.ResourceManager" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)">
      <summary>初始化 <see cref="T:System.Resources.ResourceManager" /> 類別的執行個體，此執行個體可查閱檔案 (衍生自使用指定 <see cref="T:System.Reflection.Assembly" /> 的指定主檔名) 中的資源。</summary>
      <param name="baseName">資源檔的根名稱，不含副檔名，但包括完整限定命名空間名稱。例如，名為 "MyApplication.MyResource.en-US.resources" 資源檔的根目錄名稱是 "MyApplication.MyResource"。</param>
      <param name="assembly">資源的主要組件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseName" /> 或 <paramref name="assembly" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> 不是執行階段物件。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)">
      <summary>初始化 <see cref="T:System.Resources.ResourceManager" /> 類別的執行個體，此執行個體可查閱檔案 (衍生自使用指定 <see cref="T:System.Reflection.Assembly" /> 的指定主檔名) 中的資源。</summary>
      <param name="baseName">資源檔的根名稱 (不含副檔名) 以及任何完整限定命名空間名稱。例如，名為 "MyApplication.MyResource.en-US.resources" 資源檔的根目錄名稱是 "MyApplication.MyResource"。</param>
      <param name="assembly">資源的主要組件。</param>
      <param name="usingResourceSet">要使用之自訂 <see cref="T:System.Resources.ResourceSet" /> 的型別。如果是 null，就會使用預設的執行階段 <see cref="T:System.Resources.ResourceSet" /> 物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="usingResourceset" /> 不是 <see cref="T:System.Resources.ResourceSet" /> 的衍生類別。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseName" /> 或 <paramref name="assembly" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.#ctor(System.Type)">
      <summary>根據指定 <see cref="T:System.Type" /> 的資訊，建立可查閱附屬組件中的 <see cref="T:System.Resources.ResourceManager" />。</summary>
      <param name="resourceSource">
        <see cref="T:System.Resources.ResourceManager" /> 從中衍生尋找 .resources 檔所需資訊的型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceSource" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> 不是執行階段物件。</exception>
    </member>
    <member name="P:System.Resources.ResourceManager.BaseName">
      <summary>取得 <see cref="T:System.Resources.ResourceManager" /> 搜尋資源的資源檔之根目錄名稱。</summary>
      <returns>
        <see cref="T:System.Resources.ResourceManager" /> 搜尋資源的資源檔之根目錄名稱。</returns>
    </member>
    <member name="F:System.Resources.ResourceManager.BaseNameField">
      <summary>指出 <see cref="T:System.Resources.ResourceManager" /> 搜尋資源的資源檔之根目錄名稱。</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.GetNeutralResourcesLanguage(System.Reflection.Assembly)">
      <summary>藉由在指定的 <see cref="T:System.Reflection.Assembly" /> 上讀取 <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> 的值，傳回主要組件的中性資源的 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <returns>如果找到，則為來自 <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> 的文化特性，否則為 <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />。</returns>
      <param name="a">要為其傳回 <see cref="T:System.Globalization.CultureInfo" /> 的組件。</param>
    </member>
    <member name="M:System.Resources.ResourceManager.GetObject(System.String)">
      <summary>傳回指定的 <see cref="T:System.Object" /> 資源的值。</summary>
      <returns>為呼叫端目前文化特性設定當地語系化的資源的值。如果找不到符合的值，就會傳回 null。資源的值可以是 null。</returns>
      <param name="name">要取得的資源名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 null。</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">找不到一組可用的資源，也沒有中性文化特性資源。</exception>
      <exception cref="T:System.NotSupportedException">資源依賴序列化。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
      <summary>取得為指定文化特性當地語系化之 <see cref="T:System.Object" /> 資源的值。</summary>
      <returns>為指定文化特性當地語系化的資源的值。如果「最符合」不可能，就會傳回 null。</returns>
      <param name="name">要取得的資源名稱。</param>
      <param name="culture">要當地語系化資源的文化特性。請注意，如果資源還沒有為這個文化特性當地語系化，查閱作業就會在查看中性文化特性後停止，改為使用文化特性的 <see cref="P:System.Globalization.CultureInfo.Parent" /> 屬性。如果這個值是 null，就會使用文化特性的 <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> 屬性取得 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 null。</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">找不到一組可用的資源，也沒有中性文化特性資源。</exception>
      <exception cref="T:System.NotSupportedException">資源依賴序列化。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)">
      <summary>為指定的 <see cref="T:System.Globalization.CultureInfo" /> 產生資源檔名稱。</summary>
      <returns>不能用於指定的 <see cref="T:System.Globalization.CultureInfo" /> 資源檔的名稱。</returns>
      <param name="culture">要建構資源檔案名稱的文化特性。</param>
    </member>
    <member name="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
      <summary>取得特定文化特性的 <see cref="T:System.Resources.ResourceSet" />。</summary>
      <returns>指定的資源集。</returns>
      <param name="culture">要尋找的文化特性。</param>
      <param name="createIfNotExists">true 表示要載入 <see cref="T:System.Resources.ResourceSet" /> (如果尚未載入的話)，否則為 false。</param>
      <param name="tryParents">true 表示在無法載入 <see cref="T:System.Resources.ResourceSet" /> 時嘗試父 <see cref="T:System.Globalization.CultureInfo" /> 物件，看看這些物件是否存在，否則為 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetSatelliteContractVersion(System.Reflection.Assembly)">
      <summary>傳回指定組件中 <see cref="T:System.Resources.SatelliteContractVersionAttribute" /> 屬性所指定的 <see cref="T:System.Version" />。</summary>
      <returns>指定之組件的附屬合約 <see cref="T:System.Version" />，或者，如果找不到版本，則為 null。</returns>
      <param name="a">要查閱 <see cref="T:System.Resources.SatelliteContractVersionAttribute" /> 屬性的組件。</param>
      <exception cref="T:System.ArgumentException">在組件 <paramref name="a" /> 中找到的 <see cref="T:System.Version" /> 無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="a" /> 為 null。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetStream(System.String)">
      <summary>傳回指定資源的 <see cref="T:System.IO.UnmanagedMemoryStream" /> 物件。</summary>
      <returns>Unmanaged 記憶體資料流。</returns>
      <param name="name">資源的名稱。</param>
      <exception cref="T:System.InvalidOperationException">指定之資源的值不是 <see cref="T:System.IO.MemoryStream" /> 物件。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">找不到一組可用的資源，也沒有中性資源。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)">
      <summary>使用指定的文化特性，從指定的資源傳回 <see cref="T:System.IO.UnmanagedMemoryStream" /> 物件。</summary>
      <returns>Unmanaged 記憶體資料流。</returns>
      <param name="name">資源的名稱。</param>
      <param name="culture">要用於資源查閱的文化特性。如果 <paramref name="culture" /> 為 null，則會使用目前執行緒的文化特性。</param>
      <exception cref="T:System.InvalidOperationException">指定之資源的值不是 <see cref="T:System.IO.MemoryStream" /> 物件。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 null。</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">找不到一組可用的資源，也沒有中性資源。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetString(System.String)">
      <summary>傳回指定的 <see cref="T:System.String" /> 資源的值。</summary>
      <returns>為呼叫端目前文化特性設定當地語系化的資源的值。如果找不到符合的值，就會傳回 null。</returns>
      <param name="name">要取得的資源名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定資源的值不是字串。</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">找不到一組可用的資源，也沒有中性文化特性資源。</exception>
    </member>
    <member name="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
      <summary>取得為指定文化特性當地語系化之 <see cref="T:System.String" /> 資源的值。</summary>
      <returns>為指定文化特性當地語系化的資源的值。如果「最符合」不可能，就會傳回 null。</returns>
      <param name="name">要取得的資源名稱。</param>
      <param name="culture">要當地語系化資源的文化特性。請注意，如果資源還沒有為這個文化特性當地語系化，查閱作業就會在查看中性文化特性後停止，改為使用文化特性的 <see cref="P:System.Globalization.CultureInfo.Parent" /> 屬性。如果這個值是 null，就會使用文化特性的 <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> 屬性取得 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定資源的值不是 <see cref="T:System.String" />。</exception>
      <exception cref="T:System.Resources.MissingManifestResourceException">找不到一組可用的資源，也沒有中性文化特性資源。</exception>
    </member>
    <member name="F:System.Resources.ResourceManager.HeaderVersionNumber">
      <summary>指出資源檔標頭版本的常數 readonly 值，<see cref="T:System.Resources.ResourceManager" /> 的目前實作能夠解譯和產生該標頭。</summary>
    </member>
    <member name="P:System.Resources.ResourceManager.IgnoreCase">
      <summary>取得或設定布林值，指出 ResourceManager 的目前執行個體是否允許 <see cref="M:System.Resources.ResourceManager.GetString(System.String)" /> 和 <see cref="M:System.Resources.ResourceManager.GetObject(System.String)" /> 方法中的不區分大小寫資源查詢。</summary>
      <returns>布林值，指出是否應該忽略資源名稱的大小寫。</returns>
    </member>
    <member name="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
      <summary>提供用來尋找 <see cref="T:System.Resources.ResourceSet" /> 的實作。</summary>
      <returns>指定的資源集。</returns>
      <param name="culture">要尋找的文化特性。</param>
      <param name="createIfNotExists">true 表示要載入 <see cref="T:System.Resources.ResourceSet" /> (如果尚未載入的話)，否則為 false。</param>
      <param name="tryParents">true 表示在無法載入 <see cref="T:System.Resources.ResourceSet" /> 時嘗試父 <see cref="T:System.Globalization.CultureInfo" /> 物件，看看這些物件是否存在，否則為 false。</param>
      <exception cref="T:System.Resources.MissingManifestResourceException">主要組件不包含 .resources 檔，而且必須查閱資源。</exception>
      <exception cref="T:System.ExecutionEngineException">執行階段發生內部錯誤。</exception>
    </member>
    <member name="F:System.Resources.ResourceManager.MagicNumber">
      <summary>保留用來識別資源檔的編號。</summary>
    </member>
    <member name="F:System.Resources.ResourceManager.MainAssembly">
      <summary>指出含有資源的主要 <see cref="T:System.Reflection.Assembly" />。</summary>
    </member>
    <member name="M:System.Resources.ResourceManager.ReleaseAllResources">
      <summary>告知 <see cref="T:System.Resources.ResourceManager" /> 在所有 <see cref="T:System.Resources.ResourceSet" /> 物件上呼叫 <see cref="M:System.Resources.ResourceSet.Close" />，並釋放所有資源。</summary>
    </member>
    <member name="P:System.Resources.ResourceManager.ResourceSetType">
      <summary>取得 <see cref="T:System.Resources.ResourceSet" /> (由 <see cref="T:System.Resources.ResourceManager" /> 用來建構 <see cref="T:System.Resources.ResourceSet" /> 物件) 的 <see cref="T:System.Type" />。</summary>
      <returns>
        <see cref="T:System.Resources.ResourceSet" /> 的 <see cref="T:System.Type" />，是 <see cref="T:System.Resources.ResourceManager" /> 用來建構 <see cref="T:System.Resources.ResourceSet" /> 物件。</returns>
    </member>
    <member name="T:System.Resources.ResourceSet">
      <summary>儲存針對一個特定文化特性 (Culture) 進行當地語系化的所有資源，忽略所有其他文化特性，包括任何回溯原則在內。</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.Resources.ResourceSet" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)">
      <summary>[安全性關鍵] 建立 <see cref="T:System.Resources.ResourceSet" /> 類別的新執行個體，這個執行個體會從指定的資料流讀取資源。</summary>
      <param name="stream">要讀取的資源的 <see cref="T:System.IO.Stream" />。資料流應參考現有資源檔。</param>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)">
      <summary>使用指定的資源讀取器來建立 <see cref="T:System.Resources.ResourceSet" /> 類別的新執行個體。</summary>
      <param name="reader">將使用到的讀取器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.#ctor(System.String)">
      <summary>[安全性關鍵] 建立 <see cref="T:System.Resources.ResourceSet" /> 類別的新執行個體，這個執行個體會從指定的檔案開啟和讀取資源。</summary>
      <param name="fileName">要讀取的資源檔。</param>
    </member>
    <member name="M:System.Resources.ResourceSet.Close">
      <summary>關閉並釋放此 <see cref="T:System.Resources.ResourceSet" /> 所使用的任何資源。</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.Dispose">
      <summary>處置 <see cref="T:System.Resources.ResourceSet" /> 之目前執行個體所使用的資源 (除了記憶體之外)。</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.Dispose(System.Boolean)">
      <summary>釋放與目前執行個體關聯的資源 (除了記憶體以外)，如果要求的話，請關閉內部 Managed 物件。</summary>
      <param name="disposing">表示包含在目前執行個體中的物件是否應該明確的關閉。</param>
    </member>
    <member name="M:System.Resources.ResourceSet.GetDefaultReader">
      <summary>傳回這種 <see cref="T:System.Resources.ResourceSet" /> 較佳的資源讀取器類別。</summary>
      <returns>傳回這種 <see cref="T:System.Resources.ResourceSet" /> 較佳的資源讀取器的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Resources.ResourceSet.GetEnumerator">
      <summary>傳回可透過 <see cref="T:System.Resources.ResourceSet" /> 逐一查看的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</summary>
      <returns>這個 <see cref="T:System.Resources.ResourceSet" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</returns>
      <exception cref="T:System.InvalidOperationException">這個 <see cref="T:System.Resources.ResourceSet" /> 已關閉。</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetObject(System.String)">
      <summary>以指定的名稱搜尋資源物件。</summary>
      <returns>要求的資源。</returns>
      <param name="name">要搜尋的資源名稱 (區分大小寫)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 null。</exception>
      <exception cref="T:System.InvalidOperationException">這個 <see cref="T:System.Resources.ResourceSet" /> 已關閉。</exception>
      <exception cref="T:System.ObjectDisposedException">物件已經過處置。</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)">
      <summary>如果要求的話，以不區分大小寫的指定名稱搜尋資源物件。</summary>
      <returns>要求的資源。</returns>
      <param name="name">要搜尋的資源名稱。</param>
      <param name="ignoreCase">指出指定名稱的大小寫是否應該忽略。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 null。</exception>
      <exception cref="T:System.InvalidOperationException">這個 <see cref="T:System.Resources.ResourceSet" /> 已關閉。</exception>
      <exception cref="T:System.ObjectDisposedException">物件已經過處置。</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetString(System.String)">
      <summary>以指定的名稱搜尋 <see cref="T:System.String" /> 資源。</summary>
      <returns>資源的值，如果值為 <see cref="T:System.String" />。</returns>
      <param name="name">要搜尋的資源名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 null。</exception>
      <exception cref="T:System.InvalidOperationException">具有指定名稱的資源不是 <see cref="T:System.String" />，或目前的 <see cref="T:System.Resources.ResourceSet" /> 已關閉。</exception>
      <exception cref="T:System.ObjectDisposedException">物件已經過處置。</exception>
    </member>
    <member name="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)">
      <summary>如果要求的話，以不區分大小寫的指定名稱搜尋 <see cref="T:System.String" /> 資源。</summary>
      <returns>資源的值，如果值為 <see cref="T:System.String" />。</returns>
      <param name="name">要搜尋的資源名稱。</param>
      <param name="ignoreCase">表示指定名稱的大小寫是否應該忽略。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 null。</exception>
      <exception cref="T:System.InvalidOperationException">具有指定名稱的資源不是 <see cref="T:System.String" />，或目前的 <see cref="T:System.Resources.ResourceSet" /> 已關閉。</exception>
      <exception cref="T:System.ObjectDisposedException">物件已經過處置。</exception>
    </member>
    <member name="F:System.Resources.ResourceSet.Reader">
      <summary>表示用來讀取資源的 <see cref="T:System.Resources.IResourceReader" />。</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.ReadResources">
      <summary>讀取所有資源。</summary>
    </member>
    <member name="M:System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.IEnumerator" />，以避免和 Dispose 發生競爭的情況。此成員並不適合直接從程式碼使用。</summary>
      <returns>這個 <see cref="T:System.Resources.ResourceSet" /> 的 <see cref="T:System.Collections.IDictionaryEnumerator" />。</returns>
    </member>
    <member name="T:System.Resources.SatelliteContractVersionAttribute">
      <summary>指出 <see cref="T:System.Resources.ResourceManager" /> 要請求附屬組件的特定版本，以簡化應用程式主要組件的更新。</summary>
    </member>
    <member name="M:System.Resources.SatelliteContractVersionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Resources.SatelliteContractVersionAttribute" /> 類別的新執行個體。</summary>
      <param name="version">
        <see cref="T:System.String" />，含有要載入的附屬組件的版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 參數為 null。</exception>
    </member>
    <member name="P:System.Resources.SatelliteContractVersionAttribute.Version">
      <summary>取得具有必要資源的附屬組件的版本。</summary>
      <returns>
        <see cref="T:System.String" />，包含具有必要資源的附屬組件的版本。</returns>
    </member>
    <member name="T:System.Resources.UltimateResourceFallbackLocation">
      <summary>指定 <see cref="T:System.Resources.ResourceManager" /> 類別 (Class) 在使用後援程序擷取中性資源時將使用的組件 (Assembly)。</summary>
    </member>
    <member name="F:System.Resources.UltimateResourceFallbackLocation.MainAssembly">
      <summary>後援資源位於主要組件中。</summary>
    </member>
    <member name="F:System.Resources.UltimateResourceFallbackLocation.Satellite">
      <summary>後援資源位於 <see cref="P:System.Resources.NeutralResourcesLanguageAttribute.Location" /> 屬性指定之位置的附屬組件中。</summary>
    </member>
    <member name="T:System.Runtime.GCLatencyMode">
      <summary>調整記憶體回收行程干擾應用程式的時間。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Batch">
      <summary>停用記憶體回收並行存取並回收批次呼叫中的物件。這是干擾最大的模式。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Interactive">
      <summary>可讓記憶體回收並行，並且在應用程式執行時回收物件。這是工作站的預設記憶體回收模式，而且比起 <see cref="F:System.Runtime.GCLatencyMode.Batch" /> 干擾較少。它會在回應速度與處理量間取得平衡。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.LowLatency">
      <summary>啟用回收物件時較為保守的記憶體回收。只有在系統記憶體不足才會出現完整回收，而層代 0 與層代 1 回收可能更常發生。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.SustainedLowLatency">
      <summary>啟用嘗試長時間將延遲降至最低的記憶體回收。回收行程會嘗試僅執行層代 0、 層代 1 和並行層代 2 回收。如果系統處於記憶體壓力下，則可能仍然會發生完全封鎖回收。</summary>
    </member>
    <member name="T:System.Runtime.GCSettings">
      <summary>指定目前處理序的記憶體回收設定。</summary>
    </member>
    <member name="P:System.Runtime.GCSettings.IsServerGC">
      <summary>取得值，這個值表示伺服器記憶體回收是否已啟用。</summary>
      <returns>如果伺服器記憶體回收已啟用則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.Runtime.GCSettings.LatencyMode">
      <summary>為記憶體回收取得或設定目前的延遲模式。</summary>
      <returns>一個列舉值，指定延遲模式。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="T:System.Runtime.GCLatencyMode" /> 設定為無效的值。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute">
      <summary>指定存取屬性 (Property) 欄位的屬性名稱。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.#ctor(System.String)">
      <summary>使用用來存取屬性 (Attributed) 欄位的屬性 (Property) 名稱，初始化 AccessedThroughPropertyAttribute 類別的新執行個體。</summary>
      <param name="propertyName">用來存取屬性欄位的屬性名稱。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.PropertyName">
      <summary>取得用來存取屬性欄位的屬性名稱。</summary>
      <returns>用來存取屬性欄位的屬性名稱。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncStateMachineAttribute">
      <summary>可讓您決定方法是否會以 Async (Visual Basic) 或 async (C# Reference) 修飾詞標記。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncStateMachineAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.AsyncStateMachineAttribute" /> 類別的新執行個體。</summary>
      <param name="stateMachineType">基本狀態機器型別的型別物件，用來實作狀態機器方法。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder">
      <summary>表示傳回工作的非同步方法的組建器。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>排定當指定的等待者完成時，狀態電腦將繼續進行下一個動作。</summary>
      <param name="awaiter">等待者。</param>
      <param name="stateMachine">狀態機器。</param>
      <typeparam name="TAwaiter">等待者的型別。</typeparam>
      <typeparam name="TStateMachine">狀態機器的型別。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>排定當指定的等待者完成時，狀態電腦將繼續進行下一個動作。可以從部分信任程式碼呼叫這個方法。</summary>
      <param name="awaiter">等待者。</param>
      <param name="stateMachine">狀態機器。</param>
      <typeparam name="TAwaiter">等待者的型別。</typeparam>
      <typeparam name="TStateMachine">狀態機器的型別。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Create">
      <summary>建立 <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder" /> 類別的執行個體。</summary>
      <returns>組建器的新執行個體。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception)">
      <summary>將工作標記為失敗，並將指定的例外狀況繫結至工作。</summary>
      <param name="exception">要繫結至工作的例外狀況。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">工作已完成。-或-產生器並未初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult">
      <summary>將工作標記為已順利完成。</summary>
      <exception cref="T:System.InvalidOperationException">工作已完成。-或-產生器並未初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>使組建器與指定的狀態機器建立關聯。</summary>
      <param name="stateMachine">與組建器相關聯的狀態機器執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">先前已設定狀態機器。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start``1(``0@)">
      <summary>開始執行組建器與相關聯的狀態機器。</summary>
      <param name="stateMachine">狀態機器執行個體，由參考傳遞。</param>
      <typeparam name="TStateMachine">狀態機器的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> 為 null。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Task">
      <summary>取得這個組建器的工作。</summary>
      <returns>這個組建器的工作。</returns>
      <exception cref="T:System.InvalidOperationException">產生器並未初始化。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1">
      <summary>表示非同步方法的組建器，而這些方法會傳回提供結果給參數的工作。</summary>
      <typeparam name="TResult">使用完成工作的結果。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
      <summary>排定當指定的等待者完成時，狀態電腦將繼續進行下一個動作。</summary>
      <param name="awaiter">等待者。</param>
      <param name="stateMachine">狀態機器。</param>
      <typeparam name="TAwaiter">等待者的型別。</typeparam>
      <typeparam name="TStateMachine">狀態機器的型別。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>排定當指定的等待者完成時，狀態電腦將繼續進行下一個動作。可以從部分信任程式碼呼叫這個方法。</summary>
      <param name="awaiter">等待者。</param>
      <param name="stateMachine">狀態機器。</param>
      <typeparam name="TAwaiter">等待者的型別。</typeparam>
      <typeparam name="TStateMachine">狀態機器的型別。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create">
      <summary>建立 <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1" /> 類別的執行個體。</summary>
      <returns>組建器的新執行個體。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)">
      <summary>將工作標記為失敗，並將指定的例外狀況繫結至工作。</summary>
      <param name="exception">要繫結至工作的例外狀況。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">工作已完成。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)">
      <summary>將工作標記為已順利完成。</summary>
      <param name="result">使用完成工作的結果。</param>
      <exception cref="T:System.InvalidOperationException">工作已完成。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>使組建器與指定的狀態機器建立關聯。</summary>
      <param name="stateMachine">與組建器相關聯的狀態機器執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">先前已設定狀態機器。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)">
      <summary>開始執行組建器與相關聯的狀態機器。</summary>
      <param name="stateMachine">狀態機器執行個體，由參考傳遞。</param>
      <typeparam name="TStateMachine">狀態機器的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> 為 null。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task">
      <summary>取得這個組建器的工作。</summary>
      <returns>這個組建器的工作。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder">
      <summary>表示不會傳回值的非同步方法的組建器。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>排定當指定的等待者完成時，狀態電腦將繼續進行下一個動作。</summary>
      <param name="awaiter">等待者。</param>
      <param name="stateMachine">狀態機器。</param>
      <typeparam name="TAwaiter">等待者的型別。</typeparam>
      <typeparam name="TStateMachine">狀態機器的型別。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>排定當指定的等待者完成時，狀態電腦將繼續進行下一個動作。可以從部分信任程式碼呼叫這個方法。</summary>
      <param name="awaiter">等待者。</param>
      <param name="stateMachine">狀態機器。</param>
      <typeparam name="TAwaiter">等待者的型別。</typeparam>
      <typeparam name="TStateMachine">狀態機器的型別。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Create">
      <summary>建立 <see cref="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder" /> 類別的執行個體。</summary>
      <returns>組建器的新執行個體。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetException(System.Exception)">
      <summary>將例外狀況繫結至方法組建器。</summary>
      <param name="exception">要繫結的例外狀況。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">產生器並未初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetResult">
      <summary>將方法組建器標記為已順利完成。</summary>
      <exception cref="T:System.InvalidOperationException">產生器並未初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>使組建器與指定的狀態機器建立關聯。</summary>
      <param name="stateMachine">與組建器相關聯的狀態機器執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> 為 null。</exception>
      <exception cref="T:System.InvalidOperationException">先前已設定狀態機器。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start``1(``0@)">
      <summary>開始執行組建器與相關聯的狀態機器。</summary>
      <param name="stateMachine">狀態機器執行個體，由參考傳遞。</param>
      <typeparam name="TStateMachine">狀態機器的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> 為 null。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
      <summary>允許您取得包含呼叫端之來源檔案的完整路徑。這是編譯時的檔案路徑。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerFilePathAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
      <summary>可讓您取得來源檔案中呼叫方法的行號。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerLineNumberAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
      <summary>讓您取得方法呼叫端的方法或屬性名稱。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerMemberNameAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxations">
      <summary>指定參數，以便控制程式碼的嚴格程度，而此程式碼是由 Common Language Runtime 的 Just-In-Time (JIT) 編譯器所產生。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning">
      <summary>將組件 (Assembly) 標記為不需要字串常值 (String Literal) 暫留。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute">
      <summary>控制由 Common Language Runtime 的 Just-In-Time (JIT) 編譯器所產生之程式碼的嚴格程度。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Int32)">
      <summary>使用指定的編譯 (Compilation) 寬鬆度來初始化 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> 類別的新執行個體。</summary>
      <param name="relaxations">編譯 (Compilation) 寬鬆度。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Runtime.CompilerServices.CompilationRelaxations)">
      <summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> 值來初始化 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> 類別的新執行個體。</summary>
      <param name="relaxations">其中一個 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> 值。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations">
      <summary>取得在建構目前的物件時所指定的編譯 (Compilation) 寬鬆度。</summary>
      <returns>在建構目前的物件時所指定的編譯 (Compilation) 寬鬆度。將 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> 列舉與 <see cref="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations" /> 屬性搭配使用。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute">
      <summary>區別編譯器產生的元素與使用者產生的元素。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGeneratedAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
      <summary>讓編譯器動態地將物件欄位附加至 Managed 物件。</summary>
      <typeparam name="TKey">欄位所附加至的參考型別。</typeparam>
      <typeparam name="TValue">欄位的型別。這必須是參考型別。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
      <summary>將索引鍵加入至表格。</summary>
      <param name="key">要加入的索引鍵。<paramref name="key" /> 表示屬性所附加至的物件。</param>
      <param name="value">索引鍵的屬性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 已經存在。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
      <summary>以不可分割方式搜尋表格中的指定索引鍵並傳回對應值。如果索引鍵不存在於表格中，則此方法會叫用表示表格值之類別的預設建構函式，以建立繫結至指定索引鍵的值。</summary>
      <returns>如果 <paramref name="key" /> 已存在於表格中，則為對應於 <paramref name="key" /> 的值，否則為 <paramref name="TValue" /> 泛型型別參數定義之類別的預設建構函式所建立的新值。</returns>
      <param name="key">要搜尋的索引鍵。<paramref name="key" /> 表示屬性所附加至的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
      <exception cref="T:System.MissingMethodException">表示資料表之值的類別沒有定義預設的建構函式。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)">
      <summary>以不可分割方式搜尋表格中的指定索引鍵並傳回對應值。如果索引鍵不存在於表格中，則此方法會叫用回呼方法來建立繫結至指定索引鍵的值。</summary>
      <returns>如果 <paramref name="key" /> 已存在於表格中，則為附加至 <paramref name="key" /> 的值，否則為 <paramref name="createValueCallback" /> 委派所傳回的新值。</returns>
      <param name="key">要搜尋的索引鍵。<paramref name="key" /> 表示屬性所附加至的物件。</param>
      <param name="createValueCallback">方法的委派，可針對指定的 <paramref name="key" /> 建立值。它具有型別為 <paramref name="TKey" /> 的單一參數，並且會傳回 <paramref name="TValue" /> 型別的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="createValueCallback" /> 為 null。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
      <summary>從表格移除索引鍵和其值。</summary>
      <returns>如果已找到並移除索引鍵則為 true；否則為 false。</returns>
      <param name="key">要移除的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
      <summary>取得指定之索引鍵的值。</summary>
      <returns>如果找到 <paramref name="key" /> 則為 true，否則為 false。</returns>
      <param name="key">索引鍵，表示具有附加屬性的物件。</param>
      <param name="value">此方法傳回的內容會包含附加的屬性值。如果找不到 <paramref name="key" />，則 <paramref name="value" /> 會包含預設值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback">
      <summary>表示方法，此方法會建立非預設值，以做為索引鍵/值組的一部分加入至 <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> 物件。</summary>
      <returns>參考型別的執行個體，表示要附加至特定索引鍵的值。</returns>
      <param name="key">屬於要建立之值的索引鍵。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable">
      <summary>提供 awaitable 物件，容許可在 <see cref="T:System.Threading.Tasks.Task" /> 進行已設定的等待。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.GetAwaiter">
      <summary>取得此 awaitable 的等待者。</summary>
      <returns>等待者。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1">
      <summary>提供 awaitable 物件，容許可在 <see cref="T:System.Threading.Tasks.Task`1" /> 進行已設定的等待。</summary>
      <typeparam name="TResult">這個 <see cref="T:System.Threading.Tasks.Task`1" /> 所產生之結果的型別。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.GetAwaiter">
      <summary>取得此 awaitable 的等待者。</summary>
      <returns>等待者。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter">
      <summary>提供 <see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1" /> 的等待者。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult">
      <summary>結束等待已完成的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <returns>已完成的 <see cref="T:System.Threading.Tasks.Task`1" /> 結果。</returns>
      <exception cref="T:System.NullReferenceException">未正確初始化 Awaiter。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">工作已取消。</exception>
      <exception cref="T:System.Exception">工作已完成，狀態為 Faulted。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.IsCompleted">
      <summary>取得一值，指出是否已完成等待中的工作。</summary>
      <returns>如果已完成等待中的工作，則為 true；否則為 false。</returns>
      <exception cref="T:System.NullReferenceException">未正確初始化 Awaiter。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
      <summary>排定持續進行與此 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> 相關聯的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="continuation">等待作業完成時叫用的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 引數為 null。</exception>
      <exception cref="T:System.NullReferenceException">未正確初始化 Awaiter。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>[安全性關鍵] 排定持續進行與此 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> 相關聯的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="continuation">等待作業完成時叫用的動作。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter">
      <summary>提供 <see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable" /> 的等待者。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult">
      <summary>結束等待已完成的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <exception cref="T:System.NullReferenceException">未正確初始化 Awaiter。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">工作已取消。</exception>
      <exception cref="T:System.Exception">工作已完成，狀態為 Faulted。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.IsCompleted">
      <summary>取得一值，指出是否已完成等待中的工作。</summary>
      <returns>如果已完成等待中的工作，則為 true；否則為 false。</returns>
      <exception cref="T:System.NullReferenceException">未正確初始化 Awaiter。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
      <summary>排定持續進行與此 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> 相關聯的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="continuation">等待作業完成時叫用的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 引數為 null。</exception>
      <exception cref="T:System.NullReferenceException">未正確初始化 Awaiter。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>[安全性關鍵] 排定持續進行與此 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> 相關聯的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="continuation">等待作業完成時叫用的動作。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.ContractHelper">
      <summary>提供方法，即二進位重寫器用來處理合約失敗的方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary>由二進位重寫器用來啟動預設失敗行為。</summary>
      <returns>如果已處理該事件且應該不會觸發失敗，則為 Null 參考 (在 Visual Basic 中的 Nothing)，否則會傳回當地語系化的失敗訊息。</returns>
      <param name="failureKind">其中一個列舉值，其指定失敗類型。</param>
      <param name="userMessage">其他使用者資訊。</param>
      <param name="conditionText">造成失敗的條件描述。</param>
      <param name="innerException">造成目前例外狀況的內部例外狀況。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="failureKind" /> 不是有效的 <see cref="T:System.Diagnostics.Contracts.ContractFailureKind" /> 值。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.String,System.Exception)">
      <summary>觸發預設的失敗行為。</summary>
      <param name="kind">其中一個列舉值，其指定失敗類型。</param>
      <param name="displayMessage">要顯示的訊息。</param>
      <param name="userMessage">其他使用者資訊。</param>
      <param name="conditionText">造成失敗的條件描述。</param>
      <param name="innerException">造成目前例外狀況的內部例外狀況。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.CustomConstantAttribute">
      <summary>定義編譯器可以保存 (Persist) 之欄位或方法參數的常數值。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CustomConstantAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CustomConstantAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CustomConstantAttribute.Value">
      <summary>取得此屬性 (Attribute) 儲存的常數值。</summary>
      <returns>此屬性儲存的常數值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DateTimeConstantAttribute">
      <summary>保存 (Persist) 欄位或參數的 8 位元組 <see cref="T:System.DateTime" /> 常數。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DateTimeConstantAttribute.#ctor(System.Int64)">
      <summary>使用表示此執行個體之日期和時間的 100 奈秒刻度數字，初始化 DateTimeConstantAttribute 類別的新執行個體。</summary>
      <param name="ticks">100 奈秒刻度數字，表示此執行個體的日期和時間。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DateTimeConstantAttribute.Value">
      <summary>取得表示此執行個體日期和時間的 100 奈秒刻度數字。</summary>
      <returns>100 奈秒刻度數字，表示此執行個體的日期和時間。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DecimalConstantAttribute">
      <summary>將 <see cref="T:System.Decimal" /> 常數值儲存於中繼資料中。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的帶正負號的整數值，初始化 <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> 類別的新執行個體。</summary>
      <param name="scale">10 縮放比例的次方，表示小數點右方的數字數目。有效值為 0 到 28 之間 (含)。</param>
      <param name="sign">0 的值表示正值，而 1 的值表示負值。</param>
      <param name="hi">96 位元 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的 32 個高位元。</param>
      <param name="mid">	96 位元 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的中間 32 個位元。</param>
      <param name="low">96 位元 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的 32 個低位元。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)">
      <summary>使用指定的不帶正負號的整數 (Unsigned Integer) 值來初始化 <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> 類別的新執行個體。</summary>
      <param name="scale">10 縮放比例的次方，表示小數點右方的數字數目。有效值為 0 到 28 之間 (含)。</param>
      <param name="sign">0 的值表示正值，而 1 的值表示負值。</param>
      <param name="hi">96 位元 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的 32 個高位元。</param>
      <param name="mid">96 位元 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的中間 32 個位元。</param>
      <param name="low">96 位元 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的 32 個低位元。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value">
      <summary>取得儲存在此屬性中的十進位常數。</summary>
      <returns>儲存在此屬性中的十進位常數。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
      <summary>表示方法是擴充方法，或表示類別或組件包含擴充方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExtensionAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.ExtensionAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedBufferAttribute">
      <summary>表示欄位應該被視為包含指定之基本型別 (Primitive Type) 的固定元素數目。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedBufferAttribute.#ctor(System.Type,System.Int32)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.FixedBufferAttribute" /> 類別的新執行個體。</summary>
      <param name="elementType">緩衝區中包含的元素型別。</param>
      <param name="length">緩衝區中的元素數目。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.ElementType">
      <summary>取得固定緩衝區中包含的元素型別。</summary>
      <returns>元素的型別。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.Length">
      <summary>取得固定緩衝區中的元素數目。</summary>
      <returns>固定緩衝區中的元素數目。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IAsyncStateMachine">
      <summary>代表針對非同步方法而產生的狀態機器。這個型別僅供編譯器使用。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IAsyncStateMachine.MoveNext">
      <summary>將狀態機器移至它的下一個狀態。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IAsyncStateMachine.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>利用堆積配置的複本來設定狀態機器。</summary>
      <param name="stateMachine">堆積配置的複本。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.ICriticalNotifyCompletion">
      <summary>代表會在 await 操作完成時排程接續項目的 awaiter。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ICriticalNotifyCompletion.UnsafeOnCompleted(System.Action)">
      <summary>[安全性關鍵] 排程在執行個體完成時要叫用的接續動作。</summary>
      <param name="continuation">操作完成時要叫用的動作。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.IndexerNameAttribute">
      <summary>在不直接支援索引子 (Indexer) 的程式語言中指示可藉以得知索引子的名稱。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.IndexerNameAttribute" /> 類別的新執行個體。</summary>
      <param name="indexerName">索引子的名稱，當顯示給其他語言時。 </param>
    </member>
    <member name="T:System.Runtime.CompilerServices.INotifyCompletion">
      <summary>代表會在操作完成時排程接續項目的操作。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.INotifyCompletion.OnCompleted(System.Action)">
      <summary>排程在執行個體完成時要叫用的接續動作。</summary>
      <param name="continuation">操作完成時要叫用的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 引數為 null (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
      <summary>對於通常只有在目前組件中可見的型別，指定其在另一個組件中為可見的。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
      <summary>使用指定的 Friend 組件名稱，初始化 <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> 類別的新執行個體。</summary>
      <param name="assemblyName">Friend 組件的名稱。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
      <summary>取得 Friend 組件的名稱，以利使用 internal 關鍵字標記的所有型別和型別成員都能看見。</summary>
      <returns>Friend 組件的名稱。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsVolatile">
      <summary>標記欄位為 volatile。無法繼承此類別。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IteratorStateMachineAttribute">
      <summary>可讓您決定 Visual Basic 中的方法是否會以 Iterator 修飾詞標記。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IteratorStateMachineAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.IteratorStateMachineAttribute" /> 類別的新執行個體。</summary>
      <param name="stateMachineType">基本狀態機器型別的型別物件，用來實作狀態機器方法。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodCodeType">
      <summary>定義方法實作的方式。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.IL">
      <summary>指定方法實作是採用 Microsoft Intermediate Language (MSIL)。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.Native">
      <summary>指定方法實作是採用機器碼。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.OPTIL">
      <summary>指定方法實作是採用最佳化中繼語言 (OPTIL)。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.Runtime">
      <summary>指定方法實作是由執行階段所提供。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplAttribute">
      <summary>指定方法實作方式的詳細資料。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor">
      <summary>初始化 MethodImplAttribute 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Int16)">
      <summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值，初始化 MethodImplAttribute 類別的新執行個體。</summary>
      <param name="value">位元遮罩，表示所要的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值，指定屬性方法的屬性。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Runtime.CompilerServices.MethodImplOptions)">
      <summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值，初始化 MethodImplAttribute 類別的新執行個體。</summary>
      <param name="methodImplOptions">
        <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值，指定屬性化方法的屬性。</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplAttribute.MethodCodeType">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.MethodCodeType" /> 值，指出要提供何種實作給此方法。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.MethodImplAttribute.Value">
      <summary>取得描述屬性方法的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值。</summary>
      <returns>描述屬性方法的值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplOptions">
      <summary>定義方法實作方式的詳細資料。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining">
      <summary>應該盡可能內嵌方法。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.ForwardRef">
      <summary>指定方法已宣告，但是在其他地方提供它的實作。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.InternalCall">
      <summary>指定內部呼叫。內部呼叫是對在 Common Language Runtime 本身內所實作方法的呼叫。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoInlining">
      <summary>指定方法不能被內嵌 (Inline)。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoOptimization">
      <summary>指定此方法不會透過 Just-In-Time (JIT) 編譯器進行最佳化。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.PreserveSig">
      <summary>指定方法簽章正如所宣告的方式匯出。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Synchronized">
      <summary>指定方法一次只能由一個執行緒執行。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Unmanaged">
      <summary>指定方法以 Unmanaged 程式碼的方式實作。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute">
      <summary>辨識包含中繼資料但沒有可執行程式碼的組件。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor(System.String)">
      <summary>使用指定的描述來初始化 <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> 類別的新執行個體。</summary>
      <param name="description">參考組件的描述。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.Description">
      <summary>取得參考組件的描述。</summary>
      <returns>參考組件的描述。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
      <summary>指定是否包裝不是衍生自 <see cref="T:System.Exception" /> 的例外狀況。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows">
      <summary>取得或設定值，指出是否包裝不是衍生自 <see cref="T:System.Exception" /> 類別的例外狀況。</summary>
      <returns>如果應該包裝不是衍生自 <see cref="T:System.Exception" /> 類別的例外狀況則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers">
      <summary>提供支援編譯器的靜態方法和屬性。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)">
      <summary>做為特定型別的雜湊函式，適用於雜湊演算法和資料結構中，例如雜湊表。</summary>
      <returns>由 <paramref name="o" /> 參數所識別之 <see cref="T:System.Object" /> 的雜湊程式碼。</returns>
      <param name="o">要為其擷取雜湊程式碼的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)">
      <summary>對值型別進行 Box 動作。</summary>
      <returns>如果 <paramref name="obj" /> 為值類別，則傳回它的 Boxed 複本，否則傳回 <paramref name="obj" /> 本身。</returns>
      <param name="obj">要進行 Box 的值型別。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)">
      <summary>提供從儲存在模組中的資料初始化陣列的快速方式。</summary>
      <param name="array">要初始化的陣列。</param>
      <param name="fldHandle">
        <see cref="T:System.RuntimeFieldHandle" />，指定用來初始化陣列的資料位置。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData">
      <summary>以位元組表示字串中資料起始的位移。</summary>
      <returns>從 <see cref="T:System.String" /> 物件開始到字串中之第一個字元的位元組位移。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)">
      <summary>執行指定類別建構函式 (Constructor) 方法。</summary>
      <param name="type">
        <see cref="T:System.RuntimeTypeHandle" />，指定要執行的類別建構函式方法。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.StateMachineAttribute">
      <summary>可讓您決定方法是否為狀態機器方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StateMachineAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.StateMachineAttribute" /> 類別的新執行個體。</summary>
      <param name="stateMachineType">基本狀態機器型別的型別物件，這是編譯器為了實作狀態機器方法而產生的。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType">
      <summary>傳回基本狀態機器型別的型別物件，這是編譯器為了實作狀態機器方法而產生的。</summary>
      <returns>取得基本狀態機器型別的型別物件，這是編譯器為了實作狀態機器方法而產生的。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.TaskAwaiter">
      <summary>提供等待非同步工作完成的物件。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter.GetResult">
      <summary>結束等待非同步工作的完成。</summary>
      <exception cref="T:System.NullReferenceException">未正確初始化 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> 物件。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">工作已取消。</exception>
      <exception cref="T:System.Exception">工作已完成，狀態為 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TaskAwaiter.IsCompleted">
      <summary>取得一值，指出非同步工作是否已經完成。</summary>
      <returns>如果工作已完成則為 true；否則為 false。</returns>
      <exception cref="T:System.NullReferenceException">未正確初始化 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> 物件。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter.OnCompleted(System.Action)">
      <summary>設定當 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> 物件停止以等待非同步工作完成時要執行時的動作。</summary>
      <param name="continuation">等待作業完成時執行的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 為 null。</exception>
      <exception cref="T:System.NullReferenceException">未正確初始化 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> 物件。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>[安全性關鍵] 排定與此等待者相關聯的非同步工作的接續動作。</summary>
      <param name="continuation">等待作業完成時叫用的動作。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.TaskAwaiter`1">
      <summary>表示等待非同步工作完成，並提供參數給結果的物件。</summary>
      <typeparam name="TResult">工作的結果。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.GetResult">
      <summary>結束等待非同步工作的完成。</summary>
      <returns>已完成工作的結果。</returns>
      <exception cref="T:System.NullReferenceException">未正確初始化 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> 物件。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">工作已取消。</exception>
      <exception cref="T:System.Exception">工作已完成，狀態為 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TaskAwaiter`1.IsCompleted">
      <summary>取得一值，指出非同步工作是否已經完成。</summary>
      <returns>如果工作已完成則為 true；否則為 false。</returns>
      <exception cref="T:System.NullReferenceException">未正確初始化 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> 物件。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.OnCompleted(System.Action)">
      <summary>設定當 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> 物件停止以等待非同步工作完成時要執行時的動作。</summary>
      <param name="continuation">等待作業完成時執行的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 為 null。</exception>
      <exception cref="T:System.NullReferenceException">未正確初始化 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> 物件。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.UnsafeOnCompleted(System.Action)">
      <summary>[安全性關鍵] 排定與此等待者相關聯的非同步工作的接續動作。</summary>
      <param name="continuation">等待作業完成時叫用的動作。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute">
      <summary>指定另一個組件中的來源 <see cref="T:System.Type" />。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedFromAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute" /> 類別的新執行個體。</summary>
      <param name="assemblyFullName">另一個組件中的來源 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFullName" /> 是 null 或空的。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedFromAttribute.AssemblyFullName">
      <summary>取得來源型別的組件完整名稱。</summary>
      <returns>來源型別的組件完整名稱。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedToAttribute">
      <summary>指定另一個組件中的目的 <see cref="T:System.Type" />。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedToAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.TypeForwardedToAttribute" /> 類別的新執行個體，並指定目的 <see cref="T:System.Type" />。</summary>
      <param name="destination">另一個組件中的目的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedToAttribute.Destination">
      <summary>取得另一個組件中的目的 <see cref="T:System.Type" />。</summary>
      <returns>另一個組件中的目的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute">
      <summary>指定某個型別含有可能會溢位的 Unmanaged 陣列。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.UnsafeValueTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.YieldAwaitable">
      <summary>提供以非同步方式切換至目標環境時等待的內容。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.GetAwaiter">
      <summary>擷取這個類別執行個體的 <see cref="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter" /> 物件。</summary>
      <returns>物件，用來監視非同步作業是否完成。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter">
      <summary>提供要切換至目標環境的等待者。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.GetResult">
      <summary>結束等待作業。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.IsCompleted">
      <summary>取得一值，指出是否需要產生。</summary>
      <returns>一律為 false，表示 <see cref="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter" /> 一律需要產生。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.OnCompleted(System.Action)">
      <summary>設定連續叫用。</summary>
      <param name="continuation">要以非同步方式叫用的動作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 為 null。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>[安全性關鍵] 將 <paramref name="continuation" /> 貼回至目前的內容。</summary>
      <param name="continuation">要以非同步方式叫用的動作。</param>
    </member>
    <member name="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo">
      <summary>表示其狀態是在程式碼中某一點所擷取的例外狀況。</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)">
      <summary>建立 <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> 物件，表示位於程式碼中目前點的指定例外狀況。</summary>
      <returns>物件，表示位於程式碼中目前點的指定例外狀況。</returns>
      <param name="source">擷取其狀態並由傳回的物件表示的例外狀況。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 為 null。</exception>
    </member>
    <member name="P:System.Runtime.ExceptionServices.ExceptionDispatchInfo.SourceException">
      <summary>取得目前執行個體所表示的例外狀況。</summary>
      <returns>目前執行個體所表示的例外狀況。 </returns>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw">
      <summary>在還原擷取例外狀況時所儲存的狀態之後，擲回目前 <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> 物件所表示的例外狀況。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
      <summary>允許 Unmanaged 方法呼叫 Managed 方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary>指定需要呼叫在 Unmanaged 程式碼中實作之方法的呼叫慣例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary>呼叫端會清除堆疊。這會啟用有 varargs 的呼叫函式，就可用於接受各種數目參數的方法，例如 Printf。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary>不支援此呼叫慣例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary>被呼叫端會清除堆疊。這是針對用平台叫用呼叫 Unmanaged 函式的預設慣例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary>第一個參數為 this 指標且儲存在 register ECX 中。其他參數會被推入至堆疊。此呼叫慣例是用來呼叫從 Unmanaged DLL 匯出之類別上的方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary>此成員並不真的是呼叫慣例，但會使用預設平台呼叫慣例。例如，在 Windows 上的預設值為 <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" />，在 Windows CE.NET 上則為 <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CharSet">
      <summary>指定應使用哪些封送處理字串的字元組。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Ansi">
      <summary />
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Auto">
      <summary>自動為目標作業系統妥善地封送處理字串。在 Windows NT、Windows 2000、Windows XP 和 Windows Server 2003 系列上，預設為 <see cref="F:System.Runtime.InteropServices.CharSet.Unicode" />；在 Windows 98 和 Windows Me 上，預設為 <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" />。雖然 Common Language Runtime 預設為 <see cref="F:System.Runtime.InteropServices.CharSet.Auto" />，但是語言可以覆寫此預設值。例如，C# 依預設會將所有方法和型別標示為 <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Unicode">
      <summary>封送處理字串為 Unicode 2 個位元組字元。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary>指出如果完全沒有產生介面時，要向 COM 公開的介面所產生的類別介面型別。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 列舉值來初始化 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 類別的新執行個體。</summary>
      <param name="classInterfaceType">描述為類別所產生的介面型別。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 列舉成員來初始化 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 類別的新執行個體。</summary>
      <param name="classInterfaceType">其中一個 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值，描述為類別產生的介面型別。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary>取得描述應該產生哪個型別之類別介面的 <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值。</summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 值，描述應該產生哪個型別的類別介面。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary>描述為類別所產生的類別介面型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary>此類別對 COM 用戶端只支援晚期繫結 (Late Bound)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary>雙重類別介面會自動地產生給類別並公開至 COM。 </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary>沒有類別介面產生給類別。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary>指定從型別程式庫匯入的 Coclass 的類別識別項。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary>使用原始 Coclass 的類別識別項來初始化 <see cref="T:System.Runtime.InteropServices.CoClassAttribute" /> 的新執行個體。</summary>
      <param name="coClass">
        <see cref="T:System.Type" />，包含原始 CoClass 的類別識別項。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary>取得原始 Coclass 的類別識別項。</summary>
      <returns>
        <see cref="T:System.Type" />，包含原始 Coclass 的類別識別項。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary>指定要公開 (Expose) 至 COM 的預設介面。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary>使用指定的 <see cref="T:System.Type" /> 物件做為公開至 COM 的預設介面來初始化 <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> 類別的新執行個體。</summary>
      <param name="defaultInterface">
        <see cref="T:System.Type" /> 值，指出要公開至 COM 的預設介面。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary>取得 <see cref="T:System.Type" /> 物件，其指定要公開至 COM 的預設介面。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，其指定要公開至 COM 的預設介面。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary>當無法辨認的 HRESULT 從 COM 方法呼叫傳回時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary>將例外狀況的內容轉換為字串。</summary>
      <returns>字串，包含例外狀況的 <see cref="P:System.Exception.HResult" />、<see cref="P:System.Exception.Message" />、<see cref="P:System.Exception.InnerException" /> 和 <see cref="P:System.Exception.StackTrace" /> 屬性。 </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary>指出屬性型別之前已經定義在 COM 中。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary>指出公開介面至 COM 的方式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary>指出介面以雙重介面公開給 COM，同時會啟用早期和晚期繫結。<see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" /> 為預設值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary>指出介面以分配介面 (Dispinterface) 公開給 COM，僅啟用晚期繫結。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIInspectable">
      <summary>指出介面以  介面公開給 COM。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary>指出介面以 IUnknown 衍生的介面公開給 COM，僅會啟用早期繫結。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComVisibleAttribute">
      <summary>控制對於個別 Managed 型別或成員，或組件中所有型別到 COM 的存取範圍。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)">
      <summary>初始化 ComVisibleAttribute 類別的新執行個體。</summary>
      <param name="visibility">true 表示 COM 可看見型別，否則為 false。預設值為 true。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComVisibleAttribute.Value">
      <summary>取得值，指出 COM 型別是否為可見。</summary>
      <returns>如果型別為可見則為 true，否則為 false。預設值為 true。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CriticalHandle">
      <summary>[安全性關鍵] 表示控制代碼資源的包裝函式類別 (Wrapper Class)。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.#ctor(System.IntPtr)">
      <summary>[安全性關鍵] 使用指定的無效控制代碼值，初始化 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 類別的新執行個體。</summary>
      <param name="invalidHandleValue">無效控制代碼的值 (通常是 0 或 -1)。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose">
      <summary>[安全性關鍵] 釋放 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose(System.Boolean)">
      <summary>[安全性關鍵] 釋放 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 類別所使用的 Unmanaged 資源，指定是否要執行一般處置 (Dispose) 作業。</summary>
      <param name="disposing">true 以執行正常處置作業；false 以完成控制代碼。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.CriticalHandle.handle">
      <summary>[安全性關鍵] 指定要包裝的控制代碼。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsClosed">
      <summary>[安全性關鍵] 取得值，這個值表示控制代碼是否已關閉。</summary>
      <returns>如果控制代碼已關閉則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsInvalid">
      <summary>[安全性關鍵] 在衍生類別 (Derived Class) 中覆寫時，取得值以指出這個控制代碼值是否無效。</summary>
      <returns>如果控制代碼有效則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle">
      <summary>[安全性關鍵] 在衍生類別中覆寫時，執行釋放控制代碼所需的程式碼。</summary>
      <returns>如果成功釋放控制代碼則為 true；但如果發生嚴重失敗的事件，則為 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)">
      <summary>[安全性關鍵] 將控制代碼設定為指定的既有控制代碼。</summary>
      <param name="handle">要使用的既有控制代碼。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid">
      <summary>[安全性關鍵] 將控制代碼標記為無效。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceMode">
      <summary>指出 <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> 方法的 IUnknown::QueryInterface 呼叫是否可以使用 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 介面。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Allow">
      <summary>IUnknown::QueryInterface 方法呼叫可以使用 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 介面。當您使用這個值時，<see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> 方法多載會如同 <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" /> 多載般運作。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Ignore">
      <summary>IUnknown::QueryInterface 方法呼叫應該忽略 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> 介面。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceResult">
      <summary>提供 <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> 方法的傳回值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Failed">
      <summary>特定介面 ID 的介面無法使用。在此例中，傳回的介面為 null。E_NOINTERFACE 會傳回給 IUnknown::QueryInterface 的呼叫者。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled">
      <summary>
        <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> 方法傳回的介面指標可以當做 IUnknown::QueryInterface 的結果使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled">
      <summary>未使用自訂 QueryInterface，而是，應該使用 IUnknown::QueryInterface 的預設實作。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary>指定 <see cref="T:System.Runtime.InteropServices.CharSet" /> 列舉的值。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 值，初始化 <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" /> 類別的新執行個體。</summary>
      <param name="charSet">其中一個 <see cref="T:System.Runtime.InteropServices.CharSet" /> 值。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary>取得所有 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 呼叫的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 預設值。</summary>
      <returns>所有 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 呼叫的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 預設值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary>指定方法、欄位或屬性的 COM 分派識別項 (DISPID)。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary>使用指定的 DISPID，初始化 DispIdAttribute 類別的新執行個體。</summary>
      <param name="dispId">成員的 DISPID。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary>取得成員的 DISPID。</summary>
      <returns>成員的 DISPID。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary>指出由 Unmanaged 動態連結程式庫 (DLL) 公開做為靜態進入點的屬性化方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary>使用含有要匯入方法的 DLL 名稱，來初始化 <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> 類別的新執行個體。</summary>
      <param name="dllName">包含 Unmanaged 方法的 DLL 名稱。如果 DLL 包含在組件中，此名稱可能會包括組件顯示名稱。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary>將 Unicode 字元轉換成 ANSI 字元時，啟用或停用最適合對應行為。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary>指出進入點的呼叫慣例。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary>指出如何將字串參數封送處理到方法和控制項函式名稱改變 (Name Mangling)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary>指出要呼叫的 DLL 進入點 (Entry Point) 的名稱或序數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary>控制 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> 欄位是否會導致 Common Language Runtime 搜尋 Unmanaged DLL 以取得不是指定名稱的進入點名稱。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary>指出是否直接轉譯具有 HRESULT 或 retval 傳回值的 Unmanaged 方法，或者是否將 HRESULT 或 retval 傳回值自動轉換成例外狀況。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary>指出自屬性方法傳回之前，被呼叫端是否呼叫 SetLastError Win32 API 函式。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary>取得包含進入點的 DLL 檔案名稱。</summary>
      <returns>包含進入點的 DLL 檔案名稱。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ExternalException">
      <summary>所有 COM Interop 例外狀況 (Exception) 和結構化例外處理 (Structured Exception Handling，SEH) 例外狀況的基底例外狀況型別。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor">
      <summary>使用預設屬性，初始化 ExternalException 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 ExternalException 類別的新執行個體。</summary>
      <param name="message">指定例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.Runtime.InteropServices.ExternalException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數並非 null，則目前的例外狀況是在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ExternalException.ErrorCode">
      <summary>取得錯誤的 HRESULT。</summary>
      <returns>錯誤的 HRESULT。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.FieldOffsetAttribute">
      <summary>指出在類別 (Class) 或結構的 Managed 和 Unmanaged 表示中欄位的實際位置。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.FieldOffsetAttribute.#ctor(System.Int32)">
      <summary>使用結構到欄位起始處的位移來初始化 <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> 類別的新執行個體。</summary>
      <param name="offset">結構起始處到欄位起始處的位元組位移。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.FieldOffsetAttribute.Value">
      <summary>取得結構起始處到欄位起始處的位移。</summary>
      <returns>取得從結構起始處到欄位起始處的位移。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandle">
      <summary>提供從 Unmanaged 記憶體存取 Managed 物件的方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
      <summary>[安全性關鍵] 擷取 <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /> 控制代碼中的物件位址。</summary>
      <returns>當做 <see cref="T:System.IntPtr" /> 的 Pinned 物件位址。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
      <summary>[安全性關鍵] 配置 <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" /> 控制代碼給指定的物件。</summary>
      <returns>保護物件不被記憶體回收的新 <see cref="T:System.Runtime.InteropServices.GCHandle" />。當不再需要時，這個 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 必須使用 <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> 來釋放。</returns>
      <param name="value">使用 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 的物件。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
      <summary>[安全性關鍵] 配置指定型別的控制代碼給指定的物件。</summary>
      <returns>指定型別的新 <see cref="T:System.Runtime.InteropServices.GCHandle" />。當不再需要時，這個 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 必須使用 <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> 來釋放。</returns>
      <param name="value">使用 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 的物件。</param>
      <param name="type">一個 <see cref="T:System.Runtime.InteropServices.GCHandleType" /> 值，表示要建立的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 型別。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
      <summary>判斷指定的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件是否等於目前的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件。</summary>
      <returns>如果指定的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件等於目前的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件則為 true，否則為 false。</returns>
      <param name="o">要與目前 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件比較的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Free">
      <summary>[安全性關鍵] 釋放 <see cref="T:System.Runtime.InteropServices.GCHandle" />。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
      <summary>[安全性關鍵] 傳回新的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件，而此物件是從 Managed 物件的控制代碼所建立。</summary>
      <returns>對應於值參數的新 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件。</returns>
      <param name="value">Managed 物件的 <see cref="T:System.IntPtr" /> 控制代碼，要從此控制代碼建立 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
      <summary>傳回目前 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件的識別項。</summary>
      <returns>目前 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件的識別項。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
      <summary>取得值，指出控制代碼是否已配置。</summary>
      <returns>如果已配置控制代碼則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
      <summary>[安全性關鍵] <see cref="T:System.Runtime.InteropServices.GCHandle" /> 是使用內部整數表示來儲存。</summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.GCHandle" />。</returns>
      <param name="value">
        <see cref="T:System.IntPtr" />，指出需要轉換的控制代碼。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
      <summary>
        <see cref="T:System.Runtime.InteropServices.GCHandle" /> 是使用內部整數表示來儲存。</summary>
      <returns>整數值。</returns>
      <param name="value">需要整數的 <see cref="T:System.Runtime.InteropServices.GCHandle" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.Target">
      <summary>[安全性關鍵] 取得或設定這個控制代碼表示的物件。</summary>
      <returns>此控制代碼表示的物件。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
      <summary>傳回 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件的內部整數表示。</summary>
      <returns>表示 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件的 <see cref="T:System.IntPtr" /> 物件。 </returns>
      <param name="value">
        <see cref="T:System.Runtime.InteropServices.GCHandle" /> 物件，要從此物件擷取內部整數表示。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandleType">
      <summary>表示 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 類別可以配置的控制代碼的型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Normal">
      <summary>此控制代碼型別表示不透明的控制代碼，意指您無法透過控制代碼解析固定物件的位址。您可以使用此型別來追蹤物件，避免它被記憶體回收行程回收。當 Unmanaged 用戶端持有 Managed 物件的唯一參考，而且參考無法從記憶體回收行程偵測時，此列舉成員就很有用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Pinned">
      <summary>此控制代碼型別類似於 <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" />，但是讓 Pin 物件的位址可以被取得。這會避免記憶體回收行程移動物件，並因而減低記憶體回收行程的效能。使用 <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> 方法儘快釋放配置的控制代碼。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Weak">
      <summary>此控制代碼型別被用來追蹤物件，但允許物件被回收。當收集某個物件時，會將 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 的內容歸零。在完成項執行之前會清空 Weak 參考，所以即使完成項重新啟動物件，仍然會清空 Weak 參考。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.WeakTrackResurrection">
      <summary>此控制代碼型別和 <see cref="F:System.Runtime.InteropServices.GCHandleType.Weak" /> 類似，但如果物件在結束期間重新恢復的話，控制代碼不會歸零。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary>不要自動 GUID 時，提供明確 <see cref="T:System.Guid" />。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary>使用指定的 GUID 初始化 <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> 類別的新執行個體。</summary>
      <param name="guid">要指派的 <see cref="T:System.Guid" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary>取得類別的 <see cref="T:System.Guid" />。</summary>
      <returns>類別的 <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomQueryInterface">
      <summary>讓開發人員提供 IUnknown::QueryInterface(REFIID riid, void **ppvObject) (英文) 方法的自訂 Managed 實作。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)">
      <summary>[安全性關鍵] 根據指定的介面 ID，傳回介面。</summary>
      <returns>其中一個列舉值，表示是否已使用 IUnknown::QueryInterface 的自訂實作。</returns>
      <param name="iid">要求之介面的 GUID。</param>
      <param name="ppv">這個方法傳回時，要求之介面的參考。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.InAttribute">
      <summary>指出資料應從呼叫端封送處理到被呼叫端，但不會封送處理回呼叫端。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.InAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary>指出 Managed 介面公開給 COM 時是否為雙重、僅分派或僅 IUnknown。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 列舉成員來初始化 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 類別的新執行個體。</summary>
      <param name="interfaceType">描述介面應如何公開給 COM 用戶端。 </param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 列舉成員來初始化 <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 類別的新執行個體。</summary>
      <param name="interfaceType">其中一個 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值，描述介面應如何公開給 COM 用戶端。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary>取得描述介面應如何公開給 COM 的 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值。</summary>
      <returns>描述介面應如何公開給 COM 的 <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.LayoutKind">
      <summary>在匯出至 Unmanaged 程式碼時控制物件的配置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Auto">
      <summary>執行階段會自動選擇 Unmanaged 記憶體中物件成員的適當配置。使用此列舉成員定義的物件不可以在 Managed 程式碼以外公開。嘗試這麼做會產生例外狀況。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Explicit">
      <summary>Unmanaged 記憶體中每個物件成員的精確位置是被明確地控制。每個成員必須使用 <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" />，表示該欄位在型別中的位置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Sequential">
      <summary>物件的成員是依序配置的，其順序即是將它們匯出至 Unmanaged 記憶體時所出現的順序。成員是根據 <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" /> 中所指定的封裝來配置，而且可以是不連續的。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary>[安全性關鍵] 提供方法的集合，方法用於配置 Unmanaged 記憶體、複製 Unmanaged 記憶體區塊和將 Managed 型別轉換為 Unmanaged 型別，也包括其他和 Unmanaged 程式碼互動時使用的方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary>[安全性關鍵] 遞增指定介面的參考次數 (Reference Count)。</summary>
      <returns>
        <paramref name="pUnk" /> 參數上的參考次數的新值。</returns>
      <param name="pUnk">要遞增的介面參考次數。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary>[安全性關鍵] 從 COM 工作記憶體配置器 (Allocator) 配置指定大小的記憶體區塊。</summary>
      <returns>表示配置的記憶體區塊位址的整數。這個記憶體必須使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" /> 來釋放。</returns>
      <param name="cb">要配置的記憶體區塊的大小。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary>[安全性關鍵] 使用指定的位元組數目，從處理序的 Unmanaged 記憶體中配置記憶體。</summary>
      <returns>新配置的記憶體的指標。這個記憶體必須使用 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> 方法加以釋放。</returns>
      <param name="cb">記憶體中需要的位元組數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary>[安全性關鍵] 從一維、Managed 8 位元不帶正負號的整數 (Unsigned Integer) 陣列將資料複製到 Unmanaged 記憶體指標。</summary>
      <param name="source">要複製的一維陣列。</param>
      <param name="startIndex">Copy 應該在陣列中開始的位置索引 (以零為起始)。</param>
      <param name="destination">要複製到的記憶體指標。</param>
      <param name="length">要複製的陣列元素數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary>[安全性關鍵] 從一維、Managed 字元陣列將資料複製到 Unmanaged 記憶體指標。</summary>
      <param name="source">要複製的一維陣列。</param>
      <param name="startIndex">Copy 應該在陣列中開始的位置索引 (以零為起始)。</param>
      <param name="destination">要複製到的記憶體指標。</param>
      <param name="length">要複製的陣列元素數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary>[安全性關鍵] 從一維、Managed 雙精度浮點數陣列將資料複製到 Unmanaged 記憶體指標。</summary>
      <param name="source">要複製的一維陣列。</param>
      <param name="startIndex">Copy 應該在陣列中開始的位置索引 (以零為起始)。</param>
      <param name="destination">要複製到的記憶體指標。</param>
      <param name="length">要複製的陣列元素數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary>[安全性關鍵] 從一維、Managed 16 位元帶正負號的整數陣列將資料複製到 Unmanaged 記憶體指標。</summary>
      <param name="source">要複製的一維陣列。</param>
      <param name="startIndex">Copy 應該在陣列中開始的位置索引 (以零為起始)。</param>
      <param name="destination">要複製到的記憶體指標。</param>
      <param name="length">要複製的陣列元素數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary>[安全性關鍵] 從一維、Managed 32 位元帶正負號的整數陣列將資料複製到 Unmanaged 記憶體指標。</summary>
      <param name="source">要複製的一維陣列。</param>
      <param name="startIndex">Copy 應該在陣列中開始的位置索引 (以零為起始)。</param>
      <param name="destination">要複製到的記憶體指標。</param>
      <param name="length">要複製的陣列元素數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary>[安全性關鍵] 從一維、Managed 64 位元帶正負號的整數陣列將資料複製到 Unmanaged 記憶體指標。</summary>
      <param name="source">要複製的一維陣列。</param>
      <param name="startIndex">Copy 應該在陣列中開始的位置索引 (以零為起始)。</param>
      <param name="destination">要複製到的記憶體指標。</param>
      <param name="length">要複製的陣列元素數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary>[安全性關鍵] 從 Unmanaged 記憶體指標將資料複製到 Managed 8 位元不帶正負號的整數 (Unsigned Integer) 陣列。</summary>
      <param name="source">要複製的來源記憶體指標。</param>
      <param name="destination">要複製的陣列。</param>
      <param name="startIndex">Copy 應該在陣列中開始的位置索引 (以零為起始)。</param>
      <param name="length">要複製的陣列元素數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary>[安全性關鍵] 從 Unmanaged 記憶體指標將資料複製到 Managed 字元陣列。</summary>
      <param name="source">要複製的來源記憶體指標。</param>
      <param name="destination">要複製的陣列。</param>
      <param name="startIndex">Copy 應該在陣列中開始的位置索引 (以零為起始)。</param>
      <param name="length">要複製的陣列元素數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary>[安全性關鍵] 從 Unmanaged 記憶體指標將資料複製到 Managed 雙精度浮點數陣列。</summary>
      <param name="source">要複製的來源記憶體指標。</param>
      <param name="destination">要複製的陣列。</param>
      <param name="startIndex">Copy 應該在陣列中開始的位置索引 (以零為起始)。</param>
      <param name="length">要複製的陣列元素數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary>[安全性關鍵] 從 Unmanaged 記憶體指標將資料複製到 Managed 16 位元帶正負號的整數陣列。</summary>
      <param name="source">要複製的來源記憶體指標。</param>
      <param name="destination">要複製的陣列。</param>
      <param name="startIndex">Copy 應該在陣列中開始的位置索引 (以零為起始)。</param>
      <param name="length">要複製的陣列元素數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary>[安全性關鍵] 從 Unmanaged 記憶體指標將資料複製到 Managed 32 位元帶正負號的整數陣列。</summary>
      <param name="source">要複製的來源記憶體指標。</param>
      <param name="destination">要複製的陣列。</param>
      <param name="startIndex">Copy 應該在陣列中開始的位置索引 (以零為起始)。</param>
      <param name="length">要複製的陣列元素數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary>[安全性關鍵] 從 Unmanaged 記憶體指標將資料複製到 Managed 64 位元帶正負號的整數陣列。</summary>
      <param name="source">要複製的來源記憶體指標。</param>
      <param name="destination">要複製的陣列。</param>
      <param name="startIndex">Copy 應該在陣列中開始的位置索引 (以零為起始)。</param>
      <param name="length">要複製的陣列元素數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary>[安全性關鍵] 從 Unmanaged 記憶體指標將資料複製到 Managed 單精確度浮點數陣列。</summary>
      <param name="source">要複製的來源記憶體指標。</param>
      <param name="destination">要複製的陣列。</param>
      <param name="startIndex">Copy 應該在陣列中開始的位置索引 (以零為起始)。</param>
      <param name="length">要複製的陣列元素數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary>[安全性關鍵] 從一維、Managed 單精確度浮點數陣列將資料複製到 Unmanaged 記憶體指標。</summary>
      <param name="source">要複製的一維陣列。</param>
      <param name="startIndex">Copy 應該在陣列中開始的位置索引 (以零為起始)。</param>
      <param name="destination">要複製到的記憶體指標。</param>
      <param name="length">要複製的陣列元素數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary>[安全性關鍵] 藉由將[7e542583-1e31-4e10-b523-8cf2f29cb4a4] (RCW) 的參考次數設定為 0，釋放對 RCW 的所有參考。</summary>
      <returns>與 <paramref name="o" /> 參數關聯之 RCW 參考次數的新值，如果釋放成功則為零。</returns>
      <param name="o">要釋放的 RCW。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary>[安全性關鍵] 釋放 Unmanaged COM 工作記憶體配置器所配置的記憶體區塊。</summary>
      <param name="ptr">要釋放的記憶體的位址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary>[安全性關鍵] 從處理序的 Unmanaged 記憶體釋放先前配置的記憶體。</summary>
      <param name="hglobal">由對 <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> 的原始比對呼叫傳回的控制代碼。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary>[安全性關鍵] 傳回 IUnknown 介面的指標，表示指定物件上指定的介面。自訂查詢介面存取預設為啟用。</summary>
      <returns>介面指標，表示物件的指定介面。</returns>
      <param name="o">提供介面的物件。</param>
      <param name="T">所要求之介面的型別。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary>[安全性關鍵] 將 Unmanaged 函式指標轉換成委派。</summary>
      <returns>委派執行個體，可轉型成適當的委派型別。</returns>
      <param name="ptr">要轉換的 Unmanaged 函式指標。</param>
      <param name="t">要傳回的委派型別。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary>[安全性關鍵] 將指定的 HRESULT 錯誤碼轉換成對應的 <see cref="T:System.Exception" /> 物件。</summary>
      <returns>
        <see cref="T:System.Exception" /> 物件，表示已轉換的 HRESULT。</returns>
      <param name="errorCode">要轉換的 HRESULT。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary>[安全性關鍵] 將指定的 HRESULT 錯誤碼轉換成對應的 <see cref="T:System.Exception" /> 物件，其額外的錯誤資訊傳入此例外狀況物件的 [4dda6909-2d9a-4727-ae0c-b5f90dcfa447] 介面。</summary>
      <returns>物件，表示已轉換的 HRESULT 以及從 <paramref name="errorInfo" /> 取得的資訊。</returns>
      <param name="errorCode">要轉換的 HRESULT。</param>
      <param name="errorInfo">IErrorInfo 介面的指標，此介面提供關於這個錯誤的詳細資訊。您可以指定 IntPtr(0) 以使用目前的 IErrorInfo 介面，或指定 IntPtr(-1) 忽略目前的 IErrorInfo 介面，並且只從錯誤碼建構例外狀況。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary>[安全性關鍵] 將委派轉換成可從 Unmanaged 程式碼呼叫的函式指標。</summary>
      <returns>可傳遞至 Unmanaged 程式碼的 <see cref="T:System.IntPtr" /> 值，然後程式碼就可以用它來呼叫基礎 Managed 委派。</returns>
      <param name="d">要傳遞至 Unmanaged 程式碼的委派。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary>[安全性關鍵] 將指定的例外狀況轉換成 HRESULT。</summary>
      <returns>對應於提供的例外狀況的 HRESULT。</returns>
      <param name="e">要轉換成 HRESULT 的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary>[安全性關鍵] 傳回 HRESULT，它對應於使用 <see cref="T:System.Runtime.InteropServices.Marshal" /> 執行的 Win32 程式碼所引發的最後一個錯誤。</summary>
      <returns>對應於最後一個 Win32 錯誤碼的 HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary>[安全性關鍵] 從 Managed 物件傳回 IUnknown 介面。</summary>
      <returns>
        <paramref name="o" /> 參數的 IUnknown 指標。</returns>
      <param name="o">要求其 IUnknown 介面的物件。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary>[安全性關鍵] 傳回使用平台叫用 (已設定 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> 旗標) 來呼叫的最後 Unmanaged 函式所傳回的錯誤碼。</summary>
      <returns>由對於 Win32 SetLastError API 方法的呼叫設定的最後錯誤碼。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary>[安全性關鍵] 將物件轉換為 COM VARIANT。</summary>
      <param name="obj">要為其取得 COM VARIANT 的物件。</param>
      <param name="pDstNativeVariant">指標，用來接收對應於 <paramref name="obj" /> 參數的 VARIANT。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary>[安全性關鍵] 傳回類型的執行個體，用其 IUnknown 介面的指標來表示 COM 物件。</summary>
      <returns>表示指定之 Unmanaged COM 物件的物件。</returns>
      <param name="pUnk">IUnknown 介面的指標。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary>[安全性關鍵] 將 COM VARIANT 轉換為物件。</summary>
      <returns>對應於 <paramref name="pSrcNativeVariant" /> 參數的物件。</returns>
      <param name="pSrcNativeVariant">COM VARIANT 的指標。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
      <summary>[安全性關鍵] 針對指定的 IUnknown 介面建立唯一的[7e542583-1e31-4e10-b523-8cf2f29cb4a4] (RCW) 物件。</summary>
      <returns>指定之 IUnknown 介面的唯一 RCW。</returns>
      <param name="unknown">IUnknown 介面的 Managed 指標。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary>[安全性關鍵] 指示指定物件是否表示 COM 物件。</summary>
      <returns>如果 <paramref name="o" /> 參數為 COM 型別則為 true，否則為 false。</returns>
      <param name="o">要檢查的物件。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary>[安全性關鍵] 不需呼叫方法就執行一次方法設定工作。</summary>
      <param name="m">
        <see cref="T:System.Reflection.MethodInfo" />，識別要檢查的方法。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary>[安全性關鍵] 對類別上的方法進行連結前檢查。</summary>
      <param name="c">
        <see cref="T:System.Type" />，識別要檢查其方法的類別。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary>[安全性關鍵] 從 Unmanaged ANSI 字串將直到第一個 Null 的所有字元複製到 Managed <see cref="T:System.String" />。將每一個 ANSI 字元擴展為 Unicode。</summary>
      <returns>存有 Unmanaged ANSI 字串複本的 Managed <see cref="T:System.String" /> 物件。如果 <paramref name="ptr" /> 為 null，方法就會傳回 null 字串。</returns>
      <param name="ptr">Unmanaged 字串第 1 個字元的位址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary>[安全性關鍵] 配置 Managed <see cref="T:System.String" />、從 Unmanaged ANSI 字串將指定數目的字元複製到其中，並將每一個 ANSI 字元擴展為 Unicode。</summary>
      <returns>如果 <paramref name="ptr" /> 參數的值不是 null，則為包含原生 ANSI 字串複本的 Managed <see cref="T:System.String" />，否則此方法會傳回 null。</returns>
      <param name="ptr">Unmanaged 字串第 1 個字元的位址。</param>
      <param name="len">要複製的輸入字串的位元組計數。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary>[安全性關鍵] 配置 Managed <see cref="T:System.String" />，並從 Unmanaged Unicode 字串將直到第一個 Null 字元的所有字元複製到其中。</summary>
      <returns>如果 <paramref name="ptr" /> 參數的值不是 null，則為包含原生字串複本的 Managed 字串，否則此方法會傳回 null。</returns>
      <param name="ptr">Unmanaged 字串第 1 個字元的位址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary>[安全性關鍵] 從存放於原生堆積的 Unicode 字串複製指定數目的字元到 Managed <see cref="T:System.String" />。</summary>
      <returns>如果 <paramref name="ptr" /> 參數的值不是 null，則為包含原生字串複本的 Managed 字串，否則此方法會傳回 null。</returns>
      <param name="ptr">Unmanaged 字串第 1 個字元的位址。</param>
      <param name="len">要複製的 Unicode 字元數。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary>[安全性關鍵] 從 Unmanaged 記憶體區塊封送處理資料到 Managed 物件。</summary>
      <param name="ptr">Unmanaged 記憶體區塊的指標。</param>
      <param name="structure">複製資料所到的物件。這必須是格式化類別的執行個體。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary>[安全性關鍵] 從 Unmanaged 記憶體區塊封送處理資料到新配置的指定型別的 Managed 物件。</summary>
      <returns>包含 <paramref name="ptr" /> 參數所指向的資料的 Managed 物件。</returns>
      <param name="ptr">Unmanaged 記憶體區塊的指標。</param>
      <param name="structureType">要建立之物件的 <see cref="T:System.Type" />。此型別物件必須表示格式化類別或結構。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary>[安全性關鍵] 從 COM 物件要求指定介面的指標。</summary>
      <returns>表示呼叫成功或失敗的 HRESULT。</returns>
      <param name="pUnk">要查詢的介面。</param>
      <param name="iid">
        <see cref="T:System.Guid" />，以傳值方式傳遞，為要求介面的介面識別項 (IID)。</param>
      <param name="ppv">這個方法傳回時，會包含對傳回介面的參考。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary>[安全性關鍵] 從 Unmanaged 指標讀取單一位元組。</summary>
      <returns>從 <paramref name="ptr" /> 參數讀取的位元組。</returns>
      <param name="ptr">從 Unmanaged 記憶體中讀取的位址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary>[安全性關鍵] 從 Unmanaged 指標讀取在指定位移 (或索引) 的單一位元組。</summary>
      <returns>從 <paramref name="ptr" /> 參數讀取的位元組。</returns>
      <param name="ptr">從 Unmanaged 記憶體中讀取的基底位址 (Base Address)。</param>
      <param name="ofs">額外的位元組位移，會在讀取前加入至 <paramref name="ptr" /> 參數。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary>[安全性關鍵] 從 Unmanaged 記憶體讀取 16 位元帶正負號的整數。</summary>
      <returns>從 <paramref name="ptr" /> 參數讀取的 16 位元帶正負號的整數。</returns>
      <param name="ptr">從 Unmanaged 記憶體中讀取的位址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary>[安全性關鍵] 從 Unmanaged 記憶體讀取 16 位元帶正負號的整數。</summary>
      <returns>從 <paramref name="ptr" /> 讀取的 16 位元帶正負號的整數。</returns>
      <param name="ptr">從 Unmanaged 記憶體中讀取的基底位址 (Base Address)。</param>
      <param name="ofs">額外的位元組位移，會在讀取前加入至 <paramref name="ptr" /> 參數。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary>[安全性關鍵] 從 Unmanaged 記憶體讀取 32 位元帶正負號的整數。</summary>
      <returns>從 <paramref name="ptr" /> 參數讀取的 32 位元帶正負號的整數。</returns>
      <param name="ptr">從 Unmanaged 中讀取的位址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary>[安全性關鍵] 從 Unmanaged 記憶體讀取 32 位元帶正負號的整數。</summary>
      <returns>從 <paramref name="ptr" /> 參數讀取的 32 位元帶正負號的整數。</returns>
      <param name="ptr">從 Unmanaged 記憶體中讀取的基底位址 (Base Address)。</param>
      <param name="ofs">額外的位元組位移，會在讀取前加入至 <paramref name="ptr" /> 參數。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary>[安全性關鍵] 從 Unmanaged 記憶體讀取 64 位元帶正負號的整數。</summary>
      <returns>從 <paramref name="ptr" /> 參數讀取的 64 位元帶正負號的整數。</returns>
      <param name="ptr">從 Unmanaged 記憶體中讀取的位址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary>[安全性關鍵] 從 Unmanaged 記憶體讀取 64 位元帶正負號的整數。</summary>
      <returns>從 <paramref name="ptr" /> 參數讀取的 64 位元帶正負號的整數。</returns>
      <param name="ptr">從 Unmanaged 記憶體中讀取的基底位址 (Base Address)。</param>
      <param name="ofs">額外的位元組位移，會在讀取前加入至 <paramref name="ptr" /> 參數。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary>[安全性關鍵] 從 Unmanaged 記憶體讀取處理器原生大小的整數。</summary>
      <returns>從 <paramref name="ptr" /> 參數讀取的 IntPtr。</returns>
      <param name="ptr">從 Unmanaged 記憶體中讀取的位址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary>[安全性關鍵] 從 Unmanaged 記憶體讀取處理器原生大小的整數。</summary>
      <returns>從 <paramref name="ptr" /> 參數讀取的 IntPtr。</returns>
      <param name="ptr">從 Unmanaged 記憶體中讀取的基底位址 (Base Address)。</param>
      <param name="ofs">額外的位元組位移，會在讀取前加入至 <paramref name="ptr" /> 參數。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary>[安全性關鍵] 遞減指定介面上的參考次數。</summary>
      <returns>介面上由 <paramref name="pUnk" /> 參數指定的參考次數的新值。</returns>
      <param name="pUnk">要釋放的介面。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary>[安全性關鍵] 遞減與指定之 COM 物件相關之所指定[7e542583-1e31-4e10-b523-8cf2f29cb4a4] (RCW) 的參考次數。</summary>
      <returns>與 <paramref name="o" /> 相關的 RCW 之參考次數的新值。這個值通常為零，因為不論呼叫的 Managed 用戶端數目，RCW 只保留一個包裝的 COM 物件參考。</returns>
      <param name="o">要釋放的 COM 物件。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary>[安全性關鍵] 傳回物件的 Unmanaged 大小 (以位元組為單位)。</summary>
      <returns>Unmanaged 程式碼中 <paramref name="structure" /> 參數的大小。</returns>
      <param name="structure">其大小要被傳回的物件。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary>[安全性關鍵] 傳回 Unmanaged 型別的大小 (以位元組為單位)。</summary>
      <returns>Unmanaged 程式碼中 <paramref name="structure" /> 參數的大小。</returns>
      <param name="t">其大小要被傳回的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary>[安全性關鍵] 從 Managed 物件封送處理資料到 Unmanaged 記憶體區塊。</summary>
      <param name="structure">存有要被封送處理的資料的 Managed 物件。此物件必須是格式化類別的執行個體。</param>
      <param name="ptr">必須在呼叫此方法之前配置之 Unmanaged 記憶體區塊的指標。</param>
      <param name="fDeleteOld">true 表示在執行這個方法之前，會先釋放 <paramref name="ptr" /> 參數所指向的記憶體。請注意，傳遞 false 可能會導致記憶體遺漏。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary>[安全性關鍵] 表示系統上的預設字元大小；Unicode 系統的預設值為 2，ANSI 系統為 1。此欄位為唯讀的。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary>[安全性關鍵] 擲回具有特定錯誤 HRESULT 值的例外狀況。</summary>
      <param name="errorCode">對應於希望的例外狀況的 HRESULT。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary>[安全性關鍵] 擲回具有特定錯誤 HRESULT 的例外狀況。</summary>
      <param name="errorCode">對應於希望的例外狀況的 HRESULT。</param>
      <param name="errorInfo">COM 物件所提供 IErrorInfo 介面的指標。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary>[安全性關鍵] 取得指定陣列內指定索引處的元素的位址。</summary>
      <returns>
        <paramref name="arr" /> 內部的 <paramref name="index" /> 位址。</returns>
      <param name="arr">包含所需元素的陣列。</param>
      <param name="index">所需的元素之 <paramref name="arr" /> 參數中的索引。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary>[安全性關鍵] 將單一位元組值寫入 Unmanaged 記憶體。</summary>
      <param name="ptr">要寫入之 Unmanaged 中的位址。</param>
      <param name="val">要寫入的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary>[安全性關鍵] 將單一位元組值寫入 Unmanaged 記憶體。</summary>
      <param name="ptr">要寫入之 Unmanaged 記憶體中的基底位址。</param>
      <param name="ofs">額外的位元組位移，會在寫入前加入至 <paramref name="ptr" /> 參數。</param>
      <param name="val">要寫入的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary>[安全性關鍵] 將 16 位元整數值寫入 Unmanaged 記憶體中。</summary>
      <param name="ptr">要寫入之 Unmanaged 記憶體中的位址。</param>
      <param name="val">要寫入的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary>[安全性關鍵] 將 16 位元帶正負號的整數值寫入 Unmanaged 記憶體中。</summary>
      <param name="ptr">要寫入之 Unmanaged 記憶體中的基底位址。</param>
      <param name="ofs">額外的位元組位移，會在寫入前加入至 <paramref name="ptr" /> 參數。</param>
      <param name="val">要寫入的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary>[安全性關鍵] 將 32 位元帶正負號的整數值寫入 Unmanaged 記憶體中。</summary>
      <param name="ptr">要寫入之 Unmanaged 記憶體中的位址。</param>
      <param name="val">要寫入的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary>[安全性關鍵] 將 32 位元帶正負號的整數值寫入 Unmanaged 記憶體中。</summary>
      <param name="ptr">要寫入之 Unmanaged 記憶體中的基底位址。</param>
      <param name="ofs">額外的位元組位移，會在寫入前加入至 <paramref name="ptr" /> 參數。</param>
      <param name="val">要寫入的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary>[安全性關鍵] 將 64 位元帶正負號的整數值寫入 Unmanaged 記憶體中。</summary>
      <param name="ptr">要寫入之 Unmanaged 記憶體中的基底位址。</param>
      <param name="ofs">額外的位元組位移，會在寫入前加入至 <paramref name="ptr" /> 參數。</param>
      <param name="val">要寫入的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary>[安全性關鍵] 將 64 位元帶正負號的整數值寫入 Unmanaged 記憶體中。</summary>
      <param name="ptr">要寫入之 Unmanaged 記憶體中的位址。</param>
      <param name="val">要寫入的值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary>[安全性關鍵] 將處理器原來大小的整數值寫入至 Unmanaged 記憶體。</summary>
      <param name="ptr">要寫入之 Unmanaged 記憶體中的位址。</param>
      <param name="val">要寫入的值。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary>指出如何在 Managed 和 Unmanaged 程式碼之間封送處理資料。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 值來初始化 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 類別的新執行個體。</summary>
      <param name="unmanagedType">要將資料封送處理成的值。<see cref="T:System.Runtime.InteropServices.UnmanagedType" /></param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 列舉成員來初始化 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 類別的新執行個體。</summary>
      <param name="unmanagedType">要將資料封送處理成的值。<see cref="T:System.Runtime.InteropServices.UnmanagedType" /></param>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary>指定 Unmanaged <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray" /> 或 <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray" /> 的元素型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary>提供其他資訊給自訂封送處理器。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary>指定自訂封送處理器的完整限定名稱。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary>實作 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> 為型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary>指出固定長度陣列中的元素數目或要匯出之字串中的字元數目 (非位元組)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary>指出哪一個參數含有陣列元素的計數 (很類似 COM 中的 size_is)，而且是以零為起始的。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary>取得資料要封送處理成的 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 值。</summary>
      <returns>要將資料封送處理成的值。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary>例外狀況，由封送處理器擲回於遭遇不支援的 <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 時。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary>指出參數為選擇性的。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary>使用預設值來初始化 OptionalAttribute 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.OutAttribute">
      <summary>指出資料應從被呼叫端封送處理 (Marshal) 回呼叫端。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OutAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.OutAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary>指出應該要抑制 COM Interop 呼叫期間發生的 HRESULT 或 retval 簽章轉換。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeHandle">
      <summary>[安全性關鍵] 表示作業系統控制代碼的包裝函式類別 (Wrapper Class)。此類別必須有繼承者。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.#ctor">
      <summary>[安全性關鍵] 使用系統預設值，初始化 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>[安全性關鍵] 使用指定的無效控制代碼值，初始化 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 類別的新執行個體。</summary>
      <param name="invalidHandleValue">無效控制代碼的值 (通常是 0 或 -1)。您的 <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> 實作應該針對此值傳回 true。</param>
      <param name="ownsHandle">true 表示確實讓 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 在結束階段釋放控制代碼；否則為 false (不建議)。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Close">
      <summary>[安全性關鍵] 標記要釋出和釋放資源的控制代碼。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
      <summary>[安全性關鍵] 手動遞增 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 執行個體上的參考計數器。</summary>
      <param name="success">如果成功遞增參考計數器則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
      <summary>[安全性關鍵] 傳回 <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> 欄位的值。</summary>
      <returns>IntPtr，表示 <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> 欄位的值。如果此控制代碼已經用 <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" /> 標記為無效，則此方法仍會傳回原始的控制代碼值，不過此值可能為過時的值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
      <summary>[安全性關鍵] 手動遞減 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 執行個體上的參考計數器。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose">
      <summary>[安全性關鍵] 釋放 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 類別使用的所有資源。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
      <summary>[安全性關鍵] 釋放 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 類別所使用的 Unmanaged 資源，指定是否要執行一般處置作業。</summary>
      <param name="disposing">true 表示執行一般處置作業，false 表示完成控制代碼。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.SafeHandle.handle">
      <summary>[安全性關鍵] 指定要包裝的控制代碼。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
      <summary>[安全性關鍵] 取得值，指出控制代碼是否已關閉。</summary>
      <returns>如果已關閉控制代碼則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
      <summary>[安全性關鍵] 在衍生類別中覆寫時，取得值以指出這個控制代碼值是否無效。</summary>
      <returns>如果控制碼值無效則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
      <summary>[安全性關鍵] 在衍生類別中覆寫時，執行釋放控制代碼所需的程式碼。</summary>
      <returns>如果成功釋放控制代碼則為 true；但如果發生嚴重失敗的事件，則為 false。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
      <summary>[安全性關鍵] 將控制代碼設定為指定的既有控制代碼。</summary>
      <param name="handle">要使用的既有控制代碼。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
      <summary>[安全性關鍵] 將控制代碼標記為不再使用。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary>表示結構化例外處理常式 (Structured Exception Handler，SEH) 錯誤。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.StructLayoutAttribute">
      <summary>StructLayoutAttribute 類別可以讓使用者控制類別或結構之資料欄位的實際配置。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 列舉成員初始化 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 類別的新執行個體。</summary>
      <param name="layoutKind">其中一個 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 值，指定類別或結構應該如何排列。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet">
      <summary>指出依預設，類別中的字串資料欄位應如何封送處理為 LPWSTR 或 LPSTR。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
      <summary>控制記憶體中類別或結構之資料欄位的對齊。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
      <summary>指出結構或類別的絕對大小。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.StructLayoutAttribute.Value">
      <summary>取得指定類別或結構應如何排列的 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 值。</summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 值，指定類別或結構應該如何排列。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
      <summary>控制當做 Unmanaged 函式指標在 Unmanaged 程式碼之間來回傳遞之委派簽章的封送處理 (Marshaling) 行為。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
      <summary>使用指定的呼叫慣例來初始化 <see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute" /> 類別的新執行個體。</summary>
      <param name="callingConvention">指定的呼叫慣例。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.BestFitMapping">
      <summary>將 Unicode 字元轉換成 ANSI 字元時，啟用或停用最適合對應行為。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
      <summary>取得呼叫慣例的值。</summary>
      <returns>呼叫慣例的值，由 <see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)" /> 建構函式 (Constructor) 指定。</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CharSet">
      <summary>表示如何將字串參數封送處理到方法，並控制函式名稱改變 (Name Mangling)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.SetLastError">
      <summary>指出自屬性方法傳回之前，被呼叫端是否呼叫 SetLastError 函式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.ThrowOnUnmappableChar">
      <summary>在無法對應的 Unicode 字元轉換為 ANSI "?" 字元時，啟用或停用例外狀況的擲回。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
      <summary>識別如何封送處理參數或欄位至 Unmanaged 程式碼。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
      <summary>固定長度、單一位元組的 ANSI 字元字串。您可以將這個成員用於 <see cref="T:System.String" /> 資料型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
      <summary>動態 (Dynamic) 型別，在執行階段判斷物件的型別，並封送處理物件為該型別。僅對平台叫用方法有效。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
      <summary>4 位元組的布林值 (true != 0、false = 0)。這是 Win32 BOOL 型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
      <summary>固定長度雙位元組的 Unicode 字元字串。您可以將這個成員 (這是 COM 中的預設字串) 用於 <see cref="T:System.String" /> 資料型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
      <summary>當 <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value" /> 設定為 ByValArray 時，必須設定 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 以指示陣列中元素的數目。需要區別字串型別時，<see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" /> 欄位可以選擇性地包含陣列元素的 <see cref="T:System.Runtime.InteropServices.UnmanagedType" />。您只能將這個 <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 用於在結構中以欄位出現的陣列。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
      <summary>使用於出現在結構中的內嵌 (Inline) 固定長度字元陣列。使用於 <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr" /> 的字元型別是由套用至包含結構之 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 的 <see cref="T:System.Runtime.InteropServices.CharSet" /> 引數所決定。永遠使用 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 欄位以指示陣列大小。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
      <summary>使用於 <see cref="T:System.Decimal" /> 以封送處理十進位值為 COM Currency 型別，來取代 Decimal。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
      <summary>配合 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> 或 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef" /> 使用時，指定自訂封送處理器的類別。<see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie" /> 欄位可用來將其他資訊傳遞給自訂封送處理器。您可以將此成員用於參考型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
      <summary>此與 <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4" /> 或 <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4" /> 關聯的原生型別會使參數匯出為匯出的型別程式庫中的 HRESULT。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
      <summary>整數，可當做 C-style 函式指標使用。您可以將這個成員用於 <see cref="T:System.Delegate" /> 資料型別或自 <see cref="T:System.Delegate" /> 繼承的型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.HString">
      <summary> 字串。您可以將這個成員用於 <see cref="T:System.String" /> 資料型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
      <summary>1 位元組帶正負號的整數。您可以使用此成員以轉換布林值 (Boolean) 為 1 位元組、C-style bool (true = 1、false = 0)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
      <summary>2 位元組帶正負號的整數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
      <summary>4 位元組帶正負號的整數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
      <summary>8 位元帶正負號的整數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
      <summary>COM IDispatch 指標 (Microsoft Visual Basic 6.0 中的 Object)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IInspectable">
      <summary> 介面指標。您可以將這個成員用於 <see cref="T:System.Object" /> 資料型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
      <summary>COM 的介面指標。介面的 <see cref="T:System.Guid" /> 是從類別中繼資料取得。使用此成員指定如果套用至類別時的正確介面型別或預設介面型別。套用至 <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" /> 資料型別時，這個成員會產生 <see cref="T:System.Object" /> 行為。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
      <summary>COM IUnknown 指標。您可以將這個成員用於 <see cref="T:System.Object" /> 資料型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
      <summary>指向 C-style 陣列第 1 個元素的指標。當從 Managed 封送處理至 Unmanaged 時，陣列的長度是由 Managed 陣列的長度來判斷。從 Unmanaged 封送處理至 Managed 時，陣列長度從 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> 和 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" /> 欄位判斷，有需要區別字串型別時，也可選擇是否要加上陣列中元素的 Unmanaged 型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
      <summary>單一位元組、以 null 結束的 ANSI 字元字串。您可以將這個成員用於 <see cref="T:System.String" /> 或 <see cref="T:System.Text.StringBuilder" /> 資料型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
      <summary>C-style 結構的指標，您用來封送處理 Managed 格式化類別。僅對平台叫用方法有效。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
      <summary>平台相依字元字串：Windows 98 上的 ANSI 及 Windows NT 和 Windows XP 上的 Unicode。因為不支援匯出 LPTStr 型別的字串，所以此值只有在平台叫用受到支援。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
      <summary>2 位元組、以 null 結束的 Unicode 字元字串。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
      <summary>4 位元組浮點數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
      <summary>8 位元組浮點數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
      <summary>SafeArray 是自我描述陣列，具有型別、順序以及關聯陣列資料的繫結。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
      <summary>VARIANT，用來封送處理 Managed 格式化類別和值型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
      <summary>平台相依帶正負號的整數。在 32 位元 Windows 上為 4 位元組，在 64 位元 Windows 上為 8 位元組。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
      <summary>平台相依不帶正負號的整數。在 32 位元 Windows 上為 4 位元組，在 64 位元 Windows 上為 8 位元組。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
      <summary>固定長度的平台相依 char 字串。在 Windows 98 上為 ANSI，在 Windows NT 上為 Unicode。您很少會使用此類似 BSTR 的成員。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
      <summary>1 位元組不帶正負號的整數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
      <summary>2 位元組不帶正負號的整數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
      <summary>4 位元組不帶正負號的整數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
      <summary>8 位元不帶正負號的整數。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
      <summary>2 位元組、OLE 定義的 VARIANT_BOOL 型別 (true = -1、false = 0)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
      <summary>允許 Visual Basic 2005 在 Unmanaged 程式碼中變更字串，並讓結果反映於 Managed 程式碼中。僅為平台叫用支援此值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FILETIME">
      <summary>表示自 1601 年 1 月 1 日之後的 100 奈秒間隔數。 這種結構是一個 64 位元值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwHighDateTime">
      <summary>指定 FILETIME 的高階 32 位元。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwLowDateTime">
      <summary>指定 FILETIME 的低階 32 位元。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IStream">
      <summary>提供 IStream 介面的 Managed 定義，具有 ISequentialStream 功能。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
      <summary>使用它自己的搜尋指標 (其參考與原始資料流相同的位元組)，建立新的資料流物件。</summary>
      <param name="ppstm">這個方法傳回時，包含新資料流物件。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)">
      <summary>確保異動模式 (Transacted Mode) 開啟的資料流物件的任何變更，都會反映在父代 (Parent) 儲存區中。</summary>
      <param name="grfCommitFlags">控制如何認可資料流物件變更的數值。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
      <summary>從資料流中的目前搜尋指標複製指定數目的位元組到另一個資料流中的目前搜尋指標。</summary>
      <param name="pstm">目的端資料流的參考。</param>
      <param name="cb">要從來源資料流複製的位元組數目。</param>
      <param name="pcbRead">在成功傳回時，含有從來源讀取的實際位元組數目。</param>
      <param name="pcbWritten">在成功傳回時，含有寫入目的端的實際位元組數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>限制存取資料流中指定的位元組範圍。</summary>
      <param name="libOffset">範圍開頭的位元組位移。</param>
      <param name="cb">要限制的範圍長度，以位元組為單位。</param>
      <param name="dwLockType">對存取範圍要求的限制。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Read(System.Byte[],System.Int32,System.IntPtr)">
      <summary>在目前搜尋指標位置開始，從資料流物件讀取指定數目的位元組到記憶體中。</summary>
      <param name="pv">這個方法傳回時，包含從資料流讀取的資料。這個參數會以未初始化的狀態傳遞。</param>
      <param name="cb">要從資料流物件讀取的位元組數目。</param>
      <param name="pcbRead">ULONG 變數的指標，其接收從資料流物件讀取的實際位元組數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Revert">
      <summary>捨棄從上次 <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)" /> 呼叫後對異動資料流的所有變更。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)">
      <summary>變更搜尋指標到相對於資料流開頭的新位置、到資料流結尾，或到目前的搜尋指標。</summary>
      <param name="dlibMove">加入至 <paramref name="dwOrigin" /> 的替代。</param>
      <param name="dwOrigin">搜尋的原點。原點可以是檔案的開頭、目前的搜尋指標或是檔案的結尾。</param>
      <param name="plibNewPosition">在成功傳回時，含有搜尋指標從資料流開頭的位移。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.SetSize(System.Int64)">
      <summary>變更資料流物件的大小。</summary>
      <param name="libNewSize">資料流的新大小，為位元組數目。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
      <summary>擷取這個資料流的 <see cref="T:System.Runtime.InteropServices.STATSTG" /> 結構。</summary>
      <param name="pstatstg">這個方法傳回時，包含描述這個資料流物件的 STATSTG 結構。這個參數會以未初始化的狀態傳遞。</param>
      <param name="grfStatFlag">STATSTG 結構中的成員，這個方法未傳回，因此節省了一些記憶體配置作業。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>移除先前以 <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)" /> 方法限制的位元組範圍之存取限制。</summary>
      <param name="libOffset">範圍開頭的位元組位移。</param>
      <param name="cb">要限制的範圍長度，以位元組為單位。</param>
      <param name="dwLockType">先前對範圍的存取限制。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Write(System.Byte[],System.Int32,System.IntPtr)">
      <summary>在目前搜尋指標位置開始，將指定數目的位元組寫入資料流物件中。</summary>
      <param name="pv">要將這個資料流寫入的緩衝區。</param>
      <param name="cb">要寫入資料流的位元組數目。</param>
      <param name="pcbWritten">在成功傳回時，含有寫入資料流物件的實際位元組數目。如果呼叫端將這個指標設定為 <see cref="F:System.IntPtr.Zero" />，這個方法就不會提供寫入的實際位元組數目。 </param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATSTG">
      <summary>含有關於開放儲存區、資料流或位元組陣列物件的統計資訊。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.atime">
      <summary>指定這個儲存區、資料流或位元組陣列的上次存取時間。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.cbSize">
      <summary>指定資料流或位元組陣列的大小，以位元組為單位。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.clsid">
      <summary>指示儲存物件 (Storage Object) 的類別識別項 (Class Identifier)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.ctime">
      <summary>指示這個儲存區、資料流或位元組陣列的建立時間。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfLocksSupported">
      <summary>指示資料流或位元組陣列所支援之區域鎖定的型別。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfMode">
      <summary>指示當物件開啟時所指定的存取模式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfStateBits">
      <summary>指示儲存物件的目前狀態位元 (IStorage::SetStateBits 方法最近設定的值)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.mtime">
      <summary>指示這個儲存區、資料流或位元組陣列的上一次修改時間。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.pwcsName">
      <summary>表示以 null 結尾字串的指標，此字串含有這個結構所描述之物件的名稱。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.reserved">
      <summary>保留供將來使用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.type">
      <summary>指示儲存物件的型別，即來自 STGTY 列舉型別的其中一個值。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.WindowsRuntime.DefaultInterfaceAttribute">
      <summary>指定 Managed  類別的預設介面。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.DefaultInterfaceAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.WindowsRuntime.DefaultInterfaceAttribute" /> 類別的新執行個體。</summary>
      <param name="defaultInterface">介面型別，指定為套用屬性的類別的預設介面。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.WindowsRuntime.DefaultInterfaceAttribute.DefaultInterface">
      <summary>取得預設介面的型別。</summary>
      <returns>預設介面的型別。 </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken">
      <summary>當事件處理常式加入至  事件時所傳回的語彙基元。語彙基元的作用是稍後從事件中移除事件處理常式。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.Equals(System.Object)">
      <summary>傳回一值，指出目前物件是否等於指定的物件。</summary>
      <returns>如果目前物件等於 <paramref name="obj" /> 則為 true；否則為 false。</returns>
      <param name="obj">要比較的物件。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.GetHashCode">
      <summary>傳回此執行個體的雜湊程式碼。</summary>
      <returns>此執行個體的雜湊程式碼。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.op_Equality(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken,System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)">
      <summary>指出兩個 <see cref="T:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken" /> 執行個體是否相等。</summary>
      <returns>如果兩個物件相等則為 true，否則為 false。</returns>
      <param name="left">要比較的第 1 個執行個體。</param>
      <param name="right">要比較的第 2 個執行個體。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.op_Inequality(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken,System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)">
      <summary>指出兩個 <see cref="T:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken" /> 執行個體是否不相等。</summary>
      <returns>如果兩個執行個體不相等則為 true，否則為 false。 </returns>
      <param name="left">要比較的第 1 個執行個體。</param>
      <param name="right">要比較的第 2 個執行個體。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1">
      <summary>儲存委派與事件語彙基元之間的對應，以支援在 managed 程式碼中實作 。</summary>
      <typeparam name="T">針對特定事件的事件處理常式委派的型別。</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1" /> 類別的新執行個體。</summary>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="T" /> 不是委派型別。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.AddEventHandler(`0)">
      <summary>將指定的事件處理常式加入至資料表以及加入至叫用清單，並傳回可以用來移除事件處理常式的語彙基元。</summary>
      <returns>可以用來從資料表和叫用清單中移除事件處理常式的語彙基元。</returns>
      <param name="handler">要加入的事件處理常式。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.GetOrCreateEventRegistrationTokenTable(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable{`0}@)">
      <summary>傳回指定的事件登錄語彙基元資料表，如果它不是 null。否則，傳回新的事件註冊語彙基元資料表。</summary>
      <returns>如果它不是 null，則為由 <paramref name="refEventTable" /> 指定的事件登錄語彙基元資料表，否則為新的事件登錄語彙基元資料表。 </returns>
      <param name="refEventTable">事件註冊語彙基元資料表，透過參考來傳遞。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.InvocationList">
      <summary>取得或設定型別 <paramref name="T" /> 的委派，其叫用清單包括所有已加入的事件處理常式委派，以及尚未移除的事件處理常式委派。叫用此委派會叫用所有事件處理常式。</summary>
      <returns>型別 <paramref name="T" /> 的委派，表示目前針對事件登錄的所有事件處理常式委派。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)">
      <summary>從資料表和叫用清單中移除與指定的語彙基元相關聯的事件處理常式。</summary>
      <param name="token">加入事件處理常式時所傳回的語彙基元。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(`0)">
      <summary>從資料表和叫用清單中移除指定的事件處理常式委派。</summary>
      <param name="handler">要移除的事件處理常式。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.WindowsRuntime.IActivationFactory">
      <summary>可讓  啟動類別。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.IActivationFactory.ActivateInstance">
      <summary>傳回由 <see cref="T:System.Runtime.InteropServices.WindowsRuntime.IActivationFactory" />介面建立之  類別的新執行個體。</summary>
      <returns> 類別的新執行個體。 </returns>
    </member>
    <member name="T:System.Runtime.InteropServices.WindowsRuntime.InterfaceImplementedInVersionAttribute">
      <summary>指定第一次實作指定介面的目標型別的版本。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.InterfaceImplementedInVersionAttribute.#ctor(System.Type,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>指定目標型別實作的介面，以及第一次實作介面的版本，來初始化 <see cref="T:System.Runtime.InteropServices.WindowsRuntime.InterfaceImplementedInVersionAttribute" /> 類別的新執行個體。</summary>
      <param name="interfaceType">第一次在指定之目標型別版本中實作的介面。</param>
      <param name="majorVersion">第一次實作 <paramref name="interfaceType" /> 的目標型別版本的主要元件。</param>
      <param name="minorVersion">第一次實作 <paramref name="interfaceType" /> 的目標型別版本的次要元件。</param>
      <param name="buildVersion">第一次實作 <paramref name="interfaceType" /> 的目標型別版本的組建元件。</param>
      <param name="revisionVersion">第一次實作 <paramref name="interfaceType" /> 的目標型別版本的修訂元件。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.WindowsRuntime.InterfaceImplementedInVersionAttribute.BuildVersion">
      <summary>取得第一次實作介面的目標型別版本的組建元件。</summary>
      <returns>版本的組建元件。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.WindowsRuntime.InterfaceImplementedInVersionAttribute.InterfaceType">
      <summary>取得目標型別實作的介面型別。</summary>
      <returns>介面的型別。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.WindowsRuntime.InterfaceImplementedInVersionAttribute.MajorVersion">
      <summary>取得第一次實作介面之目標型別版本的主要元件。</summary>
      <returns>版本的主要元件。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.WindowsRuntime.InterfaceImplementedInVersionAttribute.MinorVersion">
      <summary>取得第一次實作介面的目標型別版本的次要元件。</summary>
      <returns>版本的次要元件。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.WindowsRuntime.InterfaceImplementedInVersionAttribute.RevisionVersion">
      <summary>取得第一次實作介面的目標型別版本的修訂元件。</summary>
      <returns>版本的修訂元件。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.WindowsRuntime.ReadOnlyArrayAttribute">
      <summary>當套用至  元件中的陣列參數時，請指定傳遞至該參數的陣列內容僅用於輸入。呼叫端預期呼叫將不會變更陣列。請參閱 [備註] 一節，以取得關於使用 Managed 程式碼撰寫的呼叫端的重要資訊。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.ReadOnlyArrayAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.WindowsRuntime.ReadOnlyArrayAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Runtime.InteropServices.WindowsRuntime.ReturnValueNameAttribute">
      <summary>指定  元件中方法的傳回值名稱。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.ReturnValueNameAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.WindowsRuntime.ReturnValueNameAttribute" /> 類別的新執行個體，並指定回覆值的名稱。</summary>
      <param name="name">傳回值的名稱。 </param>
    </member>
    <member name="P:System.Runtime.InteropServices.WindowsRuntime.ReturnValueNameAttribute.Name">
      <summary>取得為  元件中方法的傳回值名稱所指定的名稱。</summary>
      <returns>方法的傳回值名稱。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal">
      <summary>提供在 NET Framework 與  之間封送處理資料的 helper 方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.AddEventHandler``1(System.Func{``0,System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken},System.Action{System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken},``0)">
      <summary>[安全性關鍵] 將指定的事件處理常式加入  事件。</summary>
      <param name="addMethod">委派，表示將事件處理常式加入  事件的方法。</param>
      <param name="removeMethod">委派，表示從  移除事件處理常式的方法。</param>
      <param name="handler">委派，表示加入的事件處理常式。</param>
      <typeparam name="T">表示事件處理常式的委派型別。</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.FreeHString(System.IntPtr)">
      <summary>[安全性關鍵] 釋放指定的 HSTRING。</summary>
      <param name="ptr">要釋放的 HSTRING 的位址。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.GetActivationFactory(System.Type)">
      <summary>[安全性關鍵] 傳回物件，它會實作指定的  型別的啟動原廠介面。</summary>
      <returns>實作啟動原廠介面的物件。</returns>
      <param name="type">要取得其啟動原廠介面的  型別。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.PtrToStringHString(System.IntPtr)">
      <summary>[安全性關鍵] 傳回 Managed 字串，其中包含指定的 HSTRING 的複本。</summary>
      <returns>Managed 字串，如果 <paramref name="ptr" /> 不是 <see cref="F:System.IntPtr.Zero" /> 則包含 HSTRING 的複本；否則為 <see cref="F:System.String.Empty" />。</returns>
      <param name="ptr">要複製的 HSTRING 的 Unmanaged 指標。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.RemoveAllEventHandlers(System.Action{System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken})">
      <summary>[安全性關鍵] 使用指定的方法移除所有可以移除的事件處理常式。</summary>
      <param name="removeMethod">委派，表示從  移除事件處理常式的方法。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.RemoveEventHandler``1(System.Action{System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken},``0)">
      <summary>[安全性關鍵] 從  事件中移除指定的事件處理常式。</summary>
      <param name="removeMethod">委派，表示從  移除事件處理常式的方法。</param>
      <param name="handler">移除的事件處理常式。</param>
      <typeparam name="T">表示事件處理常式的委派型別。</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WindowsRuntimeMarshal.StringToHString(System.String)">
      <summary>[安全性關鍵] 配置 HSTRING，並將指定的 Managed 字串複製至其中。</summary>
      <returns>新 HSTRING 的 Unmanaged 指標，或者，如果 <paramref name="s" /> 是 <see cref="F:System.String.Empty" />，則為 <see cref="F:System.IntPtr.Zero" />。</returns>
      <param name="s">要複製的 Managed 字串。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.WindowsRuntime.WriteOnlyArrayAttribute">
      <summary>當套用至  元件中的陣列參數時，請指定傳遞至該參數的陣列內容僅用於輸出。呼叫端不保證內容已初始化，而且被呼叫的方法不應該讀取內容。請參閱 [備註] 一節，以取得關於使用 Managed 程式碼撰寫的呼叫端的重要資訊。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.WindowsRuntime.WriteOnlyArrayAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.WindowsRuntime.WriteOnlyArrayAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnDeserializedAttribute">
      <summary>套用至方法時，指定在物件還原序列化 (Deserialization) 後立即呼叫該方法。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnDeserializedAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.OnDeserializedAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnDeserializingAttribute">
      <summary>套用至方法時，指定在物件的還原序列化 (Deserialization) 期間呼叫該方法。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnDeserializingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.OnDeserializingAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnSerializedAttribute">
      <summary>套用至方法時，指定在物件 Graph 序列化 (Serialization) 後呼叫該方法。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnSerializedAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.OnSerializedAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnSerializingAttribute">
      <summary>套用至方法時，指定在物件序列化 (Serialization) 之前呼叫該方法。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnSerializingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.OnSerializingAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationException">
      <summary>當序列化 (Serialization) 或還原序列化 (Deserialization) 期間發生錯誤時，擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.Runtime.Serialization.SerializationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.String)">
      <summary>使用指定的訊息來初始化 <see cref="T:System.Runtime.Serialization.SerializationException" /> 類別的新執行個體。</summary>
      <param name="message">發生例外狀況的原因。</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.Runtime.Serialization.SerializationException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數並非 null，則目前的例外狀況是在處理內部例外狀況的 catch 區塊中引發。</param>
    </member>
    <member name="T:System.Runtime.Serialization.StreamingContext">
      <summary>描述指定之序列化資料流的來源和目的端，並提供額外的呼叫端定義內容。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.Equals(System.Object)">
      <summary>判斷兩個 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 執行個體是否包含相同的值。</summary>
      <returns>如果指定的物件是 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 的執行個體，並且等於目前執行個體的值則為 true，否則為 false。</returns>
      <param name="obj">與目前執行個體相互比較的物件。</param>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.GetHashCode">
      <summary>傳回此物件的雜湊程式碼。</summary>
      <returns>
        <see cref="T:System.Runtime.Serialization.StreamingContextStates" /> 值，包含這個 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 之序列化的來源和目的端。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.TargetFrameworkAttribute">
      <summary>辨識編譯特定組件時使用的 .NET Framework 版本。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.TargetFrameworkAttribute.#ctor(System.String)">
      <summary>藉由指定建置組件時使用的 .NET Framework 版本，以初始化 <see cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" /> 類別的執行個體。</summary>
      <param name="frameworkName">建置組件時使用的 .NET Framework 版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frameworkName" /> 為 null。</exception>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkDisplayName">
      <summary>取得建置組件時使用之 .NET Framework 版本的顯示名稱。</summary>
      <returns>.NET Framework 版本的顯示名稱。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName">
      <summary>取得建置特定組件時使用之 .NET Framework 版本的名稱。</summary>
      <returns>建置組件時使用之 .NET Framework 版本的名稱。</returns>
    </member>
    <member name="T:System.Security.AllowPartiallyTrustedCallersAttribute">
      <summary>允許部分信任程式碼呼叫組件。如果沒有這個宣告，則只有完全信任呼叫端才能使用此組件。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Security.AllowPartiallyTrustedCallersAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Security.SecurityCriticalAttribute">
      <summary>指定執行重視安全性之作業的程式碼或組件。</summary>
    </member>
    <member name="M:System.Security.SecurityCriticalAttribute.#ctor">
      <summary>使用預設範圍來初始化 <see cref="T:System.Security.SecurityCriticalAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Security.SecurityException">
      <summary>當偵測到安全性錯誤時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.Security.SecurityException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Security.SecurityException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和導致此例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.Security.SecurityException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 null，即會在處理內部例外狀況的 catch 區塊中發生目前的例外狀況。</param>
    </member>
    <member name="M:System.Security.SecurityException.ToString">
      <summary>傳回目前 <see cref="T:System.Security.SecurityException" /> 的表示。</summary>
      <returns>目前 <see cref="T:System.Security.SecurityException" /> 的字串表示。</returns>
    </member>
    <member name="T:System.Security.SecuritySafeCriticalAttribute">
      <summary>將型別或成員識別為重視安全性而且可由透明程式碼進行安全的存取。</summary>
    </member>
    <member name="M:System.Security.SecuritySafeCriticalAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecuritySafeCriticalAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Security.SecurityState">
      <summary>[安全性關鍵] 提供基底類別，以要求來自 <see cref="T:System.AppDomainManager" /> 物件之動作的安全性狀態。</summary>
    </member>
    <member name="M:System.Security.SecurityState.#ctor">
      <summary>[安全性關鍵] 初始化 <see cref="T:System.Security.SecurityState" /> 類別的新執行個體。 </summary>
    </member>
    <member name="M:System.Security.SecurityState.EnsureState">
      <summary>[安全性關鍵] 在衍生類別中進行覆寫時，確保可以在主機上使用 <see cref="T:System.Security.SecurityState" /> 所表示的狀態。</summary>
    </member>
    <member name="M:System.Security.SecurityState.IsStateAvailable">
      <summary>[安全性關鍵] 取得值，指出是否可以在目前主機上使用 <see cref="T:System.Security.SecurityState" /> 類別的這個實作的狀態。</summary>
      <returns>如果狀態為可用則為 true；否則為 false。</returns>
    </member>
    <member name="T:System.Security.SecurityTransparentAttribute">
      <summary>指定組件不可以存取受保護的資源或功能。</summary>
    </member>
    <member name="M:System.Security.SecurityTransparentAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecurityTransparentAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Security.UnverifiableCodeAttribute">
      <summary>標記含有未經驗證的程式碼的模組。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Security.UnverifiableCodeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.UnverifiableCodeAttribute" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Security.VerificationException">
      <summary>例外狀況，是當安全性原則要求程式碼為型別安全 (Type-Safe) 而驗證處理序無法驗證程式碼為型別安全時被擲回。</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.Security.VerificationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Security.VerificationException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和導致此例外狀況之內部例外狀況的參考來初始化 <see cref="T:System.Security.VerificationException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，即會在處理內部例外狀況的 catch 區塊中發生目前的例外狀況。 </param>
    </member>
    <member name="T:System.Security.Cryptography.Aes">
      <summary>表示 abstract 基底類別，先進加密標準 (AES) 的所有實作都必須繼承自該類別。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.Aes" /> 類別的新執行個體。 </summary>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricAlgorithm">
      <summary>表示 abstract 基底類別，非對稱演算法之所有實作必須從它繼承。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 類別的新執行個體。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">衍生類別的實作無效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Clear">
      <summary>釋放 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 類別使用的所有資源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Create">
      <summary>建立用於執行非對稱演算法的預設加密編譯物件。</summary>
      <returns>新的 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)">
      <summary>建立非對稱演算法之指定實作的執行個體。</summary>
      <returns>指定之非對稱演算法實作的新執行個體。</returns>
      <param name="algName">要使用的非對稱演算法實作。下表所示為 <paramref name="algName" /> 參數的有效值及其對應的演算法。參數值ImplementsSystem.Security.Cryptography.AsymmetricAlgorithm<see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />RSA<see cref="T:System.Security.Cryptography.RSA" />System.Security.Cryptography.RSA<see cref="T:System.Security.Cryptography.RSA" /></param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose">
      <summary>將 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 類別目前的執行個體所使用的資源全部釋出。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 類別使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 可以釋放 Managed 和 Unmanaged 資源，false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)">
      <summary>在衍生類別中覆寫時，從 XML 字串重建 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 物件。</summary>
      <param name="xmlString">用於重建 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 物件的 XML 字串。</param>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm">
      <summary>在衍生類別中覆寫時，取得金鑰交換演算法的名稱。</summary>
      <returns>金鑰交換演算法的名稱。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize">
      <summary>取得或設定非對稱演算法使用之金鑰模數的大小，單位是位元。</summary>
      <returns>非對稱演算法使用之金鑰模數的大小，單位是位元。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">金鑰模數大小無效。</exception>
    </member>
    <member name="F:System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue">
      <summary>表示非對稱演算法使用之金鑰模數的大小，單位是位元。</summary>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes">
      <summary>取得非對稱演算法支援的金鑰大小。</summary>
      <returns>包含非對稱演算法支援之金鑰大小的陣列。</returns>
    </member>
    <member name="F:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue">
      <summary>指定非對稱演算法支援的金鑰大小。</summary>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm">
      <summary>取得簽章演算法的名稱。</summary>
      <returns>簽章演算法的名稱。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)">
      <summary>在衍生類別中覆寫時，會建立及傳回目前之 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 物件的 XML 字串表示。</summary>
      <returns>目前之 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 物件的 XML 字串編碼。</returns>
      <param name="includePrivateParameters">true 以包含私密參數；否則為 false。</param>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter">
      <summary>表示所有非對稱金鑰交換變形項衍生而來的基底類別。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>在衍生類別中覆寫時，會從加密的金鑰交換資料擷取秘密資訊。</summary>
      <returns>從金鑰交換資料衍生而來的秘密資訊。</returns>
      <param name="rgb">秘密資訊隱藏在其中的金鑰交換資料。</param>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.Parameters">
      <summary>在衍生類別中覆寫時，取得或設定非對稱金鑰交換的參數。</summary>
      <returns>XML 格式的字串，包含非對稱金鑰交換作業的參數。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>在衍生類別中覆寫時，設定用於將秘密資訊解密的私密金鑰。</summary>
      <param name="key">保存私密金鑰之 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 實作的執行個體。 </param>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter">
      <summary>表示所有非對稱金鑰交換格式器衍生而來的基底類別。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>在衍生類別中覆寫時，從指定的輸入資料建立加密的金鑰交換資料。</summary>
      <returns>要傳送到預定收件者的加密金鑰交換資料。</returns>
      <param name="data">要在金鑰交換中傳遞的秘密資訊。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>在衍生類別中覆寫時，從指定的輸入資料建立加密的金鑰交換資料。</summary>
      <returns>要傳送到預定收件者的加密金鑰交換資料。</returns>
      <param name="data">要在金鑰交換中傳遞的秘密資訊。</param>
      <param name="symAlgType">目前版本中未使用此參數。</param>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.Parameters">
      <summary>在衍生類別中覆寫時，取得非對稱金鑰交換的參數。</summary>
      <returns>XML 格式的字串，包含非對稱金鑰交換作業的參數。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>在衍生類別中覆寫時，設定用於將秘密資訊加密的公開金鑰。</summary>
      <param name="key">保存公開金鑰之 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 實作的執行個體。 </param>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureDeformatter">
      <summary>表示 abstract 基底類別，非對稱簽章變形項之所有實作必須從它衍生而來。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>在衍生類別中覆寫時，設定驗證簽章所使用的雜湊演算法。</summary>
      <param name="strName">驗證簽章所使用之雜湊演算法的名稱。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>在衍生類別中覆寫時，設定驗證簽章所使用的公開金鑰。</summary>
      <param name="key">保存公開金鑰之 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 實作的執行個體。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>在衍生類別中覆寫時，驗證指定資料的簽章。</summary>
      <returns>如果 <paramref name="rgbSignature" /> 與使用所指定之雜湊演算法計算出來的簽章以及 <paramref name="rgbHash" /> 上的金鑰相符，則為 true；否則為 false。</returns>
      <param name="rgbHash">使用 <paramref name="rgbSignature" /> 簽署的資料。</param>
      <param name="rgbSignature">要針對 <paramref name="rgbHash" /> 驗證的簽章。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
      <summary>從指定的雜湊值驗證簽章。</summary>
      <returns>如果簽章對雜湊有效則為 true；否則為 false。</returns>
      <param name="hash">用於驗證簽章的雜湊演算法。</param>
      <param name="rgbSignature">要驗證的簽章。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 參數為 null。</exception>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureFormatter">
      <summary>表示 abstract 基底類別，非對稱簽章格式器之所有實作必須從它衍生而來。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Byte[])">
      <summary>在衍生類別中覆寫時，建立指定資料的簽章。</summary>
      <returns>
        <paramref name="rgbHash" /> 參數的數位簽章。</returns>
      <param name="rgbHash">要簽署的資料。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Security.Cryptography.HashAlgorithm)">
      <summary>利用指定的雜湊值建立簽章。</summary>
      <returns>指定之雜湊值的簽章。</returns>
      <param name="hash">用於建立簽章的雜湊演算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>在衍生類別中覆寫時，設定建立簽章所使用的雜湊演算法。</summary>
      <param name="strName">建立簽章所使用之雜湊演算法的名稱。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>在衍生類別中覆寫時，設定建立簽章所使用的非對稱演算法。</summary>
      <param name="key">用於建立簽章之 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 實作的執行個體。 </param>
    </member>
    <member name="T:System.Security.Cryptography.CryptographicException">
      <summary>密碼編譯作業中發生錯誤時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.Security.Cryptography.CryptographicException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.Int32)">
      <summary>使用指定的 HRESULT 錯誤碼初始化 <see cref="T:System.Security.Cryptography.CryptographicException" /> 類別的新執行個體。</summary>
      <param name="hr">HRESULT 錯誤碼。</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Security.Cryptography.CryptographicException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.Security.Cryptography.CryptographicException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 null，即會在處理內部例外狀況的 catch 區塊中發生目前的例外狀況。</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String,System.String)">
      <summary>以指定的格式使用指定的錯誤訊息來初始化 <see cref="T:System.Security.Cryptography.CryptographicException" /> 類別的新執行個體。</summary>
      <param name="format">用來輸出錯誤訊息的格式。</param>
      <param name="insert">說明例外狀況原因的錯誤訊息。 </param>
    </member>
    <member name="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
      <summary>在密碼編譯作業中發生未預期的作業時所擲回的例外狀況。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CryptoStream">
      <summary>定義連結資料流到密碼編譯轉換的資料流。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)">
      <summary>使用目標資料流、要使用的轉換和資料流模式，來初始化 <see cref="T:System.Security.Cryptography.CryptoStream" /> 類別的新執行個體。</summary>
      <param name="stream">要在其上執行密碼編譯轉換的資料流。</param>
      <param name="transform">要在資料流上執行的密碼編譯轉換。</param>
      <param name="mode">一個列舉值，指定是否要讀取或寫入密碼編譯資料流。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可讀取。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 不可寫入。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> 無效。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanRead">
      <summary>取得值，指出目前的 <see cref="T:System.Security.Cryptography.CryptoStream" /> 是否可讀取。</summary>
      <returns>如果目前的資料流為可讀取則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanSeek">
      <summary>取得值，指出您是否可以在目前的 <see cref="T:System.Security.Cryptography.CryptoStream" /> 中搜尋。</summary>
      <returns>一律為 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanWrite">
      <summary>取得值，指出目前的 <see cref="T:System.Security.Cryptography.CryptoStream" /> 是否可寫入。</summary>
      <returns>如果目前的資料流為可寫入則為 true；否則為 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Clear">
      <summary>釋放 <see cref="T:System.Security.Cryptography.CryptoStream" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Security.Cryptography.CryptoStream" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 可以釋放 Managed 和 Unmanaged 資源，false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Flush">
      <summary>清除此資料流的所有緩衝區，並造成任何緩衝資料都寫入基礎裝置。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.FlushFinalBlock">
      <summary>以緩衝區的目前狀態更新基礎資料來源或存放庫，並接著清除緩衝區。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">金鑰已損毀，可能產生無效的資料流填補。</exception>
      <exception cref="T:System.NotSupportedException">目前的資料流無法寫入。-或-最後的區塊已經轉換。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.Length">
      <summary>取得資料流的位元組長度。</summary>
      <returns>不支援此屬性。</returns>
      <exception cref="T:System.NotSupportedException">不支援此屬性。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.Position">
      <summary>取得或設定在目前資料流中的位置。</summary>
      <returns>不支援此屬性。</returns>
      <exception cref="T:System.NotSupportedException">不支援此屬性。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>自目前 <see cref="T:System.Security.Cryptography.CryptoStream" /> 讀取一位元組序列，並依所讀取的位元組數目進階資料流裡的位置。</summary>
      <returns>緩衝區所讀取的總位元組數。如果目前沒有那麼多的位元組，則此數目可能小於所要求的位元組數，或如果已經到達資料流結尾，則為零。</returns>
      <param name="buffer">位元組陣列。最大的 <paramref name="count" /> 個位元組從目前資料流讀取，並且儲存在 <paramref name="buffer" />。</param>
      <param name="offset">開始儲存從目前資料流讀取資料的 <paramref name="buffer" /> 位元組位移。</param>
      <param name="count">自目前資料流讀取的最大位元組數。</param>
      <exception cref="T:System.NotSupportedException">與目前的 <see cref="T:System.Security.Cryptography.CryptoStream" /> 物件相關聯的 <see cref="T:System.Security.Cryptography.CryptoStreamMode" /> 與基礎資料流不符。例如，若使用 <see cref="F:System.Security.Cryptography.CryptoStreamMode.Read" /> 搭配唯寫的基礎資料流時，會擲回此例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 參數小於零。-或-<paramref name="count" /> 參數小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> 和 <paramref name="offset" /> 參數的總和大於緩衝區的長度。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>
        <see cref="T:System.NotSupportedException" />。</returns>
      <param name="offset">相對於 <paramref name="origin" /> 參數的位元組位移。</param>
      <param name="origin">用以取得新位置的參考點。</param>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.SetLength(System.Int64)">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">目前資料流所需位元組長度。</param>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>寫入一位元組序列至目前的 <see cref="T:System.Security.Cryptography.CryptoStream" />，並依所寫入的位元組數目進階此資料流裡的目前位置。</summary>
      <param name="buffer">位元組陣列。此方法從 <paramref name="buffer" /> 複製 <paramref name="count" /> 位元組到目前資料流。</param>
      <param name="offset">開始複製位元組到目前資料流的 <paramref name="buffer" /> 的位元組位移。</param>
      <param name="count">寫入目前資料流的位元組數目。</param>
      <exception cref="T:System.NotSupportedException">與目前的 <see cref="T:System.Security.Cryptography.CryptoStream" /> 物件相關聯的 <see cref="T:System.Security.Cryptography.CryptoStreamMode" /> 與基礎資料流不符。例如，如果將 <see cref="F:System.Security.Cryptography.CryptoStreamMode.Write" /> 搭配唯讀的基礎資料流使用，便會擲回這個例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 參數小於零。-或-<paramref name="count" /> 參數小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> 和 <paramref name="offset" /> 參數的總和大於緩衝區的長度。 </exception>
    </member>
    <member name="T:System.Security.Cryptography.CryptoStreamMode">
      <summary>指定密碼編譯資料流的模式。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CryptoStreamMode.Read">
      <summary>密碼編譯資料流的讀取存取權限。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CryptoStreamMode.Write">
      <summary>密碼編譯資料流的寫入存取權限。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CspKeyContainerInfo">
      <summary>提供關於加密編譯金鑰組的其他資訊。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CspKeyContainerInfo.#ctor(System.Security.Cryptography.CspParameters)">
      <summary>使用指定的參數初始化 <see cref="T:System.Security.Cryptography.CspKeyContainerInfo" /> 類別的新執行個體。</summary>
      <param name="parameters">提供金鑰相關資訊的 <see cref="T:System.Security.Cryptography.CspParameters" /> 物件。</param>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.KeyContainerName">
      <summary>取得金鑰容器名稱。</summary>
      <returns>金鑰容器名稱。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.KeyNumber">
      <summary>取得一個值，描述建立之非對稱金鑰為簽章金鑰或交換金鑰。</summary>
      <returns>描述建立之非對稱金鑰為簽章金鑰或交換金鑰的其中一個 <see cref="T:System.Security.Cryptography.KeyNumber" /> 值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.MachineKeyStore">
      <summary>取得一個值，指示是否從電腦金鑰集取得金鑰。</summary>
      <returns>如果是從電腦金鑰集取得金鑰則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.ProviderName">
      <summary>取得金鑰的提供者名稱。</summary>
      <returns>提供者名稱。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.ProviderType">
      <summary>取得金鑰的提供者型別。</summary>
      <returns>提供者型別。預設為 1。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CspKeyContainerInfo.RandomlyGenerated">
      <summary>取得一個值，指示金鑰容器是否由 Managed 加密編譯類別隨機產生。</summary>
      <returns>如果金鑰容器是隨機產生則為 true；否則為 false。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CspParameters">
      <summary>包含傳遞至執行加密編譯計算之加密編譯服務提供者 (CSP) 的參數。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CspParameters.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.CspParameters" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CspParameters.#ctor(System.Int32)">
      <summary>使用指定的提供者型別代碼初始化 <see cref="T:System.Security.Cryptography.CspParameters" /> 類別的新執行個體。</summary>
      <param name="dwTypeIn">指定要建立之提供者種類的提供者型別代碼。</param>
    </member>
    <member name="M:System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)">
      <summary>使用指定的提供者型別代碼及名稱初始化 <see cref="T:System.Security.Cryptography.CspParameters" /> 類別的新執行個體。</summary>
      <param name="dwTypeIn">指定要建立之提供者種類的提供者型別代碼。</param>
      <param name="strProviderNameIn">提供者名稱。</param>
    </member>
    <member name="M:System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)">
      <summary>使用指定的提供者型別代碼及名稱和指定的容器名稱，初始化 <see cref="T:System.Security.Cryptography.CspParameters" /> 類別的新執行個體。</summary>
      <param name="dwTypeIn">指定要建立之提供者種類的提供者型別代碼。</param>
      <param name="strProviderNameIn">提供者名稱。</param>
      <param name="strContainerNameIn">容器名稱。</param>
    </member>
    <member name="P:System.Security.Cryptography.CspParameters.Flags">
      <summary>表示修改加密編譯服務提供者 (CSP) 之行為的 <see cref="T:System.Security.Cryptography.CspParameters" /> 的旗標。</summary>
      <returns>一個列舉值，或是列舉值的位元組合。</returns>
      <exception cref="T:System.ArgumentException">值並非有效的列舉值。</exception>
    </member>
    <member name="F:System.Security.Cryptography.CspParameters.KeyContainerName">
      <summary>表示 <see cref="T:System.Security.Cryptography.CspParameters" /> 的金鑰容器名稱。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspParameters.KeyNumber">
      <summary>指定建立的非對稱金鑰是簽章金鑰或交換金鑰。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspParameters.ProviderName">
      <summary>表示 <see cref="T:System.Security.Cryptography.CspParameters" /> 的提供者名稱。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspParameters.ProviderType">
      <summary>表示 <see cref="T:System.Security.Cryptography.CspParameters" /> 的提供者型別代碼。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CspProviderFlags">
      <summary>指定修改加密編譯服務提供者 (CSP) 之行為的旗標。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.NoFlags">
      <summary>不指定任何設定。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.NoPrompt">
      <summary>防止 CSP 顯示這個內容的任何使用者介面 (UI)。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseArchivableKey">
      <summary>允許匯出金鑰以便封存或復原。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseDefaultKeyContainer">
      <summary>使用預設金鑰容器中的金鑰資訊。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseExistingKey">
      <summary>使用目前金鑰的金鑰資訊。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseMachineKeyStore">
      <summary>使用電腦金鑰儲存區中的金鑰資訊。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseNonExportableKey">
      <summary>使用無法匯出的金鑰資訊。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CspProviderFlags.UseUserProtectedKey">
      <summary>如果有特定動作嘗試使用金鑰，透過對話方塊或另一種方法通知使用者。這個旗標與 <see cref="F:System.Security.Cryptography.CspProviderFlags.NoPrompt" /> 旗標不相容。</summary>
    </member>
    <member name="T:System.Security.Cryptography.DeriveBytes">
      <summary>表示衍生指定長度位元組序列所有類別所繼承的來源 abstract 基底類別。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.DeriveBytes" /> 類別的新執行個體。 </summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)">
      <summary>在衍生類別中覆寫時，傳回虛擬隨機金鑰位元組。</summary>
      <returns>位元組陣列，以虛擬隨機金鑰位元組填入。</returns>
      <param name="cb">要產生的虛擬隨機金鑰位元組數量。</param>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Reset">
      <summary>在衍生類別中覆寫時，重設作業的狀態。</summary>
    </member>
    <member name="T:System.Security.Cryptography.HashAlgorithm">
      <summary>表示基底類別，密碼編譯雜湊演算法的所有實作 (Implementation) 必須從它衍生。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.CanReuseTransform">
      <summary>取得值，表示目前的轉換是否可重複使用。</summary>
      <returns>一定是 true。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks">
      <summary>在衍生類別中覆寫時，取得值以指出是否有多個區塊可被轉換。</summary>
      <returns>如果有多個區塊可被轉換則為 true；否則為 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Clear">
      <summary>釋放 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 類別使用的所有資源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])">
      <summary>計算指定位元組陣列的雜湊值。</summary>
      <returns>計算出來的雜湊程式碼。</returns>
      <param name="buffer">要用來計算雜湊程式碼的輸入。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">此物件已經過處置。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)">
      <summary>計算所指定位元組陣列中指定區域的雜湊值。</summary>
      <returns>計算出來的雜湊程式碼。</returns>
      <param name="buffer">要用來計算雜湊程式碼的輸入。</param>
      <param name="offset">位元組陣列中的座標，從此處開始使用資料。</param>
      <param name="count">陣列中要用作資料的位元組數目。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> 是無效的值。-或-<paramref name="buffer" /> 長度無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 超出範圍。此參數需要非負數的數字。</exception>
      <exception cref="T:System.ObjectDisposedException">此物件已經過處置。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)">
      <summary>計算指定 <see cref="T:System.IO.Stream" /> 物件的雜湊值。</summary>
      <returns>計算出來的雜湊程式碼。</returns>
      <param name="inputStream">要用來計算雜湊程式碼的輸入。</param>
      <exception cref="T:System.ObjectDisposedException">此物件已經過處置。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 可以釋放 Managed 和 Unmanaged 資源，false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.Hash">
      <summary>取得計算出來的雜湊程式碼的值。</summary>
      <returns>計算出來的雜湊程式碼的目前值。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
        <see cref="F:System.Security.Cryptography.HashAlgorithm.HashValue" /> 為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">此物件已經過處置。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，將寫入物件的資料轉遞到用來計算雜湊的雜湊演算法。</summary>
      <param name="array">要用來計算雜湊程式碼的輸入。</param>
      <param name="ibStart">位元組陣列中的座標，從此處開始使用資料。</param>
      <param name="cbSize">位元組陣列中要用作資料的位元組數目。</param>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.HashFinal">
      <summary>在衍生類別中覆寫時，當密碼編譯資料流物件處理最後的資料後，會對雜湊計算做最後處理。</summary>
      <returns>計算出來的雜湊程式碼。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.HashSize">
      <summary>取得計算出來的雜湊程式碼的大小，以位元為單位。</summary>
      <returns>計算出來的雜湊程式碼的大小，以位元為單位。</returns>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.HashSizeValue">
      <summary>表示計算出來的雜湊程式碼的大小，以位元為單位。</summary>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.HashValue">
      <summary>表示計算出來的雜湊程式碼的值。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Initialize">
      <summary>初始化 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 類別的實作。</summary>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.InputBlockSize">
      <summary>在衍生類別中覆寫時，取得輸入區塊的大小。</summary>
      <returns>輸入區塊的大小。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.OutputBlockSize">
      <summary>在衍生類別中覆寫時，取得輸出區塊的大小。</summary>
      <returns>輸出區塊的大小。</returns>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.State">
      <summary>表示雜湊計算的狀態。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.System#IDisposable#Dispose">
      <summary>釋放 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>計算輸入位元組陣列中指定區域的雜湊值，並將產生的雜湊值複製到輸出位元組陣列中的指定區域。</summary>
      <returns>寫入的位元組數目。</returns>
      <param name="inputBuffer">要用來計算雜湊程式碼的輸入。</param>
      <param name="inputOffset">輸入位元組陣列中的座標，從此處開始使用資料。</param>
      <param name="inputCount">輸入位元組陣列中要用作資料的位元組數目。</param>
      <param name="outputBuffer">用來計算雜湊程式碼的輸入陣列部分之複本。</param>
      <param name="outputOffset">輸出位元組陣列中的座標，從此處開始寫入資料。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputCount" /> 使用無效的值。-或-<paramref name="inputBuffer" /> 的長度無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputBuffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inputOffset" /> 超出範圍。此參數需要非負數的數字。</exception>
      <exception cref="T:System.ObjectDisposedException">此物件已經過處置。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>計算所指定位元組陣列中指定區域的雜湊值。</summary>
      <returns>進行雜湊的輸入陣列部分之複本。</returns>
      <param name="inputBuffer">要用來計算雜湊程式碼的輸入。</param>
      <param name="inputOffset">位元組陣列中的座標，從此處開始使用資料。</param>
      <param name="inputCount">位元組陣列中要用作資料的位元組數目。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputCount" /> 使用無效的值。-或-<paramref name="inputBuffer" /> 的位移長度無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputBuffer" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inputOffset" /> 超出範圍。此參數不能是非負數的數字。</exception>
      <exception cref="T:System.ObjectDisposedException">此物件已經過處置。</exception>
    </member>
    <member name="T:System.Security.Cryptography.HMAC">
      <summary>表示 abstract 類別，所有的雜湊式訊息驗證碼 (HMAC) 實作均須從此類別衍生。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.HMAC" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.BlockSizeValue">
      <summary>取得或設定要使用於雜湊值的區塊大小。</summary>
      <returns>要使用於雜湊值的區塊大小。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Dispose(System.Boolean)">
      <summary>當金鑰變更合法時釋放 <see cref="T:System.Security.Cryptography.HMAC" /> 類別使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 可以釋放 Managed 和 Unmanaged 資源，false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，將寫入物件的資料轉遞到用來計算雜湊值的預設 <see cref="T:System.Security.Cryptography.HMAC" /> 雜湊演算法。</summary>
      <param name="rgb">輸入資料。</param>
      <param name="ib">位元組陣列中的座標，從此處開始使用資料。</param>
      <param name="cb">陣列中要用作資料的位元組數目。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.HashFinal">
      <summary>在衍生類別中覆寫時，當密碼編譯資料流物件處理最後的資料後，會對雜湊計算做最後處理。</summary>
      <returns>位元組陣列中計算出的雜湊程式碼。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.HashName">
      <summary>取得或設定用於雜湊的雜湊演算法名稱。</summary>
      <returns>雜湊演算法的名稱。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法變更目前的雜湊演算法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Initialize">
      <summary>初始化 <see cref="T:System.Security.Cryptography.HMAC" /> 預設實作的執行個體。</summary>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.Key">
      <summary>取得或設定要使用於雜湊演算法的金鑰。</summary>
      <returns>要使用於雜湊演算法的金鑰。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">嘗試在雜湊開始後變更 <see cref="P:System.Security.Cryptography.HMAC.Key" /> 屬性。</exception>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA1">
      <summary>使用 <see cref="T:System.Security.Cryptography.SHA1" /> 雜湊函式，計算雜湊架構訊息驗證碼 (Hash-based Message Authentication Code，HMAC)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor">
      <summary>使用隨機產生的金鑰來初始化 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
      <summary>使用指定的金鑰資料來初始化 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 類別的新執行個體。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA1" /> 加密的秘密金鑰。金鑰可以是任何長度，但其長度若超過 64 個位元組，便會使用 SHA-1 進行雜湊，以衍生 64 位元組金鑰。因此，秘密金鑰的建議大小為 64 個位元組。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 參數為 null。 </exception>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA256">
      <summary>使用 <see cref="T:System.Security.Cryptography.SHA256" /> 雜湊函式，計算雜湊架構訊息驗證碼 (Hash-based Message Authentication Code，HMAC)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor">
      <summary>使用隨機產生的金鑰來初始化 <see cref="T:System.Security.Cryptography.HMACSHA256" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
      <summary>使用指定的金鑰資料來初始化 <see cref="T:System.Security.Cryptography.HMACSHA256" /> 類別的新執行個體。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA256" /> 加密的秘密金鑰。金鑰可以是任何長度，但其長度若超過 64 個位元組，便會使用 SHA-1 進行雜湊，以衍生 64 位元組金鑰。因此，秘密金鑰的建議大小為 64 個位元組。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 參數為 null。 </exception>
    </member>
    <member name="T:System.Security.Cryptography.ICryptoTransform">
      <summary>定義密碼編譯轉換的基本運算。</summary>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.CanReuseTransform">
      <summary>取得值，表示目前的轉換是否可重複使用。</summary>
      <returns>如果目前轉換可以重複使用則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks">
      <summary>取得值，指出是否有多個區塊可被轉換。</summary>
      <returns>如果有多個區塊可被轉換則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.InputBlockSize">
      <summary>取得輸入區塊的大小。</summary>
      <returns>輸入資料區塊的大小，以位元組為單位。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.OutputBlockSize">
      <summary>取得輸出區塊的大小。</summary>
      <returns>輸出資料區塊的大小，以位元組為單位。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>轉換輸入位元組陣列中指定的區域，並且將產生的轉換複製到輸出位元組陣列中指定的區域。</summary>
      <returns>寫入的位元組數目。</returns>
      <param name="inputBuffer">要用來計算轉換的輸入。</param>
      <param name="inputOffset">輸入位元組陣列中的座標，從此處開始使用資料。</param>
      <param name="inputCount">輸入位元組陣列中要用作資料的位元組數目。</param>
      <param name="outputBuffer">要將轉換寫入的輸出。</param>
      <param name="outputOffset">輸出位元組陣列中的座標，從此處開始寫入資料。</param>
    </member>
    <member name="M:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>轉換所指定位元組陣列的指定區域。</summary>
      <returns>計算出來的轉換。</returns>
      <param name="inputBuffer">要用來計算轉換的輸入。</param>
      <param name="inputOffset">位元組陣列中的座標，從此處開始使用資料。</param>
      <param name="inputCount">位元組陣列中要用作資料的位元組數目。</param>
    </member>
    <member name="T:System.Security.Cryptography.ICspAsymmetricAlgorithm">
      <summary>定義允許 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 類別列舉金鑰容器資訊，以及匯入和匯出 Microsoft Cryptographic API (CAPI) 相容金鑰二進位大型物件的方法。</summary>
    </member>
    <member name="P:System.Security.Cryptography.ICspAsymmetricAlgorithm.CspKeyContainerInfo">
      <summary>取得描述關於加密編譯金鑰組之其他資訊的 <see cref="T:System.Security.Cryptography.CspKeyContainerInfo" /> 物件。</summary>
      <returns>描述關於加密編譯金鑰組之其他資訊的 <see cref="T:System.Security.Cryptography.CspKeyContainerInfo" /> 物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob(System.Boolean)">
      <summary>[安全性關鍵] 匯出 BLOB，其中含有與 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 物件相關的金鑰資訊。</summary>
      <returns>包含與 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 物件關聯之金鑰資訊的位元組陣列。</returns>
      <param name="includePrivateParameters">true 以包含私密金鑰；否則為 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte[])">
      <summary>[安全性關鍵] 匯入代表非對稱金鑰資訊的 BLOB。</summary>
      <param name="rawData">表示非對稱金鑰二進位大型物件的位元組陣列。</param>
    </member>
    <member name="T:System.Security.Cryptography.KeyedHashAlgorithm">
      <summary>表示基底類別，金鑰雜湊演算法的所有實作 (Implementation) 必須從它衍生。</summary>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 可以釋放 Managed 和 Unmanaged 資源，false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="P:System.Security.Cryptography.KeyedHashAlgorithm.Key">
      <summary>取得或設定要使用於雜湊演算法的金鑰。</summary>
      <returns>要使用於雜湊演算法的金鑰。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">嘗試在雜湊時變更 <see cref="P:System.Security.Cryptography.KeyedHashAlgorithm.Key" /> 屬性。</exception>
    </member>
    <member name="F:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue">
      <summary>要使用於雜湊演算法的金鑰。</summary>
    </member>
    <member name="T:System.Security.Cryptography.KeyNumber">
      <summary>指定要建立非對稱簽章金鑰或非對稱交換金鑰。</summary>
    </member>
    <member name="F:System.Security.Cryptography.KeyNumber.Exchange">
      <summary>用於將工作階段金鑰加密的交換金鑰組，以便安全地儲存及與其他使用者交換。</summary>
    </member>
    <member name="F:System.Security.Cryptography.KeyNumber.Signature">
      <summary>用於驗證數位簽署之訊息或檔案的簽章金鑰組。</summary>
    </member>
    <member name="T:System.Security.Cryptography.KeySizes">
      <summary>判斷對稱密碼編譯演算法的有效金鑰組大小。</summary>
    </member>
    <member name="M:System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的金鑰值來初始化 <see cref="T:System.Security.Cryptography.KeySizes" /> 類別的新執行個體。</summary>
      <param name="minSize">最小的有效金鑰大小。</param>
      <param name="maxSize">最大的有效金鑰大小。</param>
      <param name="skipSize">有效金鑰大小之間的間隔。</param>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.MaxSize">
      <summary>指定最大金鑰大小，以位元為單位。</summary>
      <returns>最大金鑰大小，以位元為單位。</returns>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.MinSize">
      <summary>指定最小金鑰大小，以位元為單位。</summary>
      <returns>最小金鑰大小，以位元為單位。</returns>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.SkipSize">
      <summary>指定有效金鑰大小之間的間隔，以位元為單位。</summary>
      <returns>有效金鑰大小之間的間隔，以位元為單位。</returns>
    </member>
    <member name="T:System.Security.Cryptography.MaskGenerationMethod">
      <summary>表示 abstract 類別，所有遮罩產生器演算法必須從它衍生而來。</summary>
    </member>
    <member name="M:System.Security.Cryptography.MaskGenerationMethod.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.MaskGenerationMethod" /> 類別的新執行個體。 </summary>
    </member>
    <member name="M:System.Security.Cryptography.MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>在衍生類別中覆寫時，使用指定的隨機種子產生指定長度的遮罩。</summary>
      <returns>隨機產生的遮罩，其長度等於 <paramref name="cbReturn" /> 參數。</returns>
      <param name="rgbSeed">用於計算遮罩的隨機種子。</param>
      <param name="cbReturn">產生之遮罩的長度，以位元組為單位。</param>
    </member>
    <member name="T:System.Security.Cryptography.PKCS1MaskGenerationMethod">
      <summary>根據 PKCS #1 計算金鑰交換演算法使用的遮罩。</summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.PKCS1MaskGenerationMethod" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>從指定的隨機種子產生及傳回指定長度的遮罩。</summary>
      <returns>隨機產生的遮罩，其長度等於 <paramref name="cbReturn" /> 參數。</returns>
      <param name="rgbSeed">用於計算遮罩的隨機種子。</param>
      <param name="cbReturn">產生之遮罩的長度，以位元組為單位。</param>
    </member>
    <member name="P:System.Security.Cryptography.PKCS1MaskGenerationMethod.HashName">
      <summary>取得或設定用於產生遮罩的雜湊演算法型別名稱。</summary>
      <returns>實作用於計算遮罩之雜湊演算法的型別名稱。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RandomNumberGenerator">
      <summary>表示 abstract 類別 (Abstract Class)，密碼編譯亂數產生器的所有實作 (Implementation) 從它衍生。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RandomNumberGenerator" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
      <summary>在衍生類別中覆寫時，將在密碼編譯方面強式的隨機值序列填入位元組陣列。</summary>
      <param name="data">要填入密碼編譯方面強式的隨機位元組的陣列。 </param>
    </member>
    <member name="T:System.Security.Cryptography.Rfc2898DeriveBytes">
      <summary>依據 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 使用虛擬亂數產生器，實作密碼式的金鑰衍生功能 PBKDF2。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
      <summary>使用密碼、Salt 和反覆計數來衍生金鑰，以初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</summary>
      <param name="password">用來衍生金鑰的密碼。</param>
      <param name="salt">用來衍生金鑰的金鑰 Salt。</param>
      <param name="iterations">操作的重複次數。</param>
      <exception cref="T:System.ArgumentException">指定的 Salt 大小小於 8 個位元組，或反覆計數小於 1。</exception>
      <exception cref="T:System.ArgumentNullException">密碼或 Salt 是 null。 </exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
      <summary>使用密碼和 Salt 來衍生金鑰，以初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</summary>
      <param name="password">用來衍生金鑰的密碼。</param>
      <param name="salt">用來衍生金鑰的金鑰 Salt。</param>
      <exception cref="T:System.ArgumentException">指定的 Salt 大小小於 8 個位元組，或反覆計數小於 1。</exception>
      <exception cref="T:System.ArgumentNullException">密碼或 Salt 是 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>使用密碼、Salt 和反覆計數來衍生金鑰，以初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</summary>
      <param name="password">用來衍生金鑰的密碼。</param>
      <param name="salt">用來衍生金鑰的金鑰 Salt。</param>
      <param name="iterations">操作的重複次數。</param>
      <exception cref="T:System.ArgumentException">指定的 Salt 大小小於 8 個位元組，或反覆計數小於 1。</exception>
      <exception cref="T:System.ArgumentNullException">密碼或 Salt 是 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
      <summary>從密碼、Salt 和反覆計數傳回虛擬亂數金鑰。</summary>
      <returns>位元組陣列，以虛擬隨機金鑰位元組填入。</returns>
      <param name="cb">要產生的虛擬隨機金鑰位元組數量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cb " /> 超出範圍。此參數需要非負數的數字。</exception>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount">
      <summary>取得或設定操作的重複次數。</summary>
      <returns>操作的重複次數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">反覆計數小於 1。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset">
      <summary>重設作業的狀態。</summary>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt">
      <summary>取得或設定用於操作的金鑰 Salt 值。</summary>
      <returns>用於操作的金鑰 Salt 值。</returns>
      <exception cref="T:System.ArgumentException">指定的 Salt 大小小於 8 個位元組。</exception>
      <exception cref="T:System.ArgumentNullException">Salt 是 null。</exception>
    </member>
    <member name="T:System.Security.Cryptography.RNGCryptoServiceProvider">
      <summary>使用由密碼編譯服務供應者 (CSP) 提供的實作 (implementation)，實作密碼編譯亂數產生器 (RNG)。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(System.Byte[])">
      <summary>在位元組陣列中填入在密碼編譯方面強式的隨機值序列。</summary>
      <param name="data">要填入在密碼編譯方面強式的隨機值序列之陣列。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼編譯服務供應者 (CSP) 無法取得。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 null。</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSA">
      <summary>表示基底類別，<see cref="T:System.Security.Cryptography.RSA" /> 演算法的所有實作必須從它繼承。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSA" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create">
      <summary>建立 <see cref="T:System.Security.Cryptography.RSA" /> 演算法之預設實作的執行個體。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.RSA" /> 之預設實作的新執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.String)">
      <summary>建立 <see cref="T:System.Security.Cryptography.RSA" /> 之指定實作的執行個體。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.RSA" /> 之指定實作的新執行個體。</returns>
      <param name="algName">要使用之 <see cref="T:System.Security.Cryptography.RSA" /> 實作的名稱。</param>
    </member>
    <member name="M:System.Security.Cryptography.RSA.DecryptValue(System.Byte[])">
      <summary>在衍生類別中覆寫時，使用私密金鑰將輸入資料解密。</summary>
      <returns>
        <paramref name="rgb" /> 參數產生的純文字解密。</returns>
      <param name="rgb">要解密的加密文字。</param>
    </member>
    <member name="M:System.Security.Cryptography.RSA.EncryptValue(System.Byte[])">
      <summary>在衍生類別中覆寫時，使用公開金鑰將輸入資料加密。</summary>
      <returns>
        <paramref name="rgb" /> 參數產生的加密文字加密。</returns>
      <param name="rgb">要加密的純文字。</param>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportParameters(System.Boolean)">
      <summary>在衍生類別中覆寫時，匯出 <see cref="T:System.Security.Cryptography.RSAParameters" />。</summary>
      <returns>RSA 參數。</returns>
      <param name="includePrivateParameters">true 以包含私密參數；否則為 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.RSA.FromXmlString(System.String)">
      <summary>利用 XML 字串中之金鑰資訊初始化 <see cref="T:System.Security.Cryptography.RSA" /> 物件。</summary>
      <param name="xmlString">包含 <see cref="T:System.Security.Cryptography.RSA" /> 金鑰資訊的 XML 字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlString" /> 參數為 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="xmlString" /> 參數的格式無效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)">
      <summary>在衍生類別中覆寫時，匯入指定的 <see cref="T:System.Security.Cryptography.RSAParameters" />。</summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.RSA" /> 的參數。</param>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ToXmlString(System.Boolean)">
      <summary>建立及傳回包含目前 <see cref="T:System.Security.Cryptography.RSA" /> 物件之金鑰的 XML 字串。</summary>
      <returns>包含目前 <see cref="T:System.Security.Cryptography.RSA" /> 物件之金鑰的 XML 字串。</returns>
      <param name="includePrivateParameters">true 以包含公開和私密 RSA 金鑰；false 只包含公開金鑰。</param>
    </member>
    <member name="T:System.Security.Cryptography.RSACryptoServiceProvider">
      <summary>使用加密編譯服務提供者 (CSP) 提供之 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的實作執行非對稱加密和解密。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor">
      <summary>使用預設金鑰初始化 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 類別的新執行個體。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼編譯服務供應者 (CSP) 無法取得。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32)">
      <summary>使用指定的金鑰大小初始化 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 類別的新執行個體。</summary>
      <param name="dwKeySize">要使用的金鑰大小，以位元為單位。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼編譯服務供應者 (CSP) 無法取得。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32,System.Security.Cryptography.CspParameters)">
      <summary>使用指定的金鑰大小和參數初始化 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 類別的新執行個體。</summary>
      <param name="dwKeySize">要使用的金鑰大小，以位元為單位。</param>
      <param name="parameters">要傳遞到加密編譯服務提供者 (CSP) 的參數。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法取得 CSP。-或-無法建立金鑰。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Security.Cryptography.CspParameters)">
      <summary>使用指定的參數初始化 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 類別的新執行個體。</summary>
      <param name="parameters">要傳遞到加密編譯服務提供者 (CSP) 的參數。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法取得 CSP。</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.CspKeyContainerInfo">
      <summary>取得描述關於加密編譯金鑰組之其他資訊的 <see cref="T:System.Security.Cryptography.CspKeyContainerInfo" /> 物件。</summary>
      <returns>描述關於加密編譯金鑰組之其他資訊的 <see cref="T:System.Security.Cryptography.CspKeyContainerInfo" /> 物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)">
      <summary>使用 <see cref="T:System.Security.Cryptography.RSA" /> 演算法將資料解密。</summary>
      <returns>解密資料，在加密之前為原始純文字。</returns>
      <param name="rgb">要解密的資料。</param>
      <param name="fOAEP">true 以使用 OAEP 填補執行直接 <see cref="T:System.Security.Cryptography.RSA" /> 解密；否則為 false 以使用 PKCS#1 v1.5 填補。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼編譯服務供應者 (CSP) 無法取得。-或-<paramref name="fOAEP" /> 參數為 true，而且 <paramref name="rgb" /> 參數的長度大於 <see cref="P:System.Security.Cryptography.RSACryptoServiceProvider.KeySize" />。-或-<paramref name="fOAEP" /> 參數為 true，而且不支援 OAEP。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgb " /> 為 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue(System.Byte[])">
      <summary>目前版本不支援此方法。</summary>
      <returns>解密資料，在加密之前為原始純文字。</returns>
      <param name="rgb">要解密的資料。</param>
      <exception cref="T:System.NotSupportedException">目前版本不支援此方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)">
      <summary>使用 <see cref="T:System.Security.Cryptography.RSA" /> 演算法將資料加密。</summary>
      <returns>加密的資料。</returns>
      <param name="rgb">要加密的資料。</param>
      <param name="fOAEP">true 以使用 OAEP 填補執行直接 <see cref="T:System.Security.Cryptography.RSA" /> 加密；否則為 false 以使用 PKCS#1 v1.5 填補。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼編譯服務供應者 (CSP) 無法取得。-或-<paramref name="rgb" /> 參數的長度大於允許的最大長度。-或-<paramref name="fOAEP" /> 參數為 true，而且不支援 OAEP 填補。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgb " /> 為 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue(System.Byte[])">
      <summary>目前版本不支援此方法。</summary>
      <returns>加密的資料。</returns>
      <param name="rgb">要加密的資料。</param>
      <exception cref="T:System.NotSupportedException">目前版本不支援此方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.ExportCspBlob(System.Boolean)">
      <summary>[安全性關鍵] 匯出 BLOB，其中含有與 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 物件相關的金鑰資訊。</summary>
      <returns>包含與 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 物件關聯之金鑰資訊的位元組陣列。</returns>
      <param name="includePrivateParameters">true 以包含私密金鑰；否則為 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)">
      <summary>匯出 <see cref="T:System.Security.Cryptography.RSAParameters" />。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.RSA" /> 的參數。</returns>
      <param name="includePrivateParameters">true 以包含私密參數；否則為 false。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.ImportCspBlob(System.Byte[])">
      <summary>[安全性關鍵] 匯入代表 RSA 金鑰資訊的 BLOB。</summary>
      <param name="keyBlob">表示 RSA 金鑰二進位大型物件的位元組陣列。</param>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)">
      <summary>匯入指定的 <see cref="T:System.Security.Cryptography.RSAParameters" />。</summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.RSA" /> 的參數。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼編譯服務供應者 (CSP) 無法取得。-或-<paramref name="parameters" /> 參數具有遺漏的欄位。</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.KeyExchangeAlgorithm">
      <summary>取得可供 <see cref="T:System.Security.Cryptography.RSA" /> 此實作使用之金鑰交換演算法的名稱。</summary>
      <returns>金鑰交換演算法的名稱 (如果有的話)；否則為 null。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.KeySize">
      <summary>取得目前金鑰的大小。</summary>
      <returns>金鑰的大小，以位元為單位。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.PersistKeyInCsp">
      <summary>取得或設定一個值，指示金鑰是否應在加密編譯服務提供者 (CSP) 中保留。</summary>
      <returns>如果金鑰應保存於 CSP 中則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.PublicOnly">
      <summary>取得一個值，指示 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 物件是否只包含公開金鑰。</summary>
      <returns>如果 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 物件只包含公開金鑰則為 true；否則為 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.SignatureAlgorithm">
      <summary>取得可供 <see cref="T:System.Security.Cryptography.RSA" /> 此實作使用之簽章演算法的名稱。</summary>
      <returns>簽章演算法的名稱。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32,System.Object)">
      <summary>使用指定的雜湊演算法計算指定之位元組陣列子集的雜湊值，並簽署產生的雜湊值。</summary>
      <returns>指定之資料的 <see cref="T:System.Security.Cryptography.RSA" /> 簽章。</returns>
      <param name="buffer">要計算雜湊的輸入資料。</param>
      <param name="offset">陣列中的座標，從此處開始使用資料。</param>
      <param name="count">陣列中要用作資料的位元組數目。</param>
      <param name="halg">用於建立雜湊值的雜湊演算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="halg" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="halg" /> 參數不是有效的型別。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Object)">
      <summary>使用指定的雜湊演算法計算指定之位元組陣列的雜湊值，並簽署產生雜湊值。</summary>
      <returns>指定之資料的 <see cref="T:System.Security.Cryptography.RSA" /> 簽章。</returns>
      <param name="buffer">要計算雜湊的輸入資料。</param>
      <param name="halg">用於建立雜湊值的雜湊演算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="halg" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="halg" /> 參數不是有效的型別。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.IO.Stream,System.Object)">
      <summary>使用指定的雜湊演算法計算指定之輸入串流的雜湊值，並簽署產生的雜湊值。</summary>
      <returns>指定之資料的 <see cref="T:System.Security.Cryptography.RSA" /> 簽章。</returns>
      <param name="inputStream">要計算雜湊的輸入資料。</param>
      <param name="halg">用於建立雜湊值的雜湊演算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="halg" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="halg" /> 參數不是有效的型別。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)">
      <summary>使用私密金鑰將指定的雜湊值加密，以計算其簽章。</summary>
      <returns>指定之雜湊值的 <see cref="T:System.Security.Cryptography.RSA" /> 簽章。</returns>
      <param name="rgbHash">要簽署之資料的雜湊值。</param>
      <param name="str">用於建立資料之雜湊值的雜湊演算法識別碼 (OID)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 參數為 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼編譯服務供應者 (CSP) 無法取得。-或-沒有私密金鑰。</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSACryptoServiceProvider.UseMachineKeyStore">
      <summary>取得或設定一個值，指示是否應將金鑰保留在電腦的金鑰存放區，而非使用者設定檔存放區。</summary>
      <returns>如果金鑰應保存於電腦金鑰存放區中則為 true；否則為 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])">
      <summary>使用提供的公開金鑰判斷簽章中的雜湊值，並與提供之資料的雜湊值進行比較，以確認數位簽章是否有效。</summary>
      <returns>如果簽章有效則為 true，否則為 false。</returns>
      <param name="buffer">已簽署的資料。</param>
      <param name="halg">用於建立資料之雜湊值的雜湊演算法名稱。</param>
      <param name="signature">要驗證的簽章資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="halg" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="halg" /> 參數不是有效的型別。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])">
      <summary>使用提供的公開金鑰判斷簽章中的雜湊值，並與提供的雜湊值比較，以確認數位簽章是否有效。</summary>
      <returns>如果簽章有效則為 true，否則為 false。</returns>
      <param name="rgbHash">已簽署之資料的雜湊值。</param>
      <param name="str">用於建立資料之雜湊值的雜湊演算法識別碼 (OID)。</param>
      <param name="rgbSignature">要驗證的簽章資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 參數為 null。-或-<paramref name="rgbSignature" /> 參數為 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼編譯服務供應者 (CSP) 無法取得。-或-無法驗證簽章。 </exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter">
      <summary>將最佳非對稱加密填補 (OAEP) 金鑰交換資料解密。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的金鑰初始化 <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" /> 類別的新執行個體。</summary>
      <param name="key">保存私密金鑰之 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key " /> 為 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>從加密的金鑰交換資料擷取秘密資訊。</summary>
      <returns>從金鑰交換資料衍生而來的秘密資訊。</returns>
      <param name="rgbData">秘密資訊隱藏在其中的金鑰交換資料。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">金鑰交換資料驗證失敗。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">金鑰遺失。</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.Parameters">
      <summary>取得最佳非對稱式加密填補 (OAEP) 金鑰交換的參數。</summary>
      <returns>包含 OAEP 金鑰交換作業之參數的 XML 字串。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>設定要用於將秘密資訊解密的私密金鑰。</summary>
      <param name="key">保存私密金鑰之 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter">
      <summary>使用 <see cref="T:System.Security.Cryptography.RSA" /> 建立最佳非對稱加密填補 (OAEP) 金鑰交換資料。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的金鑰初始化 <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" /> 類別的新執行個體。</summary>
      <param name="key">保存公開金鑰之 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key " /> 為 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>從指定的輸入資料建立加密的金鑰交換資料。</summary>
      <returns>要傳送到預定收件者的加密金鑰交換資料。</returns>
      <param name="rgbData">要在金鑰交換中傳遞的秘密資訊。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">金鑰遺失。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>從指定的輸入資料建立加密的金鑰交換資料。</summary>
      <returns>要傳送到預定收件者的加密金鑰交換資料。</returns>
      <param name="rgbData">要在金鑰交換中傳遞的秘密資訊。</param>
      <param name="symAlgType">目前版本中未使用此參數。</param>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter">
      <summary>取得或設定用於在金鑰交換建立程序中建立填補的參數。</summary>
      <returns>參數值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters">
      <summary>取得最佳非對稱式加密填補 (OAEP) 金鑰交換的參數。</summary>
      <returns>包含 OAEP 金鑰交換作業之參數的 XML 字串。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng">
      <summary>取得或設定要在建立金鑰交換時使用的隨機數字產生器演算法。</summary>
      <returns>要使用之隨機數字產生器演算法的執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>設定要用於將金鑰交換資料加密的公開金鑰。</summary>
      <param name="key">保存公開金鑰之 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key " /> 為 null。</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAParameters">
      <summary>表示 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的標準參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.D">
      <summary>表示 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的 D 參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DP">
      <summary>表示 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的 DP 參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DQ">
      <summary>表示 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的 DQ 參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Exponent">
      <summary>表示 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的 Exponent 參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.InverseQ">
      <summary>表示 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的 InverseQ 參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Modulus">
      <summary>表示 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的 Modulus 參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.P">
      <summary>表示 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的 P 參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Q">
      <summary>表示 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的 Q 參數。</summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter">
      <summary>將 PKCS #1 金鑰交換資料解密。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的金鑰初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" /> 類別的新執行個體。</summary>
      <param name="key">保存私密金鑰之 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>從加密的金鑰交換資料擷取秘密資訊。</summary>
      <returns>從金鑰交換資料衍生而來的秘密資訊。</returns>
      <param name="rgbIn">秘密資訊隱藏在其中的金鑰交換資料。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">金鑰遺失。</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.Parameters">
      <summary>取得 PKCS #1 金鑰交換的參數。</summary>
      <returns>包含 PKCS #1 金鑰交換作業之參數的 XML 字串。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.RNG">
      <summary>取得或設定要在建立金鑰交換時使用的隨機數字產生器演算法。</summary>
      <returns>要使用之隨機數字產生器演算法的執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>設定要用於將秘密資訊解密的私密金鑰。</summary>
      <param name="key">保存私密金鑰之 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter">
      <summary>使用 <see cref="T:System.Security.Cryptography.RSA" /> 建立 PKCS#1 金鑰交換資料。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的金鑰初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" /> 類別的新執行個體。</summary>
      <param name="key">保存公開金鑰之 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key " /> 為 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>從指定的輸入資料建立加密的金鑰交換資料。</summary>
      <returns>要傳送到預定收件者的加密金鑰交換資料。</returns>
      <param name="rgbData">要在金鑰交換中傳遞的秘密資訊。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbData " /> 太大。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">金鑰為 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>從指定的輸入資料建立加密的金鑰交換資料。</summary>
      <returns>要傳送到預定收件者的加密金鑰交換資料。</returns>
      <param name="rgbData">要在金鑰交換中傳遞的秘密資訊。</param>
      <param name="symAlgType">目前版本中未使用此參數。</param>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Parameters">
      <summary>取得 PKCS #1 金鑰交換的參數。</summary>
      <returns>包含 PKCS #1 金鑰交換作業之參數的 XML 字串。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Rng">
      <summary>取得或設定要在建立金鑰交換時使用的隨機數字產生器演算法。</summary>
      <returns>要使用之隨機數字產生器演算法的執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>設定要用於將金鑰交換資料加密的公開金鑰。</summary>
      <param name="key">保存公開金鑰之 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key " /> 為 null。</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter">
      <summary>驗證 <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 1.5 版簽章。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的金鑰初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" /> 類別的新執行個體。</summary>
      <param name="key">保存公開金鑰的 <see cref="T:System.Security.Cryptography.RSA" /> 執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key " /> 為 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>設定用於驗證簽章的雜湊演算法。</summary>
      <param name="strName">驗證簽章所使用之雜湊演算法的名稱。</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>設定用於驗證簽章的公開金鑰。</summary>
      <param name="key">保存公開金鑰的 <see cref="T:System.Security.Cryptography.RSA" /> 執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key " /> 為 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>驗證指定之資料的 <see cref="T:System.Security.Cryptography.RSA" /> PKCS#1 簽章。</summary>
      <returns>如果 <paramref name="rgbSignature" /> 與使用所指定之雜湊演算法計算出來的簽章以及 <paramref name="rgbHash" /> 上的金鑰相符，則為 true；否則為 false。</returns>
      <param name="rgbHash">使用 <paramref name="rgbSignature" /> 簽署的資料。</param>
      <param name="rgbSignature">要針對 <paramref name="rgbHash" /> 驗證的簽章。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">金鑰為 null。-或-雜湊演算法為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 參數為 null。-或-<paramref name="rgbSignature" /> 參數為 null。 </exception>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter">
      <summary>建立 <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 1.5 版簽章。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的金鑰初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" /> 類別的新執行個體。</summary>
      <param name="key">保存私密金鑰之 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.CreateSignature(System.Byte[])">
      <summary>建立指定之資料的 <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 簽章。</summary>
      <returns>
        <paramref name="rgbHash" /> 的數位簽章。</returns>
      <param name="rgbHash">要簽署的資料。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">金鑰為 null。-或-雜湊演算法為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>設定用於建立簽章的雜湊演算法。</summary>
      <param name="strName">建立簽章所使用之雜湊演算法的名稱。</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>設定用於建立簽章的私密金鑰。</summary>
      <param name="key">保存私密金鑰之 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 null。</exception>
    </member>
    <member name="T:System.Security.Cryptography.SHA1">
      <summary>計算輸入資料的 <see cref="T:System.Security.Cryptography.SHA1" /> 雜湊。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA1" /> 的新執行個體。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA1Managed">
      <summary>計算使用 Managed 程式庫之輸入資料的 <see cref="T:System.Security.Cryptography.SHA1" /> 雜湊。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA1Managed" /> 類別的新執行個體。</summary>
      <exception cref="T:System.InvalidOperationException">此類別與聯邦資訊處理標準 (FIPS) 演算法不相容。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>傳送寫入物件的資料到用來計算雜湊的 <see cref="T:System.Security.Cryptography.SHA1Managed" /> 雜湊演算法。</summary>
      <param name="rgb">輸入資料。</param>
      <param name="ibStart">位元組陣列中的座標，從此處開始使用資料。</param>
      <param name="cbSize">陣列中要用作資料的位元組數目。</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.HashFinal">
      <summary>所有資料都已寫入物件後，傳回計算的 <see cref="T:System.Security.Cryptography.SHA1" /> 雜湊值。</summary>
      <returns>計算出來的雜湊程式碼。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.Initialize">
      <summary>初始化或重新初始化雜湊演算法的執行個體。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256">
      <summary>計算輸入資料的 <see cref="T:System.Security.Cryptography.SHA256" /> 雜湊。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA256" /> 的新執行個體。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256Managed">
      <summary>計算使用 Managed 程式庫之輸入資料的 <see cref="T:System.Security.Cryptography.SHA256" /> 雜湊。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.#ctor">
      <summary>使用 Managed 程式庫初始化 <see cref="T:System.Security.Cryptography.SHA256Managed" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，將寫入物件的資料轉遞到用來計算雜湊的 <see cref="T:System.Security.Cryptography.SHA256" /> 雜湊演算法。</summary>
      <param name="rgb">輸入資料。</param>
      <param name="ibStart">位元組陣列中的座標，從此處開始使用資料。</param>
      <param name="cbSize">陣列中要用作資料的位元組數目。</param>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.HashFinal">
      <summary>在衍生類別中覆寫時，當密碼編譯資料流物件處理最後的資料後，會對雜湊計算做最後處理。</summary>
      <returns>計算出來的雜湊程式碼。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.Initialize">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA256Managed" /> 的執行個體。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SymmetricAlgorithm">
      <summary>表示 abstract 基底類別，對稱演算法之所有實作 (Implementation) 必須從它繼承。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> 類別的新執行個體。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">衍生自對稱演算法的類別實作無效。</exception>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.BlockSize">
      <summary>取得或設定密碼編譯作業的區塊大小，以位元為單位。</summary>
      <returns>區塊大小，以位元為單位。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">區塊大小無效。</exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue">
      <summary>表示密碼編譯作業的區塊大小，以位元為單位。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Clear">
      <summary>釋放 <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> 類別使用的所有資源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor">
      <summary>使用目前的 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 屬性和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)，建立對稱解密子物件。</summary>
      <returns>對稱解密子物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>在衍生類別中覆寫時，使用指定的 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 屬性和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) 建立對稱解密子物件。</summary>
      <returns>對稱解密子物件。</returns>
      <param name="rgbKey">對稱演算法所用的秘密金鑰。</param>
      <param name="rgbIV">對稱演算法所用的初始化向量。</param>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor">
      <summary>使用目前的 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 屬性和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)，建立對稱加密子物件。</summary>
      <returns>對稱加密子物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>在衍生類別中覆寫時，使用指定的 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 屬性和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) 建立對稱加密子物件。</summary>
      <returns>對稱加密子物件。</returns>
      <param name="rgbKey">對稱演算法所用的秘密金鑰。</param>
      <param name="rgbIV">對稱演算法所用的初始化向量。</param>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 可以釋放 Managed 和 Unmanaged 資源，false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV">
      <summary>在衍生類別中覆寫時，產生要用於該演算法的隨機初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey">
      <summary>在衍生類別中覆寫時，產生要用於演算法的隨機金鑰 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />)。</summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.IV">
      <summary>取得或設定對稱演算法的初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。</summary>
      <returns>初始化向量。</returns>
      <exception cref="T:System.ArgumentNullException">嘗試將初始化向量設定為 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">嘗試將初始化向量設定為無效的大小。</exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.IVValue">
      <summary>表示對稱演算法的初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。</summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Key">
      <summary>取得或設定對稱演算法的秘密金鑰。</summary>
      <returns>對稱演算法所用的秘密金鑰。</returns>
      <exception cref="T:System.ArgumentNullException">嘗試將金鑰設定為 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">索引鍵大小無效。</exception>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.KeySize">
      <summary>取得或設定對稱演算法使用之秘密金鑰的大小，以位元為單位。</summary>
      <returns>對稱演算法使用之秘密金鑰的大小，以位元為單位。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">索引鍵大小無效。</exception>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue">
      <summary>表示對稱演算法使用之秘密金鑰的大小，以位元為單位。</summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.KeyValue">
      <summary>表示對稱演算法的秘密金鑰。</summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes">
      <summary>取得對稱演算法所支援的區塊大小，以位元為單位。</summary>
      <returns>陣列，含有演算法所支援的區塊大小。</returns>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue">
      <summary>指定對稱演算法所支援的區塊大小，以位元為單位。</summary>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes">
      <summary>取得對稱演算法所支援的金鑰大小，以位元為單位。</summary>
      <returns>陣列，含有演算法所支援的金鑰大小。</returns>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue">
      <summary>指定對稱演算法所支援的金鑰大小，以位元為單位。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.System#IDisposable#Dispose">
      <summary>釋放 <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)">
      <summary>判斷指定的金鑰大小對目前的演算法是否有效。</summary>
      <returns>如果指定的金鑰大小對目前的演算法有效則為 true；否則為 false。</returns>
      <param name="bitLength">用來檢查金鑰大小是否有效的長度，以位元為單位。</param>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Certificate">
      <summary>提供協助您使用 X.509 第 3 版憑證的方法。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[])">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 類別的新執行個體 (此類別是在表示 X.509 第 3 版憑證的位元組序列中定義的)。</summary>
      <param name="data">位元組陣列，包含來自 X.509 憑證的資料。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">此憑證發生錯誤。例如：憑證檔案不存在。此憑證無效。此憑證的密碼不正確。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rawData" /> 參數為 null。-或-<paramref name="rawData" /> 參數的長度為 0。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[],System.String)">
      <summary>使用位元組陣列和密碼來初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 類別的新執行個體。</summary>
      <param name="rawData">位元組陣列，包含來自 X.509 憑證的資料。</param>
      <param name="password">存取 X.509 憑證資料所需的密碼。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">此憑證發生錯誤。例如：憑證檔案不存在。此憑證無效。此憑證的密碼不正確。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rawData" /> 參數為 null。-或-<paramref name="rawData" /> 參數的長度為 0。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>使用位元組陣列、密碼和金鑰儲存旗標來初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 類別的新執行個體。</summary>
      <param name="rawData">位元組陣列，包含來自 X.509 憑證的資料。</param>
      <param name="password">存取 X.509 憑證資料所需的密碼。</param>
      <param name="keyStorageFlags">其中一個列舉值。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">此憑證發生錯誤。例如：憑證檔案不存在。此憑證無效。此憑證的密碼不正確。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rawData" /> 參數為 null。-或-<paramref name="rawData" /> 參數的長度為 0。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.IntPtr)">
      <summary>[安全性關鍵] 使用 Unmanaged PCCERT_CONTEXT 結構的控制代碼，初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 類別的新執行個體。</summary>
      <param name="handle">PCCERT_CONTEXT 結構的控制代碼。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>使用另一個 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 類別來初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 類別的新執行個體。</summary>
      <param name="cert">初始化此類別的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 類別。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">此憑證發生錯誤。例如：憑證檔案不存在。此憑證無效。此憑證的密碼不正確。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cert" /> 參數的值為 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String)">
      <summary>[安全性關鍵] 使用憑證檔名，初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 類別的新執行個體。</summary>
      <param name="fileName">憑證檔的名稱。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String,System.String)">
      <summary>[安全性關鍵] 使用憑證檔名和用於存取憑證的密碼，初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 類別的新執行個體。</summary>
      <param name="fileName">憑證檔的名稱。</param>
      <param name="password">存取 X.509 憑證資料所需的密碼。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>[安全性關鍵] 使用憑證檔名、用於存取憑證的密碼和金鑰儲存旗標，初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 類別的新執行個體。</summary>
      <param name="fileName">憑證檔的名稱。</param>
      <param name="password">存取 X.509 憑證資料所需的密碼。</param>
      <param name="keyStorageFlags">其中一個列舉值。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromCertFile(System.String)">
      <summary>[安全性關鍵] 從指定憑證檔建立 X.509 第 3 版憑證。</summary>
      <returns>新建立的 X.509 憑證。</returns>
      <param name="filename">要建立 X.509 憑證的來源憑證檔路徑名稱。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.CreateHexString(System.Byte[])">
      <summary>從指定的位元組陣列建立十六進位字串。</summary>
      <returns>十六進位字串。</returns>
      <param name="sArray">位元組陣列。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Object)">
      <summary>比較兩個 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 物件是否相等。</summary>
      <returns>如果目前的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 物件等於 <paramref name="other" /> 參數所指定的物件，則為 true，否則為 false。</returns>
      <param name="obj">要與目前物件比較的物件。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>比較兩個 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 物件是否相等。</summary>
      <returns>如果目前的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 物件等於 <paramref name="other" /> 參數所指定的物件，則為 true，否則為 false。</returns>
      <param name="other">要與目前物件比較的物件。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType)">
      <summary>以其中一個 <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType" /> 值所描述的格式，將目前的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 物件匯出至位元組陣列。</summary>
      <returns>位元組的陣列，表示目前的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 物件。</returns>
      <param name="contentType">一個列舉值，描述如何格式化輸出資料。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="F:System.Security.Cryptography.X509Certificates.X509ContentType.Cert" /> 以外的值已傳遞至 <paramref name="contentType" /> 參數。-或-無法匯出憑證。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)">
      <summary>以其中一個 <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType" /> 值所描述的格式，並使用指定的密碼，將目前的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 物件匯出至位元組陣列。</summary>
      <returns>位元組的陣列，表示目前的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 物件。</returns>
      <param name="contentType">一個列舉值，描述如何格式化輸出資料。</param>
      <param name="password">存取 X.509 憑證資料所需的密碼。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="F:System.Security.Cryptography.X509Certificates.X509ContentType.Cert" /> 以外的值已傳遞至 <paramref name="contentType" /> 參數。-或-無法匯出憑證。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash">
      <summary>將 X.509 第 3 版憑證的雜湊值傳回為位元組陣列。</summary>
      <returns>X.509 憑證的雜湊值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHashString">
      <summary>將 X.509 第 3 版憑證雜湊值傳回為十六進位的字串。</summary>
      <returns>X.509 憑證雜湊值的十六進位字串表示。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetEffectiveDateString">
      <summary>傳回此 X.509 第 3 版憑證的有效日期。</summary>
      <returns>此 X.509 憑證的有效日期。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetExpirationDateString">
      <summary>傳回此 X.509 第 3 版憑證的到期日。</summary>
      <returns>此 X.509 憑證的到期日。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat">
      <summary>傳回此 X.509 第 3 版憑證的格式名稱。</summary>
      <returns>此 X.509 憑證的格式。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode">
      <summary>將 X.509 第 3 版憑證的雜湊程式碼傳回為整數。</summary>
      <returns>做為整數的 X.509 憑證雜湊程式碼。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm">
      <summary>傳回此 X.509 第 3 版憑證的金鑰演算法資訊。</summary>
      <returns>做為字串的此 X.509 憑證金鑰演算法資訊。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">憑證內容無效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters">
      <summary>傳回 X.509 第 3 版憑證的金鑰演算法參數。</summary>
      <returns>做為位元組陣列的 X.509 憑證金鑰演算法參數。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">憑證內容無效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString">
      <summary>傳回 X.509 第 3 版憑證的金鑰演算法參數。</summary>
      <returns>做為十六進位字串的 X.509 憑證金鑰演算法參數。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">憑證內容無效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey">
      <summary>傳回 X.509 第 3 版憑證的公開金鑰。</summary>
      <returns>做為位元組陣列的 X.509 憑證公開金鑰。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">憑證內容無效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKeyString">
      <summary>傳回 X.509 第 3 版憑證的公開金鑰。</summary>
      <returns>做為十六進位字串的 X.509 憑證公開金鑰。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertData">
      <summary>傳回整個 X.509 第 3 版憑證的未經處理資料。</summary>
      <returns>位元組陣列，包含 X.509 憑證資料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertDataString">
      <summary>傳回整個 X.509 第 3 版憑證的未經處理資料。</summary>
      <returns>做為十六進位字串的 X.509 憑證資料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber">
      <summary>傳回 X.509 第 3 版憑證序號。</summary>
      <returns>做為位元組陣列的 X.509 憑證序號。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">憑證內容無效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumberString">
      <summary>傳回 X.509 第 3 版憑證序號。</summary>
      <returns>做為十六進位字串的 X.509 憑證序號。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate.Handle">
      <summary>[安全性關鍵] 取得 Unmanaged PCCERT_CONTEXT 結構所描述之 Microsoft Cryptographic API 憑證內容的控制代碼。</summary>
      <returns>
        <see cref="T:System.IntPtr" /> 結構，表示 PCCERT_CONTEXT 結構。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Import(System.Byte[])">
      <summary>用位元組陣列的資料填入 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 物件。</summary>
      <param name="rawData">位元組陣列，包含來自 X.509 憑證的資料。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rawData" /> 參數為 null。-或-<paramref name="rawData" /> 參數的長度為 0。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>用位元組陣列的資料、密碼和用於判斷如何匯入私密金鑰的旗標，填入 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 物件。</summary>
      <param name="rawData">位元組陣列，包含來自 X.509 憑證的資料。</param>
      <param name="password">存取 X.509 憑證資料所需的密碼。</param>
      <param name="keyStorageFlags">一個列舉值，控制匯入私密金鑰的位置和方式。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rawData" /> 參數為 null。-或-<paramref name="rawData" /> 參數的長度為 0。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Import(System.String)">
      <summary>[安全性關鍵] 用憑證檔的資訊填入 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 物件。</summary>
      <param name="fileName">以字串表示的憑證檔名稱。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>[安全性關鍵] 用憑證檔案的資訊、密碼和 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" /> 值，填入 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 物件。</summary>
      <param name="fileName">以字串表示的憑證檔名稱。</param>
      <param name="password">存取 X.509 憑證資料所需的密碼。</param>
      <param name="keyStorageFlags">一個列舉值，控制匯入私密金鑰的位置和方式。</param>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate.Issuer">
      <summary>取得核發 X.509 第 3 版憑證的憑證授權單位名稱。</summary>
      <returns>核發 X.509 第 3 版憑證的憑證授權單位名稱。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">憑證控制代碼無效。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate.Subject">
      <summary>取得憑證的主旨辨別名稱。</summary>
      <returns>憑證的主旨辨別名稱。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">憑證控制代碼無效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.ToString">
      <summary>傳回目前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 物件的字串表示。</summary>
      <returns>目前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 物件的字串表示。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate.ToString(System.Boolean)">
      <summary>傳回目前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 物件的字串表示，如果指定，則附帶額外資訊。</summary>
      <returns>目前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 物件的字串表示。</returns>
      <param name="fVerbose">若要產生字串表示的詳細資訊形式，則為 true，否則為 false。</param>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ContentType">
      <summary>指定 X.509 憑證的格式。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ContentType.Cert">
      <summary>單一 X.509 憑證。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ContentType.Unknown">
      <summary>未知的 X.509 憑證。  </summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags">
      <summary>定義匯出 X.509 憑證之私密金鑰的位置與方式。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags.DefaultKeySet">
      <summary>使用預設的金鑰設定。使用者金鑰設定通常即是預設金鑰設定。 </summary>
    </member>
    <member name="T:System.Security.Permissions.CodeAccessSecurityAttribute">
      <summary>指定程式碼存取安全性的基底屬性類別。</summary>
    </member>
    <member name="M:System.Security.Permissions.CodeAccessSecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.SecurityAction" />，來初始化 <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" /> 的新執行個體。</summary>
      <param name="action">其中一個列舉值。 </param>
    </member>
    <member name="T:System.Security.Permissions.SecurityAction">
      <summary>指定可以使用宣告式安全性執行的安全性動作。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.LinkDemand">
      <summary>即時呼叫端必須已經授與指定的使用權限。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityAction.RequestMinimum">
      <summary>要求執行程式碼所需最小的使用權限。此動作只能在組件的範圍內使用。</summary>
    </member>
    <member name="T:System.Security.Permissions.SecurityAttribute">
      <summary>指定衍生 <see cref="T:System.Security.Permissions.CodeAccessSecurityAttribute" /> 屬性的宣告式安全性基底屬性類別。</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.SecurityAction" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAttribute" /> 類別的新執行個體。</summary>
      <param name="action">其中一個列舉值。</param>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Action">
      <summary>取得或設定安全性動作。</summary>
      <returns>其中一個列舉值。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityAttribute.Unrestricted">
      <summary>取得或設定值，指出是否已宣告受屬性所保護之資源的完整 (不受限制的) 使用權限。</summary>
      <returns>如果已宣告受保護之資源的完整使用權限，則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionAttribute">
      <summary>允許使用宣告式安全性，將安全性動作套用至程式碼。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.SecurityAction" /> 初始化 <see cref="T:System.Security.Permissions.SecurityPermissionAttribute" /> 類別的新執行個體。</summary>
      <param name="action">其中一個列舉值。</param>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlAppDomain">
      <summary>取得或設定值，指出是否已宣告管理 <see cref="T:System.AppDomain" /> 的使用權限。</summary>
      <returns>如果管理 <see cref="T:System.AppDomain" /> 的使用權限已宣告，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlEvidence">
      <summary>取得或設定值，指出是否已宣告變更或管理辨識項的使用權限。</summary>
      <returns>如果要變更或管理辨識項的使用權限已宣告，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlPolicy">
      <summary>取得或設定值，指出是否已宣告檢視和管理安全性原則的使用權限。</summary>
      <returns>如果要檢視和管理安全性原則的使用權限已宣告，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.ControlThread">
      <summary>取得或設定值，指出是否已宣告管理執行緒的使用權限。</summary>
      <returns>如果管理執行緒的使用權限已宣告，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.Flags">
      <summary>取得或設定 <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /> 列舉中指定的所有使用權限旗標。</summary>
      <returns>使用位元的 OR 運算結合一個或多個列舉值。</returns>
      <exception cref="T:System.ArgumentException">嘗試將此屬性設定為無效的值。如需有效的值，請參閱 <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />。</exception>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.SkipVerification">
      <summary>取得或設定值，指出是否已宣告略過程式碼驗證的使用權限。</summary>
      <returns>如果略過程式碼驗證的使用權限已宣告，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode">
      <summary>取得或設定值，指出是否已宣告呼叫 Unmanaged 程式碼的使用權限。</summary>
      <returns>如果呼叫 Unmanaged 程式碼的使用權限已宣告，則為 true，否則為 false。</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermissionFlag">
      <summary>指定安全性權限物件的存取旗標。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.AllFlags">
      <summary>使用權限的不受限制狀態。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Assertion">
      <summary>確認此程式碼所有的呼叫端都具有此作業必要之使用權限的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.BindingRedirects">
      <summary>在應用程式組態檔中執行明確繫結重新導向的使用權限。這包括已統一的 .NET Framework 組件 (Assembly) 及在 .NET Framework 範例之外找到之組件的重新導向。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain">
      <summary>建立和操作 <see cref="T:System.AppDomain" /> 的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlDomainPolicy">
      <summary>指定定義域原則的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence">
      <summary>提供辨識項的能力，包括更改由 Common Language Runtime 所提供之辨識項的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy">
      <summary>檢視和修改原則的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal">
      <summary>操作主要物件的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread">
      <summary>在執行緒上使用某些進階作業的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Execution">
      <summary>執行程式碼的使用權限。沒有此使用權限，Managed 程式碼就無法執行。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure">
      <summary>將程式碼插入 Common Language Runtime 基礎架構的使用權限，例如，加入遠端內容接收、Envoy 接收和動態接收。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.NoFlags">
      <summary>沒有安全性存取。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration">
      <summary>設定遠端型別和通道的使用權限。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter">
      <summary>提供序列化 (Serialization) 服務的能力。此旗標會由序列化格式子 (Formatter) 使用。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.SkipVerification">
      <summary>略過此組件中程式碼驗證的能力。如果授與此使用權限，則可執行無法驗證的程式碼。</summary>
    </member>
    <member name="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode">
      <summary>呼叫 Unmanaged 程式碼的能力。</summary>
    </member>
    <member name="T:System.Security.Principal.IIdentity">
      <summary>定義識別 (Identity) 物件的基本功能。</summary>
    </member>
    <member name="P:System.Security.Principal.IIdentity.AuthenticationType">
      <summary>取得所使用的驗證 (Authentication) 類型。</summary>
      <returns>用來識別使用者的驗證類型。</returns>
    </member>
    <member name="P:System.Security.Principal.IIdentity.IsAuthenticated">
      <summary>取得值，指出使用者是否已經驗證。</summary>
      <returns>如果使用者已驗證，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Security.Principal.IIdentity.Name">
      <summary>取得目前使用者的名稱。</summary>
      <returns>程式碼正在表示其執行的使用者名稱。</returns>
    </member>
    <member name="T:System.Security.Principal.IPrincipal">
      <summary>定義原則物件的基本功能。</summary>
    </member>
    <member name="P:System.Security.Principal.IPrincipal.Identity">
      <summary>取得目前主體的識別。</summary>
      <returns>與目前原則物件相關聯的 <see cref="T:System.Security.Principal.IIdentity" />。</returns>
    </member>
    <member name="M:System.Security.Principal.IPrincipal.IsInRole(System.String)">
      <summary>判斷目前的主體是否屬於指定的角色。</summary>
      <returns>如果目前的主體是指定角色的成員，則為 true，否則為 false。</returns>
      <param name="role">用來檢查成員資格的角色名稱。</param>
    </member>
    <member name="T:System.Security.Principal.TokenImpersonationLevel">
      <summary>定義安全性模擬等級。安全性模擬等級管理伺服器處理序可以代表用戶端處理序執行動作的程度。</summary>
    </member>
    <member name="F:System.Security.Principal.TokenImpersonationLevel.Anonymous">
      <summary>伺服器處理序無法取得用戶端的識別資訊，也無法模擬用戶端。</summary>
    </member>
    <member name="F:System.Security.Principal.TokenImpersonationLevel.Delegation">
      <summary>伺服器處理序可在遠端系統上模擬用戶端的安全性內容。</summary>
    </member>
    <member name="F:System.Security.Principal.TokenImpersonationLevel.Identification">
      <summary>伺服器處理序可以取得關於用戶端的資訊，例如安全識別項 (Security Identifier) 和權限，但無法模擬用戶端。對於匯出其自己的物件之伺服器 (例如匯出資料表和檢視表的資料庫產品) 而言，這將會很有用。藉由使用所擷取的用戶端安全性資訊，伺服器便可做出存取驗證決策，而不用具備使用其他服務的能力，這些服務使用用戶端的安全性內容。</summary>
    </member>
    <member name="F:System.Security.Principal.TokenImpersonationLevel.Impersonation">
      <summary>伺服器處理序可在其本機系統上模擬用戶端的安全性內容。伺服器無法在遠端系統上模擬用戶端。</summary>
    </member>
    <member name="F:System.Security.Principal.TokenImpersonationLevel.None">
      <summary>未指派模擬等級。</summary>
    </member>
    <member name="T:System.Text.Decoder">
      <summary>將編碼的位元組序列轉換成一組字元。</summary>
    </member>
    <member name="M:System.Text.Decoder.#ctor">
      <summary>初始化 <see cref="T:System.Text.Decoder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>[安全性關鍵] 將編碼的位元組緩衝區轉換成 UTF-16 字元，然後將結果存放在另一個緩衝區內。</summary>
      <param name="bytes">緩衝區的位址，此緩衝區包含要轉換的位元組序列。</param>
      <param name="byteCount">
        <paramref name="bytes" /> 中要轉換的位元組數目。</param>
      <param name="chars">緩衝區的位址，此緩衝區會存放已轉換的字元。</param>
      <param name="charCount">
        <paramref name="chars" /> 中要在轉換時使用的字元數目上限。</param>
      <param name="flush">true 表示沒有其他要轉換的資料，否則為 false。</param>
      <param name="bytesUsed">當此方法傳回時，會包含轉換作業所產生的位元組數目。這個參數會以未初始化的狀態傳遞。</param>
      <param name="charsUsed">當此方法傳回時，會包含 <paramref name="chars" /> 中用於轉換的字元數目。這個參數會以未初始化的狀態傳遞。</param>
      <param name="completed">當這個方法傳回時，如果由 <paramref name="byteCount" /> 所指定的所有字元都已轉換，則會包含 true，否則會包含 false。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>將編碼的位元組陣列轉換成 Unicode 字元，然後將結果存放在位元組陣列中。</summary>
      <param name="bytes">要轉換的位元組陣列。</param>
      <param name="byteIndex">要轉換的 <paramref name="bytes" /> 第 1 個元素以零為起始的索引。</param>
      <param name="byteCount">要轉換的 <paramref name="bytes" /> 元素數目。</param>
      <param name="chars">存放已轉換字元的陣列。</param>
      <param name="charIndex">存放資料的第一個 <paramref name="chars" /> 項目之以零起始的索引。</param>
      <param name="charCount">
        <paramref name="chars" /> 中要在轉換時使用的元素數目上限。</param>
      <param name="flush">true 表示沒有其他要轉換的資料，否則為 false。</param>
      <param name="bytesUsed">當此方法傳回時，會包含轉換作業中所用的位元組數目。這個參數會以未初始化的狀態傳遞。</param>
      <param name="charsUsed">當此方法傳回時，會包含轉換作業所產生的 <paramref name="chars" /> 的字元數。這個參數會以未初始化的狀態傳遞。</param>
      <param name="completed">當這個方法傳回時，如果由 <paramref name="byteCount" /> 所指定的所有字元都已轉換，則會包含 true，否則會包含 false。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 或 <paramref name="bytes" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" />、<paramref name="byteIndex" /> 或 <paramref name="byteCount" /> 小於零。-或-<paramref name="chars" /> 的長度減去 <paramref name="charIndex" /> 小於 <paramref name="charCount" />。-或-<paramref name="bytes" /> 的長度減去 <paramref name="byteIndex" /> 小於 <paramref name="byteCount" />。</exception>
      <exception cref="T:System.ArgumentException">輸出緩衝區太小，無法容納任何已轉換的輸入。輸出緩衝區應該大於或等於 <see cref="Overload:System.Text.Decoder.GetCharCount" /> 方法所指示的大小。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (更完整的說明請參閱「[e9db2395-a9ca-4dea-9024-c4d323dc53c0]」)。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
      <summary>[安全性關鍵] 在衍生類別中覆寫時，計算從指定的位元組指標開始，解碼位元組序列所產生的字元數目。參數會指示，在計算之後是否要清除解碼器的內部狀態。</summary>
      <returns>解碼指定位元組序列及內部緩衝區內任何位元組所產生的字元數目。</returns>
      <param name="bytes">要解碼的第 1 個位元組指標。</param>
      <param name="count">要解碼的位元組數。</param>
      <param name="flush">true 表示要在計算之後模擬清除編碼器的內部狀態，否則為 false。</param>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，計算從指定的位元組陣列解碼位元組序列所產生的字元數目。</summary>
      <returns>解碼指定位元組序列及內部緩衝區內任何位元組所產生的字元數目。</returns>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="index">要解碼的第 1 個位元組以零為起始的索引。</param>
      <param name="count">要解碼的位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。-或-<paramref name="index" /> 和 <paramref name="count" /> 無法代表 <paramref name="bytes" /> 中有效的範圍。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (更完整的說明請參閱「[e9db2395-a9ca-4dea-9024-c4d323dc53c0]」)。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>在衍生類別中覆寫時，計算從指定的位元組陣列解碼位元組序列所產生的字元數目。參數會指示，在計算之後是否要清除解碼器的內部狀態。</summary>
      <returns>解碼指定位元組序列及內部緩衝區內任何位元組所產生的字元數目。</returns>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="index">要解碼的第 1 個位元組以零為起始的索引。</param>
      <param name="count">要解碼的位元組數。</param>
      <param name="flush">true 表示要在計算之後模擬清除編碼器的內部狀態，否則為 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。-或-<paramref name="index" /> 和 <paramref name="count" /> 無法代表 <paramref name="bytes" /> 中有效的範圍。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (更完整的說明請參閱「[e9db2395-a9ca-4dea-9024-c4d323dc53c0]」)。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
      <summary>[安全性關鍵] 在衍生類別中覆寫時，會將由指定位元組指標開始的位元組序列以及內部緩衝區內的任何位元組，解碼成一組字元 (會從指定的字元指標開始存放這些字元)。參數會指示，在轉換之後是否要清除解碼器的內部狀態。</summary>
      <returns>
        <paramref name="chars" /> 參數所指示位置上寫入的實際字元數目。</returns>
      <param name="bytes">要解碼的第 1 個位元組指標。</param>
      <param name="byteCount">要解碼的位元組數。</param>
      <param name="chars">開始寫入產生的一組字元之位置指標。</param>
      <param name="charCount">要寫入的最大字元數。</param>
      <param name="flush">true 表示要在轉換之後清除解碼器的內部狀態，否則為 false。</param>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>在衍生類別中覆寫時，將指定位元組陣列中的位元組序列以及內部緩衝區內的任何位元組，解碼成指定的字元陣列。</summary>
      <returns>實際寫入 <paramref name="chars" /> 的字元數。</returns>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="byteIndex">要解碼的第 1 個位元組以零為起始的索引。</param>
      <param name="byteCount">要解碼的位元組數。</param>
      <param name="chars">包含產生的一組字元之字元陣列。</param>
      <param name="charIndex">要開始寫入字元結果集之以零為起始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 null。-或-<paramref name="chars" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小於零。-或-<paramref name="byteindex" /> 和 <paramref name="byteCount" /> 無法代表 <paramref name="bytes" /> 中有效的範圍。-或-<paramref name="charIndex" /> 在 <paramref name="chars" /> 中不是有效的索引。</exception>
      <exception cref="T:System.ArgumentException">從 <paramref name="charIndex" /> 到陣列結尾處，<paramref name="chars" /> 沒有足夠的容量容納結果字元。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (更完整的說明請參閱「[e9db2395-a9ca-4dea-9024-c4d323dc53c0]」)。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
      <summary>在衍生類別中覆寫時，將指定位元組陣列中的位元組序列以及內部緩衝區內的任何位元組，解碼成指定的字元陣列。參數會指示，在轉換之後是否要清除解碼器的內部狀態。</summary>
      <returns>實際寫入 <paramref name="chars" /> 陣列的字元數。</returns>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="byteIndex">要解碼的第 1 個位元組以零為起始的索引。</param>
      <param name="byteCount">要解碼的位元組數。</param>
      <param name="chars">包含產生的一組字元之字元陣列。</param>
      <param name="charIndex">要開始寫入字元結果集之以零為起始的索引。</param>
      <param name="flush">true 表示要在轉換之後清除解碼器的內部狀態，否則為 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 null。-或-<paramref name="chars" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小於零。-或-<paramref name="byteindex" /> 和 <paramref name="byteCount" /> 無法代表 <paramref name="bytes" /> 中有效的範圍。-或-<paramref name="charIndex" /> 在 <paramref name="chars" /> 中不是有效的索引。</exception>
      <exception cref="T:System.ArgumentException">從 <paramref name="charIndex" /> 到陣列結尾處，<paramref name="chars" /> 沒有足夠的容量容納結果字元。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援 (更完整的說明請參閱「[e9db2395-a9ca-4dea-9024-c4d323dc53c0]」)。</exception>
    </member>
    <member name="M:System.Text.Decoder.Reset">
      <summary>在衍生類別中覆寫時，將解碼器設定回其初始狀態。</summary>
    </member>
    <member name="T:System.Text.DecoderFallbackException">
      <summary>當解碼器後援作業失敗時，所擲回的例外狀況。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor">
      <summary>初始化 <see cref="T:System.Text.DecoderFallbackException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Text.DecoderFallbackException" /> 類別的新執行個體。參數會指定錯誤訊息。</summary>
      <param name="message">錯誤訊息。</param>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>初始化 <see cref="T:System.Text.DecoderFallbackException" /> 類別的新執行個體。參數會指定錯誤訊息、所要解碼的位元組陣列，以及無法解碼的位元組索引。</summary>
      <param name="message">錯誤訊息。</param>
      <param name="bytesUnknown">輸入位元組陣列。</param>
      <param name="index">
        <paramref name="bytesUnknown" /> 中無法解碼的位元組的索引位置。</param>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Text.DecoderFallbackException" /> 類別的新執行個體。參數會指定錯誤訊息，以及造成此例外狀況的內部例外狀況。</summary>
      <param name="message">錯誤訊息。</param>
      <param name="innerException">造成此例外狀況的例外狀況。</param>
    </member>
    <member name="P:System.Text.DecoderFallbackException.BytesUnknown">
      <summary>取得造成例外狀況的輸入位元組序列。</summary>
      <returns>無法解碼的輸入位元組陣列。</returns>
    </member>
    <member name="P:System.Text.DecoderFallbackException.Index">
      <summary>取得位元組的輸入位元組序列中造成例外狀況的索引位置。</summary>
      <returns>輸入位元組陣列中可成功解碼的最後 1 個位元組的索引位置。索引位置以零為起始。如果第 1 個位元組無法解碼，此方法會傳回 -1。</returns>
    </member>
    <member name="T:System.Text.Encoder">
      <summary>將一組字元轉換成位元組序列。</summary>
    </member>
    <member name="M:System.Text.Encoder.#ctor">
      <summary>初始化 <see cref="T:System.Text.Encoder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>[安全性關鍵] 將 Unicode 字元的緩衝區轉換為編碼的位元組序列，然後將結果存放在另一個緩衝區內。</summary>
      <param name="chars">要轉換的 UTF-16 編碼字元字串的位址。</param>
      <param name="charCount">
        <paramref name="chars" /> 中要轉換的字元數目。</param>
      <param name="bytes">緩衝區的位址，此緩衝區會存放已轉換的位元組。</param>
      <param name="byteCount">
        <paramref name="bytes" /> 中要在轉換時使用的位元組數目上限。</param>
      <param name="flush">true 表示沒有其他要轉換的資料，否則為 false。</param>
      <param name="charsUsed">當此方法傳回時，會包含 <paramref name="chars" /> 中用於轉換的字元數目。這個參數會以未初始化的狀態傳遞。</param>
      <param name="bytesUsed">當此方法傳回時，會包含轉換作業中所用的位元組數目。這個參數會以未初始化的狀態傳遞。</param>
      <param name="completed">當這個方法傳回時，如果由 <paramref name="charCount" /> 所指定的所有字元都已轉換，則會包含 true，否則會包含 false。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>將 Unicode 字元陣列轉換成編碼的位元組序列，然後將結果存放在位元組陣列中。</summary>
      <param name="chars">要進行轉換的字元陣列。</param>
      <param name="charIndex">要轉換的 <paramref name="chars" /> 第 1 個元素以零為起始的索引。</param>
      <param name="charCount">要轉換的 <paramref name="chars" /> 元素數目。</param>
      <param name="bytes">存放已轉換位元組的陣列。</param>
      <param name="byteIndex">存放資料的第一個 <paramref name="bytes" /> 項目之以零起始的索引。</param>
      <param name="byteCount">
        <paramref name="bytes" /> 中要在轉換時使用的元素數目上限。</param>
      <param name="flush">true 表示沒有其他要轉換的資料，否則為 false。</param>
      <param name="charsUsed">當此方法傳回時，會包含 <paramref name="chars" /> 中用於轉換的字元數目。這個參數會以未初始化的狀態傳遞。</param>
      <param name="bytesUsed">當此方法傳回時，會包含轉換作業所產生的位元組數目。這個參數會以未初始化的狀態傳遞。</param>
      <param name="completed">當這個方法傳回時，如果由 <paramref name="charCount" /> 所指定的所有字元都已轉換，則會包含 true，否則會包含 false。這個參數會以未初始化的狀態傳遞。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 或 <paramref name="bytes" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" />、<paramref name="byteIndex" /> 或 <paramref name="byteCount" /> 小於零。-或-<paramref name="chars" /> 的長度減去 <paramref name="charIndex" /> 小於 <paramref name="charCount" />。-或-<paramref name="bytes" /> 的長度減去 <paramref name="byteIndex" /> 小於 <paramref name="byteCount" />。</exception>
      <exception cref="T:System.ArgumentException">輸出緩衝區太小，無法容納任何已轉換的輸入。輸出緩衝區應該大於或等於 <see cref="Overload:System.Text.Encoder.GetByteCount" /> 方法所指示的大小。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
      <summary>[安全性關鍵] 在衍生類別中覆寫時，計算從指定的字元指標開始，編碼一組字元所產生的位元組數目。參數會指示，在計算之後是否要清除編碼器的內部狀態。</summary>
      <returns>編碼指定的字元及內部緩衝區內任何字元所產生的位元組數目。</returns>
      <param name="chars">要編碼的第 1 個字元指標。</param>
      <param name="count">要編碼的字元數。</param>
      <param name="flush">true 表示要在計算之後模擬清除編碼器的內部狀態，否則為 false。</param>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
      <summary>在衍生類別中覆寫時，計算從指定的字元陣列編碼一組字元所產生的位元組數目。參數會指示，在計算之後是否要清除編碼器的內部狀態。</summary>
      <returns>編碼指定的字元及內部緩衝區內任何字元所產生的位元組數目。</returns>
      <param name="chars">包含要解碼之一組字元的字元陣列。</param>
      <param name="index">要編碼的第 1 個字元之以零為起始的索引。</param>
      <param name="count">要編碼的字元數。</param>
      <param name="flush">true 表示要在計算之後模擬清除編碼器的內部狀態，否則為 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。-或-<paramref name="index" /> 和 <paramref name="count" /> 無法代表 <paramref name="chars" /> 中有效的範圍。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
      <summary>[安全性關鍵] 在衍生類別中覆寫時，將以指定字元指標開始的一組字元以及內部緩衝區內的任何字元，編碼成位元組序列 (會從指定的位元組指標開始存放此序列)。參數會指示，在轉換之後是否要清除編碼器的內部狀態。</summary>
      <returns>
        <paramref name="bytes" /> 參數所指示位置上寫入的實際位元組數目。</returns>
      <param name="chars">要編碼的第 1 個字元指標。</param>
      <param name="charCount">要編碼的字元數。</param>
      <param name="bytes">開始寫入結果位元組序列的位置指標。</param>
      <param name="byteCount">寫入的最大位元組數。</param>
      <param name="flush">true 表示要在轉換之後清除編碼器的內部狀態，否則為 false。</param>
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
      <summary>在衍生類別中覆寫時，將指定字元陣列中的一組字元以及內部緩衝區內的任何字元，編碼成指定的位元組陣列。參數會指示，在轉換之後是否要清除編碼器的內部狀態。</summary>
      <returns>寫入 <paramref name="bytes" /> 的實際位元組數。</returns>
      <param name="chars">包含要解碼之一組字元的字元陣列。</param>
      <param name="charIndex">要編碼的第 1 個字元之以零為起始的索引。</param>
      <param name="charCount">要編碼的字元數。</param>
      <param name="bytes">要包含結果位元組序列的位元組陣列。</param>
      <param name="byteIndex">要開始寫入位元組結果序列之以零為起始的索引。</param>
      <param name="flush">true 表示要在轉換之後清除編碼器的內部狀態，否則為 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 null。-或-<paramref name="bytes" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小於零。-或-<paramref name="charIndex" /> 和 <paramref name="charCount" /> 無法代表 <paramref name="chars" /> 中有效的範圍。-或-<paramref name="byteIndex" /> 在 <paramref name="bytes" /> 中不是有效的索引。</exception>
      <exception cref="T:System.ArgumentException">從 <paramref name="byteIndex" /> 到陣列結尾處，<paramref name="bytes" /> 沒有足夠的容量容納結果位元組。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="T:System.Text.EncoderFallbackException">
      <summary>當編碼器後援作業失敗時，所擲回的例外狀況。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor">
      <summary>初始化 <see cref="T:System.Text.EncoderFallbackException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Text.EncoderFallbackException" /> 類別的新執行個體。參數會指定錯誤訊息。</summary>
      <param name="message">錯誤訊息。</param>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Text.EncoderFallbackException" /> 類別的新執行個體。參數會指定錯誤訊息，以及造成此例外狀況的內部例外狀況。</summary>
      <param name="message">錯誤訊息。</param>
      <param name="innerException">造成此例外狀況的例外狀況。</param>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknown">
      <summary>取得造成例外狀況的輸入字元。</summary>
      <returns>無法編碼的字元。</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknownHigh">
      <summary>取得造成例外狀況之 Surrogate 字組的高元件字元。</summary>
      <returns>無法編碼之 Surrogate 字組的高元件字元。</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknownLow">
      <summary>取得造成例外狀況之 Surrogate 字組的低元件字元。</summary>
      <returns>無法編碼之 Surrogate 字組的低元件字元。</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.Index">
      <summary>取得字元的輸入緩衝區中造成例外狀況的索引位置。</summary>
      <returns>取得無法編碼之字元輸入緩衝區中的索引位置。</returns>
    </member>
    <member name="T:System.Text.Encoding">
      <summary>表示字元編碼方式。</summary>
    </member>
    <member name="M:System.Text.Encoding.#ctor">
      <summary>初始化 <see cref="T:System.Text.Encoding" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Text.Encoding.BigEndianUnicode">
      <summary>以位元組由大到小位元組順序取得 UTF-16 格式的編碼方式。</summary>
      <returns>使用位元組由大到小位元組順序之 UTF-16 格式的編碼方式。</returns>
    </member>
    <member name="M:System.Text.Encoding.Clone">
      <summary>在衍生類別中覆寫時，會建立目前 <see cref="T:System.Text.Encoding" /> 物件的淺層複本。</summary>
      <returns>目前 <see cref="T:System.Text.Encoding" /> 物件的複本。</returns>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
      <summary>將整個位元組陣列從一種編碼方式轉換成另一種編碼方式。</summary>
      <returns>位元組陣列，包含將 <paramref name="bytes" /> 從 <paramref name="srcEncoding" /> 轉換成 <paramref name="dstEncoding" /> 的結果。</returns>
      <param name="srcEncoding">
        <paramref name="bytes" /> 的編碼格式。</param>
      <param name="dstEncoding">目標編碼格式。</param>
      <param name="bytes">要轉換的位元組。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="srcEncoding" /> 為 null。-或-<paramref name="dstEncoding" /> 為 null。-或-<paramref name="bytes" /> 為 null。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
      <summary>將位元組陣列中的某一位元組範圍由一種編碼方式轉換成另一種編碼方式。</summary>
      <returns>
        <see cref="T:System.Byte" /> 型別的陣列，包含將 <paramref name="bytes" /> 中的某個位元組範圍從 <paramref name="srcEncoding" /> 轉換成 <paramref name="dstEncoding" /> 的結果。</returns>
      <param name="srcEncoding">來源陣列 <paramref name="bytes" /> 的編碼方式。</param>
      <param name="dstEncoding">輸出陣列的編碼方式。</param>
      <param name="bytes">要進行轉換的位元組陣列。</param>
      <param name="index">要轉換的 <paramref name="bytes" /> 第 1 個元素以零為起始的索引。</param>
      <param name="count">要進行轉換的位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="srcEncoding" /> 為 null。-或-<paramref name="dstEncoding" /> 為 null。-或-<paramref name="bytes" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 和 <paramref name="count" /> 不會指定位元組陣列中的有效範圍。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.Encoding.Equals(System.Object)">
      <summary>判斷指定的 <see cref="T:System.Object" /> 是否等於目前的執行個體。</summary>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.Text.Encoding" /> 的執行個體，並且等於目前的執行個體，則為 true，否則為 false。</returns>
      <param name="value">要與目前執行個體比較的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[])">
      <summary>在衍生類別中覆寫時，計算編碼指定字元陣列中所有字元所產生的位元組數目。</summary>
      <returns>編碼指定字元陣列中所有字元所產生的位元組數目。</returns>
      <param name="chars">字元陣列，包含要編碼的字元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 null。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，計算從指定的字元陣列編碼一組字元所產生的位元組數目。</summary>
      <returns>編碼指定字元所產生的位元組數。</returns>
      <param name="chars">包含要解碼之一組字元的字元陣列。</param>
      <param name="index">要編碼的第 1 個字元之以零為起始的索引。</param>
      <param name="count">要編碼的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。-或-<paramref name="index" /> 和 <paramref name="count" /> 無法代表 <paramref name="chars" /> 中有效的範圍。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.String)">
      <summary>在衍生類別中覆寫時，計算編碼指定的字串字元所產生的位元組數目。</summary>
      <returns>編碼指定字元所產生的位元組數。</returns>
      <param name="s">字串，包含要編碼的一組字元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
      <summary>[安全性關鍵] 在衍生類別中覆寫時，從指定字元指標開始將一組字元編碼成位元組序列 (會從指定的位元組指標開始存放這些位元組)。</summary>
      <returns>
        <paramref name="bytes" /> 參數所指示位置上寫入的實際位元組數目。</returns>
      <param name="chars">要編碼的第 1 個字元指標。</param>
      <param name="charCount">要編碼的字元數。</param>
      <param name="bytes">開始寫入結果位元組序列的位置指標。</param>
      <param name="byteCount">寫入的最大位元組數。</param>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[])">
      <summary>在衍生類別中覆寫時，將指定字元陣列中的所有字元編碼成位元組序列。</summary>
      <returns>位元組陣列，包含將指定之一組字元編碼之後的結果。</returns>
      <param name="chars">字元陣列，包含要編碼的字元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 null。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，將指定字元陣列中的一組字元編碼成位元組序列。</summary>
      <returns>位元組陣列，包含將指定之一組字元編碼之後的結果。</returns>
      <param name="chars">包含要解碼之一組字元的字元陣列。</param>
      <param name="index">要編碼的第 1 個字元之以零為起始的索引。</param>
      <param name="count">要編碼的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。-或-<paramref name="index" /> 和 <paramref name="count" /> 無法代表 <paramref name="chars" /> 中有效的範圍。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>在衍生類別中覆寫時，將指定字元陣列中的一組字元編碼成指定的位元組陣列。</summary>
      <returns>寫入 <paramref name="bytes" /> 的實際位元組數。</returns>
      <param name="chars">包含要解碼之一組字元的字元陣列。</param>
      <param name="charIndex">要編碼的第 1 個字元之以零為起始的索引。</param>
      <param name="charCount">要編碼的字元數。</param>
      <param name="bytes">要包含結果位元組序列的位元組陣列。</param>
      <param name="byteIndex">要開始寫入位元組結果序列之以零為起始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 null。-或-<paramref name="bytes" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小於零。-或-<paramref name="charIndex" /> 和 <paramref name="charCount" /> 無法代表 <paramref name="chars" /> 中有效的範圍。-或-<paramref name="byteIndex" /> 在 <paramref name="bytes" /> 中不是有效的索引。</exception>
      <exception cref="T:System.ArgumentException">從 <paramref name="byteIndex" /> 到陣列結尾處，<paramref name="bytes" /> 沒有足夠的容量容納結果位元組。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String)">
      <summary>在衍生類別中覆寫時，將指定字串中的所有字元編碼成位元組序列。</summary>
      <returns>位元組陣列，包含將指定之一組字元編碼之後的結果。</returns>
      <param name="s">字串，包含要編碼的字元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>在衍生類別中覆寫時，將指定字串中的一組字元編碼成指定的位元組陣列。</summary>
      <returns>寫入 <paramref name="bytes" /> 的實際位元組數。</returns>
      <param name="s">字串，包含要編碼的一組字元。</param>
      <param name="charIndex">要編碼的第 1 個字元之以零為起始的索引。</param>
      <param name="charCount">要編碼的字元數。</param>
      <param name="bytes">要包含結果位元組序列的位元組陣列。</param>
      <param name="byteIndex">要開始寫入位元組結果序列之以零為起始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。-或-<paramref name="bytes" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小於零。-或-<paramref name="charIndex" /> 和 <paramref name="charCount" /> 無法代表 <paramref name="chars" /> 中有效的範圍。-或-<paramref name="byteIndex" /> 在 <paramref name="bytes" /> 中不是有效的索引。</exception>
      <exception cref="T:System.ArgumentException">從 <paramref name="byteIndex" /> 到陣列結尾處，<paramref name="bytes" /> 沒有足夠的容量容納結果位元組。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[])">
      <summary>在衍生類別中覆寫時，計算解碼指定位元組陣列中所有位元組所產生的字元數目。</summary>
      <returns>解碼指定位元組序列所產生的字元數。</returns>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 null。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，計算從指定的位元組陣列解碼位元組序列所產生的字元數目。</summary>
      <returns>解碼指定位元組序列所產生的字元數。</returns>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="index">要解碼的第 1 個位元組以零為起始的索引。</param>
      <param name="count">要解碼的位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。-或-<paramref name="index" /> 和 <paramref name="count" /> 無法代表 <paramref name="bytes" /> 中有效的範圍。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[])">
      <summary>在衍生類別中覆寫時，將指定位元組陣列中的所有位元組解碼成一組字元。</summary>
      <returns>字元陣列，包含解碼指定位元組序列的結果。</returns>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 null。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，將指定位元組陣列中的位元組序列解碼成一組字元。</summary>
      <returns>字元陣列，包含解碼指定位元組序列的結果。</returns>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="index">要解碼的第 1 個位元組以零為起始的索引。</param>
      <param name="count">要解碼的位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。-或-<paramref name="index" /> 和 <paramref name="count" /> 無法代表 <paramref name="bytes" /> 中有效的範圍。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>在衍生類別中覆寫時，將指定位元組陣列中的位元組序列解碼成指定的字元陣列。</summary>
      <returns>實際寫入 <paramref name="chars" /> 的字元數。</returns>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="byteIndex">要解碼的第 1 個位元組以零為起始的索引。</param>
      <param name="byteCount">要解碼的位元組數。</param>
      <param name="chars">包含產生的一組字元之字元陣列。</param>
      <param name="charIndex">要開始寫入字元結果集之以零為起始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 null。-或-<paramref name="chars" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小於零。-或-<paramref name="byteindex" /> 和 <paramref name="byteCount" /> 無法代表 <paramref name="bytes" /> 中有效的範圍。-或-<paramref name="charIndex" /> 在 <paramref name="chars" /> 中不是有效的索引。</exception>
      <exception cref="T:System.ArgumentException">從 <paramref name="charIndex" /> 到陣列結尾處，<paramref name="chars" /> 沒有足夠的容量容納結果字元。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetDecoder">
      <summary>在衍生類別中覆寫時，取得會將編碼的位元組序列轉換成字元序列的解碼器。</summary>
      <returns>
        <see cref="T:System.Text.Decoder" />，會將編碼的位元組序列轉換成字元序列。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetEncoder">
      <summary>在衍生類別中覆寫時，取得會將 Unicode 字元序列轉換成編碼的位元組序列的編碼器。</summary>
      <returns>
        <see cref="T:System.Text.Encoder" />，會將 Unicode 字元序列轉換成編碼的位元組序列。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.String)">
      <summary>傳回與指定之名稱相關聯的編碼方式。</summary>
      <returns>指定名稱相關的物件。</returns>
      <param name="name">慣用編碼方式的名稱。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效編碼方式的名稱。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetHashCode">
      <summary>傳回目前執行個體的雜湊程式碼。</summary>
      <returns>目前執行個體的雜湊程式碼。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
      <summary>在衍生類別中覆寫時，計算編碼指定的字元數所產生的最大位元組數目。</summary>
      <returns>編碼指定字元數所產生的最大位元組數。</returns>
      <param name="charCount">要編碼的字元數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 小於零。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
      <summary>在衍生類別中覆寫時，計算解碼指定的位元組數目所產生的最大字元數目。</summary>
      <returns>解碼指定位元組數所產生的最大字元數。</returns>
      <param name="byteCount">要解碼的位元組數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> 小於零。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetPreamble">
      <summary>在衍生類別中覆寫時，傳回可指定所用編碼方式的位元組序列。</summary>
      <returns>位元組陣列，包含可指定所用編碼方式的位元組序列。-或-如果不需要前序編碼，則位元組陣列的長度為零。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>在衍生類別中覆寫時，將指定位元組陣列中的位元組序列解碼成字串。</summary>
      <returns>
        <see cref="T:System.String" />，包含將指定之位元組序列解碼的結果。</returns>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="index">要解碼的第 1 個位元組以零為起始的索引。</param>
      <param name="count">要解碼的位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。-或-<paramref name="index" /> 和 <paramref name="count" /> 無法代表 <paramref name="bytes" /> 中有效的範圍。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援。</exception>
    </member>
    <member name="P:System.Text.Encoding.Unicode">
      <summary>以位元組由小到大位元組順序取得 UTF-16 格式的編碼方式。</summary>
      <returns>UTF-16 格式的 <see cref="T:System.Text.Encoding" />，使用位元組由小到大位元組順序。</returns>
    </member>
    <member name="P:System.Text.Encoding.UTF8">
      <summary>取得 UTF-8 格式的編碼方式。</summary>
      <returns>UTF-8 格式的編碼方式。</returns>
    </member>
    <member name="P:System.Text.Encoding.WebName">
      <summary>在衍生類別中覆寫時，若要取得目前的編碼方式，請取得向 Internet Assigned Numbers Authority (IANA) 註冊的名稱。</summary>
      <returns>目前 <see cref="T:System.Text.Encoding" /> 的 IANA 名稱。</returns>
    </member>
    <member name="T:System.Text.StringBuilder">
      <summary>表示可變動的字元字串。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Text.StringBuilder" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32)">
      <summary>使用指定的容量初始化 <see cref="T:System.Text.StringBuilder" /> 類別的新執行個體。</summary>
      <param name="capacity">此執行個體建議的起始大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Text.StringBuilder" /> 類別的新執行個體，將從指定的容量開始並且可以增加至指定的最大值。</summary>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> 建議的起始大小。</param>
      <param name="maxCapacity">目前字串可以包含的最大字元數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxCapacity" /> 小於一、<paramref name="capacity" /> 小於零或 <paramref name="capacity" /> 大於 <paramref name="maxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String)">
      <summary>使用指定的字串初始化 <see cref="T:System.Text.StringBuilder" /> 類別的新執行個體。</summary>
      <param name="value">用來初始化執行個體值的字串。如果 <paramref name="value" /> 為 null，新的 <see cref="T:System.Text.StringBuilder" /> 將包含空字串 (即包含 <see cref="F:System.String.Empty" />)。</param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32)">
      <summary>使用指定的字串和容量，來初始化 <see cref="T:System.Text.StringBuilder" /> 類別的新執行個體。</summary>
      <param name="value">用來初始化執行個體值的字串。如果 <paramref name="value" /> 為 null，新的 <see cref="T:System.Text.StringBuilder" /> 將包含空字串 (即包含 <see cref="F:System.String.Empty" />)。</param>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> 建議的起始大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>以指定的子字串和容量初始化 <see cref="T:System.Text.StringBuilder" /> 類別的新執行個體。</summary>
      <param name="value">字串，包含用來初始化此執行個體值的子字串。如果 <paramref name="value" /> 為 null，新的 <see cref="T:System.Text.StringBuilder" /> 將包含空字串 (即包含 <see cref="F:System.String.Empty" />)。</param>
      <param name="startIndex">在 <paramref name="value" /> 內子字串開始的位置。</param>
      <param name="length">子字串中的字元數。</param>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> 建議的起始大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。-或-<paramref name="startIndex" /> 加上 <paramref name="length" /> 不是 <paramref name="value" /> 內的位置。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Boolean)">
      <summary>將指定的布林 (Boolean) 值其字串表示附加至此執行個體的尾端。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">要附加的布林值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Byte)">
      <summary>將指定的 8 位元不帶正負號的整數其字串表示附加至此執行個體的尾端。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char)">
      <summary>將指定的 Unicode 字元其字串表示附加至此執行個體的尾端。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">要附加的 Unicode 字元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char,System.Int32)">
      <summary>將 Unicode 字元其字串表示的指定複本數附加至此執行個體的尾端。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">要附加的字元。</param>
      <param name="repeatCount">要附加 <paramref name="value" /> 的次數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="repeatCount" /> 小於零。-或-加大這個執行個體的值會超過最大容量。</exception>
      <exception cref="T:System.OutOfMemoryException">記憶體不足。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[])">
      <summary>將指定陣列中的 Unicode 字元的字串表示附加至此執行個體的尾端。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">要附加的字元陣列。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)">
      <summary>將 Unicode 字元其指定子陣列的字串表示附加至此執行個體的尾端。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">字元陣列。</param>
      <param name="startIndex">
        <paramref name="value" /> 中的起始位置。</param>
      <param name="charCount">要附加的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 是 null，而 <paramref name="startIndex" /> 和 <paramref name="charCount" /> 不是零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 小於零。-或-<paramref name="startIndex" /> 小於零。-或-<paramref name="startIndex" /> + <paramref name="charCount" /> 小於 <paramref name="value" /> 的長度。-或-加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Decimal)">
      <summary>將指定的小數位數其字串表示附加至這個執行個體。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Double)">
      <summary>將指定的雙精確度浮點數其字串表示附加至此執行個體的尾端。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int16)">
      <summary>將指定的 16 位元帶正負號的整數其字串表示附加至此執行個體的尾端。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int32)">
      <summary>將指定的 32 位元帶正負號的整數其字串表示附加至此執行個體的尾端。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int64)">
      <summary>將指定的 64 位元帶正負號的整數其字串表示附加至此執行個體的尾端。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Object)">
      <summary>將指定物件的字串表示附加至這個執行個體的尾端。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">要附加的物件。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.SByte)">
      <summary>將指定的 8 位元帶正負號的整數其字串表示附加至此執行個體的尾端。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Single)">
      <summary>將指定的單精確度浮點數其字串表示附加至此執行個體的尾端。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String)">
      <summary>將指定字串的複本附加至此執行個體的尾端。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">要附加的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)">
      <summary>將指定子字串的複本附加至此執行個體的尾端。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">
        <see cref="T:System.String" />，包含要附加的子字串。</param>
      <param name="startIndex">
        <paramref name="value" /> 中子字串的開始位置。</param>
      <param name="count">
        <paramref name="value" /> 中要附加的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 是 null，而 <paramref name="startIndex" /> 和 <paramref name="count" /> 不是零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小於零-或-<paramref name="startIndex" /> 小於零-或-<paramref name="startIndex" /> + <paramref name="count" /> 大於 <paramref name="value" /> 的長度。-或-加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt16)">
      <summary>將指定的 16 位元不帶正負號的整數其字串表示附加至此執行個體的尾端。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt32)">
      <summary>將指定的 32 位元不帶正負號的整數其字串表示附加至此執行個體的尾端。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt64)">
      <summary>將指定的 64 位元不帶正負號的整數其字串表示附加至此執行個體的尾端。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">要附加的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>將處理複合格式字串所傳回的字串 (其中包含零或更多的格式項目) 附加至這個執行個體。每一個格式項目會由參數陣列中對應之引數的字串表示，使用所指定的格式提供者取代。</summary>
      <returns>完成附加作業之後，此執行個體的參考。在附加作業之後，此執行個體會包含此作業之前已存在的所有資料，並後置有 <paramref name="format" /> 的複本，其中的每一個格式項目都會由對應物件引數的字串表示所取代。</returns>
      <param name="provider">物件，提供文化特性特定格式資訊。</param>
      <param name="format">複合格式字串 (請參閱「備註」)。</param>
      <param name="args">要格式化的物件陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。-或-格式項目的索引小於 0 (零)，或者大於或等於 <paramref name="args" /> 陣列的長度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">展開後字串的長度會超過此執行個體的最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])">
      <summary>將處理複合格式字串所傳回的字串 (其中包含零或更多的格式項目) 附加至這個執行個體。每一個格式項目會由參數陣列中對應之引數的字串表示所取代。</summary>
      <returns>附加 <paramref name="format" /> 的執行個體參考。<paramref name="format" /> 中的每一個格式項目會由對應之物件引數的字串表示所取代。</returns>
      <param name="format">複合格式字串 (請參閱「備註」)。</param>
      <param name="args">要格式化的物件陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 或 <paramref name="args" /> 為 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 無效。-或-格式項目的索引小於 0 (零)，或者大於或等於 <paramref name="args" /> 陣列的長度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">展開後字串的長度會超過此執行個體的最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine">
      <summary>將預設行結束字元附加至目前 <see cref="T:System.Text.StringBuilder" /> 物件的尾端。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine(System.String)">
      <summary>將指定字串及預設行結束字元的複本附加至目前的 <see cref="T:System.Text.StringBuilder" /> 物件。</summary>
      <returns>完成附加作業之後，此執行個體的參考。</returns>
      <param name="value">要附加的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="P:System.Text.StringBuilder.Capacity">
      <summary>取得或設定由目前執行個體配置的記憶體可以包含的最大字元數。</summary>
      <returns>目前執行個體配置的記憶體可以包含的最大字元數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">設定作業指定的值小於這個執行個體的目前長度。-或-設定作業指定的值大於最大容量。</exception>
    </member>
    <member name="P:System.Text.StringBuilder.Chars(System.Int32)">
      <summary>取得或設定此執行個體中指定字元位置的字元。</summary>
      <returns>位置 <paramref name="index" /> 上的 Unicode 字元。</returns>
      <param name="index">字元的位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">設定字元時，<paramref name="index" /> 在這個執行個體的界限外。</exception>
      <exception cref="T:System.IndexOutOfRangeException">取得字元時，<paramref name="index" /> 在這個執行個體的界限外。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Clear">
      <summary>從目前的 <see cref="T:System.Text.StringBuilder" /> 執行個體移除所有字元。</summary>
      <returns>
        <see cref="P:System.Text.StringBuilder.Length" /> 為 0 (零) 的物件。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>將此執行個體指定區段中的字元複製到目的端 <see cref="T:System.Char" /> 陣列的指定區段。</summary>
      <param name="sourceIndex">此執行個體中的開始位置，為字元的複製來源。以零為起始的索引。</param>
      <param name="destination">將複製其中字元的陣列。</param>
      <param name="destinationIndex">
        <paramref name="destination" /> 中開始複製字元的位置。以零為起始的索引。</param>
      <param name="count">要複製的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />、<paramref name="destinationIndex" /> 或 <paramref name="count" /> 小於零。-或-<paramref name="sourceIndex" /> 大於這個執行個體的長度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceIndex" /> + <paramref name="count" /> 大於這個執行個體的長度。-或-<paramref name="destinationIndex" /> + <paramref name="count" /> 大於 <paramref name="destination" /> 的長度。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)">
      <summary>請確定此 <see cref="T:System.Text.StringBuilder" /> 其執行個體的容量至少是某一指定的值。</summary>
      <returns>此執行個體的新容量。</returns>
      <param name="capacity">要確定的最大容量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小於零。-或-加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)">
      <summary>傳回值，指出此執行個體是否和指定的物件相等。</summary>
      <returns>如果此執行個體和 <paramref name="sb" /> 具有相同的字串、最大容量以及 <see cref="P:System.Text.StringBuilder.Capacity" /> 值，則為 true，否則為 false。</returns>
      <param name="sb">與此執行個體或 null 相互比較的物件。</param>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)">
      <summary>在指定的字元位置上將 Boolean 值的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，此執行個體的參考。</returns>
      <param name="index">此執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)">
      <summary>在指定的字元位置上將指定的 8 位元不帶正負號的整數其字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，此執行個體的參考。</returns>
      <param name="index">此執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char)">
      <summary>在指定的字元位置上將指定的 Unicode 字元其字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，此執行個體的參考。</returns>
      <param name="index">此執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。-或-加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])">
      <summary>在指定的字元位置上將指定的 Unicode 字元陣列其字串表示插入此執行個體。</summary>
      <returns>完成插入作業之後，此執行個體的參考。</returns>
      <param name="index">此執行個體中開始插入的位置。</param>
      <param name="value">要插入的字元陣列。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。-或-加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>在指定的字元位置上將 Unicode 字元其指定子陣列的字串表示插入此執行個體。</summary>
      <returns>完成插入作業之後，此執行個體的參考。</returns>
      <param name="index">此執行個體中開始插入的位置。</param>
      <param name="value">字元陣列。</param>
      <param name="startIndex">
        <paramref name="value" /> 內的起始位置。</param>
      <param name="charCount">要插入的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 是 null，而 <paramref name="startIndex" /> 和 <paramref name="charCount" /> 不是零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />、<paramref name="startIndex" /> 或 <paramref name="charCount" /> 小於零。-或-<paramref name="index" /> 大於這個執行個體的長度。-或-<paramref name="startIndex" /> 加上 <paramref name="charCount" /> 不是 <paramref name="value" /> 內的位置。-或-加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal)">
      <summary>在指定的字元位置上將小數位數的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，此執行個體的參考。</returns>
      <param name="index">此執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Double)">
      <summary>在指定的字元位置上將雙精度浮點數的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，此執行個體的參考。</returns>
      <param name="index">此執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)">
      <summary>在指定的字元位置，將指定之 16 位元帶正負號整數的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，此執行個體的參考。</returns>
      <param name="index">此執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)">
      <summary>在指定的字元位置，將指定之 32 位元帶正負號整數的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，此執行個體的參考。</returns>
      <param name="index">此執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int64)">
      <summary>在指定的字元位置上將指定的 64 位元帶正負號的整數其字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，此執行個體的參考。</returns>
      <param name="index">此執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Object)">
      <summary>在指定的字元位置上將物件的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，此執行個體的參考。</returns>
      <param name="index">此執行個體中開始插入的位置。</param>
      <param name="value">要插入的物件，或為 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)">
      <summary>在指定的字元位置，將指定之 8 位元帶正負號整數的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，此執行個體的參考。</returns>
      <param name="index">此執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Single)">
      <summary>在指定的字元位置上將單精確度浮點數的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，此執行個體的參考。</returns>
      <param name="index">此執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String)">
      <summary>在指定的字元位置上將字串插入此執行個體。</summary>
      <returns>完成插入作業之後，此執行個體的參考。</returns>
      <param name="index">此執行個體中開始插入的位置。</param>
      <param name="value">要插入的字串。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體目前的長度。-或-此 <see cref="T:System.Text.StringBuilder" /> 物件的目前長度加上 <paramref name="value" /> 的長度，超過了這個執行個體的最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)">
      <summary>在指定的字元位置上將指定字串的一或多個複本插入此執行個體。</summary>
      <returns>插入作業完成後，此執行個體的參考。</returns>
      <param name="index">此執行個體中開始插入的位置。</param>
      <param name="value">要插入的字串。</param>
      <param name="count">要插入 <paramref name="value" /> 的次數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體目前的長度。-或-<paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.OutOfMemoryException">此 <see cref="T:System.Text.StringBuilder" /> 物件的目前長度加上 <paramref name="value" /> 的長度乘以 <paramref name="count" /> 超過此執行個體的最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)">
      <summary>在指定的字元位置，將指定之 16 位元不帶正負號整數的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，此執行個體的參考。</returns>
      <param name="index">此執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)">
      <summary>在指定的字元位置，將指定之 32 位元不帶正負號整數的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，此執行個體的參考。</returns>
      <param name="index">此執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64)">
      <summary>在指定的字元位置，將指定之 64 位元不帶正負號整數的字串表示插入這個執行個體。</summary>
      <returns>完成插入作業之後，此執行個體的參考。</returns>
      <param name="index">此執行個體中開始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零或大於這個執行個體的長度。</exception>
      <exception cref="T:System.OutOfMemoryException">加大這個執行個體的值會超過 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="P:System.Text.StringBuilder.Length">
      <summary>取得或設定目前 <see cref="T:System.Text.StringBuilder" /> 物件的長度。</summary>
      <returns>此執行個體的長度。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">設定作業指定的值小於零或是大於此執行個體的最大容量。 </exception>
    </member>
    <member name="P:System.Text.StringBuilder.MaxCapacity">
      <summary>取得這個執行個體的最大容量。</summary>
      <returns>這個執行個體可以容納的最大字元數。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)">
      <summary>從此執行個體移除指定的字元範圍。</summary>
      <returns>移除作業完成後，此執行個體的參考。</returns>
      <param name="startIndex">此執行個體中開始移除且以零為起始的位置。</param>
      <param name="length">要移除的字元數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">如果 <paramref name="startIndex" /> 或 <paramref name="length" /> 小於零，或 <paramref name="startIndex" /> + <paramref name="length" /> 大於這個執行個體的長度。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char)">
      <summary>以另一個指定的字元，取代此執行個體中指定字元的所有元素。</summary>
      <returns>
        <paramref name="oldChar" /> 已由 <paramref name="newChar" /> 取代的此執行個體參考。</returns>
      <param name="oldChar">要取代的字元。</param>
      <param name="newChar">取代 <paramref name="oldChar" /> 的字元。</param>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)">
      <summary>將此執行個體的子字串內所有出現的指定字元，取代為另一個指定的字元。</summary>
      <returns>參考此執行個體，但 <paramref name="oldChar" /> 換成 <paramref name="newChar" />，範圍是 <paramref name="startIndex" /> 到 <paramref name="startIndex" /> + <paramref name="count" /> -1。</returns>
      <param name="oldChar">要取代的字元。</param>
      <param name="newChar">取代 <paramref name="oldChar" /> 的字元。</param>
      <param name="startIndex">此執行個體中子字串開始的位置。</param>
      <param name="count">子字串的長度。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 加上 <paramref name="count" /> 大於這個執行個體值的長度。-或-<paramref name="startIndex" /> 或 <paramref name="count" /> 小於零。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String)">
      <summary>將此執行個體中所有出現的指定字串取代為另一個指定字串。</summary>
      <returns>此執行個體的參考，但 <paramref name="oldValue" /> 的所有執行個體遭取代成 <paramref name="newValue" />。</returns>
      <param name="oldValue">要取代的字串。</param>
      <param name="newValue">可取代 <paramref name="oldValue" /> 的字串，或為 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldvalue" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>將此執行個體的子字串內所有出現的指定字串，取代為另一個指定的字串。</summary>
      <returns>
        <paramref name="oldValue" /> 的所有執行個體從 <paramref name="startIndex" /> 至 <paramref name="startIndex" /> + <paramref name="count" /> - 1 範圍已由 <paramref name="newValue" /> 取代的此執行個體的參考。</returns>
      <param name="oldValue">要取代的字串。</param>
      <param name="newValue">可取代 <paramref name="oldValue" /> 的字串，或為 null。</param>
      <param name="startIndex">此執行個體中子字串開始的位置。</param>
      <param name="count">子字串的長度。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldvalue" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 小於零。-或-<paramref name="startIndex" /> 加上 <paramref name="count" /> 表示不在這個執行個體中的字元位置。-或-加大這個執行個體的值會超過最大容量。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.ToString">
      <summary>將此執行個體的值轉換為 <see cref="T:System.String" />。</summary>
      <returns>其值和此執行個體相同的字串。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)">
      <summary>將此執行個體的子字串值轉換為 <see cref="T:System.String" />。</summary>
      <returns>字串，此字串值與此執行個體的指定子字串值相同。</returns>
      <param name="startIndex">此執行個體中的子字串開始位置。</param>
      <param name="length">子字串的長度。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小於零。-或-<paramref name="startIndex" /> 和 <paramref name="length" /> 的總和大於目前執行個體的長度。</exception>
    </member>
    <member name="T:System.Text.UnicodeEncoding">
      <summary>表示 Unicode 字元的 UTF-16 編碼方式。</summary>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor">
      <summary>初始化 <see cref="T:System.Text.UnicodeEncoding" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.Text.UnicodeEncoding" /> 類別的新執行個體。參數指定是否使用由大到小位元組順序，以及是否提供 Unicode 位元組順序標記。</summary>
      <param name="bigEndian">true 表示使用位元組由大到小位元組順序 (最重要的位元組優先)，或 false 示使用位元組由小到大位元組順序 (最不重要的位元組優先)。</param>
      <param name="byteOrderMark">true 表示指定提供 Unicode 位元組順序標記，否則為 false。</param>
    </member>
    <member name="M:System.Text.UnicodeEncoding.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.Text.UnicodeEncoding" /> 類別的新執行個體。參數指定是否使用由大到小位元組順序、是否提供 Unicode 位元組順序標記，以及是否在偵測到無效編碼時擲回例外狀況。</summary>
      <param name="bigEndian">true 表示使用由大到小位元組順序 (最重要的位元組優先)，或 false 表示使用由小到大位元組順序 (最不重要的位元組優先)。</param>
      <param name="byteOrderMark">true 表示指定提供 Unicode 位元組順序標記，否則為 false。</param>
      <param name="throwOnInvalidBytes">true 表示指定在偵測到無效編碼時應該擲回例外狀況，否則為 false。</param>
    </member>
    <member name="M:System.Text.UnicodeEncoding.Equals(System.Object)">
      <summary>判斷指定的 <see cref="T:System.Object" /> 是否等於目前 <see cref="T:System.Text.UnicodeEncoding" /> 物件。</summary>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.Text.UnicodeEncoding" /> 的執行個體，並且等於目前的物件，則為 true，否則為 false。</returns>
      <param name="value">要與目前 <see cref="T:System.Object" /> 比較的物件。</param>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>計算將指定的字元陣列中的一組字元編碼會產生多少位元組。</summary>
      <returns>編碼指定字元所產生的位元組數。</returns>
      <param name="chars">包含要解碼之一組字元的字元陣列。</param>
      <param name="index">要編碼的第 1 個字元之以零為起始的索引。</param>
      <param name="count">要編碼的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。-或-<paramref name="index" /> 和 <paramref name="count" /> 無法代表 <paramref name="chars" /> 中有效的範圍。-或-產生的位元組數目大於可做為整數傳回的最大值。</exception>
      <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="chars" /> 包含無效的字元序列。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetByteCount(System.String)">
      <summary>計算編碼指定字串中的字元會產生的位元組數。</summary>
      <returns>編碼指定字元所產生的位元組數。</returns>
      <param name="s">字串，包含要編碼的一組字元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的位元組數目大於可做為整數傳回的最大值。</exception>
      <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="s" /> 包含無效的字元序列。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
      <summary>[安全性關鍵] 將起始於指定之字元指標的一組字元編碼成位元組序列；儲存該位元組序列時，係以指定的位元組指標為起始點。</summary>
      <returns>
        <paramref name="bytes" /> 參數所指示位置上寫入的實際位元組數目。</returns>
      <param name="chars">要編碼的第 1 個字元指標。</param>
      <param name="charCount">要編碼的字元數。</param>
      <param name="bytes">開始寫入結果位元組序列的位置指標。</param>
      <param name="byteCount">寫入的最大位元組數。</param>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>將一組字元從指定的字元陣列編碼成指定的位元組陣列。</summary>
      <returns>寫入 <paramref name="bytes" /> 的實際位元組數。</returns>
      <param name="chars">包含要解碼之一組字元的字元陣列。</param>
      <param name="charIndex">要編碼的第 1 個字元之以零為起始的索引。</param>
      <param name="charCount">要編碼的字元數。</param>
      <param name="bytes">要包含結果位元組序列的位元組陣列。</param>
      <param name="byteIndex">要開始寫入位元組結果序列之以零為起始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 null (Nothing)。-或-<paramref name="bytes" /> 為 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小於零。-或-<paramref name="charIndex" /> 和 <paramref name="charCount" /> 無法代表 <paramref name="chars" /> 中有效的範圍。-或-<paramref name="byteIndex" /> 在 <paramref name="bytes" /> 中不是有效的索引。</exception>
      <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="chars" /> 包含無效的字元序列。-或-從 <paramref name="byteIndex" /> 到陣列結尾處，<paramref name="bytes" /> 沒有足夠的容量容納結果位元組。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>將指定 <see cref="T:System.String" /> 中的一組字元編碼成指定的位元組陣列。</summary>
      <returns>寫入 <paramref name="bytes" /> 的實際位元組數。</returns>
      <param name="s">
        <see cref="T:System.String" /> 包含要編碼的一組字元。</param>
      <param name="charIndex">要編碼的第 1 個字元之以零為起始的索引。</param>
      <param name="charCount">要編碼的字元數。</param>
      <param name="bytes">要包含結果位元組序列的位元組陣列。</param>
      <param name="byteIndex">要開始寫入位元組結果序列之以零為起始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null (Nothing)。-或-<paramref name="bytes" /> 為 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小於零。-或-<paramref name="charIndex" /> 和 <paramref name="charCount" /> 無法代表 <paramref name="chars" /> 中有效的範圍。-或-<paramref name="byteIndex" /> 在 <paramref name="bytes" /> 中不是有效的索引。</exception>
      <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="s" /> 包含無效的字元序列。-或-從 <paramref name="byteIndex" /> 到陣列結尾處，<paramref name="bytes" /> 沒有足夠的容量容納結果位元組。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>計算解碼指定位元組陣列中的位元組序列會產生多少字元數。</summary>
      <returns>解碼指定位元組序列所產生的字元數。</returns>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="index">要解碼的第 1 個位元組以零為起始的索引。</param>
      <param name="count">要解碼的位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。-或-<paramref name="index" /> 和 <paramref name="count" /> 無法代表 <paramref name="bytes" /> 中有效的範圍。-或-產生的位元組數目大於可做為整數傳回的最大值。</exception>
      <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="bytes" /> 包含無效的位元組序列。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>將指定位元組陣列中的位元組序列解碼成指定的字元陣列。</summary>
      <returns>實際寫入 <paramref name="chars" /> 的字元數。</returns>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="byteIndex">要解碼的第 1 個位元組以零為起始的索引。</param>
      <param name="byteCount">要解碼的位元組數。</param>
      <param name="chars">包含產生的一組字元之字元陣列。</param>
      <param name="charIndex">要開始寫入字元結果集之以零為起始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 null (Nothing)。-或-<paramref name="chars" /> 為 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小於零。-或-<paramref name="byteindex" /> 和 <paramref name="byteCount" /> 無法代表 <paramref name="bytes" /> 中有效的範圍。-或-<paramref name="charIndex" /> 在 <paramref name="chars" /> 中不是有效的索引。</exception>
      <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="bytes" /> 包含無效的位元組序列。-或-從 <paramref name="charIndex" /> 到陣列結尾處，<paramref name="chars" /> 沒有足夠的容量容納結果字元。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetDecoder">
      <summary>取得可以將以 UTF-16 編碼的位元組序列轉換成 Unicode 字元序列的解碼器。</summary>
      <returns>
        <see cref="T:System.Text.Decoder" />，可以將以 UTF-16 編碼的位元組序列轉換成 Unicode 字元序列。</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetEncoder">
      <summary>取得可以將 Unicode 字元序列轉換成以 UTF-16 編碼的位元組序列的編碼器。</summary>
      <returns>物件，可以將 Unicode 字元序列轉換成以 UTF-16 編碼的位元組序列。</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetHashCode">
      <summary>傳回目前執行個體的雜湊程式碼。</summary>
      <returns>目前 <see cref="T:System.Text.UnicodeEncoding" /> 物件的雜湊程式碼。</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetMaxByteCount(System.Int32)">
      <summary>計算編碼指定的字元數會產生的最大位元組數。</summary>
      <returns>編碼指定字元數所產生的最大位元組數。</returns>
      <param name="charCount">要編碼的字元數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 小於零。-或-產生的位元組數目大於可做為整數傳回的最大值。</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetMaxCharCount(System.Int32)">
      <summary>計算解碼指定的位元組數會產生的最大字元數。</summary>
      <returns>解碼指定位元組數所產生的最大字元數。</returns>
      <param name="byteCount">要解碼的位元組數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> 小於零。-或-產生的位元組數目大於可做為整數傳回的最大值。</exception>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetPreamble">
      <summary>傳回以 UTF-16 格式編碼的 Unicode 位元組順序標記。</summary>
      <returns>包含 Unicode 位元組順序標記的位元組陣列，如果此執行個體的建構函式要求一個位元組順序標記。否則，此方法會傳回零長度的位元組陣列。</returns>
    </member>
    <member name="M:System.Text.UnicodeEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>將位元組陣列中的某一段位元組範圍解碼成字串。</summary>
      <returns>字串物件，包含將指定之位元組序列解碼的結果。</returns>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="index">要解碼的第 1 個位元組以零為起始的索引。</param>
      <param name="count">要解碼的位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 null (Nothing)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。-或-<paramref name="index" /> 和 <paramref name="count" /> 無法代表 <paramref name="bytes" /> 中有效的範圍。</exception>
      <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="bytes" /> 包含無效的位元組序列。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援。</exception>
    </member>
    <member name="T:System.Text.UTF8Encoding">
      <summary>表示 Unicode 字元的 UTF-8 編碼方式。</summary>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor">
      <summary>初始化 <see cref="T:System.Text.UTF8Encoding" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Text.UTF8Encoding" /> 類別的新執行個體。一個參數指定是否提供 Unicode 位元組順序標記。</summary>
      <param name="encoderShouldEmitUTF8Identifier">true 表示指定提供 Unicode 位元組順序標記，否則為 false。</param>
    </member>
    <member name="M:System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.Text.UTF8Encoding" /> 類別的新執行個體。參數指定是否提供 Unicode 位元組順序標記，以及是否在偵測到無效編碼時擲回例外狀況。</summary>
      <param name="encoderShouldEmitUTF8Identifier">true 表示指定提供 Unicode 位元組順序標記，否則為 false。</param>
      <param name="throwOnInvalidBytes">true 表示指定在偵測到無效編碼時擲回例外狀況，否則為 false。</param>
    </member>
    <member name="M:System.Text.UTF8Encoding.Equals(System.Object)">
      <summary>判斷指定的 <see cref="T:System.Object" /> 是否等於目前 <see cref="T:System.Text.UTF8Encoding" /> 物件。</summary>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.Text.UTF8Encoding" /> 的執行個體，並且等於目前的物件，則為 true，否則為 false。</returns>
      <param name="value">要與目前執行個體比較的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>計算將指定的字元陣列中的一組字元編碼會產生多少位元組。</summary>
      <returns>編碼指定字元所產生的位元組數。</returns>
      <param name="chars">包含要解碼之一組字元的字元陣列。</param>
      <param name="index">要編碼的第 1 個字元之以零為起始的索引。</param>
      <param name="count">要編碼的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。-或-<paramref name="index" /> 和 <paramref name="count" /> 無法代表 <paramref name="chars" /> 中有效的範圍。-或-產生的位元組數目大於可做為整數傳回的最大值。</exception>
      <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="chars" /> 包含無效的字元序列。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetByteCount(System.String)">
      <summary>計算將指定 <see cref="T:System.String" /> 中的字元編碼會產生多少位元組。</summary>
      <returns>編碼指定字元會產生的位元組數。</returns>
      <param name="chars">
        <see cref="T:System.String" /> 包含要編碼的一組字元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">產生的位元組數目大於可做為整數傳回的最大值。</exception>
      <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="chars" /> 包含無效的字元序列。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
      <summary>[安全性關鍵] 將起始於指定之字元指標的一組字元編碼成位元組序列；儲存該位元組序列時，係以指定的位元組指標為起始點。</summary>
      <returns>在 <paramref name="bytes" /> 所指示位置上寫入的實際位元組數。</returns>
      <param name="chars">要編碼的第 1 個字元指標。</param>
      <param name="charCount">要編碼的字元數。</param>
      <param name="bytes">開始寫入結果位元組序列的位置指標。</param>
      <param name="byteCount">寫入的最大位元組數。</param>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>將一組字元從指定的字元陣列編碼成指定的位元組陣列。</summary>
      <returns>寫入 <paramref name="bytes" /> 的實際位元組數。</returns>
      <param name="chars">包含要解碼之一組字元的字元陣列。</param>
      <param name="charIndex">要編碼的第 1 個字元之以零為起始的索引。</param>
      <param name="charCount">要編碼的字元數。</param>
      <param name="bytes">要包含結果位元組序列的位元組陣列。</param>
      <param name="byteIndex">要開始寫入位元組結果序列之以零為起始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 為 null。-或-<paramref name="bytes" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小於零。-或-<paramref name="charIndex" /> 和 <paramref name="charCount" /> 無法代表 <paramref name="chars" /> 中有效的範圍。-或-<paramref name="byteIndex" /> 在 <paramref name="bytes" /> 中不是有效的索引。</exception>
      <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="chars" /> 包含無效的字元序列。-或-從 <paramref name="byteIndex" /> 到陣列結尾處，<paramref name="bytes" /> 沒有足夠的容量容納結果位元組。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>將一組字元從指定的字串編碼成指定的位元組陣列。</summary>
      <returns>寫入 <paramref name="bytes" /> 的實際位元組數。</returns>
      <param name="s">字串，包含要編碼的一組字元。</param>
      <param name="charIndex">要編碼的第 1 個字元之以零為起始的索引。</param>
      <param name="charCount">要編碼的字元數。</param>
      <param name="bytes">要包含結果位元組序列的位元組陣列。</param>
      <param name="byteIndex">要開始寫入位元組結果序列之以零為起始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 為 null。-或-<paramref name="bytes" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小於零。-或-<paramref name="charIndex" /> 和 <paramref name="charCount" /> 無法代表 <paramref name="chars" /> 中有效的範圍。-或-<paramref name="byteIndex" /> 在 <paramref name="bytes" /> 中不是有效的索引。</exception>
      <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="s" /> 包含無效的字元序列。-或-從 <paramref name="byteIndex" /> 到陣列結尾處，<paramref name="bytes" /> 沒有足夠的容量容納結果位元組。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>計算解碼指定位元組陣列中的位元組序列會產生多少字元數。</summary>
      <returns>解碼指定位元組序列所產生的字元數。</returns>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="index">要解碼的第 1 個位元組以零為起始的索引。</param>
      <param name="count">要解碼的位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。-或-<paramref name="index" /> 和 <paramref name="count" /> 無法代表 <paramref name="bytes" /> 中有效的範圍。-或-產生的位元組數目大於可做為整數傳回的最大值。</exception>
      <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="bytes" /> 包含無效的位元組序列。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>將指定位元組陣列中的位元組序列解碼成指定的字元陣列。</summary>
      <returns>實際寫入 <paramref name="chars" /> 的字元數。</returns>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="byteIndex">要解碼的第 1 個位元組以零為起始的索引。</param>
      <param name="byteCount">要解碼的位元組數。</param>
      <param name="chars">包含產生的一組字元之字元陣列。</param>
      <param name="charIndex">要開始寫入字元結果集之以零為起始的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 null。-或-<paramref name="chars" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小於零。-或-<paramref name="byteindex" /> 和 <paramref name="byteCount" /> 無法代表 <paramref name="bytes" /> 中有效的範圍。-或-<paramref name="charIndex" /> 在 <paramref name="chars" /> 中不是有效的索引。</exception>
      <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="bytes" /> 包含無效的位元組序列。-或-從 <paramref name="charIndex" /> 到陣列結尾處，<paramref name="chars" /> 沒有足夠的容量容納結果字元。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援。</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetDecoder">
      <summary>取得可以將以 UTF-8 編碼的位元組序列轉換成 Unicode 字元序列的解碼器。</summary>
      <returns>
        <see cref="T:System.Text.Decoder" />，可以將以 UTF-8 編碼的位元組序列轉換成 Unicode 字元序列。</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetEncoder">
      <summary>取得可以將 Unicode 字元序列轉換成以 UTF-8 編碼的位元組序列的編碼器。</summary>
      <returns>物件，可以將 Unicode 字元序列轉換成以 UTF-8 編碼的位元組序列。</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetHashCode">
      <summary>傳回目前執行個體的雜湊程式碼。</summary>
      <returns>目前執行個體的雜湊程式碼。</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)">
      <summary>計算編碼指定的字元數會產生的最大位元組數。</summary>
      <returns>編碼指定字元數所產生的最大位元組數。</returns>
      <param name="charCount">要編碼的字元數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 小於零。-或-產生的位元組數目大於可做為整數傳回的最大值。</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)">
      <summary>計算解碼指定的位元組數會產生的最大字元數。</summary>
      <returns>解碼指定位元組數所產生的最大字元數。</returns>
      <param name="byteCount">要解碼的位元組數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> 小於零。-或-產生的位元組數目大於可做為整數傳回的最大值。</exception>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetPreamble">
      <summary>傳回以 UTF-8 格式編碼的 Unicode 位元組順序標記。</summary>
      <returns>包含 Unicode 位元組順序標記的位元組陣列，如果此執行個體的建構函式要求一個位元組順序標記。否則，此方法會傳回零長度的位元組陣列。</returns>
    </member>
    <member name="M:System.Text.UTF8Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>將位元組陣列中的某一段位元組範圍解碼成字串。</summary>
      <returns>字串，包含將指定之位元組序列解碼的結果。</returns>
      <param name="bytes">包含要解碼之位元組序列的位元組陣列。</param>
      <param name="index">要解碼的第 1 個位元組以零為起始的索引。</param>
      <param name="count">要解碼的位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。-或-<paramref name="index" /> 和 <paramref name="count" /> 無法代表 <paramref name="bytes" /> 中有效的範圍。</exception>
      <exception cref="T:System.ArgumentException">已啟用錯誤偵測，而 <paramref name="bytes" /> 包含無效的位元組序列。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">發生後援。</exception>
    </member>
    <member name="T:System.Threading.AbandonedMutexException">
      <summary>當一個執行緒取得另一個執行緒已放棄，但是結束時並未釋放的 <see cref="T:System.Threading.Mutex" /> 物件時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor">
      <summary>使用預設值，初始化 <see cref="T:System.Threading.AbandonedMutexException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)">
      <summary>使用已放棄 Mutex 的指定索引 (若適用的話) 以及表示此 Mutex 的 <see cref="T:System.Threading.Mutex" /> 物件，初始化 <see cref="T:System.Threading.AbandonedMutexException" /> 類別的新執行個體 。</summary>
      <param name="location">如果針對 <see cref="Overload:System.Threading.WaitHandle.WaitAny" /> 方法擲回例外狀況，則為等候控制代碼陣列中已放棄 Mutex 的索引；如果針對 <see cref="Overload:System.Threading.WaitHandle.WaitOne" /> 或 <see cref="Overload:System.Threading.WaitHandle.WaitAll" /> 方法擲回例外狀況，則為 -1。</param>
      <param name="handle">
        <see cref="T:System.Threading.Mutex" /> 物件，表示放棄的 Mutex。</param>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Threading.AbandonedMutexException" /> 類別的新執行個體。</summary>
      <param name="message">解釋發生例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和內部例外狀況初始化 <see cref="T:System.Threading.AbandonedMutexException" /> 類別的新執行個體。</summary>
      <param name="message">解釋發生例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 null，則會在處理內部例外狀況的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)">
      <summary>使用指定的錯誤訊息、內部例外狀況、已放棄 Mutex 的索引 (若適用的話)，以及表示此 Mutex 的 <see cref="T:System.Threading.Mutex" /> 物件，初始化 <see cref="T:System.Threading.AbandonedMutexException" /> 類別的新執行個體。</summary>
      <param name="message">解釋發生例外狀況原因的錯誤訊息。</param>
      <param name="inner">造成目前例外狀況的例外狀況。如果 <paramref name="inner" /> 參數不是 null，則會在處理內部例外狀況的 catch 區塊中引發目前的例外狀況。</param>
      <param name="location">如果針對 <see cref="Overload:System.Threading.WaitHandle.WaitAny" /> 方法擲回例外狀況，則為等候控制代碼陣列中已放棄 Mutex 的索引；如果針對 <see cref="Overload:System.Threading.WaitHandle.WaitOne" /> 或 <see cref="Overload:System.Threading.WaitHandle.WaitAll" /> 方法擲回例外狀況，則為 -1。</param>
      <param name="handle">
        <see cref="T:System.Threading.Mutex" /> 物件，表示放棄的 Mutex。</param>
    </member>
    <member name="M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)">
      <summary>以指定的錯誤訊息、已放棄 Mutex 的索引 (若適用的話) 以及放棄的 Mutex 初始化 <see cref="T:System.Threading.AbandonedMutexException" /> 類別的新執行個體。</summary>
      <param name="message">解釋發生例外狀況原因的錯誤訊息。</param>
      <param name="location">如果針對 <see cref="Overload:System.Threading.WaitHandle.WaitAny" /> 方法擲回例外狀況，則為等候控制代碼陣列中已放棄 Mutex 的索引；如果針對 <see cref="Overload:System.Threading.WaitHandle.WaitOne" /> 或 <see cref="Overload:System.Threading.WaitHandle.WaitAll" /> 方法擲回例外狀況，則為 -1。</param>
      <param name="handle">
        <see cref="T:System.Threading.Mutex" /> 物件，表示放棄的 Mutex。</param>
    </member>
    <member name="P:System.Threading.AbandonedMutexException.Mutex">
      <summary>取得造成例外狀況的已放棄 Mutex (若為已知)。</summary>
      <returns>
        <see cref="T:System.Threading.Mutex" /> 物件，表示放棄的 Mutex，如果無法識別出放棄的 Mutex，則為 null。</returns>
    </member>
    <member name="P:System.Threading.AbandonedMutexException.MutexIndex">
      <summary>取得造成例外狀況之已放棄 Mutex 的索引 (若為已知)。</summary>
      <returns>等候控制代碼陣列中的索引 (已傳遞給 <see cref="T:System.Threading.Mutex" /> 物件的 <see cref="Overload:System.Threading.WaitHandle.WaitAny" /> 方法)，表示已放棄的 Mutex；如果無法判斷已放棄 Mutex 的索引，則為 -1。</returns>
    </member>
    <member name="T:System.Threading.AutoResetEvent">
      <summary>向等候的執行緒通知發生事件。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)">
      <summary>使用布林值初始化 <see cref="T:System.Threading.AutoResetEvent" /> 類別的新執行個體，指出是否將初始狀態是否設定為已通知。</summary>
      <param name="initialState">true 表示將初始狀態設定為通知，false 表示將初始狀態設定為不通知。</param>
    </member>
    <member name="T:System.Threading.CancellationToken">
      <summary>散佈通知，表示不應取消作業。</summary>
    </member>
    <member name="M:System.Threading.CancellationToken.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <param name="canceled">語彙基元的已取消狀態。</param>
    </member>
    <member name="P:System.Threading.CancellationToken.CanBeCanceled">
      <summary>取得值，這個值表示該語彙基元是否能夠處於已取消狀態。</summary>
      <returns>如果這個語彙基元能夠處於已取消狀態則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Threading.CancellationToken.Equals(System.Object)">
      <summary>判斷目前的 <see cref="T:System.Threading.CancellationToken" /> 執行個體與指定的 <see cref="T:System.Object" /> 是否相等。</summary>
      <returns>如果 <paramref name="other" /> 是 <see cref="T:System.Threading.CancellationToken" />，且兩個執行個體相等則為 true，否則為 false。如果兩個語彙基元與同一個 <see cref="T:System.Threading.CancellationTokenSource" /> 有關聯，或者都是從公用 CancellationToken 建構函式所建構且其 <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> 值相等，則這兩個語彙基元是相等的。</returns>
      <param name="other">要與這個執行個體比較的其他物件。</param>
      <exception cref="T:System.ObjectDisposedException">已處置相關聯的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)">
      <summary>判斷目前的 <see cref="T:System.Threading.CancellationToken" /> 執行個體與指定的語彙基元是否相等。</summary>
      <returns>如果執行個體相等，則為 true，否則為 false。如果兩個語彙基元與同一個 <see cref="T:System.Threading.CancellationTokenSource" /> 有關聯，或者都是從公用 CancellationToken 建構函式所建構且其 <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> 值相等，則這兩個語彙基元是相等的。</returns>
      <param name="other">要與這個執行個體比較的其他 <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Threading.CancellationToken.GetHashCode">
      <summary>做為 <see cref="T:System.Threading.CancellationToken" /> 的雜湊函數。</summary>
      <returns>目前 <see cref="T:System.Threading.CancellationToken" /> 執行個體的雜湊程式碼。</returns>
    </member>
    <member name="P:System.Threading.CancellationToken.IsCancellationRequested">
      <summary>取得值，這個值表示是否已要求取消這個語彙基元。</summary>
      <returns>如果已要求取消這個語彙基元則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Threading.CancellationToken.None">
      <summary>傳回空的 CancellationToken 值。</summary>
      <returns>傳回空的 CancellationToken 值。</returns>
    </member>
    <member name="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>判斷兩個 <see cref="T:System.Threading.CancellationToken" /> 執行個體是否相等。</summary>
      <returns>如果執行個體相等，則為 true，否則為 false。</returns>
      <param name="left">第一個執行個體。</param>
      <param name="right">第二個執行個體。</param>
      <exception cref="T:System.ObjectDisposedException">已處置相關聯的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>判斷兩個 <see cref="T:System.Threading.CancellationToken" /> 執行個體是否不相等。</summary>
      <returns>如果這些執行個體不相等則為 true，否則為 false。</returns>
      <param name="left">第一個執行個體。</param>
      <param name="right">第二個執行個體。</param>
      <exception cref="T:System.ObjectDisposedException">已處置相關聯的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action)">
      <summary>註冊當 <see cref="T:System.Threading.CancellationToken" /> 取消時將會呼叫的委派。</summary>
      <returns>可用來取消註冊回呼的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體。</returns>
      <param name="callback">當 <see cref="T:System.Threading.CancellationToken" /> 取消時要執行的委派。</param>
      <exception cref="T:System.ObjectDisposedException">已處置關聯的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 為 null。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)">
      <summary>註冊當 <see cref="T:System.Threading.CancellationToken" /> 取消時將會呼叫的委派。</summary>
      <returns>可用來取消註冊回呼的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體。</returns>
      <param name="callback">當 <see cref="T:System.Threading.CancellationToken" /> 取消時要執行的委派。</param>
      <param name="useSynchronizationContext">布林值，表示是否要擷取目前的 <see cref="T:System.Threading.SynchronizationContext" /> 並在叫用 <paramref name="callback" /> 時使用它。</param>
      <exception cref="T:System.ObjectDisposedException">已處置關聯的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 為 null。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
      <summary>註冊當 <see cref="T:System.Threading.CancellationToken" /> 取消時將會呼叫的委派。</summary>
      <returns>可用來取消註冊回呼的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體。</returns>
      <param name="callback">當 <see cref="T:System.Threading.CancellationToken" /> 取消時要執行的委派。</param>
      <param name="state">當叫用委派時，要傳遞給 <paramref name="callback" /> 的狀態。這可能是 Null。</param>
      <exception cref="T:System.ObjectDisposedException">已處置關聯的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 為 null。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
      <summary>註冊當 <see cref="T:System.Threading.CancellationToken" /> 取消時將會呼叫的委派。</summary>
      <returns>可用來取消註冊回呼的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體。</returns>
      <param name="callback">當 <see cref="T:System.Threading.CancellationToken" /> 取消時要執行的委派。</param>
      <param name="state">當叫用委派時，要傳遞給 <paramref name="callback" /> 的狀態。這可能是 Null。</param>
      <param name="useSynchronizationContext">布林值，表示是否要擷取目前的 <see cref="T:System.Threading.SynchronizationContext" /> 並在叫用 <paramref name="callback" /> 時使用它。</param>
      <exception cref="T:System.ObjectDisposedException">已處置關聯的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 為 null。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.ThrowIfCancellationRequested">
      <summary>如果已要求取消這個語彙基元，則擲回 <see cref="T:System.OperationCanceledException" />。</summary>
      <exception cref="T:System.OperationCanceledException">語彙基元已經要求取消。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置關聯的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="P:System.Threading.CancellationToken.WaitHandle">
      <summary>取得在取消語彙基元時收到訊號的 <see cref="T:System.Threading.WaitHandle" />。</summary>
      <returns>在取消語彙基元時收到的 <see cref="T:System.Threading.WaitHandle" /> 信號。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置關聯的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="T:System.Threading.CancellationTokenRegistration">
      <summary>代表已向 <see cref="T:System.Threading.CancellationToken" /> 註冊的回呼委派。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Dispose">
      <summary>將 <see cref="T:System.Threading.CancellationTokenRegistration" /> 類別目前的執行個體所使用的資源全部釋出。</summary>
      <exception cref="T:System.ObjectDisposedException">建立這個語彙基元註冊執行個體的語彙基元來源已處置。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Equals(System.Object)">
      <summary>判斷目前的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體與指定的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 是否相等。</summary>
      <returns>如果這個執行個體和 <paramref name="obj" /> 相等則為 True，否則為 false。如果兩個 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體都參考相同 <see cref="T:System.Threading.CancellationToken" /> Register 方法之單一呼叫的輸出，則這兩個執行個體相等。</returns>
      <param name="obj">要與這個執行個體比較的其他物件。</param>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Equals(System.Threading.CancellationTokenRegistration)">
      <summary>判斷目前的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體與指定的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 是否相等。</summary>
      <returns>如果這個執行個體和 <paramref name="other" /> 相等則為 True，否則為 false。 如果兩個 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體都參考相同 <see cref="T:System.Threading.CancellationToken" /> Register 方法之單一呼叫的輸出，則這兩個執行個體相等。</returns>
      <param name="other">要與這個執行個體比較的其他 <see cref="T:System.Threading.CancellationTokenRegistration" />。</param>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.GetHashCode">
      <summary>做為 <see cref="T:System.Threading.CancellationTokenRegistration" /> 的雜湊函數。</summary>
      <returns>目前 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體的雜湊程式碼。</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.op_Equality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)">
      <summary>判斷兩個 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體是否相等。</summary>
      <returns>如果執行個體相等，則為 true，否則為 false。</returns>
      <param name="left">第一個執行個體。</param>
      <param name="right">第二個執行個體。</param>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.op_Inequality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)">
      <summary>判斷兩個 <see cref="T:System.Threading.CancellationTokenRegistration" /> 執行個體是否不相等。</summary>
      <returns>如果這些執行個體不相等則為 true，否則為 false。</returns>
      <param name="left">第一個執行個體。</param>
      <param name="right">第二個執行個體。</param>
    </member>
    <member name="T:System.Threading.CancellationTokenSource">
      <summary>向 <see cref="T:System.Threading.CancellationToken" /> 發出訊號，表示應該將它取消。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor">
      <summary>初始化 <see cref="T:System.Threading.CancellationTokenSource" />。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
      <summary>建構將會在指定時間範圍之後取消的 <see cref="T:System.Threading.CancellationTokenSource" />。</summary>
      <param name="millisecondsDelay">在取消這個 <see cref="T:System.Threading.CancellationTokenSource" /> 之前要等待的時間範圍。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">當 <paramref name="millisecondsDelay" /> 小於 -1 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
      <summary>建構將會在指定時間範圍之後取消的 <see cref="T:System.Threading.CancellationTokenSource" />。</summary>
      <param name="delay">在取消這個 <see cref="T:System.Threading.CancellationTokenSource" /> 之前要等待的時間範圍。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">當 <paramref name="delay" /> 小於 -1 或大於 Int32.MaxValue 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel">
      <summary>傳遞取消要求。</summary>
      <exception cref="T:System.ObjectDisposedException">已經處置這個 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.AggregateException">包含所有由相關聯的 <see cref="T:System.Threading.CancellationToken" /> 上已註冊的回呼所擲回例外狀況的彙總例外狀況。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
      <summary>傳遞取消要求。</summary>
      <param name="throwOnFirstException">指定是否應該立即散佈例外狀況。</param>
      <exception cref="T:System.ObjectDisposedException">已經處置這個 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.AggregateException">包含所有由相關聯的 <see cref="T:System.Threading.CancellationToken" /> 上已註冊的回呼所擲回例外狀況的彙總例外狀況。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
      <summary>在這個 <see cref="T:System.Threading.CancellationTokenSource" /> 上排程取消作業。</summary>
      <param name="millisecondsDelay">在取消這個 <see cref="T:System.Threading.CancellationTokenSource" /> 之前要等待的時間範圍。</param>
      <exception cref="T:System.ObjectDisposedException">當已處置此 <see cref="T:System.Threading.CancellationTokenSource" /> 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">當 <paramref name="millisecondsDelay" /> 小於 -1 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
      <summary>在這個 <see cref="T:System.Threading.CancellationTokenSource" /> 上排程取消作業。</summary>
      <param name="delay">在取消這個 <see cref="T:System.Threading.CancellationTokenSource" /> 之前要等待的時間範圍。</param>
      <exception cref="T:System.ObjectDisposedException">當已處置此 <see cref="T:System.Threading.CancellationTokenSource" /> 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">當 <paramref name="delay" /> 小於 -1 或大於 Int32.MaxValue 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>建立 <see cref="T:System.Threading.CancellationTokenSource" />，且設定只要有任何來源語彙基元處於已取消狀態，它就會處於已取消狀態。</summary>
      <returns>已連結至來源語彙基元的 <see cref="T:System.Threading.CancellationTokenSource" />。</returns>
      <param name="token1">要觀察的第一個 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="token2">要觀察的第二個 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">已經處置 <see cref="T:System.Threading.CancellationTokenSource" /> 與其中一個來源語彙基元 (Token) 的關聯。</exception>
      <exception cref="T:System.ArgumentException">如果無法取消其中任何語彙基元，它們將不會連結。傳回的來源將會是可取消的。-或-如果已取消任何語彙基元，則會在已取消狀態傳回連結的語彙基元。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
      <summary>建立 <see cref="T:System.Threading.CancellationTokenSource" />，且設定只要有任何來源語彙基元處於已取消狀態，它就會處於已取消狀態。</summary>
      <returns>已連結至來源語彙基元的 <see cref="T:System.Threading.CancellationTokenSource" />。</returns>
      <param name="tokens">要觀察的 <see cref="T:System.Threading.CancellationToken" /> 執行個體。</param>
      <exception cref="T:System.ObjectDisposedException">已經處置 <see cref="T:System.Threading.CancellationTokenSource" /> 與其中一個來源語彙基元 (Token) 的關聯。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokens" /> 為 null。</exception>
      <exception cref="T:System.ArgumentException">如果無法取消其中任何語彙基元，它們將不會連結。傳回的來源將會是可取消的。-或-如果已取消任何語彙基元，則會在已取消狀態傳回連結的語彙基元。</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose">
      <summary>將 <see cref="T:System.Threading.CancellationTokenSource" /> 類別目前的執行個體所使用的資源全部釋出。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Threading.CancellationTokenSource" /> 類別使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 以釋放 Managed 和 Unmanaged 資源，false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
      <summary>取得值，這個值表示是否已要求取消這個 <see cref="T:System.Threading.CancellationTokenSource" />。</summary>
      <returns>是否已要求取消這個 <see cref="T:System.Threading.CancellationTokenSource" />。</returns>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.Token">
      <summary>取得與此 <see cref="T:System.Threading.CancellationTokenSource" /> 相關聯的 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>與此 <see cref="T:System.Threading.CancellationTokenSource" /> 關聯的 <see cref="T:System.Threading.CancellationToken" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置語彙基元來源。</exception>
    </member>
    <member name="T:System.Threading.CountdownEvent">
      <summary>代表當計數到達零時收到訊號的同步處理原始物件。</summary>
    </member>
    <member name="M:System.Threading.CountdownEvent.#ctor(System.Int32)">
      <summary>使用指定的計數，初始化 <see cref="T:System.Threading.CountdownEvent" /> 類別的新執行個體。</summary>
      <param name="initialCount">設定 <see cref="T:System.Threading.CountdownEvent" /> 時最初所需的訊號次數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialCount" /> 小於 0。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.AddCount">
      <summary>將 <see cref="T:System.Threading.CountdownEvent" /> 目前的計數遞增一。</summary>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">目前的執行個體已經設定。-或-<see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 等於或大於 <see cref="T:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.AddCount(System.Int32)">
      <summary>將 <see cref="T:System.Threading.CountdownEvent" /> 目前的計數遞增所指定的值。</summary>
      <param name="signalCount">
        <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 所要增加的值。</param>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signalCount" /> 小於或等於 0。</exception>
      <exception cref="T:System.InvalidOperationException">目前的執行個體已經設定。-或-計數遞增 <paramref name="signalCount." /> 後，<see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 會等於或大於 <see cref="T:System.Int32.MaxValue" /></exception>
    </member>
    <member name="P:System.Threading.CountdownEvent.CurrentCount">
      <summary>取得設定事件時需要的剩餘訊號次數。</summary>
      <returns> 設定事件時需要的剩餘訊號次數。</returns>
    </member>
    <member name="M:System.Threading.CountdownEvent.Dispose">
      <summary>將 <see cref="T:System.Threading.CountdownEvent" /> 類別目前的執行個體所使用的資源全部釋出。</summary>
    </member>
    <member name="M:System.Threading.CountdownEvent.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Threading.CountdownEvent" /> 使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 以釋放 Managed 和 Unmanaged 資源，false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="P:System.Threading.CountdownEvent.InitialCount">
      <summary>取得設定事件一開始時所需要的訊號次數。</summary>
      <returns> 設定事件一開始時所需要的訊號次數。</returns>
    </member>
    <member name="P:System.Threading.CountdownEvent.IsSet">
      <summary>判斷事件是否已設定。</summary>
      <returns>如果已設定事件則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Threading.CountdownEvent.Reset">
      <summary>將 <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 重設為 <see cref="P:System.Threading.CountdownEvent.InitialCount" /> 的值。</summary>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Reset(System.Int32)">
      <summary>將 <see cref="P:System.Threading.CountdownEvent.InitialCount" /> 屬性重設為指定的值。</summary>
      <param name="count">設定 <see cref="T:System.Threading.CountdownEvent" /> 時所需的訊號次數。</param>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小於 0。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Signal">
      <summary>向 <see cref="T:System.Threading.CountdownEvent" /> 註冊訊號，並遞減 <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 的值。</summary>
      <returns>如果訊號使計數到達零且設定事件則為 true，否則為 false。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">目前的執行個體已經設定。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Signal(System.Int32)">
      <summary>向 <see cref="T:System.Threading.CountdownEvent" /> 註冊多個訊號，並將 <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 的值遞減指定的數量。</summary>
      <returns>如果信號使計數到達零且設定事件則為 true，否則為 false。</returns>
      <param name="signalCount">要註冊的訊號數。</param>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signalCount" /> 小於 1。</exception>
      <exception cref="T:System.InvalidOperationException">目前的執行個體已經設定。或 <paramref name="signalCount" /> 大於 <see cref="P:System.Threading.CountdownEvent.CurrentCount" />。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.TryAddCount">
      <summary>嘗試將 <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 遞增一。</summary>
      <returns>如果遞增成功則為 true，否則為 false。如果 <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 已經位於零，這個方法將傳回 false。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 等於 <see cref="T:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.TryAddCount(System.Int32)">
      <summary>嘗試以指定的值遞增 <see cref="P:System.Threading.CountdownEvent.CurrentCount" />。</summary>
      <returns>如果遞增成功則為 true，否則為 false。如果 <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 已經為零，這將傳回 false。</returns>
      <param name="signalCount">
        <see cref="P:System.Threading.CountdownEvent.CurrentCount" /> 所要增加的值。</param>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signalCount" /> 小於或等於 0。</exception>
      <exception cref="T:System.InvalidOperationException">目前的執行個體已經設定。-或-<see cref="P:System.Threading.CountdownEvent.CurrentCount" /> + <paramref name="signalCount" />等於或大於 <see cref="T:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait">
      <summary>封鎖目前的執行緒，直到設定了 <see cref="T:System.Threading.CountdownEvent" /> 為止。</summary>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.Int32)">
      <summary>封鎖目前的執行緒，直到設定了 <see cref="T:System.Threading.CountdownEvent" /> 為止 (使用 32 位元帶正負號的整數以測量逾時)。</summary>
      <returns>如果已設定 <see cref="T:System.Threading.CountdownEvent" /> 則為 true，否則為 false。</returns>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>封鎖目前的執行緒，直到設定了 <see cref="T:System.Threading.CountdownEvent" /> 為止 (使用 32 位元帶正負號的整數以測量逾時)，同時觀察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>如果已設定 <see cref="T:System.Threading.CountdownEvent" /> 則為 true，否則為 false。</returns>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="cancellationToken">要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。-或者-已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.Threading.CancellationToken)">
      <summary>封鎖目前的執行緒，直到設定了 <see cref="T:System.Threading.CountdownEvent" /> 為止，同時觀察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <param name="cancellationToken">要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。-或者-已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.TimeSpan)">
      <summary>封鎖目前的執行緒，直到設定了 <see cref="T:System.Threading.CountdownEvent" /> 為止 (使用 <see cref="T:System.TimeSpan" /> 以測量逾時)。</summary>
      <returns>如果已設定 <see cref="T:System.Threading.CountdownEvent" /> 則為 true，否則為 false。</returns>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示要等候的毫秒數，或是 <see cref="T:System.TimeSpan" />，表示無限期等候的 -1 毫秒。</param>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是除了 -1 毫秒以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 的逾時。</exception>
    </member>
    <member name="M:System.Threading.CountdownEvent.Wait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>封鎖目前的執行緒，直到設定了 <see cref="T:System.Threading.CountdownEvent" /> 為止 (使用 <see cref="T:System.TimeSpan" /> 以測量逾時)，同時觀察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>如果已設定 <see cref="T:System.Threading.CountdownEvent" /> 則為 true，否則為 false。</returns>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示要等候的毫秒數，或是 <see cref="T:System.TimeSpan" />，表示無限期等候的 -1 毫秒。</param>
      <param name="cancellationToken">要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。-或者-已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是除了 -1 毫秒以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 的逾時。</exception>
    </member>
    <member name="P:System.Threading.CountdownEvent.WaitHandle">
      <summary>取得用來等候事件獲得設定的 <see cref="T:System.Threading.WaitHandle" />。</summary>
      <returns>
        <see cref="T:System.Threading.WaitHandle" />，其會用於等候事件獲得設定。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
    </member>
    <member name="T:System.Threading.EventResetMode">
      <summary>表示收到信號之後，是否會自動或手動重設 <see cref="T:System.Threading.EventWaitHandle" />。</summary>
    </member>
    <member name="F:System.Threading.EventResetMode.AutoReset">
      <summary>收到信號通知時，<see cref="T:System.Threading.EventWaitHandle" /> 在釋放單一執行緒後會自動重設。如果沒有任何執行緒在等待，則 <see cref="T:System.Threading.EventWaitHandle" /> 會保持收到信號的狀態，直到有執行緒被封鎖為止，接著就釋放這個執行緒並將自己重設。</summary>
    </member>
    <member name="F:System.Threading.EventResetMode.ManualReset">
      <summary>收到信號通知時，<see cref="T:System.Threading.EventWaitHandle" /> 會釋放所有正在等待的執行緒，並保持收到信號的狀態，直到被手動重設為止。</summary>
    </member>
    <member name="T:System.Threading.EventWaitHandle">
      <summary>表示執行緒同步處理事件。</summary>
    </member>
    <member name="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)">
      <summary>初始化 <see cref="T:System.Threading.EventWaitHandle" /> 類別的新執行個體、指定等候控制代碼是否一開始就會收到信號，以及是以自動還是手動方式來重設。</summary>
      <param name="initialState">true 表示會將初始狀態設定為已收到訊號，false 表示會將它設定為未收到訊號。</param>
      <param name="mode">其中一個 <see cref="T:System.Threading.EventResetMode" /> 值，判斷是以自動還是手動方式重設事件。</param>
    </member>
    <member name="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)">
      <summary>[安全性關鍵] 初始化 <see cref="T:System.Threading.EventWaitHandle" /> 類別的新執行個體、指定等候控制代碼是否一開始就會收到信號 (如果它是因這個呼叫而建立)、是以自動還是手動方式進行重設，以及系統同步處理事件的名稱。</summary>
      <param name="initialState">true 表示初始狀態設定為已收到訊號 (如果具名事件是因這個呼叫而建立)，false 表示會將它設定為未收到訊號。</param>
      <param name="mode">其中一個 <see cref="T:System.Threading.EventResetMode" /> 值，判斷是以自動還是手動方式重設事件。</param>
      <param name="name">整個系統的同步處理事件名稱。</param>
    </member>
    <member name="M:System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)">
      <summary>[安全性關鍵] 初始化 <see cref="T:System.Threading.EventWaitHandle" /> 類別的新執行個體、指定等候控制代碼是否一開始就會收到信號 (如果它是因這個呼叫而建立)、是以自動還是手動方式進行重設、系統同步處理事件的名稱，以及呼叫之後的布林變數值 (此值可指示是否已建立具名系統事件)。</summary>
      <param name="initialState">true 表示初始狀態設定為已收到訊號 (如果具名事件是因這個呼叫而建立)，false 表示會將它設定為未收到訊號。</param>
      <param name="mode">其中一個 <see cref="T:System.Threading.EventResetMode" /> 值，判斷是以自動還是手動方式重設事件。</param>
      <param name="name">整個系統的同步處理事件名稱。</param>
      <param name="createdNew">這個方法傳回時，如果已建立本機事件 (也就是說，如果 <paramref name="name" /> 為 null 或空字串)，或是已建立指定的具名系統事件，則會包含 true；如果指定的具名系統事件已存在，則為 false。這個參數會以未初始化的狀態傳遞。</param>
    </member>
    <member name="M:System.Threading.EventWaitHandle.OpenExisting(System.String)">
      <summary>[安全性關鍵] 如果它已存在，便會開啟指定的具名同步處理事件。</summary>
      <returns>表示具名系統事件的物件。</returns>
      <param name="name">要開啟之系統同步處理事件的名稱。</param>
    </member>
    <member name="M:System.Threading.EventWaitHandle.Reset">
      <summary>將事件的狀態設定為未收到信號，會造成執行緒封鎖。</summary>
      <returns>如果作業成功，則為 true，否則為 false。</returns>
      <exception cref="T:System.ObjectDisposedException">先前已在此 <see cref="T:System.Threading.EventWaitHandle" /> 上呼叫 <see cref="M:System.Threading.EventWaitHandle.Close" /> 方法。</exception>
    </member>
    <member name="M:System.Threading.EventWaitHandle.Set">
      <summary>將事件的狀態設定為未收到信號，讓一或多個等候執行緒繼續執行。</summary>
      <returns>如果作業成功，則為 true，否則為 false。</returns>
      <exception cref="T:System.ObjectDisposedException">先前已在此 <see cref="T:System.Threading.EventWaitHandle" /> 上呼叫 <see cref="M:System.Threading.EventWaitHandle.Close" /> 方法。</exception>
    </member>
    <member name="M:System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)">
      <summary>[安全性關鍵] 如果它已存在，便會開啟指定的具名同步處理事件，並傳回值，指出作業是否成功。</summary>
      <returns>如果已成功開啟具名同步處理事件，則為 true，否則為 false。</returns>
      <param name="name">要開啟之系統同步處理事件的名稱。</param>
      <param name="result">這個方法傳回時，如果呼叫成功，則會包含 <see cref="T:System.Threading.EventWaitHandle" /> 物件來表示具名同步處理事件，如果呼叫失敗，則為 null。這個參數會被視為未初始化。</param>
    </member>
    <member name="T:System.Threading.Interlocked">
      <summary>為多重執行緒共用的變數提供不可部分完成的作業 (Atomic Operation)。</summary>
    </member>
    <member name="M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)">
      <summary>將兩個 32 位元整數相加，並以總和取代第 1 個整數，成為不可部分完成的作業。</summary>
      <returns>新值儲存於 <paramref name="location1" />。</returns>
      <param name="location1">變數，包含要加入的第 1 個值。這兩個值的總和會存放在 <paramref name="location1" /> 中。</param>
      <param name="value">要加入 <paramref name="location1" /> 的整數的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)">
      <summary>將兩個 64 位元整數相加，並以總和取代第 1 個整數，成為不可部分完成的作業。</summary>
      <returns>儲存於 <paramref name="location1" /> 的新值。</returns>
      <param name="location1">變數，包含要加入的第 1 個值。這兩個值的總和會存放在 <paramref name="location1" /> 中。</param>
      <param name="value">要加入 <paramref name="location1" /> 的整數的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)">
      <summary>比較兩個雙精確度浮點數是否相等；如果相等，則取代其中一值。</summary>
      <returns>
        <paramref name="location1" /> 中的原始值。</returns>
      <param name="location1">目的端，其值是與 <paramref name="comparand" /> 進行比較且可能已被取代。</param>
      <param name="value">當比較的結果相等時，會取代目的端值的值。</param>
      <param name="comparand">與 <paramref name="location1" /> 的值比較的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)">
      <summary>比較兩個 32 位元帶正負號的整數是否相等；如果相等，則取代其中一值。</summary>
      <returns>
        <paramref name="location1" /> 中的原始值。</returns>
      <param name="location1">目的端，其值是與 <paramref name="comparand" /> 進行比較且可能會被取代。</param>
      <param name="value">當比較的結果相等時，會取代目的端值的值。</param>
      <param name="comparand">與 <paramref name="location1" /> 的值比較的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)">
      <summary>比較兩個 64 位元帶正負號的整數是否相等；如果相等，則取代其中一值。</summary>
      <returns>
        <paramref name="location1" /> 中的原始值。</returns>
      <param name="location1">目的端，其值是與 <paramref name="comparand" /> 進行比較且可能會被取代。</param>
      <param name="value">當比較的結果相等時，會取代目的端值的值。</param>
      <param name="comparand">與 <paramref name="location1" /> 的值比較的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)">
      <summary>比較兩個平台特定的控制代碼或指標是否相等；如果相等，則取代其中一個。</summary>
      <returns>
        <paramref name="location1" /> 中的原始值。</returns>
      <param name="location1">
        <see cref="T:System.IntPtr" /> 目的端，其值會與 <paramref name="comparand" /> 的值進行比較，且可能被 <paramref name="value" /> 所取代。</param>
      <param name="value">
        <see cref="T:System.IntPtr" />，當比較的結果相等時會取代目的端值。</param>
      <param name="comparand">
        <see cref="T:System.IntPtr" />，會與 <paramref name="location1" /> 的值相比較。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)">
      <summary>比較兩個物件的參考是否相等；如果相等，則取代其中一個物件。</summary>
      <returns>
        <paramref name="location1" /> 中的原始值。</returns>
      <param name="location1">目的端物件，此物件會與 <paramref name="comparand" /> 進行比較且可能被取代。</param>
      <param name="value">當比較的結果相等時，會取代目的端物件的物件。</param>
      <param name="comparand">與 <paramref name="location1" /> 的物件相比較的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="location1" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)">
      <summary>比較兩個單精確度浮點數是否相等；如果相等，則取代其中一值。</summary>
      <returns>
        <paramref name="location1" /> 中的原始值。</returns>
      <param name="location1">目的端，其值是與 <paramref name="comparand" /> 進行比較且可能已被取代。</param>
      <param name="value">當比較的結果相等時，會取代目的端值的值。</param>
      <param name="comparand">與 <paramref name="location1" /> 的值比較的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)">
      <summary>比較指定參考型別 <paramref name="T" /> 的兩個執行個體是否相等；如果相等，則取代其中一個。</summary>
      <returns>
        <paramref name="location1" /> 中的原始值。</returns>
      <param name="location1">目的端，其值是與 <paramref name="comparand" /> 進行比較且可能會被取代。此為參考參數 (在 C# 中為 ref，在 Visual Basic 中為 ByRef)。</param>
      <param name="value">當比較的結果相等時，會取代目的端值的值。</param>
      <param name="comparand">與 <paramref name="location1" /> 的值比較的值。</param>
      <typeparam name="T">要用於 <paramref name="location1" />、<paramref name="value" /> 和 <paramref name="comparand" /> 的型別。此型別必須是參考型別。</typeparam>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.Decrement(System.Int32@)">
      <summary>遞減特定 32 位元帶正負號整數的變數並將結果儲存起來，成為不可部分完成的作業。</summary>
      <returns>遞減後的值。</returns>
      <param name="location">值會被遞減的變數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="location" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.Decrement(System.Int64@)">
      <summary>遞減特定 64 位元帶正負號整數的變數並將結果儲存起來，成為不可部分完成的作業。</summary>
      <returns>遞減後的值。</returns>
      <param name="location">值會被遞減的變數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="location" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Double@,System.Double)">
      <summary>將雙精確度浮點數設定為指定值，然後傳回原始值，成為不可部分完成的作業。</summary>
      <returns>
        <paramref name="location1" /> 的原始值。</returns>
      <param name="location1">要設定為特定值的變數。</param>
      <param name="value">
        <paramref name="location1" /> 參數要設定成的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)">
      <summary>將 32 位元帶正負號的整數設定為指定值，然後傳回原始值，成為不可部分完成的作業。</summary>
      <returns>
        <paramref name="location1" /> 的原始值。</returns>
      <param name="location1">要設定為特定值的變數。</param>
      <param name="value">
        <paramref name="location1" /> 參數要設定成的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="location1" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)">
      <summary>將 64 位元帶正負號的整數設定為指定值，然後傳回原始值，成為不可部分完成的作業。</summary>
      <returns>
        <paramref name="location1" /> 的原始值。</returns>
      <param name="location1">要設定為特定值的變數。</param>
      <param name="value">
        <paramref name="location1" /> 參數要設定成的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)">
      <summary>將平台特定的控制代碼或指標設定為指定值，然後傳回原始值，成為不可部分完成的作業。</summary>
      <returns>
        <paramref name="location1" /> 的原始值。</returns>
      <param name="location1">要設定為特定值的變數。</param>
      <param name="value">
        <paramref name="location1" /> 參數要設定成的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Object@,System.Object)">
      <summary>將物件設定為指定值，然後傳回原始物件的參考，成為不可部分完成的作業。</summary>
      <returns>
        <paramref name="location1" /> 的原始值。</returns>
      <param name="location1">要設定為特定值的變數。</param>
      <param name="value">
        <paramref name="location1" /> 參數要設定成的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="location1" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange(System.Single@,System.Single)">
      <summary>將單精確度浮點數設定為指定值，然後傳回原始值，成為不可部分完成的作業。</summary>
      <returns>
        <paramref name="location1" /> 的原始值。</returns>
      <param name="location1">要設定為特定值的變數。</param>
      <param name="value">
        <paramref name="location1" /> 參數要設定成的值。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.Exchange``1(``0@,``0)">
      <summary>將指定型別 <paramref name="T" /> 的變數設定為指定值，然後傳回原始值，成為不可部分完成的作業。</summary>
      <returns>
        <paramref name="location1" /> 的原始值。</returns>
      <param name="location1">要設定為特定值的變數。此為參考參數 (在 C# 中為 ref，在 Visual Basic 中為 ByRef)。</param>
      <param name="value">
        <paramref name="location1" /> 參數要設定成的值。</param>
      <typeparam name="T">用於 <paramref name="location1" /> 和 <paramref name="value" /> 的型別。此型別必須是參考型別。</typeparam>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location1" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.Increment(System.Int32@)">
      <summary>遞增特定 32 位元帶正負號的變數並將結果儲存起來，成為不可部分完成的作業。</summary>
      <returns>遞增後的值。</returns>
      <param name="location">值會被遞增的變數。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.Increment(System.Int64@)">
      <summary>遞增特定 64 位元帶正負號整數的變數並將結果儲存起來，成為不可部分完成的作業。</summary>
      <returns>遞增後的值。</returns>
      <param name="location">值會被遞增的變數。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="location" /> 的位址是 null 指標。</exception>
    </member>
    <member name="M:System.Threading.Interlocked.MemoryBarrier">
      <summary>同步處理記憶體存取，如下所示：執行目前執行緒的處理器無法以下列方式重新排列指示：呼叫 <see cref="M:System.Threading.Interlocked.MemoryBarrier" /> 之前的記憶體存取在呼叫 <see cref="M:System.Threading.Interlocked.MemoryBarrier" /> 後的記憶體存取之後執行。</summary>
    </member>
    <member name="M:System.Threading.Interlocked.Read(System.Int64@)">
      <summary>傳回 64 位元的值 (載入為不可部分完成的作業)。</summary>
      <returns>載入的值。</returns>
      <param name="location">要載入的 64 位元值。</param>
    </member>
    <member name="T:System.Threading.IOCompletionCallback">
      <summary>[安全性關鍵] 當執行緒集區的 I/O 作業完成時，可接收錯誤碼、位元組的數目和重疊的實值型別 (Value Type)。</summary>
      <param name="errorCode">錯誤碼。</param>
      <param name="numBytes">傳輸的位元組數目。</param>
      <param name="pOVERLAP">
        <see cref="T:System.Threading.NativeOverlapped" />，表示原生 (Native) 重疊值型別的 Unmanaged 指標。 </param>
    </member>
    <member name="T:System.Threading.LazyInitializer">
      <summary>提供延遲初始化常式。</summary>
    </member>
    <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)">
      <summary>如果目標型別尚未初始化，則使用此型別的預設建構函式來初始化目標參考型別。</summary>
      <returns>型別 <paramref name="T" /> 的已初始化參考。</returns>
      <param name="target">要初始化 (如果尚未初始化) 的型別 <paramref name="T" /> 的參考。</param>
      <typeparam name="T">要初始化之參考的型別。</typeparam>
      <exception cref="T:System.MemberAccessException">缺少存取型別 <paramref name="T" />之建構函式的使用權限。</exception>
      <exception cref="T:System.MissingMemberException">
        <paramref name="T" /> 型別沒有預設的建構函式。</exception>
    </member>
    <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)">
      <summary>如果目標型別尚未初始化，則使用其預設建構函式來初始化目標的參考型別或實值型別。</summary>
      <returns>型別 <paramref name="T" /> 的已初始化實值。</returns>
      <param name="target">要初始化 (如果尚未初始化) 的型別 <paramref name=" T " /> 的參考或實值。</param>
      <param name="initialized">布林值的參考，這個值可判斷目標是否已初始化。</param>
      <param name="syncLock">物件的參考，這個物件用來當做初始化 <paramref name="target" /> 時的互斥鎖定。如果 <paramref name="syncLock" /> 是 null (在 Visual Basic 中為 Nothing)，則會執行個體化新的物件。</param>
      <typeparam name="T">要初始化之參考的型別。</typeparam>
      <exception cref="T:System.MemberAccessException">缺少存取型別 <paramref name="T" />之建構函式的使用權限。</exception>
      <exception cref="T:System.MissingMemberException">
        <paramref name="T" /> 型別沒有預設的建構函式。</exception>
    </member>
    <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})">
      <summary>如果目標型別尚未初始化，則使用指定的函式來初始化目標的參考或實值型別。</summary>
      <returns>型別 <paramref name="T" /> 的已初始化實值。</returns>
      <param name="target">要初始化 (如果尚未初始化) 的型別 <paramref name=" T " /> 的參考或實值。</param>
      <param name="initialized">布林值的參考，這個值可判斷目標是否已初始化。</param>
      <param name="syncLock">物件的參考，這個物件用來當做初始化 <paramref name="target" /> 時的互斥鎖定。如果 syncLock 是 null (在 Visual Basic 中為 Nothing)，則會執行個體化新的物件。</param>
      <param name="valueFactory">初始化參考或實值時所叫用的 <see cref="T:System.Func{T}" />。</param>
      <typeparam name="T">要初始化之參考的型別。</typeparam>
      <exception cref="T:System.MemberAccessException">缺少存取型別 <paramref name="T" />之建構函式的使用權限。</exception>
      <exception cref="T:System.MissingMemberException">
        <paramref name="T" /> 型別沒有預設的建構函式。</exception>
    </member>
    <member name="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})">
      <summary>如果目標型別尚未初始化，則使用指定的函式來初始化目標參考型別。</summary>
      <returns>型別 <paramref name="T" /> 的已初始化實值。</returns>
      <param name="target">要初始化 (如果尚未初始化) 的型別 <paramref name=" T " /> 的參考。</param>
      <param name="valueFactory">初始化參考時所叫用的 <see cref="T:System.Func{T}" />。</param>
      <typeparam name="T">要初始化之參考的參考型別。</typeparam>
      <exception cref="T:System.MissingMemberException">
        <paramref name=" T " /> 型別沒有預設的建構函式。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="valueFactory" />傳回 null (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="T:System.Threading.LazyThreadSafetyMode">
      <summary>指定 <see cref="T:System.Lazy`1" /> 執行個體如何同步處理多個執行緒進行的存取。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
      <summary>使用鎖定來確保只有單一執行緒能夠以安全執行緒方式初始化 <see cref="T:System.Lazy`1" /> 執行個體。如果初始設定方法 (如果沒有初始設定方法則為預設建構函式) 在內部使用鎖定，可能會發生死結。如果您使用的 <see cref="T:System.Lazy`1" /> 建構函式有指定初始設定方法 (<paramref name="valueFactory" /> 參數)，以及如果您在第一次呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時，初始設定方法擲回例外狀況 (或無法處理例外狀況)，則會快取此例外狀況，並在後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時再次擲回該例外狀況。如果您使用的 <see cref="T:System.Lazy`1" /> 建構函式未指定初始設定方法，則不會快取 <paramref name="T" /> 預設建構函式擲回的例外狀況。在這種情況下，後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性可能可以成功初始化 <see cref="T:System.Lazy`1" /> 執行個體。如果初始設定方法以遞迴方式存取 <see cref="T:System.Lazy`1" /> 執行個體的 <see cref="P:System.Lazy`1.Value" /> 屬性，則會擲回 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.None">
      <summary>
        <see cref="T:System.Lazy`1" /> 執行個體不具備執行緒安全；如果從多個執行緒存取此執行個體，則此執行個體會展現非預料的行為。只有在高度重視效能且絕對不會從多個執行緒初始化 <see cref="T:System.Lazy`1" /> 執行個體時，才能使用此模式。如果您使用的 <see cref="T:System.Lazy`1" /> 建構函式有指定初始設定方法 (<paramref name="valueFactory" /> 參數)，而且如果您在第一次呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時，初始設定方法擲回例外狀況 (或無法處理例外狀況)，則會快取此例外狀況，並在後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性時再次擲回該例外狀況。如果您使用的 <see cref="T:System.Lazy`1" /> 建構函式未指定初始設定方法，則不會快取 <paramref name="T" /> 預設建構函式擲回的例外狀況。在這種情況下，後續呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性可能可以成功初始化 <see cref="T:System.Lazy`1" /> 執行個體。如果初始設定方法以遞迴方式存取 <see cref="T:System.Lazy`1" /> 執行個體的 <see cref="P:System.Lazy`1.Value" /> 屬性，則會擲回 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
      <summary>當多個執行緒同時嘗試初始化 <see cref="T:System.Lazy`1" /> 執行個體時，允許所有執行緒執行初始設定方法 (如果沒有初始設定方法則為預設建構函式)。第 1 個完成初始設定的執行緒會設定 <see cref="T:System.Lazy`1" /> 執行個體的值。該值會傳回給任何其他同時執行初始設定方法的執行緒 (除非初始設定方法在這些執行緒上擲回例外狀況)。由這其他執行緒所建立的 <paramref name="T" /> 執行個體都會遭到捨棄。如果初始設定方法在任何執行緒上擲回例外狀況，該例外狀況會傳播至該執行緒上的 <see cref="P:System.Lazy`1.Value" /> 屬性以外的地方。例外狀況不會受到快取。<see cref="P:System.Lazy`1.IsValueCreated" /> 屬性的值會保持為 false，且後續無論是由擲回例外狀況所在的執行緒或是其他執行緒呼叫 <see cref="P:System.Lazy`1.Value" /> 屬性，都會再次執行初始設定方法。如果初始設定方法以遞迴方式存取 <see cref="T:System.Lazy`1" /> 執行個體的 <see cref="P:System.Lazy`1.Value" /> 屬性，則不會擲回例外狀況。</summary>
    </member>
    <member name="T:System.Threading.LockRecursionException">
      <summary>當遞迴進入鎖定與鎖定的遞迴原則不相符時，擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Threading.LockRecursionException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Threading.LockRecursionException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.LockRecursionException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.Threading.LockRecursionException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。這個建構函式的呼叫端必須確保這個字串已針對目前系統的文化特性，執行過當地語系化。</param>
    </member>
    <member name="M:System.Threading.LockRecursionException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.Threading.LockRecursionException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。這個建構函式的呼叫端必須確保這個字串已針對目前系統的文化特性，執行過當地語系化。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，則會在處理內部例外狀況的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.Threading.ManualResetEvent">
      <summary>告知一個以上的等候中執行緒已發生事件。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)">
      <summary>使用布林值初始化 <see cref="T:System.Threading.ManualResetEvent" /> 類別的新執行個體，指出是否將初始狀態是否設定為已通知。</summary>
      <param name="initialState">true 表示將初始狀態設定為通知，false 表示將初始狀態設定為不通知。</param>
    </member>
    <member name="T:System.Threading.ManualResetEventSlim">
      <summary>提供 <see cref="T:System.Threading.ManualResetEvent" /> 的精簡版本。</summary>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.#ctor">
      <summary>使用未收到訊號的初始狀態來初始化 <see cref="T:System.Threading.ManualResetEventSlim" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean)">
      <summary>使用布林值 (指出是否會將初始狀態設定為已收到訊號) 來初始化 <see cref="T:System.Threading.ManualResetEventSlim" /> 類別的新執行個體。</summary>
      <param name="initialState">true 表示會將初始狀態設定為已收到訊號，false 表示會將初始狀態設定為未收到訊號。</param>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)">
      <summary>使用布林值來初始化 <see cref="T:System.Threading.ManualResetEventSlim" /> 類別的新執行個體，該布林值會指示是否要將初始狀態設定為已收到訊號及指定的微調計數。</summary>
      <param name="initialState">true 表示會將初始狀態設定為已收到訊號，false 表示會將初始狀態設定為未收到訊號。</param>
      <param name="spinCount">在回到以核心為基礎的等候作業之前進行微調等候的次數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="spinCount" /> 小於 0 或大於允許的最大值。</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Dispose">
      <summary>將 <see cref="T:System.Threading.ManualResetEventSlim" /> 類別目前的執行個體所使用的資源全部釋出。</summary>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Threading.ManualResetEventSlim" /> 使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 以釋放 Managed 和 Unmanaged 資源，false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="P:System.Threading.ManualResetEventSlim.IsSet">
      <summary>取得值，表示事件是否已設定。</summary>
      <returns>如果已設定事件則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Reset">
      <summary>將事件的狀態設定為未收到信號，會造成執行緒封鎖。</summary>
      <exception cref="T:System.ObjectDisposedException">此物件已經過處置。</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Set">
      <summary>將事件的狀態設定為已收到訊號，讓正在等候該事件的一個或多個執行緒繼續執行。</summary>
    </member>
    <member name="P:System.Threading.ManualResetEventSlim.SpinCount">
      <summary>取得在回到以核心為基礎的等候作業之前進行微調等候的次數。</summary>
      <returns>傳回在回到以核心為基礎的等候作業之前進行微調等候的次數。</returns>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait">
      <summary>封鎖目前的執行緒，直到設定了目前的 <see cref="T:System.Threading.ManualResetEventSlim" /> 為止。</summary>
      <exception cref="T:System.InvalidOperationException">已經超過等候者最大數目。</exception>
      <exception cref="T:System.ObjectDisposedException">此物件已經過處置。</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.Int32)">
      <summary>封鎖目前的執行緒，直到設定了目前的 <see cref="T:System.Threading.ManualResetEventSlim" /> 為止 (使用 32 位元帶正負號的整數以測量時間間隔)。</summary>
      <returns>如果已設定 <see cref="T:System.Threading.ManualResetEventSlim" /> 則為 true，否則為 false。</returns>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
      <exception cref="T:System.InvalidOperationException">已經超過等候者最大數目。</exception>
      <exception cref="T:System.ObjectDisposedException">此物件已經過處置。</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>封鎖目前的執行緒，直到設定了目前的 <see cref="T:System.Threading.ManualResetEventSlim" /> 為止，並使用 32 位元帶正負號的整數以量測時間間隔，同時觀察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>如果已設定 <see cref="T:System.Threading.ManualResetEventSlim" /> 則為 true，否則為 false。</returns>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="cancellationToken">要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.Threading.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
      <exception cref="T:System.InvalidOperationException">已經超過等候者最大數目。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置物件，或者已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)">
      <summary>封鎖目前的執行緒，直到目前的 <see cref="T:System.Threading.ManualResetEventSlim" /> 收到訊號為止，同時觀察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <param name="cancellationToken">要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">已經超過等候者最大數目。</exception>
      <exception cref="T:System.OperationCanceledExcepton">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置物件，或者已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)">
      <summary>封鎖目前的執行緒，直到設定了目前的 <see cref="T:System.Threading.ManualResetEventSlim" /> 為止，並使用 <see cref="T:System.TimeSpan" /> 以量測時間間隔。</summary>
      <returns>如果已設定 <see cref="T:System.Threading.ManualResetEventSlim" /> 則為 true，否則為 false。</returns>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示要等候的毫秒數，或是 <see cref="T:System.TimeSpan" />，表示無限期等候的 -1 毫秒。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是除了 -1 毫秒以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 的逾時。</exception>
      <exception cref="T:System.InvalidOperationException">已經超過等候者最大數目。</exception>
      <exception cref="T:System.ObjectDisposedException">此物件已經過處置。</exception>
    </member>
    <member name="M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>封鎖目前的執行緒，直到設定了目前的 <see cref="T:System.Threading.ManualResetEventSlim" /> 為止，並使用 <see cref="T:System.TimeSpan" /> 以量測時間間隔，同時觀察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>如果已設定 <see cref="T:System.Threading.ManualResetEventSlim" /> 則為 true，否則為 false。</returns>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示要等候的毫秒數，或是 <see cref="T:System.TimeSpan" />，表示無限期等候的 -1 毫秒。</param>
      <param name="cancellationToken">要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.Threading.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是除了 -1 毫秒以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 的逾時。</exception>
      <exception cref="T:System.InvalidOperationException">已經超過等候者最大數目。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置物件，或者已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="P:System.Threading.ManualResetEventSlim.WaitHandle">
      <summary>取得這個 <see cref="T:System.Threading.ManualResetEventSlim" /> 的基礎 <see cref="T:System.Threading.WaitHandle" /> 物件。</summary>
      <returns>這個 <see cref="T:System.Threading.ManualResetEventSlim" /> 的基礎 <see cref="T:System.Threading.WaitHandle" /> 事件物件。</returns>
    </member>
    <member name="T:System.Threading.Monitor">
      <summary>提供一套機制，同步處理物件的存取。</summary>
    </member>
    <member name="M:System.Threading.Monitor.Enter(System.Object)">
      <summary>取得指定物件的獨佔鎖定。</summary>
      <param name="obj">要從其上取得監視器鎖定的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)">
      <summary>取得指定之物件的獨佔鎖定，並且完整設定值，指出是否採用鎖定。</summary>
      <param name="obj">要等候的物件。</param>
      <param name="lockTaken">嘗試取得鎖定的結果 (以傳址方式傳遞)。輸入必須是 false。如果已取得鎖定，輸出就是 true，否則輸出為 false。嘗試取得鎖定期間，即使發生例外狀況，仍然會設定輸出。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="lockTaken" /> 的輸入為 true。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Threading.Monitor.Exit(System.Object)">
      <summary>釋出指定物件的獨佔鎖定。</summary>
      <param name="obj">要從其上釋出鎖定的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 參數為 null。</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">目前執行緒沒有指定物件的鎖定。</exception>
    </member>
    <member name="M:System.Threading.Monitor.IsEntered(System.Object)">
      <summary>決定目前執行緒在指定的物件上是否擁有鎖定。</summary>
      <returns>如果目前執行緒取得 <paramref name="obj" /> 的鎖定，則為 true，否則為 false。 </returns>
      <param name="obj">要測試的物件。</param>
    </member>
    <member name="M:System.Threading.Monitor.Pulse(System.Object)">
      <summary>通知等候佇列中的執行緒，鎖定物件的狀態有所變更。</summary>
      <param name="obj">執行緒正等候的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 參數為 null。</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">呼叫執行緒沒有指定物件的鎖定。</exception>
    </member>
    <member name="M:System.Threading.Monitor.PulseAll(System.Object)">
      <summary>通知所有等候中的執行緒，物件的狀態有所變更。</summary>
      <param name="obj">送出 Pulse 的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 參數為 null。</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">呼叫執行緒沒有指定物件的鎖定。</exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object)">
      <summary>嘗試取得指定物件的獨佔鎖定。</summary>
      <returns>如果目前執行緒取得鎖定，則為 true，否則為 false。</returns>
      <param name="obj">要取得鎖定的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)">
      <summary>嘗試取得指定之物件的獨佔鎖定，並且完整設定值，指出是否採用鎖定。</summary>
      <param name="obj">要取得鎖定的物件。</param>
      <param name="lockTaken">嘗試取得鎖定的結果 (以傳址方式傳遞)。輸入必須是 false。如果已取得鎖定，輸出就是 true，否則輸出為 false。嘗試取得鎖定期間，即使發生例外狀況，仍然會設定輸出。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="lockTaken" /> 的輸入為 true。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)">
      <summary>嘗試取得指定物件的獨佔鎖定 (在指定的毫秒數時間內)。</summary>
      <returns>如果目前執行緒取得鎖定，則為 true，否則為 false。</returns>
      <param name="obj">要取得鎖定的物件。</param>
      <param name="millisecondsTimeout">等候鎖定的毫秒數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是負數，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)">
      <summary>嘗試在指定的毫秒數內取得指定之物件的獨佔鎖定，並且完整設定值，指出是否採用鎖定。</summary>
      <param name="obj">要取得鎖定的物件。</param>
      <param name="millisecondsTimeout">等候鎖定的毫秒數。</param>
      <param name="lockTaken">嘗試取得鎖定的結果 (以傳址方式傳遞)。輸入必須是 false。如果已取得鎖定，輸出就是 true，否則輸出為 false。嘗試取得鎖定期間，即使發生例外狀況，仍然會設定輸出。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="lockTaken" /> 的輸入為 true。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是負數，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)">
      <summary>嘗試取得指定物件的獨佔鎖定 (在指定的時間內)。</summary>
      <returns>如果目前執行緒不封鎖而取得鎖定，則為 true，否則為 false。</returns>
      <param name="obj">要取得鎖定的物件。</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示等候鎖定的時間量。-1 毫秒的值會指定無限期等候。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 的毫秒值是負數，且不等於 <see cref="F:System.Threading.Timeout.Infinite" /> (-1 毫秒)，或是它大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)">
      <summary>嘗試在指定的時間內取得指定之物件的獨佔鎖定，並且完整設定值，指出是否採用鎖定。</summary>
      <param name="obj">要取得鎖定的物件。</param>
      <param name="timeout">等候鎖定的時間長度。-1 毫秒的值會指定無限期等候。</param>
      <param name="lockTaken">嘗試取得鎖定的結果 (以傳址方式傳遞)。輸入必須是 false。如果已取得鎖定，輸出就是 true，否則輸出為 false。嘗試取得鎖定期間，即使發生例外狀況，仍然會設定輸出。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="lockTaken" /> 的輸入為 true。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 參數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 的毫秒值是負數，且不等於 <see cref="F:System.Threading.Timeout.Infinite" /> (-1 毫秒)，或是它大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object)">
      <summary>釋出物件的鎖並且封鎖目前的執行緒，直到此執行緒重新取得鎖定為止。</summary>
      <returns>如果因為呼叫端重新取得指定物件的鎖定所以呼叫被傳回，則為 true。如果鎖定不被重新取得，則此方法不會傳回。</returns>
      <param name="obj">要等候的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 參數為 null。</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">呼叫執行緒沒有指定物件的鎖定。</exception>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.Int32)">
      <summary>釋出物件的鎖並且封鎖目前的執行緒，直到此執行緒重新取得鎖定為止。如果超過指定的逾時間隔時間，執行緒會進入就緒序列。</summary>
      <returns>如果在經過指定的時間之前重新取得鎖定，則為 true，如果在經過指定的時間之後重新取得鎖定，則為 false。要等到重新取得鎖定之後，此方法才會傳回。</returns>
      <param name="obj">要等候的物件。</param>
      <param name="millisecondsTimeout">在執行緒進入就緒序列之前要等候的毫秒數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 參數為 null。</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">呼叫執行緒沒有指定物件的鎖定。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 參數的值是負數，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
    </member>
    <member name="M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)">
      <summary>釋出物件的鎖並且封鎖目前的執行緒，直到此執行緒重新取得鎖定為止。如果超過指定的逾時間隔時間，執行緒會進入就緒序列。</summary>
      <returns>如果在經過指定的時間之前重新取得鎖定，則為 true，如果在經過指定的時間之後重新取得鎖定，則為 false。要等到重新取得鎖定之後，此方法才會傳回。</returns>
      <param name="obj">要等候的物件。</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" /> 表示在執行緒進入就緒序列之前要等候的時間量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 參數為 null。</exception>
      <exception cref="T:System.Threading.SynchronizationLockException">呼叫執行緒沒有指定物件的鎖定。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 參數的毫秒值是負數，且不表示 <see cref="F:System.Threading.Timeout.Infinite" /> (-1 毫秒)，或是它大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="T:System.Threading.Mutex">
      <summary>也可用在處理序間同步處理的同步處理基本作業。</summary>
    </member>
    <member name="M:System.Threading.Mutex.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.Threading.Mutex" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.Mutex.#ctor(System.Boolean)">
      <summary>使用布林值 (Boolean)，初始化 <see cref="T:System.Threading.Mutex" /> 類別的新執行個體，指出呼叫執行緒是否應該具有 Mutex 的初始擁有權。</summary>
      <param name="initiallyOwned">如果要把 Mutex 的初始擁有權提供給呼叫執行緒，則為 true，否則為 false。</param>
    </member>
    <member name="M:System.Threading.Mutex.#ctor(System.Boolean,System.String)">
      <summary>使用指示呼叫執行緒是否應在最初擁有 mutex 的布林值及作為 mutex 名稱的字串，來初始化 <see cref="T:System.Threading.Mutex" /> 類別的新執行個體。</summary>
      <param name="initiallyOwned">如果此呼叫的結果建立了具名系統 Mutex，而要提供具名系統 Mutex 的呼叫執行緒初始擁有權，則為 true，否則為 false。</param>
      <param name="name">
        <see cref="T:System.Threading.Mutex" /> 的名稱。如果值為 null，則表示 <see cref="T:System.Threading.Mutex" /> 是未命名狀態。</param>
      <exception cref="T:System.UnauthorizedAccessException">具名 mutex 存在且有存取控制安全性，但是使用者並沒有 <see cref="F:System.Security.AccessControl.MutexRights.FullControl" />。</exception>
      <exception cref="T:System.ApplicationException">無法建立具名 mutex，可能是因為有另一種型別的等候控制代碼使用相同的名稱。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 長度超過 260 個字元。</exception>
    </member>
    <member name="M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)"></member>
    <member name="M:System.Threading.Mutex.OpenExisting(System.String)">
      <summary>[安全性關鍵] 如果它已存在，便會開啟指定的具名 Mutex。</summary>
      <returns>表示具名系統 Mutex 的物件。</returns>
      <param name="name">要開啟之系統 Mutex 的名稱。</param>
    </member>
    <member name="M:System.Threading.Mutex.ReleaseMutex">
      <summary>釋放 <see cref="T:System.Threading.Mutex" /> 一次。</summary>
      <exception cref="T:System.ApplicationException">呼叫端執行緒並不擁有 mutex。</exception>
    </member>
    <member name="M:System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)"></member>
    <member name="T:System.Threading.NativeOverlapped">
      <summary>提供明確配置，這套配置從 Unmanaged 程式碼可以看出，並且配置和 Win32 OVERLAPPED 結構相同，結尾還外加有保留欄位。</summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.EventHandle">
      <summary>指定事件的控制碼，當作業完成時會被設定為信號狀態。呼叫程序必須先把此成員設定為零或是有效的事件控制代碼，才能呼叫重疊的函式。</summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.InternalHigh">
      <summary>指定所傳輸資料的長度。保留供作業系統使用。</summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.InternalLow">
      <summary>指定系統相依的狀態。保留供作業系統使用。</summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.OffsetHigh">
      <summary>指定傳輸開始之處位元組的位移的高位字。</summary>
    </member>
    <member name="F:System.Threading.NativeOverlapped.OffsetLow">
      <summary>指定開始傳輸的檔案位置。</summary>
    </member>
    <member name="T:System.Threading.Overlapped">
      <summary>提供 Win32 OVERLAPPED 結構的 Managed 表示，包括將資訊從 <see cref="T:System.Threading.Overlapped" /> 執行個體傳輸到 <see cref="T:System.Threading.NativeOverlapped" /> 結構的方法。</summary>
    </member>
    <member name="M:System.Threading.Overlapped.#ctor">
      <summary>初始化 <see cref="T:System.Threading.Overlapped" /> 類別的空白新執行個體。</summary>
    </member>
    <member name="P:System.Threading.Overlapped.AsyncResult">
      <summary>取得或設定提供 I/O 作業狀態資訊的物件。</summary>
      <returns>實作 <see cref="T:System.IAsyncResult" /> 介面的物件。</returns>
    </member>
    <member name="P:System.Threading.Overlapped.OffsetHigh">
      <summary>取得或設定要開始傳輸之檔案位置的高序位文字。檔案位置在離檔案開頭一個位元組位移的地方。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，指出檔案位置的高位文字。</returns>
    </member>
    <member name="P:System.Threading.Overlapped.OffsetLow">
      <summary>取得或設定要開始傳輸之檔案位置的低序位文字。檔案位置在離檔案開頭一個位元組位移的地方。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，指出檔案位置的低位文字。</returns>
    </member>
    <member name="T:System.Threading.ParameterizedThreadStart">
      <summary>表示在 <see cref="T:System.Threading.Thread" /> 上執行的方法。</summary>
      <param name="obj">物件，包含執行緒程序的資料。</param>
    </member>
    <member name="T:System.Threading.RegisteredWaitHandle">
      <summary>表示呼叫 <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> 時已經登錄的控制代碼。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
      <summary>將 <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> 方法所發出之已登錄等候作業取消。</summary>
      <returns>如果函式成功，則為 true，否則為 false。</returns>
      <param name="waitObject">要通知的 <see cref="T:System.Threading.WaitHandle" />。</param>
    </member>
    <member name="T:System.Threading.SemaphoreFullException">
      <summary>在已經達到最大計數的號誌上呼叫 <see cref="Overload:System.Threading.Semaphore.Release" /> 方法時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Threading.SemaphoreFullException.#ctor">
      <summary>使用預設值，初始化 <see cref="T:System.Threading.SemaphoreFullException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.SemaphoreFullException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Threading.SemaphoreFullException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Threading.SemaphoreFullException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.Threading.SemaphoreFullException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，則會在處理內部例外狀況的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.Threading.SemaphoreSlim">
      <summary>
        <see cref="T:System.Threading.Semaphore" /> 的輕量型替代品，限制可同時存取一項資源或資源集區的執行緒數目。</summary>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.#ctor(System.Int32)">
      <summary>指定可同時授與的初始要求數目，初始化 <see cref="T:System.Threading.SemaphoreSlim" /> 類別的新執行個體。</summary>
      <param name="initialCount">可同時授與給號誌的初始要求數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialCount" /> 小於 0。</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)">
      <summary>指定可同時授與的初始要求數目及最大數目，初始化 <see cref="T:System.Threading.SemaphoreSlim" /> 類別的新執行個體。</summary>
      <param name="initialCount">可同時授與給號誌的初始要求數目。</param>
      <param name="maxCount">可以同時授與之號誌要求的最大數目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialCount" /> 小於 0，或者 <paramref name="initialCount" /> 大於 <paramref name="maxCount" />，或者 <paramref name="maxCount" /> 等於或小於 0。</exception>
    </member>
    <member name="P:System.Threading.SemaphoreSlim.AvailableWaitHandle">
      <summary>傳回可用來等候號誌的 <see cref="T:System.Threading.WaitHandle" />。</summary>
      <returns>可用來等候號誌的 <see cref="T:System.Threading.WaitHandle" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.SemaphoreSlim" /> 已經處置。</exception>
    </member>
    <member name="P:System.Threading.SemaphoreSlim.CurrentCount">
      <summary>取得可以進入 <see cref="T:System.Threading.SemaphoreSlim" /> 的執行緒數目。</summary>
      <returns>
        <see cref="T:System.Threading.SemaphoreSlim" /> 目前的計數。</returns>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Dispose">
      <summary>將 <see cref="T:System.Threading.SemaphoreSlim" /> 類別目前的執行個體所使用的資源全部釋出。</summary>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Threading.ManualResetEventSlim" /> 使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">true 以釋放 Managed 和 Unmanaged 資源，false 則僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Release">
      <summary>結束 <see cref="T:System.Threading.SemaphoreSlim" /> 一次。</summary>
      <returns>
        <see cref="T:System.Threading.SemaphoreSlim" /> 的先前計數。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.Threading.SemaphoreFullException">
        <see cref="T:System.Threading.SemaphoreSlim" /> 已經達到其大小上限。</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Release(System.Int32)">
      <summary>結束 <see cref="T:System.Threading.SemaphoreSlim" /> 指定的次數。</summary>
      <returns>
        <see cref="T:System.Threading.SemaphoreSlim" /> 的先前計數。</returns>
      <param name="releaseCount">結束號誌的次數。</param>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="releaseCount" /> 小於 1。</exception>
      <exception cref="T:System.Threading.SemaphoreFullException">
        <see cref="T:System.Threading.SemaphoreSlim" /> 已經達到其大小上限。</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait">
      <summary>執行封鎖目前的執行緒，直到此執行緒可以進入 <see cref="T:System.Threading.SemaphoreSlim" /> 為止。</summary>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.Int32)">
      <summary>執行封鎖目前的執行緒，直到此執行緒可以進入 <see cref="T:System.Threading.SemaphoreSlim" /> 為止 (使用 32 位元帶正負號的整數以測量時間間隔)。</summary>
      <returns>如果目前執行緒已成功進入 <see cref="T:System.Threading.SemaphoreSlim" />，則為 true，否則為 false。</returns>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>封鎖目前的執行緒，直到此執行緒可以進入 <see cref="T:System.Threading.SemaphoreSlim" /> 為止 (使用 32 位元帶正負號整數以指定逾時)，同時觀察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>如果目前執行緒已成功進入 <see cref="T:System.Threading.SemaphoreSlim" />，則為 true，否則為 false。</returns>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="cancellationToken">要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="T:System.Threading.SemaphoreSlim" /> 執行個體，或是已處置建立<paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)">
      <summary>封鎖目前的執行緒，直到此執行緒可以進入 <see cref="T:System.Threading.SemaphoreSlim" /> 為止，同時觀察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <param name="cancellationToken">要觀察的 <see cref="T:System.Threading.CancellationToken" /> 語彙基元。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。-或-已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)">
      <summary>封鎖目前的執行緒，直到此執行緒可以進入 <see cref="T:System.Threading.SemaphoreSlim" /> 為止 (使用 <see cref="T:System.TimeSpan" /> 以指定逾時)。</summary>
      <returns>如果目前執行緒已成功進入 <see cref="T:System.Threading.SemaphoreSlim" />，則為 true，否則為 false。</returns>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示要等候的毫秒數，或是 <see cref="T:System.TimeSpan" />，表示無限期等候的 -1 毫秒。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是除了 -1 毫秒以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 的逾時。</exception>
      <exception cref="T:System.ObjectDisposedException">semaphoreSlim 執行個體已經處置 <paramref name="." /></exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>封鎖目前的執行緒，直到此執行緒可以進入 <see cref="T:System.Threading.SemaphoreSlim" /> 為止 (使用 <see cref="T:System.TimeSpan" /> 以指定逾時)，同時觀察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>如果目前執行緒已成功進入 <see cref="T:System.Threading.SemaphoreSlim" />，則為 true，否則為 false。</returns>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示要等候的毫秒數，或是 <see cref="T:System.TimeSpan" />，表示無限期等候的 -1 毫秒。</param>
      <param name="cancellationToken">要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是除了 -1 毫秒以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 的逾時。</exception>
      <exception cref="T:System.ObjectDisposedException">semaphoreSlim 執行個體已經處置 <paramref name="." /><paramref name="-or-" />已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.WaitAsync">
      <summary>以非同步方式等候 <see cref="T:System.Threading.SemaphoreSlim" /> 的輸入。</summary>
      <returns>將會在輸入號誌時完成的工作。</returns>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)">
      <summary>以非同步方式等候 <see cref="SemaphoreSlim" /> 的輸入，使用 32 位元帶正負號的整數來測量時間間隔。</summary>
      <returns>如果目前的執行緒成功輸入 <see cref="T:System.Threading.SemaphoreSlim" />，將利用 true 的結果加以完成的工作，否則結果為 false。</returns>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>以非同步方式等候 <see cref="T:System.Threading.SemaphoreSlim" /> 的輸入，使用 32 位元帶正負號的整數來測量時間間隔，同時還能觀察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>如果目前的執行緒成功輸入 <see cref="T:System.Threading.SemaphoreSlim" />，將利用 true 的結果加以完成的工作，否則結果為 false。</returns>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="cancellationToken">要觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)">
      <summary>以非同步方式等候 <see cref="T:System.Threading.SemaphoreSlim" /> 的輸入，同時還能觀察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>將會在輸入號誌時完成的工作。</returns>
      <param name="cancellationToken">要觀察的 <see cref="T:System.Threading.CancellationToken" /> 語彙基元。</param>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)">
      <summary>以非同步方式等候 <see cref="T:System.Threading.SemaphoreSlim" /> 的輸入，使用 <see cref="T:System.TimeSpan" /> 來測量時間間隔。</summary>
      <returns>如果目前的執行緒成功輸入 <see cref="T:System.Threading.SemaphoreSlim" />，將利用 true 的結果加以完成的工作，否則結果為 false。</returns>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示要等候的毫秒數，或是 <see cref="T:System.TimeSpan" />，表示無限期等候的 -1 毫秒。</param>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示等候逾時為無限。-或-等候逾時大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>以非同步方式等候 <see cref="T:System.Threading.SemaphoreSlim" /> 的輸入，使用 <see cref="T:System.TimeSpan" /> 來測量時間間隔，同時還能觀察 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>如果目前的執行緒成功輸入 <see cref="T:System.Threading.SemaphoreSlim" />，將利用 true 的結果加以完成的工作，否則結果為 false。</returns>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示要等候的毫秒數，或是 <see cref="T:System.TimeSpan" />，表示無限期等候的 -1 毫秒。</param>
      <param name="cancellationToken">要觀察的 <see cref="T:System.Threading.CancellationToken" /> 語彙基元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示等候逾時為無限。-或-等候逾時大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="T:System.Threading.SendOrPostCallback">
      <summary>表示要將訊息分派至同步處理內容時，所要呼叫的方法。</summary>
      <param name="state">傳送至委派的物件。</param>
    </member>
    <member name="T:System.Threading.SpinLock">
      <summary>提供互斥鎖定基本作業，在這個作業中，嘗試取得鎖定的執行緒會用迴圈方式等候，並重複檢查，直到鎖定可用為止。</summary>
    </member>
    <member name="M:System.Threading.SpinLock.#ctor(System.Boolean)">
      <summary>使用可追蹤執行緒 ID 以改善偵錯的選項，初始化 <see cref="T:System.Threading.SpinLock" /> 結構的新執行個體。</summary>
      <param name="enableThreadOwnerTracking">是否要擷取並使用執行緒 ID 以進行偵錯。</param>
    </member>
    <member name="M:System.Threading.SpinLock.Enter(System.Boolean@)">
      <summary>以可靠的方式取得鎖定，例如即使方法呼叫中發生例外狀況，還是能可靠地檢查 <paramref name="lockTaken" /> 以判斷是否已取得鎖定。</summary>
      <param name="lockTaken">如果取得鎖定則為 true，否則為 false。<paramref name="lockTaken" /> 必須在呼叫這個方法之前初始化為 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="lockTaken" /> 引數必須在呼叫 Enter 之前初始化為 False。</exception>
      <exception cref="T:System.Threading.LockRecursionException">已啟用執行緒擁有權追蹤，且目前的執行緒已經取得這個鎖定。</exception>
    </member>
    <member name="M:System.Threading.SpinLock.Exit">
      <summary>釋放鎖定。</summary>
      <exception cref="T:System.Threading.SynchronizationLockException">已啟用執行緒擁有權追蹤，且目前的執行緒不是這個鎖定的擁有者。</exception>
    </member>
    <member name="M:System.Threading.SpinLock.Exit(System.Boolean)">
      <summary>釋放鎖定。</summary>
      <param name="useMemoryBarrier">布林值，表示是否應該發出記憶體柵欄，以便立即將結束作業發行至其他執行緒。</param>
      <exception cref="T:System.Threading.SynchronizationLockException">已啟用執行緒擁有權追蹤，且目前的執行緒不是這個鎖定的擁有者。</exception>
    </member>
    <member name="P:System.Threading.SpinLock.IsHeld">
      <summary>取得值，這個值表示此鎖定目前是否由任何執行緒持有。</summary>
      <returns>如果此鎖定目前由任何執行緒持有則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Threading.SpinLock.IsHeldByCurrentThread">
      <summary>取得值，表示此鎖定是否由目前執行緒持有。</summary>
      <returns>如果此鎖定由目前執行緒持有則為 true，否則為 false。</returns>
      <exception cref="T:System.InvalidOperationException">已停用執行緒擁有權追蹤。</exception>
    </member>
    <member name="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled">
      <summary>取得值，表示這個執行個體是否已啟用執行緒擁有權追蹤。</summary>
      <returns>如果這個執行個體已啟用執行緒擁有權追蹤則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Threading.SpinLock.TryEnter(System.Boolean@)">
      <summary>嘗試以可靠的方式取得鎖定，例如即使方法呼叫中發生例外狀況，還是能可靠地檢查 <paramref name="lockTaken" /> 以判斷是否已取得鎖定。</summary>
      <param name="lockTaken">如果取得鎖定則為 true，否則為 false。<paramref name="lockTaken" /> 必須在呼叫這個方法之前初始化為 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="lockTaken" /> 引數必須在呼叫 TryEnter 之前初始化為 False。</exception>
      <exception cref="T:System.Threading.LockRecursionException">已啟用執行緒擁有權追蹤，且目前的執行緒已經取得這個鎖定。</exception>
    </member>
    <member name="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)">
      <summary>嘗試以可靠的方式取得鎖定，例如即使方法呼叫中發生例外狀況，還是能可靠地檢查 <paramref name="lockTaken" /> 以判斷是否已取得鎖定。</summary>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="lockTaken">如果取得鎖定則為 true，否則為 false。<paramref name="lockTaken" /> 必須在呼叫這個方法之前初始化為 false。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="lockTaken" /> 引數必須在呼叫 TryEnter 之前初始化為 False。</exception>
      <exception cref="T:System.Threading.LockRecursionException">已啟用執行緒擁有權追蹤，且目前的執行緒已經取得這個鎖定。</exception>
    </member>
    <member name="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)">
      <summary>嘗試以可靠的方式取得鎖定，例如即使方法呼叫中發生例外狀況，還是能可靠地檢查 <paramref name="lockTaken" /> 以判斷是否已取得鎖定。</summary>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示要等候的毫秒數，或是 <see cref="T:System.TimeSpan" />，表示無限期等候的 -1 毫秒。</param>
      <param name="lockTaken">如果取得鎖定則為 true，否則為 false。<paramref name="lockTaken" /> 必須在呼叫這個方法之前初始化為 false。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是除了 -1 毫秒以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 毫秒的逾時。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="lockTaken" /> 引數必須在呼叫 TryEnter 之前初始化為 False。</exception>
      <exception cref="T:System.Threading.LockRecursionException">已啟用執行緒擁有權追蹤，且目前的執行緒已經取得這個鎖定。</exception>
    </member>
    <member name="T:System.Threading.SpinWait">
      <summary>提供微調式等候支援。</summary>
    </member>
    <member name="P:System.Threading.SpinWait.Count">
      <summary>取得已在這個執行個體上呼叫 <see cref="M:System.Threading.SpinWait.SpinOnce" /> 的次數。</summary>
      <returns>傳回整數，表示已在這個執行個體上呼叫 <see cref="M:System.Threading.SpinWait.SpinOnce" /> 的次數。</returns>
    </member>
    <member name="P:System.Threading.SpinWait.NextSpinWillYield">
      <summary>取得值，這個值表示下一次呼叫 <see cref="M:System.Threading.SpinWait.SpinOnce" /> 時是否讓出處理器，並觸發強制的環境切換。</summary>
      <returns>下一次呼叫 <see cref="M:System.Threading.SpinWait.SpinOnce" /> 時是否讓出處理器，並觸發強制的環境切換。</returns>
    </member>
    <member name="M:System.Threading.SpinWait.Reset">
      <summary>重設微調計數器。</summary>
    </member>
    <member name="M:System.Threading.SpinWait.SpinOnce">
      <summary>執行單一微調。</summary>
    </member>
    <member name="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})">
      <summary>執行微調，直到滿足指定的條件為止。</summary>
      <param name="condition">會重複執行直到傳回 true 為止的委派。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)">
      <summary>執行微調，直到滿足指定的條件或是指定的逾時過期為止。</summary>
      <returns>如果滿足條件則為 true，否則為 false。</returns>
      <param name="condition">會重複執行直到傳回 true 為止的委派。</param>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
    </member>
    <member name="M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)">
      <summary>執行微調，直到滿足指定的條件或是指定的逾時過期為止。</summary>
      <returns>如果滿足條件則為 true，否則為 false。</returns>
      <param name="condition">會重複執行直到傳回 true 為止的委派。</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示要等候的毫秒數，或是 TimeSpan，表示無限期等候的 -1 毫秒。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是除了 -1 毫秒以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 的逾時。</exception>
    </member>
    <member name="T:System.Threading.SynchronizationContext">
      <summary>提供在各種同步處理模式中散佈同步處理內容的基本功能。</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.#ctor">
      <summary>建立 <see cref="T:System.Threading.SynchronizationContext" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.CreateCopy">
      <summary>在衍生類別中覆寫時，會建立同步處理內容的複本。</summary>
      <returns>新的 <see cref="T:System.Threading.SynchronizationContext" /> 物件</returns>
    </member>
    <member name="P:System.Threading.SynchronizationContext.Current">
      <summary>取得目前執行緒的同步處理內容。</summary>
      <returns>
        <see cref="T:System.Threading.SynchronizationContext" /> 物件，表示目前的同步處理內容。</returns>
    </member>
    <member name="M:System.Threading.SynchronizationContext.OperationCompleted">
      <summary>在衍生類別中覆寫時，會回應作業已經完成的通知。</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.OperationStarted">
      <summary>在衍生類別中覆寫時，會回應作業已經啟動的通知。</summary>
    </member>
    <member name="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>在衍生類別中覆寫時，會將非同步訊息分派至同步處理內容。</summary>
      <param name="d">要呼叫的 <see cref="T:System.Threading.SendOrPostCallback" /> 委派。</param>
      <param name="state">傳送至委派的物件。</param>
    </member>
    <member name="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>在衍生類別中覆寫時，會將同步訊息分派至同步處理內容。</summary>
      <param name="d">要呼叫的 <see cref="T:System.Threading.SendOrPostCallback" /> 委派。</param>
      <param name="state">傳送至委派的物件。</param>
    </member>
    <member name="M:System.Threading.SynchronizationContext.SetSynchronizationContext(System.Threading.SynchronizationContext)">
      <summary>[安全性關鍵] 設定目前的同步處理內容。</summary>
      <param name="syncContext">要設定的 <see cref="T:System.Threading.SynchronizationContext" /> 物件。</param>
    </member>
    <member name="M:System.Threading.SynchronizationContext.SetThreadStaticContext(System.Threading.SynchronizationContext)">
      <summary>[安全性關鍵] 設定執行緒靜態資料的目前內容。</summary>
      <param name="syncContext">要設定的內容。</param>
    </member>
    <member name="T:System.Threading.SynchronizationLockException">
      <summary>方法要求呼叫端擁有指定 Monitor 的鎖定，但是不擁有鎖定的呼叫端叫用方法時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.Threading.SynchronizationLockException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Threading.SynchronizationLockException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Threading.SynchronizationLockException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.Threading.SynchronizationLockException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，則會在處理內部例外狀況的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.Threading.Thread">
      <summary>建立和控制執行緒，並取得它的狀態。</summary>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
      <summary>初始化 <see cref="T:System.Threading.Thread" /> 類別的新執行個體，並指定委派，讓物件可以在執行緒啟動時傳遞到執行緒。</summary>
      <param name="start">委派，表示此執行緒開始執行時所要叫用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> 為 null。</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
      <summary>初始化 <see cref="T:System.Threading.Thread" /> 類別的新執行個體。</summary>
      <param name="start">委派，表示此執行緒開始執行時所要叫用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort">
      <summary>[安全性關鍵] 於被叫用的所在執行緒中引發 <see cref="T:System.Threading.ThreadAbortException" />，開始處理執行緒的結束作業。呼叫此方法通常會結束執行緒。</summary>
    </member>
    <member name="P:System.Threading.Thread.CurrentCulture">
      <summary>取得或設定目前執行緒的文化特性 (Culture)。</summary>
      <returns>目前執行緒的文化特性。</returns>
      <exception cref="T:System.ArgumentNullException">屬性設定為 null。</exception>
      <exception cref="T:System.ArgumentException">此屬性設定為無法用來尋找資源檔的文化特性。</exception>
    </member>
    <member name="P:System.Threading.Thread.CurrentThread">
      <summary>取得目前執行的執行緒。</summary>
      <returns>目前執行的執行緒。</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentUICulture">
      <summary>取得或設定資源管理員目前用以在執行階段查詢特定文化特性資源所用的文化特性。</summary>
      <returns>目前文化特性 (Culture)。</returns>
      <exception cref="T:System.ArgumentNullException">屬性設定為 null。</exception>
      <exception cref="T:System.ArgumentException">此屬性設定為無法用來尋找資源檔的文化特性。</exception>
    </member>
    <member name="M:System.Threading.Thread.GetDomain">
      <summary>傳回目前執行緒正在其中執行的目前定義域。</summary>
      <returns>執行中的執行緒目前的應用程式定義域。</returns>
    </member>
    <member name="M:System.Threading.Thread.GetHashCode">
      <summary>傳回目前執行緒的雜湊程式碼。</summary>
      <returns>整數雜湊程式碼值。</returns>
    </member>
    <member name="P:System.Threading.Thread.IsAlive">
      <summary>取得值，指出目前執行緒的執行狀態。</summary>
      <returns>如果這個執行緒已經啟動但還沒有正常結束或者中止，則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Threading.Thread.IsBackground">
      <summary>取得或設定值，指出執行緒是不是背景執行緒。</summary>
      <returns>如果這個執行緒是背景執行緒或是會成為背景執行緒，則為 true，否則為 false。</returns>
      <exception cref="T:System.Threading.ThreadStateException">執行緒已結束執行。</exception>
    </member>
    <member name="M:System.Threading.Thread.Join">
      <summary>封鎖呼叫執行緒直到執行緒結束為止，但仍繼續執行標準的 COM 與 SendMessage 幫浦作業。</summary>
      <exception cref="T:System.Threading.ThreadStateException">呼叫端嘗試聯結 (Join) <see cref="F:System.Threading.ThreadState.Unstarted" /> 狀態中的執行緒。</exception>
    </member>
    <member name="M:System.Threading.Thread.Join(System.Int32)">
      <summary>封鎖呼叫執行緒直到執行緒結束或已超過指定的時間為止，但仍繼續執行標準的 COM 與 SendMessage 幫浦作業。</summary>
      <returns>如果執行緒已經終止，則為 true；如果執行緒在經過 <paramref name="millisecondsTimeout" /> 參數所指定的時間量之後尚未終止，則為 false。</returns>
      <param name="millisecondsTimeout">等候執行緒結束的毫秒數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 的值為負，且不等於 <see cref="F:System.Threading.Timeout.Infinite" /> 的毫秒數。</exception>
      <exception cref="T:System.Threading.ThreadStateException">執行緒還沒有啟動。</exception>
    </member>
    <member name="P:System.Threading.Thread.ManagedThreadId">
      <summary>取得目前 Managed 執行緒的唯一識別項。</summary>
      <returns>此 Managed 執行緒的唯一識別項。</returns>
    </member>
    <member name="M:System.Threading.Thread.MemoryBarrier">
      <summary>請確定在呼叫 <see cref="M:System.Threading.Thread.MemoryBarrier" /> 之前所出現的記憶體存取 (依照程式順序) 將不會在呼叫 <see cref="M:System.Threading.Thread.MemoryBarrier" /> 之後執行，而且在呼叫 <see cref="M:System.Threading.Thread.MemoryBarrier" /> 之後所出現的記憶體存取將不會在該呼叫之前執行。</summary>
    </member>
    <member name="P:System.Threading.Thread.Name">
      <summary>取得或設定執行緒的名稱。</summary>
      <returns>含有執行緒名稱的字串，如果沒有設定名稱則為 null。</returns>
      <exception cref="T:System.InvalidOperationException">要求 set 作業，且已經設定 Name 屬性。</exception>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.Int32)">
      <summary>在指定的時間內暫止目前的執行緒。</summary>
      <param name="millisecondsTimeout">封鎖執行緒的毫秒數。指定 1 (一) 以便其他等候中的執行緒執行。(建議等候 1 而非等候 0。)指定 <see cref="F:System.Threading.Timeout.Infinite" /> 可無限期封鎖執行緒。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">逾時值是負數且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.TimeSpan)">
      <summary>封鎖目前執行緒一段指定的時間。</summary>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，設定為封鎖執行緒的時間量。指定 1 毫秒的持續時間，以便其他等候中的執行緒執行。(建議等候 1 毫秒而非等候 0。)指定 -1 毫秒持續時間可無限期封鎖執行緒。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 的值是負數，且不等於 -1 毫秒，或是它大於 <see cref="F:System.Int32.MaxValue" /> 毫秒。</exception>
    </member>
    <member name="M:System.Threading.Thread.SpinWait(System.Int32)">
      <summary>造成執行緒等候 <paramref name="iterations" /> 參數定義的次數。</summary>
      <param name="iterations">32 位元帶正負號的整數，可定義執行緒應該等候的時間。</param>
    </member>
    <member name="M:System.Threading.Thread.Start">
      <summary>造成作業系統將目前執行個體的狀態變更為 <see cref="F:System.Threading.ThreadState.Running" />。</summary>
      <exception cref="T:System.Threading.ThreadStateException">執行緒已經啟動。</exception>
      <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可用來啟動此執行緒。</exception>
    </member>
    <member name="M:System.Threading.Thread.Start(System.Object)">
      <summary>使作業系統將目前執行個體的狀態改成 <see cref="F:System.Threading.ThreadState.Running" />，並選擇性地提供物件，在物件中包含執行緒執行之方法所要使用的資料。</summary>
      <param name="parameter">物件，其中包含執行緒執行之方法所要使用的資料。</param>
      <exception cref="T:System.Threading.ThreadStateException">執行緒已經啟動。</exception>
      <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可用來啟動此執行緒。</exception>
      <exception cref="T:System.InvalidOperationException">此執行緒是使用 <see cref="T:System.Threading.ThreadStart" /> 委派所建立，而不是 <see cref="T:System.Threading.ParameterizedThreadStart" /> 委派。</exception>
    </member>
    <member name="P:System.Threading.Thread.ThreadState">
      <summary>取得值，此值包含目前執行緒的狀態。</summary>
      <returns>一個列舉值，指出目前執行緒的狀態。初始值為 Unstarted。</returns>
    </member>
    <member name="T:System.Threading.ThreadAbortException">
      <summary>對 <see cref="M:System.Threading.Thread.Abort" /> 方法呼叫時所擲回的例外狀況。無法繼承此類別。</summary>
    </member>
    <member name="T:System.Threading.ThreadLocal`1">
      <summary>提供資料的執行緒區域儲存區。</summary>
      <typeparam name="T">指定依個別執行緒儲存的資料型別。</typeparam>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.#ctor">
      <summary>初始化 <see cref="T:System.Threading.ThreadLocal`1" /> 執行個體。</summary>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Threading.ThreadLocal`1" /> 執行個體。</summary>
      <param name="trackAllValues">是否要追蹤設定於執行個體上的所有值，並透過 <see cref="P:System.Threading.ThreadLocal`1.Values" /> 屬性來加以公開。</param>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0})">
      <summary>使用指定的 <paramref name="valueFactory" /> 函式來初始化 <see cref="T:System.Threading.ThreadLocal`1" /> 的執行個體。</summary>
      <param name="valueFactory">當嘗試擷取未事先初始化的 <see cref="P:System.Threading.ThreadLocal`1.Value" /> 時，系統會叫用 <see cref="T:System.Func{T}" /> 來產生延遲初始化的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 是 Null 參考 (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)">
      <summary>使用指定的 <paramref name="valueFactory" /> 函式來初始化 <see cref="T:System.Threading.ThreadLocal`1" /> 的執行個體。</summary>
      <param name="valueFactory">當嘗試擷取未事先初始化的 <see cref="P:System.Threading.ThreadLocal`1.Value" /> 時，系統會叫用 <see cref="T:System.Func`1" /> 來產生延遲初始化的值。</param>
      <param name="trackAllValues">是否要追蹤設定於執行個體上的所有值，並透過 <see cref="P:System.Threading.ThreadLocal`1.Values" /> 屬性來加以公開。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 是 null 參考 (在 Visual Basic 中為 Nothing)。</exception>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.Dispose">
      <summary>將 <see cref="T:System.Threading.ThreadLocal`1" /> 類別目前的執行個體所使用的資源全部釋出。</summary>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.Dispose(System.Boolean)">
      <summary>釋放這個 <see cref="T:System.Threading.ThreadLocal{T}" /> 執行個體所使用的資源。</summary>
      <param name="disposing">布林值，表示是否會因為呼叫 <see cref="M:System.Threading.ThreadLocal`1.Dispose" /> 而呼叫這個方法。</param>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.Finalize">
      <summary>釋放這個 <see cref="T:System.Threading.ThreadLocal{T}" /> 執行個體所使用的資源。</summary>
    </member>
    <member name="P:System.Threading.ThreadLocal`1.IsValueCreated">
      <summary>取得值，這個值表示 <see cref="P:System.Threading.ThreadLocal`1.Value" /> 是否已在目前執行緒中完成初始化。</summary>
      <returns>如果已在目前執行緒上初始化 <see cref="P:System.Threading.ThreadLocal`1.Value" /> 則為 true，否則為 false。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="T:System.Threading.ThreadLocal`1" /> 執行個體。</exception>
    </member>
    <member name="M:System.Threading.ThreadLocal`1.ToString">
      <summary>建立並傳回目前執行緒的這個執行個體的字串表示。</summary>
      <returns>在 <see cref="P:System.Threading.ThreadLocal`1.Value" /> 上呼叫 <see cref="M:System.Object.ToString" /> 的結果。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="T:System.Threading.ThreadLocal`1" /> 執行個體。</exception>
      <exception cref="T:System.NullReferenceException">目前執行緒的 <see cref="P:System.Threading.ThreadLocal`1.Value" /> 是 Null 參考 (在 Visual Basic 中為 Nothing)。</exception>
      <exception cref="T:System.InvalidOperationException">初始化函式會嘗試遞迴參考 <see cref="P:System.Threading.ThreadLocal`1.Value" /> 。</exception>
      <exception cref="T:System.MissingMemberException">沒有提供任何預設的建構函式，也沒有提供任何値 Factory。</exception>
    </member>
    <member name="P:System.Threading.ThreadLocal`1.Value">
      <summary>取得或設定目前執行緒的這個執行個體的值。</summary>
      <returns>傳回這個 ThreadLocal 負責初始化之物件的執行個體。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="T:System.Threading.ThreadLocal`1" /> 執行個體。</exception>
      <exception cref="T:System.InvalidOperationException">初始化函式會嘗試遞迴參考 <see cref="P:System.Threading.ThreadLocal`1.Value" /> 。</exception>
      <exception cref="T:System.MissingMemberException">沒有提供任何預設的建構函式，也沒有提供任何値 Factory。</exception>
    </member>
    <member name="P:System.Threading.ThreadLocal`1.Values">
      <summary>取得由所有已存取這個執行個體之執行緒目前所儲存的所有值清單。</summary>
      <returns>由所有已存取這個執行個體之執行緒目前所儲存的所有值清單。</returns>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="T:System.Threading.ThreadLocal`1" /> 執行個體。</exception>
    </member>
    <member name="T:System.Threading.ThreadPool">
      <summary>提供執行緒的集區，可用來公佈工作項目，處理非同步的 (Asynchronous) I/O，表示其他執行緒等候，和處理計時器。</summary>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
      <summary>擷取可並行使用的執行緒集區要求的數目。此數目以上的所有要求繼續佇列，直到可以使用執行緒集區執行緒。</summary>
      <param name="workerThreads">執行緒集區中的背景工作執行緒數最大值。</param>
      <param name="completionPortThreads">執行緒集區中的非同步 I/O 執行緒數最大值。</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
      <summary>擷取閒置執行緒的數目，這些執行緒是預期會有新的要求而在執行緒集區中維護的。</summary>
      <param name="workerThreads">目前由執行緒集區所維護的閒置背景工作執行緒最小數目。</param>
      <param name="completionPortThreads">目前由執行緒集區所維護的閒置非同步 I/O 執行緒最小數目。</param>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
      <summary>佇列要執行的方法。可以使用執行緒集區執行緒時，即可執行此方法。</summary>
      <returns>如果方法已成功排入佇列，則為 true，如果工作項目無法排入佇列，則會擲回 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="callBack">要執行的方法。</param>
      <exception cref="T:System.NotSupportedException">Common Language Runtime (CLR) 已裝載，而且主機不支援此動作。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> 為 null。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>佇列要執行的方法，並指定含方法所需資料的物件。可以使用執行緒集區執行緒時，即可執行此方法。</summary>
      <returns>如果方法已成功排入佇列，則為 true，如果工作項目無法排入佇列，則會擲回 <see cref="T:System.NotSupportedException" />。</returns>
      <param name="callBack">要執行的方法。</param>
      <param name="state">物件，包含方法所要使用的資料。</param>
      <exception cref="T:System.NotSupportedException">Common Language Runtime (CLR) 已裝載，而且主機不支援此動作。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" /> 為 null。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>指定一個 32 位元帶正負號的整數，以毫秒為單位表示逾時，藉此登錄一個會等候 <see cref="T:System.Threading.WaitHandle" /> 的委派。</summary>
      <returns>已註冊的等候處理常式。</returns>
      <param name="waitObject">要註冊的等候處理常式。</param>
      <param name="callBack">通知 <paramref name="waitObject" /> 時要呼叫的委派。</param>
      <param name="state">傳遞至委派的物件。</param>
      <param name="millisecondsTimeOutInterval">逾時以毫秒為單位。如果 <paramref name="millisecondsTimeOutInterval" /> 參數為 0 (零)，函式會測試物件的狀態並立即傳回。如果 <paramref name="millisecondsTimeOutInterval" /> 是 -1，則函式的逾時間隔永遠不會超過。</param>
      <param name="executeOnlyOnce">true 表示在呼叫委派之後，執行緒將不再等候 <paramref name="waitObject" /> 參數，false 表示每當等候作業完成時就重設計時器，直到移除登錄為止。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeOutInterval" /> 參數小於 -1。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>指定一個 64 位元帶正負號的整數，以毫秒為單位表示逾時，藉此登錄一個會等候 <see cref="T:System.Threading.WaitHandle" /> 的委派。</summary>
      <returns>已註冊的等候處理常式。</returns>
      <param name="waitObject">要註冊的等候處理常式。</param>
      <param name="callBack">通知 <paramref name="waitObject" /> 時要呼叫的委派。</param>
      <param name="state">傳送至委派的物件。</param>
      <param name="millisecondsTimeOutInterval">逾時以毫秒為單位。如果 <paramref name="millisecondsTimeOutInterval" /> 參數為 0 (零)，函式會測試物件的狀態並立即傳回。如果 <paramref name="millisecondsTimeOutInterval" /> 是 -1，則函式的逾時間隔永遠不會超過。</param>
      <param name="executeOnlyOnce">true 表示在呼叫委派之後，執行緒將不再等候 <paramref name="waitObject" /> 參數，false 表示每當等候作業完成時就重設計時器，直到移除登錄為止。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeOutInterval" /> 參數小於 -1。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>指定一個 <see cref="T:System.TimeSpan" /> 值表示逾時，藉此登錄一個會等候 <see cref="T:System.Threading.WaitHandle" /> 的委派。</summary>
      <returns>已註冊的等候處理常式。</returns>
      <param name="waitObject">要註冊的等候處理常式。</param>
      <param name="callBack">通知 <paramref name="waitObject" /> 時要呼叫的委派。</param>
      <param name="state">傳送至委派的物件。</param>
      <param name="timeout">以 <see cref="T:System.TimeSpan" /> 表示的等候逾時。如果 <paramref name="timeout" /> 為 0 (零)，則函式會測試物件的狀態並立即傳回。如果 <paramref name="timeout" /> 是 -1，則函式的逾時間隔永遠不會超過。</param>
      <param name="executeOnlyOnce">true 表示在呼叫委派之後，執行緒將不再等候 <paramref name="waitObject" /> 參數，false 表示每當等候作業完成時就重設計時器，直到移除登錄為止。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 參數小於 -1。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="timeout" /> 參數大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>註冊委派來等候 <see cref="T:System.Threading.WaitHandle" />，會為逾時 (以毫秒為單位) 指定 32 位元不帶正負號的整數 (Unsigned Integer)。</summary>
      <returns>已註冊的等候處理常式。</returns>
      <param name="waitObject">要註冊的等候處理常式。</param>
      <param name="callBack">通知 <paramref name="waitObject" /> 時要呼叫的委派。</param>
      <param name="state">傳送至委派的物件。</param>
      <param name="millisecondsTimeOutInterval">逾時以毫秒為單位。如果 <paramref name="millisecondsTimeOutInterval" /> 參數為 0 (零)，函式會測試物件的狀態並立即傳回。如果 <paramref name="millisecondsTimeOutInterval" /> 是 -1，則函式的逾時間隔永遠不會超過。</param>
      <param name="executeOnlyOnce">true 表示在呼叫委派之後，執行緒將不再等候 <paramref name="waitObject" /> 參數，false 表示每當等候作業完成時就重設計時器，直到移除登錄為止。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeOutInterval" /> 參數小於 -1。</exception>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
      <summary>[安全性關鍵] 設定可同時作用的執行緒集區要求數目。高於此數目的所有要求會維持排入佇列，直到可以使用執行緒集區執行緒。</summary>
      <returns>如果變更成功，則為 true，否則為 false。</returns>
      <param name="workerThreads">執行緒集區中的背景工作執行緒數最大值。</param>
      <param name="completionPortThreads">執行緒集區中的非同步 I/O 執行緒數最大值。</param>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
      <summary>[安全性關鍵] 設定閒置執行緒的數目，這些執行緒是預期會有新的要求而在執行緒集區中維護的。</summary>
      <returns>如果變更成功，則為 true，否則為 false。</returns>
      <param name="workerThreads">將由執行緒集區所維護的閒置背景工作執行緒數目的新最小值。</param>
      <param name="completionPortThreads">將由執行緒集區所維護的閒置非同步 I/O 執行緒數目的新最小值。</param>
    </member>
    <member name="T:System.Threading.ThreadStart">
      <summary>表示在 <see cref="T:System.Threading.Thread" /> 上執行的方法。</summary>
    </member>
    <member name="T:System.Threading.ThreadStartException">
      <summary>當基礎作業系統執行緒已經啟動，但此執行緒還沒準備好執行使用者程式碼之前，如果 Managed 執行緒內有任何錯誤發生，就會擲回此例外狀況。 </summary>
    </member>
    <member name="T:System.Threading.ThreadState">
      <summary>指定 <see cref="T:System.Threading.Thread" /> 的執行狀態。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Aborted">
      <summary>執行緒狀態包括 <see cref="F:System.Threading.ThreadState.AbortRequested" />，且執行緒目前無作用，但其狀態尚未變更為 <see cref="F:System.Threading.ThreadState.Stopped" />。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.AbortRequested">
      <summary>
        <see cref="M:System.Threading.Thread.Abort" /> 方法已在執行緒上被叫用 (Invoke)，但執行緒還沒有收到會嘗試終結它的暫止 <see cref="T:System.Threading.ThreadAbortException" />。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Background">
      <summary>執行緒正做為背景執行緒執行當中 (相對於前景執行緒)。此狀態以設定 <see cref="P:System.Threading.Thread.IsBackground" /> 屬性來控制。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Running">
      <summary>執行緒已經啟動，並未受封鎖，也沒有暫止的 <see cref="T:System.Threading.ThreadAbortException" />。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Stopped">
      <summary>執行緒已經停止。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.StopRequested">
      <summary>執行緒正被要求停止中。僅供內部使用。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Suspended">
      <summary>執行緒已經暫止。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.SuspendRequested">
      <summary>執行緒已標記為暫止。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Unstarted">
      <summary>
        <see cref="M:System.Threading.Thread.Start" /> 方法還沒有在執行緒上被叫用。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.WaitSleepJoin">
      <summary>執行緒已封鎖。這可能是呼叫 <see cref="M:System.Threading.Thread.Sleep(System.Int32)" /> 或 <see cref="M:System.Threading.Thread.Join" />、要求鎖定 (例如藉由呼叫 <see cref="M:System.Threading.Monitor.Enter(System.Object)" /> 或 <see cref="M:System.Threading.Monitor.Wait(System.Object,System.Int32)" />)，或是在執行緒同步處理物件 (例如 <see cref="T:System.Threading.ManualResetEvent" />) 上等候的結果。 </summary>
    </member>
    <member name="T:System.Threading.ThreadStateException">
      <summary>當 <see cref="T:System.Threading.Thread" /> 對於方法的呼叫來說處於無效 <see cref="P:System.Threading.Thread.ThreadState" /> 時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor">
      <summary>使用預設屬性來初始化 <see cref="T:System.Threading.ThreadStateException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Threading.ThreadStateException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.Threading.ThreadStateException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，則會在處理內部例外狀況的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.Threading.Timeout">
      <summary>包含用來指定無限長時間的常數。無法繼承此類別。</summary>
    </member>
    <member name="F:System.Threading.Timeout.Infinite">
      <summary>用來指定無限等候期的常數。此欄位為常數。</summary>
    </member>
    <member name="F:System.Threading.Timeout.InfiniteTimeSpan">
      <summary>用來指定無限等候期的常數，適用於接受 <see cref="T:System.TimeSpan" /> 參數的方法。</summary>
    </member>
    <member name="T:System.Threading.Timer">
      <summary>提供一套機制，可於指定間隔執行方法。無法繼承此類別。</summary>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback)">
      <summary>以無限週期和無限到期時間初始化 <see cref="T:System.Threading.Timer" /> 類別的新執行個體，利用新建立 <see cref="T:System.Threading.Timer" /> 物件做為狀態物件。</summary>
      <param name="callback">委派，表示要執行的方法。</param>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Threading.Timer" /> 類別的新執行個體，使用 32 位元帶正負號的整數來指定時間間隔。</summary>
      <param name="callback">委派，表示要執行的方法。</param>
      <param name="state">物件，包含回呼方法所使用的資訊，或 null。</param>
      <param name="dueTime">叫用 <paramref name="callback" /> 前所延遲的時間量，以毫秒為單位。指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器啟動。指定 0 (零) 以立即啟動計時器。</param>
      <param name="period">
        <paramref name="callback" /> 引動過程的間隔時間 (以毫秒為單位)。指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 參數是負的，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int64,System.Int64)">
      <summary>初始化 <see cref="T:System.Threading.Timer" /> 類別的新執行個體，使用 64 位元帶正負號的整數來測量時間間隔。</summary>
      <param name="callback">委派，表示要執行的方法。</param>
      <param name="state">物件，包含回呼方法所使用的資訊，或 null。</param>
      <param name="dueTime">叫用 <paramref name="callback" /> 前所延遲的時間量，以毫秒為單位。指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器啟動。指定 0 (零) 以立即啟動計時器。</param>
      <param name="period">
        <paramref name="callback" /> 引動過程的間隔時間，以毫秒為單位。指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 參數是負的，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。-或-<paramref name="dueTime" /> 或 <paramref name="period" /> 參數大於 4294967294 (<see cref="F:System.UInt32.MaxValue" /> - 1)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)">
      <summary>初始化 <see cref="T:System.Threading.Timer" /> 類別的新執行個體，使用 <see cref="T:System.TimeSpan" /> 值來測量時間間隔。</summary>
      <param name="callback">委派，表示要執行的方法。</param>
      <param name="state">物件，包含回呼方法所使用的資訊，或 null。</param>
      <param name="dueTime">叫用 <paramref name="callback" /> 前所延遲的時間量。指定 -1 (負一) 毫秒以防止啟動計時器。指定 0 (零) 以立即啟動計時器。</param>
      <param name="period">
        <paramref name="callback" /> 引動過程的間隔時間。指定 -1 (負一) 毫秒以停用定期的信號方式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 參數為負數且不等於 -1 (負一) 毫秒。-或-<paramref name="dueTime" /> 或 <paramref name="period" /> 參數大於 4294967294 (<see cref="F:System.UInt32.MaxValue" /> - 1) 毫秒。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.UInt32,System.UInt32)">
      <summary>初始化 <see cref="T:System.Threading.Timer" /> 類別的新執行個體，使用 32 位元不帶正負號的整數 (Unsigned Integer) 來測量時間間隔。</summary>
      <param name="callback">委派，表示要執行的方法。</param>
      <param name="state">物件，包含回呼方法所使用的資訊，或 null。</param>
      <param name="dueTime">叫用 <paramref name="callback" /> 前所延遲的時間量，以毫秒為單位。指定 <see cref="F:System.UInt32.MaxValue" /> 以防止計時器啟動。指定 0 (零) 以立即啟動計時器。</param>
      <param name="period">
        <paramref name="callback" /> 引動過程的間隔時間，以毫秒為單位。指定 <see cref="F:System.UInt32.MaxValue" /> 以停用週期的信號功能。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Threading.Timer.Change(System.Int32,System.Int32)">
      <summary>變更開始的時間和計時器的方法引動過程之間的時間間隔，使用 32 位元帶正負號的整數來測量時間間隔。</summary>
      <returns>如果已成功更新計時器，則為 true，否則為 false。</returns>
      <param name="dueTime">延遲的時間長度 (以毫秒為單位)，一旦超過此時間就叫用先前建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法。指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器重新啟動。指定 0 (零) 以立即重新啟動計時器。</param>
      <param name="period">建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法的引動過程間隔時間 (以毫秒為單位)。指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Timer" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 參數是負的，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
    </member>
    <member name="M:System.Threading.Timer.Change(System.Int64,System.Int64)">
      <summary>變更開始的時間和計時器的方法引動過程之間的時間間隔，使用 64 位元帶正負號的整數來測量時間間隔。</summary>
      <returns>如果已成功更新計時器，則為 true，否則為 false。</returns>
      <param name="dueTime">延遲的時間長度 (以毫秒為單位)，一旦超過此時間就叫用先前建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法。指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以防止計時器重新啟動。指定 0 (零) 以立即重新啟動計時器。</param>
      <param name="period">建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法引動過程間隔時間，以毫秒為單位。指定 <see cref="F:System.Threading.Timeout.Infinite" /> 以停用週期的信號功能。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Timer" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 參數是負的，且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。-或-<paramref name="dueTime" /> 或 <paramref name="period" /> 參數大於 4294967294 (<see cref="F:System.UInt32.MaxValue" /> - 1)。</exception>
    </member>
    <member name="M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)">
      <summary>變更開始的時間和計時器的方法引動過程之間的時間間隔，使用 <see cref="T:System.TimeSpan" /> 值來測量時間間隔。</summary>
      <returns>如果已成功更新計時器，則為 true，否則為 false。</returns>
      <param name="dueTime">延遲的時間長度，一旦超過此時間就叫用先前建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法。指定 -1 (負一) 毫秒以防止重新啟動計時器。指定 0 (零) 以立即重新啟動計時器。</param>
      <param name="period">建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法的引動過程間隔時間。指定 -1 (負一) 毫秒以停用定期的信號方式。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Timer" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dueTime" /> 或 <paramref name="period" /> 參數為負數且不等於 -1 (負一) 毫秒。-或-<paramref name="dueTime" /> 或 <paramref name="period" /> 參數大於 4294967294 (<see cref="F:System.UInt32.MaxValue" /> - 1) 毫秒。</exception>
    </member>
    <member name="M:System.Threading.Timer.Change(System.UInt32,System.UInt32)">
      <summary>變更開始的時間和計時器的方法引動過程之間的時間間隔，使用 32 位元不帶正負號的整數來測量時間間隔。</summary>
      <returns>如果已成功更新計時器，則為 true，否則為 false。</returns>
      <param name="dueTime">延遲的時間長度 (以毫秒為單位)，一旦超過此時間就叫用先前建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法。指定 <see cref="F:System.UInt32.MaxValue" /> 以防止計時器重新啟動。指定 0 (零) 以立即重新啟動計時器。</param>
      <param name="period">建構 <see cref="T:System.Threading.Timer" /> 時指定的回呼方法引動過程間隔時間，以毫秒為單位。指定 <see cref="F:System.UInt32.MaxValue" /> 以停用週期的信號功能。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Timer" /> 已經處置。</exception>
    </member>
    <member name="M:System.Threading.Timer.Dispose">
      <summary>將 <see cref="T:System.Threading.Timer" /> 目前的執行個體所使用的資源全部釋出。</summary>
    </member>
    <member name="M:System.Threading.Timer.Dispose(System.Threading.WaitHandle)">
      <summary>將 <see cref="T:System.Threading.Timer" /> 目前的執行個體所使用的資源全部釋出，並當計時器已被處置時發出通知。</summary>
      <returns>如果函式成功，則為 true，否則為 false。</returns>
      <param name="notifyObject">當計時器已被處置時，應通知的 <see cref="T:System.Threading.WaitHandle" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="notifyObject" /> 參數為 null。</exception>
    </member>
    <member name="T:System.Threading.TimerCallback">
      <summary>表示處理來自 <see cref="T:System.Threading.Timer" /> 的呼叫的方法。</summary>
      <param name="state">物件，包含關於此委派 (Delegate) 所叫用 (Invoke) 方法的應用程式特定資訊。-或-Null 參考 (在 Visual Basic 中為 Nothing)。</param>
    </member>
    <member name="T:System.Threading.Volatile">
      <summary>包含用來執行動態記憶體作業的方法。</summary>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Boolean@)">
      <summary>讀取指定之欄位的值。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之後出現讀取或寫入，則處理器無法將它移到此方法之前。</summary>
      <returns>已讀取值。不論處理器數目或處理器快取的狀態為何，這是電腦中的任何處理器所寫入的最新值。</returns>
      <param name="location">要讀取的欄位。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Byte@)">
      <summary>讀取指定之欄位的值。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之後出現讀取或寫入，則處理器無法將它移到此方法之前。</summary>
      <returns>已讀取的值。不論處理器數目或處理器快取的狀態為何，這是電腦中的任何處理器所寫入的最新值。</returns>
      <param name="location">要讀取的欄位。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Double@)">
      <summary>讀取指定之欄位的值。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之後出現讀取或寫入，則處理器無法將它移到此方法之前。</summary>
      <returns>已讀取的值。不論處理器數目或處理器快取的狀態為何，這是電腦中的任何處理器所寫入的最新值。</returns>
      <param name="location">要讀取的欄位。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Int16@)">
      <summary>讀取指定之欄位的值。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之後出現讀取或寫入，則處理器無法將它移到此方法之前。</summary>
      <returns>已讀取的值。不論處理器數目或處理器快取的狀態為何，這是電腦中的任何處理器所寫入的最新值。</returns>
      <param name="location">要讀取的欄位。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Int32@)">
      <summary>讀取指定之欄位的值。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之後出現讀取或寫入，則處理器無法將它移到此方法之前。</summary>
      <returns>已讀取的值。不論處理器數目或處理器快取的狀態為何，這是電腦中的任何處理器所寫入的最新值。</returns>
      <param name="location">要讀取的欄位。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Int64@)">
      <summary>讀取指定之欄位的值。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之後出現讀取或寫入，則處理器無法將它移到此方法之前。</summary>
      <returns>已讀取的值。不論處理器數目或處理器快取的狀態為何，這是電腦中的任何處理器所寫入的最新值。</returns>
      <param name="location">要讀取的欄位。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.IntPtr@)">
      <summary>讀取指定之欄位的值。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之後出現讀取或寫入，則處理器無法將它移到此方法之前。</summary>
      <returns>已讀取的值。不論處理器數目或處理器快取的狀態為何，這是電腦中的任何處理器所寫入的最新值。</returns>
      <param name="location">要讀取的欄位。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.SByte@)">
      <summary>讀取指定之欄位的值。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之後出現讀取或寫入，則處理器無法將它移到此方法之前。</summary>
      <returns>已讀取的值。不論處理器數目或處理器快取的狀態為何，這是電腦中的任何處理器所寫入的最新值。</returns>
      <param name="location">要讀取的欄位。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.Single@)">
      <summary>讀取指定之欄位的值。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之後出現讀取或寫入，則處理器無法將它移到此方法之前。</summary>
      <returns>已讀取的值。不論處理器數目或處理器快取的狀態為何，這是電腦中的任何處理器所寫入的最新值。</returns>
      <param name="location">要讀取的欄位。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.UInt16@)">
      <summary>讀取指定之欄位的值。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之後出現讀取或寫入，則處理器無法將它移到此方法之前。</summary>
      <returns>已讀取的值。不論處理器數目或處理器快取的狀態為何，這是電腦中的任何處理器所寫入的最新值。</returns>
      <param name="location">要讀取的欄位。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.UInt32@)">
      <summary>讀取指定之欄位的值。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之後出現讀取或寫入，則處理器無法將它移到此方法之前。</summary>
      <returns>已讀取的值。不論處理器數目或處理器快取的狀態為何，這是電腦中的任何處理器所寫入的最新值。</returns>
      <param name="location">要讀取的欄位。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.UInt64@)">
      <summary>讀取指定之欄位的值。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之後出現讀取或寫入，則處理器無法將它移到此方法之前。</summary>
      <returns>已讀取的值。不論處理器數目或處理器快取的狀態為何，這是電腦中的任何處理器所寫入的最新值。</returns>
      <param name="location">要讀取的欄位。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read(System.UIntPtr@)">
      <summary>讀取指定之欄位的值。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之後出現讀取或寫入，則處理器無法將它移到此方法之前。</summary>
      <returns>已讀取的值。不論處理器數目或處理器快取的狀態為何，這是電腦中的任何處理器所寫入的最新值。</returns>
      <param name="location">要讀取的欄位。</param>
    </member>
    <member name="M:System.Threading.Volatile.Read``1(``0@)">
      <summary>從指定的欄位讀取物件參考。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之後出現讀取或寫入，則處理器無法將它移到此方法之前。</summary>
      <returns>已讀取 <paramref name="T" /> 的參考。不論處理器數目或處理器快取的狀態為何，這是電腦中的任何處理器所寫入的最新參考。</returns>
      <param name="location">要讀取的欄位。</param>
      <typeparam name="T">要讀取之欄位的型別。這必須是參考型別，而不是值型別。</typeparam>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Boolean@,System.Boolean)">
      <summary>將指定的值寫入指定的欄位。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之前出現讀取或寫入，則處理器無法將它移到此方法之後。</summary>
      <param name="location">寫入值的欄位。</param>
      <param name="value">要寫入的值。立即寫入值，所以電腦中的所有處理器都可以看到。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Byte@,System.Byte)">
      <summary>將指定的值寫入指定的欄位。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之前出現讀取或寫入，則處理器無法將它移到此方法之後。</summary>
      <param name="location">寫入值的欄位。</param>
      <param name="value">要寫入的值。立即寫入值，所以電腦中的所有處理器都可以看到。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Double@,System.Double)">
      <summary>將指定的值寫入指定的欄位。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之前出現讀取或寫入，則處理器無法將它移到此方法之後。</summary>
      <param name="location">寫入值的欄位。</param>
      <param name="value">要寫入的值。立即寫入值，所以電腦中的所有處理器都可以看到。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Int16@,System.Int16)">
      <summary>將指定的值寫入指定的欄位。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之前出現讀取或寫入，則處理器無法將它移到此方法之後。</summary>
      <param name="location">寫入值的欄位。</param>
      <param name="value">要寫入的值。立即寫入值，所以電腦中的所有處理器都可以看到。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Int32@,System.Int32)">
      <summary>將指定的值寫入指定的欄位。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之前出現讀取或寫入，則處理器無法將它移到此方法之後。</summary>
      <param name="location">寫入值的欄位。</param>
      <param name="value">要寫入的值。立即寫入值，所以電腦中的所有處理器都可以看到。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Int64@,System.Int64)">
      <summary>將指定的值寫入指定的欄位。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之前出現記憶體作業，則處理器無法將它移到此方法之後。</summary>
      <param name="location">寫入值的欄位。</param>
      <param name="value">要寫入的值。立即寫入值，所以電腦中的所有處理器都可以看到。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.IntPtr@,System.IntPtr)">
      <summary>將指定的值寫入指定的欄位。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之前出現讀取或寫入，則處理器無法將它移到此方法之後。</summary>
      <param name="location">寫入值的欄位。</param>
      <param name="value">要寫入的值。立即寫入值，所以電腦中的所有處理器都可以看到。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.SByte@,System.SByte)">
      <summary>將指定的值寫入指定的欄位。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之前出現讀取或寫入，則處理器無法將它移到此方法之後。</summary>
      <param name="location">寫入值的欄位。</param>
      <param name="value">要寫入的值。立即寫入值，所以電腦中的所有處理器都可以看到。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.Single@,System.Single)">
      <summary>將指定的值寫入指定的欄位。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之前出現讀取或寫入，則處理器無法將它移到此方法之後。</summary>
      <param name="location">寫入值的欄位。</param>
      <param name="value">要寫入的值。立即寫入值，所以電腦中的所有處理器都可以看到。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.UInt16@,System.UInt16)">
      <summary>將指定的值寫入指定的欄位。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之前出現讀取或寫入，則處理器無法將它移到此方法之後。</summary>
      <param name="location">寫入值的欄位。</param>
      <param name="value">要寫入的值。立即寫入值，所以電腦中的所有處理器都可以看到。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.UInt32@,System.UInt32)">
      <summary>將指定的值寫入指定的欄位。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之前出現讀取或寫入，則處理器無法將它移到此方法之後。</summary>
      <param name="location">寫入值的欄位。</param>
      <param name="value">要寫入的值。立即寫入值，所以電腦中的所有處理器都可以看到。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.UInt64@,System.UInt64)">
      <summary>將指定的值寫入指定的欄位。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之前出現讀取或寫入，則處理器無法將它移到此方法之後。</summary>
      <param name="location">寫入值的欄位。</param>
      <param name="value">要寫入的值。立即寫入值，所以電腦中的所有處理器都可以看到。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write(System.UIntPtr@,System.UIntPtr)">
      <summary>將指定的值寫入指定的欄位。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之前出現讀取或寫入，則處理器無法將它移到此方法之後。</summary>
      <param name="location">寫入值的欄位。</param>
      <param name="value">要寫入的值。立即寫入值，所以電腦中的所有處理器都可以看到。</param>
    </member>
    <member name="M:System.Threading.Volatile.Write``1(``0@,``0)">
      <summary>將指定的物件參考寫入指定的欄位。在需要它的系統上，插入記憶體屏障，以防止處理器重新排序記憶體作業，如下所示：如果程式碼中在此方法之前出現讀取或寫入，則處理器無法將它移到此方法之後。</summary>
      <param name="location">寫入物件參考的欄位。</param>
      <param name="value">要寫入的物件參考。立即寫入參考，所以電腦中的所有處理器都可以看到。</param>
      <typeparam name="T">要寫入之欄位的型別。這必須是參考型別，而不是值型別。</typeparam>
    </member>
    <member name="T:System.Threading.WaitCallback">
      <summary>表示執行緒集區執行緒執行的回呼方法。</summary>
      <param name="state">物件，包含回呼方法所使用的資訊。</param>
    </member>
    <member name="T:System.Threading.WaitHandle">
      <summary>將等候共用資源獨佔存取權限的特定作業系統物件封裝起來。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.#ctor">
      <summary>初始化 <see cref="T:System.Threading.WaitHandle" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Close">
      <summary>在衍生類別中被覆寫時，將目前 <see cref="T:System.Threading.WaitHandle" /> 所持有的所有資源全部釋出。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose">
      <summary>將 <see cref="T:System.Threading.WaitHandle" /> 類別目前的執行個體所使用的資源全部釋出。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
      <summary>在衍生類別中覆寫時，釋放 <see cref="T:System.Threading.WaitHandle" /> 使用的 Unmanaged 資源，以及選擇性釋放 Managed 資源。</summary>
      <param name="explicitDisposing">true 表示同時釋放 Managed 和 Unmanaged 資源，false 表示僅釋放 Unmanaged 資源。</param>
    </member>
    <member name="F:System.Threading.WaitHandle.InvalidHandle">
      <summary>表示無效的原生作業系統控制代碼。此欄位為唯讀的。</summary>
    </member>
    <member name="P:System.Threading.WaitHandle.SafeWaitHandle">
      <summary>[安全性關鍵] 取得或設定原生作業系統控制代碼。</summary>
      <returns>原生作業系統控制代碼。</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
      <summary>等候指定陣列中的所有元素都收到信號。</summary>
      <returns>當 <paramref name="waitHandles" /> 中的所有元素都已收到訊號時，則為 true，否則即表示該方法絕不會復原。</returns>
      <param name="waitHandles">陣列，包含目前執行個體將等候的物件。此陣列不能包含相同物件的多個參考。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 參數為 null。-或-<paramref name="waitHandles" /> 陣列中的一個或多個物件為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> 陣列包含是複本的元素。-或-<paramref name="waitHandles" /> 是一個沒有元素的陣列。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的物件數目大於系統容許的數目。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
      <summary>等候指定的陣列中所有元素都收到信號，使用 <see cref="T:System.Int32" /> 值以指定時間間隔。</summary>
      <returns>當 <paramref name="waitHandles" /> 中的所有元素都已收到訊號時，則為 true，否則為 false。</returns>
      <param name="waitHandles">陣列，包含目前執行個體將等候的物件。此陣列不能包含相同物件的多個參考。</param>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 參數為 null。-或-<paramref name="waitHandles" /> 陣列中的一個或多個物件為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> 陣列包含是複本的元素。-或-<paramref name="waitHandles" /> 是一個沒有元素的陣列。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的物件數目大於系統容許的數目。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>等候指定的陣列中所有元素都收到信號，使用 <see cref="T:System.TimeSpan" /> 值以指定時間間隔。</summary>
      <returns>當 <paramref name="waitHandles" /> 中的所有元素都已收到訊號時，則為 true，否則為 false。</returns>
      <param name="waitHandles">陣列，包含目前執行個體將等候的物件。此陣列不能包含對相同物件的多次參考。</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示要等候的毫秒數，或是 <see cref="T:System.TimeSpan" />，表示無限期等候的 -1 毫秒。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 參數為 null。-或-<paramref name="waitHandles" /> 陣列中的一個或多個物件為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> 陣列包含是複本的元素。-或-<paramref name="waitHandles" /> 是一個沒有元素的陣列。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的物件數目大於系統容許的數目。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是一個不等於 -1 毫秒的負數，-1 毫秒表示無限期的等候逾時。-或-<paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
      <summary>等候指定陣列中有任何元素收到信號。</summary>
      <returns>滿足等候條件之物件的陣列索引。</returns>
      <param name="waitHandles">陣列，包含目前執行個體將等候的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 參數為 null。-或-<paramref name="waitHandles" /> 陣列中的一個或多個物件為 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的物件數目大於系統容許的數目。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> 是一個沒有元素的陣列。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
      <summary>等候指定陣列中有任何元素收到信號，使用 32 位元帶正負號的整數以指定時間間隔。</summary>
      <returns>滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="millisecondsTimeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</returns>
      <param name="waitHandles">陣列，包含目前執行個體將等候的物件。</param>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 參數為 null。-或-<paramref name="waitHandles" /> 陣列中的一個或多個物件為 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的物件數目大於系統容許的數目。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> 是一個沒有元素的陣列。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>等候指定陣列中有任何元素收到信號，使用 <see cref="T:System.TimeSpan" /> 以指定時間間隔。</summary>
      <returns>滿足等候條件之物件的陣列索引；如果沒有物件滿足等候條件，而且已經過相當於 <paramref name="timeout" /> 的時間間隔，則為 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</returns>
      <param name="waitHandles">陣列，包含目前執行個體將等候的物件。</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示要等候的毫秒數，或是 <see cref="T:System.TimeSpan" />，表示無限期等候的 -1 毫秒。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 參數為 null。-或-<paramref name="waitHandles" /> 陣列中的一個或多個物件為 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的物件數目大於系統容許的數目。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是一個不等於 -1 毫秒的負數，-1 毫秒表示無限期的等候逾時。-或-<paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> 是一個沒有元素的陣列。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne">
      <summary>封鎖目前的執行緒，直到目前的 <see cref="T:System.Threading.WaitHandle" /> 收到信號為止。</summary>
      <returns>如果目前的執行個體收到訊號，則 true。如果目前的執行個體一直沒有收到信號，<see cref="M:System.Threading.WaitHandle.WaitOne" /> 就一定不會傳回。</returns>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
      <summary>封鎖目前的執行緒，直到目前的 <see cref="T:System.Threading.WaitHandle" /> 收到信號為止，使用 32 位元帶正負號的整數以指定時間間隔。</summary>
      <returns>如果目前的執行個體收到訊號，則為 true，否則為 false。</returns>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
      <summary>封鎖目前的執行緒，直到目前的執行個體收到信號為止，使用 <see cref="T:System.TimeSpan" /> 以指定時間間隔。</summary>
      <returns>如果目前的執行個體收到訊號，則為 true，否則為 false。</returns>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示要等候的毫秒數，或是 <see cref="T:System.TimeSpan" />，表示無限期等候的 -1 毫秒。</param>
      <exception cref="T:System.ObjectDisposedException">目前的執行個體已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是一個不等於 -1 毫秒的負數，-1 毫秒表示無限期的等候逾時。-或-<paramref name="timeout" /> 大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="F:System.Threading.WaitHandle.WaitTimeout">
      <summary>指出 <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])" /> 作業在等候控制代碼還沒有收到信號之前便已經逾時。此欄位為常數。</summary>
    </member>
    <member name="T:System.Threading.WaitHandleCannotBeOpenedException">
      <summary>當嘗試開啟不存在的系統 Mutex 或號誌時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Threading.WaitHandleCannotBeOpenedException.#ctor">
      <summary>使用預設值，初始化 <see cref="T:System.Threading.WaitHandleCannotBeOpenedException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Threading.WaitHandleCannotBeOpenedException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Threading.WaitHandleCannotBeOpenedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.Threading.WaitHandleCannotBeOpenedException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況原因的錯誤訊息。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，則會在處理內部例外狀況的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.Threading.WaitOrTimerCallback">
      <summary>表示 <see cref="T:System.Threading.WaitHandle" /> 收到信號或逾時時呼叫的方法。</summary>
      <param name="state">包含回呼方法每次執行時要使用之資訊的物件。</param>
      <param name="timedOut">true 表示 <see cref="T:System.Threading.WaitHandle" /> 已逾時，false 則表示收到訊號。</param>
    </member>
    <member name="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair">
      <summary>提供工作排程器以協調工作執行，同時確保並行工作可同時執行，而獨佔工作永遠不會同時執行。</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor">
      <summary>初始化 <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>初始化 <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 類別的新執行個體，其目標為指定的排程器。</summary>
      <param name="taskScheduler">這個配對應該在其上執行的目標排程器。</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)">
      <summary>初始化 <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 類別的新執行個體，其目標為指定的排程器並具有最大的並行等級。</summary>
      <param name="taskScheduler">這個配對應該在其上執行的目標排程器。</param>
      <param name="maxConcurrencyLevel">同時執行的工作數目上限。</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> 類別的新執行個體，其目標為指定的排程器，並具有最大的並行等級和可當成一個單元來處理之排程工作的數目上限。</summary>
      <param name="taskScheduler">這個配對應該在其上執行的目標排程器。</param>
      <param name="maxConcurrencyLevel">同時執行的工作數目上限。</param>
      <param name="maxItemsPerTask">要針對這個配對所使用之每個基礎排程工作進行處理的工作數目上限。</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete">
      <summary>通知排程器配對，它不應該再接受更多的工作。</summary>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion">
      <summary>取得當排程器完成處理時將完成的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>當排程器完成處理時將完成的非同步處理作業。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler">
      <summary>取得 <see cref="T:System.Threading.Tasks.TaskScheduler" />，可用來將工作排程至這個配對，這些工作可能會和這個配對上的其他工作同時執行。</summary>
      <returns>可用來同時排程工作的物件。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler">
      <summary>取得 <see cref="T:System.Threading.Tasks.TaskScheduler" />，可用來將工作排程至這個配對，相對於這個配對上的其他工作，這些工作必須以獨佔方式執行。</summary>
      <returns>可用來排程不能與其他工作同時執行之工作的物件。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Task">
      <summary>表示非同步作業。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action)">
      <summary>使用指定的動作，初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">委派，表示要在工作中執行的程式碼。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
      <summary>使用指定的動作和 <see cref="T:System.Threading.CancellationToken" />，初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">委派，表示要在工作中執行的程式碼。</param>
      <param name="cancellationToken">新工作將會觀察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的動作和建立選項，初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">委派，表示工作中要執行的程式碼。</param>
      <param name="cancellationToken">新工作將會觀察的 <see cref="P:System.Threading.Tasks.Task.CancellationToken" />。</param>
      <param name="creationOptions">
        <see cref="T:System.Threading.Tasks.TaskCreationOptions" />，用於自訂工作的行為。</param>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading." />CancellationTokenSource。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值無效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的動作和建立選項，初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">委派，表示工作中要執行的程式碼。</param>
      <param name="creationOptions">
        <see cref="T:System.Threading.Tasks.TaskCreationOptions" />，用於自訂工作的行為。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值無效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)">
      <summary>使用指定的動作和狀態，初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">委派，表示工作中要執行的程式碼。</param>
      <param name="state">物件，表示動作所需的資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>使用指定的動作、狀態和選項，初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">委派，表示工作中要執行的程式碼。</param>
      <param name="state">物件，表示動作所需的資料。</param>
      <param name="cancellationToken">新工作將會觀察的 <see cref="P:System.Threading.Tasks.Task.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的動作、狀態和選項，初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">委派，表示工作中要執行的程式碼。</param>
      <param name="state">物件，表示動作所需的資料。</param>
      <param name="cancellationToken">新工作將會觀察的 <see cref="P:System.Threading.Tasks.Task.CancellationToken" />。</param>
      <param name="creationOptions">
        <see cref="T:System.Threading.Tasks.TaskCreationOptions" />，用於自訂工作的行為。</param>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值無效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的動作、狀態和選項，初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">委派，表示工作中要執行的程式碼。</param>
      <param name="state">物件，表示動作所需的資料。</param>
      <param name="creationOptions">
        <see cref="T:System.Threading.Tasks.TaskCreationOptions" />，用於自訂工作的行為。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值無效。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.AsyncState">
      <summary>取得建立 <see cref="T:System.Threading.Tasks.Task" /> 時提供的狀態物件，如果未提供則為 null。</summary>
      <returns>
        <see cref="T:System.Object" />，表示工作建立時傳入至工作的狀態資料。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)">
      <summary>設定用來等待這個 <see cref="T:System.Threading.Tasks.Task" /> 的等待程式。</summary>
      <returns>用來等待這個工作的物件。</returns>
      <param name="continueOnCapturedContext">true 表示嘗試將接續動作封送處理回到所擷取的原始內容，否則為 false。</param>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時非同步執行的接續工作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的動作。執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時非同步執行的接續工作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的動作。執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="P:System.Threading.Tasks.Task.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。-或-已處置建立語彙基元的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會根據指定之 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 執行的接續工作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">要根據指定的 <paramref name="continuationOptions" /> 執行的動作。執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="P:System.Threading.Tasks.Task.CancellationToken" />。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。-或-已處置建立語彙基元的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。-或-<paramref name="scheduler" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值無效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會根據指定之 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 執行的接續工作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">要根據指定的 <paramref name="continuationOptions" /> 執行的動作。執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值無效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時非同步執行的接續工作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的動作。執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。-或-<paramref name="scheduler" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的動作。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續動作所需的資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的動作。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續動作所需的資料。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的動作。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續動作所需的資料。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 引數為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的動作。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續動作所需的資料。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值無效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的動作。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續動作所需的資料。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時非同步執行的接續工作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的函式。執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <typeparam name="TResult"> 接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時非同步執行的接續工作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的函式。執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="P:System.Threading.Tasks.Task.CancellationToken" />。</param>
      <typeparam name="TResult"> 接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。-或-已處置建立語彙基元的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立接續符號，該符號會根據 <paramref name="continuationOptions" /> 中指定的條件執行。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">要根據指定之 <paramref name="continuationOptions." /> 執行的函式。執行時，會將完成的工作當做引數傳遞給委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="P:System.Threading.Tasks.Task.CancellationToken" />。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult"> 接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。-或-已處置建立語彙基元的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。-或-<paramref name="scheduler" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值無效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立接續符號，該符號會根據 <paramref name="continuationOptions" /> 中指定的條件執行。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">要根據 <paramref name="continuationOptions" /> 中指定之條件執行的函式。執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <typeparam name="TResult"> 接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值無效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時非同步執行的接續工作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的函式。執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult"> 接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。-或-<paramref name="scheduler" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的函式。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續函式所需的資料。</param>
      <typeparam name="TResult">接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的函式。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續函式所需的資料。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TResult">接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的函式。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續函式所需的資料。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult">接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 引數為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的函式。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續函式所需的資料。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <typeparam name="TResult">接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值無效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task" /> 完成時要執行的函式。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續函式所需的資料。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult">接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 引數為 null。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.CreationOptions">
      <summary>取得用來建立這個工作的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</summary>
      <returns>用來建立這個工作的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.CurrentId">
      <summary>傳回目前執行之 <see cref="T:System.Threading.Tasks.Task" /> 的唯一 ID。</summary>
      <returns>系統指派給目前執行中工作的整數。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.Int32)">
      <summary>建立將會在時間延遲之後完成的工作。</summary>
      <returns>表示時間延遲的工作</returns>
      <param name="millisecondsDelay">在完成傳回之工作之前等待的毫秒數</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsDelay" /> 小於 -1。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
      <summary>建立將會在時間延遲之後完成的工作。</summary>
      <returns>表示時間延遲的工作</returns>
      <param name="millisecondsDelay">在完成傳回之工作之前等待的毫秒數</param>
      <param name="cancellationToken">將會在完成傳回之工作之前檢查的取消語彙基元</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsDelay" /> 小於 -1。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <paramref name="cancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
      <summary>建立將會在時間延遲之後完成的工作。</summary>
      <returns>表示時間延遲的工作</returns>
      <param name="delay">在完成傳回之工作之前等待的時間範圍</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" /> 小於 -1 或大於 Int32.MaxValue。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>建立將會在時間延遲之後完成的工作。</summary>
      <returns>表示時間延遲的工作</returns>
      <param name="delay">在完成傳回之工作之前等待的時間範圍</param>
      <param name="cancellationToken">將會在完成傳回之工作之前檢查的取消語彙基元</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" /> 小於 -1 或大於 Int32.MaxValue。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <paramref name="cancellationToken" />。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.Exception">
      <summary>取得導致 <see cref="T:System.Threading.Tasks.Task" /> 不當結束的 <see cref="T:System.AggregateException" />。如果 <see cref="T:System.Threading.Tasks.Task" /> 順利完成，或未擲回任何例外狀況，則這會傳回 null。</summary>
      <returns>導致 <see cref="T:System.Threading.Tasks.Task" /> 不當結束的 <see cref="T:System.AggregateException" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.Factory">
      <summary>提供對 Factory 方法的存取，這些 Factory 方法可用於建立 <see cref="T:System.Threading.Tasks.Task" /> 和 <see cref="T:System.Threading.Tasks.Task`1" /> 執行個體。</summary>
      <returns>目前工作的預設 <see cref="T:System.Threading.Tasks.TaskFactory" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromResult``1(``0)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task`1" />，完全成功時會含有指定的結果。</summary>
      <returns>順利完成的工作。</returns>
      <param name="result">要儲存至完成之工作的結果。</param>
      <typeparam name="TResult">工作傳回的結果型別。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Task.GetAwaiter">
      <summary>取得用來等待這個 <see cref="T:System.Threading.Tasks.Task" /> 的等待程式。</summary>
      <returns>等待程式執行個體。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.Id">
      <summary>取得這個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的唯一 ID。</summary>
      <returns>系統指派給這個工作執行個體的整數。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsCanceled">
      <summary>取得這個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體是否因取消才完成執行。</summary>
      <returns>如果工作是由於被取消而完成則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsCompleted">
      <summary>取得這個 <see cref="T:System.Threading.Tasks.Task" /> 是否已完成。</summary>
      <returns>如果工作已完成則為 true，否則為 false。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsFaulted">
      <summary>取得 <see cref="T:System.Threading.Tasks.Task" /> 是否因未處理的例外狀況才完成。</summary>
      <returns>如果工作擲回未處理的例外狀況則為 true，否則為 false</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Action)">
      <summary>將指定的工作排入佇列，以便在 ThreadPool 上執行，並針對該工作傳回 Task 控制代碼。</summary>
      <returns>工作 (Task)，表示要排入佇列以便在 ThreadPool 上執行的工作 (Work)。</returns>
      <param name="action">以非同步方式執行的工作</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
      <summary>將指定的工作排入佇列，以便在 ThreadPool 上執行，並針對該工作傳回 Task 控制代碼。</summary>
      <returns>工作 (Task)，表示要排入佇列以便在 ThreadPool 上執行的工作 (Work)。</returns>
      <param name="action">以非同步方式執行的工作</param>
      <param name="cancellationToken">應該用來取消工作的取消語彙基元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 參數為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置與 <paramref name="cancellationToken" /> 相關聯的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>將指定的工作排入佇列，以便在 ThreadPool 上執行，並針對 <paramref name="function" /> 傳回的 Task(TResult) 傳回 Proxy。</summary>
      <returns>Task(TResult)，表示 <paramref name="function" /> 傳回之 Task(TResult) 的 Proxy。</returns>
      <param name="function">以非同步方式執行的工作</param>
      <typeparam name="TResult">Proxy Task 傳回的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>將指定的工作排入佇列，以便在 ThreadPool 上執行，並針對 <paramref name="function" /> 傳回的 Task(TResult) 傳回 Proxy。</summary>
      <returns>Task(TResult)，表示 <paramref name="function" /> 傳回之 Task(TResult) 的 Proxy。</returns>
      <param name="function">以非同步方式執行的工作</param>
      <param name="cancellationToken">應該用來取消工作的取消語彙基元。</param>
      <typeparam name="TResult">Proxy Task 傳回的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 參數為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置與 <paramref name="cancellationToken" /> 相關聯的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})">
      <summary>將指定的工作排入佇列，以便在 ThreadPool 上執行，並針對 <paramref name="function" /> 傳回之工作傳回 Proxy。</summary>
      <returns>工作，表示 <paramref name="function" /> 傳回之工作的 Proxy。</returns>
      <param name="function">以非同步方式執行的工作</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>將指定的工作排入佇列，以便在 ThreadPool 上執行，並針對 <paramref name="function" /> 傳回之工作傳回 Proxy。</summary>
      <returns>工作，表示 <paramref name="function" /> 傳回之工作的 Proxy。</returns>
      <param name="function">以非同步方式執行的工作</param>
      <param name="cancellationToken">應該用來取消工作的取消語彙基元。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 參數為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置與 <paramref name="cancellationToken" /> 相關聯的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
      <summary>將指定的工作排入佇列，以便在 ThreadPool 上執行，並針對該工作傳回 Task(TResult) 控制代碼。</summary>
      <returns>Task(TResult)，表示要排入佇列以便在 ThreadPool 中執行的工作。</returns>
      <param name="function">以非同步方式執行的工作</param>
      <typeparam name="TResult">工作的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
      <summary>將指定的工作排入佇列，以便在 ThreadPool 上執行，並針對該工作傳回 Task(TResult) 控制代碼。</summary>
      <returns>Task(TResult)，表示要排入佇列以便在 ThreadPool 中執行的工作。</returns>
      <param name="function">以非同步方式執行的工作</param>
      <param name="cancellationToken">應該用來取消工作的取消語彙基元。</param>
      <typeparam name="TResult">工作的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 參數為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置與 <paramref name="cancellationToken" /> 相關聯的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.RunSynchronously">
      <summary>在目前的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 上同步執行 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="T:System.Threading.Tasks.Task" /> 執行個體。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.Tasks.Task" /> 不是有效的啟動狀態。可能已經啟動、執行或取消，或者它是以不支援直接排程的方式建立的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
      <summary>在提供的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 上同步執行 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="scheduler">排程器，要嘗試在其上以內嵌方式執行這個工作。</param>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="T:System.Threading.Tasks.Task" /> 執行個體。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 參數為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.Tasks.Task" /> 不是有效的啟動狀態。可能已經啟動、執行或取消，或者它是以不支援直接排程的方式建立的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Start">
      <summary>啟動 <see cref="T:System.Threading.Tasks.Task" />，並排定它在目前的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 執行。</summary>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="T:System.Threading.Tasks.Task" /> 執行個體。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.Tasks.Task" /> 不是有效的啟動狀態。可能已經啟動、執行或取消，或者它是以不支援直接排程的方式建立的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)">
      <summary>啟動 <see cref="T:System.Threading.Tasks.Task" />，並排定它在指定的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 執行。</summary>
      <param name="scheduler">要與這個工作產生關聯，並用於執行這個工作的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="T:System.Threading.Tasks.Task" /> 執行個體。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 引數為 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.Tasks.Task" /> 不是有效的啟動狀態。可能已經啟動、執行或取消，或者它是以不支援直接排程的方式建立的。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.Status">
      <summary>取得這個工作的 <see cref="T:System.Threading.Tasks.TaskStatus" />。</summary>
      <returns>這個工作執行個體目前的 <see cref="T:System.Threading.Tasks.TaskStatus" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle">
      <summary>取得 <see cref="T:System.Threading.WaitHandle" />，這個項目可用來等候工作完成。</summary>
      <returns>可用來等候工作完成的 <see cref="T:System.Threading.WaitHandle" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously">
      <summary>取得作業是否已同步完成的指示。</summary>
      <returns>如果作業已同步完成則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait">
      <summary>等候 <see cref="T:System.Threading.Tasks.Task" /> 完成執行。</summary>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.AggregateException">
        <see cref="T:System.Threading.Tasks.Task" /> 已取消-或者- <see cref="T:System.Threading.Tasks.Task" /> 執行期間擲回例外狀況。如果取消工作，<see cref="T:System.AggregateException" /> 的 <see cref="P:System.AggregateException.InnerExceptions" /> 中會包含 <see cref="T:System.Threading.OperationCanceledException" /> 集合。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Int32)">
      <summary>等候 <see cref="T:System.Threading.Tasks.Task" /> 完成執行。</summary>
      <returns>如果 <see cref="T:System.Threading.Tasks.Task" /> 在指定的時間內執行完成則為 true，否則為 false。</returns>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
      <exception cref="T:System.AggregateException">
        <see cref="T:System.Threading.Tasks.Task" /> 已取消-或者- <see cref="T:System.Threading.Tasks.Task" /> 執行期間擲回例外狀況。如果取消工作，<see cref="T:System.AggregateException" /> 的 <see cref="P:System.AggregateException.InnerExceptions" /> 中會包含 <see cref="T:System.Threading.OperationCanceledException" /> 集合。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>等候 <see cref="T:System.Threading.Tasks.Task" /> 完成執行。</summary>
      <returns>如果 <see cref="T:System.Threading.Tasks.Task" /> 在指定的時間內執行完成則為 true，否則為 false。</returns>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="P:System.Threading.Tasks.Task.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
      <exception cref="T:System.AggregateException">
        <see cref="T:System.Threading.Tasks.Task" /> 已取消-或者- <see cref="T:System.Threading.Tasks.Task" /> 執行期間擲回例外狀況。如果取消工作，<see cref="T:System.AggregateException" /> 的 <see cref="P:System.AggregateException.InnerExceptions" /> 中會包含 <see cref="T:System.Threading.OperationCanceledException" /> 集合。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
      <summary>等候 <see cref="T:System.Threading.Tasks.Task" /> 完成執行。</summary>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="P:System.Threading.Tasks.Task.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.AggregateException">
        <see cref="T:System.Threading.Tasks.Task" /> 已取消-或者- <see cref="T:System.Threading.Tasks.Task" /> 執行期間擲回例外狀況。如果取消工作，<see cref="T:System.AggregateException" /> 的 <see cref="P:System.AggregateException.InnerExceptions" /> 中會包含 <see cref="T:System.Threading.OperationCanceledException" /> 集合。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
      <summary>等候 <see cref="T:System.Threading.Tasks.Task" /> 完成執行。</summary>
      <returns>如果 <see cref="T:System.Threading.Tasks.Task" /> 在指定的時間內執行完成則為 true，否則為 false。</returns>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示要等候的毫秒數，或是 <see cref="T:System.TimeSpan" />，表示無限期等候的 -1 毫秒。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是除了 -1 毫秒以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 的逾時。</exception>
      <exception cref="T:System.AggregateException">
        <see cref="T:System.Threading.Tasks.Task" /> 已取消-或者- <see cref="T:System.Threading.Tasks.Task" /> 執行期間擲回例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
      <summary>等候所有提供的 <see cref="T:System.Threading.Tasks.Task" /> 物件完成執行。</summary>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <exception cref="T:System.ObjectDisposedException">已處置 <paramref name="tasks" /> 中的一或多個 <see cref="T:System.Threading.Tasks.Task" /> 物件。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。-或-<paramref name="tasks" /> 引數包含 Null 項目。</exception>
      <exception cref="T:System.AggregateException">至少已取消一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體，或者在執行至少其中一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體期間擲回例外狀況。如果取消工作，<see cref="T:System.AggregateException" /> 的 <see cref="P:System.AggregateException.InnerExceptions" /> 中會包含 <see cref="T:System.Threading.OperationCanceledException" /> 集合。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
      <summary>等候所有提供的 <see cref="T:System.Threading.Tasks.Task" /> 物件完成執行。</summary>
      <returns>如果所有 <see cref="T:System.Threading.Tasks.Task" /> 執行個體在指定的時間內執行完成，則為 true，否則為 false。</returns>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ObjectDisposedException">已處置 <paramref name="tasks" /> 中的一或多個 <see cref="T:System.Threading.Tasks.Task" /> 物件。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。</exception>
      <exception cref="T:System.AggregateException">至少已取消一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體，或者在執行至少其中一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體期間擲回例外狀況。如果取消工作，<see cref="T:System.AggregateException" /> 的 <see cref="P:System.AggregateException.InnerExceptions" /> 中會包含 <see cref="T:System.Threading.OperationCanceledException" /> 集合。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 引數包含 Null 項目。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
      <summary>等候所有提供的 <see cref="T:System.Threading.Tasks.Task" /> 物件完成執行。</summary>
      <returns>如果所有 <see cref="T:System.Threading.Tasks.Task" /> 執行個體在指定的時間內執行完成，則為 true，否則為 false。</returns>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="P:System.Threading.Tasks.Task.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">已處置 <paramref name="tasks" /> 中的一或多個 <see cref="T:System.Threading.Tasks.Task" /> 物件。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。</exception>
      <exception cref="T:System.AggregateException">至少已取消一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體，或者在執行至少其中一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體期間擲回例外狀況。如果取消工作，<see cref="T:System.AggregateException" /> 的 <see cref="P:System.AggregateException.InnerExceptions" /> 中會包含 <see cref="T:System.Threading.OperationCanceledException" /> 集合。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 引數包含 Null 項目。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
      <summary>等候所有提供的 <see cref="T:System.Threading.Tasks.Task" /> 物件完成執行。</summary>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="P:System.Threading.Tasks.Task.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。</exception>
      <exception cref="T:System.AggregateException">至少已取消一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體，或者在執行至少其中一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體期間擲回例外狀況。如果取消工作，<see cref="T:System.AggregateException" /> 的 <see cref="P:System.AggregateException.InnerExceptions" /> 中會包含 <see cref="T:System.Threading.OperationCanceledException" /> 集合。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 引數包含 Null 項目。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置 <paramref name="tasks" /> 中的一或多個 <see cref="T:System.Threading.Tasks.Task" /> 物件。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
      <summary>等候所有提供的 <see cref="T:System.Threading.Tasks.Task" /> 物件完成執行。</summary>
      <returns>如果所有 <see cref="T:System.Threading.Tasks.Task" /> 執行個體在指定的時間內執行完成，則為 true，否則為 false。</returns>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示要等候的毫秒數，或是 <see cref="T:System.TimeSpan" />，表示無限期等候的 -1 毫秒。</param>
      <exception cref="T:System.ObjectDisposedException">已處置 <paramref name="tasks" /> 中的一或多個 <see cref="T:System.Threading.Tasks.Task" /> 物件。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。</exception>
      <exception cref="T:System.AggregateException">至少已取消一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體，或者在執行至少其中一個 <see cref="T:System.Threading.Tasks.Task" /> 執行個體期間擲回例外狀況。如果取消工作，<see cref="T:System.AggregateException" /> 的 <see cref="P:System.AggregateException.InnerExceptions" /> 中會包含 <see cref="T:System.Threading.OperationCanceledException" /> 集合。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是除了 -1 毫秒以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 的逾時。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 引數包含 Null 項目。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
      <summary>等候任一提供的 <see cref="T:System.Threading.Tasks.Task" /> 物件完成執行。</summary>
      <returns>
        <paramref name="tasks" /> 陣列引數中已完成工作的索引。</returns>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 引數包含 Null 項目。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
      <summary>等候任一提供的 <see cref="T:System.Threading.Tasks.Task" /> 物件完成執行。</summary>
      <returns>
        <paramref name="tasks" /> 陣列引數中已完成之工作的索引，如果發生逾時則為 -1。</returns>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 引數包含 Null 項目。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
      <summary>等候任一提供的 <see cref="T:System.Threading.Tasks.Task" /> 物件完成執行。</summary>
      <returns>
        <paramref name="tasks" /> 陣列引數中已完成之工作的索引，如果發生逾時則為 -1。</returns>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <param name="millisecondsTimeout">要等候的毫秒數，如果要無限期等候，則為 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="P:System.Threading.Tasks.Task.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一個不等於 -1 的負數，-1 表示無限期的等候逾時。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 引數包含 Null 項目。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
      <summary>等候任一提供的 <see cref="T:System.Threading.Tasks.Task" /> 物件完成執行。</summary>
      <returns>
        <paramref name="tasks" /> 陣列引數中已完成工作的索引。</returns>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <param name="cancellationToken">等候工作完成時要觀察的 <see cref="P:System.Threading.Tasks.Task.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 引數包含 Null 項目。</exception>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
      <summary>等候任一提供的 <see cref="T:System.Threading.Tasks.Task" /> 物件完成執行。</summary>
      <returns>
        <paramref name="tasks" /> 陣列引數中已完成之工作的索引，如果發生逾時則為 -1。</returns>
      <param name="tasks">要等待之 <see cref="T:System.Threading.Tasks.Task" /> 執行個體的陣列。</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，表示要等候的毫秒數，或是 <see cref="T:System.TimeSpan" />，表示無限期等候的 -1 毫秒。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是除了 -1 毫秒以外的負數，表示無限逾時，或是大於 <see cref="F:System.Int32.MaxValue" /> 的逾時。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 引數包含 Null 項目。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
      <summary>建立將在完成所有提供之工作時完成的工作。</summary>
      <returns>表示所有提供之工作均已完成的工作。</returns>
      <param name="tasks">等待完成的工作。</param>
      <typeparam name="TResult">完成之工作的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 集合包含 null 工作。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
      <summary>建立將在完成所有提供之工作時完成的工作。</summary>
      <returns>表示所有提供之工作均已完成的工作。</returns>
      <param name="tasks">等待完成的工作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 集合包含 null 工作。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
      <summary>建立將在完成所有提供之工作時完成的工作。</summary>
      <returns>表示所有提供之工作均已完成的工作。</returns>
      <param name="tasks">等待完成的工作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 工作。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
      <summary>建立將在完成所有提供之工作時完成的工作。</summary>
      <returns>表示所有提供之工作均已完成的工作。</returns>
      <param name="tasks">等待完成的工作。</param>
      <typeparam name="TResult">完成之工作的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 工作。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
      <summary>建立將在完成任何提供之工作時完成的工作。</summary>
      <returns>表示有一個提供之工作已完成的工作。傳回之 Task 的結果是工作已完成。</returns>
      <param name="tasks">等待完成的工作。</param>
      <typeparam name="TResult">完成之工作的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 工作，或者它是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
      <summary>建立將在完成任何提供之工作時完成的工作。</summary>
      <returns>表示有一個提供之工作已完成的工作。傳回之 Task 的結果是工作已完成。</returns>
      <param name="tasks">等待完成的工作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 工作，或者它是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])">
      <summary>建立將在完成任何提供之工作時完成的工作。</summary>
      <returns>表示有一個提供之工作已完成的工作。傳回之 Task 的結果是工作已完成。</returns>
      <param name="tasks">等待完成的工作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 工作，或者它是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
      <summary>建立將在完成任何提供之工作時完成的工作。</summary>
      <returns>表示有一個提供之工作已完成的工作。傳回之 Task 的結果是工作已完成。</returns>
      <param name="tasks">等待完成的工作。</param>
      <typeparam name="TResult">完成之工作的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 陣列包含 null 工作，或者它是空的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Yield">
      <summary>建立一個可等待的動作，會在等待時以非同步方式產生回目前的內容中。</summary>
      <returns>內容，會在等待時，於等待期間以非同步方式轉換回目前的內容。如果目前的 SynchronizationContext 並非 Null，則會將它視為目前的內容。某則，會將 TaskScheduler.Current 視為目前的內容。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Task`1">
      <summary>表示可傳回值的非同步作業。</summary>
      <typeparam name="TResult">這個 <see cref="T:System.Threading.Tasks.Task`1" /> 所產生之結果的型別。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
      <summary>使用指定的函式，初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">委派，表示工作中要執行的程式碼。當函式完成時，工作的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會設定成傳回函式的結果值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)">
      <summary>使用指定的函式，初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">委派，表示工作中要執行的程式碼。當函式完成時，工作的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會設定成傳回函式的結果值。</param>
      <param name="cancellationToken">要指派給這個工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的函式和建立選項，初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">委派，表示工作中要執行的程式碼。當函式完成時，工作的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會設定成傳回函式的結果值。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="creationOptions">
        <see cref="T:System.Threading.Tasks.TaskCreationOptions" />，用於自訂工作的行為。</param>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的函式和建立選項，初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">委派，表示工作中要執行的程式碼。當函式完成時，工作的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會設定成傳回函式的結果值。</param>
      <param name="creationOptions">
        <see cref="T:System.Threading.Tasks.TaskCreationOptions" />，用於自訂工作的行為。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)">
      <summary>使用指定的函式和狀態，初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">委派，表示工作中要執行的程式碼。當函式完成時，工作的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會設定成傳回函式的結果值。</param>
      <param name="state">物件，表示動作所需的資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
      <summary>使用指定的動作、狀態和選項，初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">委派，表示工作中要執行的程式碼。當函式完成時，工作的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會設定成傳回函式的結果值。</param>
      <param name="state">物件，表示函式所需的資料。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的動作、狀態和選項，初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">委派，表示工作中要執行的程式碼。當函式完成時，工作的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會設定成傳回函式的結果值。</param>
      <param name="state">物件，表示函式所需的資料。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="creationOptions">
        <see cref="T:System.Threading.Tasks.TaskCreationOptions" />，用於自訂工作的行為。</param>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的動作、狀態和選項，初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">委派，表示工作中要執行的程式碼。當函式完成時，工作的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 屬性會設定成傳回函式的結果值。</param>
      <param name="state">物件，表示函式所需的資料。</param>
      <param name="creationOptions">
        <see cref="T:System.Threading.Tasks.TaskCreationOptions" />，用於自訂工作的行為。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)">
      <summary>設定用來等待這個 <see cref="T:System.Threading.Tasks.Task`1" /> 的等待程式。</summary>
      <returns>用來等待這個工作的物件。</returns>
      <param name="continueOnCapturedContext">true 表示嘗試將接續動作封送處理回到所擷取的原始內容，否則為 false。</param>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時非同步執行的接續工作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的動作。執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時非同步執行的接續工作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的動作。執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。-或-已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立接續符號，該接續符號會根據 <paramref name="continuationOptions" /> 中指定的條件執行。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">要根據 <paramref name="continuationOptions" /> 中指定之條件執行的動作。執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。-或-已處置建立 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。-或-<paramref name="scheduler" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值無效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立接續符號，該接續符號會根據 <paramref name="continuationOptions" /> 中指定的條件執行。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">要根據 <paramref name="continuationOptions" /> 中指定之條件執行的動作。執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值無效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時非同步執行的接續工作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的動作。執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。-或-<paramref name="scheduler" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的動作。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續動作所需的資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的動作。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續動作所需的資料。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的動作。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續動作所需的資料。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 引數為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的動作。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續動作所需的資料。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值無效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="continuationAction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的動作。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續動作所需的資料。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時非同步執行的接續工作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的函式。執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <typeparam name="TNewResult"> 接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時非同步執行的接續工作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的函式。執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TNewResult"> 接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。-或-已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立接續符號，該接續符號會根據 <paramref name="continuationOptions" /> 中指定的條件執行。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">要根據 <paramref name="continuationOptions" /> 中指定之條件執行的函式。執行時，會將這個完成的工作當做引數傳遞給委派。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TNewResult"> 接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。-或-已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。-或-<paramref name="scheduler" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值無效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立接續符號，該接續符號會根據 <paramref name="continuationOptions" /> 中指定的條件執行。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">要根據 <paramref name="continuationOptions" /> 中指定之條件執行的函式。執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <typeparam name="TNewResult"> 接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值無效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)">
      <summary>建立當目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時非同步執行的接續工作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的函式。執行時，會將已完成的工作當做引數傳遞給委派。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TNewResult"> 接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Threading.Tasks.Task`1" /> 已經處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。-或-<paramref name="scheduler" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的函式。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續函式所需的資料。</param>
      <typeparam name="TNewResult">接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的函式。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續函式所需的資料。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TNewResult">接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的函式。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續函式所需的資料。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TNewResult">接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值無效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 引數為 null。</exception>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的函式。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續函式所需的資料。</param>
      <param name="continuationOptions">接續工作的排程時間及其行為方式的適用選項。這包含準則 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />) 和執行選項 (如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />)。</param>
      <typeparam name="TNewResult">接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值無效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>建立要在目標 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時執行的接續動作。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <param name="continuationFunction">當 <see cref="T:System.Threading.Tasks.Task`1" /> 完成時要執行的函式。執行時，會將委派當成完成的工作並將呼叫端提供的狀態物件當成引數來傳遞。</param>
      <param name="state">物件，表示接續函式所需的資料。</param>
      <param name="scheduler">要與接續工作產生關聯且於執行時使用的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TNewResult">接續作業所產生的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 引數為 null。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task`1.Factory">
      <summary>存取用於建立 <see cref="T:System.Threading.Tasks.Task`1" /> 執行個體的 Factory 方法。</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 的預設執行個體。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.GetAwaiter">
      <summary>取得用來等待這個 <see cref="T:System.Threading.Tasks.Task`1" /> 的等待程式。</summary>
      <returns>等待程式執行個體。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task`1.Result">
      <summary>取得這個 <see cref="T:System.Threading.Tasks.Task`1" /> 的結果值。</summary>
      <returns>這個 <see cref="T:System.Threading.Tasks.Task`1" /> 的結果值，與工作的型別參數同一型別。</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCanceledException">
      <summary>表示用來傳達工作取消的例外狀況。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，則會在處理內部例外狀況的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Threading.Tasks.Task)">
      <summary>使用已取消之 <see cref="T:System.Threading.Tasks.Task" /> 的參考，初始化 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 類別的新執行個體。</summary>
      <param name="task">已取消的工作。</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskCanceledException.Task">
      <summary>取得與這個例外狀況相關聯的工作。</summary>
      <returns>與這個例外狀況相關聯之 <see cref="T:System.Threading.Tasks.Task" /> 的參考。</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCompletionSource`1">
      <summary>表示未與委派繫結之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的生產者端，可提供透過 <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> 屬性對消費者端的存取。</summary>
      <typeparam name="TResult">與這個 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> 相關聯之結果值的型別。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor">
      <summary>建立 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)">
      <summary>使用指定的狀態，建立 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</summary>
      <param name="state">要當成基礎 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 之 AsyncState 的狀態。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的狀態和選項，建立 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</summary>
      <param name="state">要當成基礎 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 之 AsyncState 的狀態。</param>
      <param name="creationOptions">建立基礎 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 時要使用的選項。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 代表搭配 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> 使用的選項無效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的選項，建立 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />。</summary>
      <param name="creationOptions">建立基礎 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 時要使用的選項。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 代表搭配 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> 使用的選項無效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
      <summary>將基礎 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 轉換為 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> 狀態。</summary>
      <exception cref="T:System.InvalidOperationException">基礎 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 已處於三種最終狀態的其中一種：<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />，或是已處置基礎 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>將基礎 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 轉換為 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態。</summary>
      <param name="exceptions">要繫結至這個 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的例外狀況集合。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> 已處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="exceptions" /> 中有一或多個 Null 項目。</exception>
      <exception cref="T:System.InvalidOperationException">基礎 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 已處於三種最終狀態的其中一種：<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
      <summary>將基礎 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 轉換為 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態。</summary>
      <param name="exception">要繫結至這個 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的例外狀況。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> 已處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 引數為 null。</exception>
      <exception cref="T:System.InvalidOperationException">基礎 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 已處於三種最終狀態的其中一種：<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
      <summary>將基礎 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 轉換為 <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> 狀態。</summary>
      <param name="result">要繫結至這個 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的結果值。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> 已處置。</exception>
      <exception cref="T:System.InvalidOperationException">基礎 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 已處於三種最終狀態的其中一種：<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
      <summary>取得這個 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> 所建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>傳回這個 <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> 建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
      <summary>嘗試將基礎 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 轉換為 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> 狀態。</summary>
      <returns>如果作業成功則為 true，如果作業未成功或物件已被處置則為 false。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>嘗試將基礎 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 轉換為 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態。</summary>
      <returns>如果作業成功，則為 true，否則為 false。</returns>
      <param name="exceptions">要繫結至這個 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的例外狀況集合。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> 已處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> 引數為 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="exceptions" /> 中有一或多個 Null 項目。-或-<paramref name="exceptions" /> 集合為空白。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
      <summary>嘗試將基礎 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 轉換為 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 狀態。</summary>
      <returns>如果作業成功，則為 true，否則為 false。</returns>
      <param name="exception">要繫結至這個 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的例外狀況。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> 已處置。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> 引數為 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
      <summary>嘗試將基礎 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 轉換為 <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> 狀態。</summary>
      <returns>如果作業成功，則為 true，否則為 false。</returns>
      <param name="result">要繫結至這個 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的結果值。</param>
    </member>
    <member name="T:System.Threading.Tasks.TaskContinuationOptions">
      <summary>指定使用 <see cref="T:System.Threading.Tasks.Task.ContinueWith" /> 或 <see cref="T:System.Threading.Tasks.Task`1.ContinueWith" /> 方法建立之工作的行為。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
      <summary>指定將工作附加至工作階層中的父代。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach">
      <summary>如果已嘗試將子工作附加到所建立的工作，則指定將擲回 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
      <summary>指定應該要同步執行接續工作。指定這個選項後，接續工作會在造成前項工作轉入最終狀態的同一個執行緒上執行。如果建立接續工作時前項工作已完成，則接續工作會在建立接續工作的執行緒上執行。只有執行時間很短的接續工作才適合以同步方式執行。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.HideScheduler">
      <summary>防止周遭排程器會在建立的工作中看見目前的排程器。這表示像是 StartNew 或 ContinueWith 等會在所建立之工作上執行的作業將可看見 <see cref="P:System.Threading.Tasks.TaskScheduler.Default" /> 為目前的排程器。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.LazyCancellation">
      <summary>在取消接續的情況下，可以在前項完成之前，防止接續完成。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.LongRunning">
      <summary>指定工作會是長時間執行的繁複作業。這會提示 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 可能會發生過度訂閱的狀況。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.None">
      <summary>預設值 =「繼續進行任何項目、沒有工作選項、非同步執行」。指定應該使用預設行為。根據預設值，當前項工作完成時，不論工作的最終 <see cref="T:System.Threading.Tasks.TaskStatus" /> 為何，都會排定接續工作。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
      <summary>指定當接續工作的前項工作取消時，不應該排定接續工作。這個選項對多工延續而言無效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
      <summary>指定當接續工作的前項工作擲回未處理的例外狀況時，不應該排定接續工作。這個選項對多工延續而言無效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
      <summary>指定當接續工作的前項工作徹底執行後，不應該排定接續工作。這個選項對多工延續而言無效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
      <summary>指定只有當接續工作的前項工作取消時，才應該排定接續工作。這個選項對多工延續而言無效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
      <summary>指定只有當接續工作的前項工作擲回未處理的例外狀況時，才應該排定接續工作。這個選項對多工延續而言無效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
      <summary>指定只有當接續工作的前項工作徹定執行後，才應該排定接續工作。這個選項對多工延續而言無效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.PreferFairness">
      <summary>提示 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 盡量依公平法則排定工作，即盡量讓較早排定的工作較早執行，並讓較晚排定的工作較晚執行。</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskCreationOptions">
      <summary>指定旗標，這些旗標控制建立和執行工作時的選擇性行為。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent">
      <summary>指定將工作附加至工作階層中的父代。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach">
      <summary>如果已嘗試將子工作附加到所建立的工作，則指定將擲回 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.HideScheduler">
      <summary>防止周遭排程器會在建立的工作中看見目前的排程器。這表示像是 StartNew 或 ContinueWith 等會在所建立之工作上執行的作業將可看見 <see cref="P:System.Threading.Tasks.TaskScheduler.Default" /> 為目前的排程器。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.LongRunning">
      <summary>指定工作會是長時間執行的繁複作業。這會提示 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 可能會發生過度訂閱的狀況。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.None">
      <summary>指定應該使用預設行為。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.PreferFairness">
      <summary>提示 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 盡量依公平法則排定工作，即盡量讓較早排定的工作較早執行，並讓較晚排定的工作較晚執行。</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskFactory">
      <summary>提供建立和排定 <see cref="T:System.Threading.Tasks.Task" /> 物件的支援。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor">
      <summary>使用預設組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 執行個體。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)">
      <summary>使用指定的組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 執行個體。</summary>
      <param name="cancellationToken">除非呼叫 Factory 方法時明確指定另一個 CancellationToken，否則為將指派給這個 <see cref="T:System.Threading.Tasks.TaskFactory" /> 所建立之工作的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>使用指定的組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 執行個體。</summary>
      <param name="cancellationToken">除非呼叫 Factory 方法時明確指定另一個 CancellationToken，否則為將指派給這個 <see cref="T:System.Threading.Tasks.TaskFactory" /> 所建立之工作的預設 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="creationOptions">使用這個 TaskFactory 建立工作時要採用的預設 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <param name="continuationOptions">使用這個 TaskFactory 建立接續工作時要採用的預設 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />。</param>
      <param name="scheduler">預設 <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定任何以這個 TaskFactory 建立的工作。Null 值表示應該使用 TaskScheduler.Current。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">當 <paramref name="creationOptions" /> 引數或 <paramref name="continuationOptions" /> 引數指定了無效的值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>使用指定的組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 執行個體。</summary>
      <param name="creationOptions">使用這個 TaskFactory 建立工作時要採用的預設 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <param name="continuationOptions">使用這個 TaskFactory 建立接續工作時要採用的預設 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">當 <paramref name="creationOptions" /> 引數或 <paramref name="continuationOptions" /> 引數指定了無效的值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>使用指定的組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 執行個體。</summary>
      <param name="scheduler">預設 <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定任何以這個 TaskFactory 建立的工作。Null 值表示應該使用目前 TaskScheduler。</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.CancellationToken">
      <summary>取得這個 TaskFactory 的預設 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>這個 TaskFactory 的預設 <see cref="T:System.Threading.CancellationToken" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.ContinuationOptions">
      <summary>取得這個 TaskFactory 的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值。</summary>
      <returns>這個 TaskFactory 的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要執行的動作委派。</param>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationAction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要執行的動作委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。-或-已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationAction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要執行的動作委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定建立的接續 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationAction" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要執行的動作委派。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationAction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定不正確的 TaskContinuationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 相關聯的結果的型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 相關聯的結果的型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。-或-已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定建立的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 相關聯的結果的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 相關聯的結果的型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定不正確的 TaskContinuationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要執行的動作委派。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationAction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要執行的動作委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。-或-已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationAction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要執行的動作委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定建立的接續 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationAction" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要執行的動作委派。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationAction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定不正確的 TaskContinuationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 相關聯的結果的型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 相關聯的結果的型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。-或-已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定建立的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 相關聯的結果的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定不正確的 TaskContinuationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。-或-已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 相關聯的結果的型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定不正確的 TaskContinuationOptions 值時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要執行的動作委派。</param>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationAction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要執行的動作委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。-或-已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationAction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要執行的動作委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定建立的接續 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationAction" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要執行的動作委派。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationAction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定不正確的 TaskContinuationOptions 值時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 相關聯的結果的型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 相關聯的結果的型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。-或-已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定建立的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 相關聯的結果的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 相關聯的結果的型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定不正確的 TaskContinuationOptions 值時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要執行的動作委派。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationAction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要執行的動作委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。-或-已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationAction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要執行的動作委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定建立的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationAction" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationAction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要執行的動作委派。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationAction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定不正確的 TaskContinuationOptions 值時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 相關聯的結果的型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 相關聯的結果的型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。-或-已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定建立的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 相關聯的結果的型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委派傳回，且與建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 相關聯的結果的型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定不正確的 TaskContinuationOptions 值時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.CreationOptions">
      <summary>取得這個 TaskFactory 的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。</summary>
      <returns>這個 TaskFactory 的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 取得的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 取得的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數型別。</typeparam>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 取得的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數型別。</typeparam>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 取得的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數型別。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數型別。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數型別。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數型別。</typeparam>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 取得的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數型別。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數型別。</typeparam>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 取得的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="arg3">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數型別。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數型別。</typeparam>
      <typeparam name="TArg3">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="arg3">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數型別。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數型別。</typeparam>
      <typeparam name="TArg3">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="arg3">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數型別。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數型別。</typeparam>
      <typeparam name="TArg3">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數型別。</typeparam>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 取得的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="arg3">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數型別。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數型別。</typeparam>
      <typeparam name="TArg3">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數型別。</typeparam>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 取得的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，這個項目會在指定的 <see cref="T:System.IAsyncResult" /> 完成時執行結束方法動作。</summary>
      <returns>表示非同步作業的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="asyncResult">IAsyncResult，完成時會觸發 <paramref name="endMethod" /> 處理作業。</param>
      <param name="endMethod">動作委派，會處理已完成的 <paramref name="asyncResult" />。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="asyncResult" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，這個項目會在指定的 <see cref="T:System.IAsyncResult" /> 完成時執行結束方法動作。</summary>
      <returns>表示非同步作業的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="asyncResult">IAsyncResult，完成時會觸發 <paramref name="endMethod" /> 處理作業。</param>
      <param name="endMethod">動作委派，會處理已完成的 <paramref name="asyncResult" />。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="asyncResult" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task" />，這個項目會在指定的 <see cref="T:System.IAsyncResult" /> 完成時執行結束方法動作。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task" />，表示非同步作業。</returns>
      <param name="asyncResult">IAsyncResult，完成時會觸發 <paramref name="endMethod" /> 處理作業。</param>
      <param name="endMethod">動作委派，會處理已完成的 <paramref name="asyncResult" />。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排程可執行結束方法的工作。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="asyncResult" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，當指定的 <see cref="T:System.IAsyncResult" /> 完成時會執行結束方法函式。</summary>
      <returns>表示非同步作業的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="asyncResult">IAsyncResult，完成時會觸發 <paramref name="endMethod" /> 處理作業。</param>
      <param name="endMethod">函式委派，會處理已完成的 <paramref name="asyncResult" />。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 取得的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="asyncResult" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，當指定的 <see cref="T:System.IAsyncResult" /> 完成時會執行結束方法函式。</summary>
      <returns>表示非同步作業的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="asyncResult">IAsyncResult，完成時會觸發 <paramref name="endMethod" /> 處理作業。</param>
      <param name="endMethod">函式委派，會處理已完成的 <paramref name="asyncResult" />。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 取得的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="asyncResult" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，當指定的 <see cref="T:System.IAsyncResult" /> 完成時會執行結束方法函式。</summary>
      <returns>表示非同步作業的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="asyncResult">IAsyncResult，完成時會觸發 <paramref name="endMethod" /> 處理作業。</param>
      <param name="endMethod">函式委派，會處理已完成的 <paramref name="asyncResult" />。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排程可執行結束方法的工作。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 取得的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="asyncResult" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.Scheduler">
      <summary>取得這個 TaskFactory 的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
      <returns>這個 TaskFactory 的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="action">要以非同步方式執行的動作委派。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="action" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="action">要以非同步方式執行的動作委派。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="action" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="action">要以非同步方式執行的動作委派。</param>
      <param name="cancellationToken">
        <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />，將指派給新的 <see cref="T:System.Threading.Tasks.Task" /></param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排程已建立的 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="action" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="action">要以非同步方式執行的動作委派。</param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="action" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="action">要以非同步方式執行的動作委派。</param>
      <param name="state">物件，包含 <paramref name="action" /> 委派要使用的資料。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="action" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="action">要以非同步方式執行的動作委派。</param>
      <param name="state">物件，包含 <paramref name="action" /> 委派要使用的資料。</param>
      <param name="cancellationToken">
        <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />，將指派給新的 <see cref="T:System.Threading.Tasks.Task" /></param>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="action" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="action">要以非同步方式執行的動作委派。</param>
      <param name="state">物件，包含 <paramref name="action" /> 委派要使用的資料。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排程已建立的 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="action" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <param name="action">要以非同步方式執行的動作委派。</param>
      <param name="state">物件，包含 <paramref name="action" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task" /> 的行為。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="action" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 使用的未來結果。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 取得的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="function" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 使用的未來結果。</param>
      <param name="cancellationToken">
        <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />，將指派給新的 <see cref="T:System.Threading.Tasks.Task" /></param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 取得的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="function" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 使用的未來結果。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排程已建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 取得的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="function" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 使用的未來結果。</param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 取得的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="function" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 使用的未來結果。</param>
      <param name="state">物件，包含 <paramref name="function" /> 委派要使用的資料。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 取得的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="function" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 使用的未來結果。</param>
      <param name="state">物件，包含 <paramref name="function" /> 委派要使用的資料。</param>
      <param name="cancellationToken">
        <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />，將指派給新的 <see cref="T:System.Threading.Tasks.Task" /></param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 取得的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="function" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 使用的未來結果。</param>
      <param name="state">物件，包含 <paramref name="function" /> 委派要使用的資料。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排程已建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 取得的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">已經處置所提供的 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="function" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 使用的未來結果。</param>
      <param name="state">物件，包含 <paramref name="function" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <typeparam name="TResult">透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 取得的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="function" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。<paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。如需詳細資訊，請參閱 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的＜備註＞</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskFactory`1">
      <summary>提供建立和排定 <see cref="T:System.Threading.Tasks.Task`1" /> 物件的支援。</summary>
      <typeparam name="TResult">可透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 物件取得的結果型別，這些物件與這個類別中的方法相關聯。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor">
      <summary>使用預設組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 執行個體。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)">
      <summary>使用預設組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 執行個體。</summary>
      <param name="cancellationToken">除非呼叫 Factory 方法時明確指定另一個 CancellationToken，否則為將指派給這個 <see cref="T:System.Threading.Tasks.TaskFactory" /> 所建立之工作的預設 <see cref="P:System.Threading.Tasks.TaskFactory`1.CancellationToken" />。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>使用指定的組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 執行個體。</summary>
      <param name="cancellationToken">除非呼叫 Factory 方法時明確指定另一個 CancellationToken，否則為將指派給這個 <see cref="T:System.Threading.Tasks.TaskFactory" /> 所建立之工作的預設 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="creationOptions">使用這個 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 建立工作時要採用的預設 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <param name="continuationOptions">使用這個 TaskFactory{TResult} 建立接續工作時要採用的預設 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />。</param>
      <param name="scheduler">預設 <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定任何以這個 TaskFactory{TResult} 建立的工作。Null 值表示應該使用 TaskScheduler.Current。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">當 <paramref name="creationOptions" /> 引數或 <paramref name="continuationOptions" /> 引數指定了無效的值時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>使用指定的組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 執行個體。</summary>
      <param name="creationOptions">使用這個 TaskFactory{TResult} 建立工作時要採用的預設 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <param name="continuationOptions">使用這個 TaskFactory{TResult} 建立接續工作時要採用的預設 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">當 <paramref name="creationOptions" /> 引數或 <paramref name="continuationOptions" /> 引數指定了無效的值時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>使用指定的組態，初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 執行個體。</summary>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定任何以這個 TaskFactory{TResult} 建立的工作。Null 值表示應該使用目前 TaskScheduler。</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.CancellationToken">
      <summary>取得這個 TaskFactory 的預設 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns>傳回這個 TaskFactory 的預設 <see cref="T:System.Threading.CancellationToken" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions">
      <summary>取得這個 TaskFactory{TResult} 的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。</summary>
      <returns>傳回這個 <see cref="T:System.Threading.Tasks.TaskFactory{TResult}" /> 的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。-或-已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定建立的接續 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定不正確的 TaskContinuationOptions 值時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。-或-已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定不正確的 TaskContinuationOptions 值時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。-或-已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定建立的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定不正確的 TaskContinuationOptions 值時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。-或-已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的一組工作完成時啟動的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">要接續之工作的所在陣列。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的所有工作都已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定不正確的 TaskContinuationOptions 值時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。-或-已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定建立的接續 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定不正確的 TaskContinuationOptions 值時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。-或-已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定不正確的 TaskContinuationOptions 值時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。-或-已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="cancellationToken">要指派給新接續工作的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排定建立的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定不正確的 TaskContinuationOptions 值時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。-或-已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>建立會在提供的任何一項工作完成時啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>新的接續 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="tasks">工作的陣列，當其中一個工作完成時，會接續另一個工作。</param>
      <param name="continuationFunction">當 <paramref name="tasks" /> 陣列中的任一個工作已經完成時，要以非同步方式執行的函式委派。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，控制建立之接續 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <typeparam name="TAntecedentResult">前項 <paramref name="tasks" /> 的結果型別。</typeparam>
      <exception cref="T:System.ObjectDisposedException">處置 <paramref name="tasks" /> 陣列中其中一個項目時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="tasks" /> 陣列是 Null 時，所擲回的例外狀況。-或-當 <paramref name="continuationFunction" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 引數指定不正確的 TaskContinuationOptions 值時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentException">當 <paramref name="tasks" /> 陣列包含 Null 值時，所擲回的例外狀況。-或-當 <paramref name="tasks" /> 陣列是空的時，所擲回的例外狀況。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.CreationOptions">
      <summary>取得這個 TaskFactory{TResult} 的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。</summary>
      <returns>傳回這個 <see cref="T:System.Threading.Tasks.TaskFactory{TResult}" /> 的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數型別。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數型別。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="arg3">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數型別。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數型別。</typeparam>
      <typeparam name="TArg3">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，這個項目表示一組符合「非同步程式設計模型」模式的開始和結束方法。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />，表示非同步作業。</returns>
      <param name="beginMethod">開始非同步作業的委派。</param>
      <param name="endMethod">結束非同步作業的委派。</param>
      <param name="arg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數。</param>
      <param name="arg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數。</param>
      <param name="arg3">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數。</param>
      <param name="state">物件，包含 <paramref name="beginMethod" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <typeparam name="TArg1">傳遞至 <paramref name="beginMethod" /> 委派的第一個引數型別。</typeparam>
      <typeparam name="TArg2">傳遞至 <paramref name="beginMethod" /> 委派的第二個引數型別。</typeparam>
      <typeparam name="TArg3">傳遞至 <paramref name="beginMethod" /> 委派的第三個引數型別。</typeparam>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="beginMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，當指定的 <see cref="T:System.IAsyncResult" /> 完成時會執行結束方法函式。</summary>
      <returns>表示非同步作業的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="asyncResult">IAsyncResult，完成時會觸發 <paramref name="endMethod" /> 處理作業。</param>
      <param name="endMethod">函式委派，會處理已完成的 <paramref name="asyncResult" />。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="asyncResult" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，當指定的 <see cref="T:System.IAsyncResult" /> 完成時會執行結束方法函式。</summary>
      <returns>表示非同步作業的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="asyncResult">IAsyncResult，完成時會觸發 <paramref name="endMethod" /> 處理作業。</param>
      <param name="endMethod">函式委派，會處理已完成的 <paramref name="asyncResult" />。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="asyncResult" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立 <see cref="T:System.Threading.Tasks.Task{TResult}" />，當指定的 <see cref="T:System.IAsyncResult" /> 完成時會執行結束方法函式。</summary>
      <returns>建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />，表示非同步作業。</returns>
      <param name="asyncResult">IAsyncResult，完成時會觸發 <paramref name="endMethod" /> 處理作業。</param>
      <param name="endMethod">函式委派，會處理已完成的 <paramref name="asyncResult" />。</param>
      <param name="creationOptions">TaskCreationOptions 值，控制建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排程可執行結束方法的工作。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="asyncResult" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="endMethod" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.Scheduler">
      <summary>取得這個 TaskFactory{TResult} 的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
      <returns>傳回這個 <see cref="T:System.Threading.Tasks.TaskFactory{TResult}" /> 的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 值。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 使用的未來結果。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="function" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 使用的未來結果。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="P:System.Threading.Tasks.TaskFactory`1.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="function" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 使用的未來結果。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="P:System.Threading.Tasks.TaskFactory`1.CancellationToken" />。</param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排程已建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</param>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="function" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 使用的未來結果。</param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="function" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 使用的未來結果。</param>
      <param name="state">物件，包含 <paramref name="function" /> 委派要使用的資料。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="function" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 使用的未來結果。</param>
      <param name="state">物件，包含 <paramref name="function" /> 委派要使用的資料。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="P:System.Threading.Tasks.TaskFactory`1.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="function" /> 引數為 Null 時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 使用的未來結果。</param>
      <param name="state">物件，包含 <paramref name="function" /> 委派要使用的資料。</param>
      <param name="cancellationToken">要指派給新工作的 <see cref="P:System.Threading.Tasks.TaskFactory`1.CancellationToken" />。</param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <param name="scheduler">
        <see cref="T:System.Threading.Tasks.TaskScheduler" />，用來排程已建立的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</param>
      <exception cref="T:System.ObjectDisposedException">已處置建立 <paramref name=" cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="function" /> 引數為 Null 時，所擲回的例外狀況。-或-當 <paramref name="scheduler" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>建立並啟動 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</summary>
      <returns>啟動的 <see cref="T:System.Threading.Tasks.Task{TResult}" />。</returns>
      <param name="function">函式委派，會傳回將可透過 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 使用的未來結果。</param>
      <param name="state">物件，包含 <paramref name="function" /> 委派要使用的資料。</param>
      <param name="creationOptions">TaskCreationOptions 值，可控制已建立之 <see cref="T:System.Threading.Tasks.Task{TResult}" /> 的行為。</param>
      <exception cref="T:System.ArgumentNullException">當 <paramref name="function" /> 引數為 Null 時，所擲回的例外狀況。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 引數指定不正確的 TaskCreationOptions 值時，所擲回的例外狀況。</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskScheduler">
      <summary>表示物件，這個物件會處理將工作排入至執行緒上的低階工作。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.#ctor">
      <summary>初始化 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Current">
      <summary>取得與目前執行之工作相關聯的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
      <returns>傳回與目前執行之工作相關聯的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Default">
      <summary>取得 .NET Framework 提供的預設 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 執行個體。</summary>
      <returns>傳回預設 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 執行個體。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext">
      <summary>建立與目前 <see cref="T:System.Threading.SynchronizationContext" /> 相關聯的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
      <returns>與目前 <see cref="T:System.Threading.SynchronizationContex" /><see cref="t" /> (由 <see cref="P:System.Threading.SynchronizationContext.Current" /> 所決定) 相關聯的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</returns>
      <exception cref="T:System.InvalidOperationException">目前的 SynchronizationContext 不可以當做 TaskScheduler 使用。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.GetScheduledTasks">
      <summary>[安全性關鍵] 僅限偵錯工具支援，針對目前已排入至排程器中等候執行 <see cref="T:System.Threading.Tasks.Task" /> 執行個體，產生可列舉項目。</summary>
      <returns>可列舉項目，允許偵錯工具在目前已排入至這個排程器中的工作之間周遊。</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Id">
      <summary>取得這個 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 的唯一 ID。</summary>
      <returns>傳回這個 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 的唯一 ID。</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel">
      <summary>表示這個 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 可以支援的最大並行層級。</summary>
      <returns>傳回整數，表示最大並行層級。預設排程器會傳回 <see cref="P:System.Int32.MaxValue" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)">
      <summary>[安全性關鍵] 將 <see cref="T:System.Threading.Tasks.Task" /> 排入至排程器。</summary>
      <param name="task">要排入的 <see cref="T:System.Threading.Tasks.Task" />。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
      <summary>[安全性關鍵] 嘗試清除之前排入至這個排程器的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>布林值，表示是否已經成功清除 <paramref name="task" /> 引數。</returns>
      <param name="task">要清除的 <see cref="T:System.Threading.Tasks.Task" />。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)">
      <summary>[安全性關鍵] 嘗試在這個排程器上執行提供的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <returns>布林值，如果已成功執行 <paramref name="task" /> 則為 true，否則為 false。執行失敗的常見原因是之前已執行過該工作，或另一個執行緒正在執行該工作。</returns>
      <param name="task">要執行的 <see cref="T:System.Threading.Tasks.Task" /> 物件。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
      <summary>[安全性關鍵] 判斷是否可以在這個呼叫中同步執行所提供的 <see cref="T:System.Threading.Tasks.Task" />，如果可以，即加以執行。</summary>
      <returns>布林值，表示工作是否以內嵌方式執行。</returns>
      <param name="task">要執行的 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <param name="taskWasPreviouslyQueued">布林值，表示之前是否已排入過工作。如果這個參數為 True，則可能之前已排入 (排定) 過工作，如果為 False，則表示未排入過工作，系統便會隨即執行此呼叫，以內嵌方式執行工作，而不將它排入佇列。</param>
    </member>
    <member name="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException">
      <summary>發生當錯誤 <see cref="T:System.Threading.Tasks.Task" /> 之未觀察的例外狀況即將觸發例外狀況擴大原則 (此原則預設會讓處理序結束) 時。</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskSchedulerException">
      <summary>表示 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 用來傳達無效作業的例外狀況。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor">
      <summary>以系統提供的錯誤說明訊息，初始化 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Exception)">
      <summary>使用預設錯誤訊息和造成這個例外狀況的內部例外狀況參考，初始化 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 類別的新執行個體。</summary>
      <param name="innerException">造成目前例外狀況的例外狀況。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String)">
      <summary>使用指定的錯誤說明訊息，初始化 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息和造成這個例外狀況的內部例外參考，初始化 <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> 類別的新執行個體。</summary>
      <param name="message">說明例外狀況的訊息。需要此建構函式的呼叫端，才能確保此字串已經針對目前系統的文化特性當地語系化。</param>
      <param name="innerException">造成目前例外狀況的例外狀況。如果 <paramref name="innerException" /> 參數不是 null，則會在處理內部例外狀況的 catch 區塊中引發目前的例外狀況。</param>
    </member>
    <member name="T:System.Threading.Tasks.TaskStatus">
      <summary>表示目前在 <see cref="T:System.Threading.Tasks.Task" /> 開發週期中的階段。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Canceled">
      <summary>工作確認取消動作，不論是因為工作在語彙基元處於信號狀態時使用自己的 CancellationToken 擲回 OperationCanceledException，或是工作的 CancellationToken 信號在工作開始執行之前便已存在。如需詳細資訊，請參閱[3ecf1ea9-e399-4a6a-a0d6-8475f48dcb28]。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Created">
      <summary>工作已初始化但尚未排定。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Faulted">
      <summary>工作已因未處理的例外狀況而完成。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.RanToCompletion">
      <summary>工作已成功完成執行。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Running">
      <summary>工作正在執行，但尚未完成。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingForActivation">
      <summary>工作正在等候由 .NET Framework 基礎結構從內部啟動並排定。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingForChildrenToComplete">
      <summary>工作已完成執行，而且在暗中等候附加的子工作完成。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingToRun">
      <summary>工作已排定執行，但尚未開始執行。</summary>
    </member>
    <member name="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs">
      <summary>提供當錯誤 <see cref="T:System.Threading.Tasks.Task" /> 的例外狀況變成未觀察的對象時，所引發事件的資料。</summary>
    </member>
    <member name="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.#ctor(System.AggregateException)">
      <summary>使用未觀察的例外狀況，初始化 <see cref="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs" /> 類別的新執行個體。</summary>
      <param name="exception">已變成未觀察對象的例外狀況。</param>
    </member>
    <member name="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception">
      <summary>已變成未觀察對象的例外狀況。</summary>
      <returns>已變成未觀察對象的例外狀況。</returns>
    </member>
    <member name="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Observed">
      <summary>取得這個例外狀況是否已標記為「已觀察」。</summary>
      <returns>如果這個例外狀況已標記為「已觀察」則為 true，否則為 false。</returns>
    </member>
    <member name="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved">
      <summary>將 <see cref="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception" /> 標記為「已觀察」，讓其無法觸發例外狀況擴大原則 (此原則預設會讓處理序結束)。</summary>
    </member>
  </members>
</doc>