<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) Microsoft Corporation.  All rights reserved. -->
<doc>
  <assembly>
    <name>System</name>
  </assembly>
  <members>
    <member name="T:System.FileStyleUriParser">
<summary>基于 File 方案的可自定义分析器。</summary>
    </member>
    <member name="M:System.FileStyleUriParser.#ctor">
<summary>创建一个基于 File 方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.FtpStyleUriParser">
<summary>基于文件传输协议 (FTP) 方案的可自定义分析器。</summary>
    </member>
    <member name="M:System.FtpStyleUriParser.#ctor">
<summary>创建一个基于文件传输协议 (FTP) 方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.GenericUriParser">
<summary>用于分层 URI 的可自定义分析器。</summary>
    </member>
    <member name="M:System.GenericUriParser.#ctor(System.GenericUriParserOptions)">
<summary>创建用于分层 URI 的可自定义分析器。</summary> <param name="options">为此 <see cref="T:System.GenericUriParser"/> 指定选项。</param>
    </member>
    <member name="T:System.GenericUriParserOptions">
<summary>为 <see cref="T:System.UriParser"/> 指定选项。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Default">
<summary>分析器：</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.GenericAuthority">
<summary>此分析器允许基于注册表的证书颁发机构。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.AllowEmptyAuthority">
<summary>此分析器允许没有证书颁发机构的 URI。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoUserInfo">
<summary>此方案不定义用户信息部分。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoPort">
<summary>此方案不定义端口。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoQuery">
<summary>此方案不定义查询部分。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoFragment">
<summary>此方案不定义段部分。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontConvertPathBackslashes">
<summary>此分析器不将反斜杠转换为正斜杠。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontCompressPath">
<summary>此分析器不对 URI 进行规范化。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontUnescapePathDotsAndSlashes">
<summary>此分析器不对路径点、正斜杠或反斜杠进行转义还原。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Idn">
<summary>此分析器支持对主机名进行国际化域名 (IDN) 语法分析。是否使用 IDN 由配置值指定。有关更多信息，请参阅“备注”。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.IriParsing">
<summary>此分析器支持 RFC 3987 中指定的国际资源标识符 (IRI) 语法分析规则。是否使用 IRI 由配置值指定。有关更多信息，请参阅“备注”。</summary>
    </member>
    <member name="T:System.HttpStyleUriParser">
<summary>基于 HTTP 方案的可自定义分析器。</summary>
    </member>
    <member name="M:System.HttpStyleUriParser.#ctor">
<summary>创建一个基于 HTTP 方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.Uri">
<summary>提供统一资源标识符 (URI) 的对象表示形式和对 URI 各部分的轻松访问。</summary>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
<summary>使用指定的 URI 初始化 <see cref="T:System.Uri"/> 类的新实例。</summary><param name="uriString">URI。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="uriString"/> 为 null。 </exception>
      <exception cref="T:System.UriFormatException">
<paramref name="uriString"/> 为空。-或- <paramref name="uriString"/> 中指定的方案形式不正确。请参阅 <see cref="M:System.Uri.CheckSchemeName(System.String)"/>。-或- <paramref name="uriString"/> 包含太多斜杠。-或- <paramref name="uriString"/> 中指定的密码无效。-或- <paramref name="uriString"/> 中指定的主机名无效。-或- <paramref name="uriString"/> 中指定的文件名无效。-或- <paramref name="uriString"/> 中指定的用户名无效。-或- <paramref name="uriString"/> 中指定的主机名或证书颁发机构名不能以反斜杠结尾。-或- <paramref name="uriString"/> 中指定的端口号无效或无法分析。-或- <paramref name="uriString"/> 的长度超过 65519 个字符。-或- <paramref name="uriString"/> 中指定的方案的长度超过 1024 个字符。-或- <paramref name="uriString"/> 中存在无效的字符序列。-或- <paramref name="uriString"/> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
<summary>使用指定的 URI 初始化 <see cref="T:System.Uri"/> 类的新实例。此构造函数允许您指定 URI 字符串是相对 URI、绝对 URI 还是不确定。</summary><param name="uriString">标识将由 <see cref="T:System.Uri"/> 实例表示的资源的字符串。</param><param name="uriKind">指定 URI 字符串是相对 URI、绝对 URI 还是不确定。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="uriKind"/> 无效（可能的值为 <see cref="F:System.UriKind.Absolute"/>、<see cref="F:System.UriKind.Relative"/> 或 <see cref="F:System.UriKind.RelativeOrAbsolute"/>）。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="uriString"/> 为 null。 </exception>
      <exception cref="T:System.UriFormatException">
<paramref name="uriString"/> 包含相对 URI，而 <paramref name="uriKind"/> 为 <see cref="F:System.UriKind.Absolute"/>。或 <paramref name="uriString"/> 包含绝对 URI，而 <paramref name="uriKind"/> 为 <see cref="F:System.UriKind.Relative"/>。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
<summary>根据指定的基 URI 和相对 URI 字符串，初始化 <see cref="T:System.Uri"/> 类的新实例。</summary><param name="baseUri">基 URI。</param> <param name="relativeUri">要添加到基 URI 的相对 URI。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="baseUri"/> 为 null。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="baseUri"/> 不是绝对的 <see cref="T:System.Uri"/> 实例。</exception>
<exception cref="T:System.UriFormatException"><paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 是空的或只包含空格。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 中指定的方案无效。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合所形成的 URI 包含太多的斜杠。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 中指定的密码无效。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 中指定的主机名无效。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 中指定的文件名无效。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 中指定的用户名无效。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 中指定的主机名或证书颁发机构名不能以反斜杠结尾。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 中指定的端口号无效或无法分析。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 的长度超过 65519 个字符。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 中指定的方案的长度超过 1024 个字符。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 中存在无效的字符序列。-或- <paramref name="uriString"/> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.Uri)">
<summary>根据指定的基 <see cref="T:System.Uri"/> 实例和相对 <see cref="T:System.Uri"/> 实例的组合，初始化 <see cref="T:System.Uri"/> 类的新实例。</summary><param name="baseUri">作为新 <see cref="T:System.Uri"/> 实例的基的绝对 <see cref="T:System.Uri"/>。</param> <param name="relativeUri">与 <paramref name="baseUri"/> 组合的相对 <see cref="T:System.Uri"/> 实例。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="baseUri"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="baseUri"/> 不是绝对的 <see cref="T:System.Uri"/> 实例。</exception>
<exception cref="T:System.UriFormatException"><paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 是空的或只包含空格。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 中指定的方案无效。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合所形成的 URI 包含太多的斜杠。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 中指定的密码无效。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 中指定的主机名无效。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 中指定的文件名无效。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 中指定的用户名无效。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 中指定的主机名或证书颁发机构名不能以反斜杠结尾。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 中指定的端口号无效或无法分析。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 的长度超过 65519 个字符。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 中指定的方案的长度超过 1024 个字符。-或- <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 组合形成的 URI 中存在无效的字符序列。-或- <paramref name="uriString"/> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="P:System.Uri.AbsolutePath">
<summary>获取 URI 的绝对路径。</summary>
<returns>包含资源的绝对路径的 <see cref="T:System.String"/>。</returns>
<exception cref="T:System.InvalidOperationException">此属性仅对绝对 <see cref="T:System.Uri"/> 实例有效。 </exception>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
<summary>获取绝对 URI。</summary>
<returns>包含整个 URI 的 <see cref="T:System.String"/>。</returns>
<exception cref="T:System.InvalidOperationException">此属性仅对绝对 <see cref="T:System.Uri"/> 实例有效。 </exception>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
<summary>确定指定的方案名是否有效。</summary>
<returns>一个 <see cref="T:System.Boolean"/> 值。如果方案名有效，则该值为 true；否则为 false。</returns>
<param name="schemeName">要验证的方案名。 </param>
    </member>
    <member name="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)">
<summary>使用指定的比较规则比较两个 URI 的指定部分。</summary>
<returns>一个 <see cref="T:System.Int32"/> 值，指示进行比较的 <see cref="T:System.Uri"/> 部分之间的词法关系。值 含义 小于零 <paramref name="uri1"/> 小于 <paramref name="uri2"/>。零 <paramref name="uri1"/> 等于 <paramref name="uri2"/>。大于零 <paramref name="uri1"/> 大于 <paramref name="uri2"/>。</returns>
<param name="uri1">第一个 <see cref="T:System.Uri"/>。</param><param name="uri2">第二个 <see cref="T:System.Uri"/>。</param><param name="partsToCompare"><see cref="T:System.UriComponents"/> 值的按位组合，它指定要比较的 <paramref name="uri1"/> 和 <paramref name="uri2"/> 的部分。</param><param name="compareFormat"><see cref="T:System.UriFormat"/> 值中的一个，它指定在比较 URI 部分时使用的字符转义。</param><param name="comparisonType">其中一个 <see cref="T:System.StringComparison"/> 值。</param>
      <exception cref="T:System.ArgumentException">
<paramref name="comparisonType"/> 不是有效的 <see cref="T:System.StringComparison"/> 值。</exception>
    </member>
    <member name="P:System.Uri.DnsSafeHost">
<summary>获得可安全用于 DNS 解析的未转义主机名。</summary>
<returns>一个 <see cref="T:System.String"/>，包含适用于 DNS 解析的未转义 URI 主机部分；或者，如果原始的未转义主机字符串已适用于解析，则为原始的未转义主机字符串。</returns>
<exception cref="T:System.InvalidOperationException">此属性仅对绝对 <see cref="T:System.Uri"/> 实例有效。 </exception>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
<summary>比较两个 <see cref="T:System.Uri"/> 实例是否相等。</summary>
<returns>一个 <see cref="T:System.Boolean"/> 值。如果两个实例表示相同的 URI，则该值为 true；否则为 false。</returns>
<param name="comparand">与当前实例相比较的 <see cref="T:System.Uri"/> 实例或 URI 标识符。 </param>
    </member>
    <member name="M:System.Uri.EscapeDataString(System.String)">
<summary>将字符串转换为它的转义表示形式。</summary>
<returns>一个 <see cref="T:System.String"/>，包含 <paramref name="stringToEscape"/> 的转义表示形式。</returns>
<param name="stringToEscape">要转义的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="stringToEscape"/> 为 null。 </exception>
<exception cref="T:System.UriFormatException"><paramref name="stringToEscape"/> 的长度超过 32766 个字符。</exception>
    </member>
    <member name="M:System.Uri.EscapeUriString(System.String)">
<summary>将 URI 字符串转换为它的转义表示形式。</summary>
<returns>一个 <see cref="T:System.String"/>，包含 <paramref name="stringToEscape"/> 的转义表示形式。</returns>
<param name="stringToEscape">要转义的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="stringToEscape"/> 为 null。 </exception>
<exception cref="T:System.UriFormatException"><paramref name="stringToEscape"/> 的长度超过 32766 个字符。</exception>
    </member>
    <member name="P:System.Uri.Fragment">
<summary>获取转义 URI 片段。</summary>
<returns>包含任意 URI 片段信息的 <see cref="T:System.String"/>。</returns>
<exception cref="T:System.InvalidOperationException">此属性仅对绝对 <see cref="T:System.Uri"/> 实例有效。 </exception>
    </member>
    <member name="M:System.Uri.FromHex(System.Char)">
<summary>获取十六进制数字的十进制值。</summary>
<returns>一个 <see cref="T:System.Int32"/> 值，包含与指定的十六进制数字对应的介于 0 到 15 之间的数字。</returns>
<param name="digit">要转换的十六进制数字（0-9、a-f、A-F）。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="digit"/> 不是有效的十六进制数字（0-9、a-f、A-F）。 </exception>
    </member>
    <member name="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)">
<summary>使用特殊字符的指定转义，获取当前实例的指定部分。</summary>
<returns>包含这些部分的 <see cref="T:System.String"/>。</returns>
<param name="components"><see cref="T:System.UriComponents"/> 值的按位组合，它指定当前实例中要返回到调用方的部分。</param><param name="format"><see cref="T:System.UriFormat"/> 值中的一个，它控制如何转义特殊字符。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="uriComponents"/> 不是有效 <see cref="T:System.UriComponents"/> 值的组合。</exception>
<exception cref="T:System.InvalidOperationException">此方法仅对绝对 <see cref="T:System.Uri"/> 实例有效。</exception>
    </member>
    <member name="M:System.Uri.GetHashCode">
<summary>获取 URI 的哈希代码。</summary>
<returns>一个 <see cref="T:System.Int32"/>，其中包含为此 URI 生成的哈希值。</returns>
    </member>
    <member name="P:System.Uri.Host">
<summary>获取此实例的主机部分。</summary>
<returns>一个包含主机名的 <see cref="T:System.String"/>。这通常是服务器的 DNS 主机名或 IP 地址。</returns>
<exception cref="T:System.InvalidOperationException">此属性仅对绝对 <see cref="T:System.Uri"/> 实例有效。 </exception>
    </member>
    <member name="P:System.Uri.IsAbsoluteUri">
<summary>获取 <see cref="T:System.Uri"/> 实例是否为绝对实例。</summary>
<returns>一个 <see cref="T:System.Boolean"/> 值，如果 <see cref="T:System.Uri"/> 实例是绝对实例，则该值为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Uri.IsBaseOf(System.Uri)">
<summary>确定当前的 <see cref="T:System.Uri"/> 实例是否为指定 <see cref="T:System.Uri"/> 实例的基。</summary>
<returns>如果当前 <see cref="T:System.Uri"/> 实例是 <paramref name="uri"/> 的基，则为 true；否则，为 false。</returns>
<param name="uri">要测试的指定 <see cref="T:System.Uri"/> 实例。 </param>
    </member>
    <member name="M:System.Uri.IsHexDigit(System.Char)">
<summary>确定指定的字符是否为有效的十六进制数字。</summary>
<returns>一个 <see cref="T:System.Boolean"/> 值。如果字符是有效的十六进制数字，则该值为 true；否则为 false。</returns>
<param name="character">要验证的字符。 </param>
    </member>
    <member name="P:System.Uri.IsUnc">
<summary>获取指定的 <see cref="T:System.Uri"/> 是否为统一命名约定 (UNC) 路径。</summary>
<returns>一个 <see cref="T:System.Boolean"/> 值，如果 <see cref="T:System.Uri"/> 是 UNC 路径，则该值为 true；否则为 false。</returns>
<exception cref="T:System.InvalidOperationException">此属性仅对绝对 <see cref="T:System.Uri"/> 实例有效。 </exception>
    </member>
    <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
<summary>通过尝试用字符串构造一个 <see cref="T:System.Uri"/> 来指示字符串是否为格式良好的，并确保字符串不需要进一步转义。</summary>
<returns>一个 <see cref="T:System.Boolean"/> 值。如果该字符串符合 RFC 3986 的格式要求，则该值为 true；否则为 false。</returns>
<param name="uriString">用字符串表示的 <see cref="T:System.Uri"/>。</param><param name="uriKind"><paramref name="uriString"/> 参数中的 URI 的类型。</param>
    </member>
    <member name="P:System.Uri.LocalPath">
<summary>获取文件名的本地操作系统表示形式。</summary>
<returns>一个 <see cref="T:System.String"/>，包含文件名的本地操作系统表示形式。</returns>
<exception cref="T:System.InvalidOperationException">此属性仅对绝对 <see cref="T:System.Uri"/> 实例有效。 </exception>
    </member>
    <member name="M:System.Uri.MakeRelativeUri(System.Uri)">
<summary>确定两个 <see cref="T:System.Uri"/> 实例之间的差异。</summary>
<returns>如果此 URI 实例与 <paramref name="toUri"/> 的主机名和方案相同，则此方法返回一个相对 <see cref="T:System.Uri"/>。若将此相对 URI 追加到当前 URI 实例，就可以得到 <paramref name="toUri"/>。如果主机名或方案不同，则此方法返回一个表示 <paramref name="toUri"/> 参数的 <see cref="T:System.Uri"/>。</returns>
<param name="uri">与当前 URI 进行比较的 URI。</param>
<exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。 </exception>
    </member>
    <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
<summary>确定两个 <see cref="T:System.Uri"/> 实例是否具有相同的值。</summary>
<returns>一个 <see cref="T:System.Boolean"/> 值，如果这两个 <see cref="T:System.Uri"/> 实例是等效的，则该值为 true；否则为 false。</returns>
<param name="uri1">要与 <paramref name="uri2"/> 比较的 <see cref="T:System.Uri"/> 实例。</param> <param name="uri2">要与 <paramref name="uri1"/> 比较的 <see cref="T:System.Uri"/> 实例。 </param>
    </member>
    <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
<summary>确定两个 <see cref="T:System.Uri"/> 实例是否具有不同的值。</summary>
<returns>一个 <see cref="T:System.Boolean"/> 值，如果这两个 <see cref="T:System.Uri"/> 实例不相等，则该值为 true；否则为 false。如果两者中任意一个参数为 null，则此方法返回 true。</returns>
<param name="uri1">要与 <paramref name="uri2"/> 比较的 <see cref="T:System.Uri"/> 实例。</param> <param name="uri2">要与 <paramref name="uri1"/> 比较的 <see cref="T:System.Uri"/> 实例。 </param>
    </member>
    <member name="P:System.Uri.OriginalString">
<summary>获取传递给 <see cref="T:System.Uri"/> 构造函数的原始 URI 字符串。</summary>
<returns>一个 <see cref="T:System.String"/>，含构造此实例时指定的同一 URI，否则为 <see cref="F:System.String.Empty"/>。</returns>
<exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。 </exception>
    </member>
    <member name="P:System.Uri.Port">
<summary>获取此 URI 的端口号。</summary>
<returns>包含此 URI 的端口号的 <see cref="T:System.Int32"/> 值。</returns>
<exception cref="T:System.InvalidOperationException">此属性仅对绝对 <see cref="T:System.Uri"/> 实例有效。 </exception>
    </member>
    <member name="P:System.Uri.Query">
<summary>获取指定 URI 中包括的任何查询信息。</summary>
<returns>一个 <see cref="T:System.String"/>，包含指定 URI 中包括的任何查询信息。</returns>
<exception cref="T:System.InvalidOperationException">此属性仅对绝对 <see cref="T:System.Uri"/> 实例有效。 </exception>
    </member>
    <member name="P:System.Uri.Scheme">
<summary>获取此 URI 的方案名称。</summary>
<returns>一个 <see cref="T:System.String"/>，包含此 URI 的方案（已转换为小写形式）。</returns>
<exception cref="T:System.InvalidOperationException">此属性仅对绝对 <see cref="T:System.Uri"/> 实例有效。 </exception>
    </member>
    <member name="F:System.Uri.SchemeDelimiter">
<summary>指定将通讯协议方案同 URI 的地址部分分开的字符。此字段为只读。</summary>
    </member>
    <member name="M:System.Uri.ToString">
<summary>获取指定的 <see cref="T:System.Uri"/> 实例的规范化字符串表示形式。</summary>
<returns>一个 <see cref="T:System.String"/> 实例，它包含 <see cref="T:System.Uri"/> 实例的非转义规范化表示形式。除了 #、? 和 %，所有字符均为非转义字符。</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)">
<summary>使用指定的 <see cref="T:System.String"/> 实例和 <see cref="T:System.UriKind"/> 创建一个新的 <see cref="T:System.Uri"/>。</summary>
<returns>一个 <see cref="T:System.Boolean"/> 值，如果成功创建了 <see cref="T:System.Uri"/>，则该值为 true；否则为 false。</returns>
<param name="uriString">表示 <see cref="T:System.Uri"/> 的 <see cref="T:System.String"/>。</param><param name="uriKind">URI 的类型。</param> <param name="result">此方法返回时，包含构造的 <see cref="T:System.Uri"/>。</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)">
<summary>使用指定的基和相对 <see cref="T:System.String"/> 实例创建一个新的 <see cref="T:System.Uri"/>。</summary>
<returns>一个 <see cref="T:System.Boolean"/> 值，如果成功创建了 <see cref="T:System.Uri"/>，则该值为 true；否则为 false。</returns>
<param name="baseUri">基 <see cref="T:System.Uri"/>。</param><param name="relativeUri">要添加到基 <see cref="T:System.Uri"/> 的相对 <see cref="T:System.Uri"/>（表示为 <see cref="T:System.String"/>）。</param><param name="result">此方法返回时，包含从 <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 构造的 <see cref="T:System.Uri"/>。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)">
<summary>使用指定的基和相对 <see cref="T:System.Uri"/> 实例创建一个新的 <see cref="T:System.Uri"/>。</summary>
<returns>一个 <see cref="T:System.Boolean"/> 值，如果成功创建了 <see cref="T:System.Uri"/>，则该值为 true；否则为 false。</returns>
<param name="baseUri">基 <see cref="T:System.Uri"/>。</param> <param name="relativeUri">要添加到基 <see cref="T:System.Uri"/> 的相对 <see cref="T:System.Uri"/>。</param> <param name="result">此方法返回时，包含从 <paramref name="baseUri"/> 和 <paramref name="relativeUri"/> 构造的 <see cref="T:System.Uri"/>。该参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Uri.UnescapeDataString(System.String)">
<summary>将字符串转换为它的非转义表示形式。</summary>
<returns>一个 <see cref="T:System.String"/>，包含 <paramref name="stringToUnescape"/> 的非转义表示形式。 </returns>
<param name="stringToUnescape">要恢复原义的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="stringToUnescape"/> 为 null。 </exception>
    </member>
    <member name="F:System.Uri.UriSchemeFile">
<summary>指定 URI 是指向文件的指针。此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeFtp">
<summary>指定通过文件传输协议 (FTP) 访问 URI。此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeGopher">
<summary>指定通过 Gopher 协议访问 URI。此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttp">
<summary>指定通过超文本传输协议 (HTTP) 访问 URI。此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttps">
<summary>指定通过安全超文本传输协议 (HTTPS) 访问 URI。此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeMailto">
<summary>指定 URI 是一个电子邮件地址，需通过简单邮件传输协议 (SMTP) 访问。此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetPipe">
<summary>指定通过“Indigo”系统的 NetPipe 方案访问此 URI。此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetTcp">
<summary>指定通过“Indigo”系统的 NetTcp 方案访问此 URI。此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNews">
<summary>指定 URI 是 Internet 新闻组，而且可以通过 Network 新闻传输协议 (NNTP) 进行访问。此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNntp">
<summary>指定 URI 是 Internet 新闻组，而且可以通过 Network 新闻传输协议 (NNTP) 进行访问。此字段为只读。</summary>
    </member>
    <member name="P:System.Uri.UserEscaped">
<summary>指示 URI 字符串在创建 <see cref="T:System.Uri"/> 实例之前已被完全转义。</summary>
<returns>一个 <see cref="T:System.Boolean"/> 值，如果在创建 <see cref="T:System.Uri"/> 实例时 <paramref name="dontEscape"/> 参数设置为 true，则该值为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Uri.UserInfo">
<summary>获取用户名、密码或其他与指定 URI 关联的特定于用户的信息。</summary>
<returns>一个 <see cref="T:System.String"/>，包含与该 URI 关联的用户信息。返回值不包括“@”字符，该字符是一个保留字符，用于分隔 URI 的用户信息部分。</returns>
<exception cref="T:System.InvalidOperationException">此属性仅对绝对 <see cref="T:System.Uri"/> 实例有效。 </exception>
    </member>
    <member name="T:System.UriBuilder">
<summary>为统一资源标识符 (URI) 提供自定义构造函数，并修改 <see cref="T:System.Uri"/> 类的 URI。</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor">
<summary>初始化 <see cref="T:System.UriBuilder"/> 类的新实例。</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
<summary>使用指定的 URI 初始化 <see cref="T:System.UriBuilder"/> 类的新实例。</summary><param name="uri">URI 字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="uri"/> 为 null。 </exception>
      <exception cref="T:System.UriFormatException">
<paramref name="uri"/> 为零长度字符串或只包含空格。-或- 分析例程检测到方案的格式无效。-或- 析器检测到不使用 "file" 方案的 URI 中有多于两个的连续斜线。-或- <paramref name="uri"/> 不是有效的 URI。 </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
<summary>使用指定的方案和主机初始化 <see cref="T:System.UriBuilder"/> 类的新实例。</summary><param name="schemeName">Internet 访问协议。</param> <param name="hostName">DNS 样式的域名或 IP 地址。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="schemeName"/> 不是合法的方案名称。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
<summary>使用指定的方案、主机和端口初始化 <see cref="T:System.UriBuilder"/> 类的新实例。</summary><param name="scheme">Internet 访问协议。</param> <param name="host">DNS 样式的域名或 IP 地址。</param> <param name="portNumber">服务的 IP 端口号。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="scheme"/> 不是合法的方案名称。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="portNumber"/> 小于 0 或者大于 65,535。 </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
<summary>使用指定的方案、主机、端口号和路径初始化 <see cref="T:System.UriBuilder"/> 类的新实例。</summary><param name="scheme">Internet 访问协议。</param> <param name="host">DNS 样式的域名或 IP 地址。</param> <param name="port">服务的 IP 端口号。</param> <param name="pathValue">Internet 资源的路径。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="scheme"/> 不是合法的方案名称。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="port"/> 小于 0 或者大于 65,535。 </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
<summary>使用指定的方案、主机、端口号、路径和查询字符串或段标识符初始化 <see cref="T:System.UriBuilder"/> 类的新实例。</summary><param name="scheme">Internet 访问协议。</param> <param name="host">DNS 样式的域名或 IP 地址。</param> <param name="port">服务的 IP 端口号。</param> <param name="path">Internet 资源的路径。</param> <param name="extraValue">查询字符串或段标识符。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="extraValue"/> 既不是 null 也不是 <see cref="F:System.String.Empty"/>，既不是以井号 (#) 开始的有效段标识符，也不是以问号 (?) 开始的有效查询字符串。-或- <paramref name="scheme"/> 不是有效的方案名称。 </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="port"/> 小于 0 或者大于 65,535。 </exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
<summary>使用指定的 <see cref="T:System.Uri"/> 实例初始化 <see cref="T:System.UriBuilder"/> 类的新实例。</summary><param name="uri"><see cref="T:System.Uri"/> 类的实例。 </param>
      <exception cref="T:System.NullReferenceException">
<paramref name="uri"/> 为 null。 </exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
<summary>比较现有 <see cref="T:System.Uri"/> 实例与 <see cref="T:System.UriBuilder"/> 的内容是否相等。</summary>
<returns>如果 <paramref name="rparam"/> 表示的 <see cref="T:System.Uri"/> 与此 <see cref="T:System.UriBuilder"/> 实例构造的 <see cref="T:System.Uri"/> 相同，则为 true；否则为 false。</returns>
<param name="rparam">要与当前实例进行比较的对象。 </param>
    </member>
    <member name="P:System.UriBuilder.Fragment">
<summary>获取或设置 URI 的段部分。</summary>
<returns>URI 的段部分。段标识符（“#”）添加到段的开头。</returns>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
<summary>返回 URI 的哈希代码。</summary>
<returns>为 URI 生成的哈希代码。</returns>
    </member>
    <member name="P:System.UriBuilder.Host">
<summary>获取或设置服务器的域名系统 (DNS) 主机名或 IP 地址。</summary>
<returns>服务器的 DNS 主机名或 IP 地址。</returns>
    </member>
    <member name="P:System.UriBuilder.Password">
<summary>获取或设置与访问 URI 的用户关联的密码。</summary>
<returns>访问 URI 的用户的密码。</returns>
    </member>
    <member name="P:System.UriBuilder.Path">
<summary>获取或设置 URI 引用的资源的路径。</summary>
<returns>URI 引用的资源的路径。</returns>
    </member>
    <member name="P:System.UriBuilder.Port">
<summary>获取或设置 URI 的端口号。</summary>
<returns>URI 的端口号。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">不能将端口号设置为小于 0 或大于 65,535 的值。 </exception>
    </member>
    <member name="P:System.UriBuilder.Query">
<summary>获取或设置 URI 中包括的任何查询信息。</summary>
<returns>URI 中包括的查询信息。</returns>
    </member>
    <member name="P:System.UriBuilder.Scheme">
<summary>获取或设置 URI 的方案名称。</summary>
<returns>URI 的方案。</returns>
<exception cref="T:System.ArgumentException">方案名称只能设置为合法的方案名称。 </exception>
    </member>
    <member name="M:System.UriBuilder.ToString">
<summary>返回指定 <see cref="T:System.UriBuilder"/> 实例的显示字符串。</summary>
<returns>包含 <see cref="T:System.UriBuilder"/> 的非转义显示字符串的字符串。</returns>
<exception cref="T:System.UriFormatException">由 <see cref="T:System.UriBuilder"/> 属性构造的 URI 具有不适当的用户名和密码（<see cref="P:System.UriBuilder.UserName"/> 属性为 null 或空字符串，但 <see cref="P:System.UriBuilder.Password"/> 属性不为空。） </exception>
    </member>
    <member name="P:System.UriBuilder.Uri">
<summary>获取由指定 <see cref="T:System.UriBuilder"/> 实例构造的 <see cref="T:System.Uri"/> 实例。</summary>
<returns><see cref="T:System.Uri"/>，包含由 <see cref="T:System.UriBuilder"/> 构造的 URI。</returns>
<exception cref="T:System.UriFormatException">由 <see cref="T:System.UriBuilder"/> 属性构造的 URI 无效。 </exception>
    </member>
    <member name="P:System.UriBuilder.UserName">
<summary>与访问 URI 的用户关联的用户名。</summary>
<returns>访问 URI 的用户的用户名。</returns>
    </member>
    <member name="T:System.UriComponents">
<summary>指定 <see cref="T:System.Uri"/> 的各个部分。</summary>
    </member>
    <member name="F:System.UriComponents.Scheme">
<summary><see cref="P:System.Uri.Scheme"/> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.UserInfo">
<summary><see cref="P:System.Uri.UserInfo"/> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Host">
<summary><see cref="P:System.Uri.Host"/> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Port">
<summary><see cref="P:System.Uri.Port"/> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Path">
<summary><see cref="P:System.Uri.LocalPath"/> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Query">
<summary><see cref="P:System.Uri.Query"/> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Fragment">
<summary><see cref="P:System.Uri.Fragment"/> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.StrongPort">
<summary><see cref="P:System.Uri.Port"/> 数据。如果在 <see cref="T:System.Uri"/> 中没有端口数据并且已为 <see cref="P:System.Uri.Scheme"/> 分配了一个默认端口，则返回该默认端口。如果没有默认端口，则返回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.KeepDelimiter">
<summary>指定应包含分隔符。</summary>
    </member>
    <member name="F:System.UriComponents.SerializationInfoString">
<summary>URI 序列化程序所需的完整 <see cref="T:System.Uri"/> 上下文。此上下文包括 IPv6 范围。</summary>
    </member>
    <member name="F:System.UriComponents.AbsoluteUri">
<summary><see cref="P:System.Uri.Scheme"/>、<see cref="P:System.Uri.UserInfo"/>、<see cref="P:System.Uri.Host"/>、<see cref="P:System.Uri.Port"/>、<see cref="P:System.Uri.LocalPath"/>、<see cref="P:System.Uri.Query"/> 和 <see cref="P:System.Uri.Fragment"/> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.HostAndPort">
<summary><see cref="P:System.Uri.Host"/> 和 <see cref="P:System.Uri.Port"/> 数据。如果在 Uri 中没有端口数据并且已为 <see cref="P:System.Uri.Scheme"/> 分配了一个默认端口，则返回该默认端口。如果没有默认端口，则返回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.StrongAuthority">
<summary><see cref="P:System.Uri.UserInfo"/>、<see cref="P:System.Uri.Host"/> 和 <see cref="P:System.Uri.Port"/> 数据。如果在 <see cref="T:System.Uri"/> 中没有端口数据并且已为 <see cref="P:System.Uri.Scheme"/> 分配了一个默认端口，则返回该默认端口。如果没有默认端口，则返回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.SchemeAndServer">
<summary><see cref="P:System.Uri.Scheme"/>、<see cref="P:System.Uri.Host"/> 和 <see cref="P:System.Uri.Port"/> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.HttpRequestUrl">
<summary><see cref="P:System.Uri.Scheme"/>、<see cref="P:System.Uri.Host"/>、<see cref="P:System.Uri.Port"/>、<see cref="P:System.Uri.LocalPath"/> 和 <see cref="P:System.Uri.Query"/> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.PathAndQuery">
<summary><see cref="P:System.Uri.LocalPath"/> 和 <see cref="P:System.Uri.Query"/> 数据。 </summary>
    </member>
    <member name="T:System.UriFormat">
<summary>控制 URI 信息的转义方式。</summary>
    </member>
    <member name="F:System.UriFormat.UriEscaped">
<summary>根据 RFC 3986 中的规则执行转义。</summary>
    </member>
    <member name="F:System.UriFormat.Unescaped">
<summary>未执行任何转义。</summary>
    </member>
    <member name="F:System.UriFormat.SafeUnescaped">
<summary>在请求的 URI 组成部分中具有保留意义的字符将仍然进行转义。所有其他字符不进行转义。请参阅“备注”。</summary>
    </member>
    <member name="T:System.UriFormatException">
<summary>当检测到无效的统一资源标识符 (URI) 时引发的异常。</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor">
<summary>初始化 <see cref="T:System.UriFormatException"/> 类的新实例。</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String)">
<summary>使用指定的消息初始化 <see cref="T:System.UriFormatException"/> 类的新实例。</summary><param name="textString">错误消息字符串。 </param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String,System.Exception)">
<summary>使用指定消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.UriFormatException"/> 类的新实例。</summary><param name="textString">错误消息字符串。</param> <param name="e">导致当前异常的异常。如果 <paramref name="e"/> 参数不是 null 引用（在 Visual Basic 中为 Nothing），则在处理内部异常的 catch 块中引发当前异常。 </param>
    </member>
    <member name="T:System.UriIdnScope">
<summary>为用于国际化域名语法分析的配置设置提供可能值。</summary>
    </member>
    <member name="F:System.UriIdnScope.None">
<summary>此值不会将任何 Unicode 域名转换为使用 Punycode。这是与 .NET Framework 2.0 行为一致的默认值。</summary>
    </member>
    <member name="F:System.UriIdnScope.AllExceptIntranet">
<summary>此值会将所有外部 Unicode 域名转换为使用 Punycode 等效项（IDN 名称）。在这种情况下，若要处理本地 Intranet 上的国际化名称，用于 Intranet 的 DNS 服务器应该支持 Unicode 名称。</summary>
    </member>
    <member name="F:System.UriIdnScope.All">
<summary>此值会将所有 Unicode 域名转换为它们的 Punycode 等效项（IDN 名称）。</summary>
    </member>
    <member name="T:System.UriKind">
<summary>定义几种 <see cref="Overload:System.Uri.#ctor"/> 方法的 <see cref="T:System.Uri"/> 类型。</summary>
    </member>
    <member name="F:System.UriKind.RelativeOrAbsolute">
<summary>此 Uri 的类型不确定。</summary>
    </member>
    <member name="F:System.UriKind.Absolute">
<summary>此 Uri 是绝对 Uri。</summary>
    </member>
    <member name="F:System.UriKind.Relative">
<summary>此 Uri 是相对 Uri。</summary>
    </member>
    <member name="T:System.UriParser">
<summary>分析新的 URI 方案。这是一个抽象类。</summary>
    </member>
    <member name="M:System.UriParser.#ctor">
<summary>构建默认的 URI 分析器。</summary>
    </member>
    <member name="M:System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)">
<summary>获取 URI 的组成部分。</summary>
<returns>包含组成部分的字符串。</returns>
<param name="uri">要分析的 <see cref="T:System.Uri"/>。</param><param name="components">要从 <paramref name="uri"/> 中检索的 <see cref="T:System.UriComponents"/>。</param><param name="format"><see cref="T:System.UriFormat"/> 值中的一个，它控制如何转义特殊字符。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="format"/> 无效 -或- <paramref name="components"/> 不是有效 <see cref="T:System.UriComponents"/> 值的组合。 </exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="uri"/> 需要用户驱动的语法分析 -或- <paramref name="uri"/> 不是绝对 URI。相对 URI 不能和此方法一起使用。</exception>
    </member>
    <member name="M:System.UriParser.InitializeAndValidate(System.Uri,System.UriFormatException@)">
<summary>初始化分析器的状态并验证 URI。</summary> <param name="uri">要验证的 <see cref="T:System.Uri"/>。</param><param name="parsingError">验证错误（如果有）。</param>
    </member>
    <member name="M:System.UriParser.IsBaseOf(System.Uri,System.Uri)">
<summary>确定 <paramref name="baseUri"/> 是否为 <paramref name="relativeUri"/> 的基 URI。</summary>
<returns>如果 <paramref name="baseUri"/> 是 <paramref name="relativeUri"/> 的基 URI，则为 true；否则为 false。</returns>
<param name="baseUri">基 URI。</param> <param name="relativeUri">要测试的 URI。</param>
    </member>
    <member name="M:System.UriParser.IsKnownScheme(System.String)">
<summary>指示某个方案的分析器是否已注册。</summary>
<returns>如果已注册 <paramref name="schemeName"/>，则为 true；否则为 false。</returns>
<param name="schemeName">要检查的方案名称。</param>
<exception cref="T:System.ArgumentNullException"><paramref name="schemeName"/> 参数为 null。</exception>
<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="schemeName"/> 参数无效。 </exception>
    </member>
    <member name="M:System.UriParser.IsWellFormedOriginalString(System.Uri)">
<summary>指示 URI 是否为格式良好的。</summary>
<returns>如果 <paramref name="uri"/> 格式良好，则为 true；否则为 false。</returns>
<param name="uri">要检查的 URI。</param>
    </member>
    <member name="M:System.UriParser.OnNewUri">
<summary>由 <see cref="T:System.Uri"/> 构造函数调用以获取一个 <see cref="T:System.UriParser"/> 实例</summary>
<returns>所构建的 <see cref="T:System.Uri"/> 的 <see cref="T:System.UriParser"/>。</returns>
    </member>
    <member name="M:System.UriParser.OnRegister(System.String,System.Int32)">
<summary>在注册 <see cref="T:System.UriParser"/> 方法时由 Framework 调用。</summary><param name="schemeName">与此 <see cref="T:System.UriParser"/> 关联的方案。</param><param name="defaultPort">方案的端口号。</param>
    </member>
    <member name="M:System.UriParser.Register(System.UriParser,System.String,System.Int32)">
<summary>将方案和端口号与 <see cref="T:System.UriParser"/> 关联。</summary><param name="uriParser">要注册的 <see cref="T:System.UriParser"/>。</param><param name="schemeName">与此分析器关联的方案的名称。</param> <param name="defaultPort">指定方案的默认端口号。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="uriParser"/> 参数为 null-或-<paramref name="schemeName"/> 参数 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="schemeName"/> 参数无效-或-<paramref name="defaultPort"/> 参数无效。<paramref name="defaultPort"/> 参数不能小于零或大于 65534。</exception>
    </member>
    <member name="M:System.UriParser.Resolve(System.Uri,System.Uri,System.UriFormatException@)">
<summary>由 <see cref="T:System.Uri"/> 构造函数和 <see cref="Overload:System.Uri.TryCreate"/> 调用以解析相对 URI。</summary>
<returns>经过解析的相对 <see cref="T:System.Uri"/> 的字符串。</returns>
<param name="baseUri">基 URI。</param> <param name="relativeUri">相对 URI。</param> <param name="parsingError">解析过程中的错误（如果有）。</param>
      <exception cref="T:System.InvalidOperationException">
<paramref name="baseUri"/> 参数不是绝对 <see cref="T:System.Uri"/>-或-<paramref name="baseUri"/> 参数需要用户驱动的分析。</exception>
    </member>
    <member name="T:System.UriTypeConverter">
<summary>将 <see cref="T:System.String"/> 类型的实例转换为 <see cref="T:System.Uri"/> 实例。</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
<summary>初始化 <see cref="T:System.UriTypeConverter"/> 类的新实例。</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
<summary>返回此转换器是否可以将指定源类型的对象转换为 <see cref="T:System.Uri"/> 类型的实例。 </summary>
<returns>一个 <see cref="T:System.Boolean"/> 值，如果转换器可以将指定类型转换为 <see cref="T:System.Uri"/> 实例，则该值为 true；否则为 false。</returns>
<param name="context">提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>。</param><param name="sourceType">表示要转换的类型的 <see cref="T:System.Type"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="sourceType"/> 为 null（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
<summary>返回此转换器是否可以使用指定的上下文将该对象转换为指定的类型。</summary>
<returns>一个 <see cref="T:System.Boolean"/> 值，如果 <paramref name="destinationType"/> 为 <see cref="T:System.String"/> 或 <see cref="T:System.Uri"/> 类型，则该值为 true；否则为 false。</returns>
<param name="context">提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>。</param><param name="destinationType">表示要转换到的类型的 <see cref="T:System.Type"/>。</param>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
<summary>使用指定的上下文和区域性信息将给定的对象转换为此转换器的类型。 </summary>
<returns>表示转换的 <see cref="T:System.Object"/> 的 <see cref="T:System.Uri"/>。如果 <paramref name="value"/> 参数为 null，则返回 null。</returns>
<param name="context">提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>。</param><param name="culture">用作当前区域性的 <see cref="T:System.Globalization.CultureInfo"/>。</param><param name="value">要转换为 <see cref="T:System.Uri"/> 实例的 <see cref="T:System.Object"/>。</param>
<exception cref="T:System.NotSupportedException">不能执行转换。如果 <paramref name="value"/> 不是 <see cref="T:System.String"/> 或 <see cref="T:System.Uri"/> 类型或者 <paramref name="value"/> 参数不支持 <paramref name="context"/> 或 <paramref name="culture"/> 参数，则会发生此异常。</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
<summary>使用指定的上下文和区域性信息将给定的值对象转换为指定的类型。</summary>
<returns>表示转换的值的 <see cref="T:System.Object"/>。</returns>
<param name="context">提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext"/>。</param><param name="culture"><see cref="T:System.Globalization.CultureInfo"/>。如果传递 null，则采用当前区域性。</param><param name="value">要转换的 <see cref="T:System.Object"/>。</param><param name="destinationType"><paramref name="value"/> 参数要转换成的 <see cref="T:System.Type"/>。</param>
<exception cref="T:System.ArgumentNullException"><paramref name="destinationType"/> 参数为 null。</exception>
<exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratedCodeAttribute">
<summary>标识由工具生成的代码。无法继承此类。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.GeneratedCodeAttribute.#ctor(System.String,System.String)">
<summary>初始化 <see cref="T:System.CodeDom.Compiler.GeneratedCodeAttribute"/> 类的新实例。</summary> <param name="tool">生成代码的工具的名称。</param> <param name="version">生成代码的工具的版本。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Tool">
<summary>获取生成代码的工具的名称。</summary>
<returns>生成代码的工具的名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Version">
<summary>获取生成代码的工具的版本。</summary>
<returns>生成代码的工具的版本。</returns>
    </member>
    <member name="T:System.Collections.Generic.ISet`1">
<summary>提供用于集的抽象化的基接口。</summary>
<typeparam name="T">集内元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
<summary>向当前集中添加元素并返回一个指示该元素是否成功添加的值。 </summary>
<returns>如果已将该元素添加到集，则为 true；如果集中已存在该元素，则为 false。</returns>
<param name="item">要添加到集内的元素。</param>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
<summary>从当前集中移除指定集合中的所有元素。</summary> <param name="other">要从集中移除的项的集合。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="other"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
<summary>修改当前集，使该集仅包含指定集合中也存在的元素。</summary> <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="other"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
<summary>确定当前集是否为指定集合的属性（严格）子集。</summary>
<returns>如果当前集是 <paramref name="other"/> 的正确子集，则为 true；否则为 false。</returns>
<param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="other"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
<summary>确定当前集是否为指定集合的正确超集。</summary>
<returns>如果 <see cref="T:System.Collections.Generic.ISet`1"/> 对象是 <paramref name="other"/> 的正确超集，则为 true；否则为 false。</returns>
<param name="other">要与当前集进行比较的集合。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="other"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
<summary>确定一个集是否为指定集合的子集。</summary>
<returns>如果当前集是 <paramref name="other"/> 的子集，则为 true；否则为 false。</returns>
<param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="other"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
<summary>确定当前集是否为指定集合的超集。</summary>
<returns>如果当前集是 <paramref name="other"/> 的超集，则为 true；否则为 false。</returns>
<param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="other"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
<summary>确定当前集是否与指定的集合重叠。</summary>
<returns>如果当前集与 <paramref name="other"/> 至少共享一个通用元素，则为 true；否则为 false。</returns>
<param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="other"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
<summary>确定当前集与指定的集合中是否包含相同的元素。</summary>
<returns>如果当前集等于 <paramref name="other"/>，则为 true；否则为 false。</returns>
<param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="other"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
<summary>修改当前集，使该集仅包含当前集或指定集合中存在的元素（但不可包含两者共有的元素）。</summary> <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="other"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
<summary>修改当前集，使该集包含当前集和指定集合中同时存在的所有元素。</summary> <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="other"/> 为 null。</exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
<summary>表示双向链表。</summary>
<typeparam name="T">指定链表的元素类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
<summary>初始化为空的 <see cref="T:System.Collections.Generic.LinkedList`1"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
<summary>初始化 <see cref="T:System.Collections.Generic.LinkedList`1"/> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.IEnumerable"/> 中复制的元素并且其容量足以容纳所复制的元素数。</summary> <param name="collection"><see cref="T:System.Collections.IEnumerable"/>，其元素被复制到新的 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="collection"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
<summary>在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中指定的现有节点后添加指定的新节点。</summary><param name="node">要在其后插入 <paramref name="newNode"/> 的 <see cref="T:System.Collections.Generic.LinkedListNode`1"/>。</param><param name="newNode">要添加到 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="node"/> 为 null。-或- <paramref name="newNode"/> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="node"/> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中。-或-<paramref name="newNode"/> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1"/>。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
<summary>在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中指定的现有节点后添加包含指定值的新节点。</summary>
<returns>包含 <paramref name="value"/> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1"/>。</returns>
<param name="node">要在其后插入包含 <paramref name="value"/> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1"/> 的 <see cref="T:System.Collections.Generic.LinkedListNode`1"/>。</param><param name="value">要添加到 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的值。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="node"/> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="node"/> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
<summary>在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中指定的现有节点前添加指定的新节点。</summary><param name="node">要在其前插入 <paramref name="newNode"/> 的 <see cref="T:System.Collections.Generic.LinkedListNode`1"/>。</param><param name="newNode">要添加到 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="node"/> 为 null。-或- <paramref name="newNode"/> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="node"/> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中。-或-<paramref name="newNode"/> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1"/>。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
<summary>在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中指定的现有节点前添加包含指定值的新节点。</summary>
<returns>包含 <paramref name="value"/> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1"/>。</returns>
<param name="node">要在其前插入包含 <paramref name="value"/> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1"/> 的 <see cref="T:System.Collections.Generic.LinkedListNode`1"/>。</param><param name="value">要添加到 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的值。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="node"/> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="node"/> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
<summary>在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的开头处添加指定的新节点。</summary><param name="node">要在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的开头处添加的新 <see cref="T:System.Collections.Generic.LinkedListNode`1"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="node"/> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="node"/> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1"/>。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
<summary>在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的开头处添加包含指定值的新节点。</summary>
<returns>包含 <paramref name="value"/> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1"/>。</returns>
<param name="value">要在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的开头处添加的值。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
<summary>在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的结尾处添加指定的新节点。</summary><param name="node">要在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的结尾处添加的新 <see cref="T:System.Collections.Generic.LinkedListNode`1"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="node"/> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="node"/> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1"/>。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
<summary>在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的结尾处添加包含指定值的新节点。</summary>
<returns>包含 <paramref name="value"/> 的新 <see cref="T:System.Collections.Generic.LinkedListNode`1"/>。</returns>
<param name="value">要在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的结尾处添加的值。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
<summary>从 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中移除所有节点。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
<summary>确定某值是否在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中。</summary>
<returns>如果 <paramref name="value"/> 在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中，则为 true；否则为 false。</returns>
<param name="value">要在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中查找的值。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
<summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.Generic.LinkedList`1"/> 复制到兼容的一维 <see cref="T:System.Array"/>。</summary><param name="array">作为从 <see cref="T:System.Collections.Generic.LinkedList`1"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param><param name="index"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 等于或大于 <paramref name="array"/> 的长度。-或-<paramref name="index"/> 小于零。</exception>
<exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
<summary>获取 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中实际包含的节点数。</summary>
<returns><see cref="T:System.Collections.Generic.LinkedList`1"/> 中实际包含的节点数。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
<summary>查找包含指定值的第一个节点。</summary>
<returns>如果找到，则为包含指定值的第一个 <see cref="T:System.Collections.Generic.LinkedListNode`1"/>；否则为 null。</returns>
<param name="value">要在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中查找的值。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
<summary>查找包含指定值的最后一个节点。</summary>
<returns>如果找到，则为包含指定值的最后一个 <see cref="T:System.Collections.Generic.LinkedListNode`1"/>；否则为 null。</returns>
<param name="value">要在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中查找的值。</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
<summary>获取 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的第一个节点。</summary>
<returns><see cref="T:System.Collections.Generic.LinkedList`1"/> 的第一个 <see cref="T:System.Collections.Generic.LinkedListNode`1"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
<summary>返回一个循环访问 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的枚举器。</summary>
<returns><see cref="T:System.Collections.Generic.LinkedList`1"/> 的 <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator"/>。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
<summary>获取 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的最后一个节点。</summary>
<returns><see cref="T:System.Collections.Generic.LinkedList`1"/> 的最后一个 <see cref="T:System.Collections.Generic.LinkedListNode`1"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
<summary>从 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中移除指定的节点。</summary><param name="node">要从 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中移除的 <see cref="T:System.Collections.Generic.LinkedListNode`1"/>。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="node"/> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
<paramref name="node"/> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
<summary>从 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中移除第一次出现的指定值。</summary>
<returns>如果成功移除包含 <paramref name="value"/> 的元素，则为 true；否则为 false。如果在原始 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中没有找到 <paramref name="value"/>，此方法也会返回 false。</returns>
<param name="value">要从 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中移除的值。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
<summary>移除位于 <see cref="T:System.Collections.Generic.LinkedList`1"/> 开头处的节点。</summary>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Collections.Generic.LinkedList`1"/> 为空。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
<summary>移除位于 <see cref="T:System.Collections.Generic.LinkedList`1"/> 结尾处的节点。</summary>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Collections.Generic.LinkedList`1"/> 为空。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
<summary>将项添加到 <see cref="T:System.Collections.Generic.ICollection`1"/> 的结尾处。</summary><param name="value">要在 <see cref="T:System.Collections.Generic.ICollection`1"/> 的结尾处添加的值。</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
<summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1"/> 是否为只读。</summary>
<returns>如果 <see cref="T:System.Collections.Generic.ICollection`1"/> 为只读，则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
<summary>从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。</summary><param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param><param name="index"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或-<paramref name="array"/> 没有从零开始的索引。-或-源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。-或-源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
<summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。</summary>
<returns>如果同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全），则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
<summary>获取一个对象，该对象可以用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问。</summary>
<returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。在 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
<summary>返回一个将链表作为集合进行循环访问的枚举器。</summary>
<returns>可用于将链表作为集合循环访问的 <see cref="T:System.Collections.IEnumerator"/>。</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
<summary>枚举 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
<summary>获取枚举器当前位置的元素。</summary>
<returns><see cref="T:System.Collections.Generic.LinkedList`1"/> 中位于该枚举器当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
<summary>释放由 <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator"/> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
<summary>使枚举器前进到 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的下一个元素。</summary>
<returns>如果枚举器成功地推进到下一个元素，则为 true；如果枚举器越过集合的结尾，则为 false。</returns>
<exception cref="T:System.InvalidOperationException">在创建了枚举器后集合被修改了。 </exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
<summary>获取枚举器当前位置的元素。</summary>
<returns>集合中位于枚举器当前位置的元素。</returns>
<exception cref="T:System.InvalidOperationException">枚举器定位在该集合的第一个元素之前或最后一个元素之后。 </exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
<summary>将枚举器设置为其初始位置，该位置位于集合中第一个元素之前。无法继承此类。</summary>
<exception cref="T:System.InvalidOperationException">在创建了枚举器后集合被修改了。 </exception>
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
<summary>表示 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中的节点。无法继承此类。</summary>
<typeparam name="T">指定链表的元素类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
<summary>初始化 <see cref="T:System.Collections.Generic.LinkedListNode`1"/> 类的新实例，该实例包含指定的值。</summary><param name="value">要在 <see cref="T:System.Collections.Generic.LinkedListNode`1"/> 中包含的值。</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
<summary>获取 <see cref="T:System.Collections.Generic.LinkedListNode`1"/> 所属的 <see cref="T:System.Collections.Generic.LinkedList`1"/>。</summary>
<returns>对 <see cref="T:System.Collections.Generic.LinkedListNode`1"/> 所属的 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的引用；或者如果 <see cref="T:System.Collections.Generic.LinkedListNode`1"/> 未链接，则为 null。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
<summary>获取 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中的下一个节点。</summary>
<returns>对 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中的下一个节点的引用；如果当前节点是 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的最后一个元素（<see cref="P:System.Collections.Generic.LinkedList`1.Last"/>），则为 null。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
<summary>获取 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中的上一个节点。</summary>
<returns>对 <see cref="T:System.Collections.Generic.LinkedList`1"/> 中的上一个节点的引用；如果当前节点是 <see cref="T:System.Collections.Generic.LinkedList`1"/> 的第一个元素（<see cref="P:System.Collections.Generic.LinkedList`1.First"/>），则为 null。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
<summary>获取节点中包含的值。</summary>
<returns>节点中包含的值。</returns>
    </member>
    <member name="T:System.Collections.Generic.Queue`1">
<summary>表示对象的先进先出集合。</summary>
<typeparam name="T">指定队列中元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
<summary>初始化 <see cref="T:System.Collections.Generic.Queue`1"/> 类的新实例，该实例为空并且具有默认初始容量。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
<summary>初始化 <see cref="T:System.Collections.Generic.Queue`1"/> 类的新实例，该实例包含从指定的集合中复制的元素并且其容量足以容纳所复制的元素数。</summary><param name="collection">集合，其元素被复制到新的 <see cref="T:System.Collections.Generic.Queue`1"/> 中。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="collection"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
<summary>初始化 <see cref="T:System.Collections.Generic.Queue`1"/> 类的新实例，该实例为空并且具有指定的初始容量。</summary><param name="capacity"><see cref="T:System.Collections.Generic.Queue`1"/> 可以包含的初始元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="capacity"/> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
<summary>从 <see cref="T:System.Collections.Generic.Queue`1"/> 中移除所有对象。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
<summary>确定某元素是否在 <see cref="T:System.Collections.Generic.Queue`1"/> 中。</summary>
<returns>如果 <paramref name="item"/> 在 <see cref="T:System.Collections.Generic.Queue`1"/> 中，则为 true；否则为 false。</returns>
<param name="item">要在 <see cref="T:System.Collections.Generic.Queue`1"/> 中查找的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
<summary>从指定数组索引开始，将 <see cref="T:System.Collections.Generic.Queue`1"/> 元素复制到现有一维 <see cref="T:System.Array"/> 中。</summary><param name="array">作为从 <see cref="T:System.Collections.Generic.Queue`1"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param><param name="arrayIndex"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="arrayIndex"/> 小于零。</exception>
<exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.Queue`1"/> 中的元素数目大于从 <paramref name="arrayIndex"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
<summary>获取 <see cref="T:System.Collections.Generic.Queue`1"/> 中包含的元素数量。</summary>
<returns><see cref="T:System.Collections.Generic.Queue`1"/> 中包含的元素数量。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
<summary>移除并返回位于 <see cref="T:System.Collections.Generic.Queue`1"/> 开始处的对象。</summary>
<returns>从 <see cref="T:System.Collections.Generic.Queue`1"/> 的开头移除的对象。</returns>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Collections.Generic.Queue`1"/> 为空。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
<summary>将对象添加到 <see cref="T:System.Collections.Generic.Queue`1"/> 的结尾处。</summary><param name="item">要添加到 <see cref="T:System.Collections.Generic.Queue`1"/> 的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
<summary>返回一个循环访问 <see cref="T:System.Collections.Generic.Queue`1"/> 的枚举器。</summary>
<returns><see cref="T:System.Collections.Generic.Queue`1"/> 的 <see cref="T:System.Collections.Generic.Queue`1.Enumerator"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
<summary>返回位于 <see cref="T:System.Collections.Generic.Queue`1"/> 开始处的对象但不将其移除。</summary>
<returns>位于 <see cref="T:System.Collections.Generic.Queue`1"/> 的开始处的对象。</returns>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Collections.Generic.Queue`1"/> 为空。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
<summary>从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。</summary><param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param><param name="index"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="index"/> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或-<paramref name="array"/> 没有从零开始的索引。-或-源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="index"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。-或-源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
<summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。</summary>
<returns>如果同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全），则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.Queue`1"/> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
<summary>获取一个对象，该对象可以用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问。</summary>
<returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。在 <see cref="T:System.Collections.Generic.Queue`1"/> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
<summary>将 <see cref="T:System.Collections.Generic.Queue`1"/> 元素复制到新数组。</summary>
<returns>包含从 <see cref="T:System.Collections.Generic.Queue`1"/> 复制的元素的新数组。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
<summary>如果元素数小于当前容量的 90%，将容量设置为 <see cref="T:System.Collections.Generic.Queue`1"/> 中的实际元素数。</summary>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator">
<summary>枚举 <see cref="T:System.Collections.Generic.Queue`1"/> 的元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
<summary>获取枚举器当前位置的元素。</summary>
<returns><see cref="T:System.Collections.Generic.Queue`1"/> 中位于该枚举器当前位置的元素。</returns>
<exception cref="T:System.InvalidOperationException">枚举器定位在该集合的第一个元素之前或最后一个元素之后。 </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
<summary>释放由 <see cref="T:System.Collections.Generic.Queue`1.Enumerator"/> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
<summary>使枚举器前进到 <see cref="T:System.Collections.Generic.Queue`1"/> 的下一个元素。</summary>
<returns>如果枚举器成功地推进到下一个元素，则为 true；如果枚举器越过集合的结尾，则为 false。</returns>
<exception cref="T:System.InvalidOperationException">在创建了枚举器后集合被修改了。 </exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current">
<summary>获取枚举器当前位置的元素。</summary>
<returns>集合中位于枚举器当前位置的元素。</returns>
<exception cref="T:System.InvalidOperationException">枚举器定位在该集合的第一个元素之前或最后一个元素之后。 </exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset">
<summary>将枚举器设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
<exception cref="T:System.InvalidOperationException">在创建了枚举器后集合被修改了。 </exception>
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
<summary>表示同一任意类型的实例的大小可变的后进先出 (LIFO) 集合。</summary>
<typeparam name="T">指定堆栈中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
<summary>初始化 <see cref="T:System.Collections.Generic.Stack`1"/> 类的新实例，该实例为空并且具有默认初始容量。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
<summary>初始化 <see cref="T:System.Collections.Generic.Stack`1"/> 类的新实例，该实例包含从指定的集合中复制的元素并且其容量足以容纳所复制的元素数。</summary><param name="collection">从中复制元素的集合。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="collection"/> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
<summary>初始化 <see cref="T:System.Collections.Generic.Stack`1"/> 类的新实例，该实例为空并且具有指定的初始容量或默认初始容量（这两个容量中的较大者）。</summary><param name="capacity"><see cref="T:System.Collections.Generic.Stack`1"/> 可以包含的初始元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="capacity"/> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
<summary>从 <see cref="T:System.Collections.Generic.Stack`1"/> 中移除所有对象。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
<summary>确定某元素是否在 <see cref="T:System.Collections.Generic.Stack`1"/> 中。</summary>
<returns>如果 <paramref name="item"/> 在 <see cref="T:System.Collections.Generic.Stack`1"/> 中，则为 true；否则为 false。</returns>
<param name="item">要在 <see cref="T:System.Collections.Generic.Stack`1"/> 中查找的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
<summary>从指定数组索引开始，将 <see cref="T:System.Collections.Generic.Stack`1"/> 复制到现有一维 <see cref="T:System.Array"/> 中。</summary><param name="array">作为从 <see cref="T:System.Collections.Generic.Stack`1"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param><param name="arrayIndex"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="arrayIndex"/> 小于零。</exception>
<exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.Stack`1"/> 中的元素数目大于从 <paramref name="arrayIndex"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
<summary>获取 <see cref="T:System.Collections.Generic.Stack`1"/> 中包含的元素数量。</summary>
<returns><see cref="T:System.Collections.Generic.Stack`1"/> 中包含的元素数量。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
<summary>返回 <see cref="T:System.Collections.Generic.Stack`1"/> 的一个枚举器。</summary>
<returns>用于 <see cref="T:System.Collections.Generic.Stack`1"/> 的 <see cref="T:System.Collections.Generic.Stack`1.Enumerator"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
<summary>返回位于 <see cref="T:System.Collections.Generic.Stack`1"/> 顶部的对象，但不将其移除。</summary>
<returns>位于 <see cref="T:System.Collections.Generic.Stack`1"/> 顶部的对象。</returns>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Collections.Generic.Stack`1"/> 为空。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
<summary>移除并返回位于 <see cref="T:System.Collections.Generic.Stack`1"/> 顶部的对象。</summary>
<returns>从 <see cref="T:System.Collections.Generic.Stack`1"/> 顶部移除的对象。</returns>
<exception cref="T:System.InvalidOperationException"><see cref="T:System.Collections.Generic.Stack`1"/> 为空。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
<summary>将对象插入 <see cref="T:System.Collections.Generic.Stack`1"/> 的顶部。</summary><param name="item">要推入到 <see cref="T:System.Collections.Generic.Stack`1"/> 中的对象。对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
<summary>从特定的 <see cref="T:System.Array"/> 索引处开始，将 <see cref="T:System.Collections.ICollection"/> 的元素复制到一个 <see cref="T:System.Array"/> 中。</summary><param name="array">作为从 <see cref="T:System.Collections.ICollection"/> 复制的元素的目标位置的一维 <see cref="T:System.Array"/>。<see cref="T:System.Array"/> 必须具有从零开始的索引。</param><param name="arrayIndex"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="arrayIndex"/> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维的。-或-<paramref name="array"/> 没有从零开始的索引。-或-源 <see cref="T:System.Collections.ICollection"/> 中的元素数目大于从 <paramref name="arrayIndex"/> 到目标 <paramref name="array"/> 末尾之间的可用空间。-或-源 <see cref="T:System.Collections.ICollection"/> 的类型无法自动转换为目标 <paramref name="array"/> 的类型。</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
<summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全）。</summary>
<returns>如果同步对 <see cref="T:System.Collections.ICollection"/> 的访问（线程安全），则为 true；否则为 false。在 <see cref="T:System.Collections.Generic.Stack`1"/> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
<summary>获取一个对象，该对象可以用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问。</summary>
<returns>可用于同步对 <see cref="T:System.Collections.ICollection"/> 的访问的对象。在 <see cref="T:System.Collections.Generic.Stack`1"/> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
<summary>返回一个循环访问集合的枚举器。</summary>
<returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/>。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
<summary>将 <see cref="T:System.Collections.Generic.Stack`1"/> 复制到新数组。</summary>
<returns>新数组，包含 <see cref="T:System.Collections.Generic.Stack`1"/> 的元素的副本。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
<summary>如果元素数小于当前容量的 90%，将容量设置为 <see cref="T:System.Collections.Generic.Stack`1"/> 中的实际元素数。</summary>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator">
<summary>枚举 <see cref="T:System.Collections.Generic.Stack`1"/> 的元素。</summary>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
<summary>获取枚举器当前位置的元素。</summary>
<returns><see cref="T:System.Collections.Generic.Stack`1"/> 中位于该枚举器当前位置的元素。</returns>
<exception cref="T:System.InvalidOperationException">枚举器定位在该集合的第一个元素之前或最后一个元素之后。 </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
<summary>释放由 <see cref="T:System.Collections.Generic.Stack`1.Enumerator"/> 使用的所有资源。 </summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
<summary>使枚举器前进到 <see cref="T:System.Collections.Generic.Stack`1"/> 的下一个元素。</summary>
<returns>如果枚举器成功地推进到下一个元素，则为 true；如果枚举器越过集合的结尾，则为 false。</returns>
<exception cref="T:System.InvalidOperationException">在创建了枚举器后集合被修改了。 </exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current">
<summary>获取枚举器当前位置的元素。</summary>
<returns>集合中位于枚举器当前位置的元素。</returns>
<exception cref="T:System.InvalidOperationException">枚举器定位在该集合的第一个元素之前或最后一个元素之后。 </exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset">
<summary>将枚举器设置为其初始位置，该位置位于集合中第一个元素之前。无法继承此类。</summary>
<exception cref="T:System.InvalidOperationException">在创建了枚举器后集合被修改了。 </exception>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventArgs">
<summary>为 MethodNameCompleted 事件提供数据。 </summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
<summary>初始化 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> 类的新实例。</summary><param name="error">异步操作期间发生错误。</param> <param name="cancelled">一个值，该值指示是否已取消异步操作。</param> <param name="userState">可选的用户提供的状态对象，用于标识引发 Completed 事件的任务。</param>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
<summary>获取一个值，该值指示是否已取消异步操作。</summary>
<returns>如果已取消异步操作，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
<summary>获取一个值，该值指示异步操作期间发生错误。</summary>
<returns>如果异步操作期间发生错误，则为一个 <see cref="T:System.Exception"/>实例；否则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
<summary>如果异步操作失败，则引发用户提供的异常。</summary>
<exception cref="T:System.InvalidOperationException"><see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled"/> 属性为 true。</exception>
<exception cref="T:System.Reflection.TargetInvocationException"><see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> 属性已由异步操作设置。</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
<summary>获取异步任务的唯一标识符。</summary>
<returns>唯一标识异步任务的对象引用；如果未设置任何值，则为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventHandler">
<summary>表示将要处理异步操作的 MethodNameCompleted 事件的方法。</summary> <param name="sender">事件源。</param> <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/>。</param>
    </member>
    <member name="T:System.ComponentModel.AsyncOperation">
<summary>跟踪异步操作的生存期。 </summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.OperationCompleted">
<summary>结束异步操作的生存期。</summary>
      <exception cref="T:System.InvalidOperationException">
此前便已为此任务调用了 <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted"/>。</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
<summary>在适合于应用程序模型的线程或上下文中调用委托。</summary> <param name="d">一个 <see cref="T:System.Threading.SendOrPostCallback"/> 对象，用于包装操作结束时要调用的委托。</param><param name="arg"><paramref name="d"/> 参数中包含的委托的一个参数。</param>
<exception cref="T:System.InvalidOperationException">此前便已为此任务调用了 <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)"/> 方法。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="d"/> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
<summary>结束异步操作的生存期。</summary> <param name="d">一个 <see cref="T:System.Threading.SendOrPostCallback"/> 对象，用于包装操作结束时要调用的委托。</param><param name="arg"><paramref name="d"/> 参数中包含的委托的一个参数。</param>
<exception cref="T:System.InvalidOperationException">此前便已为此任务调用了 <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted"/> 方法。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="d"/> 为 null。</exception>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
<summary>获取当对象由 <see cref="T:System.ComponentModel.AsyncOperationManager"/> 创建时，传递给构造函数的 <see cref="T:System.Threading.SynchronizationContext"/> 对象。</summary>
<returns>传递给构造函数的 <see cref="T:System.Threading.SynchronizationContext"/> 对象。</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
<summary>获取用于唯一标识异步操作的对象。</summary>
<returns>传递给异步方法调用的状态对象。</returns>
    </member>
    <member name="T:System.ComponentModel.AsyncOperationManager">
<summary>为支持异步方法调用的类提供并发管理。无法继承此类。 </summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
<summary>返回可用于对特定异步操作的持续时间进行跟踪的 <see cref="T:System.ComponentModel.AsyncOperation"/>。</summary>
<returns>可用于对异步方法调用的持续时间进行跟踪的 <see cref="T:System.ComponentModel.AsyncOperation"/>。</returns>
<param name="userSuppliedState">一个对象，用于使一个客户端状态（如任务 ID）与一个特定异步操作相关联。</param>
    </member>
    <member name="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
<summary>获取或设置用于异步操作的 <see cref="T:System.Threading.SynchronizationContext"/>。</summary>
<returns>异步操作的 <see cref="T:System.Threading.SynchronizationContext"/>。</returns>
    </member>
    <member name="T:System.ComponentModel.BackgroundWorker">
<summary>在单独的线程上运行操作。</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.#ctor">
<summary>初始化 <see cref="T:System.ComponentModel.BackgroundWorker"/> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.CancelAsync">
<summary>请求取消挂起的后台操作。</summary>
      <exception cref="T:System.InvalidOperationException">
<see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation"/> 为 false。 </exception>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.CancellationPending">
<summary>获取一个值，该值指示应用程序是否已请求取消后台操作。</summary>
<returns>如果应用程序已请求取消后台操作，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.DoWork">
<summary>调用 <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync"/> 时发生。</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.IsBusy">
<summary>获取一个值，该值指示 <see cref="T:System.ComponentModel.BackgroundWorker"/> 是否正在运行后台操作。</summary>
<returns>如果 <see cref="T:System.ComponentModel.BackgroundWorker"/> 正在运行后台操作，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
<summary>引发 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork"/> 事件。</summary><param name="e">包含事件数据的 <see cref="T:System.ComponentModel.DoWorkEventArgs"/>。</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
<summary>引发 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged"/> 事件。</summary><param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ProgressChangedEventArgs"/>。</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
<summary>引发 <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"/> 事件。</summary><param name="e">包含事件数据的 <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs"/>。</param>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
<summary>调用 <see cref="Overload:System.ComponentModel.BackgroundWorker.ReportProgress"/> 时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
<summary>引发 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged"/> 事件。</summary><param name="percentProgress">已完成的后台操作所占的百分比，范围从 0% 到 100%。</param>
<exception cref="T:System.InvalidOperationException"><see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress"/> 属性设置为 false。 </exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
<summary>引发 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged"/> 事件。</summary><param name="percentProgress">已完成的后台操作所占的百分比，范围从 0% 到 100%。</param> <param name="userState">传递到 <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)"/> 的状态对象。</param>
<exception cref="T:System.InvalidOperationException"><see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress"/> 属性设置为 false。 </exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
<summary>开始运行后台操作。</summary>
      <exception cref="T:System.InvalidOperationException">
<see cref="P:System.ComponentModel.BackgroundWorker.IsBusy"/> 为 true。</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
<summary>开始运行后台操作，并包括供后台操作使用的参数。</summary> <param name="argument"><see cref="E:System.ComponentModel.BackgroundWorker.DoWork"/> 事件处理程序中供后台操作使用的参数。</param>
      <exception cref="T:System.InvalidOperationException">
<see cref="P:System.ComponentModel.BackgroundWorker.IsBusy"/> 为 true。</exception>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
<summary>当后台操作已完成、被取消或引发异常时发生。</summary>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
<summary>获取或设置一个值，该值指示 <see cref="T:System.ComponentModel.BackgroundWorker"/> 能否报告进度更新。</summary>
<returns>如果 <see cref="T:System.ComponentModel.BackgroundWorker"/> 支持进度更新，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
<summary>获取或设置一个值，该值指示 <see cref="T:System.ComponentModel.BackgroundWorker"/> 是否支持异步取消。</summary>
<returns>如果 <see cref="T:System.ComponentModel.BackgroundWorker"/> 支持取消，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
<summary>指定成员是否通常用于绑定。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
<summary>使用布尔值初始化 <see cref="T:System.ComponentModel.BindableAttribute"/> 类的实例。</summary> <param name="bindable">若要将属性用于绑定，则为 true；否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
<summary>初始化 <see cref="T:System.ComponentModel.BindableAttribute"/> 类的新实例。</summary> <param name="bindable">若要将属性用于绑定，则为 true；否则为 false。</param><param name="direction">其中一个 <see cref="T:System.ComponentModel.BindingDirection"/> 值。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
<summary>使用 <see cref="T:System.ComponentModel.BindableSupport"/> 值之一初始化 <see cref="T:System.ComponentModel.BindableAttribute"/> 类的新实例。</summary><param name="flags">其中一个 <see cref="T:System.ComponentModel.BindableSupport"/> 值。 </param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
<summary>初始化 <see cref="T:System.ComponentModel.BindableAttribute"/> 类的新实例。</summary><param name="flags">其中一个 <see cref="T:System.ComponentModel.BindableSupport"/> 值。</param> <param name="direction">其中一个 <see cref="T:System.ComponentModel.BindingDirection"/> 值。</param>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
<summary>获取指示某个属性通常用于绑定的值。</summary>
<returns>如果该属性通常用于绑定，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
<summary>指定 <see cref="T:System.ComponentModel.BindableAttribute"/> 的默认值，即 <see cref="F:System.ComponentModel.BindableAttribute.No"/>。此字段为只读。</summary>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
<summary>获取指示此属性的数据绑定方向的值。</summary>
<returns>指示此属性的数据绑定方向的值。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
<summary>确定两个 <see cref="T:System.ComponentModel.BindableAttribute"/> 对象是否相等。</summary>
<returns>如果指定的 <see cref="T:System.ComponentModel.BindableAttribute"/> 等于当前的 <see cref="T:System.ComponentModel.BindableAttribute"/>，则为 true；如果不等，则为 false。</returns>
<param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
<summary>用作 <see cref="T:System.ComponentModel.BindableAttribute"/> 类的一个哈希函数。</summary>
<returns>当前 <see cref="T:System.ComponentModel.BindableAttribute"/> 的哈希代码。</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
<summary>指定属性通常不用于绑定。此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
<summary>指定属性通常用于绑定。此字段为只读。</summary>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
<summary>指定用于指示是否可以将属性绑定到数据元素或另一个属性的值。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
<summary>该属性在设计时不可绑定。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
<summary>该属性在设计时不可绑定。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
<summary>该属性被设置为默认值。</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
<summary>指定模板是否可以用一种方式或两种方式绑定。</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
<summary>该模板只能接受属性值。与泛型 <see cref="T:System.Web.UI.ITemplate"/> 一起使用。</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
<summary>该模板可以接受和公开属性值。与 <see cref="T:System.Web.UI.IBindableTemplate"/> 一起使用。</summary>
    </member>
    <member name="T:System.ComponentModel.BrowsableAttribute">
<summary>指定一个属性或事件是否应显示在“属性”窗口中。</summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)">
<summary>初始化 <see cref="T:System.ComponentModel.BrowsableAttribute"/> 类的新实例。</summary> <param name="browsable">如果属性或事件可以在设计时修改，则为 true；否则为 false。默认值为 true。 </param>
    </member>
    <member name="P:System.ComponentModel.BrowsableAttribute.Browsable">
<summary>获取一个值，该值指示此对象是否可浏览。</summary>
<returns>如果对象可以浏览，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Default">
<summary>指定 <see cref="T:System.ComponentModel.BrowsableAttribute"/> 的默认值，即 <see cref="F:System.ComponentModel.BrowsableAttribute.Yes"/>。此静态字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.Equals(System.Object)">
<summary>指示此实例与指定对象是否相等。</summary>
<returns>如果 <paramref name="obj"/> 等于此实例，则为 true；否则为 false。</returns>
<param name="obj">要比较的另一个对象。 </param>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.No">
<summary>指定一个属性或事件在设计时不能修改。此静态字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Yes">
<summary>指定一个属性或事件在设计时可以修改。此静态字段为只读。</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventArgs">
<summary>为可取消的事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor">
<summary>初始化 <see cref="T:System.ComponentModel.CancelEventArgs"/> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor(System.Boolean)">
<summary>初始化 <see cref="T:System.ComponentModel.CancelEventArgs"/> 类的新实例，该实例将 <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> 属性设置为给定值。</summary> <param name="cancel">如果要取消操作，则为 true；否则为 false。</param>
    </member>
    <member name="P:System.ComponentModel.CancelEventArgs.Cancel">
<summary>获取或设置一个值，该值指示是否应取消操作。</summary>
<returns>如果应取消操作，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.ComponentModel.CategoryAttribute">
<summary>指定当属性或事件显示在一个设置为“按分类顺序”模式的属性网格控件中时，用于给属性或事件分组的类别的名称。</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor">
<summary>使用类别名称“Default”初始化 <see cref="T:System.ComponentModel.CategoryAttribute"/> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor(System.String)">
<summary>使用指定的类别名称初始化 <see cref="T:System.ComponentModel.CategoryAttribute"/> 类的新实例。</summary><param name="category">类别名称。 </param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Action">
<summary>获取表示“操作”类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</summary>
<returns>操作类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Appearance">
<summary>获取表示“外观”类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</summary>
<returns>外观类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Asynchronous">
<summary>获取表示“异步”类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</summary>
<returns>异步类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Behavior">
<summary>获取表示“行为”类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</summary>
<returns>行为类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Category">
<summary>获取应用此特性的属性或事件的类别名称。</summary>
<returns>应用此特性的属性或事件的类别名称。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Data">
<summary>获取表示“数据”类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</summary>
<returns>数据类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Default">
<summary>获取表示“默认”类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</summary>
<returns>默认类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Design">
<summary>获取表示“设计”类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</summary>
<returns>设计类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.DragDrop">
<summary>获取表示“拖放”类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</summary>
<returns>拖放类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.Equals(System.Object)">
<summary>返回一个值，该值指示指定对象的值是否等于当前的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</summary>
<returns>如果指定对象的值等于当前 <see cref="T:System.ComponentModel.CategoryAttribute"/>，则为 true；否则为 false。</returns>
<param name="obj">要进行值的相等性测试的对象。 </param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Focus">
<summary>获取表示“焦点”类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</summary>
<returns>焦点类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Format">
<summary>获取表示“格式”类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</summary>
<returns>格式类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetHashCode">
<summary>返回此属性的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)">
<summary>查找指定类别的本地化名称。</summary>
<returns>类别的本地化名称；如果本地化名称不存在，则为 null。</returns>
<param name="value">要查找的类别的标识符。 </param>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Key">
<summary>获取表示“键”类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</summary>
<returns>键类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Layout">
<summary>获取表示“布局”类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</summary>
<returns>布局类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Mouse">
<summary>获取表示“鼠标”类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</summary>
<returns>鼠标类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.WindowStyle">
<summary>获取表示“窗口样式”类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</summary>
<returns>窗口样式类别的 <see cref="T:System.ComponentModel.CategoryAttribute"/>。</returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
<summary>指定一个组件的数据源和数据成员属性，该组件支持复杂数据绑定。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
<summary>不带参数初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
<summary>使用指定的数据源初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"/> 类的新实例。</summary> <param name="dataSource">要用作数据源的属性的名称。</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
<summary>使用指定的数据源和数据成员初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"/> 类的新实例。</summary> <param name="dataSource">要用作数据源的属性的名称。</param> <param name="dataMember">要用作数据源的属性的名称。</param>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
<summary>获取 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"/> 所绑定组件的数据成员属性的名称。</summary>
<returns><see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"/> 所绑定组件的数据成员属性的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
<summary>获取 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"/> 所绑定组件的数据源属性的名称。</summary>
<returns><see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"/> 所绑定组件的数据源属性的名称。</returns>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
<summary>表示 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"/> 类的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
<summary>确定指定的 <see cref="T:System.Object"/> 是否等于当前 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"/> 实例。 </summary>
<returns>如果该对象等于当前的实例，则为 true；如果不相等，则为 false。</returns>
<param name="obj">要与当前 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute"/> 实例比较的 <see cref="T:System.Object"/>。</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentCollection">
<summary>获取容器中的特定组件。</summary>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
<summary>指定组件的默认绑定属性。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
<summary>不带参数初始化 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
<summary>使用指定的属性名称初始化 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute"/> 类的新实例。</summary><param name="name">默认绑定属性的名称。</param>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
<summary>表示 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute"/> 类的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
<summary>确定指定的 <see cref="T:System.Object"/> 是否等于当前 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute"/> 实例。 </summary>
<returns>如果该对象等于当前的实例，则为 true；如果不相等，则为 false。</returns>
<param name="obj">要与当前 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute"/> 实例比较的 <see cref="T:System.Object"/>。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
<summary>获取 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute"/> 所绑定组件的默认绑定属性的名称。</summary>
<returns><see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute"/> 所绑定组件的默认绑定属性的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
<summary>指定控件的默认事件。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.ComponentModel.DefaultEventAttribute"/> 类的新实例。</summary><param name="name">该属性所绑定到组件的默认事件的名称。 </param>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
<summary>指定 <see cref="T:System.ComponentModel.DefaultEventAttribute"/> 的默认值，即 null。此静态字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
<summary>返回一个值，该值指示给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.DefaultEventAttribute"/>。</summary>
<returns>如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
<param name="obj">要进行值的相等性测试的对象。 </param>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
<summary>获取该属性所绑定到组件的默认事件的名称。</summary>
<returns>该属性所绑定到组件的默认事件的名称。默认值为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
<summary>指定控件的默认属性。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.ComponentModel.DefaultPropertyAttribute"/> 类的新实例。</summary><param name="name">该属性所绑定到组件的默认属性的名称。 </param>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
<summary>指定 <see cref="T:System.ComponentModel.DefaultPropertyAttribute"/> 的默认值，即 null。此静态字段为只读。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
<summary>返回一个值，该值指示给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.DefaultPropertyAttribute"/>。</summary>
<returns>如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
<param name="obj">要进行值的相等性测试的对象。 </param>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>32 位带符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
<summary>获取该属性所绑定到组件的默认属性的名称。</summary>
<returns>该属性所绑定到组件的默认属性的名称。默认值为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
<summary>指定属性的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
<summary>使用 <see cref="T:System.Boolean"/> 值初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute"/> 类的新实例。</summary><param name="value"><see cref="T:System.Boolean"/>，这是默认值。 </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
<summary>使用 8 位无符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute"/> 类的新实例。</summary><param name="value">8 位无符号整数，这是默认值。 </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
<summary>使用 Unicode 字符初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute"/> 类的新实例。</summary><param name="value">Unicode 字符，这是默认值。 </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
<summary>使用双精度浮点数字初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute"/> 类的新实例。</summary><param name="value">双精度浮点数字，这是默认值。 </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
<summary>使用 16 位带符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute"/> 类的新实例。</summary><param name="value">16 位带符号整数，这是默认值。 </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
<summary>使用 32 位带符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute"/> 类的新实例。</summary><param name="value">32 位带符号整数，这是默认值。 </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
<summary>使用 64 位带符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute"/> 类的新实例。</summary><param name="value">64 位带符号整数，这是默认值。 </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
<summary>初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute"/> 类的新实例。</summary><param name="value">表示默认值的 <see cref="T:System.Object"/>。 </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
<summary>使用单精度浮点数字初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute"/> 类的新实例。</summary><param name="value">单精度浮点数字，这是默认值。 </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
<summary>使用 <see cref="T:System.String"/> 初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute"/> 类的新实例。</summary><param name="value"><see cref="T:System.String"/>，这是默认值。 </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
<summary>初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute"/> 类的新实例，将指定的值转换为指定的类型，并将固定区域性作为翻译上下文。</summary><param name="type">表示要将值转换为的类型的 <see cref="T:System.Type"/>。</param> <param name="value">可以使用该类型的 <see cref="T:System.ComponentModel.TypeConverter"/> 和美国英语转换为的 <see cref="T:System.String"/>。 </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.Equals(System.Object)">
<summary>返回一个值，该值指示给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.DefaultValueAttribute"/>。</summary>
<returns>如果指定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
<param name="obj">要进行值的相等性测试的对象。 </param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.GetHashCode"></member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.SetValue(System.Object)">
<summary>设置此特性所绑定到的属性的默认值。</summary> <param name="value">默认值。</param>
    </member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
<summary>获取此特性绑定到的属性的默认值。</summary>
<returns><see cref="T:System.Object"/>，表示此特性绑定到的属性的默认值。</returns>
    </member>
    <member name="T:System.ComponentModel.DescriptionAttribute">
<summary>指定属性或事件的说明。</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor">
<summary>不带参数初始化 <see cref="T:System.ComponentModel.DescriptionAttribute"/> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)">
<summary>初始化 <see cref="T:System.ComponentModel.DescriptionAttribute"/> 类的新实例，该类带有说明。</summary><param name="description">说明文本。 </param>
    </member>
    <member name="F:System.ComponentModel.DescriptionAttribute.Default">
<summary>指定 <see cref="T:System.ComponentModel.DescriptionAttribute"/> 的默认值，即空字符串 ("")。此静态字段为只读。</summary>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.Description">
<summary>获取存储在此属性中的说明。</summary>
<returns>存储在此属性中的说明。</returns>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.DescriptionValue">
<summary>获取或设置作为说明存储的字符串。</summary>
<returns>作为说明存储的字符串。默认值为空字符串 ("")。</returns>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.Equals(System.Object)">
<summary>返回一个值，该值指示指定对象的值是否等于当前的 <see cref="T:System.ComponentModel.DescriptionAttribute"/>。</summary>
<returns>如果指定对象的值等于当前 <see cref="T:System.ComponentModel.DescriptionAttribute"/>，则为 true；否则为 false。</returns>
<param name="obj">要进行值的相等性测试的对象。 </param>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.GetHashCode"></member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
<summary><see cref="T:System.ComponentModel.DesignTimeVisibleAttribute"/> 标记控件的可见性。如果存在 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes"/>，可视化设计器即可在设计器上显示该控件。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
<summary>创建一个新的默认值设置为 false 的 <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute"/>。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
<summary>创建新的 <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute"/> ，并将 <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible"/> 属性设置为 <paramref name="visible"/> 中的给定值。</summary><param name="visible">与 <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible"/> 属性的设置值相反的值。 </param>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
<summary>默认可见性是 Yes。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
<param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode"></member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
<summary>将控件标记为在可视化设计器中不可见。</summary>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
<summary>获取或设置该控件是否应在设计时显示。</summary>
<returns>如果该控件应在设计时显示，则为 true，如果该控件不应在设计时显示，则为 false。</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
<summary>将控件标记为在可视化设计器中可见。</summary>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventArgs">
<summary>为 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork"/> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)">
<summary>初始化 <see cref="T:System.ComponentModel.DoWorkEventArgs"/> 类的新实例。</summary><param name="argument">指定异步操作的参数。</param>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Argument">
<summary>获取表示异步操作参数的值。</summary>
<returns>表示异步操作参数的 <see cref="T:System.Object"/>。</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Cancel">
<summary>获取或设置一个值，该值指示异步操作是否已取消。</summary>
<returns>如果已取消该操作，则为 true；否则为 false。默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Result">
<summary>获取或设置表示异步操作结果的值。</summary>
<returns>表示异步操作结果的 <see cref="T:System.Object"/>。</returns>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventHandler">
<summary>表示将处理当调用 <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync"/> 方法时引发的 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork"/> 事件的方法。</summary><param name="sender">事件的源。</param> <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.DoWorkEventArgs"/>。 </param>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
<summary>指定某个属性或方法在编辑器中可以查看。无法继承此类。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor">
<summary>使用设置为默认状态的 <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State"/> 初始化 <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
<summary>使用 <see cref="T:System.ComponentModel.EditorBrowsableState"/> 初始化 <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/> 类的新实例。</summary><param name="state">要将 <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State"/> 设置成的 <see cref="T:System.ComponentModel.EditorBrowsableState"/>。 </param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
<summary>返回一个值，该值指示指定对象的值是否等于当前的 <see cref="T:System.ComponentModel.EditorBrowsableAttribute"/>。</summary>
<returns>如果给定对象的值等于当前对象的值，则为 true；否则为 false。</returns>
<param name="obj">要进行值的相等性测试的对象。 </param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.GetHashCode"></member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
<summary>获取属性或方法的可浏览状态。</summary>
<returns><see cref="T:System.ComponentModel.EditorBrowsableState"/>，它是属性或方法的可浏览状态。</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
<summary>在编辑器中指定属性或方法的可浏览状态。 </summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
<summary>该属性或方法在编辑器中始终是可浏览的。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
<summary>该属性或方法始终不能在编辑器中浏览。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
<summary>该属性或方法是只有高级用户才可以看到的功能。编辑器可以显示或隐藏这些属性。</summary>
    </member>
    <member name="T:System.ComponentModel.IChangeTracking">
<summary>定义查询对象更改以及重置更改后的状态的机制。 </summary>
    </member>
    <member name="M:System.ComponentModel.IChangeTracking.AcceptChanges">
<summary>通过接受修改将对象的状态重置为更改前的状态。 </summary>
    </member>
    <member name="P:System.ComponentModel.IChangeTracking.IsChanged">
<summary>获取对象更改后的状态。</summary>
<returns>如果自上次调用 <see cref="M:System.ComponentModel.IChangeTracking.AcceptChanges"/> 后对象的内容发生了更改，则为 true；否则为 false。 </returns>
    </member>
    <member name="T:System.ComponentModel.IComponent">
<summary>当由某个类实现时，获取或设置与组件关联的 <see cref="T:System.ComponentModel.ISite"/>。</summary>
    </member>
    <member name="E:System.ComponentModel.IComponent.Disposed">
<summary>添加事件处理程序以侦听组件上的 Disposed 事件。</summary>
    </member>
    <member name="P:System.ComponentModel.IComponent.Site">
<summary>当由某个类实现时，获取或设置与组件关联的 <see cref="T:System.ComponentModel.ISite"/>。</summary>
<returns>与组件关联的 <see cref="T:System.ComponentModel.ISite"/>。</returns>
    </member>
    <member name="T:System.ComponentModel.IContainer">
<summary>提供容器的功能。容器是在逻辑上包含零个或更多个组件的对象。 </summary>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent)">
<summary>向容器中添加组件。</summary> <param name="component">要添加的组件。</param>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent,System.String)">
<summary>向容器中添加组件。</summary> <param name="component">要添加的组件。</param> <param name="name">标识组件的名称。</param>
    </member>
    <member name="P:System.ComponentModel.IContainer.Components">
<summary>获取 <see cref="T:System.ComponentModel.IContainer"/> 中的所有组件。</summary>
<returns><see cref="T:System.ComponentModel.IContainer"/> 中组件的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.IContainer.Remove(System.ComponentModel.IComponent)">
<summary>从容器中移除组件。</summary> <param name="component">要移除的组件。</param>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
<summary>定义数据实体类可以实现以提供自定义验证支持的属性。 </summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
<summary>获取描述该对象的任何验证错误的消息。</summary>
<returns>有关该对象的验证错误；如果不存在任何错误，则为 null 或 <see cref="F:System.String.Empty"/>。 </returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
<summary>获取描述指定属性或列名的任何验证错误的消息。</summary>
<returns>有关该指定属性的验证错误；如果不存在任何错误，则为 null 或 <see cref="F:System.String.Empty"/>。</returns>
<param name="columnName">要检索其验证错误的属性或列的名称。</param>
    </member>
    <member name="T:System.ComponentModel.IEditableObject">
<summary>表示具有编辑模式并能够提交或恢复更改的对象。 </summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.BeginEdit">
<summary>导致对象进入编辑模式。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.CancelEdit">
<summary>导致对象退出编辑模式并恢复前一未编辑的值。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.EndEdit">
<summary>导致对象退出编辑模式并提交已编辑的值。</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanged">
<summary>向客户端发出某一属性值已更改的通知。</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
<summary>在更改属性值时发生。</summary>
    </member>
    <member name="T:System.ComponentModel.IRevertibleChangeTracking">
<summary>提供对回滚更改的支持。</summary>
    </member>
    <member name="M:System.ComponentModel.IRevertibleChangeTracking.RejectChanges">
<summary>通过拒绝修改，将对象的状态重置为更改前的状态。 </summary>
    </member>
    <member name="T:System.ComponentModel.ISite">
<summary>提供站点所需的功能。站点将组件绑定到容器，并启用它们之间的通信，同时为该容器提供了一种管理其组件的方法。 </summary>
    </member>
    <member name="P:System.ComponentModel.ISite.Component">
<summary>当由类实现时，获取与 <see cref="T:System.ComponentModel.ISite"/> 关联的组件。</summary>
<returns>与 <see cref="T:System.ComponentModel.ISite"/> 关联的组件。</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Container">
<summary>当由类实现时，获取与 <see cref="T:System.ComponentModel.ISite"/> 关联的容器。</summary>
<returns>与 <see cref="T:System.ComponentModel.ISite"/> 关联的容器。</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.DesignMode">
<summary>当由类实现时，确定组件是否处于设计模式。</summary>
<returns>如果处于设计模式，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Name">
<summary>当由类实现时，获取或设置与 <see cref="T:System.ComponentModel.ISite"/> 关联的组件的名称。</summary>
<returns>组件的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitialize">
<summary>指定该对象支持对批初始化的简单的事务处理通知。</summary>
    </member>
    <member name="M:System.ComponentModel.ISupportInitialize.BeginInit">
<summary>用信号通知对象初始化即将开始。</summary>
    </member>
    <member name="M:System.ComponentModel.ISupportInitialize.EndInit">
<summary>用信号通知对象初始化已完成。</summary>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
<summary>提供有关类型转换器或值编辑器的上下文的信息，以便类型转换器或编辑器能够执行转换。</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
<summary>获取具有此格式化程序的一组对象的容器。</summary>
<returns>具有此格式化程序的一组对象的容器。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
<summary>获取对格式化程序对象调用此方法的实例。</summary>
<returns>对格式化程序对象调用此方法的实例。</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
<summary>引发 <see cref="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged"/> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
<summary>获取一个值，该值指示此对象是否可更改。</summary>
<returns>如果该对象可以更改，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
<summary>获取在图面上显示给定上下文项的 <see cref="T:System.ComponentModel.PropertyDescriptor"/>。</summary>
<returns>在图面上显示给定上下文项的 <see cref="T:System.ComponentModel.PropertyDescriptor"/>。</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
<summary>指定排序操作的方向。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
<summary>按升序排序。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
<summary>按降序排序。</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
<summary>指定支持基于查找的绑定的属性。 </summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
<summary>不带参数初始化 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
<summary>初始化 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"/> 类的新实例。</summary> <param name="dataSource">要用作数据源的属性的名称。</param> <param name="displayMember">要用作显示名称的属性的名称。</param> <param name="valueMember">要用作值的源的属性的名称。</param> <param name="lookupMember">要用于查找的属性的名称。</param>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
<summary>获取 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"/> 所绑定组件的数据源属性的名称。</summary>
<returns><see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"/> 所绑定组件的数据源属性。</returns>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
<summary>表示 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"/> 类的默认值。</summary>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
<summary>获取 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"/> 所绑定组件的显示成员属性的名称。</summary>
<returns><see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"/> 所绑定组件的显示成员属性的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
<summary>确定指定的 <see cref="T:System.Object"/> 是否等于当前 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"/> 实例。 </summary>
<returns>如果该对象等于当前的实例，则为 true；如果不相等，则为 false。</returns>
<param name="obj">要与当前 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"/> 实例比较的 <see cref="T:System.Object"/>。</param>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
<summary>返回此实例的哈希代码。</summary>
<returns>当前 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"/> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
<summary>获取该属性所绑定到组件的查找成员的名称。</summary>
<returns><see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"/> 所绑定组件的查找成员的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
<summary>获取 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"/> 所绑定组件的值成员属性的名称。</summary>
<returns><see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute"/> 所绑定组件的值成员属性的名称。</returns>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventArgs">
<summary>为 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged"/> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)">
<summary>初始化 <see cref="T:System.ComponentModel.ProgressChangedEventArgs"/> 类的新实例。</summary><param name="progressPercentage">已完成的异步操作的百分比。</param> <param name="userState">唯一的用户状态。</param>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">
<summary>获取已完成的异步操作的百分比。</summary>
<returns>指示异步操作进度的百分比值。</returns>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.UserState">
<summary>获取唯一的用户状态。</summary>
<returns>指示用户状态的唯一 <see cref="T:System.Object"/>。</returns>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventHandler">
<summary>表示将处理当 <see cref="T:System.ComponentModel.BackgroundWorker"/> 报告进度时引发的 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged"/> 事件的方法。</summary><param name="sender">事件的源。</param> <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ProgressChangedEventArgs"/>。 </param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventArgs">
<summary>为 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)">
<summary>初始化 <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> 类的新实例。</summary><param name="propertyName">已更改的属性的名称。 </param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName">
<summary>获取已更改的属性的名称。</summary>
<returns>已更改的属性的名称；如果所有属性均已更改，则为 <see cref="F:System.String.Empty"/> 或 null。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventHandler">
<summary>表示将处理 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> 事件的方法。</summary><param name="sender">事件的源。</param> <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/>。 </param>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
<summary>提供属性的说明。</summary>
    </member>
    <member name="T:System.ComponentModel.ReadOnlyAttribute">
<summary>指定该特性所应用到的属性是只读属性还是读/写属性。</summary>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
<summary>初始化 <see cref="T:System.ComponentModel.ReadOnlyAttribute"/> 类的新实例。</summary> <param name="isReadOnly">如果该特性所应用到的属性为只读属性，则为 true；如果该属性为读/写属性，则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)">
<summary>返回此实例与指定对象是否相等。</summary>
<returns>如果 <paramref name="obj"/> 等于此实例，则为 true；否则为 false。 </returns>
<param name="obj">要比较的对象。 </param>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.GetHashCode">
<summary>返回此实例的哈希代码。 </summary>
<returns>当前 <see cref="T:System.ComponentModel.ReadOnlyAttribute"/> 的哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
<summary>获取一个值，该值指示该特性应用到的属性是否为只读属性。 </summary>
<returns>如果该特性所应用到的属性为只读属性，则为 true；如果该属性为读/写属性，则为 false。 </returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventArgs">
<summary>为 <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"/> 事件提供数据。</summary>
    </member>
    <member name="M:System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)">
<summary>初始化 <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs"/> 类的新实例。</summary><param name="result">异步操作的结果。</param> <param name="error">异步操作期间发生错误。</param> <param name="cancelled">一个值，该值指示是否已取消异步操作。</param>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result">
<summary>获取表示异步操作结果的值。</summary>
<returns>表示异步操作结果的 <see cref="T:System.Object"/>。</returns>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventHandler">
<summary>表示将处理 <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"/> 事件的方法，该事件将在 <see cref="T:System.ComponentModel.BackgroundWorker"/> 执行的操作完成、取消或引发异常时引发。</summary><param name="sender">事件的源。</param> <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs"/>。 </param>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
<summary>提供一种将值类型转换为其他类型的统一方式。<see cref="T:System.ComponentModel.TypeConverter"/> 通常支持字符串到对象的转换，目的是供设计环境中的属性编辑器使用或者是为了能够使用 XAML。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
<summary>初始化 <see cref="T:System.ComponentModel.TypeConverter"/> 类的新实例。 </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
<summary>返回一个值，该值指示类型转换器能否将指定类型的对象转换为此转换器的类型。</summary>
<returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
<param name="context">提供格式上下文的对象。</param> <param name="sourceType">要从其进行转换的类型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
<summary>返回一个值，该值指示类型转换器能否将指定类型的对象转换为此转换器的类型。</summary>
<returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
<param name="sourceType">要从其进行转换的类型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
<summary>返回指示类型转换器能否将对象转换为指定类型的值。 </summary>
<returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
<param name="context">提供格式上下文的对象。</param> <param name="destinationType">转换的目标类型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
<summary>返回指示类型转换器能否将对象转换为指定类型的值。 </summary>
<returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
<param name="destinationType">转换的目标类型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
<summary>从指定值转换为此转换器的预期转换类型。</summary>
<returns>转换后的值。</returns>
<param name="context">提供格式上下文的对象。</param> <param name="culture">用作当前区域性的 <see cref="T:System.Globalization.CultureInfo"/>。</param> <param name="value">要转换为此转换器的类型的值。</param>
      <exception cref="T:System.NotImplementedException">
<see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/> 未在基 <see cref="T:System.ComponentModel.TypeConverter"/> 中实现。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
<summary>从指定值转换为此转换器的类型。</summary>
<returns>转换后的值。</returns>
<param name="value">要转换为此转换器的类型的值。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
<summary>将指定文本转换为对象。</summary>
<returns>一个对象，表示转换后的文本字符串。</returns>
<param name="text">要转换的对象的文本表示形式。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
<summary>将指定的值对象转换为指定的类型。</summary>
<returns>转换后的对象。</returns>
<param name="context">提供格式上下文的对象。</param> <param name="culture">用作当前区域性的 <see cref="T:System.Globalization.CultureInfo"/>。</param> <param name="value">要转换的对象。</param> <param name="destinationType">对象要转换为的类型。</param>
      <exception cref="T:System.NotImplementedException">
<see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/> 未在基 <see cref="T:System.ComponentModel.TypeConverter"/> 中实现。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
<summary>将指定的值对象转换为指定的类型。</summary>
<returns>转换后的对象。</returns>
<param name="value">要转换的对象。</param> <param name="destinationType">对象要转换为的类型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
<summary>将指定的对象转换为字符串表示形式。</summary>
<returns>一个对象，表示转换后的值。</returns>
<param name="value">要转换的对象</param>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
<summary>指定要用作此特性所绑定到的类型或属性的类型转换器的类。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
<summary>初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute"/> 类的新实例。 </summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
<summary>通过将指定类型名称用作该属性所绑定到的对象的数据转换器，初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute"/> 类的新实例。</summary><param name="typeName">类的完全限定名称，该类将用于此属性所绑定到的对象的数据转换。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
<summary>通过将指定类型用作该属性所绑定到的对象的数据转换器，初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute"/> 类的新实例。</summary><param name="type">转换器类的类型，该类用于此属性所绑定到的对象的数据转换。</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
<summary>获取类型的完全限定类型名，该类型用作此属性所绑定到的对象的转换器。</summary>
<returns>类型的完全限定类型名，该类型用作此属性所绑定到的对象的转换器；如果不存在，则为空字符串 ("")。默认值为空字符串 ("")。</returns>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor">
<summary>初始化 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs"/> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
<summary>比较指定对象与 <see cref="T:System.ComponentModel.TypeConverterAttribute"/> 的当前实例的值是否相等。</summary>
<returns>如果 <paramref name="obj"/> 和此 <see cref="T:System.ComponentModel.TypeConverterAttribute"/> 实例具有相同的值，则为 true；否则为 false。</returns>
<param name="obj">要比较的对象。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
<summary>返回当前实例的哈希代码。</summary>
<returns>当前实例的哈希代码。</returns>
    </member>
    <member name="T:System.Diagnostics.Debug">
<summary>提供一组帮助您调试代码的方法和属性。无法继承此类。</summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean)">
<summary>检查条件，如果该条件为 false，则输出调用堆栈。</summary> <param name="condition">要计算的条件表达式。如果条件为 true，则不显示调用堆栈。 </param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)">
<summary>检查条件，如果该条件为 false，则显示指定的消息。</summary> <param name="condition">要计算的条件表达式。如果条件为 true，则不显示指定的消息。</param> <param name="message">要显示的消息。 </param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)">
<summary>检查条件，如果该条件为 false，则显示指定的两条消息。</summary> <param name="condition">要计算的条件表达式。如果条件为 true，则不显示指定的消息。</param> <param name="message">要显示的消息。</param> <param name="detailMessage">要显示的详细消息。 </param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])">
<summary>检查条件，如果该条件为 false，则输出消息和调用堆栈。</summary> <param name="condition">要计算的条件表达式。如果条件为 true，则不显示指定的消息和调用堆栈。</param><param name="message">要显示的消息。</param> <param name="detailMessageFormat">一个包含与零个或多个格式项混合的文本的复合格式字符串，这些格式项与 <paramref name="args"/> 数组中的对象相对应。</param><param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.Object)">
<summary>使用 OutputDebugString 函数将指定对象的 <see cref="M:System.Object.ToString"/> 方法的值写入调试器。</summary><param name="value">一个对象，其名称通过使用 OutputDebugString 函数发送到调试器。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String)">
<summary>使用 OutputDebugString 函数将指定的后跟行终止符的消息写入调试器。</summary> <param name="message">要写入调试器的消息。 </param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])">
<summary>使用 OutputDebugString 函数将后跟行终止符的带格式字符串写入调试器。</summary> <param name="format">一个包含与零个或多个格式项混合的文本的复合格式字符串，这些格式项与 <paramref name="args"/> 数组中的对象相对应。</param><param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。 </param>
    </member>
    <member name="T:System.Diagnostics.Stopwatch">
<summary>提供一组可以用来精确测量所用时间的方法和属性。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.#ctor">
<summary>初始化 <see cref="T:System.Diagnostics.Stopwatch"/> 类的新实例。</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.Elapsed">
<summary>获取由当前实例测量的所用总时间。</summary>
<returns>一个只读的 <see cref="T:System.TimeSpan"/>，表示当前实例测量的总时间。</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
<summary>获取由当前实例测量的所用总时间（以毫秒为单位）。</summary>
<returns>一个只读长整型值，表示当前实例测量的总毫秒数。</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
<summary>获取由当前实例测量的所用总时间（以计时器滴答数为单位）。</summary>
<returns>一个只读长整型值，表示由当前实例测量的计时器总滴答数。</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.Frequency">
<summary>以每秒滴答数的形式获取计时器的频率。此字段为只读。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetTimestamp">
<summary>获取计时器机制中的当前滴答数。</summary>
<returns>一个长整型值，表示基础计时器机制的滴答计数器值。</returns>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.IsHighResolution">
<summary>指示计数器是否基于高分辨率性能计数器。此字段为只读。</summary>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.IsRunning">
<summary>获取一个值，该值指示 <see cref="T:System.Diagnostics.Stopwatch"/> 计时器是否正在运行。</summary>
<returns>如果 <see cref="T:System.Diagnostics.Stopwatch"/> 实例当前正在运行并且正在测量某个间隔的所用时间，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Reset">
<summary>停止时间间隔测量并将所用时间重置为零。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Start">
<summary>开始或恢复测量某个间隔的所用时间。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.StartNew">
<summary>初始化新的 <see cref="T:System.Diagnostics.Stopwatch"/> 实例，将所用时间属性设置为零并开始测量所用时间。</summary>
<returns>返回一个刚刚开始测量所用时间的 <see cref="T:System.Diagnostics.Stopwatch"/>。</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Stop">
<summary>停止测量某个间隔的所用时间。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.Capture">
<summary>表示来自单个子表达式捕获的结果。 </summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
<summary>原始字符串中发现捕获的子字符串的第一个字符的位置。</summary>
<returns>原始字符串中发现捕获的子字符串的从零开始的起始位置。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
<summary>捕获的子字符串的长度。</summary>
<returns>捕获的子字符串的长度。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
<summary>从输入字符串中获取捕获的子字符串。</summary>
<returns>通过匹配捕获的实际子字符串。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
<summary>从输入字符串中获取捕获的子字符串。</summary>
<returns>通过匹配捕获的实际子字符串。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
<summary>表示一个捕获组做出的捕获的集合。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
<summary>将集合的所有元素复制到给定数组中（从给定索引处开始）。</summary> <param name="array">要将集合复制到其中的目标数组。</param> <param name="arrayIndex">目标数组中开始复制的位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="arrayIndex"/> 在 <paramref name="array"/> 的界限外。-或<paramref name="arrayIndex"/> 加 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count"/> 在 <paramref name="array"/> 的界限外。 </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
<summary>获取此组捕获的子字符串的数量。</summary>
<returns><see cref="T:System.Text.RegularExpressions.CaptureCollection"/> 中的项数。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
<summary>提供迭代通过集合的枚举器。</summary>
<returns>一个对象，该对象包含 <see cref="T:System.Text.RegularExpressions.CaptureCollection"/> 中的所有 <see cref="T:System.Text.RegularExpressions.Capture"/> 对象。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
<summary>获取一个值，该值指示集合是否为只读。</summary>
<returns>在任何情况下均为 true。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
<summary>获取一个值，该值指示对集合的访问是否同步（线程安全）。</summary>
<returns>在任何情况下均为 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
<summary>获取该集合的单个成员。</summary>
<returns>位于集合中 <paramref name="i"/> 位置的捕获子字符串。</returns>
<param name="i">捕获集合中的索引。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="i"/> 小于 0 或者大于 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count"/>。 </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
<summary>获取可用于同步对集合的访问的对象。</summary>
<returns>可用于同步对集合的访问的对象。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
<summary>表示单个捕获组的结果。</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
<summary>按从里到外、从左到右的顺序获取由捕获组匹配的所有捕获的集合（如果正则表达式用 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft"/> 选项修改了，则顺序为按从里到外、从右到左）。该集合可以有零个或更多的项。</summary>
<returns>由该组匹配的子字符串的集合。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
<summary>获取一个值，该值指示匹配是否成功。</summary>
<returns>如果匹配成功，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
<summary>表示单个匹配项中捕获到的组的集合。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
<summary>将集合的所有元素复制到给定数组中（从给定索引处开始）。</summary> <param name="array">要将集合复制到其中的目标数组。</param> <param name="arrayIndex">目标数组中开始复制的位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="array"/> 为 null。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
<paramref name="arrayIndex"/> 在 <paramref name="array"/> 的界限外。-或<paramref name="arrayIndex"/> 加 <see cref="P:System.Text.RegularExpressions.GroupCollection.Count"/> 在 <paramref name="array"/> 的界限外。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
<summary>返回集合中的组数。</summary>
<returns>集合中的组数。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
<summary>返回可迭代通过集合的枚举器。</summary>
<returns>一个对象，该对象包含 <see cref="T:System.Text.RegularExpressions.GroupCollection"/> 中的所有 <see cref="T:System.Text.RegularExpressions.Group"/> 对象。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
<summary>获取一个值，该值指示集合是否为只读。</summary>
<returns>如果此 <see cref="T:System.Text.RegularExpressions.GroupCollection"/> 为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
<summary>获取一个值，该值指示是否同步对 <see cref="T:System.Text.RegularExpressions.GroupCollection"/> 的访问（线程安全）。</summary>
<returns>在任何情况下均为 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
<summary>允许通过整数索引访问集合成员。</summary>
<returns>由 <paramref name="groupnum"/> 指定的集合的成员。</returns>
<param name="groupnum">要检索的集合成员的索引（从零开始）。 </param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
<summary>允许通过字符串索引访问集合成员。</summary>
<returns>由 <paramref name="groupname"/> 指定的集合的成员。</returns>
<param name="groupname">捕获组的名称。</param>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
<summary>获取一个对象，该对象可以用于同步对 <see cref="T:System.Text.RegularExpressions.GroupCollection"/> 的访问。</summary>
<returns>要同步的 <see cref="T:System.Text.RegularExpressions.Match"/> 对象的副本。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
<summary>表示单个正则表达式匹配的结果。</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
<summary>获取空组。所有失败的匹配都返回此空匹配。</summary>
<returns>空 <see cref="T:System.Text.RegularExpressions.Match"/>。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
<summary>获取由正则表达式匹配的组的集合。</summary>
<returns>由模式匹配的字符组。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
<summary>从上一个匹配结束的位置（即在上一个匹配字符之后的字符）开始返回一个包含下一个匹配结果的新 <see cref="T:System.Text.RegularExpressions.Match"/> 对象。</summary>
<returns>下一个正则表达式匹配。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
<summary>返回对指定替换模式的扩展。 </summary>
<returns><paramref name="replacement"/> 参数的扩展版本。</returns>
<param name="replacement">要使用的替换模式。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="replacement"/> 为 null。</exception>
<exception cref="T:System.NotSupportedException">不允许对此模式进行扩展。</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
<summary>表示通过以迭代方式将正则表达式模式应用于输入字符串所找到的成功匹配的集合。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
<summary>从给定索引处开始将集合的所有元素复制到给定数组。</summary> <param name="array">要将集合复制到其中的目标数组。</param> <param name="arrayIndex">数组中开始复制的位置。 </param>
      <exception cref="T:System.ArgumentException">
<paramref name="array"/> 是多维数组。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
<paramref name="arrayIndex"/> 在 <paramref name="array"/> 的界限外。-或<paramref name="arrayIndex"/> 加 <see cref="P:System.Text.RegularExpressions.GroupCollection.Count"/> 在 <paramref name="array"/> 的界限外。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
<summary>获取匹配项的数目。</summary>
<returns>匹配项的数目。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
<summary>以与 <see cref="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)"/> 相同的顺序提供一个枚举器。</summary>
<returns>一个 <see cref="T:System.Collections.IEnumerator"/> 对象，该对象包含 MatchCollection 中的所有 Match 对象。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
<summary>获取一个指示集合是否为只读的值。</summary>
<returns>此属性的值始终为 true。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
<summary>获取一个值，该值指示对集合的访问是否同步（线程安全）。</summary>
<returns>此属性的值始终为 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
<summary>获取该集合的单个成员。</summary>
<returns>位于集合中 <paramref name="i"/> 位置的捕获子字符串。</returns>
<param name="i">Match 集合中的索引。 </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="i"/> 小于 0，或者大于或等于 <see cref="P:System.Text.RegularExpressions.MatchCollection.Count"/>。 </exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
<summary>获取可用于同步对集合的访问的对象。</summary>
<returns>可用于同步对集合的访问的对象。此属性始终返回对象本身。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
<summary>表示在 <see cref="Overload:System.Text.RegularExpressions.Regex.Replace"/> 方法操作过程中每当找到正则表达式匹配时都调用的方法。</summary>
<returns>由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> 委托表示的方法返回的字符串。</returns>
<param name="match"><see cref="T:System.Text.RegularExpressions.Match"/> 对象，表示 <see cref="Overload:System.Text.RegularExpressions.Regex.Replace"/> 方法操作过程中的单个正则表达式匹配。 </param>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
<summary>表示不可变的正则表达式。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
<summary>初始化 <see cref="T:System.Text.RegularExpressions.Regex"/> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
<summary>为指定的正则表达式初始化并编译 <see cref="T:System.Text.RegularExpressions.Regex"/> 类的一个新实例。</summary><param name="pattern">要匹配的正则表达式模式。 </param>
<exception cref="T:System.ArgumentException">发生正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="pattern"/> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
<summary>用修改模式的选项为指定的正则表达式初始化并编译 <see cref="T:System.Text.RegularExpressions.Regex"/> 类的一个新实例。</summary><param name="pattern">要匹配的正则表达式模式。</param> <param name="options">枚举值的按位组合。 </param>
<exception cref="T:System.ArgumentException">发生正则表达式分析错误。 </exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="pattern"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="options"/> 包含无效标志。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CacheSize">
<summary>获取或设置已编译的正则表达式的当前静态缓存中的最大项数。</summary>
<returns>静态缓存中的最大项数。</returns>
<exception cref="T:System.ArgumentOutOfRangeException">Set 操作中的值小于零。</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capsize">
<summary>由正则表达式引擎在内部使用。 </summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capslist">
<summary>由正则表达式引擎在内部使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
<summary>通过替换为转义码来转义最小的字符集（\、*、+、?、|、{、[、(、)、^、$、.、# 和空白）。这将指示正则表达式引擎按原义解释这些字符而不是解释为元字符。</summary>
<returns>包含任何已转换为转义形式的元字符的字符串。</returns>
<param name="str">包含要转换的文本的输入字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="str"/> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
<summary>返回正则表达式的捕获组名称的数组。</summary>
<returns>组名称的字符串数组。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
<summary>返回与数组中的组名称相对应的捕获组号的数组。</summary>
<returns>组号的整数数组。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
<summary>获取与指定组号相对应的组名称。</summary>
<returns>包含与指定组号关联的组名称的字符串。如果没有与 <paramref name="i"/> 对应的组名称，此方法将返回 <see cref="F:System.String.Empty"/>。</returns>
<param name="i">要转换为相应组名称的组号。 </param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
<summary>返回与指定组名称相对应的组号。</summary>
<returns>与指定组名称相对应的组号。</returns>
<param name="name">要转换为相应组号的组名称。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="name"/> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.InitializeReferences">
<summary>由正则表达式引擎在内部使用。 </summary>
<exception cref="T:System.NotSupportedException">引用已初始化。 </exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
<summary>指示 <see cref="T:System.Text.RegularExpressions.Regex"/> 构造函数中指定的正则表达式在输入字符串中是否找到匹配项。</summary>
<returns>如果正则表达式找到匹配项，则为 true；否则为 false。</returns>
<param name="input">要搜索匹配项的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
<summary>指示 <see cref="T:System.Text.RegularExpressions.Regex"/> 构造函数中指定的正则表达式从输入字符串的指定起始位置开始是否找到匹配项。</summary>
<returns>如果正则表达式找到匹配项，则为 true；否则为 false。</returns>
<param name="input">要搜索匹配项的字符串。</param> <param name="startat">开始搜索的字符位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startat"/> 不能小于零或大于 <paramref name="input"/> 的长度。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
<summary> 指示正则表达式使用 <paramref name="pattern"/> 参数中指定的正则表达式是否在输入字符串中找到匹配项。</summary>
<returns>如果正则表达式找到匹配项，则为 true；否则为 false。</returns>
<param name="input">要搜索匹配项的字符串。</param> <param name="pattern">要匹配的正则表达式模式。 </param>
<exception cref="T:System.ArgumentException">发生正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或- <paramref name="pattern"/> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
<summary>指示正则表达式使用 <paramref name="options"/> 参数中指定的正则表达式和 <paramref name="pattern"/> 参数中提供的匹配选项是否在输入字符串中找到匹配项。</summary>
<returns>如果正则表达式找到匹配项，则为 true；否则为 false。</returns>
<param name="input">要搜索匹配项的字符串。</param> <param name="pattern">要匹配的正则表达式模式。</param> <param name="options">枚举值的按位组合。 </param>
<exception cref="T:System.ArgumentException">发生正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或- <paramref name="pattern"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="options"/> 不是有效的 <see cref="T:System.Text.RegularExpressions.RegexOptions"/> 值。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
<summary>在指定的输入字符串中搜索 <see cref="T:System.Text.RegularExpressions.Regex"/> 构造函数中指定的正则表达式的第一个匹配项。</summary>
<returns>包含有关匹配的信息的对象。 </returns>
<param name="input">要搜索匹配项的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
<summary>从指定的输入字符串起始位置开始在输入字符串中搜索正则表达式的第一个匹配项。</summary>
<returns>包含有关匹配的信息的对象。</returns>
<param name="input">要搜索匹配项的字符串。</param> <param name="startat">开始搜索的字符位置（从零开始）。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startat"/> 小于零或大于 <paramref name="input"/> 的长度。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
<summary>从指定的输入字符串起始位置开始在输入字符串中搜索具有指定输入字符串长度的正则表达式的第一个匹配项。</summary>
<returns>包含有关匹配的信息的对象。</returns>
<param name="input">要测试其匹配的字符串。</param> <param name="beginning">输入字符串中开始搜索的字符位置（从零开始）。</param> <param name="length">子字符串中包含在搜索中的字符数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="beginning"/> 小于零或者大于 <paramref name="input"/> 的长度。-或-<paramref name="length"/> 小于零或者大于 <paramref name="input"/> 的长度。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
<summary>在指定的输入字符串中搜索 <paramref name="pattern"/> 参数中提供的正则表达式的第一个匹配项。</summary>
<returns>包含有关匹配的信息的对象。</returns>
<param name="input">要搜索匹配项的字符串。</param> <param name="pattern">要匹配的正则表达式模式。 </param>
<exception cref="T:System.ArgumentException">发生正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或- <paramref name="pattern"/> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
<summary>在输入字符串中搜索 <paramref name="pattern"/> 参数中提供的正则表达式的第一个匹配项（匹配选项在 <paramref name="options"/> 参数中提供）。</summary>
<returns>包含有关匹配的信息的对象。</returns>
<param name="input">要测试其匹配的字符串。</param> <param name="pattern">要匹配的正则表达式模式。</param> <param name="options">枚举值的按位组合。 </param>
<exception cref="T:System.ArgumentException">发生正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或- <paramref name="pattern"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="options"/> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions"/> 值的有效按位组合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
<summary>在指定的输入字符串中搜索正则表达式的所有匹配项。</summary>
<returns>搜索操作找到的 <see cref="T:System.Text.RegularExpressions.Match"/> 对象的集合。如果没有找到任何匹配项，则此方法返回一个空的集合对象。</returns>
<param name="input">要搜索匹配项的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
<summary>从字符串中的指定起始位置开始，在指定的输入字符串中搜索正则表达式的所有匹配项。</summary>
<returns>搜索操作找到的 <see cref="T:System.Text.RegularExpressions.Match"/> 对象的集合。如果没有找到任何匹配项，则此方法返回一个空的集合对象。</returns>
<param name="input">要搜索匹配项的字符串。</param> <param name="startat">在输入字符串中开始搜索的字符位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startat"/> 小于零或大于 <paramref name="input"/> 的长度。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
<summary>在指定的输入字符串中搜索 <paramref name="pattern"/> 参数中指定的正则表达式的所有匹配项。</summary>
<returns>搜索操作找到的 <see cref="T:System.Text.RegularExpressions.Match"/> 对象的集合。如果没有找到任何匹配项，则此方法返回一个空的集合对象。</returns>
<param name="input">要搜索匹配项的字符串。</param> <param name="pattern">要匹配的正则表达式模式。 </param>
<exception cref="T:System.ArgumentException">发生正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或- <paramref name="pattern"/> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
<summary>在指定的输入字符串中搜索 <paramref name="pattern"/> 参数中提供的正则表达式的所有匹配项（匹配选项在 <paramref name="options"/> 参数中提供）。</summary>
<returns>搜索操作找到的 <see cref="T:System.Text.RegularExpressions.Match"/> 对象的集合。如果没有找到任何匹配项，则此方法返回一个空的集合对象。</returns>
<param name="input">要搜索匹配项的字符串。</param> <param name="pattern">要匹配的正则表达式模式。</param> <param name="options">枚举值的按位组合。 </param>
<exception cref="T:System.ArgumentException">发生正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或- <paramref name="pattern"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="options"/> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions"/> 值的有效按位组合。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
<summary>返回传入 <see cref="T:System.Text.RegularExpressions.Regex"/> 构造函数的选项。</summary>
<returns>已传入 Regex 构造函数的 <paramref name="options"/> 参数。</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.pattern">
<summary>由正则表达式引擎在内部使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
<summary>在指定的输入字符串内，使用指定的替换字符串替换与某个正则表达式模式匹配的所有字符串。 </summary>
<returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
<param name="input">要搜索匹配项的字符串。</param> <param name="replacement">替换字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或- <paramref name="replacement"/> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
<summary>在指定输入字符串内，使用指定替换字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。 </summary>
<returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
<param name="input">要搜索匹配项的字符串。</param> <param name="replacement">替换字符串。</param> <param name="count">可进行替换的最大次数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或- <paramref name="replacement"/> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
<summary>在指定输入子字符串内，使用指定替换字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。 </summary>
<returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
<param name="input">要搜索匹配项的字符串。</param> <param name="replacement">替换字符串。</param> <param name="count">可进行替换的最大次数。</param> <param name="startat">输入字符串中开始执行搜索的字符位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或- <paramref name="replacement"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startat"/> 小于零或大于 <paramref name="input"/> 的长度。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
<summary>在指定的输入字符串内，使用指定的替换字符串替换与指定正则表达式匹配的所有字符串。 </summary>
<returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
<param name="input">要搜索匹配项的字符串。</param> <param name="pattern">要匹配的正则表达式模式。</param> <param name="replacement">替换字符串。 </param>
<exception cref="T:System.ArgumentException">发生正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或-<paramref name="pattern"/> 为 null。-或-<paramref name="replacement"/> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
<summary>在指定的输入字符串内，使用指定的替换字符串替换与指定正则表达式匹配的所有字符串。指定的选项将修改匹配操作。 </summary>
<returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
<param name="input">要搜索匹配项的字符串。</param> <param name="pattern">要匹配的正则表达式模式。</param> <param name="replacement">替换字符串。</param> <param name="options">枚举值的按位组合。 </param>
<exception cref="T:System.ArgumentException">发生正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或-<paramref name="pattern"/> 为 null。-或-<paramref name="replacement"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="options"/> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions"/> 值的有效按位组合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
<summary>在指定的输入字符串内，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> 委托返回的字符串替换与指定正则表达式匹配的所有字符串。</summary>
<returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
<param name="input">要搜索匹配项的字符串。</param> <param name="pattern">要匹配的正则表达式模式。</param> <param name="evaluator">一个自定义方法，它检查每个匹配项，并返回原始匹配字符串或替换字符串。</param>
<exception cref="T:System.ArgumentException">发生正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或-<paramref name="pattern"/> 为 null。-或-<paramref name="evaluator"/> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
<summary>在指定的输入字符串内，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> 委托返回的字符串替换与指定正则表达式匹配的所有字符串。指定的选项将修改匹配操作。</summary>
<returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
<param name="input">要搜索匹配项的字符串。</param> <param name="pattern">要匹配的正则表达式模式。</param> <param name="evaluator">一个自定义方法，它检查每个匹配项，并返回原始匹配字符串或替换字符串。</param> <param name="options">枚举值的按位组合。 </param>
<exception cref="T:System.ArgumentException">发生正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或-<paramref name="pattern"/> 为 null。-或-<paramref name="evaluator"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="options"/> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions"/> 值的有效按位组合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
<summary>在指定的输入字符串内，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/> 委托返回的字符串替换与指定正则表达式匹配的所有字符串。</summary>
<returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
<param name="input">要搜索匹配项的字符串。</param> <param name="evaluator">一个自定义方法，它检查每个匹配项，并返回原始匹配字符串或替换字符串。</param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或- <paramref name="evaluator"/> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
<summary>在指定的输入字符串内，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/>委托返回的字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。</summary>
<returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
<param name="input">要搜索匹配项的字符串。</param> <param name="evaluator">一个自定义方法，它检查每个匹配项，并返回原始匹配字符串或替换字符串。</param> <param name="count">进行替换的最大次数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或- <paramref name="evaluator"/> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
<summary>在指定的输入子字符串内，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator"/>委托返回的字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。</summary>
<returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。</returns>
<param name="input">要搜索匹配项的字符串。</param> <param name="evaluator">一个自定义方法，它检查每个匹配项，并返回原始匹配字符串或替换字符串。</param> <param name="count">进行替换的最大次数。</param> <param name="startat">输入字符串中开始执行搜索的字符位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或- <paramref name="evaluator"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startat"/> 小于零或大于 <paramref name="input"/> 的长度。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
<summary>获取一个值，该值指示正则表达式是否从右向左进行搜索。</summary>
<returns>如果正则表达式从右向左进行搜索，则为 true；否则为 false。</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.roptions">
<summary>由正则表达式引擎在内部使用。 </summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
<summary>在由 <see cref="T:System.Text.RegularExpressions.Regex"/> 构造函数指定的正则表达式模式所定义的位置，拆分指定的输入字符串。</summary>
<returns>字符串数组。</returns>
<param name="input">要拆分的字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
<summary>在由 <see cref="T:System.Text.RegularExpressions.Regex"/> 构造函数中指定的正则表达式定义的位置，将指定的输入字符串拆分指定的最大次数。</summary>
<returns>字符串数组。</returns>
<param name="input">要拆分的字符串。</param> <param name="count">可拆分的最大次数。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
<summary>在由 <see cref="T:System.Text.RegularExpressions.Regex"/> 构造函数中指定的正则表达式定义的位置，将指定的输入字符串拆分指定的最大次数。从输入字符串的指定字符位置开始搜索正则表达式模式。</summary>
<returns>字符串数组。</returns>
<param name="input">要拆分的字符串。</param> <param name="count">可拆分的最大次数。</param> <param name="startat">输入字符串中开始执行搜索的字符位置。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="startat"/> 小于零或大于 <paramref name="input"/> 的长度。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
<summary>在由正则表达式模式定义的位置拆分输入字符串。</summary>
<returns>字符串数组。</returns>
<param name="input">要拆分的字符串。</param> <param name="pattern">要匹配的正则表达式模式。 </param>
<exception cref="T:System.ArgumentException">发生正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或- <paramref name="pattern"/> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
<summary>在由指定的正则表达式模式定义的位置拆分输入字符串。指定的选项将修改匹配操作。指定的选项将修改匹配操作。</summary>
<returns>字符串数组。</returns>
<param name="input">要拆分的字符串。</param> <param name="pattern">要匹配的正则表达式模式。</param> <param name="options">枚举值的按位组合。 </param>
<exception cref="T:System.ArgumentException">发生正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
<paramref name="input"/> 为 null。-或- <paramref name="pattern"/> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
<paramref name="options"/> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions"/> 值的有效按位组合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
<summary>返回传入 Regex 构造函数的正则表达式模式。</summary>
<returns>已传入 Regex 构造函数的 <paramref name="pattern"/> 参数。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
<summary>取消转义输入字符串中的任何转义字符。</summary>
<returns>包含任何转换为非转义形式的转义字符的字符串。</returns>
<param name="str">包含要转换的文本的输入字符串。 </param>
      <exception cref="T:System.ArgumentNullException">
<paramref name="str"/> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionR">
<summary>由正则表达式引擎在内部使用。</summary>
<returns>如果 <see cref="P:System.Text.RegularExpressions.Regex.Options"/> 属性包含 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft"/> 选项，则为 true；否则为 false。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
<summary>提供用于设置正则表达式选项的枚举值。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
<summary>指定不设置任何选项。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
<summary>指定不区分大小写的匹配。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
<summary>多行模式。更改 ^ 和 $ 的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
<summary>指定唯一有效的捕获是显式命名或编号的（?&lt;name&gt;…）形式的组。这使未命名的圆括号可以充当非捕获组，并且不会使表达式的语法（?:...）显得笨拙。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
<summary>指定单行模式。更改点（.）的含义，以使它与每个字符（而不是除 \n 之外的所有字符）匹配。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
<summary>消除模式中的非转义空白并启用由 # 标记的注释。但是，<see cref="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace"/> 值不会影响或消除字符类中的空白</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
<summary>指定搜索从右向左而不是从左向右进行。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
<summary>为表达式启用符合 ECMAScript 的行为。该值只能与 <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase"/> 和 <see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline"/> 值一起使用。该值与其他任何值一起使用均将导致异常。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
<summary>指定忽略语言中的区域性差异。通常，正则表达式引擎基于当前区域性的约定执行字符串比较。如果指定了 <see cref="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant"/> 选项，则使用固定区域性的约定。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Compiled">
<summary>指定将正则表达式编译为程序集。这会产生更快的执行速度，但会增加启动时间。在调用 <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)"/> 方法时，不应将此值分配给 <see cref="P:System.Text.RegularExpressions.RegexCompilationInfo.Options"/> 属性。仅在 Silverlight for Windows Phone 中提供，但不支持。</summary>
    </member>
  </members>
</doc>